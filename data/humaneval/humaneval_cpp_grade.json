[
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\n",
        "snippet": [
            "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n"
        ],
        "simplified": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "task_id": "99",
        "163": "float f = stof(value);\n\tint intf = (int)f;\n\tint diff_neg = abs(intf - f);\n\tint diff_pos = (int)f + 1 - f;\n\tif (diff_neg <= diff_pos)\n\t\treturn intf;\n\telse\n\t\treturn intf + 1;",
        "grade-163": {
            "execution": 0
        },
        "28": "double num = std::stod(value);\n  return num > 0 ? std::ceil(num) : std::floor(num);",
        "grade-28": {
            "execution": 0
        },
        "6": "long result;\n    // TODO: Write code to implement this function\n    float fl = stof(value);\n    float delta = fl - floor(fl);\n    if (delta < 0.5) {\n        result = floor(fl);\n    } else {\n        result = ceil(fl);\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "190": "return value.find(\".\") == std::string::npos ? std::stol(value) :\n\t\tstd::stol(value.substr(0, value.find(\".\"))) + (value.back() > '4');",
        "grade-190": {
            "execution": 0
        },
        "70": "int len = value.length();\n  int i = 0;\n  int l = 0;\n  while(i < len) {\n    if(value[i] == '.') {\n      l = len - i - 1;\n      break;\n    }\n    i++;\n  }\n  long v = std::stol(value.substr(0, i));\n  long p = std::stol(value.substr(i + 1, l));\n  long x = pow(10, l - 1);\n  if(p >= x / 2) {\n    v++;\n  }\n  return v;",
        "grade-70": {
            "execution": 0
        },
        "62": "int counter = 0;\n  int digit = 0;\n  std::string ret = \"\";\n  std::string ret2 = \"\";\n  if (value[0] == '-') {\n    counter = 1;\n  }\n  while (value[counter] != '.') {\n    ret += value[counter];\n    counter++;\n  }\n  // return ret;\n  if (ret.length() == 1) {\n    digit = stoi(ret);\n    if (digit < 9) {\n      digit++;\n    }\n    return digit;\n  }\n  for (int i = 0; i < ret.length(); i++) {\n    if (ret[i] == '0') {\n      ret2 += ret[i];\n    }\n    else if (ret[i] != '0') {\n      ret2 += ret[i];\n      break;\n    }\n  }\n  if (ret2.length() == 1) {\n    digit = stoi(ret2);\n    if (digit < 9) {\n      digit++;\n    }\n    return digit;\n  }\n  if (value[0] == '-') {\n    digit = stoi(ret2);\n    if (digit > -9) {\n      digit--;\n    }\n    return digit;\n  }\n  digit = stoi(ret2);\n  if (digit < 9) {\n    digit++;\n  }\n  return digit;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::stringstream ss(value);\n\tdouble d;\n\tss >> d;\n\treturn d > 0 ? std::floor(d) : std::ceil(d);",
        "grade-57": {
            "execution": 0
        },
        "35": "std::istringstream ss(value);\n    double i;\n    ss >> i;\n    //why do we need to do this?\n    i+=0.5;\n    std::cout << \"Value \" << i << std::endl;\n    return (int)i;",
        "grade-35": {
            "execution": 0
        },
        "189": "int val = std::stoi(value);\n    int decimal = std::stoi(value.substr(value.find('.')+1));\n    if(decimal >= 5) {\n        return val + 1;\n    }\n    return val;",
        "grade-189": {
            "execution": 0
        },
        "26": "long x=stol(value);\n  return x%1>=0.5?x+1:x;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (value.empty()) {\n    return 0;\n  }\n  int pos = value.find('.');\n  if (pos == -1) {\n    return std::stol(value);\n  } else {\n    return std::stol(value.substr(0, pos));\n  }",
        "grade-174": {
            "execution": 0
        },
        "139": "double d = std::stod(value);\n    int x = d;\n    if(fabs(d-x) > 0.5) return x+1;\n    return x;",
        "grade-139": {
            "execution": 0
        },
        "22": "//return std::stol(value);\n    long int rv = std::stol(value);\n    double fv = std::stod(value);\n    if (fv - rv >= 0.5) {\n        return rv + 1;\n    }\n    return rv;",
        "grade-22": {
            "execution": 0
        },
        "151": "double dval = stod(value);\n    long sign = dval > 0 ? 1 : -1;\n    return sign * round(abs(dval));",
        "grade-151": {
            "execution": 0
        },
        "108": "// your code goes here\n  int n = value.size();\n  double sz = n;\n  double num=0;\n  for(int i=0;i<n;i++){\n    if(value[i]=='.'){\n      sz=i;\n      continue;\n    }\n    int curr = value[i]-'0';\n    num = num*10 + curr;\n  }\n  int power = n-sz-1;\n  num = num*pow(10,power);\n  //std::cout<<num<<std::endl;\n  if(value[0]!='-'){\n    int a = ceil(num);\n    int b = floor(num);\n    if(a-num<num-b){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }\n  else{\n    int a = floor(num);\n    int b = ceil(num);\n    if(a-num<num-b){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string str;\n  int i = 0;\n  int flag = 0;\n  int decimal_count = 0;\n  for(char c : value) {\n    if(c == '.') {\n      flag = 1;\n      decimal_count++;\n    }\n    if(decimal_count > 1) {\n      return -1;\n    }\n    if(flag && c == '.') {\n      break;\n    }\n    if(flag) {\n      str += c;\n    }\n    i++;\n  }\n  if(str.size() == 0) {\n    return atoi(value.c_str());\n  }\n  if(str.size() > 2) {\n    return -1;\n  }\n  i--;\n  long decimal_part = atoi(str.c_str());\n  long integer_part = atoi(value.substr(0, i).c_str());\n  if(decimal_part >= 50) {\n    return integer_part + 1;\n  }\n  else {\n    return integer_part;\n  }",
        "grade-8": {
            "execution": 0
        },
        "7": "if(value[0] == '-')\n        return ceil(std::stod(value)) < floor(std::stod(value)) ? ceil(std::stod(value)) : floor(std::stod(value));\n    else\n        return floor(std::stod(value)) < ceil(std::stod(value)) ? ceil(std::stod(value)) : floor(std::stod(value));",
        "grade-7": {
            "execution": 0
        },
        "23": "float number = atof(value.c_str());\n  float rounded = 0;\n  if (number > 0)\n    rounded = floor(number + 0.5);\n  else\n    rounded = ceil(number - 0.5);\n  return (long)rounded;",
        "grade-23": {
            "execution": 1
        },
        "55": "double val = std::stod(value);\n    if ((int)(val) == val)\n        return (int)(val);\n    return (val > 0) ? (int)(val+0.5) : (int)(val-0.5);",
        "grade-55": {
            "execution": 1
        },
        "59": "// Write your code here\ndouble str_value = std::stod(value);\nif (std::floor(str_value) == std::ceil(str_value)) {\nreturn str_value;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.027748680799915784,
        "bleu-28": 0.07261813302549418,
        "bleu-6": 0.03866777965921546,
        "bleu-190": 0.03849398748735214,
        "bleu-70": 0.02589695065714183,
        "bleu-62": 0.006311595561103515,
        "bleu-57": 0.042899165700759294,
        "bleu-35": 0.025334795699203178,
        "bleu-189": 0.05879832752933829,
        "bleu-26": 0.08282282660969603,
        "bleu-174": 0.06085001459780849,
        "bleu-139": 0.04266060687644715,
        "bleu-22": 0.030939009100184954,
        "bleu-151": 0.08635800047213177,
        "bleu-108": 0.008826252223033048,
        "bleu-8": 0.04493782585073885,
        "bleu-7": 0.021338602710278872,
        "bleu-23": 0.19999595980000806,
        "bleu-55": 0.03932900688893963,
        "bleu-59": 0.03784649355444829,
        "codebleu-163": 0.5257142857142857,
        "codebleu-28": 0.5066666666666666,
        "codebleu-6": 0.5514285714285714,
        "codebleu-190": 0.5123809523809523,
        "codebleu-70": 0.5961904761904762,
        "codebleu-62": 0.6533333333333333,
        "codebleu-57": 0.5257142857142857,
        "codebleu-35": 0.47428571428571425,
        "codebleu-189": 0.6152380952380951,
        "codebleu-26": 0.37809523809523804,
        "codebleu-174": 0.6152380952380951,
        "codebleu-139": 0.5323809523809523,
        "codebleu-22": 0.5771428571428571,
        "codebleu-151": 0.539047619047619,
        "codebleu-108": 0.6409523809523809,
        "codebleu-8": 0.6279801139880576,
        "codebleu-7": 0.4619047619047618,
        "codebleu-23": 0.7058688248455083,
        "codebleu-55": 0.5323809523809523,
        "codebleu-59": 0.5257142857142857,
        "chrf-163": 0.24079152944265253,
        "chrf-28": 0.32788279260512015,
        "chrf-6": 0.2467262183716294,
        "chrf-190": 0.24617416857073762,
        "chrf-70": 0.2167137417910162,
        "chrf-62": 0.116361461895203,
        "chrf-57": 0.3104184377994524,
        "chrf-35": 0.2747734776856757,
        "chrf-189": 0.2636044961462024,
        "chrf-26": 0.25210822012724354,
        "chrf-174": 0.27193541359729867,
        "chrf-139": 0.32089222878813656,
        "chrf-22": 0.2831963050762909,
        "chrf-151": 0.3592652702660332,
        "chrf-108": 0.1612427343824786,
        "chrf-8": 0.19759092138515968,
        "chrf-7": 0.16917417831030448,
        "chrf-23": 0.4554104305732175,
        "chrf-55": 0.2908104319514413,
        "chrf-59": 0.2667750922441053,
        "rougel-163": 0.26666666666666666,
        "rougel-28": 0.37735849056603776,
        "rougel-6": 0.2926829268292683,
        "rougel-190": 0.24390243902439024,
        "rougel-70": 0.18055555555555555,
        "rougel-62": 0.09491525423728814,
        "rougel-57": 0.2711864406779661,
        "rougel-35": 0.22500000000000003,
        "rougel-189": 0.35135135135135137,
        "rougel-26": 0.3111111111111111,
        "rougel-174": 0.30952380952380953,
        "rougel-139": 0.3448275862068966,
        "rougel-22": 0.2894736842105263,
        "rougel-151": 0.4230769230769231,
        "rougel-108": 0.13043478260869565,
        "rougel-8": 0.14492753623188404,
        "rougel-7": 0.1774193548387097,
        "rougel-23": 0.38356164383561636,
        "rougel-55": 0.29629629629629634,
        "rougel-59": 0.2950819672131147,
        "meteor-163": 0.2469135802469136,
        "meteor-28": 0.42845022624434387,
        "meteor-6": 0.28,
        "meteor-190": 0.3195041322314049,
        "meteor-70": 0.2690835949764521,
        "meteor-62": 0.1511879049676026,
        "meteor-57": 0.41712555066079293,
        "meteor-35": 0.297519041218638,
        "meteor-189": 0.39635688986338335,
        "meteor-26": 0.2497799295774648,
        "meteor-174": 0.420817136378361,
        "meteor-139": 0.42441755463247244,
        "meteor-22": 0.3073770491803278,
        "meteor-151": 0.4820269016697588,
        "meteor-108": 0.18844221105527642,
        "meteor-8": 0.3407407407407408,
        "meteor-7": 0.23519755462470282,
        "meteor-23": 0.4415197095435685,
        "meteor-55": 0.38521432669453326,
        "meteor-59": 0.26200873362445415,
        "ruby-163": 0.14814814814814814,
        "ruby-28": 0.21875,
        "ruby-6": 0.19672131147540983,
        "ruby-190": 0.14754098360655743,
        "ruby-70": 0.10569105691056913,
        "ruby-62": 0.051094890510948954,
        "ruby-57": 0.1578947368421053,
        "ruby-35": 0.10169491525423724,
        "ruby-189": 0.2264150943396226,
        "ruby-26": 0.04166666666666663,
        "ruby-174": 0.2063492063492064,
        "ruby-139": 0.18918918918918914,
        "ruby-22": 0.18181818181818177,
        "ruby-151": 0.25806451612903225,
        "ruby-108": 0.0717703349282297,
        "ruby-8": 0.08064516129032262,
        "ruby-7": 0.09708737864077666,
        "ruby-23": 0.21153846153846156,
        "ruby-55": 0.16666666666666663,
        "ruby-59": 0.17500000000000004,
        "codebertscore_f1-163": 0.7349218726158142,
        "codebertscore_f3-163": 0.7754617929458618,
        "codebertscore_f1-28": 0.8104916214942932,
        "codebertscore_f3-28": 0.8259992003440857,
        "codebertscore_f1-6": 0.7305461168289185,
        "codebertscore_f3-6": 0.7688403129577637,
        "codebertscore_f1-190": 0.7437580227851868,
        "codebertscore_f3-190": 0.7590968608856201,
        "codebertscore_f1-70": 0.689389705657959,
        "codebertscore_f3-70": 0.7338912487030029,
        "codebertscore_f1-62": 0.5937895774841309,
        "codebertscore_f3-62": 0.6563571095466614,
        "codebertscore_f1-57": 0.7900014519691467,
        "codebertscore_f3-57": 0.8025543689727783,
        "codebertscore_f1-35": 0.7159887552261353,
        "codebertscore_f3-35": 0.7539757490158081,
        "codebertscore_f1-189": 0.7547702789306641,
        "codebertscore_f3-189": 0.782107412815094,
        "codebertscore_f1-26": 0.7961860299110413,
        "codebertscore_f3-26": 0.8113126158714294,
        "codebertscore_f1-174": 0.744921088218689,
        "codebertscore_f3-174": 0.7619832754135132,
        "codebertscore_f1-139": 0.7874415516853333,
        "codebertscore_f3-139": 0.8179771900177002,
        "codebertscore_f1-22": 0.7545332908630371,
        "codebertscore_f3-22": 0.7741050124168396,
        "codebertscore_f1-151": 0.7908483743667603,
        "codebertscore_f3-151": 0.8134921193122864,
        "codebertscore_f1-108": 0.6207422614097595,
        "codebertscore_f3-108": 0.6753745079040527,
        "codebertscore_f1-8": 0.6543387770652771,
        "codebertscore_f3-8": 0.7289907932281494,
        "codebertscore_f1-7": 0.7345315217971802,
        "codebertscore_f3-7": 0.7374880909919739,
        "codebertscore_f1-23": 0.8070722818374634,
        "codebertscore_f3-23": 0.8652418255805969,
        "codebertscore_f1-55": 0.7748416066169739,
        "codebertscore_f3-55": 0.8082321286201477,
        "codebertscore_f1-59": 0.7584708333015442,
        "codebertscore_f3-59": 0.7878796458244324,
        "codebertscore_s_f1-163": 0.7185381054878235,
        "codebertscore_s_f3-163": 0.7611600160598755,
        "codebertscore_s_f1-28": 0.7835372090339661,
        "codebertscore_s_f3-28": 0.7941365838050842,
        "codebertscore_s_f1-6": 0.7145265340805054,
        "codebertscore_s_f3-6": 0.7557080984115601,
        "codebertscore_s_f1-190": 0.7255268692970276,
        "codebertscore_s_f3-190": 0.7433022856712341,
        "codebertscore_s_f1-70": 0.6785895824432373,
        "codebertscore_s_f3-70": 0.7177369594573975,
        "codebertscore_s_f1-62": 0.6154549717903137,
        "codebertscore_s_f3-62": 0.6654217839241028,
        "codebertscore_s_f1-57": 0.7693067789077759,
        "codebertscore_s_f3-57": 0.7841668725013733,
        "codebertscore_s_f1-35": 0.7013311982154846,
        "codebertscore_s_f3-35": 0.7518039345741272,
        "codebertscore_s_f1-189": 0.7301958799362183,
        "codebertscore_s_f3-189": 0.7554580569267273,
        "codebertscore_s_f1-26": 0.7684085369110107,
        "codebertscore_s_f3-26": 0.782942533493042,
        "codebertscore_s_f1-174": 0.7238621711730957,
        "codebertscore_s_f3-174": 0.7433885335922241,
        "codebertscore_s_f1-139": 0.7609854340553284,
        "codebertscore_s_f3-139": 0.7859736084938049,
        "codebertscore_s_f1-22": 0.7402190566062927,
        "codebertscore_s_f3-22": 0.7590010166168213,
        "codebertscore_s_f1-151": 0.7833561301231384,
        "codebertscore_s_f3-151": 0.805027186870575,
        "codebertscore_s_f1-108": 0.639825165271759,
        "codebertscore_s_f3-108": 0.6897499561309814,
        "codebertscore_s_f1-8": 0.6741275787353516,
        "codebertscore_s_f3-8": 0.737758994102478,
        "codebertscore_s_f1-7": 0.7155663967132568,
        "codebertscore_s_f3-7": 0.7295651435852051,
        "codebertscore_s_f1-23": 0.7967144250869751,
        "codebertscore_s_f3-23": 0.8570122122764587,
        "codebertscore_s_f1-55": 0.7487151026725769,
        "codebertscore_s_f3-55": 0.7797290682792664,
        "codebertscore_s_f1-59": 0.7387038469314575,
        "codebertscore_s_f3-59": 0.7639048099517822,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "3 - The code correctly converts the input string to a double and adds 0.5 to it. However, it always rounds down to the nearest integer using a cast to int. This means that it does not correctly handle cases where the input is equidistant from two integers and should be rounded away from zero.",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 0,
        "raw_gpt35_nsnr-59": "3 - The code correctly converts the input string to a double and checks if it is already an integer. If it is, it returns the integer value. However, it does not handle cases where the input string is negative or equidistant from two integers. It needs to be modified to handle these cases and return the closest integer away from zero.",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 1,
        "raw_gpt35_nswr-62": "1",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n",
        "snippet": [
            "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n"
        ],
        "simplified": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
        "task_id": "140",
        "165": "int l = text.length();\n    std::string str;\n    int f = 0;\n    int c = 0;\n    for(int i = 0; i < l; i++) {\n        if(text[i] == ' ') {\n            c++;\n            if(c >= 2) {\n                str += '-';\n                c = 0;\n            }\n        }\n        else {\n            if(text[i] != ' ') {\n                str += text[i];\n                c = 0;\n            }\n        }\n    }\n    return str;",
        "grade-165": {
            "execution": 0
        },
        "28": "std::vector<char> text_in_chars{};\n  for (const auto &char_ : text) {\n    text_in_chars.push_back(char_);\n  }\n  for (auto &char_ : text_in_chars) {\n    if (char_ == ' ') {\n      char_ = '_';\n    }\n  }\n  std::vector<int> count_spaces_in_row{};\n  int count_spaces = 0;\n  for (int i = 0; i < text_in_chars.size(); ++i) {\n    if (text_in_chars[i] == '_') {\n      count_spaces++;\n    } else {\n      count_spaces_in_row.push_back(count_spaces);\n      count_spaces = 0;\n    }\n  }\n  std::vector<int> indexes_for_replacement{};\n  for (int i = 0; i < count_spaces_in_row.size(); ++i) {\n    if (count_spaces_in_row[i] > 2) {\n      indexes_for_replacement.push_back(i);\n    }\n  }\n  for (const auto &index : indexes_for_replacement) {\n    text_in_chars[index] = '-';\n  }\n  std::string result{};\n  for (const auto &char_ : text_in_chars) {\n    result += char_;\n  }\n  return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            count++;\n        }\n        else {\n            count = 0;\n        }\n        if (count == 2) {\n            text[i - 1] = '-';\n            count = 1;\n        }\n        else if (count > 2) {\n            text[i] = '-';\n        }\n    }\n    return text;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::string res = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        int x = 0;\n        if (text[i] == ' ') {\n            while (text[i + x] == ' ') x++;\n            if (x > 2) res += \"-\";\n            else {\n                while (x > 0) {\n                    res += \"_\";\n                    x--;\n                }\n            }\n        }\n        else {\n            res += text[i];\n        }\n    }\n    return res;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::string prev;\n    std::regex replace(\" \");\n    std::string curr=regex_replace(text,replace,\"_\");\n    std::string prev1=regex_replace(prev,replace,\"_\");\n    while(curr!=prev1){\n        prev=prev1;\n        prev1=regex_replace(prev,replace,\"_\");\n    }\n    std::regex replace1(\"_{2,}\");\n    std::string curr1=regex_replace(prev1,replace1,\"-\");\n    return curr1;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (text.empty()) {\n\t\treturn \"\";\n\t}\n\tstd::string res;\n\tint count = 0;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count == 1) {\n\t\t\tres.push_back('_');\n\t\t}\n\t\telse if (count > 2) {\n\t\t\tres.push_back('-');\n\t\t}\n\t\telse {\n\t\t\tres.push_back(text[i]);\n\t\t}\n\t}\n\treturn res;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (text.empty()) return text;\n  text[0] = text[0] == ' ' ? '_' : text[0];\n  for (int i = 1; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      if (text[i - 1] == ' ') {\n        if (text[i - 2] == '-') {\n          text[i] = '\\0';\n        } else {\n          text[i] = '-';\n        }\n      } else {\n        text[i] = '_';\n      }\n    }\n  }\n  return text;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += \"_\";\n            if (text[i+1] == ' ') {\n                while (text[i+1] == ' ') {\n                    result += \"-\";\n                    i++;\n                }\n            }\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::cout << \"Received: \" << text << \"\\n\";\n    std::string output = \"\";\n    int spaces_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            spaces_count++;\n        } else {\n            spaces_count = 0;\n        }\n        if (spaces_count > 2) {\n            if (output[output.length() - 1] != '-') {\n                output += '-';\n            }\n        } else if (text[i] == ' ') {\n            output += '_';\n        } else {\n            output += text[i];\n        }\n    }\n    return output;",
        "grade-190": {
            "execution": 0
        },
        "26": "// TODO\n    int numSpaces = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            numSpaces++;\n        }\n    }\n    if (numSpaces == 0) {\n        return text;\n    }\n    std::string result = \"\";\n    int j = 0;\n    while (text[j] == ' ') {\n        result = \"_\";\n        j++;\n    }\n    while (j < text.length()) {\n        while (text[j] == ' ') {\n            int index = j;\n            while (text[index] == ' ') {\n                result += '-';\n                index++;\n            }\n            j = index;\n        }\n        if (text[j] != ' ') {\n            result += text[j];\n        }\n        j++;\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "175": "text.erase(remove(text.begin(), text.end(), ' '), text.end());\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n    return text;",
        "grade-175": {
            "execution": 0
        },
        "140": "std::regex space(\"\\\\s{2,}\");\n  text = std::regex_replace(text, space, \"-\");\n  return std::regex_replace(text, std::regex(\"\\\\s\"), \"_\");",
        "grade-140": {
            "execution": 0
        },
        "22": "for (size_t i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tsize_t count = 0;\n\t\t\twhile (text[i] == ' ') {\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (count == 1) {\n\t\t\t\ttext[i - 1] = '_';\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext[i - 1] = '-';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
        "grade-22": {
            "execution": 0
        },
        "152": "for (unsigned int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t\tint counter = 0;\n\t\t\twhile (text[i + 1] == ' ') {\n\t\t\t\tcounter++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (counter > 2) {\n\t\t\t\ttext[i] = '-';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
        "grade-152": {
            "execution": 0
        },
        "108": "std::string new_text;\n    bool isSpace = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (isSpace) {\n                new_text += '-';\n            } else {\n                new_text += '_';\n                isSpace = true;\n            }\n        } else {\n            new_text += text[i];\n            isSpace = false;\n        }\n    }\n    return new_text;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string fixed;\n    bool prev = false;\n    for (auto ch : text) {\n        if (ch == ' ') {\n            if (prev) {\n                fixed += '-';\n            } else {\n                fixed += '_';\n                prev = true;\n            }\n        } else {\n            fixed += ch;\n            prev = false;\n        }\n    }\n    return fixed;",
        "grade-8": {
            "execution": 0
        },
        "7": "for (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == text.size() - 1) {\n\t\t\t\tif (text[i - 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (text[i - 1] == ' ' && text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\t\t\telse if (text[i - 1] == ' ' && text[i + 1] != ' ') {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t\telse if (text[i - 1] != ' ' && text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
        "grade-7": {
            "execution": 0
        },
        "23": "int i = 0;\n\tint spaces_count = 0;\n\twhile (i < text.length()) {\n\t\tif (text[i] == ' ') {\n\t\t\tspaces_count++;\n\t\t\tint j = i + 1;\n\t\t\twhile (j < text.length() && text[j] == ' ') {\n\t\t\t\tspaces_count++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (spaces_count > 2) {\n\t\t\t\ttext.replace(i, spaces_count, \"-\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext.replace(i, spaces_count, \"_\");\n\t\t\t}\n\t\t\ti = j;\n\t\t\tspaces_count = 0;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn text;",
        "grade-23": {
            "execution": 0
        },
        "55": "int length = text.length();\n  std::string new_text = \"\";\n  for (int i = 0; i < length; i++) {\n    // We are not at the start of the string,\n    // and the current character is a space and the \n    // previous character is a space, then we \n    // add a - to the new string\n    if (i > 0 && text[i] == ' ' && text[i - 1] == ' ') {\n      new_text += '-';\n    }\n    // We are not at the start of the string,\n    // and the current character is a space and the \n    // previous character is not a space, then we \n    // add a _ to the new string\n    else if (i > 0 && text[i] == ' ' && text[i - 1] != ' ') {\n      new_text += '_';\n    }\n    // Otherwise we add the original character \n    // to the new string\n    else {\n      new_text += text[i];\n    }\n  }\n  return new_text;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string ret;\n    int len = text.length();\n    bool isFirst = true;\n    bool isFirstSpace = true;\n    for(int i = 0; i < len; i++) {\n        if(text[i] == ' ') {\n            if(isFirst) {\n                isFirst = false;\n                isFirstSpace = true;\n                ret.push_back('_');\n            } else {\n                if(isFirstSpace) {\n                    isFirstSpace = false;\n                    ret.push_back('-');\n                }\n            }\n        } else {\n            isFirst = false;\n            isFirstSpace = true;\n            ret.push_back(text[i]);\n        }\n    }\n    return ret;",
        "grade-59": {
            "execution": 0
        },
        "bleu-165": 0.2754716465626642,
        "bleu-28": 0.1663907787998413,
        "bleu-6": 0.2830664176218993,
        "bleu-191": 0.2912264249434218,
        "bleu-70": 0.0366702330813133,
        "bleu-62": 0.2928704404574039,
        "bleu-57": 0.27200486415745767,
        "bleu-35": 0.2735394418315181,
        "bleu-190": 0.3657161515628161,
        "bleu-26": 0.29082496565993887,
        "bleu-175": 0.1627177600031227,
        "bleu-140": 0.013200073787231259,
        "bleu-22": 0.2303637625677737,
        "bleu-152": 0.24175961874972948,
        "bleu-108": 0.22209805527081922,
        "bleu-8": 0.060249380270024515,
        "bleu-7": 0.19520543987678746,
        "bleu-23": 0.22923859545373798,
        "bleu-55": 0.18895191723304194,
        "bleu-59": 0.25097705174703205,
        "codebleu-165": 0.43457543187340847,
        "codebleu-28": 0.5074925375267245,
        "codebleu-6": 0.40286707745128236,
        "codebleu-191": 0.44078078087076833,
        "codebleu-70": 0.30043690563742714,
        "codebleu-62": 0.4919592768007254,
        "codebleu-57": 0.47381930717331067,
        "codebleu-35": 0.37723510732058074,
        "codebleu-190": 0.5261427927580382,
        "codebleu-26": 0.5921611216851724,
        "codebleu-175": 0.2879515844802508,
        "codebleu-140": 0.11883662436790887,
        "codebleu-22": 0.37282192088056865,
        "codebleu-152": 0.36590746922660544,
        "codebleu-108": 0.33939908594998647,
        "codebleu-8": 0.21151816899029371,
        "codebleu-7": 0.610064571821816,
        "codebleu-23": 0.5082260863384985,
        "codebleu-55": 0.4559160576753708,
        "codebleu-59": 0.47480718753080375,
        "chrf-165": 0.2794213561858772,
        "chrf-28": 0.2655561868545323,
        "chrf-6": 0.29613235527876597,
        "chrf-191": 0.26028304957536524,
        "chrf-70": 0.14195945346770156,
        "chrf-62": 0.2882741548185356,
        "chrf-57": 0.23297594972107194,
        "chrf-35": 0.26404413592271636,
        "chrf-190": 0.4260487414309285,
        "chrf-26": 0.32477813325790467,
        "chrf-175": 0.2076488914220823,
        "chrf-140": 0.10420755274753812,
        "chrf-22": 0.2291969350087708,
        "chrf-152": 0.2596953971948508,
        "chrf-108": 0.2773151895330621,
        "chrf-8": 0.1324502389202045,
        "chrf-7": 0.2516850107711876,
        "chrf-23": 0.3374664180078206,
        "chrf-55": 0.27828684084371075,
        "chrf-59": 0.3052743959395665,
        "rougel-165": 0.4772727272727273,
        "rougel-28": 0.3573333333333333,
        "rougel-6": 0.5461847389558233,
        "rougel-191": 0.49253731343283574,
        "rougel-70": 0.2943396226415094,
        "rougel-62": 0.4927536231884058,
        "rougel-57": 0.4551724137931034,
        "rougel-35": 0.4942084942084942,
        "rougel-190": 0.49504950495049505,
        "rougel-26": 0.47928994082840237,
        "rougel-175": 0.38427947598253276,
        "rougel-140": 0.1981132075471698,
        "rougel-22": 0.4780876494023905,
        "rougel-152": 0.5040650406504066,
        "rougel-108": 0.46774193548387094,
        "rougel-8": 0.33628318584070793,
        "rougel-7": 0.4406779661016949,
        "rougel-23": 0.42807017543859655,
        "rougel-55": 0.33421750663129973,
        "rougel-59": 0.410958904109589,
        "meteor-165": 0.35563586229946526,
        "meteor-28": 0.36096885992501687,
        "meteor-6": 0.3670132154099666,
        "meteor-191": 0.34772687427912347,
        "meteor-70": 0.1986672306550818,
        "meteor-62": 0.3853132641781212,
        "meteor-57": 0.41669452333249446,
        "meteor-35": 0.3409792085848423,
        "meteor-190": 0.43741275011633324,
        "meteor-26": 0.41486024831153395,
        "meteor-175": 0.2626101775412424,
        "meteor-140": 0.11044924094452918,
        "meteor-22": 0.33049977939278896,
        "meteor-152": 0.35344289906700765,
        "meteor-108": 0.33311930273468743,
        "meteor-8": 0.18490512426173342,
        "meteor-7": 0.439430028385541,
        "meteor-23": 0.3278273233927335,
        "meteor-55": 0.35723751370149176,
        "meteor-59": 0.36723853477616697,
        "ruby-165": 0.27922077922077926,
        "ruby-28": 0.20814479638009054,
        "ruby-6": 0.3831168831168831,
        "ruby-191": 0.3311688311688312,
        "ruby-70": 0.18831168831168832,
        "ruby-62": 0.27922077922077926,
        "ruby-57": 0.23376623376623373,
        "ruby-35": 0.35064935064935066,
        "ruby-190": 0.2532467532467533,
        "ruby-26": 0.32608695652173914,
        "ruby-175": 0.2012987012987013,
        "ruby-140": 0.11688311688311692,
        "ruby-22": 0.3441558441558441,
        "ruby-152": 0.3311688311688312,
        "ruby-108": 0.33766233766233766,
        "ruby-8": 0.23376623376623373,
        "ruby-7": 0.27413127413127414,
        "ruby-23": 0.2727272727272727,
        "ruby-55": 0.179372197309417,
        "ruby-59": 0.19480519480519476,
        "codebertscore_f1-165": 0.7873784899711609,
        "codebertscore_f3-165": 0.7527413964271545,
        "codebertscore_f1-28": 0.7156674265861511,
        "codebertscore_f3-28": 0.7366071343421936,
        "codebertscore_f1-6": 0.7988294959068298,
        "codebertscore_f3-6": 0.7576786875724792,
        "codebertscore_f1-191": 0.7950944900512695,
        "codebertscore_f3-191": 0.7640933394432068,
        "codebertscore_f1-70": 0.6647571325302124,
        "codebertscore_f3-70": 0.6582120656967163,
        "codebertscore_f1-62": 0.7920088171958923,
        "codebertscore_f3-62": 0.7658315896987915,
        "codebertscore_f1-57": 0.7747009992599487,
        "codebertscore_f3-57": 0.7327619791030884,
        "codebertscore_f1-35": 0.7982428073883057,
        "codebertscore_f3-35": 0.756098210811615,
        "codebertscore_f1-190": 0.8110314011573792,
        "codebertscore_f3-190": 0.808014988899231,
        "codebertscore_f1-26": 0.7701100707054138,
        "codebertscore_f3-26": 0.757159948348999,
        "codebertscore_f1-175": 0.7442585229873657,
        "codebertscore_f3-175": 0.6877246499061584,
        "codebertscore_f1-140": 0.6212223172187805,
        "codebertscore_f3-140": 0.6060253381729126,
        "codebertscore_f1-22": 0.7672293782234192,
        "codebertscore_f3-22": 0.7229712009429932,
        "codebertscore_f1-152": 0.7775707244873047,
        "codebertscore_f3-152": 0.7247238159179688,
        "codebertscore_f1-108": 0.7819162607192993,
        "codebertscore_f3-108": 0.7551845908164978,
        "codebertscore_f1-8": 0.7225623726844788,
        "codebertscore_f3-8": 0.6939018368721008,
        "codebertscore_f1-7": 0.7508857846260071,
        "codebertscore_f3-7": 0.7243015766143799,
        "codebertscore_f1-23": 0.7996000051498413,
        "codebertscore_f3-23": 0.7797891497612,
        "codebertscore_f1-55": 0.7269734740257263,
        "codebertscore_f3-55": 0.7430562376976013,
        "codebertscore_f1-59": 0.7383152842521667,
        "codebertscore_f3-59": 0.7375751733779907,
        "codebertscore_s_f1-165": 0.7928394675254822,
        "codebertscore_s_f3-165": 0.7569904327392578,
        "codebertscore_s_f1-28": 0.7234117984771729,
        "codebertscore_s_f3-28": 0.7457683086395264,
        "codebertscore_s_f1-6": 0.8056449890136719,
        "codebertscore_s_f3-6": 0.763088047504425,
        "codebertscore_s_f1-191": 0.8030686974525452,
        "codebertscore_s_f3-191": 0.7724876999855042,
        "codebertscore_s_f1-70": 0.6760609149932861,
        "codebertscore_s_f3-70": 0.6674075126647949,
        "codebertscore_s_f1-62": 0.7989276647567749,
        "codebertscore_s_f3-62": 0.7693158984184265,
        "codebertscore_s_f1-57": 0.7806827425956726,
        "codebertscore_s_f3-57": 0.7354483604431152,
        "codebertscore_s_f1-35": 0.8019285798072815,
        "codebertscore_s_f3-35": 0.7612324357032776,
        "codebertscore_s_f1-190": 0.8164191842079163,
        "codebertscore_s_f3-190": 0.8130776882171631,
        "codebertscore_s_f1-26": 0.7798447608947754,
        "codebertscore_s_f3-26": 0.7676959037780762,
        "codebertscore_s_f1-175": 0.7605660557746887,
        "codebertscore_s_f3-175": 0.7017197012901306,
        "codebertscore_s_f1-140": 0.6342653036117554,
        "codebertscore_s_f3-140": 0.6176002621650696,
        "codebertscore_s_f1-22": 0.7757105827331543,
        "codebertscore_s_f3-22": 0.7320241332054138,
        "codebertscore_s_f1-152": 0.7877991795539856,
        "codebertscore_s_f3-152": 0.7347431182861328,
        "codebertscore_s_f1-108": 0.7785082459449768,
        "codebertscore_s_f3-108": 0.7495976686477661,
        "codebertscore_s_f1-8": 0.7227977514266968,
        "codebertscore_s_f3-8": 0.6918790936470032,
        "codebertscore_s_f1-7": 0.7555731534957886,
        "codebertscore_s_f3-7": 0.7289840579032898,
        "codebertscore_s_f1-23": 0.8006761074066162,
        "codebertscore_s_f3-23": 0.7808459997177124,
        "codebertscore_s_f1-55": 0.7283621430397034,
        "codebertscore_s_f3-55": 0.7415058016777039,
        "codebertscore_s_f1-59": 0.739271879196167,
        "codebertscore_s_f3-59": 0.7370707392692566,
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-175": 2,
        "raw_gpt35_nsnr-175": "2",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 2,
        "raw_gpt35_nswr-175": "2",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long> nums) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n"
        ],
        "simplified": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
        "task_id": "146",
        "163": "long count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif (nums[i] > 10) {\n\t\t\tint num = nums[i];\n\t\t\tint first = num;\n\t\t\tint last = num % 10;\n\t\t\twhile (num > 10) {\n\t\t\t\tnum = num / 10;\n\t\t\t}\n\t\t\tfirst = num;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-163": {
            "execution": 0
        },
        "28": "int i,j,count=0;\n    for(i=0;i<nums.size();i++)\n    {\n        if(nums[i]>10)\n        {\n            int temp=nums[i];\n            int first = temp%10;\n            int last = temp;\n            while(temp!=0)\n            {\n                last = temp%10;\n                temp = temp/10;\n            }\n            if(first%2!=0 && last%2!=0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-28": {
            "execution": 1
        },
        "6": "//Initialize a counter that will track the number of elements that fit the criteria\n\tlong count = 0;\n\t//Iterate through the vector nums\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t//Convert the elements to strings \n\t\tstd::string str = std::to_string(nums[i]);\n\t\t//Check to see if the element is greater than 10\n\t\tif (nums[i] > 10) {\n\t\t\t//Check to see if the first and last characters of the element are odd numbers\n\t\t\tif ((str[0] == '1' || str[0] == '3' || str[0] == '5' || str[0] == '7' || str[0] == '9')\n\t\t\t\t&& (str[str.length() - 1] == '1' || str[str.length() - 1] == '3' || str[str.length() - 1] == '5' || str[str.length() - 1] == '7' || str[str.length() - 1] == '9')) {\n\t\t\t\t//Increment the counter if the element fits the criteria\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t//Return the number of elements that fit the criteria\n\treturn count;",
        "grade-6": {
            "execution": 1
        },
        "189": "// Write your code here\n\tint result = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tlong temp = nums[i];\n\t\tlong first = nums[i] % 10;\n\t\tlong last = nums[i] / 10;\n\t\tlast = last % 10;\n\t\tif (nums[i] > 10 && first%2 == 1 && last%2 == 1) {\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<long>::iterator itr;\n  long count = 0;\n  for(itr = nums.begin(); itr != nums.end(); itr++) {\n    int firstDigit, lastDigit;\n    if(*itr >= 10) {\n      firstDigit = *itr % 10;\n      lastDigit = *itr % 10;\n      if(firstDigit == 1 || firstDigit == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9) {\n        if(lastDigit == 1 || lastDigit == 3 || lastDigit == 5 || lastDigit == 7 || lastDigit == 9) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "long cnt = 0;\n    for(auto x: nums) {\n        if(x > 10 && x % 2 == 1 && x / 10 % 2 == 1) {\n            ++cnt;\n        }\n    }\n    return cnt;",
        "grade-62": {
            "execution": 0
        },
        "57": "int count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif (nums[i] > 10) {\n\t\t\tint temp = nums[i];\n\t\t\tint first = temp % 10;\n\t\t\twhile (temp != 0) {\n\t\t\t\tif (temp / 10 == 0) {\n\t\t\t\t\tint last = temp % 10;\n\t\t\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttemp = temp / 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-57": {
            "execution": 1
        },
        "35": "int cnt = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            if(nums[i]%2 == 1) {\n                int a = nums[i];\n                int first = a%10;\n                int last = a/10;\n                if(first%2 == 1) {\n                    if(last%2 == 1) {\n                        cnt++;\n                    }\n                }\n            }\n        }\n    }\n    return cnt;",
        "grade-35": {
            "execution": 0
        },
        "188": "// Write your code here",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> special_nums;\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] > 10) {\n      std::string current_num = std::to_string(nums[i]);\n      if (current_num[0] % 2 != 0 && current_num[current_num.size() - 1] % 2 != 0) {\n        special_nums.push_back(nums[i]);\n      }\n    }\n  }\n  return special_nums.size();",
        "grade-26": {
            "execution": 1
        },
        "173": "return std::count_if(nums.begin(), nums.end(), [](long i) {\n        // convert to string\n        std::string str = std::to_string(i);\n        // check if first and last numbers are odd\n        if (str[0] % 2 == 1 && str[str.length() - 1] % 2 == 1) {\n            // check if the number is greater than 10\n            if (i > 10) {\n                return true;\n            }\n        }\n        return false;\n    });",
        "grade-173": {
            "execution": 1
        },
        "139": "//check if the first and last digits are odd\n  int result = 0;\n  for(int i = 0; i < nums.size(); i++){\n    if(nums[i] > 10){\n      std::string numstr = std::to_string(nums[i]);\n      if(numstr[0] - '0'%2 != 0 && numstr[numstr.size()-1] - '0'%2 != 0){\n        result++;\n      }\n    }\n  }\n  return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            if(abs(nums[i]) % 2 == 1) {\n                int last_digit = abs(nums[i]) % 10;\n                int first_digit = abs(nums[i]);\n                while(first_digit > 9) {\n                    first_digit /= 10;\n                }\n                if(last_digit == first_digit) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-22": {
            "execution": 0
        },
        "151": "long count=0;\n  for(int i=0;i<nums.size();i++)\n  {\n    long num=nums[i];\n    if(num<10)\n    {\n      if(num%2!=0)\n      {\n        count++;\n      }\n    }\n    else\n    {\n      long first=num%10;\n      while(num>10)\n      {\n        num=num/10;\n      }\n      if(num%2!=0 && first%2!=0)\n      {\n        count++;\n      }\n    }\n  }\n  return count;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> special_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        int n = std::abs(nums[i]);\n        if (n > 10) {\n            int last_digit = n % 10;\n            while (n >= 10) {\n                n /= 10;\n            }\n            if (n % 2 != 0 && last_digit % 2 != 0) {\n                special_nums.push_back(nums[i]);\n            }\n        }\n    }\n    return special_nums.size();",
        "grade-108": {
            "execution": 0
        },
        "8": "// Write your code here.\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tint lastDigit = nums[i] % 10;\n\t\tint firstDigit = nums[i];\n\t\twhile (firstDigit > 9) {\n\t\t\tfirstDigit = firstDigit / 10;\n\t\t}\n\t\tif (lastDigit % 2 != 0 && firstDigit % 2 != 0 && nums[i] > 10) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-8": {
            "execution": 1
        },
        "7": "int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n        if(num > 10) {\n            std::string num_str = std::to_string(num);\n            if(num_str[0] % 2 == 1 && num_str[num_str.size() - 1] % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "// Write your code here\n    long a, s = 0;\n    for(auto num : nums) {\n        if(num > 10) {\n            long x = num, y = num;\n            while(x > 0) {\n                x /= 10;\n                if(x < 10) {\n                    break;\n                }\n            }\n            while(y > 0) {\n                a = y % 10;\n                y /= 10;\n            }\n            if(a % 2 != 0 && x % 2 != 0) {\n                s++;\n            }\n        }\n    }\n    return s;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tlong n = nums[i];\n\t\tif (n > 10) {\n\t\t\tint firstDigit = n % 10;\n\t\t\tint secondDigit = n / 10;\n\t\t\tsecondDigit = secondDigit % 10;\n\t\t\tif (firstDigit % 2 != 0 && secondDigit % 2 != 0)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-55": {
            "execution": 0
        },
        "59": "long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            int first = nums[i]/10;\n            int last = nums[i]%10;\n            if(first%2 != 0 && last%2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.39312894948768057,
        "bleu-28": 0.3269855353399281,
        "bleu-6": 0.1569364141494589,
        "bleu-189": 0.389981214661814,
        "bleu-70": 0.07541705293488947,
        "bleu-62": 0.14444812584692412,
        "bleu-57": 0.3488058593285186,
        "bleu-35": 0.45570159215798883,
        "bleu-188": 0.0,
        "bleu-26": 0.4536721940168908,
        "bleu-173": 0.2466593070623262,
        "bleu-139": 0.42599237176129506,
        "bleu-22": 0.41435123987906414,
        "bleu-151": 0.30933224485722527,
        "bleu-108": 0.34977072557136085,
        "bleu-8": 0.3387208885837374,
        "bleu-7": 0.5205194111746244,
        "bleu-23": 0.10640381568755394,
        "bleu-55": 0.31332020436950947,
        "bleu-59": 0.45807503458537974,
        "codebleu-163": 0.6321305230550517,
        "codebleu-28": 0.5995618635714982,
        "codebleu-6": 0.7323903618403851,
        "codebleu-189": 0.6176601118064111,
        "codebleu-70": 0.5588824927685654,
        "codebleu-62": 0.27192694497103476,
        "codebleu-57": 0.6528949065387823,
        "codebleu-35": 0.6762312018566696,
        "codebleu-188": 0.023598820058997046,
        "codebleu-26": 0.7170025223432752,
        "codebleu-173": 0.6015387288940087,
        "codebleu-139": 0.7448501824902016,
        "codebleu-22": 0.6835927297269642,
        "codebleu-151": 0.5965767188168712,
        "codebleu-108": 0.6428606813649445,
        "codebleu-8": 0.6212181241954665,
        "codebleu-7": 0.7396778587384127,
        "codebleu-23": 0.49664809409550675,
        "codebleu-55": 0.5845489712637386,
        "codebleu-59": 0.632257870483589,
        "chrf-163": 0.4799379840043361,
        "chrf-28": 0.41264427601810405,
        "chrf-6": 0.3539586332987223,
        "chrf-189": 0.42917483338629886,
        "chrf-70": 0.21428741479981775,
        "chrf-62": 0.19404585245618816,
        "chrf-57": 0.4397722806132127,
        "chrf-35": 0.4979545482517109,
        "chrf-188": 0.023892739555176682,
        "chrf-26": 0.5408788641778263,
        "chrf-173": 0.3742226604576633,
        "chrf-139": 0.5592024177825811,
        "chrf-22": 0.46647600932156835,
        "chrf-151": 0.4194077819839851,
        "chrf-108": 0.4450217296761123,
        "chrf-8": 0.40795230970062507,
        "chrf-7": 0.5841257770819411,
        "chrf-23": 0.2470030986678853,
        "chrf-55": 0.348122850914822,
        "chrf-59": 0.4627733888679192,
        "rougel-163": 0.5760869565217391,
        "rougel-28": 0.5578947368421053,
        "rougel-6": 0.32258064516129037,
        "rougel-189": 0.5792349726775956,
        "rougel-70": 0.3153526970954357,
        "rougel-62": 0.41538461538461535,
        "rougel-57": 0.5670103092783505,
        "rougel-35": 0.6378378378378378,
        "rougel-188": 0.0,
        "rougel-26": 0.6666666666666667,
        "rougel-173": 0.47179487179487184,
        "rougel-139": 0.6907216494845362,
        "rougel-22": 0.5684210526315789,
        "rougel-151": 0.49473684210526314,
        "rougel-108": 0.48958333333333337,
        "rougel-8": 0.5185185185185186,
        "rougel-7": 0.7344632768361583,
        "rougel-23": 0.34736842105263155,
        "rougel-55": 0.5142857142857142,
        "rougel-59": 0.6265060240963856,
        "meteor-163": 0.4678074059812604,
        "meteor-28": 0.42289411259721554,
        "meteor-6": 0.4509271175937843,
        "meteor-189": 0.46835971696825124,
        "meteor-70": 0.3025327844521504,
        "meteor-62": 0.25485586342009514,
        "meteor-57": 0.48389522374954214,
        "meteor-35": 0.49739974975648127,
        "meteor-188": 0.0,
        "meteor-26": 0.5172824439681525,
        "meteor-173": 0.46493616448108976,
        "meteor-139": 0.737031994120841,
        "meteor-22": 0.4381016819425199,
        "meteor-151": 0.4525032617582215,
        "meteor-108": 0.43693974838439065,
        "meteor-8": 0.42338988529662597,
        "meteor-7": 0.729290527150218,
        "meteor-23": 0.3423348946135832,
        "meteor-55": 0.3881588735691945,
        "meteor-59": 0.4444862784471219,
        "ruby-163": 0.4554455445544554,
        "ruby-28": 0.4299065420560748,
        "ruby-6": 0.19723183391003463,
        "ruby-189": 0.41000000000000003,
        "ruby-70": 0.20253164556962022,
        "ruby-62": 0.3132530120481928,
        "ruby-57": 0.45945945945945943,
        "ruby-35": 0.4901960784313726,
        "ruby-188": 0.0,
        "ruby-26": 0.5849056603773585,
        "ruby-173": 0.3214285714285714,
        "ruby-139": 0.5855855855855856,
        "ruby-22": 0.47663551401869164,
        "ruby-151": 0.3738317757009346,
        "ruby-108": 0.3486238532110092,
        "ruby-8": 0.3867924528301887,
        "ruby-7": 0.648936170212766,
        "ruby-23": 0.2149532710280374,
        "ruby-55": 0.4130434782608695,
        "ruby-59": 0.5301204819277108,
        "codebertscore_f1-163": 0.8496277928352356,
        "codebertscore_f3-163": 0.8496482372283936,
        "codebertscore_f1-28": 0.8083102703094482,
        "codebertscore_f3-28": 0.8127825260162354,
        "codebertscore_f1-6": 0.7405887842178345,
        "codebertscore_f3-6": 0.8140052556991577,
        "codebertscore_f1-189": 0.8319541215896606,
        "codebertscore_f3-189": 0.8475524187088013,
        "codebertscore_f1-70": 0.7043944597244263,
        "codebertscore_f3-70": 0.7316225171089172,
        "codebertscore_f1-62": 0.8026018738746643,
        "codebertscore_f3-62": 0.7828497290611267,
        "codebertscore_f1-57": 0.8411681652069092,
        "codebertscore_f3-57": 0.8490955233573914,
        "codebertscore_f1-35": 0.8262505531311035,
        "codebertscore_f3-35": 0.8258281350135803,
        "codebertscore_f1-188": 0.5228532552719116,
        "codebertscore_f3-188": 0.5158206224441528,
        "codebertscore_f1-26": 0.8708778023719788,
        "codebertscore_f3-26": 0.8858349323272705,
        "codebertscore_f1-173": 0.795833945274353,
        "codebertscore_f3-173": 0.8265575170516968,
        "codebertscore_f1-139": 0.8623997569084167,
        "codebertscore_f3-139": 0.8931408524513245,
        "codebertscore_f1-22": 0.8098083734512329,
        "codebertscore_f3-22": 0.818035900592804,
        "codebertscore_f1-151": 0.8357568979263306,
        "codebertscore_f3-151": 0.8365023732185364,
        "codebertscore_f1-108": 0.8028062582015991,
        "codebertscore_f3-108": 0.8141676783561707,
        "codebertscore_f1-8": 0.8066871166229248,
        "codebertscore_f3-8": 0.8240281939506531,
        "codebertscore_f1-7": 0.8805111646652222,
        "codebertscore_f3-7": 0.8880986571311951,
        "codebertscore_f1-23": 0.6925894021987915,
        "codebertscore_f3-23": 0.6973752975463867,
        "codebertscore_f1-55": 0.8228182196617126,
        "codebertscore_f3-55": 0.8334701061248779,
        "codebertscore_f1-59": 0.8533279299736023,
        "codebertscore_f3-59": 0.847195565700531,
        "codebertscore_s_f1-163": 0.8545835614204407,
        "codebertscore_s_f3-163": 0.8547107577323914,
        "codebertscore_s_f1-28": 0.833001434803009,
        "codebertscore_s_f3-28": 0.8371379971504211,
        "codebertscore_s_f1-6": 0.7624876499176025,
        "codebertscore_s_f3-6": 0.8392457365989685,
        "codebertscore_s_f1-189": 0.8340722322463989,
        "codebertscore_s_f3-189": 0.8475954532623291,
        "codebertscore_s_f1-70": 0.7157366871833801,
        "codebertscore_s_f3-70": 0.7433979511260986,
        "codebertscore_s_f1-62": 0.8000823259353638,
        "codebertscore_s_f3-62": 0.78017657995224,
        "codebertscore_s_f1-57": 0.8448051810264587,
        "codebertscore_s_f3-57": 0.8518899083137512,
        "codebertscore_s_f1-35": 0.843951404094696,
        "codebertscore_s_f3-35": 0.8438583016395569,
        "codebertscore_s_f1-188": 0.5073912739753723,
        "codebertscore_s_f3-188": 0.49512621760368347,
        "codebertscore_s_f1-26": 0.8768027424812317,
        "codebertscore_s_f3-26": 0.8951243758201599,
        "codebertscore_s_f1-173": 0.8033570051193237,
        "codebertscore_s_f3-173": 0.8362346291542053,
        "codebertscore_s_f1-139": 0.8658037781715393,
        "codebertscore_s_f3-139": 0.899577260017395,
        "codebertscore_s_f1-22": 0.825069785118103,
        "codebertscore_s_f3-22": 0.8336266875267029,
        "codebertscore_s_f1-151": 0.851581871509552,
        "codebertscore_s_f3-151": 0.8513603806495667,
        "codebertscore_s_f1-108": 0.8152750134468079,
        "codebertscore_s_f3-108": 0.8286304473876953,
        "codebertscore_s_f1-8": 0.8029202818870544,
        "codebertscore_s_f3-8": 0.8207971453666687,
        "codebertscore_s_f1-7": 0.880243718624115,
        "codebertscore_s_f3-7": 0.8874905705451965,
        "codebertscore_s_f1-23": 0.7184422612190247,
        "codebertscore_s_f3-23": 0.7219791412353516,
        "codebertscore_s_f1-55": 0.8205211162567139,
        "codebertscore_s_f3-55": 0.8303223848342896,
        "codebertscore_s_f1-59": 0.859036386013031,
        "codebertscore_s_f3-59": 0.8535675406455994,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n",
        "snippet": [
            "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n"
        ],
        "simplified": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
        "task_id": "153",
        "163": "double max_strength{0.0};\n  std::string ans{\"\"};\n  for (const auto& extension : extensions) {\n    int upper_case{0};\n    int lower_case{0};\n    for (const auto& c : extension) {\n      if (isupper(c)) {\n        ++upper_case;\n      } else {\n        ++lower_case;\n      }\n    }\n    double strength{static_cast<double>(upper_case - lower_case)};\n    if (strength > max_strength) {\n      max_strength = strength;\n      ans = extension;\n    }\n  }\n  return class_name + \".\" + ans;",
        "grade-163": {
            "execution": 0
        },
        "28": "int max = 0;\n    int uppercase = 0;\n    int lowercase = 0;\n    int index = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                uppercase++;\n            } else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                lowercase++;\n            }\n        }\n        int current = uppercase - lowercase;\n        if (current > max) {\n            max = current;\n            index = i;\n        }\n        uppercase = 0;\n        lowercase = 0;\n    }\n    return class_name + \".\" + extensions[index];",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string res = class_name;\n    int max = INT_MIN;\n    for (auto it = extensions.begin(); it != extensions.end(); ++it) {\n        int cap = 0, small = 0;\n        for (char& x : *it) {\n            if (isupper(x)) cap++;\n            else small++;\n        }\n        int str = cap - small;\n        if (str > max) {\n            max = str;\n            res += '.' + *it;\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "189": "// your code here\n    std::string strongest = \"\";\n    float count = -100;\n    for(int i = 0; i < extensions.size(); i++){\n        int CAP = 0;\n        int SM = 0;\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n                CAP++;\n            }\n            else{\n                SM++;\n            }\n        }\n        float strength = (float)CAP - SM;\n        if(strength > count){\n            count = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;",
        "grade-189": {
            "execution": 0
        },
        "70": "if (extensions.size() == 0) return class_name;\n    int strongest_count = 0;\n    std::string strongest = extensions[0];\n    for (auto ext : extensions) {\n        int count = 0;\n        for (auto c : ext) {\n            if (isupper(c)) count++;\n            else if (islower(c)) count--;\n        }\n        if (count > strongest_count) {\n            strongest_count = count;\n            strongest = ext;\n        }\n    }\n    return class_name + \".\" + strongest;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (extensions.size() == 0)\n\t\treturn class_name;\n\tdouble max_score = 0.0;\n\tint max_index = 0;\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\tdouble caps = 0.0;\n\t\tdouble sm = 0.0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (isupper(extensions[i][j]))\n\t\t\t\tcaps++;\n\t\t\telse if (islower(extensions[i][j]))\n\t\t\t\tsm++;\n\t\t}\n\t\tif (caps - sm > max_score) {\n\t\t\tmax_score = caps - sm;\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn class_name + \".\" + extensions[max_index];",
        "grade-62": {
            "execution": 0
        },
        "57": "auto strongest = std::max_element(\n\t\textensions.begin(),\n\t\textensions.end(),\n\t\t[](const std::string& a, const std::string& b) {\n\t\t\treturn std::count_if(a.begin(), a.end(), isupper) -\n\t\t\t\tstd::count_if(a.begin(), a.end(), islower) >\n\t\t\t\tstd::count_if(b.begin(), b.end(), isupper) -\n\t\t\t\tstd::count_if(b.begin(), b.end(), islower);\n\t\t});\n\tif (strongest == extensions.end()) {\n\t\treturn class_name;\n\t}\n\treturn class_name + \".\" + *strongest;",
        "grade-57": {
            "execution": 0
        },
        "35": "float max_strength = 0;\n\tstd::string result = \"\";\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\tfloat uppercase = 0;\n\t\tfloat lowercase = 0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\t\tuppercase++;\n\t\t\t}\n\t\t\telse if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n\t\t\t\tlowercase++;\n\t\t\t}\n\t\t}\n\t\tif (uppercase - lowercase > max_strength) {\n\t\t\tmax_strength = uppercase - lowercase;\n\t\t\tresult = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + result;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::sort(extensions.begin(), extensions.end(), [](std::string a, std::string b) {\n        int uppercase_a = 0, lowercase_a = 0, uppercase_b = 0, lowercase_b = 0;\n        for (char letter : a) {\n            if (isupper(letter)) {\n                uppercase_a++;\n            } else {\n                lowercase_a++;\n            }\n        }\n        for (char letter : b) {\n            if (isupper(letter)) {\n                uppercase_b++;\n            } else {\n                lowercase_b++;\n            }\n        }\n        if (uppercase_a - lowercase_a == uppercase_b - lowercase_b) {\n            return a < b;\n        }\n        return uppercase_a - lowercase_a > uppercase_b - lowercase_b;\n    });\n    return class_name + \".\" + extensions[0];",
        "grade-188": {
            "execution": 0
        },
        "26": "float max_strength = INT_MIN;\n    std::string strongest_ext;\n    for(std::string& i : extensions) {\n        float temp = 0;\n        for(char c : i) {\n            if(std::isupper(c)) {\n                temp++;\n            } else {\n                temp--;\n            }\n        }\n        if(temp > max_strength) {\n            max_strength = temp;\n            strongest_ext = i;\n        }\n    }\n    return class_name + \".\" + strongest_ext;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string strongest_extension;\n  float strength = 0;\n  for (auto && extension : extensions) {\n    float cap = 0;\n    float sm = 0;\n    for (auto && c : extension) {\n      if (isupper(c)) {\n        cap++;\n      } else {\n        sm++;\n      }\n    }\n    float current_strength = cap - sm;\n    if (current_strength > strength) {\n      strength = current_strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;",
        "grade-173": {
            "execution": 0
        },
        "139": "int max = 0;\n  int index = 0;\n  for (int i = 0; i < extensions.size(); i++) {\n    int up = 0;\n    int lo = 0;\n    for (int j = 0; j < extensions[i].size(); j++) {\n      if (islower(extensions[i][j])) {\n        lo++;\n      } else {\n        up++;\n      }\n    }\n    int strength = up - lo;\n    if (strength > max) {\n      max = strength;\n      index = i;\n    }\n  }\n  return class_name + \".\" + extensions[index];",
        "grade-139": {
            "execution": 0
        },
        "22": "float max = 0.0f;\n    std::string result;\n    for (auto extension : extensions) {\n        int uppers = 0;\n        int lowers = 0;\n        for (auto letter : extension) {\n            if (isupper(letter)) {\n                uppers++;\n            } else {\n                lowers++;\n            }\n        }\n        float curr_strength = (float)uppers - (float)lowers;\n        if (curr_strength > max) {\n            max = curr_strength;\n            result = extension;\n        }\n    }\n    return class_name + \".\" + result;",
        "grade-22": {
            "execution": 0
        },
        "151": "int i, j, c, max;\n\tstd::string str, max_str;\n\tif(extensions.size() == 0) {\n\t\treturn \"\";\n\t}\n\tmax = -extensions[0].size();\n\tmax_str = extensions[0];\n\tfor(i = 0; i < extensions.size(); i++) {\n\t\tstr = extensions[i];\n\t\tc = 0;\n\t\tfor(j = 0; j < str.size(); j++) {\n\t\t\tif(isupper(str[j])) {\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\tif(c - (str.size() - c) > max) {\n\t\t\tmax = c - (str.size() - c);\n\t\t\tmax_str = str;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_str;",
        "grade-151": {
            "execution": 0
        },
        "108": "int max = 0;\n    std::string max_extension = \"\";\n    for (int i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        if (cap - sm > max) {\n            max = cap - sm;\n            max_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + max_extension;",
        "grade-108": {
            "execution": 0
        },
        "8": "assert(class_name.length() > 0);\n    // your code here\n    std::string ans;\n    std::string str;\n    // -1 is to make sure we do not consider the '\\0' at the end of the string\n    int difference = -1;\n    int diff;\n    int uppercase_count;\n    int lowercase_count;\n    for (int i = 0; i < extensions.size(); i++) {\n        // reset the values of lowercase and uppercase count\n        uppercase_count = 0;\n        lowercase_count = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                uppercase_count++;\n            }\n            else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                lowercase_count++;\n            }\n        }\n        diff = uppercase_count - lowercase_count;\n        if (diff > difference) {\n            difference = diff;\n            ans = extensions[i];\n        }\n    }\n    str = class_name + \".\" + ans;\n    return str;",
        "grade-8": {
            "execution": 1
        },
        "7": "double strong=0;\n\tstd::string str = \"\";\n\tfor(int i=0;i<extensions.size();i++){\n\t\tint up=0,low=0;\n\t\tfor(int j=0;j<extensions[i].length();j++){\n\t\t\tif(extensions[i][j]>='A' && extensions[i][j]<='Z'){\n\t\t\t\tup++;\n\t\t\t}\n\t\t\telse if(extensions[i][j]>='a' && extensions[i][j]<='z'){\n\t\t\t\tlow++;\n\t\t\t}\n\t\t}\n\t\tif(strong < (up-low)){\n\t\t\tstrong = up-low;\n\t\t\tstr = extensions[i];\n\t\t}\n\t}\n\treturn class_name+\".\"+str;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::cout << \"Got class_name = \" << class_name << \"\\n\";\n\tstd::cout << \"Got extensions = \";\n\tfor (auto s : extensions) {\n\t\tstd::cout << s << \" \";\n\t}\n\tstd::cout << \"\\n\";\n\tdouble maxStrength = 0;\n\tstd::string maxExtension = \"\";\n\tfor (auto s : extensions) {\n\t\tint upper = 0;\n\t\tint lower = 0;\n\t\tfor (auto ch : s) {\n\t\t\tif (std::isupper(ch)) {\n\t\t\t\tupper++;\n\t\t\t} else {\n\t\t\t\tlower++;\n\t\t\t}\n\t\t}\n\t\tdouble currStrength = (double)upper - (double)lower;\n\t\tif (currStrength > maxStrength) {\n\t\t\tmaxStrength = currStrength;\n\t\t\tmaxExtension = s;\n\t\t}\n\t}\n\treturn class_name + \".\" + maxExtension;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string strongest = \"\";\n    double strongest_strength = 0;\n    std::transform(class_name.begin(), class_name.end(), class_name.begin(), ::tolower);\n    for (auto i = extensions.begin(); i != extensions.end(); i++) {\n        int capital_letters = 0;\n        int small_letters = 0;\n        for (auto j = i->begin(); j != i->end(); j++) {\n            if (*j >= 'A' && *j <= 'Z') {\n                capital_letters++;\n            } else if (*j >= 'a' && *j <= 'z') {\n                small_letters++;\n            }\n        }\n        double strength = double(capital_letters - small_letters);\n        if (strength >= strongest_strength) {\n            strongest_strength = strength;\n            strongest = *i;\n        }\n    }\n    std::transform(strongest.begin(), strongest.end(), strongest.begin(), ::toupper);\n    return class_name + \".\" + strongest;",
        "grade-55": {
            "execution": 0
        },
        "59": "double strongest = INT_MIN;\n    std::string extension;\n    for (int i = 0; i < extensions.size(); i++) {\n        int lower = 0;\n        int upper = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                lower++;\n            } else if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                upper++;\n            }\n        }\n        double curr = upper - lower;\n        if (curr > strongest) {\n            strongest = curr;\n            extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + extension;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.15911283384300012,
        "bleu-28": 0.4001224773705006,
        "bleu-6": 0.18228706292458724,
        "bleu-189": 0.5312005923933938,
        "bleu-70": 0.22947673569023988,
        "bleu-62": 0.43799260728460576,
        "bleu-57": 0.09288230861550058,
        "bleu-35": 0.42134307353847184,
        "bleu-188": 0.13501272189404478,
        "bleu-26": 0.12935542021470645,
        "bleu-173": 0.15957115689208248,
        "bleu-139": 0.5509191684442645,
        "bleu-22": 0.18942658223917744,
        "bleu-151": 0.3713372324708525,
        "bleu-108": 0.5349283138571493,
        "bleu-8": 0.30569183194326555,
        "bleu-7": 0.4392950080175779,
        "bleu-23": 0.1539995203997093,
        "bleu-55": 0.22628258058884462,
        "bleu-59": 0.4262698381079347,
        "codebleu-163": 0.4315100761007302,
        "codebleu-28": 0.7025603314517443,
        "codebleu-6": 0.4690879687725953,
        "codebleu-189": 0.7074120967780523,
        "codebleu-70": 0.45044980421216096,
        "codebleu-62": 0.6809352758172755,
        "codebleu-57": 0.35059523809523807,
        "codebleu-35": 0.6904458236488452,
        "codebleu-188": 0.4828703703703703,
        "codebleu-26": 0.3422799233085109,
        "codebleu-173": 0.39381476384835584,
        "codebleu-139": 0.6879980794984643,
        "codebleu-22": 0.4262762673216687,
        "codebleu-151": 0.6526831734771268,
        "codebleu-108": 0.6810542378538968,
        "codebleu-8": 0.7204820129384905,
        "codebleu-7": 0.6867817598447541,
        "codebleu-23": 0.4675264550264549,
        "codebleu-55": 0.5743843605285391,
        "codebleu-59": 0.695134522112593,
        "chrf-163": 0.39499862873493624,
        "chrf-28": 0.4657796076051216,
        "chrf-6": 0.3225528293814737,
        "chrf-189": 0.6301890262478469,
        "chrf-70": 0.40390355484743956,
        "chrf-62": 0.4522690976105073,
        "chrf-57": 0.3180580526477271,
        "chrf-35": 0.516324150760699,
        "chrf-188": 0.2599147091123877,
        "chrf-26": 0.36423895002770024,
        "chrf-173": 0.45297811111620134,
        "chrf-139": 0.5612794793887053,
        "chrf-22": 0.37687499253679413,
        "chrf-151": 0.45563269889576474,
        "chrf-108": 0.5060638659977318,
        "chrf-8": 0.4489837008273074,
        "chrf-7": 0.5384818777829008,
        "chrf-23": 0.37761228278618525,
        "chrf-55": 0.4320964994473984,
        "chrf-59": 0.5139026048445473,
        "rougel-163": 0.3805668016194332,
        "rougel-28": 0.5841269841269842,
        "rougel-6": 0.43621399176954734,
        "rougel-189": 0.6872852233676977,
        "rougel-70": 0.44725738396624476,
        "rougel-62": 0.5902777777777778,
        "rougel-57": 0.26573426573426573,
        "rougel-35": 0.6233766233766234,
        "rougel-188": 0.30069930069930073,
        "rougel-26": 0.40540540540540543,
        "rougel-173": 0.3896103896103896,
        "rougel-139": 0.6717557251908397,
        "rougel-22": 0.41702127659574467,
        "rougel-151": 0.5116279069767442,
        "rougel-108": 0.6594982078853047,
        "rougel-8": 0.5240641711229946,
        "rougel-7": 0.627831715210356,
        "rougel-23": 0.35143769968051125,
        "rougel-55": 0.48044692737430167,
        "rougel-59": 0.6233766233766234,
        "meteor-163": 0.3734863101563817,
        "meteor-28": 0.6112065003745618,
        "meteor-6": 0.3921192236877499,
        "meteor-189": 0.6948980876069016,
        "meteor-70": 0.388885322173477,
        "meteor-62": 0.5145320258683547,
        "meteor-57": 0.2516732198502487,
        "meteor-35": 0.6180185904801186,
        "meteor-188": 0.3567184664042985,
        "meteor-26": 0.2847195559871719,
        "meteor-173": 0.31080385305701985,
        "meteor-139": 0.6573629310125731,
        "meteor-22": 0.3780016908724274,
        "meteor-151": 0.47463210943124556,
        "meteor-108": 0.6003108997805413,
        "meteor-8": 0.6211827936116308,
        "meteor-7": 0.5670880659446865,
        "meteor-23": 0.4028094404547448,
        "meteor-55": 0.4559225449515906,
        "meteor-59": 0.6518046157363127,
        "ruby-163": 0.25735294117647056,
        "ruby-28": 0.44692737430167595,
        "ruby-6": 0.2867647058823529,
        "ruby-189": 0.6,
        "ruby-70": 0.3308823529411765,
        "ruby-62": 0.4473684210526315,
        "ruby-57": 0.15333333333333332,
        "ruby-35": 0.5174418604651163,
        "ruby-188": 0.17333333333333334,
        "ruby-26": 0.3161764705882353,
        "ruby-173": 0.30147058823529416,
        "ruby-139": 0.5735294117647058,
        "ruby-22": 0.32352941176470584,
        "ruby-151": 0.3090909090909091,
        "ruby-108": 0.5524475524475525,
        "ruby-8": 0.39495798319327735,
        "ruby-7": 0.5202312138728324,
        "ruby-23": 0.21468926553672318,
        "ruby-55": 0.3288288288288288,
        "ruby-59": 0.5232558139534884,
        "codebertscore_f1-163": 0.7614650726318359,
        "codebertscore_f3-163": 0.7616340517997742,
        "codebertscore_f1-28": 0.8216082453727722,
        "codebertscore_f3-28": 0.825127124786377,
        "codebertscore_f1-6": 0.7721453309059143,
        "codebertscore_f3-6": 0.7663438320159912,
        "codebertscore_f1-189": 0.8372530341148376,
        "codebertscore_f3-189": 0.8392494320869446,
        "codebertscore_f1-70": 0.7983121871948242,
        "codebertscore_f3-70": 0.7859271168708801,
        "codebertscore_f1-62": 0.8265193104743958,
        "codebertscore_f3-62": 0.8132599592208862,
        "codebertscore_f1-57": 0.693658709526062,
        "codebertscore_f3-57": 0.6964347958564758,
        "codebertscore_f1-35": 0.8275619745254517,
        "codebertscore_f3-35": 0.8320847153663635,
        "codebertscore_f1-188": 0.7084067463874817,
        "codebertscore_f3-188": 0.7369000315666199,
        "codebertscore_f1-26": 0.790984034538269,
        "codebertscore_f3-26": 0.7792891263961792,
        "codebertscore_f1-173": 0.7751060724258423,
        "codebertscore_f3-173": 0.7637476325035095,
        "codebertscore_f1-139": 0.8422042727470398,
        "codebertscore_f3-139": 0.8275866508483887,
        "codebertscore_f1-22": 0.7641120553016663,
        "codebertscore_f3-22": 0.7628251314163208,
        "codebertscore_f1-151": 0.8041436672210693,
        "codebertscore_f3-151": 0.7985568046569824,
        "codebertscore_f1-108": 0.8515826463699341,
        "codebertscore_f3-108": 0.84086012840271,
        "codebertscore_f1-8": 0.7444308996200562,
        "codebertscore_f3-8": 0.776097297668457,
        "codebertscore_f1-7": 0.8464983105659485,
        "codebertscore_f3-7": 0.8388720154762268,
        "codebertscore_f1-23": 0.7627350091934204,
        "codebertscore_f3-23": 0.7754647731781006,
        "codebertscore_f1-55": 0.7791557312011719,
        "codebertscore_f3-55": 0.7988203763961792,
        "codebertscore_f1-59": 0.8371621370315552,
        "codebertscore_f3-59": 0.8328776359558105,
        "codebertscore_s_f1-163": 0.8098019957542419,
        "codebertscore_s_f3-163": 0.8069202303886414,
        "codebertscore_s_f1-28": 0.8564190864562988,
        "codebertscore_s_f3-28": 0.8624969124794006,
        "codebertscore_s_f1-6": 0.8230252265930176,
        "codebertscore_s_f3-6": 0.8141602277755737,
        "codebertscore_s_f1-189": 0.8727938532829285,
        "codebertscore_s_f3-189": 0.8722403049468994,
        "codebertscore_s_f1-70": 0.8414223790168762,
        "codebertscore_s_f3-70": 0.8249915838241577,
        "codebertscore_s_f1-62": 0.8579286336898804,
        "codebertscore_s_f3-62": 0.8524118661880493,
        "codebertscore_s_f1-57": 0.7578973174095154,
        "codebertscore_s_f3-57": 0.7529217004776001,
        "codebertscore_s_f1-35": 0.8583983182907104,
        "codebertscore_s_f3-35": 0.8640909194946289,
        "codebertscore_s_f1-188": 0.7615540623664856,
        "codebertscore_s_f3-188": 0.7859818935394287,
        "codebertscore_s_f1-26": 0.8425211310386658,
        "codebertscore_s_f3-26": 0.8210740685462952,
        "codebertscore_s_f1-173": 0.8194213509559631,
        "codebertscore_s_f3-173": 0.8042653203010559,
        "codebertscore_s_f1-139": 0.8752010464668274,
        "codebertscore_s_f3-139": 0.8613651990890503,
        "codebertscore_s_f1-22": 0.8142454028129578,
        "codebertscore_s_f3-22": 0.8105484247207642,
        "codebertscore_s_f1-151": 0.8378110527992249,
        "codebertscore_s_f3-151": 0.8337353467941284,
        "codebertscore_s_f1-108": 0.8870185017585754,
        "codebertscore_s_f3-108": 0.8757528066635132,
        "codebertscore_s_f1-8": 0.7879763841629028,
        "codebertscore_s_f3-8": 0.8222499489784241,
        "codebertscore_s_f1-7": 0.875665545463562,
        "codebertscore_s_f3-7": 0.8666006922721863,
        "codebertscore_s_f1-23": 0.8064936399459839,
        "codebertscore_s_f3-23": 0.8134825229644775,
        "codebertscore_s_f1-55": 0.8146956562995911,
        "codebertscore_s_f3-55": 0.8324324488639832,
        "codebertscore_s_f1-59": 0.8735300898551941,
        "codebertscore_s_f3-59": 0.8698276281356812,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n",
        "snippet": [
            "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n"
        ],
        "simplified": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
        "task_id": "87",
        "164": "std::vector<std::tuple<long, long>> result;\n    if(lst.size() == 0) return result;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& lhs, const std::tuple<long, long>& rhs) {\n        return std::get<0>(lhs) < std::get<0>(rhs);\n    });\n    long start = 0;\n    long end = 0;\n    while(start < result.size()) {\n        end = start;\n        while(end < result.size() && std::get<0>(result[start]) == std::get<0>(result[end])) {\n            end++;\n        }\n        std::sort(result.begin() + start, result.begin() + end, [](const std::tuple<long, long>& lhs, const std::tuple<long, long>& rhs) {\n            return std::get<1>(lhs) > std::get<1>(rhs);\n        });\n        start = end;\n    }\n    return result;",
        "grade-164": {
            "execution": 1
        },
        "28": "std::vector<std::tuple<long, long>> final_vector;\n    for (int i = 0; i < lst.size(); i++) {\n        auto current_vector = lst[i];\n        std::vector<long> current_vector_index;\n        for (int j = 0; j < current_vector.size(); j++) {\n            if (current_vector[j] == x) {\n                current_vector_index.push_back(j);\n            }\n        }\n        for (int k = 0; k < current_vector_index.size(); k++) {\n            std::tuple<long, long> current_tuple = std::make_tuple(i, current_vector_index[k]);\n            final_vector.push_back(current_tuple);\n        }\n    }\n    std::sort(final_vector.begin(), final_vector.end(), [](std::tuple<long, long> left, std::tuple<long, long> right) {\n        long first_left = std::get<0>(left);\n        long first_right = std::get<0>(right);\n        long second_left = std::get<1>(left);\n        long second_right = std::get<1>(right);\n        if (first_left != first_right) {\n            return first_left < first_right;\n        } else {\n            return second_left > second_right;\n        }\n    });\n    return final_vector;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return (std::get<0>(a) < std::get<0>(b));\n              });\n    for (long i = 0; i < result.size(); i++) {\n        for (long j = 0; j < result.size() - 1; j++) {\n            if (std::get<0>(result[j]) == std::get<0>(result[j + 1])) {\n                if (std::get<1>(result[j]) < std::get<1>(result[j + 1])) {\n                    std::swap(result[j], result[j + 1]);\n                }\n            }\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::vector<std::tuple<long, long>>> sorted_rows;\n    std::vector<std::tuple<long, long>> temp;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                temp.push_back(std::make_tuple(i, j));\n            }\n        }\n        sorted_rows.push_back(temp);\n        temp.clear();\n    }\n    for (int i = 0; i < sorted_rows.size(); i++) {\n        std::sort(sorted_rows[i].begin(), sorted_rows[i].end(), [](std::tuple<long, long> const &a, std::tuple<long, long> const &b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n    }\n    std::sort(sorted_rows.begin(), sorted_rows.end(), [](std::vector<std::tuple<long, long>> const &a, std::vector<std::tuple<long, long>> const &b) {\n        return std::get<0>(a[0]) < std::get<0>(b[0]);\n    });\n    for (int i = 0; i < sorted_rows.size(); i++) {\n        for (int j = 0; j < sorted_rows[i].size(); j++) {\n            result.push_back(sorted_rows[i][j]);\n        }\n    }\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<std::tuple<long, long>> result;\n\tlong numRows = lst.size();\n\tfor (long i = 0; i < numRows; i++) {\n\t\tlong numColumns = lst[i].size();\n\t\tfor (long j = 0; j < numColumns; j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tstd::tuple<long, long> temp(i, j);\n\t\t\t\tresult.push_back(temp);\n\t\t\t}\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\tfor (long i = 0; i < result.size(); i++) {\n\t\tstd::cout << std::get<0>(result[i]) << \" \" << std::get<1>(result[i]) << std::endl;\n\t}\n\treturn result;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<std::tuple<long, long>> res;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\t});\n\tstd::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n\t\treturn std::get<0>(a) == std::get<0>(b) ? std::get<1>(a) > std::get<1>(b) : true;\n\t});\n\treturn res;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::tuple<long, long>> row;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                row.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    sort(row.begin(), row.end());\n    for (int i = 0; i < row.size(); i++) {\n        for (int j = i; j < row.size(); j++) {\n            if (std::get<0>(row[i]) == std::get<0>(row[j])) {\n                if (std::get<1>(row[i]) < std::get<1>(row[j])) {\n                    std::swap(row[i], row[j]);\n                }\n            }\n        }\n    }\n    return row;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<std::tuple<long, long>> res;\n    long row = 0;\n    for (auto &a : lst) {\n        long col = 0;\n        for (auto &b : a) {\n            if (b == x) {\n                res.push_back(std::make_tuple(row, col));\n            }\n            col++;\n        }\n        row++;\n    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::vector<std::tuple<long, long>> result;\n  for (auto i = 0; i < lst.size(); i++) {\n    for (auto j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x)\n        result.push_back(std::make_tuple(i, j));\n    }\n  }\n  std::sort(result.begin(), result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n    if (std::get<0>(a) == std::get<0>(b)) {\n      return std::get<1>(a) > std::get<1>(b);\n    }\n    return std::get<0>(a) < std::get<0>(b);\n  });\n  return result;",
        "grade-26": {
            "execution": 1
        },
        "174": "std::vector<std::tuple<long, long>> ret{};\n    int row = 0;\n    std::for_each(lst.begin(), lst.end(), [&](auto v) {\n        long i = 0;\n        std::vector<long> indexes{};\n        for (auto j : v) {\n            if (j == x) {\n                indexes.push_back(i);\n            }\n            i++;\n        }\n        std::for_each(indexes.begin(), indexes.end(), [&](auto index) {\n            ret.push_back(std::make_tuple(row, index));\n        });\n        row++;\n    });\n    std::sort(ret.begin(), ret.end(), [](auto lhs, auto rhs) {\n        if (std::get<0>(lhs) != std::get<0>(rhs)) {\n            return std::get<0>(lhs) < std::get<0>(rhs);\n        } else {\n            return std::get<1>(lhs) > std::get<1>(rhs);\n        }\n    });\n    return ret;",
        "grade-174": {
            "execution": 1
        },
        "140": "std::vector<std::tuple<long, long>> tuple_list;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\ttuple_list.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(tuple_list.begin(), tuple_list.end());\n\treturn tuple_list;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::vector<std::tuple<long, long>> sorted_lst;\n\tstd::vector<std::tuple<long, long>> result;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tsorted_lst.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(sorted_lst.begin(), sorted_lst.end());\n\tfor (long i = 0; i < sorted_lst.size(); i++) {\n\t\tif (std::get<0>(sorted_lst[i]) == std::get<0>(sorted_lst[i - 1])) {\n\t\t\tresult.push_back(sorted_lst[i]);\n\t\t}\n\t}\n\tfor (long i = 0; i < result.size(); i++) {\n\t\tfor (long j = 0; j < result.size() - 1; j++) {\n\t\t\tif (std::get<1>(result[j]) < std::get<1>(result[j + 1])) {\n\t\t\t\tstd::tuple<long, long> temp = result[j];\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t\tresult[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> result_v;\n    std::tuple<long, long> add_tuple;\n    if (lst.size() == 0)\n        return result;\n    // read row by row\n    for (size_t i = 0; i < lst.size(); i++) {\n        // read by col\n        for (size_t j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                std::get<0>(add_tuple) = i;\n                std::get<1>(add_tuple) = j;\n                result.push_back(add_tuple);\n            }\n        }\n    }\n    // Sort result in descending order, compare by row first, then by col\n    std::sort(result.begin(), result.end(),\n              [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n                  return (std::get<0>(a) < std::get<0>(b) ||\n                          (std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b)));\n              });\n    return result;",
        "grade-152": {
            "execution": 1
        },
        "109": "std::vector<std::tuple<long, long>> res;\n  for (long i = 0; i < lst.size(); i++) {\n    for (long j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        res.push_back(std::make_tuple(i, j));\n      }\n    }\n  }\n  std::sort(res.begin(), res.end(), [](auto const &a, auto const &b) {\n    if (std::get<0>(a) == std::get<0>(b)) {\n      return std::get<1>(a) > std::get<1>(b);\n    }\n    return std::get<0>(a) < std::get<0>(b);\n  });\n  return res;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::vector<std::tuple<long, long>> ans;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tans.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(ans.begin(), ans.end(), [](std::tuple<long, long> const & a, std::tuple<long, long> const & b) {\n\t\tif (std::get<0>(a) == std::get<0>(b)) {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\t});\n\treturn ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::tuple<long, long>> result;\n  for (long i = 0; i < lst.size(); i++) {\n    auto it = std::find(lst[i].begin(), lst[i].end(), x);\n    if (it != lst[i].end()) {\n      result.push_back(std::make_tuple(i, std::distance(lst[i].begin(), it)));\n    }\n  }\n  // sort row in ascending order\n  std::sort(result.begin(), result.end(),\n            [](std::tuple<long, long> a, std::tuple<long, long> b) {\n    return std::get<0>(a) < std::get<0>(b);\n  });\n  // sort column in descending order\n  std::sort(result.begin(), result.end(),\n            [](std::tuple<long, long> a, std::tuple<long, long> b) {\n    return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b);\n  });\n  return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::tuple<long, long>> temp;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                temp.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    return temp;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::tuple<long, long>> res;\n    long long rlen = lst.size();\n    long long clen;\n    for (long long i = 0; i < rlen; i++) {\n        clen = lst[i].size();\n        for (long long j = 0; j < clen; j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n        return std::get<0>(t1) < std::get<0>(t2);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n        return std::get<1>(t1) > std::get<1>(t2);\n    });\n    return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::tuple<long, long>> answer;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x)\n\t\t\t\tanswer.push_back(std::make_tuple(i, j));\n\t\t}\n\t}\n\tstd::sort(answer.begin(), answer.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\t});\n\tstd::sort(answer.begin(), answer.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n\t\treturn std::get<1>(a) > std::get<1>(b);\n\t});\n\treturn answer;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.13541054150202592,
        "bleu-28": 0.16421713709979258,
        "bleu-6": 0.16481289716803127,
        "bleu-190": 0.12474214113496875,
        "bleu-70": 0.2208056816737603,
        "bleu-62": 0.17360833345301382,
        "bleu-57": 0.21616661206848964,
        "bleu-35": 0.1904394761624593,
        "bleu-189": 0.06459113794695565,
        "bleu-26": 0.2181455661640877,
        "bleu-174": 0.07381938320323651,
        "bleu-140": 0.40776533757236444,
        "bleu-22": 0.15893557085576318,
        "bleu-152": 0.14829849777597978,
        "bleu-109": 0.2290259745662545,
        "bleu-8": 0.21209979802844933,
        "bleu-7": 0.11489875809662511,
        "bleu-23": 0.44315421964012985,
        "bleu-55": 0.17660961421798477,
        "bleu-59": 0.2212960084696233,
        "codebleu-164": 0.6764906547779044,
        "codebleu-28": 0.6960234521288554,
        "codebleu-6": 0.6907973583609691,
        "codebleu-190": 0.6978436779664882,
        "codebleu-70": 0.7094388628654288,
        "codebleu-62": 0.6629825626097196,
        "codebleu-57": 0.6950553961576745,
        "codebleu-35": 0.6653247457644003,
        "codebleu-189": 0.5664885072578053,
        "codebleu-26": 0.6748564833844175,
        "codebleu-174": 0.6195311791143041,
        "codebleu-140": 0.6735677381746108,
        "codebleu-22": 0.704711603001739,
        "codebleu-152": 0.6941225989944306,
        "codebleu-109": 0.6761075880482864,
        "codebleu-8": 0.6739509502280406,
        "codebleu-7": 0.6313522243819634,
        "codebleu-23": 0.6822389818244252,
        "codebleu-55": 0.6721494844523229,
        "codebleu-59": 0.6731980647449372,
        "chrf-164": 0.31700701275816684,
        "chrf-28": 0.3128024665153288,
        "chrf-6": 0.37579595825059625,
        "chrf-190": 0.3235126017434127,
        "chrf-70": 0.40994132790817,
        "chrf-62": 0.3813500267242118,
        "chrf-57": 0.45945800313960133,
        "chrf-35": 0.39050856384319976,
        "chrf-189": 0.24476740664303623,
        "chrf-26": 0.4279436831756055,
        "chrf-174": 0.26255976017394006,
        "chrf-140": 0.4956923439583841,
        "chrf-22": 0.36482328693135685,
        "chrf-152": 0.3545860659165123,
        "chrf-109": 0.44024627732901506,
        "chrf-8": 0.4210721865414203,
        "chrf-7": 0.2920587303572897,
        "chrf-23": 0.5637245840291534,
        "chrf-55": 0.3673725636770695,
        "chrf-59": 0.4410263243992537,
        "rougel-164": 0.30952380952380953,
        "rougel-28": 0.3231197771587744,
        "rougel-6": 0.3298429319371728,
        "rougel-190": 0.27474747474747474,
        "rougel-70": 0.40989399293286216,
        "rougel-62": 0.36467236467236464,
        "rougel-57": 0.4088050314465408,
        "rougel-35": 0.392638036809816,
        "rougel-189": 0.2720588235294118,
        "rougel-26": 0.43097643097643096,
        "rougel-174": 0.2603550295857988,
        "rougel-140": 0.6461538461538462,
        "rougel-22": 0.3256997455470738,
        "rougel-152": 0.3222506393861893,
        "rougel-109": 0.44599303135888496,
        "rougel-8": 0.42244224422442245,
        "rougel-7": 0.27055702917771884,
        "rougel-23": 0.6565656565656565,
        "rougel-55": 0.3652694610778443,
        "rougel-59": 0.4177215189873418,
        "meteor-164": 0.3720158650214051,
        "meteor-28": 0.41702735333815516,
        "meteor-6": 0.4032669705132835,
        "meteor-190": 0.4527925531914894,
        "meteor-70": 0.5065541374340918,
        "meteor-62": 0.4442211445198836,
        "meteor-57": 0.45291913742562845,
        "meteor-35": 0.44513459681020645,
        "meteor-189": 0.3527482421540044,
        "meteor-26": 0.4687737973387922,
        "meteor-174": 0.36639050804526785,
        "meteor-140": 0.6059766763848398,
        "meteor-22": 0.3819300351686298,
        "meteor-152": 0.41263967216166286,
        "meteor-109": 0.4736215098241985,
        "meteor-8": 0.465912512716175,
        "meteor-7": 0.37037766869629596,
        "meteor-23": 0.6372782294918304,
        "meteor-55": 0.45166863905325444,
        "meteor-59": 0.48459348505131644,
        "ruby-164": 0.17313432835820897,
        "ruby-28": 0.18613138686131392,
        "ruby-6": 0.18855218855218858,
        "ruby-190": 0.15121951219512197,
        "ruby-70": 0.26262626262626265,
        "ruby-62": 0.1992481203007519,
        "ruby-57": 0.24892703862660948,
        "ruby-35": 0.21991701244813278,
        "ruby-189": 0.17112299465240643,
        "ruby-26": 0.25,
        "ruby-174": 0.1541501976284585,
        "ruby-140": 0.4636363636363636,
        "ruby-22": 0.18831168831168832,
        "ruby-152": 0.17647058823529416,
        "ruby-109": 0.2623762376237624,
        "ruby-8": 0.24311926605504586,
        "ruby-7": 0.16095890410958902,
        "ruby-23": 0.4690265486725663,
        "ruby-55": 0.21285140562248994,
        "ruby-59": 0.23809523809523814,
        "codebertscore_f1-164": 0.7458749413490295,
        "codebertscore_f3-164": 0.8352255821228027,
        "codebertscore_f1-28": 0.729256808757782,
        "codebertscore_f3-28": 0.8121939301490784,
        "codebertscore_f1-6": 0.7830135226249695,
        "codebertscore_f3-6": 0.8619171977043152,
        "codebertscore_f1-190": 0.7412554025650024,
        "codebertscore_f3-190": 0.8118559122085571,
        "codebertscore_f1-70": 0.8110610246658325,
        "codebertscore_f3-70": 0.8559049367904663,
        "codebertscore_f1-62": 0.7789516448974609,
        "codebertscore_f3-62": 0.857887327671051,
        "codebertscore_f1-57": 0.8052879571914673,
        "codebertscore_f3-57": 0.860395073890686,
        "codebertscore_f1-35": 0.7698104381561279,
        "codebertscore_f3-35": 0.8490815162658691,
        "codebertscore_f1-189": 0.7098287343978882,
        "codebertscore_f3-189": 0.756371021270752,
        "codebertscore_f1-26": 0.8085764050483704,
        "codebertscore_f3-26": 0.8667889833450317,
        "codebertscore_f1-174": 0.7010764479637146,
        "codebertscore_f3-174": 0.7706882953643799,
        "codebertscore_f1-140": 0.860660195350647,
        "codebertscore_f3-140": 0.8779966235160828,
        "codebertscore_f1-22": 0.7884348034858704,
        "codebertscore_f3-22": 0.8496907353401184,
        "codebertscore_f1-152": 0.7162542343139648,
        "codebertscore_f3-152": 0.7932888865470886,
        "codebertscore_f1-109": 0.8105523586273193,
        "codebertscore_f3-109": 0.8696668148040771,
        "codebertscore_f1-8": 0.80389404296875,
        "codebertscore_f3-8": 0.8678760528564453,
        "codebertscore_f1-7": 0.7444368004798889,
        "codebertscore_f3-7": 0.8217509984970093,
        "codebertscore_f1-23": 0.8698691725730896,
        "codebertscore_f3-23": 0.8861958384513855,
        "codebertscore_f1-55": 0.7461791634559631,
        "codebertscore_f3-55": 0.8225110173225403,
        "codebertscore_f1-59": 0.8084176182746887,
        "codebertscore_f3-59": 0.8754006028175354,
        "codebertscore_s_f1-164": 0.9121113419532776,
        "codebertscore_s_f3-164": 0.9479203224182129,
        "codebertscore_s_f1-28": 0.9072083830833435,
        "codebertscore_s_f3-28": 0.9434534907341003,
        "codebertscore_s_f1-6": 0.9344865679740906,
        "codebertscore_s_f3-6": 0.9593339562416077,
        "codebertscore_s_f1-190": 0.9104102849960327,
        "codebertscore_s_f3-190": 0.9463014602661133,
        "codebertscore_s_f1-70": 0.9326931834220886,
        "codebertscore_s_f3-70": 0.9525609612464905,
        "codebertscore_s_f1-62": 0.9311628937721252,
        "codebertscore_s_f3-62": 0.9579032063484192,
        "codebertscore_s_f1-57": 0.943837583065033,
        "codebertscore_s_f3-57": 0.9586815237998962,
        "codebertscore_s_f1-35": 0.9314802885055542,
        "codebertscore_s_f3-35": 0.9542555809020996,
        "codebertscore_s_f1-189": 0.9142055511474609,
        "codebertscore_s_f3-189": 0.9308273792266846,
        "codebertscore_s_f1-26": 0.9438545107841492,
        "codebertscore_s_f3-26": 0.9608965516090393,
        "codebertscore_s_f1-174": 0.9046960473060608,
        "codebertscore_s_f3-174": 0.9310534596443176,
        "codebertscore_s_f1-140": 0.9571118950843811,
        "codebertscore_s_f3-140": 0.9626968502998352,
        "codebertscore_s_f1-22": 0.9277408123016357,
        "codebertscore_s_f3-22": 0.9558570981025696,
        "codebertscore_s_f1-152": 0.9053691625595093,
        "codebertscore_s_f3-152": 0.9372583031654358,
        "codebertscore_s_f1-109": 0.9407359957695007,
        "codebertscore_s_f3-109": 0.9607336521148682,
        "codebertscore_s_f1-8": 0.9407007694244385,
        "codebertscore_s_f3-8": 0.9607784152030945,
        "codebertscore_s_f1-7": 0.9223063588142395,
        "codebertscore_s_f3-7": 0.9470965266227722,
        "codebertscore_s_f1-23": 0.9616624712944031,
        "codebertscore_s_f3-23": 0.96379554271698,
        "codebertscore_s_f1-55": 0.9236151576042175,
        "codebertscore_s_f3-55": 0.9471728205680847,
        "codebertscore_s_f1-59": 0.9428841471672058,
        "codebertscore_s_f3-59": 0.9627453088760376,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n",
        "snippet": [
            "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n"
        ],
        "simplified": "Return median of elements in the list l.",
        "task_id": "47",
        "168": "// Your code here.\n  if(l.size() == 0)\n    return 0;\n  if(l.size()%2 == 0)\n  {\n    return ((float)(l[l.size()/2-1] + l[l.size()/2])/2);\n  }\n  else\n  {\n    return (float)l[l.size()/2];\n  }",
        "grade-168": {
            "execution": 0
        },
        "28": "assert(false);\n    return 0.0;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (l.size() % 2 == 0) {\n\t\treturn (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[l.size() / 2];\n\t}",
        "grade-6": {
            "execution": 0
        },
        "194": "// TODO: Implement me\n  if(l.size()%2==0)\n  {\n    float m=(l[l.size()/2]+l[l.size()/2-1])/2.0;\n    return m;\n  }\n  else\n  {\n    float m=l[l.size()/2];\n    return m;\n  }",
        "grade-194": {
            "execution": 0
        },
        "70": "assert(l.size() > 0);\n    auto l1 = l;\n    auto l2 = l;\n    auto l3 = l;\n    auto l4 = l;\n    auto l5 = l;\n    auto l6 = l;\n    auto l7 = l;\n    auto l8 = l;\n    auto l9 = l;\n    auto l10 = l;\n    auto l11 = l;\n    auto l12 = l;\n    auto l13 = l;\n    auto l14 = l;\n    auto l15 = l;\n    auto l16 = l;\n    auto l17 = l;\n    auto l18 = l;\n    auto l19 = l;\n    auto l20 = l;\n    auto l21 = l;\n    auto l22 = l;\n    auto l23 = l;\n    auto l24 = l;\n    auto l25 = l;\n    auto l26 = l;\n    auto l27 = l;\n    auto l28 = l;\n    auto l29 = l;\n    auto l30 = l;\n    auto l31 = l;\n    auto l32 = l;\n    auto l33 = l;\n    auto l34 = l;\n    auto l35 = l;\n    auto l36 = l;\n    auto l37 = l;\n    auto l38 = l;\n    auto l39 = l;\n    auto l40 = l;\n    auto l41 = l;\n    auto l42 = l;\n    auto l43 = l;\n    auto l44 = l;\n    auto l45 = l;\n    auto l46 = l;\n    auto l47 = l;\n    auto l48 = l;\n    auto l49 = l;\n    auto l50 = l;\n    auto l51 = l;\n    auto l52 = l;\n    auto l53 = l;\n    auto l54 = l;\n    auto l55 = l;\n    auto l56 = l;\n    auto l57 = l;\n    auto l58 = l;\n    auto l59 = l;\n    auto l60 = l;\n    auto l61 = l;\n    auto l62 = l;\n    auto l63",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your solution here\n  long count = l.size();\n  sort(l.begin(), l.end());\n  if (count % 2 == 0)\n  {\n    return (l[count / 2] + l[count / 2 - 1]) / 2.0;\n  }\n  else\n  {\n    return l[count / 2];\n  }",
        "grade-62": {
            "execution": 1
        },
        "57": "int n = l.size();\n\tif (n % 2 == 0) {\n\t\t//n is even\n\t\tn = n / 2;\n\t\treturn (l[n - 1] + l[n]) / 2.0;\n\t}\n\telse {\n\t\t//n is odd\n\t\tn = n / 2;\n\t\treturn l[n];\n\t}",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    std::sort(l.begin(),l.end());\n    int size=l.size();\n    if(size%2==0)\n    {\n        return (l[size/2-1]+l[size/2])/2.0;\n    }\n    else\n    {\n        return l[size/2];\n    }",
        "grade-35": {
            "execution": 1
        },
        "193": "assert(l.size() > 0);\n    assert(l.size() % 2 == 1);\n    assert(l.size() < 1001);\n    sort(l.begin(), l.end());\n    return l[l.size() / 2];",
        "grade-193": {
            "execution": 0
        },
        "26": "// WRITE YOUR CODE HERE\n  int n = l.size();\n  if(n % 2 == 0)\n  {\n    return (l[n/2] + l[n/2 - 1])/2.0;\n  }\n  else\n  {\n    return l[n/2];\n  }",
        "grade-26": {
            "execution": 0
        },
        "178": "float med = 0;\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n%2==0) {\n        med = (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else {\n        med = l[n/2];\n    }\n    return med;",
        "grade-178": {
            "execution": 1
        },
        "140": "float med = 0;\n    int lsize = l.size();\n    std::sort(l.begin(), l.end());\n    if (lsize%2 != 0) {\n        int index = lsize/2;\n        med = l[index];\n    }\n    else {\n        int index = lsize/2;\n        med = (l[index-1] + l[index])/2.0;\n    }\n    return med;",
        "grade-140": {
            "execution": 1
        },
        "22": "assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n  }",
        "grade-22": {
            "execution": 1
        },
        "154": "// Replace with your code\n\tint n = l.size();\n\tif (n%2 != 0) {\n\t\treturn l[n/2];\n\t} else {\n\t\tint a = l[n/2];\n\t\tint b = l[(n/2)-1];\n\t\treturn (a+b)/2.0;\n\t}",
        "grade-154": {
            "execution": 0
        },
        "109": "int len = l.size();\n\tstd::sort(l.begin(), l.end());\n\tif (len % 2 == 0) {\n\t\treturn (l[len / 2] + l[len / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[len / 2];\n\t}",
        "grade-109": {
            "execution": 1
        },
        "8": "// Write your code here.\n\tint n = l.size();\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn l[0];\n\tif (n == 2)\n\t\treturn (l[0] + l[1]) / 2.0;\n\tint mid = n / 2;\n\tif (n % 2 == 0)\n\t\treturn (l[mid - 1] + l[mid]) / 2.0;\n\telse\n\t\treturn l[mid];",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = l.size();\n  sort(l.begin(), l.end());\n  if (n % 2 != 0) {\n    return (float)l[n / 2];\n  }\n  else {\n    return (float)(l[(n - 1) / 2] + l[n / 2]) / 2.0;\n  }",
        "grade-7": {
            "execution": 1
        },
        "23": "// Write your code here\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2!=0)\n    {\n        return l[n/2];\n    }\n    else\n    {\n        return (l[n/2]+l[(n/2)-1])/2.0;\n    }",
        "grade-23": {
            "execution": 1
        },
        "55": "long n = l.size();\n    std::vector<long> minHeap;\n    std::vector<long> maxHeap;\n    maxHeap.push_back(l[0]);\n    if(n == 1)\n        return l[0];\n    for(long i = 1; i < n; i++) {\n        if(l[i] <= maxHeap[0]) {\n            maxHeap.push_back(l[i]);\n            std::push_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n        }\n        else {\n            minHeap.push_back(l[i]);\n            std::push_heap(minHeap.begin(), minHeap.end());\n        }\n        if(maxHeap.size() > minHeap.size() + 1) {\n            std::pop_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n            minHeap.push_back(maxHeap.back());\n            std::push_heap(minHeap.begin(), minHeap.end());\n            maxHeap.pop_back();\n        }\n        else if(minHeap.size() > maxHeap.size()) {\n            std::pop_heap(minHeap.begin(), minHeap.end());\n            maxHeap.push_back(minHeap.back());\n            std::push_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n            minHeap.pop_back();\n        }\n    }\n    if(maxHeap.size() == minHeap.size())\n        return (maxHeap[0] + minHeap[0]) / 2.0;\n    else\n        return maxHeap[0];",
        "grade-55": {
            "execution": 0
        },
        "59": "// >>> median([10, 20, 30, 40, 50])\n// 30\n// >>> median([0.5, 1.0, 2.0, 3.0, 4.0])\n// 2.5\n// >>> median([0.5, 1.0, 2.0, 3.0, 4.0, 5.0])\n// 2.5\nint n = l.size();\nstd::sort(l.begin(), l.end());\nif (n%2 == 0) {\nfloat m1 = l[n/2-1];\nfloat m2 = l[n/2];\nfloat m = (m1+m2)/2;\nreturn m;",
        "grade-59": {
            "execution": 0
        },
        "bleu-168": 0.5518168301934266,
        "bleu-28": 0.0006588910142874396,
        "bleu-6": 0.6303920117735604,
        "bleu-194": 0.5976670033674389,
        "bleu-70": 0.01939588482691698,
        "bleu-62": 0.5010831101119837,
        "bleu-57": 0.230963393925801,
        "bleu-35": 0.4650872405861698,
        "bleu-193": 0.6010130650609066,
        "bleu-26": 0.3146188529207817,
        "bleu-178": 0.4492288171466343,
        "bleu-140": 0.3343913060535101,
        "bleu-22": 0.6807203574817877,
        "bleu-154": 0.2081709369766682,
        "bleu-109": 0.5224110508943844,
        "bleu-8": 0.22245563420973288,
        "bleu-7": 0.4524277657873039,
        "bleu-23": 0.45270678396850267,
        "bleu-55": 0.08350415081439692,
        "bleu-59": 0.2068255741693964,
        "codebleu-168": 0.7810092592101976,
        "codebleu-28": 0.043330197025336394,
        "codebleu-6": 0.6772614173704485,
        "codebleu-194": 0.7142787773304884,
        "codebleu-70": 0.22336106190318178,
        "codebleu-62": 0.6258474547481437,
        "codebleu-57": 0.44582628343610037,
        "codebleu-35": 0.621300342537146,
        "codebleu-193": 0.6842424650675984,
        "codebleu-26": 0.4592522496368954,
        "codebleu-178": 0.6055637056609652,
        "codebleu-140": 0.5818044737649276,
        "codebleu-22": 0.8549239708283219,
        "codebleu-154": 0.4639661441916304,
        "codebleu-109": 0.6239828759193623,
        "codebleu-8": 0.5244446073531877,
        "codebleu-7": 0.6658222119460522,
        "codebleu-23": 0.6318141567516454,
        "codebleu-55": 0.6685021995381383,
        "codebleu-59": 0.6363227808800844,
        "chrf-168": 0.5968430386718698,
        "chrf-28": 0.10608517621237415,
        "chrf-6": 0.6492451915357542,
        "chrf-194": 0.6126631044054437,
        "chrf-70": 0.06368772021598801,
        "chrf-62": 0.4887562418136905,
        "chrf-57": 0.2969131179100299,
        "chrf-35": 0.5097585638807209,
        "chrf-193": 0.6366782349388538,
        "chrf-26": 0.311500106223165,
        "chrf-178": 0.46309587071103453,
        "chrf-140": 0.4282982165005504,
        "chrf-22": 0.8083258600511258,
        "chrf-154": 0.28892504531786894,
        "chrf-109": 0.543727441250866,
        "chrf-8": 0.31078651609101093,
        "chrf-7": 0.4875044968652986,
        "chrf-23": 0.48785608262769303,
        "chrf-55": 0.22042060948514317,
        "chrf-59": 0.3831212073690933,
        "rougel-168": 0.6666666666666666,
        "rougel-28": 0.17073170731707316,
        "rougel-6": 0.6766917293233082,
        "rougel-194": 0.5906040268456376,
        "rougel-70": 0.09113924050632911,
        "rougel-62": 0.5442176870748299,
        "rougel-57": 0.4084507042253522,
        "rougel-35": 0.6174496644295301,
        "rougel-193": 0.6222222222222222,
        "rougel-26": 0.45454545454545453,
        "rougel-178": 0.5064935064935064,
        "rougel-140": 0.46913580246913583,
        "rougel-22": 0.7407407407407408,
        "rougel-154": 0.4722222222222222,
        "rougel-109": 0.5555555555555556,
        "rougel-8": 0.3954802259887006,
        "rougel-7": 0.6174496644295301,
        "rougel-23": 0.6308724832214765,
        "rougel-55": 0.17982456140350875,
        "rougel-59": 0.3179916317991632,
        "meteor-168": 0.7208707620110276,
        "meteor-28": 0.0728862973760933,
        "meteor-6": 0.7085463983546834,
        "meteor-194": 0.7030173838700484,
        "meteor-70": 0.1481746148510898,
        "meteor-62": 0.5160444497568621,
        "meteor-57": 0.3860376044568245,
        "meteor-35": 0.5514566816314835,
        "meteor-193": 0.5852045790129076,
        "meteor-26": 0.42033898305084744,
        "meteor-178": 0.4563657909751922,
        "meteor-140": 0.48339107456578306,
        "meteor-22": 0.9037208939617226,
        "meteor-154": 0.42860292265054173,
        "meteor-109": 0.5181946349641823,
        "meteor-8": 0.44242633122429004,
        "meteor-7": 0.5881226053639849,
        "meteor-23": 0.5720157459535538,
        "meteor-55": 0.3760029529071438,
        "meteor-59": 0.4867493009473729,
        "ruby-168": 0.49425287356321834,
        "ruby-28": 0.09722222222222221,
        "ruby-6": 0.45833333333333337,
        "ruby-194": 0.37662337662337664,
        "ruby-70": 0.05572755417956654,
        "ruby-62": 0.28,
        "ruby-57": 0.20833333333333337,
        "ruby-35": 0.38961038961038963,
        "ruby-193": 0.5694444444444444,
        "ruby-26": 0.3055555555555556,
        "ruby-178": 0.25609756097560976,
        "ruby-140": 0.2777777777777778,
        "ruby-22": 0.5666666666666667,
        "ruby-154": 0.26388888888888884,
        "ruby-109": 0.29166666666666663,
        "ruby-8": 0.2571428571428571,
        "ruby-7": 0.4415584415584416,
        "ruby-23": 0.38961038961038963,
        "ruby-55": 0.1015625,
        "ruby-59": 0.17964071856287422,
        "codebertscore_f1-168": 0.8668906092643738,
        "codebertscore_f3-168": 0.879400372505188,
        "codebertscore_f1-28": 0.6501839756965637,
        "codebertscore_f3-28": 0.6094266176223755,
        "codebertscore_f1-6": 0.8827003836631775,
        "codebertscore_f3-6": 0.87432861328125,
        "codebertscore_f1-194": 0.8634701371192932,
        "codebertscore_f3-194": 0.8828297853469849,
        "codebertscore_f1-70": 0.6431291103363037,
        "codebertscore_f3-70": 0.6907905340194702,
        "codebertscore_f1-62": 0.8466679453849792,
        "codebertscore_f3-62": 0.8764224052429199,
        "codebertscore_f1-57": 0.8060303926467896,
        "codebertscore_f3-57": 0.8298362493515015,
        "codebertscore_f1-35": 0.8674141764640808,
        "codebertscore_f3-35": 0.8921065330505371,
        "codebertscore_f1-193": 0.8599529266357422,
        "codebertscore_f3-193": 0.8552679419517517,
        "codebertscore_f1-26": 0.829938530921936,
        "codebertscore_f3-26": 0.8548551797866821,
        "codebertscore_f1-178": 0.8496191501617432,
        "codebertscore_f3-178": 0.8756141066551208,
        "codebertscore_f1-140": 0.8161885142326355,
        "codebertscore_f3-140": 0.851462721824646,
        "codebertscore_f1-22": 0.89877849817276,
        "codebertscore_f3-22": 0.9059354662895203,
        "codebertscore_f1-154": 0.8275895714759827,
        "codebertscore_f3-154": 0.8558022975921631,
        "codebertscore_f1-109": 0.8716856241226196,
        "codebertscore_f3-109": 0.8829330801963806,
        "codebertscore_f1-8": 0.7943220138549805,
        "codebertscore_f3-8": 0.8235248327255249,
        "codebertscore_f1-7": 0.8614716529846191,
        "codebertscore_f3-7": 0.8764277696609497,
        "codebertscore_f1-23": 0.8521485328674316,
        "codebertscore_f3-23": 0.8816808462142944,
        "codebertscore_f1-55": 0.6643672585487366,
        "codebertscore_f3-55": 0.7441649436950684,
        "codebertscore_f1-59": 0.7684479355812073,
        "codebertscore_f3-59": 0.8293774724006653,
        "codebertscore_s_f1-168": 0.8699597120285034,
        "codebertscore_s_f3-168": 0.8827987313270569,
        "codebertscore_s_f1-28": 0.6267001032829285,
        "codebertscore_s_f3-28": 0.5866448283195496,
        "codebertscore_s_f1-6": 0.8918442726135254,
        "codebertscore_s_f3-6": 0.882080078125,
        "codebertscore_s_f1-194": 0.8670268058776855,
        "codebertscore_s_f3-194": 0.8857803344726562,
        "codebertscore_s_f1-70": 0.6715947985649109,
        "codebertscore_s_f3-70": 0.7151070833206177,
        "codebertscore_s_f1-62": 0.8532903790473938,
        "codebertscore_s_f3-62": 0.8822768330574036,
        "codebertscore_s_f1-57": 0.8145464658737183,
        "codebertscore_s_f3-57": 0.8403783440589905,
        "codebertscore_s_f1-35": 0.8679067492485046,
        "codebertscore_s_f3-35": 0.8927669525146484,
        "codebertscore_s_f1-193": 0.8620120286941528,
        "codebertscore_s_f3-193": 0.8567100763320923,
        "codebertscore_s_f1-26": 0.8355122804641724,
        "codebertscore_s_f3-26": 0.8610196709632874,
        "codebertscore_s_f1-178": 0.855579137802124,
        "codebertscore_s_f3-178": 0.8818084597587585,
        "codebertscore_s_f1-140": 0.8205713629722595,
        "codebertscore_s_f3-140": 0.8558264970779419,
        "codebertscore_s_f1-22": 0.9058631658554077,
        "codebertscore_s_f3-22": 0.9120159149169922,
        "codebertscore_s_f1-154": 0.8310279846191406,
        "codebertscore_s_f3-154": 0.8638569116592407,
        "codebertscore_s_f1-109": 0.8770285248756409,
        "codebertscore_s_f3-109": 0.8873513340950012,
        "codebertscore_s_f1-8": 0.7938419580459595,
        "codebertscore_s_f3-8": 0.8255459070205688,
        "codebertscore_s_f1-7": 0.867229163646698,
        "codebertscore_s_f3-7": 0.8812282085418701,
        "codebertscore_s_f1-23": 0.8517246246337891,
        "codebertscore_s_f3-23": 0.881980299949646,
        "codebertscore_s_f1-55": 0.6785049438476562,
        "codebertscore_s_f3-55": 0.7465416193008423,
        "codebertscore_s_f1-59": 0.7824063301086426,
        "codebertscore_s_f3-59": 0.8408861756324768,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 0,
        "raw_gpt35_nsnr-28": "0",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-70": 0,
        "raw_gpt35_nsnr-70": "0",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-70": 1,
        "raw_gpt35_nswr-70": "1",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-178": 4,
        "raw_gpt35_nswr-178": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n",
        "snippet": [
            "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n"
        ],
        "simplified": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
        "task_id": "19",
        "163": "std::stringstream ss(numbers);\n\tstd::vector<int> nums;\n\tint c;\n\twhile (ss >> c)\n\t\tnums.push_back(c);\n\tstd::sort(nums.begin(), nums.end());\n\tstd::stringstream ss2;\n\tfor (int c : nums)\n\t\tss2 << c << \" \";\n\treturn ss2.str();",
        "grade-163": {
            "execution": 0
        },
        "28": "//your code here\n  std::vector<int> nums;\n  std::map<std::string, int> strings;\n  std::istringstream iss(numbers);\n  std::string word;\n  while(iss >> word)\n  {\n    strings[word]++;\n  }\n  std::map<std::string, int>::iterator it;\n  for(it = strings.begin(); it != strings.end(); it++)\n  {\n    if(it->first == \"zero\")\n    {\n      nums.push_back(0);\n    }\n    else if(it->first == \"one\")\n    {\n      nums.push_back(1);\n    }\n    else if(it->first == \"two\")\n    {\n      nums.push_back(2);\n    }\n    else if(it->first == \"three\")\n    {\n      nums.push_back(3);\n    }\n    else if(it->first == \"four\")\n    {\n      nums.push_back(4);\n    }\n    else if(it->first == \"five\")\n    {\n      nums.push_back(5);\n    }\n    else if(it->first == \"six\")\n    {\n      nums.push_back(6);\n    }\n    else if(it->first == \"seven\")\n    {\n      nums.push_back(7);\n    }\n    else if(it->first == \"eight\")\n    {\n      nums.push_back(8);\n    }\n    else if(it->first == \"nine\")\n    {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(), nums.end());\n  std::stringstream ss;\n  std::string result;\n  for(int i = 0; i < nums.size(); i++)\n  {\n    switch(nums[i])\n    {\n      case 0:\n        ss << \"zero\";\n        break;\n      case 1:\n        ss << \"one\";\n        break;\n      case 2:\n        ss << \"two\";\n        break;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<int> nums;\n    std::string numeral;\n    std::istringstream iss(numbers);\n    while (iss >> numeral) {\n        if (numeral == \"zero\") nums.push_back(0);\n        else if (numeral == \"one\") nums.push_back(1);\n        else if (numeral == \"two\") nums.push_back(2);\n        else if (numeral == \"three\") nums.push_back(3);\n        else if (numeral == \"four\") nums.push_back(4);\n        else if (numeral == \"five\") nums.push_back(5);\n        else if (numeral == \"six\") nums.push_back(6);\n        else if (numeral == \"seven\") nums.push_back(7);\n        else if (numeral == \"eight\") nums.push_back(8);\n        else if (numeral == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto it : nums) {\n        switch (it) {\n            case 0:\n                result += \"zero \";\n                break;\n            case 1:\n                result += \"one \";\n                break;\n            case 2:\n                result += \"two \";\n                break;\n            case 3:\n                result += \"three \";\n                break;\n            case 4:\n                result += \"four \";\n                break;\n            case 5:\n                result += \"five \";\n                break;\n            case 6:\n                result += \"six \";\n                break;\n            case 7:\n                result += \"seven \";\n                break;\n            case 8:\n                result += \"eight \";\n                break;\n            case 9:\n                result += \"nine \";\n                break;\n        }\n    }\n    return result.substr(0, result.size() - 1);",
        "grade-6": {
            "execution": 1
        },
        "189": "// Your code here\n  std::istringstream ss(numbers);\n  std::string word;\n  std::vector<int> v;\n  while(ss >> word) {\n    if(word == \"zero\") v.push_back(0);\n    else if(word == \"one\") v.push_back(1);\n    else if(word == \"two\") v.push_back(2);\n    else if(word == \"three\") v.push_back(3);\n    else if(word == \"four\") v.push_back(4);\n    else if(word == \"five\") v.push_back(5);\n    else if(word == \"six\") v.push_back(6);\n    else if(word == \"seven\") v.push_back(7);\n    else if(word == \"eight\") v.push_back(8);\n    else if(word == \"nine\") v.push_back(9);\n  }\n  std::sort(v.begin(), v.end());\n  std::string ans = \"\";\n  for(auto x : v) {\n    if(x == 0) ans += \"zero \";\n    else if(x == 1) ans += \"one \";\n    else if(x == 2) ans += \"two \";\n    else if(x == 3) ans += \"three \";\n    else if(x == 4) ans += \"four \";\n    else if(x == 5) ans += \"five \";\n    else if(x == 6) ans += \"six \";\n    else if(x == 7) ans += \"seven \";\n    else if(x == 8) ans += \"eight \";\n    else if(x == 9) ans += \"nine \";\n  }\n  ans.pop_back();\n  return ans;",
        "grade-189": {
            "execution": 0
        },
        "70": "int count = 0;\n\tchar buffer[numbers.length()];\n\tfor (int i = 0; i < numbers.length(); i++) {\n\t\tif (numbers[i] == ' ') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tstd::vector<std::string> elements;\n\tfor (int i = 0; i < count + 1; i++) {\n\t\tstd::string str = \"\";\n\t\tfor (int j = 0; j < numbers.length(); j++) {\n\t\t\tif (numbers[j] == ' ') {\n\t\t\t\telements.push_back(str);\n\t\t\t\tstr = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr += numbers[j];\n\t\t\t}\n\t\t}\n\t\telements.push_back(str);\n\t}\n\tfor (int i = 0; i < elements.size(); i++) {\n\t\telements[i] = getNumber(elements[i]);\n\t}\n\tsort(elements.begin(), elements.end());\n\tfor (int i = 0; i < elements.size(); i++) {\n\t\telements[i] = getWord(elements[i]);\n\t}\n\tfor (int i = 0; i < elements.size(); i++) {\n\t\tif (i == elements.size() - 1) {\n\t\t\tnumbers = numbers + elements[i];\n\t\t}\n\t\telse {\n\t\t\tnumbers = numbers + elements[i] + \" \";\n\t\t}\n\t}\n\treturn numbers;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string map[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string word;\n    while (ss >> word) {\n        for (int i = 0; i < 10; i++) {\n            if (word == map[i]) {\n                nums.push_back(i);\n                break;\n            }\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        ans += map[nums[i]] + \" \";\n    }\n    return ans.substr(0, ans.size() - 1);",
        "grade-62": {
            "execution": 1
        },
        "57": "if (numbers.empty()) return \"\";\n    std::map<std::string, int> myMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int> allValues;\n    std::stringstream ss(numbers);\n    std::string token;\n    while (ss >> token) {\n        allValues.push_back(myMap[token]);\n    }\n    std::sort(allValues.begin(), allValues.end());\n    std::vector<std::string> allStrings;\n    for (auto itr = allValues.begin(); itr != allValues.end(); ++itr) {\n        allStrings.push_back(myMap.find(*itr)->first);\n    }\n    std::string result = \"\";\n    for (auto itr = allStrings.begin(); itr != allStrings.end(); ++itr) {\n        result += *itr + \" \";\n    }\n    return result.substr(0, result.size() - 1);",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<int> numbers_vec;\n    std::stringstream number_string(numbers);\n    std::string number;\n    while (std::getline(number_string, number, ' ')) {\n        numbers_vec.push_back(std::stoi(number));\n    }\n    std::sort(numbers_vec.begin(), numbers_vec.end());\n    std::stringstream sorted_numbers;\n    for (int i = 0; i < numbers_vec.size(); i++) {\n        sorted_numbers << numbers_vec[i] << \" \";\n    }\n    return sorted_numbers.str();",
        "grade-35": {
            "execution": 0
        },
        "188": "assert(numbers != \"\");\n\tstd::vector<std::string> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string temp;\n\twhile (ss >> temp)\n\t\tnums.push_back(temp);\n\tstd::sort(nums.begin(), nums.end());\n\tstd::string result = \"\";\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult += nums[i];\n\t\tif (i < nums.size() - 1)\n\t\t\tresult += \" \";\n\t}\n\treturn result;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<std::string> num_list;\n    std::istringstream iss(numbers);\n    std::string word;\n    while (iss >> word)\n        num_list.push_back(word);\n    std::sort(num_list.begin(), num_list.end());\n    std::stringstream ss;\n    for (int i = 0; i < num_list.size(); i++) {\n        ss << num_list[i] << \" \";\n    }\n    return ss.str();",
        "grade-26": {
            "execution": 0
        },
        "173": "std::stringstream ss(numbers);\n    std::string num,res;\n    int val[10];\n    while(ss>>num){\n        if(num == \"zero\") val[0]++;\n        else if(num == \"one\") val[1]++;\n        else if(num == \"two\") val[2]++;\n        else if(num == \"three\") val[3]++;\n        else if(num == \"four\") val[4]++;\n        else if(num == \"five\") val[5]++;\n        else if(num == \"six\") val[6]++;\n        else if(num == \"seven\") val[7]++;\n        else if(num == \"eight\") val[8]++;\n        else if(num == \"nine\") val[9]++;\n    }\n    for(int i=0;i<10;i++){\n        while(val[i]!=0){\n            if(i==0) res+=\"zero \";\n            else if(i==1) res+=\"one \";\n            else if(i==2) res+=\"two \";\n            else if(i==3) res+=\"three \";\n            else if(i==4) res+=\"four \";\n            else if(i==5) res+=\"five \";\n            else if(i==6) res+=\"six \";\n            else if(i==7) res+=\"seven \";\n            else if(i==8) res+=\"eight \";\n            else if(i==9) res+=\"nine \";\n            val[i]--;\n        }\n    }\n    return res;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<std::string> words;\n\tint n = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] == ' ') {\n\t\t\twords.push_back(numbers.substr(n, i - n));\n\t\t\tn = i + 1;\n\t\t}\n\t}\n\twords.push_back(numbers.substr(n, numbers.size() - n));\n\tstd::sort(words.begin(), words.end());\n\tstd::string ret = \"\";\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tret += words[i];\n\t\tif (i != words.size() - 1) {\n\t\t\tret += \" \";\n\t\t}\n\t}\n\treturn ret;",
        "grade-139": {
            "execution": 0
        },
        "22": "if (numbers.size() == 0) return numbers;\n  std::unordered_map<std::string, int> map;\n  map[\"zero\"] = 0;\n  map[\"one\"] = 1;\n  map[\"two\"] = 2;\n  map[\"three\"] = 3;\n  map[\"four\"] = 4;\n  map[\"five\"] = 5;\n  map[\"six\"] = 6;\n  map[\"seven\"] = 7;\n  map[\"eight\"] = 8;\n  map[\"nine\"] = 9;\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string number;\n  while (std::getline(ss, number, ' ')) {\n    nums.push_back(map[number]);\n  }\n  std::sort(nums.begin(), nums.end());\n  std::string result;\n  std::unordered_map<int, std::string> rev_map;\n  rev_map[0] = \"zero\";\n  rev_map[1] = \"one\";\n  rev_map[2] = \"two\";\n  rev_map[3] = \"three\";\n  rev_map[4] = \"four\";\n  rev_map[5] = \"five\";\n  rev_map[6] = \"six\";\n  rev_map[7] = \"seven\";\n  rev_map[8] = \"eight\";\n  rev_map[9] = \"nine\";\n  for (auto i : nums) {\n    result += rev_map[i] + \" \";\n  }\n  result.pop_back();\n  return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "return numbers;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> split = numbers.split();\n    std::sort(split.begin(), split.end());\n    return split.join();",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string words[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string word;\n  while (ss >> word) {\n    for (int i = 0; i < 10; i++) {\n      if (word == words[i]) {\n        nums.push_back(i);\n        break;\n      }\n    }\n  }\n  std::sort(nums.begin(), nums.end());\n  std::string ans = \"\";\n  for (int i = 0; i < nums.size(); i++) {\n    ans += words[nums[i]] + \" \";\n  }\n  ans.pop_back();\n  return ans;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<int> vec;\n    std::stringstream ss(numbers);\n    int x;\n    while(ss >> x) {\n        vec.push_back(x);\n    }\n    std::sort(vec.begin(), vec.end());\n    std::string ret;\n    for(int&i : vec) {\n        ret += std::to_string(i) + \" \";\n    }\n    return ret;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> nums;\n    std::istringstream ss(numbers);\n    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        nums.push_back(token);\n    }\n    std::map<std::string, int> m = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::sort(nums.begin(), nums.end(), [&m](std::string& a, std::string& b) {return m[a] < m[b];});\n    std::string ans;\n    for (auto& s : nums) {\n        ans += (s + \" \");\n    }\n    ans.pop_back();\n    return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::map<std::string, int> numeric_values = {\n    {\"zero\", 0},\n    {\"one\", 1},\n    {\"two\", 2},\n    {\"three\", 3},\n    {\"four\", 4},\n    {\"five\", 5},\n    {\"six\", 6},\n    {\"seven\", 7},\n    {\"eight\", 8},\n    {\"nine\", 9}\n  };\n  // split numbers into a vector of strings\n  std::vector<std::string> unsorted_numbers;\n  std::stringstream ss(numbers);\n  std::string numeral;\n  while (ss >> numeral) {\n    unsorted_numbers.push_back(numeral);\n  }\n  // convert vector of numeral strings to vector of ints\n  std::vector<int> numbers_to_sort;\n  for (int i = 0; i < unsorted_numbers.size(); i++) {\n    numbers_to_sort.push_back(numeric_values[unsorted_numbers[i]]);\n  }\n  // sort the vector of ints\n  std::sort(numbers_to_sort.begin(), numbers_to_sort.end());\n  // convert the vector of ints back to a vector of numeral strings\n  for (int i = 0; i < numbers_to_sort.size(); i++) {\n    for (std::map<std::string, int>::iterator it = numeric_values.begin(); it != numeric_values.end(); it++) {\n      if (it->second == numbers_to_sort[i]) {\n        unsorted_numbers[i] = it->first;\n      }\n    }\n  }\n  // create the output string\n  std::string output;\n  for (int i = 0; i < unsorted_numbers.size(); i++) {\n    output += unsorted_numbers[i];\n    if (i < unsorted_numbers.size() - 1) {\n      output += \" \";\n    }\n  }\n  return output;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string sorted;\n    int j = 0;\n    std::string numbers_copy = numbers;\n    while (j < numbers.length()) {\n        int min_value = -1;\n        int min_index = 0;\n        int k = 0;\n        while (k < numbers_copy.length()) {\n            if (numbers_copy[k] == ' ') {\n                k++;\n                continue;\n            }\n            int current_value = numberal_to_integer(numbers_copy.substr(k, std::string::npos));\n            if (min_value == -1 || current_value < min_value) {\n                min_value = current_value;\n                min_index = k;\n            }\n            k += numberal_to_string(current_value).length();\n        }\n        if (j != 0) {\n            sorted += \" \";\n        }\n        sorted += numberal_to_string(min_value);\n        numbers_copy = numbers_copy.replace(min_index, numberal_to_string(min_value).length(), \"     \");\n        j += numberal_to_string(min_value).length() + 1;\n    }\n    return sorted;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.003092539695243818,
        "bleu-28": 0.12012076001401407,
        "bleu-6": 0.051278216206661995,
        "bleu-189": 0.09832042643196212,
        "bleu-70": 0.3059768638846814,
        "bleu-62": 0.1924838583580215,
        "bleu-57": 0.31447211535811603,
        "bleu-35": 0.02961820311300677,
        "bleu-188": 0.04459392502349774,
        "bleu-26": 0.020988843150105095,
        "bleu-173": 0.14372463177995615,
        "bleu-139": 0.12252677738495214,
        "bleu-22": 0.15223900040316293,
        "bleu-151": 1.6110646948955389e-52,
        "bleu-108": 6.913940693937708e-05,
        "bleu-8": 0.1897327632203259,
        "bleu-7": 0.0057957438571164,
        "bleu-23": 0.2692242198500401,
        "bleu-55": 0.3891916052988595,
        "bleu-59": 0.08388309040233281,
        "codebleu-163": 0.11614046422978883,
        "codebleu-28": 0.4515291521531569,
        "codebleu-6": 0.3676102232172544,
        "codebleu-189": 0.3664355615897237,
        "codebleu-70": 0.46541926668875977,
        "codebleu-62": 0.33175969484689216,
        "codebleu-57": 0.43571879557184967,
        "codebleu-35": 0.17697193308092155,
        "codebleu-188": 0.1915221088816136,
        "codebleu-26": 0.15687406797107115,
        "codebleu-173": 0.4239169129376806,
        "codebleu-139": 0.28494542522505334,
        "codebleu-22": 0.44350535991378126,
        "codebleu-151": 0.004366812227074235,
        "codebleu-108": 0.07134316458391211,
        "codebleu-8": 0.32506112705434154,
        "codebleu-7": 0.12242271355653678,
        "codebleu-23": 0.39318608234160274,
        "codebleu-55": 0.54320637257773,
        "codebleu-59": 0.280747826478623,
        "chrf-163": 0.1107987586817448,
        "chrf-28": 0.2630247008615812,
        "chrf-6": 0.24999079132076812,
        "chrf-189": 0.24741450688881333,
        "chrf-70": 0.37219464154416654,
        "chrf-62": 0.2864301998092959,
        "chrf-57": 0.3534144663200379,
        "chrf-35": 0.19958470026267375,
        "chrf-188": 0.18072890550160825,
        "chrf-26": 0.15038092672559664,
        "chrf-173": 0.2654966008134085,
        "chrf-139": 0.22933925587911153,
        "chrf-22": 0.3155170860793764,
        "chrf-151": 0.01700611756693,
        "chrf-108": 0.06386917861403871,
        "chrf-8": 0.2947430330998244,
        "chrf-7": 0.10969038723443153,
        "chrf-23": 0.35059914816289184,
        "chrf-55": 0.42945388837042187,
        "chrf-59": 0.26903685416237116,
        "rougel-163": 0.15,
        "rougel-28": 0.2694300518134715,
        "rougel-6": 0.28027210884353737,
        "rougel-189": 0.30039525691699603,
        "rougel-70": 0.35294117647058826,
        "rougel-62": 0.4086021505376344,
        "rougel-57": 0.4434250764525994,
        "rougel-35": 0.2058823529411765,
        "rougel-188": 0.23917525773195877,
        "rougel-26": 0.20302375809935205,
        "rougel-173": 0.3293172690763052,
        "rougel-139": 0.30508474576271183,
        "rougel-22": 0.3450292397660819,
        "rougel-151": 0.0110803324099723,
        "rougel-108": 0.10473815461346635,
        "rougel-8": 0.41454545454545455,
        "rougel-7": 0.15695067264573992,
        "rougel-23": 0.4128595600676819,
        "rougel-55": 0.4779706275033378,
        "rougel-59": 0.25678119349005424,
        "meteor-163": 0.08083131557707832,
        "meteor-28": 0.2758531178878091,
        "meteor-6": 0.2555332547416435,
        "meteor-189": 0.2721231573945129,
        "meteor-70": 0.32968313367981084,
        "meteor-62": 0.2749882459899994,
        "meteor-57": 0.27343648408766574,
        "meteor-35": 0.13407347436858316,
        "meteor-188": 0.1553843031501941,
        "meteor-26": 0.1207773284866246,
        "meteor-173": 0.3015348912277995,
        "meteor-139": 0.21044454704422103,
        "meteor-22": 0.3258431158399098,
        "meteor-151": 0.004651162790697674,
        "meteor-108": 0.04888495405819295,
        "meteor-8": 0.29021108209295277,
        "meteor-7": 0.08878615240826045,
        "meteor-23": 0.2913217319481297,
        "meteor-55": 0.3745944701520646,
        "meteor-59": 0.1922272545776444,
        "ruby-163": 0.08659217877094971,
        "ruby-28": 0.14009661835748788,
        "ruby-6": 0.11671087533156499,
        "ruby-189": 0.14962593516209477,
        "ruby-70": 0.22346368715083798,
        "ruby-62": 0.2849162011173184,
        "ruby-57": 0.3128491620111732,
        "ruby-35": 0.13128491620111726,
        "ruby-188": 0.13966480446927376,
        "ruby-26": 0.11731843575418999,
        "ruby-173": 0.18508997429305918,
        "ruby-139": 0.15083798882681565,
        "ruby-22": 0.1899441340782123,
        "ruby-151": 0.005586592178770999,
        "ruby-108": 0.05307262569832405,
        "ruby-8": 0.2849162011173184,
        "ruby-7": 0.09217877094972071,
        "ruby-23": 0.24022346368715086,
        "ruby-55": 0.3580562659846548,
        "ruby-59": 0.15083798882681565,
        "codebertscore_f1-163": 0.64739590883255,
        "codebertscore_f3-163": 0.6185740828514099,
        "codebertscore_f1-28": 0.7357773780822754,
        "codebertscore_f3-28": 0.7628400325775146,
        "codebertscore_f1-6": 0.7272164225578308,
        "codebertscore_f3-6": 0.7402097582817078,
        "codebertscore_f1-189": 0.7415499687194824,
        "codebertscore_f3-189": 0.7536606788635254,
        "codebertscore_f1-70": 0.7683555483818054,
        "codebertscore_f3-70": 0.7511295080184937,
        "codebertscore_f1-62": 0.7978430986404419,
        "codebertscore_f3-62": 0.8091998100280762,
        "codebertscore_f1-57": 0.742073655128479,
        "codebertscore_f3-57": 0.7658039331436157,
        "codebertscore_f1-35": 0.7026650309562683,
        "codebertscore_f3-35": 0.6945782899856567,
        "codebertscore_f1-188": 0.7069775462150574,
        "codebertscore_f3-188": 0.6966700553894043,
        "codebertscore_f1-26": 0.6967044472694397,
        "codebertscore_f3-26": 0.6837089657783508,
        "codebertscore_f1-173": 0.7934248447418213,
        "codebertscore_f3-173": 0.7996124029159546,
        "codebertscore_f1-139": 0.7352180480957031,
        "codebertscore_f3-139": 0.7281491756439209,
        "codebertscore_f1-22": 0.7683767080307007,
        "codebertscore_f3-22": 0.7916709780693054,
        "codebertscore_f1-151": 0.5359702706336975,
        "codebertscore_f3-151": 0.46044591069221497,
        "codebertscore_f1-108": 0.5879958868026733,
        "codebertscore_f3-108": 0.5409149527549744,
        "codebertscore_f1-8": 0.7962993383407593,
        "codebertscore_f3-8": 0.8029724359512329,
        "codebertscore_f1-7": 0.6610479354858398,
        "codebertscore_f3-7": 0.6405194997787476,
        "codebertscore_f1-23": 0.7456343770027161,
        "codebertscore_f3-23": 0.7555616497993469,
        "codebertscore_f1-55": 0.7830533981323242,
        "codebertscore_f3-55": 0.8200551271438599,
        "codebertscore_f1-59": 0.7105615139007568,
        "codebertscore_f3-59": 0.7079147100448608,
        "codebertscore_s_f1-163": 0.7974507212638855,
        "codebertscore_s_f3-163": 0.7597945928573608,
        "codebertscore_s_f1-28": 0.7991461753845215,
        "codebertscore_s_f3-28": 0.8257635831832886,
        "codebertscore_s_f1-6": 0.7846193909645081,
        "codebertscore_s_f3-6": 0.8008285164833069,
        "codebertscore_s_f1-189": 0.805006742477417,
        "codebertscore_s_f3-189": 0.8106265664100647,
        "codebertscore_s_f1-70": 0.8370291590690613,
        "codebertscore_s_f3-70": 0.8301945328712463,
        "codebertscore_s_f1-62": 0.859652042388916,
        "codebertscore_s_f3-62": 0.8584659695625305,
        "codebertscore_s_f1-57": 0.8117866516113281,
        "codebertscore_s_f3-57": 0.8273529410362244,
        "codebertscore_s_f1-35": 0.815797746181488,
        "codebertscore_s_f3-35": 0.8002810478210449,
        "codebertscore_s_f1-188": 0.8291662931442261,
        "codebertscore_s_f3-188": 0.8126881718635559,
        "codebertscore_s_f1-26": 0.8220329880714417,
        "codebertscore_s_f3-26": 0.8026592135429382,
        "codebertscore_s_f1-173": 0.8360589146614075,
        "codebertscore_s_f3-173": 0.8414798974990845,
        "codebertscore_s_f1-139": 0.8311200737953186,
        "codebertscore_s_f3-139": 0.8188222050666809,
        "codebertscore_s_f1-22": 0.833264946937561,
        "codebertscore_s_f3-22": 0.8438448309898376,
        "codebertscore_s_f1-151": 0.795590877532959,
        "codebertscore_s_f3-151": 0.7005528807640076,
        "codebertscore_s_f1-108": 0.7879626154899597,
        "codebertscore_s_f3-108": 0.7192056179046631,
        "codebertscore_s_f1-8": 0.8621743321418762,
        "codebertscore_s_f3-8": 0.856711208820343,
        "codebertscore_s_f1-7": 0.8080829381942749,
        "codebertscore_s_f3-7": 0.7734061479568481,
        "codebertscore_s_f1-23": 0.8242543339729309,
        "codebertscore_s_f3-23": 0.8186079263687134,
        "codebertscore_s_f1-55": 0.8307388424873352,
        "codebertscore_s_f3-55": 0.8590997457504272,
        "codebertscore_s_f1-59": 0.791280210018158,
        "codebertscore_s_f3-59": 0.7962782382965088,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "0",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 2,
        "raw_gpt35_nsnr-151": "2",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 0,
        "raw_gpt35_nswr-163": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 0,
        "raw_gpt35_nswr-35": "Score: 0",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 1,
        "raw_gpt35_nswr-151": "1",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n",
        "snippet": [
            "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n"
        ],
        "simplified": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
        "task_id": "115",
        "164": "long max_fill = 0;\n    for (size_t i = 0; i < grid.size(); i++) {\n        for (size_t j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n                max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
        "grade-164": {
            "execution": 0
        },
        "28": "long rows = grid.size();\n    long cols = grid[0].size();\n    long total_fill_count = 0;\n    long max_fill_count = 0;\n    for(long col = 0; col < cols; col++) {\n        long fill_count = 0;\n        for(long row = 0; row < rows; row++) {\n            if(grid[row][col] == 1) {\n                fill_count++;\n            }\n        }\n        max_fill_count = std::max(max_fill_count, fill_count);\n        total_fill_count += fill_count;\n    }\n    long bucket_fill_count = std::min(capacity, max_fill_count);\n    return total_fill_count - bucket_fill_count;",
        "grade-28": {
            "execution": 0
        },
        "6": "// your code goes here\n  long max=0;\n  for(long row=0;row<grid.size();row++){\n      long count=0;\n      for(long column=0;column<grid[row].size();column++){\n          if(grid[row][column]==1){\n              count++;\n          }\n      }\n      if(count>max){\n          max=count;\n      }\n  }\n  return max*capacity;",
        "grade-6": {
            "execution": 0
        },
        "190": "long max_fill = 0;\n    long rows = grid.size();\n    long cols = grid[0].size();\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n                max_fill += 1;\n            }\n        }\n    }\n    max_fill *= capacity;\n    return max_fill;",
        "grade-190": {
            "execution": 0
        },
        "70": "long rows = grid.size();\n    long cols = grid[0].size();\n    long heights[rows][cols];\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            heights[i][j] = 0;\n        }\n    }\n    for(int j = 0; j < cols; j++) {\n        long water = 0;\n        for(int i = 0; i < rows; i++) {\n            if(grid[i][j] == 1) {\n                water++;\n            } else {\n                water = 0;\n            }\n            heights[i][j] = water;\n        }\n    }\n    for(int j = 0; j < cols; j++) {\n        long water = 0;\n        for(int i = rows - 1; i >= 0; i--) {\n            if(grid[i][j] == 1) {\n                water++;\n            } else {\n                water = 0;\n            }\n            heights[i][j] = std::min(heights[i][j], water);\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            if(heights[i][j] > max) {\n                max = heights[i][j];\n            }\n        }\n    }\n    long count = 0;\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            if(heights[i][j] == max) {\n                count++;\n            }\n        }\n    }\n    return count * capacity;",
        "grade-70": {
            "execution": 0
        },
        "62": "// score: 5.00\n    // time: O(n^2)\n    // space: O(n)\n    int n = grid.size();\n    long ans = 0;\n    std::vector<long> col(n, 0);\n    // loop each row\n    for (int i = 0; i < n; i++) {\n        // calculate how much water is added for each column\n        for (int j = 0; j < n; j++) {\n            col[j] += grid[i][j];\n        }\n        // loop each column to calculate how many times the bucket is lowered\n        for (int j = 0; j < n; j++) {\n            if (col[j] > capacity) {\n                ans += col[j] / capacity;\n                col[j] %= capacity;\n            }\n        }\n    }\n    return ans;",
        "grade-62": {
            "execution": 0
        },
        "57": "long rows = grid.size();\n    long cols = grid[0].size();\n    long i=0,j=0;\n    long ans = 0;\n    long curr_capacity = capacity;\n    std::vector<std::vector<long>> visited(rows, std::vector<long>(cols, 0));\n    while(i<rows && j<cols){\n        if(grid[i][j]==1){\n            ans++;\n            curr_capacity--;\n        }\n        if(curr_capacity<=0){\n            ans++;\n            curr_capacity = capacity;\n        }\n        visited[i][j] = 1;\n        if(j<cols-1 && visited[i][j+1]!=1){\n            j++;\n        }\n        else if(i<rows-1 && visited[i+1][j]!=1){\n            i++;\n        }\n        else if(j>0 && visited[i][j-1]!=1){\n            j--;\n        }\n        else if(i>0 && visited[i-1][j]!=1){\n            i--;\n        }\n        else{\n            break;\n        }\n    }\n    return ans;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::priority_queue<long> cells;\n    // Fill each row with 0\n    for (long row = 0; row < grid.size(); row++) {\n        long count = 0;\n        for (long col = 0; col < grid[row].size(); col++) {\n            if (grid[row][col] == 1) {\n                count++;\n            }\n        }\n        if (count > 0) {\n            cells.push(count);\n        }\n    }\n    long total_fill = 0;\n    while (cells.size() > 0) {\n        long top = cells.top();\n        cells.pop();\n        long fill = std::min(top, capacity);\n        if (fill > 0) {\n            total_fill += fill;\n        }\n        if (top > capacity) {\n            top -= capacity;\n            cells.push(top);\n        }\n    }\n    return total_fill;",
        "grade-35": {
            "execution": 0
        },
        "189": "// create an array with all values set to -1\n    std::vector<long> max_fill(grid[0].size(), -1);\n    // iterate over the input grid\n    for(std::vector<long> row : grid) {\n        // iterate over the wells in the current row\n        for(long i = 0; i < row.size(); i++) {\n            // if the current well is filled, max_fill for the current column\n            // will be the index of the current row.\n            if(row[i] == 1) {\n                max_fill[i] = i;\n            }\n        }\n    }\n    // use a set to keep track of the wells we've visited\n    std::set<long> visited;\n    // use a queue to keep track of the wells we need to visit\n    std::queue<long> unvisited;\n    // add all of the empty wells to the queue\n    for(long i = 0; i < max_fill.size(); i++) {\n        if(max_fill[i] == -1) {\n            unvisited.push(i);\n        }\n    }\n    // while we have more wells to visit\n    while(!unvisited.empty()) {\n        // get the next well to visit\n        long idx = unvisited.front();\n        unvisited.pop();\n        // if we've already visited this well,\n        // we can safely ignore it.\n        if(visited.find(idx) != visited.end()) {\n            continue;\n        }\n        // otherwise, we need to visit it.\n        visited.insert(idx);\n        // add all of the well's neighbors to the queue\n        for(long i = 1; i <= capacity; i++) {\n            if(idx + i < max_fill.size()) {\n                unvisited.push(idx + i);\n            }\n            if(idx - i >= 0) {\n                unvisited.push(idx - i);\n            }\n        }\n        // update the max_fill value for this well\n        // by finding the lowest value of max_fill in its neighbors\n        long fill = -1;\n        for(",
        "grade-189": {
            "execution": 0
        },
        "26": "int n = grid.size();\n    if(n == 0) return 0;\n    int m = grid[0].size();\n    if(m == 0) return 0;\n    long max_water = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n                max_water += capacity;\n            }\n        }\n    }\n    return max_water;",
        "grade-26": {
            "execution": 0
        },
        "174": "long rows = grid.size();\n    long cols = grid[0].size();\n    std::priority_queue<long> pq;\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n                pq.push(col);\n            }\n        }\n    }\n    long total_time = 0;\n    long curr_fill = 0;\n    while(!pq.empty()) {\n        long r_start = -1;\n        long r_end = -1;\n        for(long row = 0; row < rows; row++) {\n            if(r_start == -1 && grid[row][pq.top()] == 1) {\n                r_start = row;\n            }\n            if(r_start != -1 && grid[row][pq.top()] == 1) {\n                r_end = row;\n            }\n        }\n        if(r_start == r_end) {\n            curr_fill += capacity;\n            total_time += 1;\n        } else {\n            long runs = (r_end - r_start) / capacity;\n            long last_run = (r_end - r_start) % capacity;\n            total_time += runs + 1;\n            curr_fill += last_run;\n        }\n        long col = pq.top();\n        pq.pop();\n        for(long row = 0; row < rows; row++) {\n            if(grid[row][col] == 1) {\n                grid[row][col] = 0;\n            }\n        }\n    }\n    return total_time;",
        "grade-174": {
            "execution": 0
        },
        "140": "long times = 0;\n    long wells = grid.size();\n    long well_width = grid[0].size();\n    for(long i = 0; i < wells; i++) {\n        for(long j = 0; j < well_width; j++) {\n            long total_fill = capacity;\n            long depth = grid[i][j];\n            while(total_fill > 0 && depth > 0) {\n                total_fill--;\n                depth--;\n                times++;\n            }\n        }\n    }\n    return times;",
        "grade-140": {
            "execution": 0
        },
        "22": "long max_height = 0;\n    for (auto row : grid) {\n        max_height = std::max(max_height, (long)std::count(row.begin(), row.end(), 1));\n    }\n    return std::min(max_height, capacity);",
        "grade-22": {
            "execution": 0
        },
        "152": "long result = 0;\n    std::vector<long> col_max(grid[0].size(), 0);\n    for (long i = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[0].size(); j++) {\n            col_max[j] = std::max(col_max[j], grid[i][j]);\n        }\n    }\n    for (long j = 0; j < grid[0].size(); j++) {\n        for (long i = 0; i < grid.size(); i++) {\n            if (grid[i][j] == col_max[j]) {\n                long fill = col_max[j] - grid[i][j];\n                if (fill > 0) {\n                    if (capacity > fill) {\n                        capacity -= fill;\n                    } else {\n                        fill -= capacity;\n                        capacity = capacity - fill;\n                        capacity = capacity + grid[i][j];\n                        result++;\n                    }\n                }\n            } else {\n                result++;\n            }\n        }\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "// Define max_water as -1 initially.\n    long max_water = -1;\n    // For each row,\n    for(long i = 0; i < grid.size(); i++) {\n        // For each cell,\n        for(long j = 0; j < grid[i].size(); j++) {\n            // Set water to 0.\n            long water = 0;\n            // For each row below,\n            for(long k = i; k < grid.size(); k++) {\n                // Add the cell's value to water.\n                water += grid[k][j];\n                // If the cell's value is 1,\n                if(grid[k][j] == 1) {\n                    // Move to the next row.\n                    break;\n                }\n            }\n            // If water is less than capacity,\n            if(water < capacity) {\n                // Set water to 0.\n                water = 0;\n                // For each row above,\n                for(long k = i; k >= 0; k--) {\n                    // Add the cell's value to water.\n                    water += grid[k][j];\n                    // If the cell's value is 1,\n                    if(grid[k][j] == 1) {\n                        // Move to the next row.\n                        break;\n                    }\n                }\n            }\n            // If water is greater than max_water,\n            if(water > max_water) {\n                // Set max_water to water.\n                max_water = water;\n            }\n        }\n    }\n    // Return max_water.\n    return max_water;",
        "grade-108": {
            "execution": 0
        },
        "8": "// we sort wells by their height\n  long rows = grid.size();\n  long cols = grid[0].size();\n  std::vector<std::pair<long, long>> wells;\n  for (long i = 0; i < rows; i++) {\n    long height = 0;\n    for (long j = 0; j < cols; j++) {\n      height += grid[i][j];\n    }\n    wells.push_back(std::make_pair(height, i));\n  }\n  std::sort(wells.begin(), wells.end());\n  long count = 0;\n  for (auto w : wells) {\n    // for the ith well, we fill it with capacity water in each bucket\n    // and then empty it by putting the water into the remaining wells\n    long i = w.second;\n    long num_buckets = capacity;\n    while (num_buckets-- > 0) {\n      // fill ith well\n      long j = 0;\n      while (grid[i][j] != 0) {\n        count++;\n        grid[i][j]--;\n        j++;\n      }\n      // empty ith well\n      for (long k = 0; k < rows; k++) {\n        if (i == k) {\n          continue;\n        }\n        while (j < cols && grid[k][j] != 0) {\n          count++;\n          grid[k][j]--;\n          j++;\n        }\n      }\n    }\n  }\n  return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "long row = grid.size();\n    long col = grid[0].size();\n    std::vector<long> heights(col, 0);\n    for(long r = 0; r < row; r++) {\n        for(long c = 0; c < col; c++) {\n            if(grid[r][c] == 1) {\n                heights[c] = 1;\n            }\n        }\n    }\n    long empty_col = 0;\n    for(long c = 0; c < col; c++) {\n        if(heights[c] == 0) {\n            empty_col++;\n        }\n    }\n    if(empty_col == col) {\n        return 0;\n    }\n    std::sort(heights.begin(), heights.end());\n    long ans = 0;\n    for(long h = 0; h < row; h++) {\n        long pass = 0;\n        for(long c = 0; c < col; c++) {\n            if(h < heights[c]) {\n                ans++;\n                pass++;\n            }\n        }\n        if(pass == capacity) {\n            break;\n        }\n    }\n    return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "long total_capacity = 0;\n    for (auto &g : grid) {\n        long local_capacity = 0;\n        for (auto &h : g) {\n            local_capacity += h;\n        }\n        total_capacity = std::max(total_capacity, local_capacity);\n    }\n    long min_drops = total_capacity / capacity;\n    if (total_capacity % capacity) {\n        min_drops++;\n    }\n    return min_drops;",
        "grade-23": {
            "execution": 0
        },
        "55": "//var\n    long result = 0;\n    //run\n    for (auto& v : grid) {\n        for (auto& el : v) {\n            el = std::min(el, capacity);\n            if (el > 0)\n                result++;\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "long n = grid.size();\n    long m = grid[0].size();\n    long time = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                grid[i][j] = 0;\n                capacity -= 1;\n                if (capacity == 0) {\n                    time += 1;\n                    capacity = 1;\n                }\n            }\n        }\n    }\n    return time;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.5349778839284287,
        "bleu-28": 0.21782528427922762,
        "bleu-6": 0.2899092664336767,
        "bleu-190": 0.25365790591715237,
        "bleu-70": 0.14161674448179037,
        "bleu-62": 0.24464537889080196,
        "bleu-57": 0.11938240301011001,
        "bleu-35": 0.15201966707450945,
        "bleu-189": 0.06904949057761034,
        "bleu-26": 0.45869938756084844,
        "bleu-174": 0.08263278961106765,
        "bleu-140": 0.3850473237936637,
        "bleu-22": 0.07661223231265246,
        "bleu-152": 0.2117545049899598,
        "bleu-108": 0.151949696887631,
        "bleu-8": 0.15012544596571628,
        "bleu-7": 0.11720316032324968,
        "bleu-23": 0.13601419448641341,
        "bleu-55": 0.051450553244757107,
        "bleu-59": 0.393679976557542,
        "codebleu-164": 0.6502229825740533,
        "codebleu-28": 0.6579219030095126,
        "codebleu-6": 0.6848918324504203,
        "codebleu-190": 0.6194376204221889,
        "codebleu-70": 0.6877763085372997,
        "codebleu-62": 0.6802886822460004,
        "codebleu-57": 0.6469078647087279,
        "codebleu-35": 0.6836239873585489,
        "codebleu-189": 0.6428393190218609,
        "codebleu-26": 0.6812742471871998,
        "codebleu-174": 0.6823936625761118,
        "codebleu-140": 0.6764038875518529,
        "codebleu-22": 0.3276355536768323,
        "codebleu-152": 0.7106065954176315,
        "codebleu-108": 0.6777289196224459,
        "codebleu-8": 0.678963700167341,
        "codebleu-7": 0.6598188666639798,
        "codebleu-23": 0.40618083590856574,
        "codebleu-55": 0.31840577683532056,
        "codebleu-59": 0.6914149780874287,
        "chrf-164": 0.5379031083633263,
        "chrf-28": 0.3199927998525957,
        "chrf-6": 0.38612215527000854,
        "chrf-190": 0.33107583653516715,
        "chrf-70": 0.3609231672602053,
        "chrf-62": 0.39968044977891654,
        "chrf-57": 0.28464723155817556,
        "chrf-35": 0.3147115907842027,
        "chrf-189": 0.17618229948710484,
        "chrf-26": 0.5217016540002036,
        "chrf-174": 0.24210606210099905,
        "chrf-140": 0.403703636052212,
        "chrf-22": 0.21077093789469992,
        "chrf-152": 0.4007470659444396,
        "chrf-108": 0.3046849007633383,
        "chrf-8": 0.3195820198946532,
        "chrf-7": 0.29118124374801274,
        "chrf-23": 0.22907870779152023,
        "chrf-55": 0.21375307363460527,
        "chrf-59": 0.45925946345932933,
        "rougel-164": 0.725,
        "rougel-28": 0.39810426540284355,
        "rougel-6": 0.5869565217391304,
        "rougel-190": 0.44571428571428573,
        "rougel-70": 0.2775330396475771,
        "rougel-62": 0.41198501872659177,
        "rougel-57": 0.29411764705882354,
        "rougel-35": 0.42537313432835816,
        "rougel-189": 0.20423892100192678,
        "rougel-26": 0.5052631578947369,
        "rougel-174": 0.27067669172932335,
        "rougel-140": 0.5130890052356021,
        "rougel-22": 0.2896551724137931,
        "rougel-152": 0.422360248447205,
        "rougel-108": 0.32673267326732675,
        "rougel-8": 0.29072681704260656,
        "rougel-7": 0.2786377708978328,
        "rougel-23": 0.37179487179487175,
        "rougel-55": 0.3496503496503497,
        "rougel-59": 0.5252525252525252,
        "meteor-164": 0.6177142847364193,
        "meteor-28": 0.5052540031525634,
        "meteor-6": 0.6020909205433016,
        "meteor-190": 0.4950047015931325,
        "meteor-70": 0.4580989668601047,
        "meteor-62": 0.4290761461132767,
        "meteor-57": 0.4672202293707267,
        "meteor-35": 0.47554000967807075,
        "meteor-189": 0.32030813392267443,
        "meteor-26": 0.627810815813808,
        "meteor-174": 0.35541039517447437,
        "meteor-140": 0.5851376378524087,
        "meteor-22": 0.1605231866825208,
        "meteor-152": 0.4969438987120716,
        "meteor-108": 0.4063415217261372,
        "meteor-8": 0.38652699249927275,
        "meteor-7": 0.3474841909053429,
        "meteor-23": 0.23863658139312063,
        "meteor-55": 0.2211029210642305,
        "meteor-59": 0.5723340790454884,
        "ruby-164": 0.6436781609195402,
        "ruby-28": 0.2661290322580645,
        "ruby-6": 0.5051546391752577,
        "ruby-190": 0.25,
        "ruby-70": 0.16621253405994552,
        "ruby-62": 0.23888888888888893,
        "ruby-57": 0.19762845849802368,
        "ruby-35": 0.3149171270718232,
        "ruby-189": 0.1157407407407407,
        "ruby-26": 0.3398058252427184,
        "ruby-174": 0.17307692307692313,
        "ruby-140": 0.33653846153846156,
        "ruby-22": 0.1839080459770115,
        "ruby-152": 0.28936170212765955,
        "ruby-108": 0.20820189274447953,
        "ruby-8": 0.16987179487179482,
        "ruby-7": 0.18220338983050843,
        "ruby-23": 0.25287356321839083,
        "ruby-55": 0.24137931034482762,
        "ruby-59": 0.32432432432432434,
        "codebertscore_f1-164": 0.8809139728546143,
        "codebertscore_f3-164": 0.8682765960693359,
        "codebertscore_f1-28": 0.7552465200424194,
        "codebertscore_f3-28": 0.784791886806488,
        "codebertscore_f1-6": 0.8240933418273926,
        "codebertscore_f3-6": 0.8314754962921143,
        "codebertscore_f1-190": 0.813406229019165,
        "codebertscore_f3-190": 0.8161656856536865,
        "codebertscore_f1-70": 0.7634217739105225,
        "codebertscore_f3-70": 0.8013187050819397,
        "codebertscore_f1-62": 0.7503780126571655,
        "codebertscore_f3-62": 0.7999840974807739,
        "codebertscore_f1-57": 0.7280008792877197,
        "codebertscore_f3-57": 0.770250141620636,
        "codebertscore_f1-35": 0.7680056095123291,
        "codebertscore_f3-35": 0.8099774718284607,
        "codebertscore_f1-189": 0.6587465405464172,
        "codebertscore_f3-189": 0.745292067527771,
        "codebertscore_f1-26": 0.8377364873886108,
        "codebertscore_f3-26": 0.8404033184051514,
        "codebertscore_f1-174": 0.7139902114868164,
        "codebertscore_f3-174": 0.7750741839408875,
        "codebertscore_f1-140": 0.809586763381958,
        "codebertscore_f3-140": 0.8186281323432922,
        "codebertscore_f1-22": 0.7344837784767151,
        "codebertscore_f3-22": 0.734748899936676,
        "codebertscore_f1-152": 0.801363468170166,
        "codebertscore_f3-152": 0.8256606459617615,
        "codebertscore_f1-108": 0.7104890942573547,
        "codebertscore_f3-108": 0.7792676687240601,
        "codebertscore_f1-8": 0.7366684675216675,
        "codebertscore_f3-8": 0.8084489703178406,
        "codebertscore_f1-7": 0.7559742331504822,
        "codebertscore_f3-7": 0.7880371809005737,
        "codebertscore_f1-23": 0.7583416104316711,
        "codebertscore_f3-23": 0.7630845308303833,
        "codebertscore_f1-55": 0.7533981204032898,
        "codebertscore_f3-55": 0.7507160305976868,
        "codebertscore_f1-59": 0.8303802609443665,
        "codebertscore_f3-59": 0.8287116885185242,
        "codebertscore_s_f1-164": 0.8722653985023499,
        "codebertscore_s_f3-164": 0.8592893481254578,
        "codebertscore_s_f1-28": 0.7546143531799316,
        "codebertscore_s_f3-28": 0.7722710371017456,
        "codebertscore_s_f1-6": 0.8304563760757446,
        "codebertscore_s_f3-6": 0.8394020199775696,
        "codebertscore_s_f1-190": 0.7994285225868225,
        "codebertscore_s_f3-190": 0.79525226354599,
        "codebertscore_s_f1-70": 0.8052735924720764,
        "codebertscore_s_f3-70": 0.8210310339927673,
        "codebertscore_s_f1-62": 0.7592077255249023,
        "codebertscore_s_f3-62": 0.803264856338501,
        "codebertscore_s_f1-57": 0.7634412050247192,
        "codebertscore_s_f3-57": 0.7929715514183044,
        "codebertscore_s_f1-35": 0.7930757999420166,
        "codebertscore_s_f3-35": 0.8200443983078003,
        "codebertscore_s_f1-189": 0.7024533152580261,
        "codebertscore_s_f3-189": 0.7681884765625,
        "codebertscore_s_f1-26": 0.8244056701660156,
        "codebertscore_s_f3-26": 0.8211591839790344,
        "codebertscore_s_f1-174": 0.7487730383872986,
        "codebertscore_s_f3-174": 0.7886343002319336,
        "codebertscore_s_f1-140": 0.7967974543571472,
        "codebertscore_s_f3-140": 0.7993242740631104,
        "codebertscore_s_f1-22": 0.7107902765274048,
        "codebertscore_s_f3-22": 0.7048991918563843,
        "codebertscore_s_f1-152": 0.815026581287384,
        "codebertscore_s_f3-152": 0.8283083438873291,
        "codebertscore_s_f1-108": 0.7306942343711853,
        "codebertscore_s_f3-108": 0.7812067270278931,
        "codebertscore_s_f1-8": 0.7605047821998596,
        "codebertscore_s_f3-8": 0.8107025623321533,
        "codebertscore_s_f1-7": 0.7905255556106567,
        "codebertscore_s_f3-7": 0.8058717846870422,
        "codebertscore_s_f1-23": 0.7478111982345581,
        "codebertscore_s_f3-23": 0.7495321035385132,
        "codebertscore_s_f1-55": 0.7414769530296326,
        "codebertscore_s_f3-55": 0.7350522875785828,
        "codebertscore_s_f1-59": 0.8201793432235718,
        "codebertscore_s_f3-59": 0.8132131099700928,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 2,
        "raw_gpt35_nswr-190": "2",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-174": 2,
        "raw_gpt35_nswr-174": "2",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-152": 2,
        "raw_gpt35_nswr-152": "2",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\nlong smallest_change(std::vector<long> arr) {\n",
        "snippet": [
            "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n"
        ],
        "simplified": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "task_id": "73",
        "167": "// Your code here\n  if(arr.size()==0)\n    return 0;\n  if(arr.size()==1)\n    return 0;\n  if(arr.size()==2)\n    return 1;\n  if(arr.size()==3)\n    return 2;\n  if(arr.size()==4)\n    return 3;\n  if(arr.size()==5)\n    return 4;\n  if(arr.size()==6)\n    return 5;\n  if(arr.size()==7)\n    return 6;\n  if(arr.size()==8)\n    return 7;\n  if(arr.size()==9)\n    return 8;\n  if(arr.size()==10)\n    return 9;\n  if(arr.size()==11)\n    return 10;\n  if(arr.size()==12)\n    return 11;\n  if(arr.size()==13)\n    return 12;\n  if(arr.size()==14)\n    return 13;\n  if(arr.size()==15)\n    return 14;\n  if(arr.size()==16)\n    return 15;\n  if(arr.size()==17)\n    return 16;\n  if(arr.size()==18)\n    return 17;\n  if(arr.size()==19)\n    return 18;\n  if(arr.size()==20)\n    return 19;\n  if(arr.size()==21)\n    return 20;\n  if(arr.size()==22)\n    return 21;\n  if(arr.size()==23)\n    return 22;\n  if(arr.size()==24)\n    return 23;\n  if(arr.size()==25)\n    return 24;\n  if(arr.size()==26)\n    return 25;\n  if(arr.size()==27)\n    return 26;\n  if(arr.size()==28)\n    return 27;\n  if(arr.size()==29)\n    return 28;\n  if(arr.size()==30)\n    return 29;\n  if(arr.size()==31",
        "grade-167": {
            "execution": 0
        },
        "28": "int n = arr.size();\n  int a[n][n];\n  memset(a, 0, sizeof(a));\n  int l, h, gap;\n  for (gap = 1; gap < n; ++gap)\n  {\n    for (l = 0, h = gap; h < n; ++l, ++h)\n    {\n      a[l][h] = (arr[l] == arr[h])? a[l+1][h-1] :\n                (std::min(a[l][h-1], a[l+1][h]) + 1);\n    }\n  }\n  return a[0][n-1];",
        "grade-28": {
            "execution": 0
        },
        "6": "int cnt = 0;\n  for (int i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      cnt++;\n    }\n  }\n  return cnt;",
        "grade-6": {
            "execution": 1
        },
        "194": "long mn = 0;\n    int i = 0,j = arr.size()-1;\n    while(i<j){\n        if(arr[i] != arr[j])\n            mn++;\n        i++;j--;\n    }\n    return mn;",
        "grade-194": {
            "execution": 1
        },
        "71": "// Write your code here\n    if(arr.size()==0) return 0;\n    std::vector<long> v1(arr.size(), 0);\n    std::vector<long> v2(arr.size(), 0);\n    long smallest = 0;\n    for(int i=0; i<arr.size(); i++){\n        v1[i] = (i>0) ? v1[i-1] + arr[i] : arr[i];\n        v2[i] = (i>0) ? v2[i-1] + arr[arr.size()-1-i] : arr[arr.size()-1-i];\n    }\n    for(int i=0; i<arr.size(); i++){\n        if(i>0){\n            if(v1[i] > v2[arr.size()-2-i]){\n                smallest += v1[i] - v2[arr.size()-2-i];\n            }\n            else if(v1[i] < v2[arr.size()-2-i]){\n                smallest += v2[arr.size()-2-i] - v1[i];\n            }\n        }\n        else{\n            if(v1[i] > v2[arr.size()-1-i]){\n                smallest += v1[i] - v2[arr.size()-1-i];\n            }\n            else if(v1[i] < v2[arr.size()-1-i]){\n                smallest += v2[arr.size()-1-i] - v1[i];\n            }\n        }\n    }\n    return smallest;",
        "grade-71": {
            "execution": 0
        },
        "63": "// your code here\n    int n = arr.size();\n    int L[n][n];\n    int i, j, cl;\n    for (i = 0; i < n; i++)\n        L[i][i] = 1;\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (arr[i] == arr[j] && cl == 2)\n                L[i][j] = 2;\n            else if (arr[i] == arr[j])\n                L[i][j] = L[i + 1][j - 1] + 2;\n            else\n                L[i][j] = std::max(L[i][j - 1], L[i + 1][j]);\n        }\n    }\n    return (n - L[0][n - 1]);",
        "grade-63": {
            "execution": 0
        },
        "58": "int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int L = 2; L <= n; L++) {\n        for (int i = 0; i < n - L + 1; i++) {\n            int j = i + L - 1;\n            if (arr[i] == arr[j] && L == 2) {\n                dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n - 1];",
        "grade-58": {
            "execution": 0
        },
        "35": "long changes = 0;\n  long start = 0;\n  long end = arr.size() - 1;\n  while (start < end) {\n    // If the characters at start and end are equal, move forward\n    if (arr[start] == arr[end]) {\n      start++;\n      end--;\n    } else {\n      // If the characters at start and end are not equal, then check\n      // which one of them is larger and make the change in that one.\n      if (arr[start] > arr[end]) {\n        arr[end] = arr[start];\n      } else {\n        arr[start] = arr[end];\n      }\n      changes++;\n    }\n  }\n  return changes;",
        "grade-35": {
            "execution": 1
        },
        "193": "long n = arr.size();\n  long i = 0, j = n - 1;\n  long ans = 0;\n  while (i < j) {\n    while (i < j && arr[i] == arr[j]) {\n      i++;\n      j--;\n    }\n    if (i >= j)\n      break;\n    if (arr[i] > arr[j]) {\n      arr[j - 1] += arr[j];\n      j--;\n    } else {\n      arr[i + 1] += arr[i];\n      i++;\n    }\n    ans++;\n  }\n  return ans;",
        "grade-193": {
            "execution": 0
        },
        "26": "if(arr.size()==0)\n    return 0;\n    if(arr.size()==1)\n    return 0;\n    if(arr.size()==2)\n    {\n        if(arr[0]==arr[1])\n        return 0;\n        else\n        return 1;\n    }\n    long n=arr.size();\n    for(long i=0;i<n/2;i++)\n    {\n        if(arr[i]!=arr[n-i-1])\n        return 1;\n    }\n    return 0;",
        "grade-26": {
            "execution": 0
        },
        "177": "// your code here\n    int n = arr.size();\n    int lo = 0, hi = n-1;\n    int count = 0;\n    while(lo<hi){\n        if(arr[lo]!=arr[hi])\n            count++;\n        lo++;\n        hi--;\n    }\n    return count;",
        "grade-177": {
            "execution": 1
        },
        "143": "std::cout << \"In function\" << std::endl;\n    int n = arr.size();\n    int i = 0;\n    int j = n-1;\n    int count = 0;\n    while(i<j){\n        if(arr[i] != arr[j])\n            count++;\n        i++;\n        j--;\n    }\n    return count;",
        "grade-143": {
            "execution": 1
        },
        "22": "long n = arr.size();\n    if(n==0) return 0;\n    long sum1=0, sum2=0;\n    for(long i=0; i<n/2; i++) {\n        sum1 += arr[i];\n        sum2 += arr[n-i-1];\n    }\n    if(n%2) {\n        sum1 += arr[n/2];\n    }\n    return std::abs(sum1-sum2);",
        "grade-22": {
            "execution": 0
        },
        "155": "int a = arr.size();\n    // Write your code here!\n    int i = 0;\n    int j = a-1;\n    int ans = 0;\n    while(i < j){\n        if(arr[i] == arr[j]){\n            i++;\n            j--;\n        }\n        else{\n            if(arr[i] < arr[j]){\n                arr[i+1] = arr[i] + arr[i+1];\n                ans++;\n                i++;\n            }\n            else{\n                arr[j-1] = arr[j] + arr[j-1];\n                ans++;\n                j--;\n            }\n        }\n    }\n    return ans;",
        "grade-155": {
            "execution": 0
        },
        "110": "long n = arr.size();\n    std::vector<long> copy = arr;\n    std::vector<long> reverse = arr;\n    std::reverse(reverse.begin(), reverse.end());\n    std::vector<std::vector<long>> dp;\n    std::vector<long> temp(n + 1, 0);\n    for (long i = 0; i <= n; i++)\n        dp.push_back(temp);\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n; j++) {\n            if (arr[i - 1] == reverse[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    long result = n - dp[n][n];\n    return result;",
        "grade-110": {
            "execution": 0
        },
        "8": "int n = arr.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if (l == 2) {\n                dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n            } else {\n                if (arr[i] == arr[j]) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n    }\n    return dp[0][n - 1];",
        "grade-8": {
            "execution": 0
        },
        "7": "long n = arr.size();\n  long dp[n][n];\n  memset(dp, 0, sizeof(dp));\n  for (long gap = 1; gap < n; gap++) {\n    for (long i = 0, j = gap; j < n; i++, j++) {\n      dp[i][j] = std::min(dp[i][j - 1], dp[i + 1][j]) + 1;\n      if (arr[i] == arr[j]) {\n        dp[i][j] = std::min(dp[i][j], dp[i + 1][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> left(arr.size());\n    left[0] = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        left[i] = arr[i] + left[i - 1];\n    }\n    std::vector<long> right(arr.size());\n    right[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        right[i] = arr[i] + right[i + 1];\n    }\n    long min = std::numeric_limits<long>::max();\n    for (int i = 0; i < arr.size(); i++) {\n        long left_sum, right_sum;\n        if (i == 0) {\n            left_sum = 0;\n        } else {\n            left_sum = left[i - 1];\n        }\n        if (i == arr.size() - 1) {\n            right_sum = 0;\n        } else {\n            right_sum = right[i + 1];\n        }\n        if (left_sum + right_sum < min) {\n            min = left_sum + right_sum;\n        }\n    }\n    return min;",
        "grade-23": {
            "execution": 0
        },
        "56": "long ans = 0;\n  for (long i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      ans++;\n    }\n  }\n  return ans;",
        "grade-56": {
            "execution": 1
        },
        "60": "std::vector<long> reverse = arr;\n  std::reverse(reverse.begin(), reverse.end());\n  return std::count(arr.begin(), arr.end(), reverse.begin());",
        "grade-60": {
            "execution": 0
        },
        "bleu-167": 0.023870475038596854,
        "bleu-28": 0.06824772854560775,
        "bleu-6": 0.7058326649488119,
        "bleu-194": 0.4042931802701415,
        "bleu-71": 0.11098783451184024,
        "bleu-63": 0.11009143522492365,
        "bleu-58": 0.11978201679070948,
        "bleu-35": 0.09858829793386993,
        "bleu-193": 0.13757892729475354,
        "bleu-26": 0.25405062339535095,
        "bleu-177": 0.21086867668326156,
        "bleu-143": 0.28632228359489864,
        "bleu-22": 0.22343900282394152,
        "bleu-155": 0.14405707441817112,
        "bleu-110": 0.09523296902734614,
        "bleu-8": 0.1315676865100168,
        "bleu-7": 0.10807345149653402,
        "bleu-23": 0.13661238599943648,
        "bleu-56": 0.6546019093776485,
        "bleu-60": 0.03572396577165043,
        "codebleu-167": 0.47290393143195164,
        "codebleu-28": 0.6093451168562608,
        "codebleu-6": 0.7843474928615658,
        "codebleu-194": 0.6417537335671241,
        "codebleu-71": 0.7802678550945975,
        "codebleu-63": 0.6643398339971809,
        "codebleu-58": 0.6741353435045012,
        "codebleu-35": 0.6267858149584387,
        "codebleu-193": 0.6663060242443968,
        "codebleu-26": 0.6815071663634222,
        "codebleu-177": 0.6047183616435795,
        "codebleu-143": 0.624611044194097,
        "codebleu-22": 0.6438281583280974,
        "codebleu-155": 0.6662223940096228,
        "codebleu-110": 0.6932963385014564,
        "codebleu-8": 0.6760443404605401,
        "codebleu-7": 0.6543411984282901,
        "codebleu-23": 0.7326658240377961,
        "codebleu-56": 0.7726931263386673,
        "codebleu-60": 0.38809523809523805,
        "chrf-167": 0.1292189575305559,
        "chrf-28": 0.27437396647592627,
        "chrf-6": 0.7009418411567574,
        "chrf-194": 0.4168267926328772,
        "chrf-71": 0.336616110946105,
        "chrf-63": 0.31759107910004286,
        "chrf-58": 0.34001191427358113,
        "chrf-35": 0.22999693869012072,
        "chrf-193": 0.2998799874832772,
        "chrf-26": 0.42509091592671167,
        "chrf-177": 0.3469826838411769,
        "chrf-143": 0.4153441423149544,
        "chrf-22": 0.34633295067689557,
        "chrf-155": 0.33507805680293934,
        "chrf-110": 0.2543713404872064,
        "chrf-8": 0.34306980623839023,
        "chrf-7": 0.2962146843059267,
        "chrf-23": 0.3272059928037304,
        "chrf-56": 0.6122200986308842,
        "chrf-60": 0.1738207447315691,
        "rougel-167": 0.11834319526627221,
        "rougel-28": 0.30622009569377995,
        "rougel-6": 0.8275862068965517,
        "rougel-194": 0.5789473684210527,
        "rougel-71": 0.24703087885985747,
        "rougel-63": 0.29411764705882354,
        "rougel-58": 0.29787234042553196,
        "rougel-35": 0.31683168316831684,
        "rougel-193": 0.3655913978494624,
        "rougel-26": 0.4352941176470589,
        "rougel-177": 0.41935483870967744,
        "rougel-143": 0.4233576642335767,
        "rougel-22": 0.4155844155844156,
        "rougel-155": 0.3417085427135678,
        "rougel-110": 0.2787456445993031,
        "rougel-8": 0.3149606299212599,
        "rougel-7": 0.2920353982300885,
        "rougel-23": 0.28301886792452835,
        "rougel-56": 0.7931034482758621,
        "rougel-60": 0.26785714285714285,
        "meteor-167": 0.23553498919229987,
        "meteor-28": 0.3918893194597004,
        "meteor-6": 0.8065963894354364,
        "meteor-194": 0.5256652338026165,
        "meteor-71": 0.40901358567188245,
        "meteor-63": 0.3924741124260355,
        "meteor-58": 0.4054340109776799,
        "meteor-35": 0.3228228228228228,
        "meteor-193": 0.39953224617947647,
        "meteor-26": 0.5712271293375395,
        "meteor-177": 0.432312925170068,
        "meteor-143": 0.49631468214133473,
        "meteor-22": 0.4610579893674944,
        "meteor-155": 0.4143490008657082,
        "meteor-110": 0.4133384117856955,
        "meteor-8": 0.4394191623675231,
        "meteor-7": 0.4277375201288245,
        "meteor-23": 0.4325701921491445,
        "meteor-56": 0.7742034935452147,
        "meteor-60": 0.2313692674669129,
        "ruby-167": 0.06681514476614703,
        "ruby-28": 0.1854304635761589,
        "ruby-6": 0.7586206896551724,
        "ruby-194": 0.48275862068965514,
        "ruby-71": 0.14325068870523416,
        "ruby-63": 0.1728971962616822,
        "ruby-58": 0.1785714285714286,
        "ruby-35": 0.19444444444444442,
        "ruby-193": 0.234375,
        "ruby-26": 0.2767857142857143,
        "ruby-177": 0.25757575757575757,
        "ruby-143": 0.2911392405063291,
        "ruby-22": 0.26041666666666663,
        "ruby-155": 0.21985815602836878,
        "ruby-110": 0.17030567685589515,
        "ruby-8": 0.18367346938775508,
        "ruby-7": 0.18452380952380953,
        "ruby-23": 0.16538461538461535,
        "ruby-56": 0.7241379310344828,
        "ruby-60": 0.15517241379310343,
        "codebertscore_f1-167": 0.6779943108558655,
        "codebertscore_f3-167": 0.6978567838668823,
        "codebertscore_f1-28": 0.7659432291984558,
        "codebertscore_f3-28": 0.7916406989097595,
        "codebertscore_f1-6": 0.9129713177680969,
        "codebertscore_f3-6": 0.9203185439109802,
        "codebertscore_f1-194": 0.8551862835884094,
        "codebertscore_f3-194": 0.8651019334793091,
        "codebertscore_f1-71": 0.7633096575737,
        "codebertscore_f3-71": 0.8190402388572693,
        "codebertscore_f1-63": 0.7371318340301514,
        "codebertscore_f3-63": 0.7920473217964172,
        "codebertscore_f1-58": 0.736115038394928,
        "codebertscore_f3-58": 0.7944057583808899,
        "codebertscore_f1-35": 0.7280557751655579,
        "codebertscore_f3-35": 0.7812089920043945,
        "codebertscore_f1-193": 0.7996450066566467,
        "codebertscore_f3-193": 0.8233357667922974,
        "codebertscore_f1-26": 0.8093668222427368,
        "codebertscore_f3-26": 0.8176456689834595,
        "codebertscore_f1-177": 0.8099818825721741,
        "codebertscore_f3-177": 0.827019453048706,
        "codebertscore_f1-143": 0.8228521943092346,
        "codebertscore_f3-143": 0.8463284373283386,
        "codebertscore_f1-22": 0.8158849477767944,
        "codebertscore_f3-22": 0.8486137390136719,
        "codebertscore_f1-155": 0.7571144104003906,
        "codebertscore_f3-155": 0.8007949590682983,
        "codebertscore_f1-110": 0.7201349139213562,
        "codebertscore_f3-110": 0.7707940936088562,
        "codebertscore_f1-8": 0.739107072353363,
        "codebertscore_f3-8": 0.7886673808097839,
        "codebertscore_f1-7": 0.7671855092048645,
        "codebertscore_f3-7": 0.7992491126060486,
        "codebertscore_f1-23": 0.7445136904716492,
        "codebertscore_f3-23": 0.8001084923744202,
        "codebertscore_f1-56": 0.9174155592918396,
        "codebertscore_f3-56": 0.9209863543510437,
        "codebertscore_f1-60": 0.7193301916122437,
        "codebertscore_f3-60": 0.6989638209342957,
        "codebertscore_s_f1-167": 0.7257162928581238,
        "codebertscore_s_f3-167": 0.7270309329032898,
        "codebertscore_s_f1-28": 0.7720227241516113,
        "codebertscore_s_f3-28": 0.7931702733039856,
        "codebertscore_s_f1-6": 0.910137414932251,
        "codebertscore_s_f3-6": 0.9168233275413513,
        "codebertscore_s_f1-194": 0.8557893633842468,
        "codebertscore_s_f3-194": 0.8670756220817566,
        "codebertscore_s_f1-71": 0.8095055222511292,
        "codebertscore_s_f3-71": 0.8483420610427856,
        "codebertscore_s_f1-63": 0.7846401929855347,
        "codebertscore_s_f3-63": 0.8225042223930359,
        "codebertscore_s_f1-58": 0.7889662981033325,
        "codebertscore_s_f3-58": 0.826339066028595,
        "codebertscore_s_f1-35": 0.7472842931747437,
        "codebertscore_s_f3-35": 0.7972139120101929,
        "codebertscore_s_f1-193": 0.8106623888015747,
        "codebertscore_s_f3-193": 0.8329126238822937,
        "codebertscore_s_f1-26": 0.8273625373840332,
        "codebertscore_s_f3-26": 0.8363980650901794,
        "codebertscore_s_f1-177": 0.8145048022270203,
        "codebertscore_s_f3-177": 0.8317089080810547,
        "codebertscore_s_f1-143": 0.8211665153503418,
        "codebertscore_s_f3-143": 0.8482267260551453,
        "codebertscore_s_f1-22": 0.8083889484405518,
        "codebertscore_s_f3-22": 0.8401111364364624,
        "codebertscore_s_f1-155": 0.8048887252807617,
        "codebertscore_s_f3-155": 0.8373293280601501,
        "codebertscore_s_f1-110": 0.7615084052085876,
        "codebertscore_s_f3-110": 0.7993407845497131,
        "codebertscore_s_f1-8": 0.7896071672439575,
        "codebertscore_s_f3-8": 0.8236651420593262,
        "codebertscore_s_f1-7": 0.7731896042823792,
        "codebertscore_s_f3-7": 0.8001091480255127,
        "codebertscore_s_f1-23": 0.798162043094635,
        "codebertscore_s_f3-23": 0.8346010446548462,
        "codebertscore_s_f1-56": 0.9134035110473633,
        "codebertscore_s_f3-56": 0.9161239862442017,
        "codebertscore_s_f1-60": 0.6976492404937744,
        "codebertscore_s_f3-60": 0.6795289516448975,
        "gpt35_nsnr-167": 0,
        "raw_gpt35_nsnr-167": "0",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-155": 3,
        "raw_gpt35_nsnr-155": "3",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nswr-167": 1,
        "raw_gpt35_nswr-167": "1",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 2,
        "raw_gpt35_nswr-63": "2",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-110": 2,
        "raw_gpt35_nswr-110": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n"
        ],
        "simplified": "Filter an input list of strings only for ones that start with a given prefix.",
        "task_id": "29",
        "176": "std::vector<std::string> result;\n\tfor (auto s : strings) {\n\t\tif (s.find(prefix) == 0) {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;",
        "grade-176": {
            "execution": 1
        },
        "28": "std::vector<std::string> output;\n  for (const auto &s : strings) {\n    if (s.find(prefix) == 0) {\n      output.push_back(s);\n    }\n  }\n  return output;",
        "grade-28": {
            "execution": 1
        },
        "6": "//return std::remove_if(strings.begin(), strings.end(),\n    //         [prefix](std::string &s) {\n    //             return !(s.compare(0, prefix.length(), prefix) == 0);\n    //         });\n    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.compare(0, prefix.length(), prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
        "grade-6": {
            "execution": 1
        },
        "70": "std::vector<std::string> output;\n    std::vector<std::string>::iterator it;\n    for(it = strings.begin(); it != strings.end(); it++) {\n        if (it->find(prefix) == 0)\n            output.push_back(*it);\n    }\n    return output;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<std::string> res;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            res.push_back(s);\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> tmp;\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(tmp), [&prefix](std::string str) {\n        return str.compare(0, prefix.length(), prefix) == 0;\n    });\n    return tmp;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<std::string> res;\n    for (auto &x : strings) {\n        std::string ss = x.substr(0, prefix.size());\n        if (ss == prefix)\n            res.push_back(x);\n    }\n    return res;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<std::string> result;\n  for (auto s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 1
        },
        "187": "std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
        "grade-187": {
            "execution": 1
        },
        "148": "std::vector<std::string> s;\n  std::copy_if(strings.begin(), strings.end(), std::back_inserter(s),\n               [&prefix](std::string s) { return s.rfind(prefix, 0) == 0; });\n  return s;",
        "grade-148": {
            "execution": 1
        },
        "22": "std::vector<std::string> result;\n    for (const auto& string : strings) {\n        if (string.compare(0, prefix.size(), prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "160": "std::vector<std::string> results;\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(results), [&prefix](std::string const& str) {\n        return str.compare(0, prefix.size(), prefix) == 0;\n    });\n    return results;",
        "grade-160": {
            "execution": 1
        },
        "114": "std::vector<std::string> result;\n    for (std::string item : strings) {\n        if (item.find(prefix) == 0) {\n            result.push_back(item);\n        }\n    }\n    return result;",
        "grade-114": {
            "execution": 1
        },
        "8": "std::vector<std::string> ans;\n    for (auto str : strings) {\n        if (str.rfind(prefix, 0) == 0) {\n            ans.push_back(str);\n        }\n    }\n    return ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> result;\n\tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> sublist;\n    for (auto it = strings.begin(); it != strings.end(); it++) {\n        if (it->find(prefix) == 0) {\n            sublist.push_back(*it);\n        }\n    }\n    return sublist;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<std::string> new_strings;\n\tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\t\t\tnew_strings.push_back(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> to_return;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            to_return.push_back(s);\n        }\n    }\n    return to_return;",
        "grade-59": {
            "execution": 1
        },
        "138": "std::vector<std::string> s2;\n    //@@Insert your code here.\n     for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix) == 0){\n            s2.push_back(strings[i]);\n        }\n    }\n    return s2;",
        "grade-138": {
            "execution": 1
        },
        "167": "std::vector<std::string> output;\n  for (std::string s : strings) {\n    if (s.compare(0, prefix.length(), prefix) == 0) {\n      output.push_back(s);\n    }\n  }\n  return output;",
        "grade-167": {
            "execution": 1
        },
        "bleu-176": 0.0751700130243632,
        "bleu-28": 0.07627513804884552,
        "bleu-6": 0.12775037935228165,
        "bleu-70": 0.08917887876253577,
        "bleu-62": 0.07674741676776181,
        "bleu-57": 0.18881670860129632,
        "bleu-35": 0.2555129659567318,
        "bleu-26": 0.2870244603638402,
        "bleu-187": 0.07674741676776181,
        "bleu-148": 0.07794689717700538,
        "bleu-22": 0.1853347738519128,
        "bleu-160": 0.1570251085209238,
        "bleu-114": 0.07674741676776181,
        "bleu-8": 0.0760209687768901,
        "bleu-7": 0.5870093530367642,
        "bleu-23": 0.10630626373431089,
        "bleu-55": 0.5870093530367642,
        "bleu-59": 0.07674741676776181,
        "bleu-138": 0.5022315867735185,
        "bleu-167": 0.21729230948575112,
        "codebleu-176": 0.3747948153917311,
        "codebleu-28": 0.3931163480258098,
        "codebleu-6": 0.594037774043013,
        "codebleu-70": 0.5505050505050504,
        "codebleu-62": 0.3870891254967255,
        "codebleu-57": 0.554625017408241,
        "codebleu-35": 0.5399505093931026,
        "codebleu-26": 0.5016325149604014,
        "codebleu-187": 0.3870891254967255,
        "codebleu-148": 0.5184848484848484,
        "codebleu-22": 0.5151170094304872,
        "codebleu-160": 0.5502834353362437,
        "codebleu-114": 0.3870891254967255,
        "codebleu-8": 0.3969591444280658,
        "codebleu-7": 0.7039135255170008,
        "codebleu-23": 0.5429292929292928,
        "codebleu-55": 0.7039135255170008,
        "codebleu-59": 0.3870891254967255,
        "codebleu-138": 0.6953741439889382,
        "codebleu-167": 0.5118382743841123,
        "chrf-176": 0.3572326525815123,
        "chrf-28": 0.39762153470557654,
        "chrf-6": 0.4463385173557912,
        "chrf-70": 0.463455092021193,
        "chrf-62": 0.3700858089081988,
        "chrf-57": 0.4478016090047119,
        "chrf-35": 0.4882762568245347,
        "chrf-26": 0.49608239780644436,
        "chrf-187": 0.37039795979655227,
        "chrf-148": 0.38019259086042045,
        "chrf-22": 0.48929649231054084,
        "chrf-160": 0.4152170374433864,
        "chrf-114": 0.3673271740710926,
        "chrf-8": 0.36505663963403867,
        "chrf-7": 0.6456166738280911,
        "chrf-23": 0.4056520687270173,
        "chrf-55": 0.6221220675646782,
        "chrf-59": 0.3761475798660852,
        "chrf-138": 0.6208270471090853,
        "chrf-167": 0.5229739947664281,
        "rougel-176": 0.46296296296296297,
        "rougel-28": 0.4545454545454546,
        "rougel-6": 0.34065934065934067,
        "rougel-70": 0.460431654676259,
        "rougel-62": 0.4504504504504504,
        "rougel-57": 0.43795620437956206,
        "rougel-35": 0.49586776859504134,
        "rougel-26": 0.5614035087719298,
        "rougel-187": 0.4504504504504504,
        "rougel-148": 0.36641221374045796,
        "rougel-22": 0.5084745762711864,
        "rougel-160": 0.4172661870503597,
        "rougel-114": 0.4504504504504504,
        "rougel-8": 0.4545454545454546,
        "rougel-7": 0.7619047619047619,
        "rougel-23": 0.5039370078740157,
        "rougel-55": 0.7619047619047619,
        "rougel-59": 0.4504504504504504,
        "rougel-138": 0.7111111111111111,
        "rougel-167": 0.5210084033613446,
        "meteor-176": 0.3556593069253068,
        "meteor-28": 0.35450080755421465,
        "meteor-6": 0.5180008367571306,
        "meteor-70": 0.4947710032691148,
        "meteor-62": 0.34665763324299914,
        "meteor-57": 0.4150009750390016,
        "meteor-35": 0.4989529085872576,
        "meteor-26": 0.5397051919773063,
        "meteor-187": 0.34665763324299914,
        "meteor-148": 0.38410364909372474,
        "meteor-22": 0.4751616624061422,
        "meteor-160": 0.41371014774494563,
        "meteor-114": 0.34665763324299914,
        "meteor-8": 0.37248285750117777,
        "meteor-7": 0.7738095238095237,
        "meteor-23": 0.4952998507604805,
        "meteor-55": 0.7738095238095237,
        "meteor-59": 0.34665763324299914,
        "meteor-138": 0.7682716686973629,
        "meteor-167": 0.47851004881068654,
        "ruby-176": 0.2698412698412699,
        "ruby-28": 0.2698412698412699,
        "ruby-6": 0.2100840336134454,
        "ruby-70": 0.26315789473684215,
        "ruby-62": 0.2698412698412699,
        "ruby-57": 0.2567567567567568,
        "ruby-35": 0.31746031746031744,
        "ruby-26": 0.38095238095238093,
        "ruby-187": 0.2698412698412699,
        "ruby-148": 0.19117647058823528,
        "ruby-22": 0.31746031746031744,
        "ruby-160": 0.23684210526315785,
        "ruby-114": 0.2698412698412699,
        "ruby-8": 0.2698412698412699,
        "ruby-7": 0.6190476190476191,
        "ruby-23": 0.296875,
        "ruby-55": 0.6190476190476191,
        "ruby-59": 0.2698412698412699,
        "ruby-138": 0.5555555555555556,
        "ruby-167": 0.33333333333333337,
        "codebertscore_f1-176": 0.8346037268638611,
        "codebertscore_f3-176": 0.8207126259803772,
        "codebertscore_f1-28": 0.8282878398895264,
        "codebertscore_f3-28": 0.8219068050384521,
        "codebertscore_f1-6": 0.7820301651954651,
        "codebertscore_f3-6": 0.7967170476913452,
        "codebertscore_f1-70": 0.8251181244850159,
        "codebertscore_f3-70": 0.8353045582771301,
        "codebertscore_f1-62": 0.8386659622192383,
        "codebertscore_f3-62": 0.8225575089454651,
        "codebertscore_f1-57": 0.7845700979232788,
        "codebertscore_f3-57": 0.7922475934028625,
        "codebertscore_f1-35": 0.8535003662109375,
        "codebertscore_f3-35": 0.857166051864624,
        "codebertscore_f1-26": 0.8825021982192993,
        "codebertscore_f3-26": 0.873586893081665,
        "codebertscore_f1-187": 0.8277319669723511,
        "codebertscore_f3-187": 0.8131279349327087,
        "codebertscore_f1-148": 0.7637115716934204,
        "codebertscore_f3-148": 0.7703679800033569,
        "codebertscore_f1-22": 0.8426956534385681,
        "codebertscore_f3-22": 0.8407356142997742,
        "codebertscore_f1-160": 0.7778365015983582,
        "codebertscore_f3-160": 0.790187418460846,
        "codebertscore_f1-114": 0.8309512138366699,
        "codebertscore_f3-114": 0.8160635828971863,
        "codebertscore_f1-8": 0.8432974815368652,
        "codebertscore_f3-8": 0.8320783972740173,
        "codebertscore_f1-7": 0.920240581035614,
        "codebertscore_f3-7": 0.9194509387016296,
        "codebertscore_f1-23": 0.8177043199539185,
        "codebertscore_f3-23": 0.8261850476264954,
        "codebertscore_f1-55": 0.9047582149505615,
        "codebertscore_f3-55": 0.9049191474914551,
        "codebertscore_f1-59": 0.8226211071014404,
        "codebertscore_f3-59": 0.8120285272598267,
        "codebertscore_f1-138": 0.8669750690460205,
        "codebertscore_f3-138": 0.8942639231681824,
        "codebertscore_f1-167": 0.8645814657211304,
        "codebertscore_f3-167": 0.8582586646080017,
        "codebertscore_s_f1-176": 0.8343208432197571,
        "codebertscore_s_f3-176": 0.8187558054924011,
        "codebertscore_s_f1-28": 0.8307090401649475,
        "codebertscore_s_f3-28": 0.8230865001678467,
        "codebertscore_s_f1-6": 0.7906034588813782,
        "codebertscore_s_f3-6": 0.8081257939338684,
        "codebertscore_s_f1-70": 0.8270053863525391,
        "codebertscore_s_f3-70": 0.8360928893089294,
        "codebertscore_s_f1-62": 0.8409308791160583,
        "codebertscore_s_f3-62": 0.8233280777931213,
        "codebertscore_s_f1-57": 0.7805747985839844,
        "codebertscore_s_f3-57": 0.7880344986915588,
        "codebertscore_s_f1-35": 0.8555941581726074,
        "codebertscore_s_f3-35": 0.8594133257865906,
        "codebertscore_s_f1-26": 0.8860723972320557,
        "codebertscore_s_f3-26": 0.8766112923622131,
        "codebertscore_s_f1-187": 0.8312963843345642,
        "codebertscore_s_f3-187": 0.8150602579116821,
        "codebertscore_s_f1-148": 0.7642847299575806,
        "codebertscore_s_f3-148": 0.7709804773330688,
        "codebertscore_s_f1-22": 0.8468899726867676,
        "codebertscore_s_f3-22": 0.845066249370575,
        "codebertscore_s_f1-160": 0.774247407913208,
        "codebertscore_s_f3-160": 0.7877621650695801,
        "codebertscore_s_f1-114": 0.8322620987892151,
        "codebertscore_s_f3-114": 0.8171170949935913,
        "codebertscore_s_f1-8": 0.8450602889060974,
        "codebertscore_s_f3-8": 0.8328394889831543,
        "codebertscore_s_f1-7": 0.9192481637001038,
        "codebertscore_s_f3-7": 0.9172612428665161,
        "codebertscore_s_f1-23": 0.8177441358566284,
        "codebertscore_s_f3-23": 0.827235221862793,
        "codebertscore_s_f1-55": 0.9030688405036926,
        "codebertscore_s_f3-55": 0.9022325277328491,
        "codebertscore_s_f1-59": 0.8221371173858643,
        "codebertscore_s_f3-59": 0.8118835687637329,
        "codebertscore_s_f1-138": 0.8628261685371399,
        "codebertscore_s_f3-138": 0.8907769918441772,
        "codebertscore_s_f1-167": 0.8660093545913696,
        "codebertscore_s_f3-167": 0.8583144545555115,
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-114": 4,
        "raw_gpt35_nsnr-114": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-176": 3,
        "raw_gpt35_nswr-176": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3",
        "gpt35_nswr-114": 3,
        "raw_gpt35_nswr-114": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-138": 3,
        "raw_gpt35_nswr-138": "3",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nbool is_prime(long n) {\n",
        "snippet": [
            "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n"
        ],
        "simplified": "Return true if a given number is prime, and false otherwise.",
        "task_id": "31",
        "174": "// TODO: implement me!\n    // In order to get full credit, you will need to handle all corner cases and large numbers\n    if(n==2){\n        return true;\n    }\n    if(n==3){\n        return true;\n    }\n    if(n%2==0){\n        return false;\n    }\n    if(n%3==0){\n        return false;\n    }\n    long i=5;\n    long w=2;\n    while(i*i<=n){\n        if(n%i==0){\n            return false;\n        }\n        i+=w;\n        w=6-w;\n    }\n    return true;",
        "grade-174": {
            "execution": 0
        },
        "28": "if (n<2) return false;\n    else if (n==2) return true;\n    else if (n%2==0) return false;\n    for (long i=3; i<=sqrt(n); i+=2) {\n        if (n%i==0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n == 1) {\n    return false;\n  }\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-6": {
            "execution": 1
        },
        "73": "if (n == 2) {\n\t\treturn true;\n\t}\n\tif (n == 1 || n % 2 == 0) {\n\t\treturn false;\n\t}\n\tfor (long i = 3; i * i <= n; i += 2) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-73": {
            "execution": 1
        },
        "65": "// Your code here\n  if(n<=1) return false;\n  for(int i=2;i<=sqrt(n);i++){\n    if(n%i==0) return false;\n  }\n  return true;",
        "grade-65": {
            "execution": 1
        },
        "59": "// TODO: implement\nif(n>1){\nfor(int i=2;i<n;i++){\nif(n%i==0){\nreturn false;",
        "grade-59": {
            "execution": 0
        },
        "35": "if (n < 2) {\n    return false;\n  }\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-35": {
            "execution": 1
        },
        "26": "int a=0;\n    for(int i=1;i<=n;i++){\n        if(n%i==0){\n            a++;\n        }\n    }\n    if(a==2){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-26": {
            "execution": 1
        },
        "184": "assert(n > 0);\n    if (n == 1) return false;\n    if (n == 2) return true;\n    int k = sqrt(n);\n    for (int i = 2; i <= k; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-184": {
            "execution": 1
        },
        "147": "if (n <= 1) {\n\t\treturn false;\n\t}\n\tif (n <= 3) {\n\t\treturn true;\n\t}\n\tif (n % 2 == 0 || n % 3 == 0) {\n\t\treturn false;\n\t}\n\tfor (int i = 5; i * i <= n; i = i + 6) {\n\t\tif (n % i == 0 || n % (i + 2) == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-147": {
            "execution": 1
        },
        "22": "if (n<=1) return false;\n    if (n<=3) return true;\n    if (n%2==0 or n%3==0) return false;\n    long count = 5;\n    while (count*count<=n) {\n        if (n%count==0 or n%(count+2)==0) {\n            return false;\n        }\n        count += 6;\n    }\n    return true;",
        "grade-22": {
            "execution": 1
        },
        "160": "// TODO: Return whether the given number n is prime\n  // By definition, a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n  if (n <= 1) {\n    return false;\n  }\n  for (int i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-160": {
            "execution": 1
        },
        "112": "// check if n is a multiple of 2\n    if (n%2==0) return false;\n    // if not, then just check the odds\n    for(int i=3;i*i<=n;i+=2) {\n        if(n%i==0)\n            return false;\n    }\n    return true;",
        "grade-112": {
            "execution": 0
        },
        "8": "if (n == 1) {\n    return false;\n  }\n  long i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;",
        "grade-8": {
            "execution": 1
        },
        "7": "// TODO:",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n <= 1) return false;\n\tfor (long i = 2; i < n; i++) {\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;",
        "grade-23": {
            "execution": 1
        },
        "57": "// your code here\n  if(n==1)\n  return false;\n  if(n==2)\n  return true;\n  for(int i=2;i<=sqrt(n);i++)\n  {\n  \tif(n%i==0)\n  \treturn false;\n  }\n  return true;",
        "grade-57": {
            "execution": 1
        },
        "61": "if (n <= 1) return false;\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;",
        "grade-61": {
            "execution": 1
        },
        "136": "if (n < 2) return false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n  long i = 3;\n  while (i <= sqrt(n)) {\n    if (n % i == 0) return false;\n    i += 2;\n  }\n  return true;",
        "grade-136": {
            "execution": 1
        },
        "163": "bool prime = true;\n  for (long d = 2; d < n; d++) {\n    if (n % d == 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;",
        "grade-163": {
            "execution": 0
        },
        "bleu-174": 0.16855049647933598,
        "bleu-28": 0.38983418976152057,
        "bleu-6": 0.517459549981601,
        "bleu-73": 0.3681191633847353,
        "bleu-65": 0.5397893511675396,
        "bleu-59": 0.4394300796349995,
        "bleu-35": 0.5973825364232394,
        "bleu-26": 0.4016108125585744,
        "bleu-184": 0.33831708466759985,
        "bleu-147": 0.2552163760279507,
        "bleu-22": 0.1885323050413742,
        "bleu-160": 0.27549651837189937,
        "bleu-112": 0.3956035144046976,
        "bleu-8": 0.3862839606953922,
        "bleu-7": 0.0,
        "bleu-23": 0.6879592571010774,
        "bleu-57": 0.42323087434679346,
        "bleu-61": 0.6879592571010774,
        "bleu-136": 0.3748993595517798,
        "bleu-163": 0.24349184621698508,
        "codebleu-174": 0.6359276519223801,
        "codebleu-28": 0.710916971627416,
        "codebleu-6": 0.6531173215055133,
        "codebleu-73": 0.6456338863601288,
        "codebleu-65": 0.6697925444129346,
        "codebleu-59": 0.5823999755133575,
        "codebleu-35": 0.6901670071437224,
        "codebleu-26": 0.6196200700665762,
        "codebleu-184": 0.6661356291627312,
        "codebleu-147": 0.6529389334738511,
        "codebleu-22": 0.6156657937680847,
        "codebleu-160": 0.6454089706032097,
        "codebleu-112": 0.6601458466781469,
        "codebleu-8": 0.5824936356948771,
        "codebleu-7": 0.01092896174863388,
        "codebleu-23": 0.706433244846333,
        "codebleu-57": 0.6645731964910351,
        "codebleu-61": 0.706433244846333,
        "codebleu-136": 0.6329613304673446,
        "codebleu-163": 0.5217581716955682,
        "chrf-174": 0.43330240247022256,
        "chrf-28": 0.6582550311733779,
        "chrf-6": 0.664924845223385,
        "chrf-73": 0.6366550121103225,
        "chrf-65": 0.6449736144863334,
        "chrf-59": 0.3746890528838662,
        "chrf-35": 0.6991494100240591,
        "chrf-26": 0.507224315737589,
        "chrf-184": 0.5665219076733559,
        "chrf-147": 0.5312839225223491,
        "chrf-22": 0.46494449266792726,
        "chrf-160": 0.45561550668185213,
        "chrf-112": 0.5907747951601949,
        "chrf-8": 0.5741080513397925,
        "chrf-7": 0.0,
        "chrf-23": 0.7621667250052083,
        "chrf-57": 0.6078540229948299,
        "chrf-61": 0.7621667250052083,
        "chrf-136": 0.6063113143983554,
        "chrf-163": 0.33822516714049305,
        "rougel-174": 0.41860465116279066,
        "rougel-28": 0.6551724137931034,
        "rougel-6": 0.8222222222222223,
        "rougel-73": 0.6842105263157894,
        "rougel-65": 0.8,
        "rougel-59": 0.7058823529411764,
        "rougel-35": 0.8764044943820225,
        "rougel-26": 0.5800000000000001,
        "rougel-184": 0.6315789473684209,
        "rougel-147": 0.5531914893617021,
        "rougel-22": 0.4696969696969697,
        "rougel-160": 0.5781249999999999,
        "rougel-112": 0.6785714285714287,
        "rougel-8": 0.6813186813186813,
        "rougel-7": 0.0,
        "rougel-23": 0.8837209302325582,
        "rougel-57": 0.7047619047619049,
        "rougel-61": 0.8837209302325582,
        "rougel-136": 0.6071428571428571,
        "rougel-163": 0.5813953488372093,
        "meteor-174": 0.6578349855365989,
        "meteor-28": 0.7734575320512822,
        "meteor-6": 0.8760180995475112,
        "meteor-73": 0.8426033962004019,
        "meteor-65": 0.8712597874720358,
        "meteor-59": 0.6606152534664262,
        "meteor-35": 0.8914611678004535,
        "meteor-26": 0.5882890172620999,
        "meteor-184": 0.8192596566523607,
        "meteor-147": 0.6635297797279833,
        "meteor-22": 0.5719949749318926,
        "meteor-160": 0.8113606770833333,
        "meteor-112": 0.8344827586206895,
        "meteor-8": 0.7497358103587352,
        "meteor-7": 0.0,
        "meteor-23": 0.9211534230277151,
        "meteor-57": 0.8353938730853393,
        "meteor-61": 0.9211534230277151,
        "meteor-136": 0.6849934253780408,
        "meteor-163": 0.5227844562482526,
        "ruby-174": 0.2421875,
        "ruby-28": 0.48611111111111116,
        "ruby-6": 0.6956521739130435,
        "ruby-73": 0.5285714285714286,
        "ruby-65": 0.6666666666666667,
        "ruby-59": 0.5227272727272727,
        "ruby-35": 0.7555555555555555,
        "ruby-26": 0.3928571428571429,
        "ruby-184": 0.4714285714285714,
        "ruby-147": 0.38144329896907214,
        "ruby-22": 0.30681818181818177,
        "ruby-160": 0.38095238095238093,
        "ruby-112": 0.5294117647058824,
        "ruby-8": 0.4893617021276596,
        "ruby-7": 0.0,
        "ruby-23": 0.7954545454545454,
        "ruby-57": 0.5573770491803278,
        "ruby-61": 0.7954545454545454,
        "ruby-136": 0.4558823529411765,
        "ruby-163": 0.40909090909090906,
        "codebertscore_f1-174": 0.7580242156982422,
        "codebertscore_f3-174": 0.8024886250495911,
        "codebertscore_f1-28": 0.8969537019729614,
        "codebertscore_f3-28": 0.9079713821411133,
        "codebertscore_f1-6": 0.940037727355957,
        "codebertscore_f3-6": 0.9339572191238403,
        "codebertscore_f1-73": 0.9078975915908813,
        "codebertscore_f3-73": 0.9184430837631226,
        "codebertscore_f1-65": 0.8850981593132019,
        "codebertscore_f3-65": 0.9067173600196838,
        "codebertscore_f1-59": 0.8486864566802979,
        "codebertscore_f3-59": 0.8633362054824829,
        "codebertscore_f1-35": 0.95143061876297,
        "codebertscore_f3-35": 0.942099928855896,
        "codebertscore_f1-26": 0.8502923250198364,
        "codebertscore_f3-26": 0.8637489080429077,
        "codebertscore_f1-184": 0.8716724514961243,
        "codebertscore_f3-184": 0.8805530071258545,
        "codebertscore_f1-147": 0.8518825769424438,
        "codebertscore_f3-147": 0.8622204661369324,
        "codebertscore_f1-22": 0.84361332654953,
        "codebertscore_f3-22": 0.8537324666976929,
        "codebertscore_f1-160": 0.7958442568778992,
        "codebertscore_f3-160": 0.8601526021957397,
        "codebertscore_f1-112": 0.8505115509033203,
        "codebertscore_f3-112": 0.8910204172134399,
        "codebertscore_f1-8": 0.9058179259300232,
        "codebertscore_f3-8": 0.9049391746520996,
        "codebertscore_f1-7": 0.5094347596168518,
        "codebertscore_f3-7": 0.4390255808830261,
        "codebertscore_f1-23": 0.9483256936073303,
        "codebertscore_f3-23": 0.942090630531311,
        "codebertscore_f1-57": 0.8761109709739685,
        "codebertscore_f3-57": 0.8970242738723755,
        "codebertscore_f1-61": 0.9500817656517029,
        "codebertscore_f3-61": 0.9436765313148499,
        "codebertscore_f1-136": 0.8971072435379028,
        "codebertscore_f3-136": 0.8982506394386292,
        "codebertscore_f1-163": 0.8566107153892517,
        "codebertscore_f3-163": 0.8647035956382751,
        "codebertscore_s_f1-174": 0.7704179286956787,
        "codebertscore_s_f3-174": 0.8168917298316956,
        "codebertscore_s_f1-28": 0.900666356086731,
        "codebertscore_s_f3-28": 0.9114610552787781,
        "codebertscore_s_f1-6": 0.9450664520263672,
        "codebertscore_s_f3-6": 0.9386244416236877,
        "codebertscore_s_f1-73": 0.9079931378364563,
        "codebertscore_s_f3-73": 0.9170225858688354,
        "codebertscore_s_f1-65": 0.8854148983955383,
        "codebertscore_s_f3-65": 0.9092574119567871,
        "codebertscore_s_f1-59": 0.8563998937606812,
        "codebertscore_s_f3-59": 0.8690335750579834,
        "codebertscore_s_f1-35": 0.9544312357902527,
        "codebertscore_s_f3-35": 0.9444705247879028,
        "codebertscore_s_f1-26": 0.8531731367111206,
        "codebertscore_s_f3-26": 0.8679446578025818,
        "codebertscore_s_f1-184": 0.8771142959594727,
        "codebertscore_s_f3-184": 0.885439932346344,
        "codebertscore_s_f1-147": 0.854198157787323,
        "codebertscore_s_f3-147": 0.8655068278312683,
        "codebertscore_s_f1-22": 0.8492372632026672,
        "codebertscore_s_f3-22": 0.860060453414917,
        "codebertscore_s_f1-160": 0.7997583746910095,
        "codebertscore_s_f3-160": 0.8632003664970398,
        "codebertscore_s_f1-112": 0.8526557087898254,
        "codebertscore_s_f3-112": 0.8942431807518005,
        "codebertscore_s_f1-8": 0.9059993624687195,
        "codebertscore_s_f3-8": 0.905549943447113,
        "codebertscore_s_f1-7": 0.5721869468688965,
        "codebertscore_s_f3-7": 0.548677384853363,
        "codebertscore_s_f1-23": 0.9489577412605286,
        "codebertscore_s_f3-23": 0.9422765970230103,
        "codebertscore_s_f1-57": 0.8741638660430908,
        "codebertscore_s_f3-57": 0.8953281044960022,
        "codebertscore_s_f1-61": 0.9523950219154358,
        "codebertscore_s_f3-61": 0.9454079866409302,
        "codebertscore_s_f1-136": 0.8967552781105042,
        "codebertscore_s_f3-136": 0.8979358673095703,
        "codebertscore_s_f1-163": 0.861712634563446,
        "codebertscore_s_f3-163": 0.8702771067619324,
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3",
        "gpt35_nswr-112": 4,
        "raw_gpt35_nswr-112": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n"
        ],
        "simplified": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "task_id": "110",
        "164": "// Your code here",
        "grade-164": {
            "execution": 0
        },
        "28": "// your code here\n  bool flag;\n  for(int i=0;i<lst1.size();i++){\n    if(lst1[i]%2!=0){\n      flag=false;\n      for(int j=0;j<lst2.size();j++){\n        if(lst2[j]%2!=0){\n          flag=true;\n          break;\n        }\n      }\n      if(flag==false){\n        return \"NO\";\n      }\n    }\n  }\n  return \"YES\";",
        "grade-28": {
            "execution": 0
        },
        "6": "int oddsInLst1 = 0;\n  int oddsInLst2 = 0;\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 1) {\n      oddsInLst1++;\n    }\n  }\n  for (int i = 0; i < lst2.size(); i++) {\n    if (lst2[i] % 2 == 1) {\n      oddsInLst2++;\n    }\n  }\n  if (oddsInLst1 == lst1.size() && oddsInLst2 > 0) {\n    return \"NO\";\n  }\n  if (oddsInLst2 == lst2.size() && oddsInLst1 > 0) {\n    return \"NO\";\n  }\n  return \"YES\";",
        "grade-6": {
            "execution": 0
        },
        "190": "for (auto ele : lst1) {\n    if (ele % 2 == 0) continue;\n    bool flag = false;\n    for (auto ele2 : lst2) {\n      if (ele2 % 2 == 0) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) return \"NO\";\n  }\n  return \"YES\";",
        "grade-190": {
            "execution": 0
        },
        "70": "//  if(lst1.size() != lst2.size()) return \"NO\";\n  std::sort(lst1.begin(), lst1.end());\n  std::sort(lst2.begin(), lst2.end());\n  for(int i = 0; i < lst1.size(); i++) {\n    if(lst1[i]%2 == 0 && lst2[i]%2 == 0) continue;\n    else if(lst1[i]%2 == 0) continue;\n    else if(lst2[i]%2 == 0) {\n      lst1[i] = lst2[i];\n      lst2[i] = 0;\n    }\n    else if(lst1[i]%2 != 0 && lst2[i]%2 != 0) return \"NO\";\n  }\n  return \"YES\";",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string result = \"YES\";\n    std::vector<long>::iterator iter1 = lst1.begin();\n    while (iter1 != lst1.end()) {\n        if (*iter1 % 2 != 0) {\n            std::vector<long>::iterator iter2 = lst2.begin();\n            bool isFound = false;\n            while (iter2 != lst2.end()) {\n                if (*iter2 % 2 == 0) {\n                    *iter1 = *iter2;\n                    *iter2 = 1;\n                    isFound = true;\n                    break;\n                }\n                iter2++;\n            }\n            if (!isFound) {\n                result = \"NO\";\n                break;\n            }\n        }\n        iter1++;\n    }\n    return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "auto incIt1 = lst1.begin();\n  while (incIt1 != lst1.end()) {\n    if (*incIt1 % 2 != 0) {\n      auto incIt2 = lst2.begin();\n      while (incIt2 != lst2.end()) {\n        if (*incIt2 % 2 == 0) {\n          std::swap(*incIt1, *incIt2);\n          break;\n        }\n        incIt2++;\n      }\n      if (incIt2 == lst2.end()) {\n        return \"NO\";\n      }\n    }\n    incIt1++;\n  }\n  return \"YES\";",
        "grade-57": {
            "execution": 1
        },
        "35": "// Write your code here\n    return \"\";",
        "grade-35": {
            "execution": 0
        },
        "189": "int a,b;\n\tfor(int i=0;i<lst1.size();i++){\n\t\tif(lst1[i]%2!=0){\n\t\t\ta=lst1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=0;i<lst2.size();i++){\n\t\tif(lst2[i]%2==0){\n\t\t\tb=lst2[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(a<b){\n\t\treturn \"YES\";\n\t}\n\telse{\n\t\treturn \"NO\";\n\t}",
        "grade-189": {
            "execution": 0
        },
        "26": "bool even = true;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 != 0) {\n            even = false;\n            break;\n        }\n    }\n    if (even) return \"YES\";\n    else {\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1[i] % 2 != 0) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst2[j] % 2 == 0) {\n                        long tmp = lst1[i];\n                        lst1[i] = lst2[j];\n                        lst2[j] = tmp;\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1[i] % 2 != 0) return \"NO\";\n        }\n        return \"YES\";\n    }",
        "grade-26": {
            "execution": 1
        },
        "174": "// your code here\n  std::string res = \"YES\";\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 1) {\n      bool flag = false;\n      for (int j = 0; j < lst2.size(); j++) {\n        if (lst2[j] % 2 == 1) {\n          std::swap(lst1[i], lst2[j]);\n          flag = true;\n          break;\n        }\n      }\n      if (!flag) {\n        res = \"NO\";\n        break;\n      }\n    }\n  }\n  return res;",
        "grade-174": {
            "execution": 0
        },
        "140": "for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 != 0) {\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst2[j] % 2 != 0) {\n                    std::swap(lst1[i], lst2[j]);\n                    break;\n                }\n            }\n        }\n    }\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
        "grade-140": {
            "execution": 0
        },
        "22": "long evens = 0;\n  long odds = 0;\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 0) {\n      evens++;\n    } else {\n      odds++;\n    }\n  }\n  for (int i = 0; i < lst2.size(); i++) {\n    if (lst2[i] % 2 == 0) {\n      evens++;\n    } else {\n      odds++;\n    }\n  }\n  if (evens >= odds) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }",
        "grade-22": {
            "execution": 1
        },
        "152": "std::vector<long> lst1_even;\n    std::vector<long> lst2_odd;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) {\n            lst1_even.push_back(lst1[i]);\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 != 0) {\n            lst2_odd.push_back(lst2[i]);\n        }\n    }\n    if (lst1_even.size() == lst2_odd.size()) {\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-152": {
            "execution": 0
        },
        "108": "long even = 0;\n  long odd = 0;\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (int i = 0; i < lst2.size(); i++) {\n    if (lst2[i] % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  if (even > odd) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }",
        "grade-108": {
            "execution": 0
        },
        "8": "// Your code here.\n    std::sort(lst1.begin(), lst1.end());\n    std::sort(lst2.begin(), lst2.end());\n    int i = 0, j = 0;\n    int l1 = lst1.size();\n    int l2 = lst2.size();\n    while(i < l1 && j < l2) {\n        if(lst1[i] % 2 == 0)\n            i++;\n        else if(lst2[j] % 2 == 0) {\n            std::swap(lst1[i], lst2[j]);\n            i++;\n            j++;\n        }\n        else\n            j++;\n    }\n    while(i < l1) {\n        if(lst1[i] % 2 == 0)\n            i++;\n        else\n            return \"NO\";\n    }\n    return \"YES\";",
        "grade-8": {
            "execution": 1
        },
        "7": "// your code here",
        "grade-7": {
            "execution": 0
        },
        "23": "int even1=0,even2=0;\n  for(int i=0;i<lst1.size();i++){\n    if(lst1[i]%2==0)\n      even1++;\n  }\n  for(int i=0;i<lst2.size();i++){\n    if(lst2[i]%2==0)\n      even2++;\n  }\n  if(even1<even2)\n    return \"YES\";\n  else\n    return \"NO\";",
        "grade-23": {
            "execution": 0
        },
        "55": "return \"\";",
        "grade-55": {
            "execution": 0
        },
        "59": "// Your code here!\n    //return \"\";\n    bool flag=false;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            for(int j=0;j<lst2.size();j++){\n                if(lst2[j]%2==0){\n                    long temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    flag = true;\n                    break;\n                }\n            }\n        }\n        if(flag){\n            flag = false;\n        }\n        else{\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.0,
        "bleu-28": 0.4831024358942217,
        "bleu-6": 0.4682420695169225,
        "bleu-190": 0.20226708373209099,
        "bleu-70": 0.33402985902225085,
        "bleu-62": 0.1352790466623251,
        "bleu-57": 0.18467618752838483,
        "bleu-35": 1.6187190469439665e-05,
        "bleu-189": 0.5716937653685193,
        "bleu-26": 0.3478141243905184,
        "bleu-174": 0.40764061214977354,
        "bleu-140": 0.4794650611031986,
        "bleu-22": 0.5652515076883098,
        "bleu-152": 0.5031049518626873,
        "bleu-108": 0.5662567876359482,
        "bleu-8": 0.29308914510531686,
        "bleu-7": 0.0,
        "bleu-23": 0.7009412137845882,
        "bleu-55": 2.1900460376107335e-11,
        "bleu-59": 0.3902806874171151,
        "codebleu-164": 0.015625,
        "codebleu-28": 0.6772702218128153,
        "codebleu-6": 0.7779501261822412,
        "codebleu-190": 0.34449675713266764,
        "codebleu-70": 0.7070971249914455,
        "codebleu-62": 0.5619668635170603,
        "codebleu-57": 0.5332595144356954,
        "codebleu-35": 0.04688059192432159,
        "codebleu-189": 0.696010626654925,
        "codebleu-26": 0.7337839537106263,
        "codebleu-174": 0.6900759969546169,
        "codebleu-140": 0.7304339687723035,
        "codebleu-22": 0.7294666102704054,
        "codebleu-152": 0.7247658652742943,
        "codebleu-108": 0.7257869465085369,
        "codebleu-8": 0.6930897371198116,
        "codebleu-7": 0.015625,
        "codebleu-23": 0.7310086161109762,
        "codebleu-55": 0.02604166666704835,
        "codebleu-59": 0.6793055763405637,
        "chrf-164": 0.014298880831172112,
        "chrf-28": 0.5337766432263874,
        "chrf-6": 0.6365121491674577,
        "chrf-190": 0.28252034765245126,
        "chrf-70": 0.5551398548172622,
        "chrf-62": 0.24835585358299395,
        "chrf-57": 0.30717648519252755,
        "chrf-35": 0.05642511068039955,
        "chrf-189": 0.6483019372929312,
        "chrf-26": 0.5888001971696597,
        "chrf-174": 0.49000057392904756,
        "chrf-140": 0.6340428602354162,
        "chrf-22": 0.6429067693110274,
        "chrf-152": 0.6087861741656664,
        "chrf-108": 0.6479732935628434,
        "chrf-8": 0.4801718134697384,
        "chrf-7": 0.013000848967090039,
        "chrf-23": 0.6791665654307104,
        "chrf-55": 0.03980746319633266,
        "chrf-59": 0.526618347257265,
        "rougel-164": 0.0,
        "rougel-28": 0.7087378640776699,
        "rougel-6": 0.6850393700787402,
        "rougel-190": 0.4727272727272727,
        "rougel-70": 0.46478873239436624,
        "rougel-62": 0.35772357723577236,
        "rougel-57": 0.4484304932735426,
        "rougel-35": 0.07339449541284405,
        "rougel-189": 0.7605633802816901,
        "rougel-26": 0.5589225589225588,
        "rougel-174": 0.611353711790393,
        "rougel-140": 0.6293103448275863,
        "rougel-22": 0.7623318385650223,
        "rougel-152": 0.7008547008547008,
        "rougel-108": 0.7567567567567567,
        "rougel-8": 0.44202898550724634,
        "rougel-7": 0.0,
        "rougel-23": 0.8341708542713568,
        "rougel-55": 0.07766990291262137,
        "rougel-59": 0.5999999999999999,
        "meteor-164": 0.0,
        "meteor-28": 0.560252736878716,
        "meteor-6": 0.7265509552284656,
        "meteor-190": 0.33386011727419534,
        "meteor-70": 0.5743842496999282,
        "meteor-62": 0.4361056420940763,
        "meteor-57": 0.45064921084871573,
        "meteor-35": 0.041620421753607105,
        "meteor-189": 0.6237555138141492,
        "meteor-26": 0.6259532441165431,
        "meteor-174": 0.65355450471683,
        "meteor-140": 0.6293354147598157,
        "meteor-22": 0.7104978859561952,
        "meteor-152": 0.6848784646706295,
        "meteor-108": 0.6980958620830858,
        "meteor-8": 0.5889767420354186,
        "meteor-7": 0.0,
        "meteor-23": 0.7477581974797398,
        "meteor-55": 0.04189944134078213,
        "meteor-59": 0.5142684252636627,
        "ruby-164": 0.0,
        "ruby-28": 0.6448598130841121,
        "ruby-6": 0.5483870967741935,
        "ruby-190": 0.3434343434343434,
        "ruby-70": 0.32432432432432434,
        "ruby-62": 0.23809523809523814,
        "ruby-57": 0.27419354838709675,
        "ruby-35": 0.04040404040404044,
        "ruby-189": 0.6929824561403508,
        "ruby-26": 0.4191919191919192,
        "ruby-174": 0.5153846153846153,
        "ruby-140": 0.4736842105263158,
        "ruby-22": 0.6612903225806452,
        "ruby-152": 0.6,
        "ruby-108": 0.6585365853658536,
        "ruby-8": 0.27118644067796616,
        "ruby-7": 0.0,
        "ruby-23": 0.75,
        "ruby-55": 0.04040404040404044,
        "ruby-59": 0.475177304964539,
        "codebertscore_f1-164": 0.5266364812850952,
        "codebertscore_f3-164": 0.507991373538971,
        "codebertscore_f1-28": 0.8800688982009888,
        "codebertscore_f3-28": 0.8959217071533203,
        "codebertscore_f1-6": 0.8721093535423279,
        "codebertscore_f3-6": 0.8998648524284363,
        "codebertscore_f1-190": 0.8166549205780029,
        "codebertscore_f3-190": 0.8080979585647583,
        "codebertscore_f1-70": 0.8514023423194885,
        "codebertscore_f3-70": 0.8648046255111694,
        "codebertscore_f1-62": 0.7386286854743958,
        "codebertscore_f3-62": 0.7637500166893005,
        "codebertscore_f1-57": 0.7923494577407837,
        "codebertscore_f3-57": 0.804965078830719,
        "codebertscore_f1-35": 0.579390287399292,
        "codebertscore_f3-35": 0.5542726516723633,
        "codebertscore_f1-189": 0.9085787534713745,
        "codebertscore_f3-189": 0.9097745418548584,
        "codebertscore_f1-26": 0.850544810295105,
        "codebertscore_f3-26": 0.8763319849967957,
        "codebertscore_f1-174": 0.8447542786598206,
        "codebertscore_f3-174": 0.8705278635025024,
        "codebertscore_f1-140": 0.8669408559799194,
        "codebertscore_f3-140": 0.8709641695022583,
        "codebertscore_f1-22": 0.8888545036315918,
        "codebertscore_f3-22": 0.9075927734375,
        "codebertscore_f1-152": 0.8708929419517517,
        "codebertscore_f3-152": 0.8841921091079712,
        "codebertscore_f1-108": 0.8998385667800903,
        "codebertscore_f3-108": 0.9136123657226562,
        "codebertscore_f1-8": 0.8001282215118408,
        "codebertscore_f3-8": 0.8248237371444702,
        "codebertscore_f1-7": 0.5266637802124023,
        "codebertscore_f3-7": 0.5079391002655029,
        "codebertscore_f1-23": 0.9321470260620117,
        "codebertscore_f3-23": 0.9369747638702393,
        "codebertscore_f1-55": 0.4710741639137268,
        "codebertscore_f3-55": 0.4073013365268707,
        "codebertscore_f1-59": 0.8248795866966248,
        "codebertscore_f3-59": 0.8517971038818359,
        "codebertscore_s_f1-164": 0.49123358726501465,
        "codebertscore_s_f3-164": 0.46772491931915283,
        "codebertscore_s_f1-28": 0.8768905401229858,
        "codebertscore_s_f3-28": 0.894212543964386,
        "codebertscore_s_f1-6": 0.8741415739059448,
        "codebertscore_s_f3-6": 0.8999583125114441,
        "codebertscore_s_f1-190": 0.8154575824737549,
        "codebertscore_s_f3-190": 0.805844783782959,
        "codebertscore_s_f1-70": 0.8624734282493591,
        "codebertscore_s_f3-70": 0.8724361658096313,
        "codebertscore_s_f1-62": 0.7679805159568787,
        "codebertscore_s_f3-62": 0.7878416180610657,
        "codebertscore_s_f1-57": 0.7821356654167175,
        "codebertscore_s_f3-57": 0.7939085364341736,
        "codebertscore_s_f1-35": 0.5410963296890259,
        "codebertscore_s_f3-35": 0.5171031355857849,
        "codebertscore_s_f1-189": 0.9027623534202576,
        "codebertscore_s_f3-189": 0.9039678573608398,
        "codebertscore_s_f1-26": 0.8789624571800232,
        "codebertscore_s_f3-26": 0.889782190322876,
        "codebertscore_s_f1-174": 0.8539426922798157,
        "codebertscore_s_f3-174": 0.8802109956741333,
        "codebertscore_s_f1-140": 0.8912381529808044,
        "codebertscore_s_f3-140": 0.887664258480072,
        "codebertscore_s_f1-22": 0.8844442963600159,
        "codebertscore_s_f3-22": 0.9031168222427368,
        "codebertscore_s_f1-152": 0.8775128126144409,
        "codebertscore_s_f3-152": 0.8904001712799072,
        "codebertscore_s_f1-108": 0.8924035429954529,
        "codebertscore_s_f3-108": 0.9051162004470825,
        "codebertscore_s_f1-8": 0.8351737856864929,
        "codebertscore_s_f3-8": 0.8550896644592285,
        "codebertscore_s_f1-7": 0.49251073598861694,
        "codebertscore_s_f3-7": 0.4695063829421997,
        "codebertscore_s_f1-23": 0.9241313338279724,
        "codebertscore_s_f3-23": 0.9296101331710815,
        "codebertscore_s_f1-55": 0.6201633214950562,
        "codebertscore_s_f3-55": 0.5139835476875305,
        "codebertscore_s_f1-59": 0.8532347679138184,
        "codebertscore_s_f3-59": 0.8758630156517029,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n",
        "snippet": [
            "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n"
        ],
        "simplified": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "61",
        "175": "assert(!brackets.empty());\n    int n = brackets.size();\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') {\n            cnt++;\n        } else {\n            cnt--;\n        }\n        if (cnt < 0) return false;\n    }\n    return cnt == 0;",
        "grade-175": {
            "execution": 1
        },
        "28": "// Write your code here.\n    std::stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            s.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n            if(s.empty()){\n                return false;\n            }\n            else{\n                s.pop();\n            }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-28": {
            "execution": 1
        },
        "6": "stack<char> s;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-6": {
            "execution": 0
        },
        "73": "// replace this with your code.\n    int op = 0;\n    for(int i = 0; i < brackets.length(); i++){\n      if(brackets[i] == '('){\n        op++;\n      }\n      else{\n        op--;\n      }\n      if(op < 0){\n        return false;\n      }\n    }\n    if(op == 0){\n      return true;\n    }\n    else{\n      return false;\n    }",
        "grade-73": {
            "execution": 1
        },
        "65": "int l=0;\n\tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='(')\n\t\t\tl++;\n\t\telse if(brackets[i]==')')\n\t\t\tl--;\n\t\tif(l<0)\n\t\t\treturn false;\n\t}\n\tif(l==0)\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-65": {
            "execution": 1
        },
        "60": "int openBrackets = 0;\n    int closeBrackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            openBrackets++;\n        } else if (brackets[i] == ')') {\n            closeBrackets++;\n        }\n    }\n    if (openBrackets == closeBrackets) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-60": {
            "execution": 0
        },
        "36": "int count_open = 0;\n  int count_close = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '(') {\n      count_open++;\n    }\n    else if (brackets[i] == ')') {\n      count_close++;\n    }\n    if (count_close > count_open) {\n      return false;\n    }\n  }\n  if (count_open == count_close) {\n    return true;\n  }\n  else {\n    return false;\n  }",
        "grade-36": {
            "execution": 1
        },
        "26": "//return true;\n   std::stack<char> S;\n   std::string::iterator c = brackets.begin();\n   while(c != brackets.end()){\n\t   if(*c == '('){\n\t\t   S.push(*c);\n\t   }else if(*c == ')'){\n\t\t   if(S.empty()){\n\t\t\t   return false;\n\t\t   }else{\n\t\t\t   S.pop();\n\t\t   }\n\t   }\n\t   c++;\n   }\n   if(S.empty()){\n\t   return true;\n   }else{\n\t   return false;\n   }",
        "grade-26": {
            "execution": 1
        },
        "187": "int len = brackets.length();\n    int counter = 0;\n    int limit = len/2;\n    for(int i = 0; i < len; i++){\n        if(brackets[i] == '('){\n            counter++;\n        }\n        else{\n            counter--;\n        }\n        if(counter < 0){\n            return false;\n        }\n        if(counter == limit){\n            break;\n        }\n    }\n    if(counter == 0){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-187": {
            "execution": 0
        },
        "148": "int open_count = 0;\n  for (char c : brackets) {\n    if (c == '(') {\n      open_count++;\n    } else if (c == ')') {\n      open_count--;\n    }\n    if (open_count < 0) {\n      return false;\n    }\n  }\n  return open_count == 0;",
        "grade-148": {
            "execution": 1
        },
        "22": "int count = 0;\n  for (char c : brackets) {\n    if (c == '(') {\n      count++;\n    } else if (c == ')') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count == 0;",
        "grade-22": {
            "execution": 1
        },
        "162": "int n = brackets.length();\n\tif (n == 0)\n\t\treturn false;\n\tint o_brackets = 0;\n\tint c_brackets = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (brackets[i] == '(')\n\t\t\to_brackets++;\n\t\telse\n\t\t\tc_brackets++;\n\t\tif (c_brackets > o_brackets)\n\t\t\treturn false;\n\t}\n\tif (o_brackets == c_brackets)\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-162": {
            "execution": 1
        },
        "114": "int n = brackets.length();\n\t// TODO: implement this function.\n\t// Use a stack to store the opening brackets.\n\tstack<char> st;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (brackets[i] == '(')\n\t\t\tst.push(brackets[i]);\n\t\telse {\n\t\t\tif (st.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tst.pop();\n\t\t}\n\t}\n\tif (st.empty())\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-114": {
            "execution": 0
        },
        "8": "// use stack to solve the problem\n    int n = brackets.size();\n    std::stack<char> t;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') {\n            t.push(brackets[i]);\n        } else {\n            if (t.empty()) {\n                return false;\n            } else {\n                t.pop();\n            }\n        }\n    }\n    return t.empty();",
        "grade-8": {
            "execution": 1
        },
        "7": "int i,top=-1;\n\tchar mystack[100];\n\tchar temp;\n\tfor(i=0;i<brackets.length();i++)\n\t{\n\t\ttemp=brackets[i];\n\t\tif(temp=='(')\n\t\t{\n\t\t\ttop++;\n\t\t\tmystack[top]=temp;\n\t\t}\n\t\telse if(temp==')')\n\t\t{\n\t\t\tif(top==-1)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tmystack[top]='\\0';\n\t\t\t\ttop--;\n\t\t\t}\n\t\t}\n\t}\n\tif(top==-1)\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-7": {
            "execution": 1
        },
        "23": "int count = 0;\n\tint len = brackets.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-23": {
            "execution": 1
        },
        "57": "int cnt=0;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='(')\n            cnt++;\n        else if(brackets[i]==')')\n            cnt--;\n        if(cnt<0)\n            return false;\n    }\n    if(cnt==0)\n        return true;\n    else\n        return false;",
        "grade-57": {
            "execution": 1
        },
        "62": "int count = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-62": {
            "execution": 1
        },
        "138": "int t = 0;\n  for (auto i : brackets) {\n    if (i == '(') {\n      t++;\n    } else {\n      t--;\n    }\n    if (t < 0) {\n      return false;\n    }\n  }\n  return t == 0;",
        "grade-138": {
            "execution": 1
        },
        "165": "// YOUR CODE HERE\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount1++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount2++;\n\t\t}\n\t}\n\tif (count1 == count2) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-165": {
            "execution": 0
        },
        "bleu-175": 0.49128327355365964,
        "bleu-28": 0.4415557779935045,
        "bleu-6": 0.48341390397462114,
        "bleu-73": 0.5341828387794058,
        "bleu-65": 0.7215714768678224,
        "bleu-60": 0.577669090079737,
        "bleu-36": 0.5450936406148127,
        "bleu-26": 0.19426754714802036,
        "bleu-187": 0.433486358730429,
        "bleu-148": 0.26925157905360014,
        "bleu-22": 0.26925157905360014,
        "bleu-162": 0.5271015882611936,
        "bleu-114": 0.38512573999147315,
        "bleu-8": 0.36618779862817286,
        "bleu-7": 0.3461678669603955,
        "bleu-23": 0.5544539126959358,
        "bleu-57": 0.6881524813154007,
        "bleu-62": 0.6238703036531137,
        "bleu-138": 0.203945699401249,
        "bleu-165": 0.5841244952206289,
        "codebleu-175": 0.6614226914343393,
        "codebleu-28": 0.6820699770735336,
        "codebleu-6": 0.6856629041204889,
        "codebleu-73": 0.6509262932875477,
        "codebleu-65": 0.7584283496746304,
        "codebleu-60": 0.6973525539072079,
        "codebleu-36": 0.7226123057748451,
        "codebleu-26": 0.522832923161061,
        "codebleu-187": 0.69636204647134,
        "codebleu-148": 0.40706116356502253,
        "codebleu-22": 0.40706116356502253,
        "codebleu-162": 0.6452432101724483,
        "codebleu-114": 0.6364914230263501,
        "codebleu-8": 0.6032128868366097,
        "codebleu-7": 0.670017101124568,
        "codebleu-23": 0.7551346252261472,
        "codebleu-57": 0.7536534191589841,
        "codebleu-62": 0.7617147618426006,
        "codebleu-138": 0.3504609184557694,
        "codebleu-165": 0.693113894708635,
        "chrf-175": 0.48175683614853765,
        "chrf-28": 0.6150005788198388,
        "chrf-6": 0.6320884690545655,
        "chrf-73": 0.5883941320675672,
        "chrf-65": 0.7682027747516625,
        "chrf-60": 0.5980491827405808,
        "chrf-36": 0.5869906546369942,
        "chrf-26": 0.38319876631074146,
        "chrf-187": 0.5602346865191751,
        "chrf-148": 0.29099613652647915,
        "chrf-22": 0.29401677598615855,
        "chrf-162": 0.5780510082135355,
        "chrf-114": 0.5424054316646696,
        "chrf-8": 0.45916011289783065,
        "chrf-7": 0.5103563949291925,
        "chrf-23": 0.646682692054299,
        "chrf-57": 0.6704337101405814,
        "chrf-62": 0.6737440906834076,
        "chrf-138": 0.2767512882030599,
        "chrf-165": 0.6041020491149778,
        "rougel-175": 0.5731707317073171,
        "rougel-28": 0.61,
        "rougel-6": 0.6421052631578947,
        "rougel-73": 0.6900584795321637,
        "rougel-65": 0.8484848484848484,
        "rougel-60": 0.6971428571428572,
        "rougel-36": 0.7333333333333334,
        "rougel-26": 0.4137931034482758,
        "rougel-187": 0.5806451612903226,
        "rougel-148": 0.5655172413793104,
        "rougel-22": 0.5655172413793104,
        "rougel-162": 0.5664739884393063,
        "rougel-114": 0.53125,
        "rougel-8": 0.5384615384615384,
        "rougel-7": 0.5686274509803922,
        "rougel-23": 0.7333333333333334,
        "rougel-57": 0.8363636363636364,
        "rougel-62": 0.8114285714285713,
        "rougel-138": 0.5147058823529411,
        "rougel-165": 0.7011494252873562,
        "meteor-175": 0.5958844199128324,
        "meteor-28": 0.5305793626500697,
        "meteor-6": 0.5367922357490167,
        "meteor-73": 0.6271037529519525,
        "meteor-65": 0.8606864911274789,
        "meteor-60": 0.5776947543073773,
        "meteor-36": 0.7767467900655385,
        "meteor-26": 0.34885094831528163,
        "meteor-187": 0.6106083350295135,
        "meteor-148": 0.40164507317370934,
        "meteor-22": 0.40164507317370934,
        "meteor-162": 0.6102394434900636,
        "meteor-114": 0.5455264060023145,
        "meteor-8": 0.4597468433640612,
        "meteor-7": 0.6237099174347158,
        "meteor-23": 0.8308351764086361,
        "meteor-57": 0.845615952955368,
        "meteor-62": 0.8495811389781045,
        "meteor-138": 0.3528517422748192,
        "meteor-165": 0.6126325236284293,
        "ruby-175": 0.3373493975903614,
        "ruby-28": 0.49572649572649574,
        "ruby-6": 0.5420560747663552,
        "ruby-73": 0.5454545454545454,
        "ruby-65": 0.8192771084337349,
        "ruby-60": 0.5652173913043479,
        "ruby-36": 0.6701030927835052,
        "ruby-26": 0.2833333333333333,
        "ruby-187": 0.4271844660194175,
        "ruby-148": 0.42168674698795183,
        "ruby-22": 0.42168674698795183,
        "ruby-162": 0.38888888888888884,
        "ruby-114": 0.3302752293577982,
        "ruby-8": 0.33333333333333337,
        "ruby-7": 0.4297520661157025,
        "ruby-23": 0.6185567010309279,
        "ruby-57": 0.8072289156626506,
        "ruby-62": 0.75,
        "ruby-138": 0.3855421686746988,
        "ruby-165": 0.5714285714285714,
        "codebertscore_f1-175": 0.8648927211761475,
        "codebertscore_f3-175": 0.8779667615890503,
        "codebertscore_f1-28": 0.8067829012870789,
        "codebertscore_f3-28": 0.8317193984985352,
        "codebertscore_f1-6": 0.8484821915626526,
        "codebertscore_f3-6": 0.8533862233161926,
        "codebertscore_f1-73": 0.8629019260406494,
        "codebertscore_f3-73": 0.8894854784011841,
        "codebertscore_f1-65": 0.9213528037071228,
        "codebertscore_f3-65": 0.9230544567108154,
        "codebertscore_f1-60": 0.8561770915985107,
        "codebertscore_f3-60": 0.8653662204742432,
        "codebertscore_f1-36": 0.866050660610199,
        "codebertscore_f3-36": 0.8844210505485535,
        "codebertscore_f1-26": 0.7439767718315125,
        "codebertscore_f3-26": 0.7566041946411133,
        "codebertscore_f1-187": 0.8491658568382263,
        "codebertscore_f3-187": 0.8706873059272766,
        "codebertscore_f1-148": 0.823782742023468,
        "codebertscore_f3-148": 0.8250231146812439,
        "codebertscore_f1-22": 0.843593955039978,
        "codebertscore_f3-22": 0.8317591547966003,
        "codebertscore_f1-162": 0.8518090844154358,
        "codebertscore_f3-162": 0.8699432611465454,
        "codebertscore_f1-114": 0.811450719833374,
        "codebertscore_f3-114": 0.8487744331359863,
        "codebertscore_f1-8": 0.7983222007751465,
        "codebertscore_f3-8": 0.8247578740119934,
        "codebertscore_f1-7": 0.8233813643455505,
        "codebertscore_f3-7": 0.8574963808059692,
        "codebertscore_f1-23": 0.905769407749176,
        "codebertscore_f3-23": 0.9112720489501953,
        "codebertscore_f1-57": 0.8970670700073242,
        "codebertscore_f3-57": 0.907317578792572,
        "codebertscore_f1-62": 0.9129787683486938,
        "codebertscore_f3-62": 0.9153259992599487,
        "codebertscore_f1-138": 0.8522117733955383,
        "codebertscore_f3-138": 0.8424979448318481,
        "codebertscore_f1-165": 0.8529777526855469,
        "codebertscore_f3-165": 0.8731573224067688,
        "codebertscore_s_f1-175": 0.876974880695343,
        "codebertscore_s_f3-175": 0.8924918174743652,
        "codebertscore_s_f1-28": 0.8163842558860779,
        "codebertscore_s_f3-28": 0.8431172370910645,
        "codebertscore_s_f1-6": 0.8560796976089478,
        "codebertscore_s_f3-6": 0.8628100156784058,
        "codebertscore_s_f1-73": 0.8697145581245422,
        "codebertscore_s_f3-73": 0.8987462520599365,
        "codebertscore_s_f1-65": 0.9217893481254578,
        "codebertscore_s_f3-65": 0.9237169027328491,
        "codebertscore_s_f1-60": 0.8593154549598694,
        "codebertscore_s_f3-60": 0.870783269405365,
        "codebertscore_s_f1-36": 0.8651416301727295,
        "codebertscore_s_f3-36": 0.8848224878311157,
        "codebertscore_s_f1-26": 0.7473066449165344,
        "codebertscore_s_f3-26": 0.7596547603607178,
        "codebertscore_s_f1-187": 0.8592437505722046,
        "codebertscore_s_f3-187": 0.8814936280250549,
        "codebertscore_s_f1-148": 0.8248337507247925,
        "codebertscore_s_f3-148": 0.8296769857406616,
        "codebertscore_s_f1-22": 0.8472151160240173,
        "codebertscore_s_f3-22": 0.8384578227996826,
        "codebertscore_s_f1-162": 0.8521216511726379,
        "codebertscore_s_f3-162": 0.8713049292564392,
        "codebertscore_s_f1-114": 0.8124116659164429,
        "codebertscore_s_f3-114": 0.8501054048538208,
        "codebertscore_s_f1-8": 0.8087071776390076,
        "codebertscore_s_f3-8": 0.8383253812789917,
        "codebertscore_s_f1-7": 0.8273521661758423,
        "codebertscore_s_f3-7": 0.864452064037323,
        "codebertscore_s_f1-23": 0.9087651968002319,
        "codebertscore_s_f3-23": 0.91465163230896,
        "codebertscore_s_f1-57": 0.8993521928787231,
        "codebertscore_s_f3-57": 0.9095509648323059,
        "codebertscore_s_f1-62": 0.9159297347068787,
        "codebertscore_s_f3-62": 0.9190744757652283,
        "codebertscore_s_f1-138": 0.8587647080421448,
        "codebertscore_s_f3-138": 0.8509494662284851,
        "codebertscore_s_f1-165": 0.8560419082641602,
        "codebertscore_s_f3-165": 0.8786051273345947,
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-187": 3,
        "raw_gpt35_nsnr-187": "3",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-114": 4,
        "raw_gpt35_nsnr-114": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-162": 3,
        "raw_gpt35_nswr-162": "3",
        "gpt35_nswr-114": 3,
        "raw_gpt35_nswr-114": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-138": 4,
        "raw_gpt35_nswr-138": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long n) {\n",
        "snippet": [
            "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n"
        ],
        "simplified": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
        "task_id": "130",
        "163": "std::vector<long> trib;\n    trib.push_back(1);\n    trib.push_back(3);\n    trib.push_back(2);\n    if(n > 3) {\n        for(int i = 3; i <= n; i++) {\n            if(i % 2 == 0) {\n                trib.push_back(1 + i / 2);\n            } else {\n                long temp = trib[i - 1] + trib[i - 2] + trib[i + 1];\n                trib.push_back(temp);\n            }\n        }\n    }\n    return trib;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> tri;\n    tri.push_back(1);\n    tri.push_back(3);\n    tri.push_back(2);\n    long i = 3;\n    if(n == 0) {\n        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        return tri;\n    }\n    else if(n == 1) {\n        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        return tri;\n    }\n    else if(n == 2) {\n        tri.erase(tri.begin());\n        return tri;\n    }\n    while(i <= n) {\n        if(i % 2 == 0) {\n            tri.push_back(1 + i / 2);\n        }\n        else {\n            tri.push_back(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n        }\n        i++;\n    }\n    return tri;",
        "grade-28": {
            "execution": 0
        },
        "6": "long arr[3] = { 1, 2, 3 };\n  std::vector<long> v(n + 1);\n  v[0] = 1;\n  for (int i = 1; i <= n; i++) {\n    v[i] = arr[i % 3];\n    arr[i % 3] =\n        (i % 2) ? arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i + 1) % 3] : 1 + i / 2;\n  }\n  return v;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n  result.push_back(2);\n  for (int i = 2; i < n; i++) {\n    if (i % 2 == 0)\n      result.push_back(1 + i / 2);\n    else\n      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n  }\n  return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "vector<long> tri_vec;\n    int tri_1 = 3;\n    int tri_2 = 1;\n    int tri_3 = 2;\n    tri_vec.push_back(tri_1);\n    tri_vec.push_back(tri_2);\n    tri_vec.push_back(tri_3);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            tri_vec.push_back(tri_3);\n        }\n        else{\n            int temp = tri_1 + tri_2 + tri_3;\n            tri_vec.push_back(temp);\n            tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = temp;\n        }\n    }\n    return tri_vec;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> res;\n    if(n == 0) return res;\n    if(n == 1) {\n        res.push_back(1);\n        return res;\n    }\n    if(n == 2) {\n        res.push_back(1);\n        res.push_back(3);\n        return res;\n    }\n    if(n == 3) {\n        res.push_back(1);\n        res.push_back(3);\n        res.push_back(2);\n        return res;\n    }\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n    long a, b, c;\n    a = 1;\n    b = 3;\n    c = 2;\n    for(int i = 4; i <= n; i++) {\n        if(i % 2 == 0) {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(a + b + c);\n            a = b;\n            b = c;\n            c = res[i - 1];\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "if(n == 0) return {};\n    std::vector<long> res = {1, 3, 2};\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0) res.push_back(1 + i / 2);\n        else res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n    }\n    return res;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> res(n+1);\n    if(n==0) return res;\n    res[0]=1;\n    if(n==1) return res;\n    res[1]=3;\n    if(n==2) return res;\n    res[2]=2;\n    if(n==3) return res;\n    for(long i=3;i<=n;i++){\n        if(i%2==0) res[i]=1+i/2;\n        else res[i]=res[i-1]+res[i-2]+res[i+1];\n    }\n    return res;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> ret;\n    ret.push_back(1);\n    if (n == 0) return ret;\n    ret.push_back(3);\n    if (n == 1) return ret;\n    ret.push_back(2);\n    if (n == 2) return ret;\n    for (int i = 3; i <= n; i++) {\n        long tmp = 1 + i / 2;\n        if (i % 2 == 1) {\n            tmp = ret[i - 1] + ret[i - 2] + ret[i + 1];\n        }\n        ret.push_back(tmp);\n    }\n    return ret;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> v(n + 1);\n  v[0] = 1;\n  v[1] = 3;\n  v[2] = 2;\n  for (long i = 3; i <= n; i++) {\n    v[i] = i % 2 == 0 ? 1 + i / 2 : v[i - 1] + v[i - 2] + v[i + 1];\n  }\n  return v;",
        "grade-26": {
            "execution": 0
        },
        "173": "// your code\n    std::vector<long>v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    if(n==1)\n    {\n        v.erase(v.begin()+1);\n        return v;\n    }\n    if(n==2)\n    {\n        v.erase(v.begin()+2);\n        return v;\n    }\n    int i=3;\n    while(i<=n)\n    {\n        if(i%2!=0)\n        {\n            v.push_back(v[i-1]+v[i-2]+v[i-3]);\n        }\n        else\n        {\n            v.push_back(1+(i/2));\n        }\n        i++;\n    }\n    return v;",
        "grade-173": {
            "execution": 0
        },
        "139": "long tri1 = 3;\n  long tri2 = 2;\n  long tri3 = 1;\n  long temp;\n  std::vector<long> result{1, 3, 2};\n  for (long i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n      temp = tri1;\n      tri1 = tri2;\n      tri2 = tri3;\n      tri3 = tri3 + temp;\n    } else {\n      temp = tri1;\n      tri1 = tri2;\n      tri2 = tri3;\n      tri3 = tri3 + tri1 + tri2;\n    }\n    result.push_back(tri3);\n  }\n  return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n == 3) {\n    return result;\n  }\n  result.push_back(8);\n  long cur = 4;\n  while (cur < n) {\n    long cur_val = 0;\n    if (cur % 2 == 0) {\n      cur_val = 1 + cur / 2;\n    } else {\n      cur_val = result[cur - 1] + result[cur - 2] + result[cur + 1];\n    }\n    result.push_back(cur_val);\n    cur++;\n  }\n  return result;",
        "grade-22": {
            "execution": 0
        },
        "151": "if (n < 0) return {};\n  if (n == 0) return {1};\n  if (n == 1) return {1, 3};\n  long a = 1, b = 3, c = 2;\n  std::vector<long> res = {1, 3, 2};\n  for (long i = 3; i <= n; i++) {\n    long a1 = (i % 2) ? a + b + c : 1 + i / 2;\n    a = b;\n    b = c;\n    c = a1;\n    res.push_back(a1);\n  }\n  return res;",
        "grade-151": {
            "execution": 0
        },
        "108": "if(n == 0) return {1};\n    if(n == 1) return {1, 3};\n    if(n == 2) return {1, 3, 2};\n    std::vector<long> res = {1, 3, 2};\n    while(res.size() <= n)\n    {\n        auto back1 = res.rbegin();\n        auto back2 = res.rbegin() + 1;\n        auto back3 = res.rbegin() + 2;\n        long even = 1 + *back3 / 2;\n        long odd = *back1 + *back2 + *back3;\n        res.push_back(res.size() % 2 == 0 ? even : odd);\n    }\n    return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here\n  std::vector<long> v;\n  if(n == 0)\n      return v;\n  else if(n == 1)\n      return {1};\n  else if(n == 2)\n      return {1,3};\n  else\n  {\n      v.push_back(1);\n      v.push_back(3);\n      v.push_back(2);\n      for(int i = 3; i <= n; i++)\n      {\n          long element;\n          if(i % 2 == 0)\n          {\n              element = 1 + i / 2;\n          }\n          else\n          {\n              element = v[i - 1] + v[i - 2] + v[i + 1];\n          }\n          v.push_back(element);\n      }\n  }\n  return v;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n\tif (n >= 1) {\n\t\tresult.push_back(1);\n\t}\n\tif (n >= 2) {\n\t\tresult.push_back(3);\n\t}\n\tif (n >= 3) {\n\t\tresult.push_back(2);\n\t}\n\tfor (long i = 3; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> res;\n    long cur,prev2=0,prev1=0,prev=1;\n    if(n>=1)\n    {\n        cur=1;\n        res.push_back(cur);\n    }\n    if(n>=2)\n    {\n        cur=3;\n        res.push_back(cur);\n    }\n    if(n>=3)\n    {\n        cur=2;\n        res.push_back(cur);\n    }\n    for(int i=3;i<n;i++)\n    {\n        if(i%2)\n        {\n            cur=prev2+prev1+prev;\n            res.push_back(cur);\n            prev2=prev1;\n            prev1=prev;\n            prev=cur;\n        }\n        else\n        {\n            cur=1+i/2;\n            res.push_back(cur);\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 0
        },
        "55": "long b = 1, c = 3, d = 2;\n  std::vector<long> v = {b, c, d};\n  if (n == 0) return v;\n  for (int i = 4; i <= n + 1; i++) {\n    if (i % 2 == 0) v.push_back(1 + i / 2);\n    else {\n      long t = v[i - 1] + v[i - 2] + v[i - 4];\n      v.push_back(t);\n    }\n  }\n  return v;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n  if (n == 1) {\n    result.push_back(1);\n    return result;\n  }\n  if (n == 2) {\n    result.push_back(1);\n    result.push_back(3);\n    return result;\n  }\n  result.push_back(1);\n  result.push_back(3);\n  result.push_back(2);\n  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.44434043235184345,
        "bleu-28": 0.23106226880250605,
        "bleu-6": 0.3102884178296168,
        "bleu-189": 0.5162019024537011,
        "bleu-70": 0.2958481607812385,
        "bleu-62": 0.24713213039355428,
        "bleu-57": 0.6317822752807012,
        "bleu-35": 0.34195046066524354,
        "bleu-188": 0.39120794734513953,
        "bleu-26": 0.3728475324384612,
        "bleu-173": 0.2610282103099078,
        "bleu-139": 0.26064377996038196,
        "bleu-22": 0.17532844693130822,
        "bleu-151": 0.3519160836808714,
        "bleu-108": 0.22780248622327354,
        "bleu-8": 0.3966190796770105,
        "bleu-7": 0.3630417723850675,
        "bleu-23": 0.20149834326615307,
        "bleu-55": 0.4782455799960815,
        "bleu-59": 0.34040950820477917,
        "codebleu-163": 0.6794663654729974,
        "codebleu-28": 0.6686967324207695,
        "codebleu-6": 0.5998673615854431,
        "codebleu-189": 0.649492283156609,
        "codebleu-70": 0.5082243499406546,
        "codebleu-62": 0.6663040277386503,
        "codebleu-57": 0.7346279306577057,
        "codebleu-35": 0.6558995610532576,
        "codebleu-188": 0.668995666647142,
        "codebleu-26": 0.5415565845461724,
        "codebleu-173": 0.6409370251047106,
        "codebleu-139": 0.4878134841235862,
        "codebleu-22": 0.6295882396912729,
        "codebleu-151": 0.6198781458546663,
        "codebleu-108": 0.5797191097083061,
        "codebleu-8": 0.7032459057127437,
        "codebleu-7": 0.6737100628482421,
        "codebleu-23": 0.5622217030875974,
        "codebleu-55": 0.7115432711382945,
        "codebleu-59": 0.6880668456484854,
        "chrf-163": 0.48138882347255324,
        "chrf-28": 0.38321381193247633,
        "chrf-6": 0.3080929055167894,
        "chrf-189": 0.5221435625927663,
        "chrf-70": 0.3699842057800929,
        "chrf-62": 0.433331836583301,
        "chrf-57": 0.6079412642791848,
        "chrf-35": 0.39411038170255197,
        "chrf-188": 0.5105348725216183,
        "chrf-26": 0.29108675760810915,
        "chrf-173": 0.408391429617357,
        "chrf-139": 0.3240205208176453,
        "chrf-22": 0.32823075925723216,
        "chrf-151": 0.4205183740008043,
        "chrf-108": 0.3515642371515198,
        "chrf-8": 0.5268620683545353,
        "chrf-7": 0.45460570806154854,
        "chrf-23": 0.3479492125926443,
        "chrf-55": 0.569667438018976,
        "chrf-59": 0.46061588634216677,
        "rougel-163": 0.6350710900473933,
        "rougel-28": 0.45695364238410596,
        "rougel-6": 0.537037037037037,
        "rougel-189": 0.7046632124352332,
        "rougel-70": 0.47115384615384615,
        "rougel-62": 0.4299674267100978,
        "rougel-57": 0.7395833333333334,
        "rougel-35": 0.5439330543933055,
        "rougel-188": 0.5286343612334802,
        "rougel-26": 0.5654450261780105,
        "rougel-173": 0.47244094488188976,
        "rougel-139": 0.41148325358851673,
        "rougel-22": 0.42635658914728675,
        "rougel-151": 0.4573991031390135,
        "rougel-108": 0.38524590163934425,
        "rougel-8": 0.5725806451612904,
        "rougel-7": 0.6428571428571429,
        "rougel-23": 0.41897233201581024,
        "rougel-55": 0.6666666666666666,
        "rougel-59": 0.588235294117647,
        "meteor-163": 0.5608198379721957,
        "meteor-28": 0.5225220214265462,
        "meteor-6": 0.541411859288425,
        "meteor-189": 0.5936894984539883,
        "meteor-70": 0.38321764817319515,
        "meteor-62": 0.4516954902827899,
        "meteor-57": 0.6807135281715185,
        "meteor-35": 0.5127733793953375,
        "meteor-188": 0.5399432768169456,
        "meteor-26": 0.44925619018825075,
        "meteor-173": 0.578959770854353,
        "meteor-139": 0.33538703192825575,
        "meteor-22": 0.43383149231102447,
        "meteor-151": 0.4467288933736967,
        "meteor-108": 0.40977914262207843,
        "meteor-8": 0.5871754408798073,
        "meteor-7": 0.6244399641577061,
        "meteor-23": 0.46261479469698896,
        "meteor-55": 0.5234845388086182,
        "meteor-59": 0.6617371392234657,
        "ruby-163": 0.5304347826086957,
        "ruby-28": 0.3106796116504854,
        "ruby-6": 0.4083333333333333,
        "ruby-189": 0.6185567010309279,
        "ruby-70": 0.3482142857142857,
        "ruby-62": 0.2796208530805687,
        "ruby-57": 0.6354166666666667,
        "ruby-35": 0.4055944055944056,
        "ruby-188": 0.3587786259541985,
        "ruby-26": 0.39583333333333337,
        "ruby-173": 0.30379746835443033,
        "ruby-139": 0.31858407079646023,
        "ruby-22": 0.308641975308642,
        "ruby-151": 0.25984251968503935,
        "ruby-108": 0.2567567567567568,
        "ruby-8": 0.4276315789473685,
        "ruby-7": 0.515625,
        "ruby-23": 0.26751592356687903,
        "ruby-55": 0.5726495726495726,
        "ruby-59": 0.44025157232704404,
        "codebertscore_f1-163": 0.8449530005455017,
        "codebertscore_f3-163": 0.8530503511428833,
        "codebertscore_f1-28": 0.7632381916046143,
        "codebertscore_f3-28": 0.782520592212677,
        "codebertscore_f1-6": 0.8424882888793945,
        "codebertscore_f3-6": 0.8392584323883057,
        "codebertscore_f1-189": 0.9124429821968079,
        "codebertscore_f3-189": 0.9130268096923828,
        "codebertscore_f1-70": 0.7770124673843384,
        "codebertscore_f3-70": 0.7887884378433228,
        "codebertscore_f1-62": 0.7765514850616455,
        "codebertscore_f3-62": 0.7896312475204468,
        "codebertscore_f1-57": 0.9138718843460083,
        "codebertscore_f3-57": 0.9159173369407654,
        "codebertscore_f1-35": 0.8565732836723328,
        "codebertscore_f3-35": 0.8568373918533325,
        "codebertscore_f1-188": 0.8555840849876404,
        "codebertscore_f3-188": 0.8605260252952576,
        "codebertscore_f1-26": 0.860885500907898,
        "codebertscore_f3-26": 0.8516355752944946,
        "codebertscore_f1-173": 0.8025287389755249,
        "codebertscore_f3-173": 0.8175613880157471,
        "codebertscore_f1-139": 0.7820749878883362,
        "codebertscore_f3-139": 0.8060191869735718,
        "codebertscore_f1-22": 0.8018958568572998,
        "codebertscore_f3-22": 0.8102704882621765,
        "codebertscore_f1-151": 0.8314898014068604,
        "codebertscore_f3-151": 0.8403975963592529,
        "codebertscore_f1-108": 0.7653622627258301,
        "codebertscore_f3-108": 0.7791861891746521,
        "codebertscore_f1-8": 0.8127404451370239,
        "codebertscore_f3-8": 0.8289492726325989,
        "codebertscore_f1-7": 0.8733581900596619,
        "codebertscore_f3-7": 0.8738731145858765,
        "codebertscore_f1-23": 0.7647495865821838,
        "codebertscore_f3-23": 0.7830041646957397,
        "codebertscore_f1-55": 0.8790535926818848,
        "codebertscore_f3-55": 0.8941611051559448,
        "codebertscore_f1-59": 0.8505616784095764,
        "codebertscore_f3-59": 0.8510068655014038,
        "codebertscore_s_f1-163": 0.8481675386428833,
        "codebertscore_s_f3-163": 0.8539678454399109,
        "codebertscore_s_f1-28": 0.828498125076294,
        "codebertscore_s_f3-28": 0.8561179637908936,
        "codebertscore_s_f1-6": 0.8254768252372742,
        "codebertscore_s_f3-6": 0.8210264444351196,
        "codebertscore_s_f1-189": 0.9024150371551514,
        "codebertscore_s_f3-189": 0.9019718766212463,
        "codebertscore_s_f1-70": 0.795480489730835,
        "codebertscore_s_f3-70": 0.8009716868400574,
        "codebertscore_s_f1-62": 0.841451108455658,
        "codebertscore_s_f3-62": 0.8547592163085938,
        "codebertscore_s_f1-57": 0.9163997173309326,
        "codebertscore_s_f3-57": 0.9169411063194275,
        "codebertscore_s_f1-35": 0.8583703637123108,
        "codebertscore_s_f3-35": 0.8589438199996948,
        "codebertscore_s_f1-188": 0.8583400249481201,
        "codebertscore_s_f3-188": 0.8634995818138123,
        "codebertscore_s_f1-26": 0.8557633757591248,
        "codebertscore_s_f3-26": 0.8474308252334595,
        "codebertscore_s_f1-173": 0.8546678423881531,
        "codebertscore_s_f3-173": 0.8761866092681885,
        "codebertscore_s_f1-139": 0.7845405340194702,
        "codebertscore_s_f3-139": 0.8060953617095947,
        "codebertscore_s_f1-22": 0.8276351690292358,
        "codebertscore_s_f3-22": 0.8352622985839844,
        "codebertscore_s_f1-151": 0.8286702036857605,
        "codebertscore_s_f3-151": 0.8342867493629456,
        "codebertscore_s_f1-108": 0.7803825736045837,
        "codebertscore_s_f3-108": 0.7929217219352722,
        "codebertscore_s_f1-8": 0.8590540885925293,
        "codebertscore_s_f3-8": 0.8740617632865906,
        "codebertscore_s_f1-7": 0.8617442846298218,
        "codebertscore_s_f3-7": 0.8619146943092346,
        "codebertscore_s_f1-23": 0.8244909048080444,
        "codebertscore_s_f3-23": 0.8423557281494141,
        "codebertscore_s_f1-55": 0.8743890523910522,
        "codebertscore_s_f3-55": 0.892259955406189,
        "codebertscore_s_f1-59": 0.8668500185012817,
        "codebertscore_s_f3-59": 0.8694838881492615,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 2,
        "raw_gpt35_nsnr-28": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-173": 2,
        "raw_gpt35_nsnr-173": "2",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nlong strlen(std::string string) {\n",
        "snippet": [
            "    return str.length();\n}\n"
        ],
        "simplified": "Return length of given string",
        "task_id": "23",
        "149": "long length = 0;\n    for (int i = 0; string[i] != '\\0'; i++)\n        length++;\n    return length;",
        "grade-149": {
            "execution": 0
        },
        "22": "int i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;",
        "grade-22": {
            "execution": 0
        },
        "3": "// Please complete the implementation\n    return string.length();",
        "grade-3": {
            "execution": 0
        },
        "189": "// Type your solution here\n    return string.length();",
        "grade-189": {
            "execution": 0
        },
        "63": "return (long)string.length();",
        "grade-63": {
            "execution": 0
        },
        "54": "std::string::iterator it = string.begin();\n    long length = 0;\n    while (*it != '\\0') {\n        length++;\n        it++;\n    }\n    return length;",
        "grade-54": {
            "execution": 0
        },
        "43": "std::string::iterator it = string.begin();\n    long count = 0;\n    while (it != string.end()) {\n        count++;\n        it++;\n    }\n    return count;",
        "grade-43": {
            "execution": 0
        },
        "27": "//TODO\n\tstd::string::iterator it;\n\tint count = 0;\n\tfor (it = string.begin(); it != string.end(); it++) {\n\t\tcount++;\n\t}\n\treturn count;",
        "grade-27": {
            "execution": 0
        },
        "21": "std::string::iterator it = string.begin();\n\tlong i;\n\tfor (i = 0; it != string.end(); it++, i++);\n\treturn i;",
        "grade-21": {
            "execution": 0
        },
        "163": "long length = 0;\n\twhile(string[length] != '\\0') {\n\t\tlength++;\n\t}\n\treturn length;",
        "grade-163": {
            "execution": 0
        },
        "121": "long length = 0;\n    for (long i = 0; i < string.length(); i++) {\n        length++;\n    }\n    return length;",
        "grade-121": {
            "execution": 0
        },
        "18": "long cnt = 0;\n  while (string[cnt] != '\\0') {\n    cnt++;\n  }\n  return cnt;",
        "grade-18": {
            "execution": 0
        },
        "138": "if (string.length() == 0) {\n        return 0;\n    } else {\n        return strlen(string.substr(1)) + 1;\n    }",
        "grade-138": {
            "execution": 0
        },
        "94": "// Start with a given length of string\n    // and reduce it by one character\n    // until length become 0\n    return string.length() == 0 ? 0 : 1 + strlen(string.substr(1));",
        "grade-94": {
            "execution": 0
        },
        "6": "long length = 0;\n  while(string[length] != '\\0') {\n    length++;\n  }\n  return length;",
        "grade-6": {
            "execution": 0
        },
        "41": "int len = 0;\n    for (int i = 0; string[i] != '\\0'; i++) {\n        len++;\n    }\n    return len;",
        "grade-41": {
            "execution": 0
        },
        "45": "long len = 0;\n   for (long i = 0; string[i] != '\\0'; i++)\n      len++;\n   return len;",
        "grade-45": {
            "execution": 0
        },
        "114": "long count = 0;\n\tfor (char character : string) {\n\t\tcount++;\n\t}\n\treturn count;",
        "grade-114": {
            "execution": 0
        },
        "141": "long i = 0;\n    while (string[i] != '\\0') {\n        i++;\n    }\n    return i;",
        "grade-141": {
            "execution": 0
        },
        "126": "long counter = 0;\n    for (char c : string) {\n        counter += 1;\n    }\n    return counter;",
        "grade-126": {
            "execution": 0
        },
        "bleu-149": 0.016276888006478717,
        "bleu-22": 0.021300733682208986,
        "bleu-3": 0.3026643726685862,
        "bleu-189": 0.3026643726685862,
        "bleu-63": 0.4111336169005198,
        "bleu-54": 0.04237002838725971,
        "bleu-43": 0.04076824887784678,
        "bleu-27": 0.03647433441402697,
        "bleu-21": 0.034387196236732906,
        "bleu-163": 0.03652945772536268,
        "bleu-121": 0.12092555992625888,
        "bleu-18": 0.0349018070868319,
        "bleu-138": 0.08975099574265705,
        "bleu-94": 0.057866882954097754,
        "bleu-6": 0.03652945772536268,
        "bleu-41": 0.025785713549430028,
        "bleu-45": 0.015393730252811677,
        "bleu-114": 0.04567211833282236,
        "bleu-141": 0.0349018070868319,
        "bleu-126": 0.0434373789135831,
        "codebleu-149": 0.4107142857142857,
        "codebleu-22": 0.39682539682539675,
        "codebleu-3": 0.7026347944602992,
        "codebleu-189": 0.7026347944602992,
        "codebleu-63": 0.676280302910925,
        "codebleu-54": 0.6765873015873015,
        "codebleu-43": 0.6626984126984127,
        "codebleu-27": 0.6626984126984127,
        "codebleu-21": 0.6011904761904762,
        "codebleu-163": 0.47222222222222215,
        "codebleu-121": 0.6921791854155792,
        "codebleu-18": 0.4583333333333333,
        "codebleu-138": 0.6888919786957237,
        "codebleu-94": 0.5765079043799418,
        "codebleu-6": 0.47222222222222215,
        "codebleu-41": 0.4583333333333333,
        "codebleu-45": 0.39682539682539675,
        "codebleu-114": 0.4583333333333333,
        "codebleu-141": 0.4583333333333333,
        "codebleu-126": 0.4107142857142857,
        "chrf-149": 0.30748363624313513,
        "chrf-22": 0.2750366432617691,
        "chrf-3": 0.5649896288285352,
        "chrf-189": 0.6201158537782462,
        "chrf-63": 0.6123059570667757,
        "chrf-54": 0.2800912590435693,
        "chrf-43": 0.2138098986298935,
        "chrf-27": 0.1932395844003472,
        "chrf-21": 0.21077852737268057,
        "chrf-163": 0.32378847069344624,
        "chrf-121": 0.43660377376360665,
        "chrf-18": 0.26390753342755136,
        "chrf-138": 0.4808051756104142,
        "chrf-94": 0.33120047008184683,
        "chrf-6": 0.32378847069344624,
        "chrf-41": 0.25866854763089986,
        "chrf-45": 0.2403199347657403,
        "chrf-114": 0.24382236762857598,
        "chrf-141": 0.2750472977211604,
        "chrf-126": 0.24566647738234063,
        "rougel-149": 0.19047619047619047,
        "rougel-22": 0.18181818181818182,
        "rougel-3": 0.5714285714285714,
        "rougel-189": 0.5714285714285714,
        "rougel-63": 0.6666666666666665,
        "rougel-54": 0.23076923076923075,
        "rougel-43": 0.1923076923076923,
        "rougel-27": 0.17543859649122806,
        "rougel-21": 0.1509433962264151,
        "rougel-163": 0.2857142857142857,
        "rougel-121": 0.2926829268292683,
        "rougel-18": 0.22857142857142856,
        "rougel-138": 0.3,
        "rougel-94": 0.2181818181818182,
        "rougel-6": 0.2857142857142857,
        "rougel-41": 0.1818181818181818,
        "rougel-45": 0.14285714285714285,
        "rougel-114": 0.27586206896551724,
        "rougel-141": 0.22857142857142856,
        "rougel-126": 0.26666666666666666,
        "meteor-149": 0.23584905660377364,
        "meteor-22": 0.20618556701030927,
        "meteor-3": 0.6928104575163399,
        "meteor-189": 0.6928104575163399,
        "meteor-63": 0.7181571815718157,
        "meteor-54": 0.3017241379310345,
        "meteor-43": 0.25862068965517243,
        "meteor-27": 0.24793388429752064,
        "meteor-21": 0.21367521367521372,
        "meteor-163": 0.30303030303030304,
        "meteor-121": 0.33333333333333337,
        "meteor-18": 0.25252525252525254,
        "meteor-138": 0.4611459968602826,
        "meteor-94": 0.3583099906629319,
        "meteor-6": 0.30303030303030304,
        "meteor-41": 0.23148148148148148,
        "meteor-45": 0.18867924528301885,
        "meteor-114": 0.2688172043010753,
        "meteor-141": 0.25252525252525254,
        "meteor-126": 0.26595744680851063,
        "ruby-149": 0.08823529411764708,
        "ruby-22": 0.12,
        "ruby-3": 0.3846153846153846,
        "ruby-189": 0.3846153846153846,
        "ruby-63": 0.5,
        "ruby-54": 0.13636363636363635,
        "ruby-43": 0.11363636363636365,
        "ruby-27": 0.10204081632653061,
        "ruby-21": 0.0888888888888889,
        "ruby-163": 0.14814814814814814,
        "ruby-121": 0.18181818181818177,
        "ruby-18": 0.14814814814814814,
        "ruby-138": 0.1875,
        "ruby-94": 0.1063829787234043,
        "ruby-6": 0.14814814814814814,
        "ruby-41": 0.11111111111111116,
        "ruby-45": 0.08823529411764708,
        "ruby-114": 0.19047619047619047,
        "ruby-141": 0.14814814814814814,
        "ruby-126": 0.18181818181818177,
        "codebertscore_f1-149": 0.7249643206596375,
        "codebertscore_f3-149": 0.7972442507743835,
        "codebertscore_f1-22": 0.7392860651016235,
        "codebertscore_f3-22": 0.7903459668159485,
        "codebertscore_f1-3": 0.840571403503418,
        "codebertscore_f3-3": 0.9049781560897827,
        "codebertscore_f1-189": 0.8176909685134888,
        "codebertscore_f3-189": 0.8983822464942932,
        "codebertscore_f1-63": 0.915743887424469,
        "codebertscore_f3-63": 0.9379253387451172,
        "codebertscore_f1-54": 0.7330385446548462,
        "codebertscore_f3-54": 0.8066109418869019,
        "codebertscore_f1-43": 0.730171263217926,
        "codebertscore_f3-43": 0.7822253108024597,
        "codebertscore_f1-27": 0.7294372916221619,
        "codebertscore_f3-27": 0.796906590461731,
        "codebertscore_f1-21": 0.731627345085144,
        "codebertscore_f3-21": 0.7855504155158997,
        "codebertscore_f1-163": 0.7724943161010742,
        "codebertscore_f3-163": 0.8265052437782288,
        "codebertscore_f1-121": 0.7778845429420471,
        "codebertscore_f3-121": 0.853762149810791,
        "codebertscore_f1-18": 0.7413772344589233,
        "codebertscore_f3-18": 0.7944521903991699,
        "codebertscore_f1-138": 0.7830426096916199,
        "codebertscore_f3-138": 0.8438079357147217,
        "codebertscore_f1-94": 0.7463195323944092,
        "codebertscore_f3-94": 0.8298981785774231,
        "codebertscore_f1-6": 0.7650058269500732,
        "codebertscore_f3-6": 0.8174191117286682,
        "codebertscore_f1-41": 0.7388104200363159,
        "codebertscore_f3-41": 0.8138493299484253,
        "codebertscore_f1-45": 0.7218570709228516,
        "codebertscore_f3-45": 0.7912687063217163,
        "codebertscore_f1-114": 0.7633554339408875,
        "codebertscore_f3-114": 0.8113860487937927,
        "codebertscore_f1-141": 0.7322197556495667,
        "codebertscore_f3-141": 0.7821588516235352,
        "codebertscore_f1-126": 0.7477455735206604,
        "codebertscore_f3-126": 0.7909212708473206,
        "codebertscore_s_f1-149": 0.7268420457839966,
        "codebertscore_s_f3-149": 0.791787326335907,
        "codebertscore_s_f1-22": 0.7041664123535156,
        "codebertscore_s_f3-22": 0.7504087090492249,
        "codebertscore_s_f1-3": 0.821080207824707,
        "codebertscore_s_f3-3": 0.8982346057891846,
        "codebertscore_s_f1-189": 0.7959211468696594,
        "codebertscore_s_f3-189": 0.892081618309021,
        "codebertscore_s_f1-63": 0.8776647448539734,
        "codebertscore_s_f3-63": 0.9011898040771484,
        "codebertscore_s_f1-54": 0.7167309522628784,
        "codebertscore_s_f3-54": 0.7818883657455444,
        "codebertscore_s_f1-43": 0.7070322632789612,
        "codebertscore_s_f3-43": 0.7534598112106323,
        "codebertscore_s_f1-27": 0.702883780002594,
        "codebertscore_s_f3-27": 0.7594313621520996,
        "codebertscore_s_f1-21": 0.7073060870170593,
        "codebertscore_s_f3-21": 0.7583128213882446,
        "codebertscore_s_f1-163": 0.7456173896789551,
        "codebertscore_s_f3-163": 0.7956094741821289,
        "codebertscore_s_f1-121": 0.7768741250038147,
        "codebertscore_s_f3-121": 0.8525217771530151,
        "codebertscore_s_f1-18": 0.7068734169006348,
        "codebertscore_s_f3-18": 0.7552834153175354,
        "codebertscore_s_f1-138": 0.7785597443580627,
        "codebertscore_s_f3-138": 0.8432941436767578,
        "codebertscore_s_f1-94": 0.7262476682662964,
        "codebertscore_s_f3-94": 0.8194513320922852,
        "codebertscore_s_f1-6": 0.7388455867767334,
        "codebertscore_s_f3-6": 0.7885292172431946,
        "codebertscore_s_f1-41": 0.722165048122406,
        "codebertscore_s_f3-41": 0.7834975719451904,
        "codebertscore_s_f1-45": 0.7209474444389343,
        "codebertscore_s_f3-45": 0.7806515097618103,
        "codebertscore_s_f1-114": 0.7343330383300781,
        "codebertscore_s_f3-114": 0.7730880975723267,
        "codebertscore_s_f1-141": 0.7134557366371155,
        "codebertscore_s_f3-141": 0.7606670260429382,
        "codebertscore_s_f1-126": 0.7237142324447632,
        "codebertscore_s_f3-126": 0.7604067325592041,
        "gpt35_nsnr-149": 4,
        "raw_gpt35_nsnr-149": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-54": 4,
        "raw_gpt35_nsnr-54": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-21": 4,
        "raw_gpt35_nsnr-21": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-121": 4,
        "raw_gpt35_nsnr-121": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-94": 3,
        "raw_gpt35_nsnr-94": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-45": 4,
        "raw_gpt35_nsnr-45": "4",
        "gpt35_nsnr-114": 4,
        "raw_gpt35_nsnr-114": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nswr-149": 4,
        "raw_gpt35_nswr-149": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-54": 4,
        "raw_gpt35_nswr-54": "4",
        "gpt35_nswr-43": 4,
        "raw_gpt35_nswr-43": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-21": 4,
        "raw_gpt35_nswr-21": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-121": 4,
        "raw_gpt35_nswr-121": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-138": 4,
        "raw_gpt35_nswr-138": "4",
        "gpt35_nswr-94": 4,
        "raw_gpt35_nswr-94": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-41": 4,
        "raw_gpt35_nswr-41": "4",
        "gpt35_nswr-45": 4,
        "raw_gpt35_nswr-45": "4",
        "gpt35_nswr-114": 4,
        "raw_gpt35_nswr-114": "4",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-126": 4,
        "raw_gpt35_nswr-126": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\nstd::string encrypt(std::string s) {\n",
        "snippet": [
            "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
        "task_id": "89",
        "164": "// rotate the alphabet by two multiplied to two places\n    // e.g. a - z --> c - b\n    // the characters are rotated in a circular manner and hence\n    // we can simply add 2 to 'a' and 'z' to get their respective\n    // integers and then add 2 to the integer of the current char\n    // and convert it back to char.\n    // if the char is an uppercase letter, we add 2 to 'A' and 'Z'\n    // to get their respective integers and then add 2 to the integer\n    // of the current char and convert it back to char.\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = (s[i] - 'a' + 2) % 26 + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = (s[i] - 'A' + 2) % 26 + 'A';\n        }\n    }\n    return s;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::string newString = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char currentChar = s[i];\n        int shiftValue = 2 * (i + 1);\n        int newCharValue = ((currentChar - 'a') + shiftValue) % 26;\n        newString += (char)(newCharValue + 'a');\n    }\n    return newString;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string result;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'u') {\n\t\t\tresult += 'w';\n\t\t}\n\t\telse if (s[i] == 'v') {\n\t\t\tresult += 'x';\n\t\t}\n\t\telse if (s[i] == 'w') {\n\t\t\tresult += 'y';\n\t\t}\n\t\telse if (s[i] == 'x') {\n\t\t\tresult += 'z';\n\t\t}\n\t\telse if (s[i] == 'y') {\n\t\t\tresult += 'a';\n\t\t}\n\t\telse if (s[i] == 'z') {\n\t\t\tresult += 'b';\n\t\t}\n\t\telse {\n\t\t\tresult += s[i] + 2;\n\t\t}\n\t}\n\treturn result;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tresult += (s[i] + 2) % 256;\n\t}\n\treturn result;",
        "grade-190": {
            "execution": 0
        },
        "71": "std::string encrypted = \"\";\n    for (char& c : s) {\n        if (c == 'z') {\n            encrypted += 'b';\n        } else if (c == 'y') {\n            encrypted += 'a';\n        } else {\n            encrypted += c + 2;\n        }\n    }\n    return encrypted;",
        "grade-71": {
            "execution": 0
        },
        "62": "",
        "grade-62": {
            "execution": 0
        },
        "57": "for(auto& i : s)\n        i = (i + 4) % 26 + 'a';\n    return s;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] + 2*2;\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "const char alphabet [27] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','\\0'};\n\tstd::string sNew=\"\";\n\tfor(int i=0;i<s.length();i++){\n\t\tint place = s[i] - 'a';\n\t\tsNew += alphabet[(place + 2*2)%26];\n\t}\n\treturn sNew;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::string res;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'z') {\n\t\t\tres += 'b';\n\t\t}\n\t\telse if (s[i] == 'y') {\n\t\t\tres += 'a';\n\t\t}\n\t\telse {\n\t\t\tres += s[i] + 2;\n\t\t}\n\t}\n\treturn res;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::string result;\n    int size = s.size();\n    for(int i = 0; i < size; i++) {\n        if(s[i] == 'z') {\n            result = result + 'b';\n        }\n        else if(s[i] == 'y') {\n            result = result + 'a';\n        }\n        else {\n            char ch = s[i];\n            ch = ch + 2;\n            result = result + ch;\n        }\n    }\n    return result;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] + 4;\n    }\n    return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "char c = 'a';\n  std::string res = \"\";\n  for (char x : s) {\n    res += (char)((x - c + 2 * 2) % 26 + c);\n  }\n  return res;",
        "grade-22": {
            "execution": 1
        },
        "152": "for(int i = 0; i < s.length(); i++) {\n        s[i] += 4;\n    }\n    return s;",
        "grade-152": {
            "execution": 0
        },
        "109": "for(int i = 0; i < s.length(); i++) {\n        s[i] = s[i] + 4;\n    }\n    return s;",
        "grade-109": {
            "execution": 0
        },
        "8": "std::string r = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    r = r + char(s[i] + 2 * 2);\n  }\n  return r;",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = s.length();\n    for (int i = 0; i < n; i++) {\n        s[i] = char(int(s[i]) + 4);\n    }\n    return s;",
        "grade-7": {
            "execution": 0
        },
        "23": "int len = s.length();\n\tfor (int i = 0; i < len; i++) {\n\t\t// subtract number of letters in the alphabet to normalize indexes\n\t\ts[i] -= 26;\n\t\t// shift down by one letter\n\t\ts[i] += 1;\n\t\t// shift down by two letters\n\t\ts[i] += 2;\n\t\t// shift down by another two letters\n\t\ts[i] += 2;\n\t\t// normalize indexes again\n\t\ts[i] += 26;\n\t}\n\treturn s;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string ret;\n    for (char c : s) {\n        ret += (char)(c + 4);\n    }\n    return ret;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string t = s;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tt[i] = s[i] + 4;\n\t}\n\treturn t;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.1162163314337079,
        "bleu-28": 0.33628613105658567,
        "bleu-6": 0.16265765506746316,
        "bleu-190": 0.3305566046468432,
        "bleu-71": 0.08259059599030033,
        "bleu-62": 0.0,
        "bleu-57": 0.04773841210578898,
        "bleu-35": 0.3115900741641382,
        "bleu-189": 0.16026012860498884,
        "bleu-26": 0.3195207728437264,
        "bleu-174": 0.19507577499330067,
        "bleu-140": 0.29368338901040963,
        "bleu-22": 0.12818771374523769,
        "bleu-152": 0.22045065476716855,
        "bleu-109": 0.2601014058921318,
        "bleu-8": 0.33051800986417496,
        "bleu-7": 0.273881053651139,
        "bleu-23": 0.195269640747463,
        "bleu-55": 0.0385221699091206,
        "bleu-59": 0.3141650569082681,
        "codebleu-164": 0.6016081052737169,
        "codebleu-28": 0.6624815480692945,
        "codebleu-6": 0.5708704524563769,
        "codebleu-190": 0.4274664793343671,
        "codebleu-71": 0.3125970135300806,
        "codebleu-62": 0.0,
        "codebleu-57": 0.16741979851179592,
        "codebleu-35": 0.39799373894479173,
        "codebleu-189": 0.5467755534174179,
        "codebleu-26": 0.5386918916199424,
        "codebleu-174": 0.5690135900418756,
        "codebleu-140": 0.35924757497825777,
        "codebleu-22": 0.36390770731351446,
        "codebleu-152": 0.29113601811204076,
        "codebleu-109": 0.33700701003981887,
        "codebleu-8": 0.4625523915367034,
        "codebleu-7": 0.4464824588038696,
        "codebleu-23": 0.44851257756354374,
        "codebleu-55": 0.1834176068451402,
        "codebleu-59": 0.40105065010054797,
        "chrf-164": 0.25717956404352965,
        "chrf-28": 0.4175585219088902,
        "chrf-6": 0.3290214379512966,
        "chrf-190": 0.3926612731816333,
        "chrf-71": 0.19340034803355152,
        "chrf-62": 0.0,
        "chrf-57": 0.1375081740149689,
        "chrf-35": 0.38278368723329415,
        "chrf-189": 0.3612403697306527,
        "chrf-26": 0.3776097332222935,
        "chrf-174": 0.3025243254004933,
        "chrf-140": 0.39335398178622244,
        "chrf-22": 0.2242978218753745,
        "chrf-152": 0.3427652180636859,
        "chrf-109": 0.35044245066629576,
        "chrf-8": 0.3923102331777125,
        "chrf-7": 0.34454178659291046,
        "chrf-23": 0.2869430427485425,
        "chrf-55": 0.19766294473969592,
        "chrf-59": 0.3971799993736866,
        "rougel-164": 0.27414330218068533,
        "rougel-28": 0.5487804878048781,
        "rougel-6": 0.3770491803278689,
        "rougel-190": 0.5811965811965812,
        "rougel-71": 0.3597122302158273,
        "rougel-62": 0,
        "rougel-57": 0.4421052631578948,
        "rougel-35": 0.5391304347826087,
        "rougel-189": 0.30952380952380953,
        "rougel-26": 0.5384615384615383,
        "rougel-174": 0.4508670520231214,
        "rougel-140": 0.5818181818181818,
        "rougel-22": 0.3333333333333333,
        "rougel-152": 0.5686274509803921,
        "rougel-109": 0.5660377358490566,
        "rougel-8": 0.5546218487394957,
        "rougel-7": 0.5128205128205128,
        "rougel-23": 0.33707865168539325,
        "rougel-55": 0.33999999999999997,
        "rougel-59": 0.5614035087719298,
        "meteor-164": 0.44714744592829275,
        "meteor-28": 0.6420042971147943,
        "meteor-6": 0.44863374454259314,
        "meteor-190": 0.4169592227767435,
        "meteor-71": 0.29698290556302376,
        "meteor-62": 0.0,
        "meteor-57": 0.22769856791369628,
        "meteor-35": 0.407864654778235,
        "meteor-189": 0.505310960591133,
        "meteor-26": 0.4764121663563004,
        "meteor-174": 0.4426049173462854,
        "meteor-140": 0.39399886381242577,
        "meteor-22": 0.28414492518770584,
        "meteor-152": 0.33014137463807525,
        "meteor-109": 0.3195382882882883,
        "meteor-8": 0.4157310660086235,
        "meteor-7": 0.4006284505688304,
        "meteor-23": 0.32751947831978323,
        "meteor-55": 0.15151515151515152,
        "meteor-59": 0.38635014836795245,
        "ruby-164": 0.1633466135458167,
        "ruby-28": 0.3829787234042553,
        "ruby-6": 0.2586206896551724,
        "ruby-190": 0.4285714285714286,
        "ruby-71": 0.2142857142857143,
        "ruby-62": 0.0,
        "ruby-57": 0.30000000000000004,
        "ruby-35": 0.3857142857142857,
        "ruby-189": 0.13186813186813184,
        "ruby-26": 0.38372093023255816,
        "ruby-174": 0.2912621359223301,
        "ruby-140": 0.4285714285714286,
        "ruby-22": 0.22857142857142854,
        "ruby-152": 0.4,
        "ruby-109": 0.4,
        "ruby-8": 0.4,
        "ruby-7": 0.34285714285714286,
        "ruby-23": 0.20370370370370372,
        "ruby-55": 0.22857142857142854,
        "ruby-59": 0.3857142857142857,
        "codebertscore_f1-164": 0.6855196356773376,
        "codebertscore_f3-164": 0.7403587698936462,
        "codebertscore_f1-28": 0.8298225402832031,
        "codebertscore_f3-28": 0.8531649708747864,
        "codebertscore_f1-6": 0.7774322628974915,
        "codebertscore_f3-6": 0.7989429831504822,
        "codebertscore_f1-190": 0.8467052578926086,
        "codebertscore_f3-190": 0.8245594501495361,
        "codebertscore_f1-71": 0.7382459044456482,
        "codebertscore_f3-71": 0.7355858683586121,
        "codebertscore_f1-62": 0.0,
        "codebertscore_f3-62": 0.0,
        "codebertscore_f1-57": 0.7842073440551758,
        "codebertscore_f3-57": 0.7614614367485046,
        "codebertscore_f1-35": 0.8374786376953125,
        "codebertscore_f3-35": 0.8206007480621338,
        "codebertscore_f1-189": 0.7722623944282532,
        "codebertscore_f3-189": 0.8214244842529297,
        "codebertscore_f1-26": 0.8365440368652344,
        "codebertscore_f3-26": 0.8397071361541748,
        "codebertscore_f1-174": 0.8021047115325928,
        "codebertscore_f3-174": 0.8146376013755798,
        "codebertscore_f1-140": 0.8544314503669739,
        "codebertscore_f3-140": 0.8274834156036377,
        "codebertscore_f1-22": 0.7835034132003784,
        "codebertscore_f3-22": 0.7786897420883179,
        "codebertscore_f1-152": 0.8364934921264648,
        "codebertscore_f3-152": 0.7968334555625916,
        "codebertscore_f1-109": 0.838007926940918,
        "codebertscore_f3-109": 0.799430251121521,
        "codebertscore_f1-8": 0.8382054567337036,
        "codebertscore_f3-8": 0.8267613053321838,
        "codebertscore_f1-7": 0.8542039394378662,
        "codebertscore_f3-7": 0.8258731365203857,
        "codebertscore_f1-23": 0.756718099117279,
        "codebertscore_f3-23": 0.7926642894744873,
        "codebertscore_f1-55": 0.7903959155082703,
        "codebertscore_f3-55": 0.755341112613678,
        "codebertscore_f1-59": 0.8494159579277039,
        "codebertscore_f3-59": 0.820574164390564,
        "codebertscore_s_f1-164": 0.7049198746681213,
        "codebertscore_s_f3-164": 0.7601238489151001,
        "codebertscore_s_f1-28": 0.8314953446388245,
        "codebertscore_s_f3-28": 0.8551381826400757,
        "codebertscore_s_f1-6": 0.7914057374000549,
        "codebertscore_s_f3-6": 0.8139439821243286,
        "codebertscore_s_f1-190": 0.8478678464889526,
        "codebertscore_s_f3-190": 0.824977457523346,
        "codebertscore_s_f1-71": 0.7430281043052673,
        "codebertscore_s_f3-71": 0.7384802103042603,
        "codebertscore_s_f1-62": 0,
        "codebertscore_s_f3-62": 0,
        "codebertscore_s_f1-57": 0.7912960648536682,
        "codebertscore_s_f3-57": 0.7633053064346313,
        "codebertscore_s_f1-35": 0.8383487462997437,
        "codebertscore_s_f3-35": 0.822223961353302,
        "codebertscore_s_f1-189": 0.7743372917175293,
        "codebertscore_s_f3-189": 0.8202447295188904,
        "codebertscore_s_f1-26": 0.8389399647712708,
        "codebertscore_s_f3-26": 0.8402024507522583,
        "codebertscore_s_f1-174": 0.8167205452919006,
        "codebertscore_s_f3-174": 0.8266679048538208,
        "codebertscore_s_f1-140": 0.8563892245292664,
        "codebertscore_s_f3-140": 0.8290086388587952,
        "codebertscore_s_f1-22": 0.7878347039222717,
        "codebertscore_s_f3-22": 0.7823850512504578,
        "codebertscore_s_f1-152": 0.8419506549835205,
        "codebertscore_s_f3-152": 0.7988957166671753,
        "codebertscore_s_f1-109": 0.8472747206687927,
        "codebertscore_s_f3-109": 0.8047836422920227,
        "codebertscore_s_f1-8": 0.8376876711845398,
        "codebertscore_s_f3-8": 0.8263058662414551,
        "codebertscore_s_f1-7": 0.8543781042098999,
        "codebertscore_s_f3-7": 0.8220253586769104,
        "codebertscore_s_f1-23": 0.761725127696991,
        "codebertscore_s_f3-23": 0.795615553855896,
        "codebertscore_s_f1-55": 0.7879047989845276,
        "codebertscore_s_f3-55": 0.7521567344665527,
        "codebertscore_s_f1-59": 0.8531209230422974,
        "codebertscore_s_f3-59": 0.8236711025238037,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "3 - The code snippet correctly rotates the alphabet by shifting the letters down by two multiplied to two places. However, it does not handle uppercase letters or non-alphabetic characters.",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 2,
        "raw_gpt35_nsnr-140": "2",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-109": 2,
        "raw_gpt35_nsnr-109": "2",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-55": 2,
        "raw_gpt35_nsnr-55": "2",
        "gpt35_nsnr-59": 2,
        "raw_gpt35_nsnr-59": "2",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "Score: 2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 2,
        "raw_gpt35_nswr-140": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nlong vowels_count(std::string s) {\n",
        "snippet": [
            "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n"
        ],
        "simplified": "Add more test cases.",
        "task_id": "64",
        "174": "int vowels = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowels += 1;\n        }\n        else if (s[i] == 'y' && i == s.length() - 1) {\n            vowels += 1;\n        }\n    }\n    return vowels;",
        "grade-174": {
            "execution": 0
        },
        "29": "std::set<char> vowels;\n\tvowels.insert('a');\n\tvowels.insert('e');\n\tvowels.insert('i');\n\tvowels.insert('o');\n\tvowels.insert('u');\n\tlong count = 0;\n\tfor (char c : s) {\n\t\tif (vowels.find(tolower(c)) != vowels.end()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-29": {
            "execution": 0
        },
        "6": "// Write your code here\n\t// To print results to the standard output you can use 'cout'\n\t// Example: cout << \"Hello world!\";\n\tstring a=\"aeiouy\";\n\tlong count=0;\n\tint i=0;\n\tfor(i=0;i<s.length();i++)\n\t{\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-6": {
            "execution": 0
        },
        "73": "long count = 0;\n    if(s.length() > 0){\n        char last = *(s.end()-1);\n        if(last == 'A' || last == 'E' || last == 'I' || last == 'O' || last == 'U' || last == 'Y'){\n            count++;\n        }\n    }\n    for(int i = 0; i < s.length(); i++){\n        char c = s[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    return count;",
        "grade-73": {
            "execution": 0
        },
        "65": "int l = s.length();\n    long ans = 0;\n    for(int i = 0; i < l; i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            ans++;\n        }\n        if(s[i] == 'y' && i != l - 1) {\n            ans++;\n        }\n    }\n    return ans;",
        "grade-65": {
            "execution": 0
        },
        "60": "// YOUR CODE HERE\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    long count = 0;\n    int n = s.length();\n    for(int i = 0; i < n; i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n        if(s[i] == 'y' && i == n-1) {\n            count++;\n        }\n    }\n    return count;",
        "grade-60": {
            "execution": 1
        },
        "36": "std::locale loc;\n    int count = 0;\n    std::string s_lower = s;\n    std::transform(s_lower.begin(), s_lower.end(), s_lower.begin(), ::tolower);\n    for (int i = 0; i < s_lower.length(); i++) {\n        if (s_lower[i] == 'a' || s_lower[i] == 'e' || s_lower[i] == 'i' || s_lower[i] == 'o' || s_lower[i] == 'u') {\n            count++;\n        }\n    }\n    return count;",
        "grade-36": {
            "execution": 0
        },
        "199": "int length = s.length();\n    long count = 0;\n    for (int i = 0; i < length; i++) {\n        char ch = s[i];\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n        }\n        if (ch == 'y' && i == length - 1) {\n            count++;\n        }\n    }\n    return count;",
        "grade-199": {
            "execution": 0
        },
        "27": "long count = 0;\n    for (std::string::iterator it = s.begin(); it != s.end(); ++it) {\n        switch (std::tolower(*it)) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n                break;\n            case 'y':\n                if (it == s.end() - 1) {\n                    count++;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    return count;",
        "grade-27": {
            "execution": 1
        },
        "184": "// Write your code here",
        "grade-184": {
            "execution": 0
        },
        "147": "int count = 0;\n  char vowels[] = {'a', 'e', 'i', 'o', 'u', 'y'};\n  // To determine if a word ends with 'y'\n  char last_element = s[s.length() - 1];\n  // std::cout << \"Last Element: \" << last_element << std::endl;\n  for (int i = 0; i < s.length(); i++) {\n    // Checking if each element of the string is equal to the\n    // elements in the array of vowels.\n    // To check if each element is a vowel we have to convert it\n    // to lowercase\n    for (int j = 0; j < sizeof(vowels) / sizeof(vowels[0]); j++) {\n      if (tolower(s[i]) == vowels[j]) {\n        count++;\n      }\n    }\n  }\n  if (last_element == 'y') {\n    count++;\n  }\n  return count;",
        "grade-147": {
            "execution": 0
        },
        "23": "assert(s.length() > 0);\n    long cnt = 0;\n    for (size_t i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (i == s.length() - 1) {\n            if (c == 'y' || c == 'Y') {\n                cnt++;\n            }\n        } else {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                cnt++;\n            }\n        }\n    }\n    return cnt;",
        "grade-23": {
            "execution": 0
        },
        "161": "long c = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            c++;\n    }\n    if (s[s.length() - 1] == 'y')\n        c++;\n    return c;",
        "grade-161": {
            "execution": 0
        },
        "114": "int n = s.length();\n\tlong cnt = 0;\n\tstd::string vowels = \"aeiou\";\n\tfor (int i = 0; i < n; i++) {\n\t\tif (s[i] == 'y' && i == n - 1) {\n\t\t\tcnt++;\n\t\t}\n\t\tfor (int j = 0; j < 5; j++) {\n\t\t\tif (s[i] == vowels[j]) {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;",
        "grade-114": {
            "execution": 0
        },
        "8": "long count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n    if (s[i] == 'y' && i == s.length() - 1) {\n      count++;\n    }\n  }\n  return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "long len=s.length();\n    long result=0;\n    for(long i=0;i<len;i++)\n    {\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')\n        {\n            result++;\n        }\n        else if(s[i]=='y'&&i==len-1)\n        {\n            result++;\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "int n = s.length();\n  long count = 0;\n  for (int i = 0; i < n; i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n    if (s[i] == 'y' && (i == n - 1)) {\n      count++;\n    }\n  }\n  return count;",
        "grade-24": {
            "execution": 0
        },
        "58": "assert(s.length() > 0);\n\tlong num_vowels = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\t\t\tnum_vowels += 1;\n\t\t}\n\t\telse if (s[i] == 'y' && i != s.length() - 1) {\n\t\t\tnum_vowels += 1;\n\t\t}\n\t}\n\treturn num_vowels;",
        "grade-58": {
            "execution": 0
        },
        "62": "// Write your code here\n    long count = 0;\n    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            count++;\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 0
        },
        "135": "long vowels = 0;\n  std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      vowels++;\n    }\n    if (s[i] == 'y' && (i == s.length() - 1)) {\n      vowels++;\n    }\n  }\n  return vowels;",
        "grade-135": {
            "execution": 1
        },
        "bleu-174": 0.3822283177787716,
        "bleu-29": 0.18995547045238184,
        "bleu-6": 0.2576045975524747,
        "bleu-73": 0.26605364868349546,
        "bleu-65": 0.2896308059061695,
        "bleu-60": 0.293889920837916,
        "bleu-36": 0.2968475210259215,
        "bleu-199": 0.3012745003077604,
        "bleu-27": 0.18836124741315508,
        "bleu-184": 0.0,
        "bleu-147": 0.22382937055268948,
        "bleu-23": 0.24149630309372086,
        "bleu-161": 0.42176246971568515,
        "bleu-114": 0.3273263270673577,
        "bleu-8": 0.37601703153694055,
        "bleu-7": 0.2558679025860021,
        "bleu-24": 0.3076514071243388,
        "bleu-58": 0.37322191542442384,
        "bleu-62": 0.11637183722717262,
        "bleu-135": 0.3436592527957733,
        "codebleu-174": 0.5650418377298221,
        "codebleu-29": 0.5071514387012306,
        "codebleu-6": 0.48155231865063236,
        "codebleu-73": 0.5846428291528288,
        "codebleu-65": 0.5116306077729146,
        "codebleu-60": 0.6369470379722226,
        "codebleu-36": 0.5869783260435623,
        "codebleu-199": 0.47957062099905146,
        "codebleu-27": 0.497660488139951,
        "codebleu-184": 0.0182648401826484,
        "codebleu-147": 0.6369329419507307,
        "codebleu-23": 0.5696426020583283,
        "codebleu-161": 0.5417864420397341,
        "codebleu-114": 0.5143373041452353,
        "codebleu-8": 0.5432747405071391,
        "codebleu-7": 0.4943043747605914,
        "codebleu-24": 0.5277794120148056,
        "codebleu-58": 0.616662168719061,
        "codebleu-62": 0.2390592013717476,
        "codebleu-135": 0.682814617790092,
        "chrf-174": 0.3962277980102275,
        "chrf-29": 0.3421563148816263,
        "chrf-6": 0.3653869365303256,
        "chrf-73": 0.38643448616833004,
        "chrf-65": 0.2566090875521599,
        "chrf-60": 0.4073590068376552,
        "chrf-36": 0.3922661776348518,
        "chrf-199": 0.3517548397444157,
        "chrf-27": 0.3129380715213278,
        "chrf-184": 0.021610383598700947,
        "chrf-147": 0.41742206570181983,
        "chrf-23": 0.34445499971447957,
        "chrf-161": 0.3581338481374942,
        "chrf-114": 0.3754480784859138,
        "chrf-8": 0.3993965983629174,
        "chrf-7": 0.25675871316059934,
        "chrf-24": 0.339807617780181,
        "chrf-58": 0.4297568491950189,
        "chrf-62": 0.19142309029962007,
        "chrf-135": 0.45408724184537763,
        "rougel-174": 0.5064377682403434,
        "rougel-29": 0.38048780487804873,
        "rougel-6": 0.453125,
        "rougel-73": 0.33576642335766427,
        "rougel-65": 0.43290043290043295,
        "rougel-60": 0.393939393939394,
        "rougel-36": 0.4132231404958678,
        "rougel-199": 0.42533936651583715,
        "rougel-27": 0.367713004484305,
        "rougel-184": 0.0,
        "rougel-147": 0.3580246913580247,
        "rougel-23": 0.36491228070175447,
        "rougel-161": 0.5181818181818182,
        "rougel-114": 0.42790697674418604,
        "rougel-8": 0.5043478260869565,
        "rougel-7": 0.42241379310344834,
        "rougel-24": 0.4549356223175966,
        "rougel-58": 0.4836065573770492,
        "rougel-62": 0.2994652406417112,
        "rougel-135": 0.423076923076923,
        "meteor-174": 0.5574455384114012,
        "meteor-29": 0.32295558571554406,
        "meteor-6": 0.4003764704655587,
        "meteor-73": 0.44504554044425165,
        "meteor-65": 0.4633069365552205,
        "meteor-60": 0.504929759341171,
        "meteor-36": 0.44713921319362565,
        "meteor-199": 0.3654727008923134,
        "meteor-27": 0.3893962455606292,
        "meteor-184": 0.0,
        "meteor-147": 0.4616473056143753,
        "meteor-23": 0.402230555206565,
        "meteor-161": 0.5071581529625568,
        "meteor-114": 0.3815055127263508,
        "meteor-8": 0.5149191369227667,
        "meteor-7": 0.38896005049379956,
        "meteor-24": 0.44746425339366525,
        "meteor-58": 0.5449402695436985,
        "meteor-62": 0.231412262908171,
        "meteor-135": 0.5501529619837991,
        "ruby-174": 0.3145161290322581,
        "ruby-29": 0.19266055045871555,
        "ruby-6": 0.2925170068027211,
        "ruby-73": 0.17575757575757578,
        "ruby-65": 0.29508196721311475,
        "ruby-60": 0.2387096774193549,
        "ruby-36": 0.27819548872180455,
        "ruby-199": 0.2589285714285714,
        "ruby-27": 0.17543859649122806,
        "ruby-184": 0.0,
        "ruby-147": 0.21395348837209305,
        "ruby-23": 0.25,
        "ruby-161": 0.3783783783783784,
        "ruby-114": 0.17431192660550454,
        "ruby-8": 0.30578512396694213,
        "ruby-7": 0.2845528455284553,
        "ruby-24": 0.30645161290322576,
        "ruby-58": 0.3481481481481481,
        "ruby-62": 0.22018348623853212,
        "ruby-135": 0.29139072847682124,
        "codebertscore_f1-174": 0.8464990854263306,
        "codebertscore_f3-174": 0.8314410448074341,
        "codebertscore_f1-29": 0.8103474378585815,
        "codebertscore_f3-29": 0.8012222051620483,
        "codebertscore_f1-6": 0.783431887626648,
        "codebertscore_f3-6": 0.8006080985069275,
        "codebertscore_f1-73": 0.7853825092315674,
        "codebertscore_f3-73": 0.7953328490257263,
        "codebertscore_f1-65": 0.8215003609657288,
        "codebertscore_f3-65": 0.7976318001747131,
        "codebertscore_f1-60": 0.8162998557090759,
        "codebertscore_f3-60": 0.8116587996482849,
        "codebertscore_f1-36": 0.8047162890434265,
        "codebertscore_f3-36": 0.8016740679740906,
        "codebertscore_f1-199": 0.8165497183799744,
        "codebertscore_f3-199": 0.8035462498664856,
        "codebertscore_f1-27": 0.7268901467323303,
        "codebertscore_f3-27": 0.7361820936203003,
        "codebertscore_f1-184": 0.5142223834991455,
        "codebertscore_f3-184": 0.5072211027145386,
        "codebertscore_f1-147": 0.7609059810638428,
        "codebertscore_f3-147": 0.81276935338974,
        "codebertscore_f1-23": 0.7796540260314941,
        "codebertscore_f3-23": 0.7834181189537048,
        "codebertscore_f1-161": 0.8463284969329834,
        "codebertscore_f3-161": 0.8183466196060181,
        "codebertscore_f1-114": 0.8577444553375244,
        "codebertscore_f3-114": 0.8524702191352844,
        "codebertscore_f1-8": 0.851431667804718,
        "codebertscore_f3-8": 0.8263120651245117,
        "codebertscore_f1-7": 0.8106689453125,
        "codebertscore_f3-7": 0.790325403213501,
        "codebertscore_f1-24": 0.8427133560180664,
        "codebertscore_f3-24": 0.8198807835578918,
        "codebertscore_f1-58": 0.8527979850769043,
        "codebertscore_f3-58": 0.8448823094367981,
        "codebertscore_f1-62": 0.7463153600692749,
        "codebertscore_f3-62": 0.7360594868659973,
        "codebertscore_f1-135": 0.8412265181541443,
        "codebertscore_f3-135": 0.8341098427772522,
        "codebertscore_s_f1-174": 0.8570377826690674,
        "codebertscore_s_f3-174": 0.8416383266448975,
        "codebertscore_s_f1-29": 0.8147286772727966,
        "codebertscore_s_f3-29": 0.803538978099823,
        "codebertscore_s_f1-6": 0.7939118146896362,
        "codebertscore_s_f3-6": 0.8084660768508911,
        "codebertscore_s_f1-73": 0.8014194369316101,
        "codebertscore_s_f3-73": 0.808057427406311,
        "codebertscore_s_f1-65": 0.8318043947219849,
        "codebertscore_s_f3-65": 0.8078446984291077,
        "codebertscore_s_f1-60": 0.8255318999290466,
        "codebertscore_s_f3-60": 0.8210014700889587,
        "codebertscore_s_f1-36": 0.810719907283783,
        "codebertscore_s_f3-36": 0.8063432574272156,
        "codebertscore_s_f1-199": 0.8252944946289062,
        "codebertscore_s_f3-199": 0.8109416961669922,
        "codebertscore_s_f1-27": 0.7455938458442688,
        "codebertscore_s_f3-27": 0.7543251514434814,
        "codebertscore_s_f1-184": 0.5077982544898987,
        "codebertscore_s_f3-184": 0.48996713757514954,
        "codebertscore_s_f1-147": 0.7775309085845947,
        "codebertscore_s_f3-147": 0.8313909769058228,
        "codebertscore_s_f1-23": 0.7968242764472961,
        "codebertscore_s_f3-23": 0.7972850203514099,
        "codebertscore_s_f1-161": 0.8535392880439758,
        "codebertscore_s_f3-161": 0.8249281644821167,
        "codebertscore_s_f1-114": 0.858083188533783,
        "codebertscore_s_f3-114": 0.8523921966552734,
        "codebertscore_s_f1-8": 0.8570472598075867,
        "codebertscore_s_f3-8": 0.8303999900817871,
        "codebertscore_s_f1-7": 0.8209676146507263,
        "codebertscore_s_f3-7": 0.801236093044281,
        "codebertscore_s_f1-24": 0.8468008637428284,
        "codebertscore_s_f3-24": 0.8225783705711365,
        "codebertscore_s_f1-58": 0.8607865571975708,
        "codebertscore_s_f3-58": 0.8532851338386536,
        "codebertscore_s_f1-62": 0.7505948543548584,
        "codebertscore_s_f3-62": 0.7371237874031067,
        "codebertscore_s_f1-135": 0.8489552140235901,
        "codebertscore_s_f3-135": 0.8425538539886475,
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-184": 3,
        "raw_gpt35_nsnr-184": "3",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-114": 4,
        "raw_gpt35_nsnr-114": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-114": 3,
        "raw_gpt35_nswr-114": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n",
        "snippet": [
            "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n"
        ],
        "simplified": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
        "task_id": "8",
        "28": "//a = sum, b = product\n\tlong a = 0, b = 1;\n\tif (numbers.size() == 0) {\n\t\ta = 0;\n\t\tb = 1;\n\t}\n\telse {\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\ta += numbers[i];\n\t\t\tb *= numbers[i];\n\t\t}\n\t}\n\treturn std::make_tuple(a, b);",
        "grade-28": {
            "execution": 1
        },
        "6": "long sum = 0;\n  long product = 1;\n  if (numbers.size() == 0) {\n    return std::make_tuple(sum, product);\n  }\n  for (long number : numbers) {\n    sum += number;\n    product *= number;\n  }\n  return std::make_tuple(sum, product);",
        "grade-6": {
            "execution": 1
        },
        "75": "long sum = 0;\n    long product = 1;\n    for (long num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);",
        "grade-75": {
            "execution": 1
        },
        "64": "long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long, long> result = std::make_tuple(sum, product);\n    return result;",
        "grade-64": {
            "execution": 1
        },
        "59": "long sum=0, product=1;\n    for(int i=0; i<numbers.size(); i++){\n        sum = sum + numbers[i];\n        product = product * numbers[i];\n    }\n    return {sum, product};",
        "grade-59": {
            "execution": 1
        },
        "36": "// Write your code here!\n  long int s=0,m=1;\n  for(auto i:numbers)\n  {\n    s+=i;\n    m*=i;\n  }\n  return std::make_tuple(s,m);",
        "grade-36": {
            "execution": 1
        },
        "26": "if (numbers.size() == 0)\n\t\treturn std::make_tuple(0, 1);\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (auto i : numbers) {\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn std::make_tuple(sum, product);",
        "grade-26": {
            "execution": 1
        },
        "168": "std::tuple<long, long> result(0, 1);\n    for (auto i : numbers) {\n        std::get<0>(result) += i;\n        std::get<1>(result) *= i;\n    }\n    return result;",
        "grade-168": {
            "execution": 1
        },
        "22": "// Write your code here\n    long sum = 0;\n    long prod = 1;\n    for(long i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    return std::make_tuple(sum, prod);",
        "grade-22": {
            "execution": 1
        },
        "183": "long sum = 0;\n    long product = 1;\n    if (numbers.size() == 0) {\n        return std::make_tuple(sum, product);\n    } else {\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers[i];\n            product *= numbers[i];\n        }\n        return std::make_tuple(sum, product);\n    }",
        "grade-183": {
            "execution": 1
        },
        "131": "std::tuple<long, long> tuple;\n    long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::get<0>(tuple) = sum;\n    std::get<1>(tuple) = product;\n    return tuple;",
        "grade-131": {
            "execution": 1
        },
        "8": "long sum,product;\n    sum=0;\n    product=1;\n    for(auto n:numbers){\n        sum+=n;\n        product*=n;\n    }\n    return std::make_tuple(sum,product);",
        "grade-8": {
            "execution": 1
        },
        "7": "long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  std::tuple<long, long> sum_product = std::make_tuple(sum, product);\n  return sum_product;",
        "grade-7": {
            "execution": 1
        },
        "23": "//your code here\n    long sum, product;\n    sum = 0;\n    product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long, long> sum_product = std::make_tuple(sum, product);\n    return sum_product;",
        "grade-23": {
            "execution": 1
        },
        "57": "long sum = 0;\n    long product = 1;\n    for (auto const& num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);",
        "grade-57": {
            "execution": 1
        },
        "61": "long sum = 0;\n    long product = 1;\n    for (std::vector<long>::iterator it = numbers.begin(); it != numbers.end(); ++it) {\n        sum += *it;\n        product *= *it;\n    }\n    return std::make_tuple(sum, product);",
        "grade-61": {
            "execution": 1
        },
        "156": "long sum = 0;\n    long prod = 1;\n    for (auto number : numbers) {\n        sum += number;\n        prod *= number;\n    }\n    return std::make_tuple(sum, prod);",
        "grade-156": {
            "execution": 1
        },
        "190": "long sum = 0;\n    long product = 1;\n    for (auto ele : numbers) {\n        sum += ele;\n        product *= ele;\n    }\n    return std::make_tuple(sum, product);",
        "grade-190": {
            "execution": 1
        },
        "175": "std::tuple<long, long> numbers_tuple;\n    long sum{0};\n    long product{1};\n    for (auto const & number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    numbers_tuple = std::make_tuple(sum, product);\n    return numbers_tuple;",
        "grade-175": {
            "execution": 1
        },
        "52": "return std::make_tuple(std::accumulate(numbers.begin(), numbers.end(), 0L), std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>()));",
        "grade-52": {
            "execution": 1
        },
        "bleu-28": 0.39809829906715954,
        "bleu-6": 0.27161174497207236,
        "bleu-75": 0.2670546231028829,
        "bleu-64": 0.6191828737437303,
        "bleu-59": 0.8362668068983201,
        "bleu-36": 0.14291370413234034,
        "bleu-26": 0.31378399248632877,
        "bleu-168": 0.07177924366394588,
        "bleu-22": 0.5853408193598416,
        "bleu-183": 0.5184435899404408,
        "bleu-131": 0.49191861885540733,
        "bleu-8": 0.28017534211669565,
        "bleu-7": 0.6191828737437303,
        "bleu-23": 0.5583814600971787,
        "bleu-57": 0.27071173046945357,
        "bleu-61": 0.24938492476329974,
        "bleu-156": 0.20256686620196715,
        "bleu-190": 0.2670546231028829,
        "bleu-175": 0.17392853539300263,
        "bleu-52": 0.026778658817271265,
        "codebleu-28": 0.7838620568258132,
        "codebleu-6": 0.5673822122269448,
        "codebleu-75": 0.4289925398265297,
        "codebleu-64": 0.7561356848033963,
        "codebleu-59": 0.834334436664563,
        "codebleu-36": 0.46171171171171166,
        "codebleu-26": 0.5930558325169745,
        "codebleu-168": 0.4139784946236559,
        "codebleu-22": 0.7273207505631706,
        "codebleu-183": 0.7599270884884347,
        "codebleu-131": 0.7330388990389658,
        "codebleu-8": 0.46921743029335283,
        "codebleu-7": 0.7561356848033963,
        "codebleu-23": 0.7495272075578616,
        "codebleu-57": 0.44174555973352747,
        "codebleu-61": 0.5596202085015577,
        "codebleu-156": 0.40281914869038227,
        "codebleu-190": 0.4289925398265297,
        "codebleu-175": 0.4985469340308049,
        "codebleu-52": 0.3303545480964835,
        "chrf-28": 0.584599847543888,
        "chrf-6": 0.5531333296296076,
        "chrf-75": 0.49736690703335623,
        "chrf-64": 0.7825352052792961,
        "chrf-59": 0.8836147475515935,
        "chrf-36": 0.24724058553708367,
        "chrf-26": 0.5230992088603282,
        "chrf-168": 0.2088762381659813,
        "chrf-22": 0.67545443846974,
        "chrf-183": 0.7593299589950552,
        "chrf-131": 0.7348533183873939,
        "chrf-8": 0.4795767263905462,
        "chrf-7": 0.7695369333369694,
        "chrf-23": 0.7491181304551021,
        "chrf-57": 0.49334484530976674,
        "chrf-61": 0.5001131034302434,
        "chrf-156": 0.42764116294067006,
        "chrf-190": 0.44694054976729075,
        "chrf-175": 0.4456712587313037,
        "chrf-52": 0.23257987989283851,
        "rougel-28": 0.625,
        "rougel-6": 0.5084745762711864,
        "rougel-75": 0.553191489361702,
        "rougel-64": 0.7679999999999999,
        "rougel-59": 0.9174311926605504,
        "rougel-36": 0.495049504950495,
        "rougel-26": 0.5,
        "rougel-168": 0.3818181818181819,
        "rougel-22": 0.7627118644067796,
        "rougel-183": 0.7194244604316546,
        "rougel-131": 0.6666666666666666,
        "rougel-8": 0.5360824742268042,
        "rougel-7": 0.7679999999999999,
        "rougel-23": 0.7218045112781953,
        "rougel-57": 0.5416666666666666,
        "rougel-61": 0.5573770491803278,
        "rougel-156": 0.4893617021276596,
        "rougel-190": 0.553191489361702,
        "rougel-175": 0.40707964601769914,
        "rougel-52": 0.18018018018018017,
        "meteor-28": 0.8121977532509603,
        "meteor-6": 0.5778853625007471,
        "meteor-75": 0.4609079359625288,
        "meteor-64": 0.7437163375224417,
        "meteor-59": 0.9518041321681304,
        "meteor-36": 0.3286776457508165,
        "meteor-26": 0.5908473996350364,
        "meteor-168": 0.3004292388602898,
        "meteor-22": 0.8030303030303031,
        "meteor-183": 0.895002864822166,
        "meteor-131": 0.6993268511593119,
        "meteor-8": 0.48128426398934626,
        "meteor-7": 0.7437163375224417,
        "meteor-23": 0.7331858407079647,
        "meteor-57": 0.45916207256873137,
        "meteor-61": 0.49694700717564727,
        "meteor-156": 0.403216419647707,
        "meteor-190": 0.4609079359625288,
        "meteor-175": 0.46941896024464835,
        "meteor-52": 0.11970534069981584,
        "ruby-28": 0.48888888888888893,
        "ruby-6": 0.34375,
        "ruby-75": 0.38888888888888884,
        "ruby-64": 0.676056338028169,
        "ruby-59": 0.8545454545454545,
        "ruby-36": 0.2777777777777778,
        "ruby-26": 0.29032258064516125,
        "ruby-168": 0.1071428571428571,
        "ruby-22": 0.6875,
        "ruby-183": 0.5882352941176471,
        "ruby-131": 0.5287356321839081,
        "ruby-8": 0.37037037037037035,
        "ruby-7": 0.676056338028169,
        "ruby-23": 0.6075949367088608,
        "ruby-57": 0.38888888888888884,
        "ruby-61": 0.4117647058823529,
        "ruby-156": 0.33333333333333337,
        "ruby-190": 0.38888888888888884,
        "ruby-175": 0.22033898305084743,
        "ruby-52": 0.08771929824561409,
        "codebertscore_f1-28": 0.8543964624404907,
        "codebertscore_f3-28": 0.886367678642273,
        "codebertscore_f1-6": 0.8517953157424927,
        "codebertscore_f3-6": 0.8718650341033936,
        "codebertscore_f1-75": 0.8497167825698853,
        "codebertscore_f3-75": 0.8494222164154053,
        "codebertscore_f1-64": 0.8939712643623352,
        "codebertscore_f3-64": 0.9280036687850952,
        "codebertscore_f1-59": 0.951928436756134,
        "codebertscore_f3-59": 0.9530250430107117,
        "codebertscore_f1-36": 0.8113352060317993,
        "codebertscore_f3-36": 0.85052090883255,
        "codebertscore_f1-26": 0.856831431388855,
        "codebertscore_f3-26": 0.8861185908317566,
        "codebertscore_f1-168": 0.7813115119934082,
        "codebertscore_f3-168": 0.7959393262863159,
        "codebertscore_f1-22": 0.8696102499961853,
        "codebertscore_f3-22": 0.9057544469833374,
        "codebertscore_f1-183": 0.8838724493980408,
        "codebertscore_f3-183": 0.920053243637085,
        "codebertscore_f1-131": 0.8689500689506531,
        "codebertscore_f3-131": 0.9080216288566589,
        "codebertscore_f1-8": 0.8793542981147766,
        "codebertscore_f3-8": 0.8826643228530884,
        "codebertscore_f1-7": 0.9016381502151489,
        "codebertscore_f3-7": 0.932460367679596,
        "codebertscore_f1-23": 0.8681569695472717,
        "codebertscore_f3-23": 0.9082197546958923,
        "codebertscore_f1-57": 0.8342905640602112,
        "codebertscore_f3-57": 0.8426567912101746,
        "codebertscore_f1-61": 0.8393630385398865,
        "codebertscore_f3-61": 0.8644850254058838,
        "codebertscore_f1-156": 0.8371663093566895,
        "codebertscore_f3-156": 0.8377096056938171,
        "codebertscore_f1-190": 0.8369523286819458,
        "codebertscore_f3-190": 0.8353245854377747,
        "codebertscore_f1-175": 0.8049294948577881,
        "codebertscore_f3-175": 0.828449547290802,
        "codebertscore_f1-52": 0.7366679310798645,
        "codebertscore_f3-52": 0.7429907917976379,
        "codebertscore_s_f1-28": 0.8668044805526733,
        "codebertscore_s_f3-28": 0.9009882807731628,
        "codebertscore_s_f1-6": 0.8480930328369141,
        "codebertscore_s_f3-6": 0.8692617416381836,
        "codebertscore_s_f1-75": 0.8468950390815735,
        "codebertscore_s_f3-75": 0.8473402857780457,
        "codebertscore_s_f1-64": 0.8937891125679016,
        "codebertscore_s_f3-64": 0.9293388724327087,
        "codebertscore_s_f1-59": 0.9531676769256592,
        "codebertscore_s_f3-59": 0.9551188945770264,
        "codebertscore_s_f1-36": 0.8173860907554626,
        "codebertscore_s_f3-36": 0.858890950679779,
        "codebertscore_s_f1-26": 0.8593530058860779,
        "codebertscore_s_f3-26": 0.8901659846305847,
        "codebertscore_s_f1-168": 0.7763630747795105,
        "codebertscore_s_f3-168": 0.7948236465454102,
        "codebertscore_s_f1-22": 0.8740643858909607,
        "codebertscore_s_f3-22": 0.9112352728843689,
        "codebertscore_s_f1-183": 0.8858057856559753,
        "codebertscore_s_f3-183": 0.9237768650054932,
        "codebertscore_s_f1-131": 0.8738009929656982,
        "codebertscore_s_f3-131": 0.9173832535743713,
        "codebertscore_s_f1-8": 0.8776797652244568,
        "codebertscore_s_f3-8": 0.8811634182929993,
        "codebertscore_s_f1-7": 0.9004946351051331,
        "codebertscore_s_f3-7": 0.9326294660568237,
        "codebertscore_s_f1-23": 0.8719708323478699,
        "codebertscore_s_f3-23": 0.9147465825080872,
        "codebertscore_s_f1-57": 0.8316091895103455,
        "codebertscore_s_f3-57": 0.8408209085464478,
        "codebertscore_s_f1-61": 0.8369578123092651,
        "codebertscore_s_f3-61": 0.8619205355644226,
        "codebertscore_s_f1-156": 0.8376560211181641,
        "codebertscore_s_f3-156": 0.8376131653785706,
        "codebertscore_s_f1-190": 0.8343015313148499,
        "codebertscore_s_f3-190": 0.8362699151039124,
        "codebertscore_s_f1-175": 0.8022608160972595,
        "codebertscore_s_f3-175": 0.8291649222373962,
        "codebertscore_s_f1-52": 0.7339496612548828,
        "codebertscore_s_f3-52": 0.7411118149757385,
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-131": 4,
        "raw_gpt35_nsnr-131": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-52": 4,
        "raw_gpt35_nsnr-52": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-131": 4,
        "raw_gpt35_nswr-131": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-52": 4,
        "raw_gpt35_nswr-52": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n",
        "snippet": [
            "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n"
        ],
        "simplified": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "task_id": "36",
        "165": "long count7=0;\n    for(long i=0;i<n;i++){\n        if(i%11==0 || i%13==0){\n            std::string number = std::to_string(i);\n            for(long j=0;j<number.length();j++){\n                if(number[j]=='7'){\n                    count7++;\n                }\n            }\n        }\n    }\n    return count7;",
        "grade-165": {
            "execution": 1
        },
        "28": "// Write your code here.\n    long count = 0;\n    long i = 13;\n    while(i < n){\n        if(i % 11 == 0 || i % 13 == 0){\n            if(i % 10 == 7) count++;\n            if(i % 100 == 7) count++;\n            if(i % 1000 == 7) count++;\n            if(i % 10000 == 7) count++;\n            if(i % 100000 == 7) count++;\n            if(i % 1000000 == 7) count++;\n            if(i % 10000000 == 7) count++;\n            if(i % 100000000 == 7) count++;\n            if(i % 1000000000 == 7) count++;\n        }\n        i++;\n    }\n    return count;",
        "grade-28": {
            "execution": 0
        },
        "6": "long count = 0;\n\tfor (long i = 7; i < n; i++) {\n\t\tif (i % 7 == 0 && i % 11 == 0 && i % 13 == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-6": {
            "execution": 0
        },
        "191": "return (n%77==0)?2:(n%13==0)?1:0;",
        "grade-191": {
            "execution": 0
        },
        "70": "long count = 0;\n    // counting the number of 7s in all numbers below n that are divisible by 11 or 13\n    for (long i = 1; i < n; i++){\n        if (i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n            while (temp > 0){\n                if (temp % 10 == 7){\n                    count++;\n                }\n                temp /= 10;\n            }\n        }\n    }\n    return count;",
        "grade-70": {
            "execution": 1
        },
        "62": "int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string res = std::to_string(i);\n            for (int j = 0; j < res.length(); j++) {\n                if (res[j] == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 1
        },
        "57": "int count = 0;\n\t// n = n - 1;\n\tfor (int i = 1; i < n; i++) {\n\t\t// cout << i << endl;\n\t\t// cout << \"count = \" << count << endl;\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tstring num = to_string(i);\n\t\t\t// cout << \"num = \" << num << endl;\n\t\t\tfor (int j = 0; j < num.length(); j++) {\n\t\t\t\tif (num[j] == '7') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(n > 0);\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find(\"7\") != string::npos) {\n            count++;\n        }\n    }\n    return count;",
        "grade-35": {
            "execution": 0
        },
        "190": "// Write your code here\n\t// To print results to the standard output you can use printf()\n\t// Example: printf(\"%s\", \"Hello world!\");",
        "grade-190": {
            "execution": 0
        },
        "26": "long cnt = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string si = std::to_string(i);\n            for (auto it = si.begin(); it != si.end(); it++) {\n                if (*it == '7') {\n                    cnt++;\n                }\n            }\n        }\n    }\n    return cnt;",
        "grade-26": {
            "execution": 1
        },
        "175": "long digit_counter = 0;\n    for (long i = 1; i < n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            long number = i;\n            while (number > 0) {\n                long digit = number % 10;\n                if (digit == 7) {\n                    digit_counter++;\n                }\n                number /= 10;\n            }\n        }\n    }\n    return digit_counter;",
        "grade-175": {
            "execution": 1
        },
        "140": "long count = 0;\n    int t = 7;\n    while(t < n){\n        if(t % 11 == 0 || t % 13 == 0){\n            std::string s = std::to_string(t);\n            for(int i = 0; i < s.length(); i++){\n                if(s[i] == '7'){\n                    count++;\n                }\n            }\n        }\n        t++;\n    }\n    return count;",
        "grade-140": {
            "execution": 1
        },
        "22": "long count=0;\n    for(long i=1;i<n;i++){\n        if(i%11==0){\n            long copy=i;\n            while(copy!=0){\n                if(copy%10==7){\n                    count++;\n                }\n                copy=copy/10;\n            }\n        }\n        if(i%13==0){\n            long copy=i;\n            while(copy!=0){\n                if(copy%10==7){\n                    count++;\n                }\n                copy=copy/10;\n            }\n        }\n    }\n    return count;",
        "grade-22": {
            "execution": 0
        },
        "152": "long count = 0;\n    long rem = 0;\n    for(long i = 0; i < n; i++) {\n        rem = i % 11;\n        if(rem == 0) {\n            if(i % 13 == 0) {\n                count += 1;\n            }\n            long temp = i;\n            while(temp != 0) {\n                rem = temp % 10;\n                if(rem == 7) {\n                    count += 1;\n                }\n                temp = temp / 10;\n            }\n        }\n    }\n    return count;",
        "grade-152": {
            "execution": 0
        },
        "108": "/* Enter your code here. */\n    assert(n > 0);\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        std::string str = std::to_string(i);\n        if(i % 11 == 0 || i % 13 == 0){\n            for(int j = 0; j < str.length(); j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-108": {
            "execution": 1
        },
        "8": "// Check the number of 7s in the numbers divisible by 11 or 13\n  long count = 0;\n  // Iterate through all the numbers less than n\n  // If the number is divisible by 11 or 13, check the number of 7s in it\n  for (long i = 1; i < n; i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n      for (int j = 0; j < s.length(); j++) {\n        if (s[j] == '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(n >= 1);\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n            for (char c : str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "assert(n > 0);\n    int digit;\n    int counter = 0;\n    for (int i = 7; i < n; i += 7) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int temp = i;\n            while (temp > 0) {\n                digit = temp % 10;\n                if (digit == 7) {\n                    counter++;\n                }\n                temp /= 10;\n            }\n        }\n    }\n    return counter;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n    for (long i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            std::string i_str = std::to_string(i);\n            if(i_str.find(\"7\") != std::string::npos){\n                count += 1;\n            }\n        }\n    }\n    return count;",
        "grade-55": {
            "execution": 0
        },
        "59": "long count=0;\n    for(long i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            std::string str=std::to_string(i);\n            if(str.find(\"7\")!=std::string::npos){\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        },
        "bleu-165": 0.35107334781888605,
        "bleu-28": 0.19797212723886015,
        "bleu-6": 0.432142152474596,
        "bleu-191": 0.040479688586965885,
        "bleu-70": 0.45862199593086217,
        "bleu-62": 0.42961744203817026,
        "bleu-57": 0.2795764247263664,
        "bleu-35": 0.45251286369100213,
        "bleu-190": 0.006095427854497163,
        "bleu-26": 0.322320098948943,
        "bleu-175": 0.45137536558391217,
        "bleu-140": 0.3454258076949344,
        "bleu-22": 0.39041903386305554,
        "bleu-152": 0.45216517346886986,
        "bleu-108": 0.37776000717137564,
        "bleu-8": 0.2591400636140813,
        "bleu-7": 0.3975112003201828,
        "bleu-23": 0.456816915184833,
        "bleu-55": 0.43181570762658095,
        "bleu-59": 0.41623300380719214,
        "codebleu-165": 0.5817991460073318,
        "codebleu-28": 0.6328919482210262,
        "codebleu-6": 0.4873539122566858,
        "codebleu-191": 0.16856763446481465,
        "codebleu-70": 0.7184260810761308,
        "codebleu-62": 0.6022506048249459,
        "codebleu-57": 0.612236042737849,
        "codebleu-35": 0.5607347841676907,
        "codebleu-190": 0.14685033194108715,
        "codebleu-26": 0.5685559243195413,
        "codebleu-175": 0.7043924568012546,
        "codebleu-140": 0.6209557081995705,
        "codebleu-22": 0.7152866524791859,
        "codebleu-152": 0.709716891193938,
        "codebleu-108": 0.6485495559415587,
        "codebleu-8": 0.6240780589398716,
        "codebleu-7": 0.5784587158025041,
        "codebleu-23": 0.692119955392435,
        "codebleu-55": 0.5775551642606376,
        "codebleu-59": 0.5729225476938941,
        "chrf-165": 0.4345708457298899,
        "chrf-28": 0.3968768256928128,
        "chrf-6": 0.47295495612921346,
        "chrf-191": 0.11728404501011468,
        "chrf-70": 0.5227244453481235,
        "chrf-62": 0.5483658712853402,
        "chrf-57": 0.45930173687147774,
        "chrf-35": 0.4620883143910023,
        "chrf-190": 0.09844617122577846,
        "chrf-26": 0.39166144713848733,
        "chrf-175": 0.4554175986195471,
        "chrf-140": 0.4776923312683894,
        "chrf-22": 0.5309179225204713,
        "chrf-152": 0.5471139900964451,
        "chrf-108": 0.5237345755178424,
        "chrf-8": 0.3921598975568027,
        "chrf-7": 0.46893746360848654,
        "chrf-23": 0.5640343081488617,
        "chrf-55": 0.476177531770657,
        "chrf-59": 0.46002774091352394,
        "rougel-165": 0.6046511627906977,
        "rougel-28": 0.411522633744856,
        "rougel-6": 0.6412213740458016,
        "rougel-191": 0.28,
        "rougel-70": 0.7134502923976608,
        "rougel-62": 0.6627906976744187,
        "rougel-57": 0.5185185185185186,
        "rougel-35": 0.596026490066225,
        "rougel-190": 0.10526315789473685,
        "rougel-26": 0.5714285714285715,
        "rougel-175": 0.6956521739130435,
        "rougel-140": 0.5116279069767442,
        "rougel-22": 0.6354166666666666,
        "rougel-152": 0.6818181818181819,
        "rougel-108": 0.5957446808510639,
        "rougel-8": 0.4999999999999999,
        "rougel-7": 0.6424242424242425,
        "rougel-23": 0.6946107784431138,
        "rougel-55": 0.625,
        "rougel-59": 0.6037735849056605,
        "meteor-165": 0.41318317078730593,
        "meteor-28": 0.46646072228812446,
        "meteor-6": 0.46663626690986476,
        "meteor-191": 0.148831569664903,
        "meteor-70": 0.7588362151666551,
        "meteor-62": 0.5005670797169963,
        "meteor-57": 0.5422184305821094,
        "meteor-35": 0.44360456379745716,
        "meteor-190": 0.049019607843137254,
        "meteor-26": 0.515329245534524,
        "meteor-175": 0.7389249585954327,
        "meteor-140": 0.46466356668905134,
        "meteor-22": 0.7019051461359155,
        "meteor-152": 0.7400262307082291,
        "meteor-108": 0.5335112988605857,
        "meteor-8": 0.4583583635012726,
        "meteor-7": 0.5153062414026254,
        "meteor-23": 0.775470402629163,
        "meteor-55": 0.5384210526315789,
        "meteor-59": 0.4915680331676037,
        "ruby-165": 0.4742268041237113,
        "ruby-28": 0.2678571428571429,
        "ruby-6": 0.52,
        "ruby-191": 0.18666666666666665,
        "ruby-70": 0.6041666666666667,
        "ruby-62": 0.5257731958762887,
        "ruby-57": 0.35460992907801414,
        "ruby-35": 0.4342105263157895,
        "ruby-190": 0.06666666666666665,
        "ruby-26": 0.44999999999999996,
        "ruby-175": 0.6162790697674418,
        "ruby-140": 0.3608247422680413,
        "ruby-22": 0.5042735042735043,
        "ruby-152": 0.5841584158415842,
        "ruby-108": 0.4424778761061947,
        "ruby-8": 0.34042553191489366,
        "ruby-7": 0.5,
        "ruby-23": 0.5978260869565217,
        "ruby-55": 0.5058823529411764,
        "ruby-59": 0.5119047619047619,
        "codebertscore_f1-165": 0.8534132242202759,
        "codebertscore_f3-165": 0.8660957217216492,
        "codebertscore_f1-28": 0.8041752576828003,
        "codebertscore_f3-28": 0.8329640030860901,
        "codebertscore_f1-6": 0.8773708343505859,
        "codebertscore_f3-6": 0.8554688096046448,
        "codebertscore_f1-191": 0.7503162026405334,
        "codebertscore_f3-191": 0.7092179656028748,
        "codebertscore_f1-70": 0.8463835120201111,
        "codebertscore_f3-70": 0.8818381428718567,
        "codebertscore_f1-62": 0.8758863806724548,
        "codebertscore_f3-62": 0.8843888640403748,
        "codebertscore_f1-57": 0.8312129378318787,
        "codebertscore_f3-57": 0.866083562374115,
        "codebertscore_f1-35": 0.8473535776138306,
        "codebertscore_f3-35": 0.8584112524986267,
        "codebertscore_f1-190": 0.5761848092079163,
        "codebertscore_f3-190": 0.5717621445655823,
        "codebertscore_f1-26": 0.8414232134819031,
        "codebertscore_f3-26": 0.8581567406654358,
        "codebertscore_f1-175": 0.8707863092422485,
        "codebertscore_f3-175": 0.8805581331253052,
        "codebertscore_f1-140": 0.8381977677345276,
        "codebertscore_f3-140": 0.8478389382362366,
        "codebertscore_f1-22": 0.8506022095680237,
        "codebertscore_f3-22": 0.8608267903327942,
        "codebertscore_f1-152": 0.8631252646446228,
        "codebertscore_f3-152": 0.869868814945221,
        "codebertscore_f1-108": 0.8262927532196045,
        "codebertscore_f3-108": 0.852877140045166,
        "codebertscore_f1-8": 0.7914100289344788,
        "codebertscore_f3-8": 0.842091977596283,
        "codebertscore_f1-7": 0.8454959988594055,
        "codebertscore_f3-7": 0.8558829426765442,
        "codebertscore_f1-23": 0.8773091435432434,
        "codebertscore_f3-23": 0.881521463394165,
        "codebertscore_f1-55": 0.850189745426178,
        "codebertscore_f3-55": 0.8699094653129578,
        "codebertscore_f1-59": 0.8531773090362549,
        "codebertscore_f3-59": 0.8703481554985046,
        "codebertscore_s_f1-165": 0.851472020149231,
        "codebertscore_s_f3-165": 0.8651540279388428,
        "codebertscore_s_f1-28": 0.815273106098175,
        "codebertscore_s_f3-28": 0.8434025645256042,
        "codebertscore_s_f1-6": 0.8737455010414124,
        "codebertscore_s_f3-6": 0.851008951663971,
        "codebertscore_s_f1-191": 0.7455190420150757,
        "codebertscore_s_f3-191": 0.6983274817466736,
        "codebertscore_s_f1-70": 0.8486239314079285,
        "codebertscore_s_f3-70": 0.8844525814056396,
        "codebertscore_s_f1-62": 0.87616366147995,
        "codebertscore_s_f3-62": 0.8861544728279114,
        "codebertscore_s_f1-57": 0.832775354385376,
        "codebertscore_s_f3-57": 0.8694379329681396,
        "codebertscore_s_f1-35": 0.8518180251121521,
        "codebertscore_s_f3-35": 0.8647868633270264,
        "codebertscore_s_f1-190": 0.5574266910552979,
        "codebertscore_s_f3-190": 0.5480144023895264,
        "codebertscore_s_f1-26": 0.8381763100624084,
        "codebertscore_s_f3-26": 0.8556303381919861,
        "codebertscore_s_f1-175": 0.8715458512306213,
        "codebertscore_s_f3-175": 0.8810413479804993,
        "codebertscore_s_f1-140": 0.8391664028167725,
        "codebertscore_s_f3-140": 0.8508481979370117,
        "codebertscore_s_f1-22": 0.8583486080169678,
        "codebertscore_s_f3-22": 0.867118775844574,
        "codebertscore_s_f1-152": 0.8688071966171265,
        "codebertscore_s_f3-152": 0.8748728036880493,
        "codebertscore_s_f1-108": 0.8336498141288757,
        "codebertscore_s_f3-108": 0.86460942029953,
        "codebertscore_s_f1-8": 0.7939114570617676,
        "codebertscore_s_f3-8": 0.8475179672241211,
        "codebertscore_s_f1-7": 0.8521798253059387,
        "codebertscore_s_f3-7": 0.8641566038131714,
        "codebertscore_s_f1-23": 0.8842988014221191,
        "codebertscore_s_f3-23": 0.891535758972168,
        "codebertscore_s_f1-55": 0.8516186475753784,
        "codebertscore_s_f3-55": 0.8709214329719543,
        "codebertscore_s_f1-59": 0.8541834354400635,
        "codebertscore_s_f3-59": 0.8710852265357971,
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 1,
        "raw_gpt35_nsnr-6": "1",
        "gpt35_nsnr-191": 2,
        "raw_gpt35_nsnr-191": "2",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 1,
        "raw_gpt35_nswr-6": "1",
        "gpt35_nswr-191": 0,
        "raw_gpt35_nswr-191": "Score: 0",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\nstd::string string_xor(std::string a, std::string b) {\n",
        "snippet": [
            "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n"
        ],
        "simplified": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "task_id": "11",
        "172": "std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i])\n            result += '0';\n        else\n            result += '1';\n    }\n    return result;",
        "grade-172": {
            "execution": 1
        },
        "28": "std::string result = \"\";\n    int length = a.length();\n    assert(length == b.length());\n    for (int i = 0; i < length; i++) {\n        if (a[i] == b[i]) {\n            result.append(\"0\");\n        } else {\n            result.append(\"1\");\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string result=\"\";\n    int length_a = a.length();\n    int length_b = b.length();\n    int length;\n    char temp;\n    assert(length_a == length_b);\n\n    for(int i=0; i<length_a; i++)\n    {\n        int temp_a = a[i] - '0';\n        int temp_b = b[i] - '0';\n        if(temp_a==1 && temp_b==1)\n        {\n            temp = '0';\n        }\n        else if(temp_a==0 && temp_b==0)\n        {\n            temp = '0';\n        }\n        else\n        {\n            temp = '1';\n        }\n        result.push_back(temp);\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "73": "int aSize = a.size();\n    int bSize = b.size();\n    int minSize = (aSize < bSize) ? aSize : bSize;\n    std::string result = \"\";\n    for (int i = 0; i < minSize; i++) {\n        result += (a[i] ^ b[i]) + '0';\n    }\n    return result;",
        "grade-73": {
            "execution": 1
        },
        "63": "// Assert that the two strings are of the same length.\n    assert(a.length() == b.length());\n    std::string result;\n    for (int i = 0; i < a.length(); i++) {\n        // If one of the bits is 1 and the other is 0, add a 1 to the result.\n        if ((a[i] == '1' && b[i] == '0') || (a[i] == '0' && b[i] == '1')) {\n            result += '1';\n        }\n        // Otherwise, add a 0 to the result.\n        else {\n            result += '0';\n        }\n    }\n    return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "std::string result;\n  for (int i = 0; i < a.size(); i++) {\n    result += (a[i] != b[i]) ? '1' : '0';\n  }\n  return result;",
        "grade-58": {
            "execution": 1
        },
        "35": "// your code here.\n\t\n\treturn a;",
        "grade-35": {
            "execution": 0
        },
        "26": "std::string res;\n\tstd::transform(a.begin(), a.end(), b.begin(), std::back_inserter(res), [](char a, char b) {\n\t\treturn (a == b) ? '0' : '1';\n\t});\n\treturn res;",
        "grade-26": {
            "execution": 1
        },
        "185": "assert(a.size() == b.size());\n\tstd::stringstream res;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tres << (a[i] ^ b[i]);\n\t}\n\treturn res.str();",
        "grade-185": {
            "execution": 1
        },
        "148": "// assert(a.length() == b.length());\n\tstd::string output;\n\t// for (int i = 0; i < a.length(); i++) {\n\t// \tif (a[i] == b[i]) {\n\t// \t\toutput += '0';\n\t// \t} else {\n\t// \t\toutput += '1';\n\t// \t}\n\t// }\n\tint x = std::stoi(a, nullptr, 2);\n\tint y = std::stoi(b, nullptr, 2);\n\tint z = x ^ y;\n\toutput = std::bitset<32>(z).to_string();\n\toutput = output.substr(output.find('1'));\n\treturn output;",
        "grade-148": {
            "execution": 0
        },
        "22": "std::string result=\"\";\n  assert(a.size()==b.size());\n  int n=a.size();\n  for(int i=0;i<n;i++){\n    if(a[i]==b[i]){\n      result+='0';\n    }\n    else{\n      result+='1';\n    }\n  }\n  return result;",
        "grade-22": {
            "execution": 1
        },
        "160": "assert(a.size() == b.size());\n\tstd::string c = \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tc += (a[i] == b[i]) ? '0' : '1';\n\t}\n\treturn c;",
        "grade-160": {
            "execution": 1
        },
        "116": "assert(a.size() == b.size());\n    std::string res;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            res += '0';\n        } else {\n            res += '1';\n        }\n    }\n    return res;",
        "grade-116": {
            "execution": 1
        },
        "8": "assert(a.size() == b.size());\n  std::string result;\n  result.reserve(a.size());\n  for (std::size_t i = 0; i < a.size(); ++i) {\n    result.push_back(a[i] == b[i] ? '0' : '1');\n  }\n  return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(a.size() == b.size());\n  std::string answer;\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      answer += '0';\n    } else {\n      answer += '1';\n    }\n  }\n  return answer;",
        "grade-7": {
            "execution": 1
        },
        "23": "assert(a.size() == b.size());\n\tstd::string result;\n\tint len = a.size();\n\tfor (int i = 0; i < len; i++) {\n\t\tresult += (a[i] == b[i]) ? '0' : '1';\n\t}\n\treturn result;",
        "grade-23": {
            "execution": 1
        },
        "56": "int len1 = a.length();\n\tint len2 = b.length();\n\tif (len1 > len2) {\n\t\tstd::string temp;\n\t\tfor (int i = 0; i < len1 - len2; i++) {\n\t\t\ttemp += '0';\n\t\t}\n\t\tb = temp + b;\n\t}\n\telse if (len2 > len1) {\n\t\tstd::string temp;\n\t\tfor (int i = 0; i < len2 - len1; i++) {\n\t\t\ttemp += '0';\n\t\t}\n\t\ta = temp + a;\n\t}\n\tstd::string answer;\n\tfor (int i = 0; i < a.length(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tanswer += '0';\n\t\t}\n\t\telse if (a[i] != b[i]) {\n\t\t\tanswer += '1';\n\t\t}\n\t}\n\treturn answer;",
        "grade-56": {
            "execution": 1
        },
        "60": "assert(a.size() == b.size());\n  std::string ans;\n  for (size_t i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      ans += '0';\n    } else {\n      ans += '1';\n    }\n  }\n  return ans;",
        "grade-60": {
            "execution": 1
        },
        "138": "std::stringstream ss;\n  for (size_t i = 0; i < a.size(); ++i) {\n    if (a[i] == b[i]) {\n      ss << '0';\n    } else {\n      ss << '1';\n    }\n  }\n  return ss.str();",
        "grade-138": {
            "execution": 1
        },
        "163": "std::string result = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;",
        "grade-163": {
            "execution": 1
        },
        "bleu-172": 0.21862085475390775,
        "bleu-28": 0.3618539851169666,
        "bleu-6": 0.31855595421293464,
        "bleu-73": 0.23684219637564824,
        "bleu-63": 0.3532995261496977,
        "bleu-58": 0.14566755256121847,
        "bleu-35": 1.903295311386366e-07,
        "bleu-26": 0.061376710215358864,
        "bleu-185": 0.17690258498498695,
        "bleu-148": 0.3467329941004783,
        "bleu-22": 0.3776139285925366,
        "bleu-160": 0.26775891174038996,
        "bleu-116": 0.3509885705570816,
        "bleu-8": 0.20026112404021273,
        "bleu-7": 0.3509885705570816,
        "bleu-23": 0.2418089820110635,
        "bleu-56": 0.36960136018631035,
        "bleu-60": 0.33025057898184085,
        "bleu-138": 0.220633486083342,
        "bleu-163": 0.2968985867813246,
        "codebleu-172": 0.27165529815898376,
        "codebleu-28": 0.4612466161733644,
        "codebleu-6": 0.5282945792045441,
        "codebleu-73": 0.3672050824206376,
        "codebleu-63": 0.5920011125636092,
        "codebleu-58": 0.23172177232211807,
        "codebleu-35": 0.03013341854074307,
        "codebleu-26": 0.26734318834444964,
        "codebleu-185": 0.33057933698102016,
        "codebleu-148": 0.5980075595590567,
        "codebleu-22": 0.45075334957186197,
        "codebleu-160": 0.3550674450395028,
        "codebleu-116": 0.40860640508726737,
        "codebleu-8": 0.40309360511867404,
        "codebleu-7": 0.40860640508726737,
        "codebleu-23": 0.3649300223144586,
        "codebleu-56": 0.6325928149045752,
        "codebleu-60": 0.4044239477185476,
        "codebleu-138": 0.32324832992917457,
        "codebleu-163": 0.32856824074341645,
        "chrf-172": 0.28664265651681503,
        "chrf-28": 0.4113878457551092,
        "chrf-6": 0.3740835588554031,
        "chrf-73": 0.23470632169121636,
        "chrf-63": 0.40205815747264895,
        "chrf-58": 0.20558802745497146,
        "chrf-35": 0.03416416696923529,
        "chrf-26": 0.13568568095110237,
        "chrf-185": 0.20350621663946802,
        "chrf-148": 0.49757284537431723,
        "chrf-22": 0.3509959905744878,
        "chrf-160": 0.2508013824541856,
        "chrf-116": 0.3240967898762505,
        "chrf-8": 0.20954103593387818,
        "chrf-7": 0.3277941958090313,
        "chrf-23": 0.2514401670558279,
        "chrf-56": 0.44356561399894856,
        "chrf-60": 0.3053088742292758,
        "chrf-138": 0.24523227960183952,
        "chrf-163": 0.34275298978897983,
        "rougel-172": 0.5494505494505495,
        "rougel-28": 0.5238095238095237,
        "rougel-6": 0.4402985074626866,
        "rougel-73": 0.3791469194312796,
        "rougel-63": 0.4225352112676056,
        "rougel-58": 0.449438202247191,
        "rougel-35": 0.04511278195488722,
        "rougel-26": 0.3730569948186528,
        "rougel-185": 0.4126984126984126,
        "rougel-148": 0.4722222222222222,
        "rougel-22": 0.5333333333333333,
        "rougel-160": 0.467005076142132,
        "rougel-116": 0.5247524752475248,
        "rougel-8": 0.4326923076923077,
        "rougel-7": 0.5247524752475248,
        "rougel-23": 0.4120603015075377,
        "rougel-56": 0.4516129032258065,
        "rougel-60": 0.5247524752475248,
        "rougel-138": 0.505263157894737,
        "rougel-163": 0.5925925925925926,
        "meteor-172": 0.32483986371379897,
        "meteor-28": 0.44771454982436676,
        "meteor-6": 0.45666170634920644,
        "meteor-73": 0.32549566077868114,
        "meteor-63": 0.4912350029116597,
        "meteor-58": 0.24512829342374795,
        "meteor-35": 0.017777777777777778,
        "meteor-26": 0.25187529301453354,
        "meteor-185": 0.2777473332698696,
        "meteor-148": 0.480404324001736,
        "meteor-22": 0.46549940556890784,
        "meteor-160": 0.40303381191333526,
        "meteor-116": 0.4373943303806477,
        "meteor-8": 0.3687085327958344,
        "meteor-7": 0.4373943303806477,
        "meteor-23": 0.39026961470286403,
        "meteor-56": 0.6056889591347068,
        "meteor-60": 0.43259609956731926,
        "meteor-138": 0.33327994912252606,
        "meteor-163": 0.36389885091980356,
        "ruby-172": 0.3951612903225806,
        "ruby-28": 0.3709677419354839,
        "ruby-6": 0.29166666666666663,
        "ruby-73": 0.25806451612903225,
        "ruby-63": 0.29374999999999996,
        "ruby-58": 0.3145161290322581,
        "ruby-35": 0.024193548387096753,
        "ruby-26": 0.25806451612903225,
        "ruby-185": 0.2338709677419355,
        "ruby-148": 0.29268292682926833,
        "ruby-22": 0.3870967741935484,
        "ruby-160": 0.27419354838709675,
        "ruby-116": 0.3709677419354839,
        "ruby-8": 0.282258064516129,
        "ruby-7": 0.3709677419354839,
        "ruby-23": 0.2661290322580645,
        "ruby-56": 0.29032258064516125,
        "ruby-60": 0.3709677419354839,
        "ruby-138": 0.3790322580645161,
        "ruby-163": 0.4193548387096774,
        "codebertscore_f1-172": 0.8511584401130676,
        "codebertscore_f3-172": 0.8331764340400696,
        "codebertscore_f1-28": 0.8560633659362793,
        "codebertscore_f3-28": 0.8463518619537354,
        "codebertscore_f1-6": 0.8358097076416016,
        "codebertscore_f3-6": 0.8519284129142761,
        "codebertscore_f1-73": 0.7970160245895386,
        "codebertscore_f3-73": 0.7880476713180542,
        "codebertscore_f1-63": 0.8131437301635742,
        "codebertscore_f3-63": 0.8674109578132629,
        "codebertscore_f1-58": 0.8053337335586548,
        "codebertscore_f3-58": 0.7729090452194214,
        "codebertscore_f1-35": 0.5816365480422974,
        "codebertscore_f3-35": 0.5474289655685425,
        "codebertscore_f1-26": 0.6852839589118958,
        "codebertscore_f3-26": 0.6618766188621521,
        "codebertscore_f1-185": 0.7654142379760742,
        "codebertscore_f3-185": 0.7352617383003235,
        "codebertscore_f1-148": 0.7991989254951477,
        "codebertscore_f3-148": 0.8434315323829651,
        "codebertscore_f1-22": 0.8555232286453247,
        "codebertscore_f3-22": 0.8419055938720703,
        "codebertscore_f1-160": 0.8059715032577515,
        "codebertscore_f3-160": 0.7802008986473083,
        "codebertscore_f1-116": 0.8492364883422852,
        "codebertscore_f3-116": 0.8384559750556946,
        "codebertscore_f1-8": 0.782354474067688,
        "codebertscore_f3-8": 0.7704349756240845,
        "codebertscore_f1-7": 0.8440142869949341,
        "codebertscore_f3-7": 0.8319113850593567,
        "codebertscore_f1-23": 0.8093218207359314,
        "codebertscore_f3-23": 0.7859356999397278,
        "codebertscore_f1-56": 0.8228017687797546,
        "codebertscore_f3-56": 0.8485133051872253,
        "codebertscore_f1-60": 0.8314560055732727,
        "codebertscore_f3-60": 0.8234434723854065,
        "codebertscore_f1-138": 0.7985790371894836,
        "codebertscore_f3-138": 0.7856991291046143,
        "codebertscore_f1-163": 0.8482617735862732,
        "codebertscore_f3-163": 0.8289192914962769,
        "codebertscore_s_f1-172": 0.8645808696746826,
        "codebertscore_s_f3-172": 0.8489704132080078,
        "codebertscore_s_f1-28": 0.863463282585144,
        "codebertscore_s_f3-28": 0.8558180332183838,
        "codebertscore_s_f1-6": 0.8410375118255615,
        "codebertscore_s_f3-6": 0.8569409847259521,
        "codebertscore_s_f1-73": 0.813746452331543,
        "codebertscore_s_f3-73": 0.8044910430908203,
        "codebertscore_s_f1-63": 0.8243334293365479,
        "codebertscore_s_f3-63": 0.8761098980903625,
        "codebertscore_s_f1-58": 0.8153641223907471,
        "codebertscore_s_f3-58": 0.7850305438041687,
        "codebertscore_s_f1-35": 0.5730596780776978,
        "codebertscore_s_f3-35": 0.5434573888778687,
        "codebertscore_s_f1-26": 0.6976298093795776,
        "codebertscore_s_f3-26": 0.6759622097015381,
        "codebertscore_s_f1-185": 0.7775800824165344,
        "codebertscore_s_f3-185": 0.7480248808860779,
        "codebertscore_s_f1-148": 0.8084128499031067,
        "codebertscore_s_f3-148": 0.8537310361862183,
        "codebertscore_s_f1-22": 0.8665305376052856,
        "codebertscore_s_f3-22": 0.8569387197494507,
        "codebertscore_s_f1-160": 0.8191589713096619,
        "codebertscore_s_f3-160": 0.7935402393341064,
        "codebertscore_s_f1-116": 0.8628363609313965,
        "codebertscore_s_f3-116": 0.8548652529716492,
        "codebertscore_s_f1-8": 0.7939682006835938,
        "codebertscore_s_f3-8": 0.7830635905265808,
        "codebertscore_s_f1-7": 0.85761958360672,
        "codebertscore_s_f3-7": 0.8470153212547302,
        "codebertscore_s_f1-23": 0.8239166140556335,
        "codebertscore_s_f3-23": 0.8002297282218933,
        "codebertscore_s_f1-56": 0.8350244164466858,
        "codebertscore_s_f3-56": 0.856534481048584,
        "codebertscore_s_f1-60": 0.8448742628097534,
        "codebertscore_s_f3-60": 0.8381122946739197,
        "codebertscore_s_f1-138": 0.8098331689834595,
        "codebertscore_s_f3-138": 0.798531174659729,
        "codebertscore_s_f1-163": 0.8602644205093384,
        "codebertscore_s_f3-163": 0.8438539505004883,
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-148": 3,
        "raw_gpt35_nsnr-148": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-185": 4,
        "raw_gpt35_nswr-185": "4",
        "gpt35_nswr-148": 3,
        "raw_gpt35_nswr-148": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-160": 4,
        "raw_gpt35_nswr-160": "4",
        "gpt35_nswr-116": 4,
        "raw_gpt35_nswr-116": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-138": 4,
        "raw_gpt35_nswr-138": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nstd::vector<long> factorize(long n) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n"
        ],
        "simplified": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
        "task_id": "25",
        "172": "assert(n > 0);\n  std::vector<long> factors;\n  for (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\n  }\n  if (n > 1)\n    factors.push_back(n);\n  return factors;",
        "grade-172": {
            "execution": 1
        },
        "28": "std::vector<long> res;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            res.push_back(i);\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> res;\n    if (n == 1 || n == 0) {\n        res.push_back(n);\n        return res;\n    }\n    if (n == 2) {\n        res.push_back(2);\n        return res;\n    }\n    long num = n;\n    while (num % 2 == 0) {\n        res.push_back(2);\n        num /= 2;\n    }\n    for (long i = 3; i * i <= num; i += 2) {\n        while (num % i == 0) {\n            res.push_back(i);\n            num /= i;\n        }\n    }\n    if (num > 2) {\n        res.push_back(num);\n    }\n    return res;",
        "grade-6": {
            "execution": 1
        },
        "70": "std::vector<long> res;\n    while(n>1){\n        int i=2;\n        while(n%i!=0){\n            i++;\n        }\n        res.push_back(i);\n        n/=i;\n    }\n    return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<long> res;\n    while(n%2==0){\n        res.push_back(2);\n        n/=2;\n    }\n    for(long i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            res.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>2)\n        res.push_back(n);\n    return res;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Write your code here\n    std::vector<long> res;\n    while(n % 2 == 0) {\n        res.push_back(2);\n        n /= 2;\n    }\n    for(long i = 3; i <= n; i += 2) {\n        while(n % i == 0) {\n            res.push_back(i);\n            n /= i;\n        }\n    }\n    return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<long> factors;\n    if (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    // i += 2 to skip all the even numbers\n    for (long i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<long> res;\n    while (n % 2 == 0) {\n        res.push_back(2);\n        n /= 2;\n    }\n    for (long i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2)\n        res.push_back(n);\n    return res;",
        "grade-26": {
            "execution": 1
        },
        "184": "std::vector<long> ret_v;\n    if (n<=1) {\n        ret_v.push_back(n);\n        return ret_v;\n    }\n    else {\n        for (long i=2; i<=n; i++) {\n            while (n%i==0) {\n                ret_v.push_back(i);\n                n = n/i;\n            }\n        }\n        return ret_v;\n    }",
        "grade-184": {
            "execution": 1
        },
        "143": "if (n == 1) {\n    return {};\n  }\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      auto r = factorize(n / i);\n      r.push_back(i);\n      return r;\n    }\n  }\n  return {n};",
        "grade-143": {
            "execution": 0
        },
        "22": "std::vector<long> list;\n    int temp = n;\n    while(n%2==0){\n        list.push_back(2);\n        n = n/2;\n    }\n    for(int i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            list.push_back(i);\n            n = n/i;\n        }\n    }\n    if(n>2){\n        list.push_back(n);\n    }\n    return list;",
        "grade-22": {
            "execution": 1
        },
        "158": "std::vector<long> result;\n\tfor (long d = 2; d * d <= n; ++d) {\n\t\tint p = 0;\n\t\twhile (n % d == 0) {\n\t\t\t++p;\n\t\t\tn /= d;\n\t\t}\n\t\tfor (int i = 0; i < p; ++i)\n\t\t\tresult.push_back(d);\n\t}\n\tif (n > 1)\n\t\tresult.push_back(n);\n\treturn result;",
        "grade-158": {
            "execution": 1
        },
        "109": "std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n        }\n    }\n    return result;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(n>0);\n    std::vector<long> result;\n    while(n%2==0){\n        result.push_back(2);\n        n=n/2;\n    }\n    for(long i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            result.push_back(i);\n            n=n/i;\n        }\n    }\n    if(n>2){\n        result.push_back(n);\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> factors;\n    factors.push_back(1);\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            factors.push_back(i);\n            if (i != sqrt(n)) {\n                factors.push_back(n / i);\n            }\n        }\n    }\n    std::sort(factors.begin(), factors.end());\n    return factors;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> ret;\n    while(n%2==0){\n        ret.push_back(2);\n        n=n/2;\n    }\n    while(n%3==0){\n        ret.push_back(3);\n        n=n/3;\n    }\n    long i=5;\n    while(i*i<=n){\n        while(n%i==0){\n            ret.push_back(i);\n            n=n/i;\n        }\n        i+=2;\n    }\n    if(n>1){\n        ret.push_back(n);\n    }\n    return ret;",
        "grade-55": {
            "execution": 1
        },
        "59": "if (n < 2) return std::vector<long>();\n    std::vector<long> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    for (long i = 3; i <= std::sqrt(n); i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;",
        "grade-59": {
            "execution": 1
        },
        "132": "std::vector<long> factors;\n    std::map<long, int> factors_map;\n    while (n % 2 == 0) {\n        factors_map[2]++;\n        n = n / 2;\n    }\n    for (long i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            factors_map[i]++;\n            n = n / i;\n        }\n    }\n    if (n > 2) {\n        factors_map[n]++;\n    }\n    for (auto factor : factors_map) {\n        for (int i = 0; i < factor.second; i++) {\n            factors.push_back(factor.first);\n        }\n    }\n    return factors;",
        "grade-132": {
            "execution": 1
        },
        "162": "std::vector<long> factors;\n  for (long d = 2; d * d <= n; d++) {\n    while (n % d == 0) {\n      factors.push_back(d);\n      n /= d;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;",
        "grade-162": {
            "execution": 1
        },
        "bleu-172": 0.4939128728118345,
        "bleu-28": 0.470076513030031,
        "bleu-6": 0.20286059461065842,
        "bleu-70": 0.2490207800948189,
        "bleu-62": 0.292154374826426,
        "bleu-57": 0.31182731241411765,
        "bleu-35": 0.21621055295032787,
        "bleu-26": 0.35999793951314024,
        "bleu-184": 0.48825331920531034,
        "bleu-143": 0.42692023886170655,
        "bleu-22": 0.3182714612710116,
        "bleu-158": 0.2604234306447384,
        "bleu-109": 0.3985633381353319,
        "bleu-8": 0.520310292727006,
        "bleu-7": 0.28242156141805036,
        "bleu-23": 0.3520117108275446,
        "bleu-55": 0.2616064505792624,
        "bleu-59": 0.22635869334672737,
        "bleu-132": 0.20172885481004102,
        "bleu-162": 0.27369473537259015,
        "codebleu-172": 0.7128745555727555,
        "codebleu-28": 0.7057830028480642,
        "codebleu-6": 0.6746481368007121,
        "codebleu-70": 0.4863382456764478,
        "codebleu-62": 0.6451120286565311,
        "codebleu-57": 0.6093129112191688,
        "codebleu-35": 0.6586885782836989,
        "codebleu-26": 0.6679345018934806,
        "codebleu-184": 0.709436789713382,
        "codebleu-143": 0.6424511862228117,
        "codebleu-22": 0.6811342253504594,
        "codebleu-158": 0.7065152994605394,
        "codebleu-109": 0.544027234704841,
        "codebleu-8": 0.70986458216015,
        "codebleu-7": 0.669496078652732,
        "codebleu-23": 0.6987188833277468,
        "codebleu-55": 0.6854063527888218,
        "codebleu-59": 0.6348840523630671,
        "codebleu-132": 0.6864069155332823,
        "codebleu-162": 0.6672892154012368,
        "chrf-172": 0.5380422715964489,
        "chrf-28": 0.5410617232089007,
        "chrf-6": 0.40207039428807456,
        "chrf-70": 0.3220949182541275,
        "chrf-62": 0.44410243286400364,
        "chrf-57": 0.42595467019176475,
        "chrf-35": 0.40554327091916503,
        "chrf-26": 0.4879767594566282,
        "chrf-184": 0.5244701884761707,
        "chrf-143": 0.4020340140557794,
        "chrf-22": 0.4905896388957806,
        "chrf-158": 0.47108655993889037,
        "chrf-109": 0.409542975312326,
        "chrf-8": 0.5483925482823006,
        "chrf-7": 0.44315170343310084,
        "chrf-23": 0.48534745184935396,
        "chrf-55": 0.44088566581272837,
        "chrf-59": 0.39305557778265354,
        "chrf-132": 0.334470134412367,
        "chrf-162": 0.3936756404977499,
        "rougel-172": 0.6619718309859156,
        "rougel-28": 0.6621621621621622,
        "rougel-6": 0.42857142857142855,
        "rougel-70": 0.5210084033613446,
        "rougel-62": 0.5625000000000001,
        "rougel-57": 0.52,
        "rougel-35": 0.4840182648401826,
        "rougel-26": 0.5911949685534592,
        "rougel-184": 0.5874125874125874,
        "rougel-143": 0.6466165413533834,
        "rougel-22": 0.5443786982248521,
        "rougel-158": 0.5408805031446541,
        "rougel-109": 0.65,
        "rougel-8": 0.6861313868613139,
        "rougel-7": 0.5263157894736842,
        "rougel-23": 0.5609756097560976,
        "rougel-55": 0.4705882352941177,
        "rougel-59": 0.49450549450549447,
        "rougel-132": 0.4507042253521127,
        "rougel-162": 0.5985401459854015,
        "meteor-172": 0.611668754891337,
        "meteor-28": 0.6836905775882779,
        "meteor-6": 0.49733338008817524,
        "meteor-70": 0.3959338997597758,
        "meteor-62": 0.601413033152845,
        "meteor-57": 0.49310479629829596,
        "meteor-35": 0.5506788079470198,
        "meteor-26": 0.6183662488291916,
        "meteor-184": 0.5132590131045054,
        "meteor-143": 0.5700478325859492,
        "meteor-22": 0.5671008428125186,
        "meteor-158": 0.6103362208192631,
        "meteor-109": 0.41876637774642206,
        "meteor-8": 0.5861305796464201,
        "meteor-7": 0.5503734789063323,
        "meteor-23": 0.5320312500000001,
        "meteor-55": 0.6070641163341248,
        "meteor-59": 0.5562397845254264,
        "meteor-132": 0.47541907728823624,
        "meteor-162": 0.5300478441065603,
        "ruby-172": 0.5066666666666666,
        "ruby-28": 0.5185185185185186,
        "ruby-6": 0.26573426573426573,
        "ruby-70": 0.35820895522388063,
        "ruby-62": 0.3978494623655914,
        "ruby-57": 0.3012048192771084,
        "ruby-35": 0.3421052631578947,
        "ruby-26": 0.4347826086956522,
        "ruby-184": 0.35526315789473684,
        "ruby-143": 0.4925373134328358,
        "ruby-22": 0.36274509803921573,
        "ruby-158": 0.40217391304347827,
        "ruby-109": 0.5223880597014925,
        "ruby-8": 0.5285714285714286,
        "ruby-7": 0.3557692307692307,
        "ruby-23": 0.4226804123711341,
        "ruby-55": 0.30833333333333335,
        "ruby-59": 0.32173913043478264,
        "ruby-132": 0.3013698630136986,
        "ruby-162": 0.44285714285714284,
        "codebertscore_f1-172": 0.8866755366325378,
        "codebertscore_f3-172": 0.8924827575683594,
        "codebertscore_f1-28": 0.9016911387443542,
        "codebertscore_f3-28": 0.9031789302825928,
        "codebertscore_f1-6": 0.8036606311798096,
        "codebertscore_f3-6": 0.8158733248710632,
        "codebertscore_f1-70": 0.8824597597122192,
        "codebertscore_f3-70": 0.877865731716156,
        "codebertscore_f1-62": 0.8537284135818481,
        "codebertscore_f3-62": 0.8565961718559265,
        "codebertscore_f1-57": 0.8196245431900024,
        "codebertscore_f3-57": 0.8330643773078918,
        "codebertscore_f1-35": 0.8007946014404297,
        "codebertscore_f3-35": 0.8172623515129089,
        "codebertscore_f1-26": 0.8632011413574219,
        "codebertscore_f3-26": 0.8655984401702881,
        "codebertscore_f1-184": 0.8583036065101624,
        "codebertscore_f3-184": 0.862297773361206,
        "codebertscore_f1-143": 0.8630071878433228,
        "codebertscore_f3-143": 0.8628004789352417,
        "codebertscore_f1-22": 0.8534595966339111,
        "codebertscore_f3-22": 0.8560769557952881,
        "codebertscore_f1-158": 0.8633802533149719,
        "codebertscore_f3-158": 0.8745652437210083,
        "codebertscore_f1-109": 0.8922680616378784,
        "codebertscore_f3-109": 0.8804949522018433,
        "codebertscore_f1-8": 0.910420298576355,
        "codebertscore_f3-8": 0.9103814959526062,
        "codebertscore_f1-7": 0.8468889594078064,
        "codebertscore_f3-7": 0.8506968021392822,
        "codebertscore_f1-23": 0.8546558618545532,
        "codebertscore_f3-23": 0.8761076927185059,
        "codebertscore_f1-55": 0.8355407118797302,
        "codebertscore_f3-55": 0.8379642963409424,
        "codebertscore_f1-59": 0.8213075399398804,
        "codebertscore_f3-59": 0.8279009461402893,
        "codebertscore_f1-132": 0.7780246734619141,
        "codebertscore_f3-132": 0.8053959012031555,
        "codebertscore_f1-162": 0.8689442873001099,
        "codebertscore_f3-162": 0.866949200630188,
        "codebertscore_s_f1-172": 0.8928791284561157,
        "codebertscore_s_f3-172": 0.8993490934371948,
        "codebertscore_s_f1-28": 0.9061261415481567,
        "codebertscore_s_f3-28": 0.9090319275856018,
        "codebertscore_s_f1-6": 0.8192161917686462,
        "codebertscore_s_f3-6": 0.8314406871795654,
        "codebertscore_s_f1-70": 0.885642409324646,
        "codebertscore_s_f3-70": 0.8828343152999878,
        "codebertscore_s_f1-62": 0.8602124452590942,
        "codebertscore_s_f3-62": 0.8626954555511475,
        "codebertscore_s_f1-57": 0.8335669636726379,
        "codebertscore_s_f3-57": 0.8472509980201721,
        "codebertscore_s_f1-35": 0.8194597363471985,
        "codebertscore_s_f3-35": 0.8358467221260071,
        "codebertscore_s_f1-26": 0.8675101399421692,
        "codebertscore_s_f3-26": 0.870424747467041,
        "codebertscore_s_f1-184": 0.8658284544944763,
        "codebertscore_s_f3-184": 0.871936023235321,
        "codebertscore_s_f1-143": 0.868755042552948,
        "codebertscore_s_f3-143": 0.8665554523468018,
        "codebertscore_s_f1-22": 0.8636519908905029,
        "codebertscore_s_f3-22": 0.8672899603843689,
        "codebertscore_s_f1-158": 0.8643078207969666,
        "codebertscore_s_f3-158": 0.8758208751678467,
        "codebertscore_s_f1-109": 0.8946008682250977,
        "codebertscore_s_f3-109": 0.8849361538887024,
        "codebertscore_s_f1-8": 0.9112101197242737,
        "codebertscore_s_f3-8": 0.9122881889343262,
        "codebertscore_s_f1-7": 0.8568011522293091,
        "codebertscore_s_f3-7": 0.8608798384666443,
        "codebertscore_s_f1-23": 0.8630071878433228,
        "codebertscore_s_f3-23": 0.8859043717384338,
        "codebertscore_s_f1-55": 0.8518505692481995,
        "codebertscore_s_f3-55": 0.8556636571884155,
        "codebertscore_s_f1-59": 0.8335016369819641,
        "codebertscore_s_f3-59": 0.8391640186309814,
        "codebertscore_s_f1-132": 0.797883152961731,
        "codebertscore_s_f3-132": 0.8282595872879028,
        "codebertscore_s_f1-162": 0.871782660484314,
        "codebertscore_s_f3-162": 0.8706619739532471,
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-143": 3,
        "raw_gpt35_nsnr-143": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "Score: 2",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-158": 4,
        "raw_gpt35_nswr-158": "4",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-132": 3,
        "raw_gpt35_nswr-132": "3",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n"
        ],
        "simplified": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
        "task_id": "3",
        "193": "long current_balance = 0;\n    long size = operations.size();\n    for (int i = 0; i < size; i++) {\n        current_balance += operations[i];\n        if (current_balance < 0)\n            return true;\n    }\n    return false;",
        "grade-193": {
            "execution": 1
        },
        "28": "int sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum += operations[i];\n        if (sum < 0)\n            return true;\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "// 1:\n  // for (unsigned int i = 0; i < operations.size(); i++) {\n  //   long sum = 0;\n  //   for (unsigned int j = 0; j <= i; j++) {\n  //     sum += operations[j];\n  //   }\n  //   if (sum < 0) {\n  //     return true;\n  //   }\n  // }\n  // return false;\n\n  // 2:\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;",
        "grade-6": {
            "execution": 1
        },
        "77": "long sum = 0;\n    for (auto x : operations) {\n        sum += x;\n        if (sum < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-77": {
            "execution": 1
        },
        "68": "int len = operations.size();\n\t// Process all queries one by one\n\tint res = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (operations[i] > 0)\n\t\t\tres += operations[i];\n\t\telse\n\t\t\tres -= operations[i];\n\t\tif (res < 0)\n\t\t\treturn true;\n\t}\n\treturn false;",
        "grade-68": {
            "execution": 0
        },
        "61": "int n = operations.size();\n\tint current_balance = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tcurrent_balance += operations[i];\n\t\tif (current_balance < 0)\n\t\t\treturn true;\n\t}\n\treturn false;",
        "grade-61": {
            "execution": 1
        },
        "36": "for (int i = 0; i < operations.size(); i++) {\n    if (i + 1 < operations.size()) {\n      operations[i + 1] += operations[i];\n    }\n  }\n  for (int i = 0; i < operations.size(); i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;",
        "grade-36": {
            "execution": 1
        },
        "26": "long sum = 0;\n\tfor (long i = 0; i < operations.size(); i++) {\n\t\tsum += operations[i];\n\t\tif (sum < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-26": {
            "execution": 1
        },
        "160": "// Your code here\n    return false;",
        "grade-160": {
            "execution": 0
        },
        "22": "// Write your code here\n    int sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum = sum + operations[i];\n        if(sum < 0){\n            return true;\n        }\n    }\n    return false;",
        "grade-22": {
            "execution": 1
        },
        "177": "long long balance = 0;\n    for (auto operation : operations) {\n        balance += operation;\n        if (balance < 0) return true;\n    }\n    return false;",
        "grade-177": {
            "execution": 1
        },
        "126": "long balance=0;\n  int n=operations.size();\n  for(int i=0;i<n;i++)\n  {\n  \tbalance+=operations[i];\n  \tif(balance<0)\n  \t{\n  \t\treturn true;\n\t  }\n  }\n  \n  return false;",
        "grade-126": {
            "execution": 1
        },
        "8": "long n = operations.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += operations[i];\n        if (sum < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long>::iterator it = operations.begin();\n    long sum = 0;\n    for (it; it != operations.end(); it++) {\n        sum += *it;\n        if (sum < 0)\n            return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "long total = 0;\n    for (auto operation : operations) {\n        total += operation;\n        if (total < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-23": {
            "execution": 1
        },
        "59": "// Your code goes here!\n    int curr_balance = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        curr_balance += operations[i];\n        if (curr_balance < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-59": {
            "execution": 1
        },
        "65": "long sum=0;\n    for(auto& op:operations){\n        sum+=op;\n        if(sum<0) return true;\n    }\n    return false;",
        "grade-65": {
            "execution": 1
        },
        "148": "long balance = 0;\n\tfor (int i = 0; i < operations.size(); i++) {\n\t\tbalance += operations[i];\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-148": {
            "execution": 1
        },
        "180": "int balance = 0;\n  for (auto& i : operations) {\n    balance += i;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;",
        "grade-180": {
            "execution": 1
        },
        "168": "long s = 0;\n  for (auto i : operations)\n    s += i;\n  return s < 0;",
        "grade-168": {
            "execution": 0
        },
        "bleu-193": 0.6859535039272626,
        "bleu-28": 0.8263676778229206,
        "bleu-6": 0.23685640520482312,
        "bleu-77": 0.22535934450289677,
        "bleu-68": 0.4643352781584413,
        "bleu-61": 0.7083316236060065,
        "bleu-36": 0.3820554240643043,
        "bleu-26": 0.6948542396524386,
        "bleu-160": 0.0015695219507880723,
        "bleu-22": 0.6284397383430377,
        "bleu-177": 0.29431802371542237,
        "bleu-126": 0.6128625373180825,
        "bleu-8": 0.6286732320980541,
        "bleu-7": 0.3140557367495791,
        "bleu-23": 0.22535934450289677,
        "bleu-59": 0.6591255480432294,
        "bleu-65": 0.29431802371542237,
        "bleu-148": 0.7540560793426363,
        "bleu-180": 0.23456686155281503,
        "bleu-168": 0.0798398051743134,
        "codebleu-193": 0.7882946888271521,
        "codebleu-28": 0.8763737135737802,
        "codebleu-6": 0.7145788649722148,
        "codebleu-77": 0.4427816232651152,
        "codebleu-68": 0.7780739406446938,
        "codebleu-61": 0.7812733066980345,
        "codebleu-36": 0.7203471510039167,
        "codebleu-26": 0.8105795985349015,
        "codebleu-160": 0.05120695632729047,
        "codebleu-22": 0.7994567256767531,
        "codebleu-177": 0.4730897661816977,
        "codebleu-126": 0.795317200459307,
        "codebleu-8": 0.7979483458557314,
        "codebleu-7": 0.6691262506171308,
        "codebleu-23": 0.45288263336612533,
        "codebleu-59": 0.7843843121478825,
        "codebleu-65": 0.45288774597967746,
        "codebleu-148": 0.8210441391936797,
        "codebleu-180": 0.45236621255608594,
        "codebleu-168": 0.2535095728182135,
        "chrf-193": 0.69827454117778,
        "chrf-28": 0.8857937906533742,
        "chrf-6": 0.6011945011851141,
        "chrf-77": 0.4566638959198739,
        "chrf-68": 0.6725977984325536,
        "chrf-61": 0.7348143032531769,
        "chrf-36": 0.6450486442707934,
        "chrf-26": 0.7717592828485118,
        "chrf-160": 0.14079048158362392,
        "chrf-22": 0.7742570844666359,
        "chrf-177": 0.5047834289090275,
        "chrf-126": 0.7066228610410689,
        "chrf-8": 0.7774482060356495,
        "chrf-7": 0.5854386641633135,
        "chrf-23": 0.47078317846169043,
        "chrf-59": 0.7230798883216142,
        "chrf-65": 0.5187314335387696,
        "chrf-148": 0.7582425759395163,
        "chrf-180": 0.4108487315487415,
        "chrf-168": 0.22784486469099527,
        "rougel-193": 0.7755102040816325,
        "rougel-28": 0.924731182795699,
        "rougel-6": 0.44318181818181823,
        "rougel-77": 0.575,
        "rougel-68": 0.6129032258064516,
        "rougel-61": 0.7755102040816325,
        "rougel-36": 0.5864661654135338,
        "rougel-26": 0.8631578947368421,
        "rougel-160": 0.1090909090909091,
        "rougel-22": 0.8235294117647058,
        "rougel-177": 0.5822784810126582,
        "rougel-126": 0.74,
        "rougel-8": 0.74,
        "rougel-7": 0.5607476635514019,
        "rougel-23": 0.575,
        "rougel-59": 0.8431372549019609,
        "rougel-65": 0.5822784810126582,
        "rougel-148": 0.8842105263157894,
        "rougel-180": 0.6419753086419752,
        "rougel-168": 0.43478260869565216,
        "meteor-193": 0.8696671354899203,
        "meteor-28": 0.9155989349397646,
        "meteor-6": 0.6437896754102287,
        "meteor-77": 0.4844930250974659,
        "meteor-68": 0.7941968631692808,
        "meteor-61": 0.8973147761476725,
        "meteor-36": 0.8027052314536688,
        "meteor-26": 0.8886385410498241,
        "meteor-160": 0.06831657643722609,
        "meteor-22": 0.915099069815692,
        "meteor-177": 0.4945054945054945,
        "meteor-126": 0.9021459823598861,
        "meteor-8": 0.8908801487063186,
        "meteor-7": 0.6442934901432925,
        "meteor-23": 0.5001052631578947,
        "meteor-59": 0.9177357446661364,
        "meteor-65": 0.4778454060117576,
        "meteor-148": 0.9109818930069505,
        "meteor-180": 0.5293363709766984,
        "meteor-168": 0.26312324438202245,
        "ruby-193": 0.6470588235294117,
        "ruby-28": 0.9148936170212766,
        "ruby-6": 0.3023255813953488,
        "ruby-77": 0.44680851063829785,
        "ruby-68": 0.4285714285714286,
        "ruby-61": 0.6470588235294117,
        "ruby-36": 0.38372093023255816,
        "ruby-26": 0.8333333333333334,
        "ruby-160": 0.06382978723404253,
        "ruby-22": 0.7272727272727273,
        "ruby-177": 0.46808510638297873,
        "ruby-126": 0.6037735849056604,
        "ruby-8": 0.6037735849056604,
        "ruby-7": 0.43333333333333335,
        "ruby-23": 0.44680851063829785,
        "ruby-59": 0.7636363636363637,
        "ruby-65": 0.4893617021276596,
        "ruby-148": 0.8541666666666666,
        "ruby-180": 0.5106382978723405,
        "ruby-168": 0.3191489361702128,
        "codebertscore_f1-193": 0.9030708074569702,
        "codebertscore_f3-193": 0.9155012965202332,
        "codebertscore_f1-28": 0.9538186192512512,
        "codebertscore_f3-28": 0.9506014585494995,
        "codebertscore_f1-6": 0.8377362489700317,
        "codebertscore_f3-6": 0.8739615082740784,
        "codebertscore_f1-77": 0.8630220890045166,
        "codebertscore_f3-77": 0.8420652151107788,
        "codebertscore_f1-68": 0.875617504119873,
        "codebertscore_f3-68": 0.9091803431510925,
        "codebertscore_f1-61": 0.9092928767204285,
        "codebertscore_f3-61": 0.9222428798675537,
        "codebertscore_f1-36": 0.8916850686073303,
        "codebertscore_f3-36": 0.8934789299964905,
        "codebertscore_f1-26": 0.9399925470352173,
        "codebertscore_f3-26": 0.9372369050979614,
        "codebertscore_f1-160": 0.6597732901573181,
        "codebertscore_f3-160": 0.6359214782714844,
        "codebertscore_f1-22": 0.8830623030662537,
        "codebertscore_f3-22": 0.9102246761322021,
        "codebertscore_f1-177": 0.857612133026123,
        "codebertscore_f3-177": 0.8420447111129761,
        "codebertscore_f1-126": 0.946850597858429,
        "codebertscore_f3-126": 0.9531851410865784,
        "codebertscore_f1-8": 0.9166988730430603,
        "codebertscore_f3-8": 0.9225414991378784,
        "codebertscore_f1-7": 0.8445183038711548,
        "codebertscore_f3-7": 0.8614513278007507,
        "codebertscore_f1-23": 0.8626412153244019,
        "codebertscore_f3-23": 0.8425576686859131,
        "codebertscore_f1-59": 0.867644727230072,
        "codebertscore_f3-59": 0.9053172469139099,
        "codebertscore_f1-65": 0.8783087730407715,
        "codebertscore_f3-65": 0.8664435744285583,
        "codebertscore_f1-148": 0.938717782497406,
        "codebertscore_f3-148": 0.935997486114502,
        "codebertscore_f1-180": 0.8760398626327515,
        "codebertscore_f3-180": 0.8673216104507446,
        "codebertscore_f1-168": 0.8180924654006958,
        "codebertscore_f3-168": 0.7987529635429382,
        "codebertscore_s_f1-193": 0.9010360836982727,
        "codebertscore_s_f3-193": 0.9170905947685242,
        "codebertscore_s_f1-28": 0.9520010948181152,
        "codebertscore_s_f3-28": 0.9494107961654663,
        "codebertscore_s_f1-6": 0.8548724055290222,
        "codebertscore_s_f3-6": 0.8950268626213074,
        "codebertscore_s_f1-77": 0.8669953346252441,
        "codebertscore_s_f3-77": 0.849083423614502,
        "codebertscore_s_f1-68": 0.8758912682533264,
        "codebertscore_s_f3-68": 0.9129408001899719,
        "codebertscore_s_f1-61": 0.9085487127304077,
        "codebertscore_s_f3-61": 0.9223697185516357,
        "codebertscore_s_f1-36": 0.9015698432922363,
        "codebertscore_s_f3-36": 0.9082596302032471,
        "codebertscore_s_f1-26": 0.9302529692649841,
        "codebertscore_s_f3-26": 0.9284494519233704,
        "codebertscore_s_f1-160": 0.6391604542732239,
        "codebertscore_s_f3-160": 0.6133546829223633,
        "codebertscore_s_f1-22": 0.8937118649482727,
        "codebertscore_s_f3-22": 0.9212026596069336,
        "codebertscore_s_f1-177": 0.8496021628379822,
        "codebertscore_s_f3-177": 0.8327151536941528,
        "codebertscore_s_f1-126": 0.9442833065986633,
        "codebertscore_s_f3-126": 0.9522060751914978,
        "codebertscore_s_f1-8": 0.924183189868927,
        "codebertscore_s_f3-8": 0.9320360422134399,
        "codebertscore_s_f1-7": 0.844857931137085,
        "codebertscore_s_f3-7": 0.8625762462615967,
        "codebertscore_s_f1-23": 0.8602621555328369,
        "codebertscore_s_f3-23": 0.8403312563896179,
        "codebertscore_s_f1-59": 0.8746088147163391,
        "codebertscore_s_f3-59": 0.9164206385612488,
        "codebertscore_s_f1-65": 0.8766571879386902,
        "codebertscore_s_f3-65": 0.8635984063148499,
        "codebertscore_s_f1-148": 0.933518648147583,
        "codebertscore_s_f3-148": 0.9331690669059753,
        "codebertscore_s_f1-180": 0.8755409121513367,
        "codebertscore_s_f3-180": 0.8691887855529785,
        "codebertscore_s_f1-168": 0.8088912963867188,
        "codebertscore_s_f3-168": 0.7930237650871277,
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-160": 0,
        "raw_gpt35_nsnr-160": "3 - The code snippet correctly identifies if the balance of the account falls below zero by checking each operation in the vector. However, it does not actually iterate through the vector or perform any calculations to determine the balance. It simply returns false by default, which is incorrect for cases where the balance does fall below zero.",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nswr-193": 4,
        "raw_gpt35_nswr-193": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "Option 1: 2\nOption 2: 4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-126": 4,
        "raw_gpt35_nswr-126": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-180": 4,
        "raw_gpt35_nswr-180": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n"
        ],
        "simplified": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "task_id": "72",
        "164": "std::reverse(q.begin(), q.end());\n\treturn std::equal(q.begin(), q.end(), q.rbegin()) && std::accumulate(q.begin(), q.end(), 0) <= w;",
        "grade-164": {
            "execution": 1
        },
        "28": "//int sum = 0;\n\t//for (int i = 0; i < q.size(); i++) {\n\t//\tsum += q[i];\n\t//}\n\t//if (sum > w) {\n\t//\treturn false;\n\t//}\n\t//for (int i = 0; i < q.size() / 2; i++) {\n\t//\tif (q[i] != q[q.size() - 1 - i]) {\n\t//\t\treturn false;\n\t//\t}\n\t//}\n\t//return true;\n\t//int l = 0, r = q.size() - 1;\n\t//int sum = 0;\n\t//while (l < r) {\n\t//\tif (q[l] != q[r]) {\n\t//\t\treturn false;\n\t//\t}\n\t//\tsum += q[l];\n\t//\tl++;\n\t//\tr--;\n\t//}\n\t//if (sum > w) {\n\t//\treturn false;\n\t//}\n\t//return true;\n\tint sum = 0;\n\tfor (int i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum > w) {\n\t\treturn false;\n\t}\n\tint l = 0, r = q.size() - 1;\n\twhile (l < r) {\n\t\tif (q[l] != q[r]) {\n\t\t\treturn false;\n\t\t}\n\t\tl++;\n\t\tr--;\n\t}\n\treturn true;",
        "grade-28": {
            "execution": 1
        },
        "6": "int n = q.size();\n\tint i = 0;\n\tbool is_balanced = true;\n\tif (n % 2 == 0) {\n\t\tint l = 0;\n\t\tint r = n - 1;\n\t\twhile (l < r) {\n\t\t\tif (q[l] != q[r]) {\n\t\t\t\tis_balanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t}\n\telse {\n\t\tint l = 0;\n\t\tint r = n - 1;\n\t\twhile (l < r) {\n\t\t\tif (q[l] != q[r]) {\n\t\t\t\tis_balanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t}\n\tif (is_balanced) {\n\t\tlong curr_w = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcurr_w += q[i];\n\t\t}\n\t\tif (curr_w <= w) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-6": {
            "execution": 1
        },
        "190": "//(1) If a list is empty, then it is palindromic.\n\t//(2) If the list contains only one element, then it is palindromic.\n\t//(3) Otherwise, if the first and last elements are equal, then if the sublist that excludes the first and last elements is palindromic, so is the whole list.\n\t//(4) Otherwise, the list is not palindromic.\n\t//(5) The base cases are easy to check: either the list is empty or it has only one element.\n\t//(6) For the inductive step, if the first and last elements are equal, then we can check the sublist that excludes the first and last elements.\n\t//(7) We continue to do this until we reach a base case.\n\t//(8) For example, if the list is [1,3,4,3,1], then the first and last elements are equal and the sublist [3,4,3] is palindromic.\n\t//(9) If the list is [1,3,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,3] is palindromic.\n\t//(10) If the list is [1,3,4,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,4,3] is palindromic.\n\t//(11) If the list is [1,3,4,4,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,4,4,3] is palindromic.\n\t//(12) If the list is [1,3,4,4,4,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,4,4,4,3] is palindromic.\n\t//(13) In all cases, the first and last elements are equal, so the sublist is palindromic.\n\t//(14) It is a simple matter to combine the two predicates:\n\t//(15) We can use a helper function,",
        "grade-190": {
            "execution": 0
        },
        "70": "long sum = 0;\n\tfor (int i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum <= w) {\n\t\tstd::vector<long> copy(q);\n\t\tstd::reverse(copy.begin(), copy.end());\n\t\tfor (int i = 0; i < q.size(); i++) {\n\t\t\tif (q[i] != copy[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-70": {
            "execution": 1
        },
        "62": "long weight = 0;\n\tfor (long i = 0; i < q.size(); i++)\n\t\tweight += q[i];\n\tif (weight > w)\n\t\treturn false;\n\tfor (long i = 0; i < q.size() / 2; i++)\n\t\tif (q[i] != q[q.size() - i - 1])\n\t\t\treturn false;\n\treturn true;",
        "grade-62": {
            "execution": 1
        },
        "57": "if(q.size() == 1) return true;\n\tlong sum = std::accumulate(q.begin(), q.end(), 0);\n\tstd::string first = \"\";\n\tstd::string second = \"\";\n\tfor(int i = 0; i < q.size()/2; i++){\n\t\tfirst += std::to_string(q[i]);\n\t}\n\tfor(int i = q.size()-1; i >= q.size()/2; i--){\n\t\tsecond += std::to_string(q[i]);\n\t}\n\tif(sum <= w && first == second) return true;\n\treturn false;",
        "grade-57": {
            "execution": 0
        },
        "35": "auto sum = 0;\n\tfor (auto& i : q) {\n\t\tsum += i;\n\t}\n\tauto dup = q;\n\tstd::reverse(dup.begin(), dup.end());\n\treturn sum <= w && q == dup;",
        "grade-35": {
            "execution": 1
        },
        "189": "//int len = q.size();\n\t//int front =0;\n\t//int back = len-1;\n\t//while(front < back){\n\t//\tif(q[front] != q[back]){\n\t//\t\treturn false;\n\t//\t}\n\t//\tfront++;\n\t//\tback--;\n\t//}\n\t//int sum = std::accumulate(q.begin(), q.end(), 0);\n\t//if(sum <= w){\n\t//\treturn true;\n\t//}\n\tint len = q.size();\n\tint mid = len/2;\n\tif(len == 0 || len == 1){\n\t\treturn true;\n\t}\n\tif(q[mid] != q[mid-1]){\n\t\treturn false;\n\t}\n\tint sum = std::accumulate(q.begin(), q.end(), 0);\n\tif(sum <= w){\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-189": {
            "execution": 0
        },
        "26": "// get sum of the vector\n  long sum = 0;\n  for (long elem : q) {\n    sum += elem;\n  }\n  // return (sum <= w) && (q == std::vector<long>(q.rbegin(), q.rend()));\n  return (sum <= w) && (q == std::vector<long>(q.crbegin(), q.crend()));",
        "grade-26": {
            "execution": 1
        },
        "174": "long sum = 0;\n\tbool result = false;\n\tfor (auto i : q) {\n\t\tsum += i;\n\t}\n\tif (sum <= w) {\n\t\tstd::vector<long> d(q.size());\n\t\tstd::reverse_copy(q.begin(), q.end(), d.begin());\n\t\tif (q == d) {\n\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;",
        "grade-174": {
            "execution": 1
        },
        "140": "long sum=0;\n\tint n=q.size();\n\tif(n==1)\n\t\treturn true;\n\tfor(int i=0;i<n;i++)\n\t\tsum+=q[i];\n\tif(sum>w)\n\t\treturn false;\n\tint i=0,j=n-1;\n\twhile(i<j)\n\t{\n\t\tif(q[i]!=q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;",
        "grade-140": {
            "execution": 1
        },
        "22": "int sum = 0;\n\tstd::vector<long> tmp = q;\n\tfor (int i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum <= w) {\n\t\tstd::reverse(tmp.begin(), tmp.end());\n\t\tif (tmp == q)\n\t\t\treturn true;\n\t}\n\treturn false;",
        "grade-22": {
            "execution": 1
        },
        "152": "int front = 0;\n  int back = q.size() - 1;\n  long sum = 0;\n  while (front < back) {\n    if (q[front] != q[back]) {\n      return false;\n    }\n    front++;\n    back--;\n  }\n  for (int i = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum <= w) {\n    return true;\n  }\n  return false;",
        "grade-152": {
            "execution": 1
        },
        "108": "if (q.size() == 1) {\n\t\treturn true;\n\t}\n\tlong long sum = 0;\n\tfor (long i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum > w) {\n\t\treturn false;\n\t}\n\tint size = q.size();\n\tint l = 0;\n\tint r = size - 1;\n\tint mid = (l + r) / 2;\n\tint k = 0;\n\tstd::vector<long> a;\n\twhile (l <= r) {\n\t\ta.push_back(q[mid]);\n\t\tmid++;\n\t\tl++;\n\t}\n\twhile (a[k] == q[k]) {\n\t\tk++;\n\t}\n\tif (k == size) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-108": {
            "execution": 0
        },
        "8": "if (q.size() == 1){\n\t\tif (q[0] < w){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\tlong sum = 0;\n\tint length = q.size();\n\tfor (int i = 0; i < length; i++){\n\t\tsum += q[i];\n\t}\n\tif (sum > w){\n\t\treturn false;\n\t}\n\telse{\n\t\tfor (int i = 0; i < length / 2; i++){\n\t\t\tif (q[i] != q[length - i - 1]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "grade-8": {
            "execution": 0
        },
        "7": "long sum=0;\n    for(int i=0;i<q.size();i++)\n        sum+=q[i];\n    if(sum>w)\n        return false;\n    else\n    {\n        int i=0,j=q.size()-1;\n        while(i<j)\n        {\n            if(q[i]!=q[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }",
        "grade-7": {
            "execution": 1
        },
        "23": "bool res = true;\n\tif (std::accumulate(q.begin(), q.end(), 0) > w) {\n\t\tres = false;\n\t}\n\tif (q[0] != q[q.size() - 1]) {\n\t\tres = false;\n\t}\n\treturn res;",
        "grade-23": {
            "execution": 1
        },
        "55": "long sum = 0;\n\tfor (long &i : q) {\n\t\tsum += i;\n\t}\n\tbool is_palindrome = true;\n\tfor (int i = 0; i < q.size() / 2; i++) {\n\t\tif (q[i] != q[q.size() - 1 - i]) {\n\t\t\tis_palindrome = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_palindrome) {\n\t\tif (sum <= w) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> r;\n\tr = q;\n\tstd::reverse(r.begin(), r.end());\n\tlong sum = 0;\n\tfor (auto i : q)\n\t\tsum += i;\n\treturn ((q == r) && (sum <= w));",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.03079277138701487,
        "bleu-28": 0.19355737091138217,
        "bleu-6": 0.22289154073503709,
        "bleu-190": 0.001643544531310433,
        "bleu-70": 0.44913260475939404,
        "bleu-62": 0.5743249319890418,
        "bleu-57": 0.2652187404118131,
        "bleu-35": 0.12941145086358077,
        "bleu-189": 0.12952986981069375,
        "bleu-26": 0.10430104942974408,
        "bleu-174": 0.18722357270813056,
        "bleu-140": 0.4856801659110767,
        "bleu-22": 0.4852009337696237,
        "bleu-152": 0.5175330203529275,
        "bleu-108": 0.27414001956347694,
        "bleu-8": 0.41356347186732256,
        "bleu-7": 0.6250653265942089,
        "bleu-23": 0.3047540938186993,
        "bleu-55": 0.5320767607556547,
        "bleu-59": 0.1373094759140975,
        "codebleu-164": 0.33452932798538165,
        "codebleu-28": 0.8098762764815974,
        "codebleu-6": 0.6867849922915549,
        "codebleu-190": 0.3875775296827928,
        "codebleu-70": 0.7549115052379685,
        "codebleu-62": 0.7550416049149328,
        "codebleu-57": 0.704620990000324,
        "codebleu-35": 0.41980167531127693,
        "codebleu-189": 0.6696992262511376,
        "codebleu-26": 0.4939690106432415,
        "codebleu-174": 0.5592461679468989,
        "codebleu-140": 0.7325803472357658,
        "codebleu-22": 0.6815872915947614,
        "codebleu-152": 0.7779696864779152,
        "codebleu-108": 0.7509601143743774,
        "codebleu-8": 0.7551141062780868,
        "codebleu-7": 0.7956471718720832,
        "codebleu-23": 0.5467257031604578,
        "codebleu-55": 0.7677827876220699,
        "codebleu-59": 0.4762802917154819,
        "chrf-164": 0.13826132176848993,
        "chrf-28": 0.5545179347250996,
        "chrf-6": 0.45757690613364216,
        "chrf-190": 0.06107430926438376,
        "chrf-70": 0.6888958188787191,
        "chrf-62": 0.6629990063251315,
        "chrf-57": 0.49653448498437813,
        "chrf-35": 0.2199174048836613,
        "chrf-189": 0.3893049654625018,
        "chrf-26": 0.24023899051660408,
        "chrf-174": 0.32430408899939617,
        "chrf-140": 0.6744958938472417,
        "chrf-22": 0.5918933194010738,
        "chrf-152": 0.6845317160776123,
        "chrf-108": 0.5616114665646313,
        "chrf-8": 0.6544160903308227,
        "chrf-7": 0.791302108727278,
        "chrf-23": 0.34938309192034867,
        "chrf-55": 0.6548521241001886,
        "chrf-59": 0.23202730492354892,
        "rougel-164": 0.2608695652173913,
        "rougel-28": 0.35443037974683544,
        "rougel-6": 0.3740458015267175,
        "rougel-190": 0.075046904315197,
        "rougel-70": 0.5185185185185185,
        "rougel-62": 0.5750000000000001,
        "rougel-57": 0.504424778761062,
        "rougel-35": 0.34920634920634924,
        "rougel-189": 0.3345195729537367,
        "rougel-26": 0.3076923076923077,
        "rougel-174": 0.37499999999999994,
        "rougel-140": 0.47398843930635837,
        "rougel-22": 0.5641025641025641,
        "rougel-152": 0.5647058823529412,
        "rougel-108": 0.43621399176954734,
        "rougel-8": 0.43781094527363185,
        "rougel-7": 0.5939393939393939,
        "rougel-23": 0.4776119402985074,
        "rougel-55": 0.6863905325443787,
        "rougel-59": 0.3065693430656934,
        "meteor-164": 0.22607560198300283,
        "meteor-28": 0.5563991057338136,
        "meteor-6": 0.6049048264062167,
        "meteor-190": 0.12715712988192554,
        "meteor-70": 0.6545711981181314,
        "meteor-62": 0.6490791269702835,
        "meteor-57": 0.6279650177062588,
        "meteor-35": 0.32911250955713706,
        "meteor-189": 0.4732934886631332,
        "meteor-26": 0.27762377986672016,
        "meteor-174": 0.40541056166056166,
        "meteor-140": 0.6803991403187098,
        "meteor-22": 0.5803953277591575,
        "meteor-152": 0.778792865783329,
        "meteor-108": 0.48895165522508416,
        "meteor-8": 0.7086842378839421,
        "meteor-7": 0.7671676157283807,
        "meteor-23": 0.4556014681250976,
        "meteor-55": 0.6636536202035155,
        "meteor-59": 0.3212056219531779,
        "ruby-164": 0.16901408450704225,
        "ruby-28": 0.21604938271604934,
        "ruby-6": 0.25130890052356025,
        "ruby-190": 0.04329004329004327,
        "ruby-70": 0.39830508474576276,
        "ruby-62": 0.4719101123595506,
        "ruby-57": 0.3548387096774194,
        "ruby-35": 0.2535211267605634,
        "ruby-189": 0.1952380952380952,
        "ruby-26": 0.2142857142857143,
        "ruby-174": 0.2134831460674157,
        "ruby-140": 0.28431372549019607,
        "ruby-22": 0.42352941176470593,
        "ruby-152": 0.3737373737373737,
        "ruby-108": 0.3023255813953488,
        "ruby-8": 0.2846153846153846,
        "ruby-7": 0.4893617021276596,
        "ruby-23": 0.3098591549295775,
        "ruby-55": 0.5612244897959184,
        "ruby-59": 0.14084507042253525,
        "codebertscore_f1-164": 0.7241607904434204,
        "codebertscore_f3-164": 0.7040124535560608,
        "codebertscore_f1-28": 0.8110703229904175,
        "codebertscore_f3-28": 0.8766056299209595,
        "codebertscore_f1-6": 0.7600374817848206,
        "codebertscore_f3-6": 0.7984105348587036,
        "codebertscore_f1-190": 0.5774591565132141,
        "codebertscore_f3-190": 0.6211258172988892,
        "codebertscore_f1-70": 0.8827441930770874,
        "codebertscore_f3-70": 0.8974273800849915,
        "codebertscore_f1-62": 0.9158006906509399,
        "codebertscore_f3-62": 0.9220424890518188,
        "codebertscore_f1-57": 0.816063404083252,
        "codebertscore_f3-57": 0.8559171557426453,
        "codebertscore_f1-35": 0.7860373258590698,
        "codebertscore_f3-35": 0.7825538516044617,
        "codebertscore_f1-189": 0.7887406945228577,
        "codebertscore_f3-189": 0.8305091857910156,
        "codebertscore_f1-26": 0.7658301591873169,
        "codebertscore_f3-26": 0.7685185074806213,
        "codebertscore_f1-174": 0.8190081715583801,
        "codebertscore_f3-174": 0.8332372307777405,
        "codebertscore_f1-140": 0.8977779150009155,
        "codebertscore_f3-140": 0.9217332005500793,
        "codebertscore_f1-22": 0.8751555681228638,
        "codebertscore_f3-22": 0.8895365595817566,
        "codebertscore_f1-152": 0.8959221839904785,
        "codebertscore_f3-152": 0.9129243493080139,
        "codebertscore_f1-108": 0.8270077109336853,
        "codebertscore_f3-108": 0.8849329352378845,
        "codebertscore_f1-8": 0.8718630075454712,
        "codebertscore_f3-8": 0.8947044014930725,
        "codebertscore_f1-7": 0.8995946645736694,
        "codebertscore_f3-7": 0.921902596950531,
        "codebertscore_f1-23": 0.8125998973846436,
        "codebertscore_f3-23": 0.8030505180358887,
        "codebertscore_f1-55": 0.8719236850738525,
        "codebertscore_f3-55": 0.9124019742012024,
        "codebertscore_f1-59": 0.7875911593437195,
        "codebertscore_f3-59": 0.7847000360488892,
        "codebertscore_s_f1-164": 0.9393086433410645,
        "codebertscore_s_f3-164": 0.9296317100524902,
        "codebertscore_s_f1-28": 0.9403594136238098,
        "codebertscore_s_f3-28": 0.9731372594833374,
        "codebertscore_s_f1-6": 0.9292383193969727,
        "codebertscore_s_f3-6": 0.9587551951408386,
        "codebertscore_s_f1-190": 0.8217567205429077,
        "codebertscore_s_f3-190": 0.8957735896110535,
        "codebertscore_s_f1-70": 0.966403603553772,
        "codebertscore_s_f3-70": 0.9718425273895264,
        "codebertscore_s_f1-62": 0.9751070141792297,
        "codebertscore_s_f3-62": 0.9780685305595398,
        "codebertscore_s_f1-57": 0.9402866363525391,
        "codebertscore_s_f3-57": 0.9614631533622742,
        "codebertscore_s_f1-35": 0.9510186910629272,
        "codebertscore_s_f3-35": 0.946355938911438,
        "codebertscore_s_f1-189": 0.9265769720077515,
        "codebertscore_s_f3-189": 0.9570501446723938,
        "codebertscore_s_f1-26": 0.9405272006988525,
        "codebertscore_s_f3-26": 0.9421323537826538,
        "codebertscore_s_f1-174": 0.9563071131706238,
        "codebertscore_s_f3-174": 0.9576557278633118,
        "codebertscore_s_f1-140": 0.969691276550293,
        "codebertscore_s_f3-140": 0.9791639447212219,
        "codebertscore_s_f1-22": 0.9715842008590698,
        "codebertscore_s_f3-22": 0.9729045629501343,
        "codebertscore_s_f1-152": 0.9703601002693176,
        "codebertscore_s_f3-152": 0.9769551753997803,
        "codebertscore_s_f1-108": 0.9462549686431885,
        "codebertscore_s_f3-108": 0.9713644981384277,
        "codebertscore_s_f1-8": 0.9589720964431763,
        "codebertscore_s_f3-8": 0.9715406894683838,
        "codebertscore_s_f1-7": 0.9733434319496155,
        "codebertscore_s_f3-7": 0.981642484664917,
        "codebertscore_s_f1-23": 0.9569121599197388,
        "codebertscore_s_f3-23": 0.9509618282318115,
        "codebertscore_s_f1-55": 0.9564279317855835,
        "codebertscore_s_f3-55": 0.9727015495300293,
        "codebertscore_s_f1-59": 0.9561595320701599,
        "codebertscore_s_f3-59": 0.9491742253303528,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 0,
        "raw_gpt35_nswr-190": "0",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string s) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n"
        ],
        "simplified": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
        "task_id": "66",
        "182": "int sum = 0;\n  std::vector<int> arr = {};\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] > 64 && s[i] < 91) {\n      sum += s[i];\n    }\n  }\n  return sum;",
        "grade-182": {
            "execution": 1
        },
        "30": "long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            sum += s[i];\n        }\n    }\n    return sum;",
        "grade-30": {
            "execution": 1
        },
        "6": "return std::accumulate(s.begin(), s.end(), 0,\n                         [](long acc, const char c) {\n                           return c >= 'A' && c <= 'Z' ? acc + c : acc;\n                         });",
        "grade-6": {
            "execution": 1
        },
        "77": "// Your code goes here!\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t// std::cout << s[i] << \" \" << (int)s[i] << std::endl;\n\t\tif (s[i] >= 65 && s[i] <= 90) {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-77": {
            "execution": 1
        },
        "68": "long sum = 0;\n\tfor (char c : s)\n\t\tif (isupper(c))\n\t\t\tsum += c;\n\treturn sum;",
        "grade-68": {
            "execution": 1
        },
        "62": "long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += (int)s[i];\n    }\n    return sum;",
        "grade-62": {
            "execution": 1
        },
        "37": "return std::accumulate(s.begin(), s.end(), 0, [](int acc, char c) {\n        if (isupper(c))\n            return acc + c;\n        return acc;\n    });",
        "grade-37": {
            "execution": 1
        },
        "28": "// Enter code here\n  long long sum=0;\n  for(int i=0;i<s.length();i++)\n  {\n      if(isupper(s[i]))\n        sum+=s[i];\n  }\n  return sum;",
        "grade-28": {
            "execution": 1
        },
        "196": "if (s.empty()) return 0;\n  long sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') sum += s[i];\n  }\n  return sum;",
        "grade-196": {
            "execution": 1
        },
        "156": "long sum = 0;\n  if (s.empty()) {\n    return sum;\n  }\n  else {\n    for (char &x : s) {\n      if (isupper(x)) {\n        sum += x;\n      }\n    }\n    return sum;\n  }",
        "grade-156": {
            "execution": 1
        },
        "24": "int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return sum;",
        "grade-24": {
            "execution": 1
        },
        "168": "long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] <= 'Z' && s[i] >= 'A') {\n            sum += s[i];\n        }\n    }\n    return sum;",
        "grade-168": {
            "execution": 1
        },
        "119": "int sum = 0;\n    if(s.size()==0) return 0;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='A' && s[i]<='Z')\n            sum += s[i];\n    }\n    return sum;",
        "grade-119": {
            "execution": 1
        },
        "8": "int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(isupper(s[i])){\n            sum+=s[i];\n        }\n    }\n    return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "//cout << s;\n  int sum = 0;\n  for(char c : s){\n    if(isupper(c))\n      sum += c;\n  }\n  return sum;",
        "grade-7": {
            "execution": 1
        },
        "25": "long result = 0;\n  int temp = 0;\n  for (int i = 0; i < s.length(); i++) {\n    temp = (int)s[i];\n    if (temp >= 65 && temp <= 90) {\n      result += temp;\n    }\n  }\n  return result;",
        "grade-25": {
            "execution": 1
        },
        "60": "//  function that takes a string as input and returns the sum of the upper characters only\n  //  ASCII codes.\n  //  Examples:\n  //  digitSum(\"\") => 0\n  //  digitSum(\"abAB\") => 131\n  //  digitSum(\"abcCd\") => 67\n  //  digitSum(\"helloE\") => 69\n  //  digitSum(\"woArBld\") => 131\n  //  digitSum(\"aAaaaXa\") => 153\n  // your code here\n  long sum = 0;\n  for (auto & c : s)\n    if (isupper(c)) sum += c;\n  return sum;",
        "grade-60": {
            "execution": 1
        },
        "65": "long sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif ((int)s[i] >= 65 && (int)s[i] <= 90) {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-65": {
            "execution": 1
        },
        "142": "// your code here\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if((int)s[i] >= 65 && (int)s[i] <= 90){\n            sum = sum + (int)s[i];\n        }\n    }\n    return sum;",
        "grade-142": {
            "execution": 1
        },
        "172": "// Check if string is empty\n\tif (s.empty()) {\n\t\treturn 0;\n\t}\n\t// Make result a double because if it is an int it would go out of scope\n\tdouble result = 0;\n\t// Iterate through the string and check if the character is uppercase\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t// If it is uppercase add the value to the result\n\t\tif (isupper(s[i])) {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\t// Cast the result back to an int because there is no need for the extra\n\t// decimals\n\treturn (int)result;",
        "grade-172": {
            "execution": 1
        },
        "bleu-182": 0.5870908366732476,
        "bleu-30": 0.6737501233347949,
        "bleu-6": 0.03799721361952173,
        "bleu-77": 0.42731172630582537,
        "bleu-68": 0.15018615295504265,
        "bleu-62": 0.6513932239281585,
        "bleu-37": 0.040146096897408196,
        "bleu-28": 0.6590769757783329,
        "bleu-196": 0.5589120522333877,
        "bleu-156": 0.14849772134726527,
        "bleu-24": 0.6904788127512436,
        "bleu-168": 0.6737501233347949,
        "bleu-119": 0.5453182830490075,
        "bleu-8": 0.6614560609215807,
        "bleu-7": 0.19322007764033322,
        "bleu-25": 0.477506516535366,
        "bleu-60": 0.08213189153720771,
        "bleu-65": 0.6209904667875985,
        "bleu-142": 0.5733992032100408,
        "bleu-172": 0.22391355938919008,
        "codebleu-182": 0.7441550258039961,
        "codebleu-30": 0.7394174864814215,
        "codebleu-6": 0.40238095238095234,
        "codebleu-77": 0.7474561363490014,
        "codebleu-68": 0.31534074736481266,
        "codebleu-62": 0.7449104321075053,
        "codebleu-37": 0.4178015497494913,
        "codebleu-28": 0.6810044970856196,
        "codebleu-196": 0.7236878667233186,
        "codebleu-156": 0.44859244126826153,
        "codebleu-24": 0.7471734452251844,
        "codebleu-168": 0.742051104476851,
        "codebleu-119": 0.7537039666388258,
        "codebleu-8": 0.6923131025537648,
        "codebleu-7": 0.38454650629514264,
        "codebleu-25": 0.6727346276811988,
        "codebleu-60": 0.487923395688067,
        "codebleu-65": 0.7462586336149902,
        "codebleu-142": 0.7380744248749151,
        "codebleu-172": 0.641354854857257,
        "chrf-182": 0.6872380457744872,
        "chrf-30": 0.7168661852034713,
        "chrf-6": 0.15909786022910688,
        "chrf-77": 0.6557939491669906,
        "chrf-68": 0.3171943025166791,
        "chrf-62": 0.702508908344452,
        "chrf-37": 0.1858282609579355,
        "chrf-28": 0.6399319215028298,
        "chrf-196": 0.6122442613066613,
        "chrf-156": 0.2773441585133643,
        "chrf-24": 0.7544804484889528,
        "chrf-168": 0.7147016814080218,
        "chrf-119": 0.6248523457910955,
        "chrf-8": 0.6867804081567587,
        "chrf-7": 0.34094891892605,
        "chrf-25": 0.5109184322297811,
        "chrf-60": 0.23508397976476084,
        "chrf-65": 0.7115518663426842,
        "chrf-142": 0.7046686102990986,
        "chrf-172": 0.3213066866708087,
        "rougel-182": 0.7868852459016393,
        "rougel-30": 0.8448275862068966,
        "rougel-6": 0.2727272727272727,
        "rougel-77": 0.6623376623376623,
        "rougel-68": 0.4444444444444444,
        "rougel-62": 0.8376068376068377,
        "rougel-37": 0.27450980392156865,
        "rougel-28": 0.7663551401869159,
        "rougel-196": 0.7679999999999999,
        "rougel-156": 0.4313725490196078,
        "rougel-24": 0.8620689655172414,
        "rougel-168": 0.8103448275862069,
        "rougel-119": 0.765625,
        "rougel-8": 0.8155339805825242,
        "rougel-7": 0.4222222222222222,
        "rougel-25": 0.6779661016949152,
        "rougel-60": 0.20833333333333334,
        "rougel-65": 0.8429752066115703,
        "rougel-142": 0.8031496062992127,
        "rougel-172": 0.4126984126984127,
        "meteor-182": 0.8926209386281589,
        "meteor-30": 0.9111569343065693,
        "meteor-6": 0.2201052622771126,
        "meteor-77": 0.8377569902689672,
        "meteor-68": 0.33633040935672515,
        "meteor-62": 0.9085408512488891,
        "meteor-37": 0.21397471910112362,
        "meteor-28": 0.7065237969028058,
        "meteor-196": 0.878430366760708,
        "meteor-156": 0.369573839991677,
        "meteor-24": 0.9294537193723919,
        "meteor-168": 0.907551094890511,
        "meteor-119": 0.8902535714285714,
        "meteor-8": 0.724761553352911,
        "meteor-7": 0.3847287401664059,
        "meteor-25": 0.6244897959183673,
        "meteor-60": 0.34476012099468895,
        "meteor-65": 0.9396366754496817,
        "meteor-142": 0.9226476868690021,
        "meteor-172": 0.574859196205635,
        "ruby-182": 0.6764705882352942,
        "ruby-30": 0.7741935483870968,
        "ruby-6": 0.1428571428571429,
        "ruby-77": 0.5,
        "ruby-68": 0.33333333333333337,
        "ruby-62": 0.7619047619047619,
        "ruby-37": 0.16666666666666663,
        "ruby-28": 0.6111111111111112,
        "ruby-196": 0.6619718309859155,
        "ruby-156": 0.2777777777777778,
        "ruby-24": 0.7903225806451613,
        "ruby-168": 0.7419354838709677,
        "ruby-119": 0.6486486486486487,
        "ruby-8": 0.7037037037037037,
        "ruby-7": 0.2592592592592593,
        "ruby-25": 0.546875,
        "ruby-60": 0.1159420289855072,
        "ruby-65": 0.7462686567164178,
        "ruby-142": 0.6849315068493151,
        "ruby-172": 0.2518518518518519,
        "codebertscore_f1-182": 0.9408470392227173,
        "codebertscore_f3-182": 0.9551769495010376,
        "codebertscore_f1-30": 0.934067964553833,
        "codebertscore_f3-30": 0.9346800446510315,
        "codebertscore_f1-6": 0.7378689050674438,
        "codebertscore_f3-6": 0.7448922991752625,
        "codebertscore_f1-77": 0.8886005282402039,
        "codebertscore_f3-77": 0.9352933764457703,
        "codebertscore_f1-68": 0.8328210711479187,
        "codebertscore_f3-68": 0.8169820308685303,
        "codebertscore_f1-62": 0.9344680309295654,
        "codebertscore_f3-62": 0.9378610253334045,
        "codebertscore_f1-37": 0.7702357769012451,
        "codebertscore_f3-37": 0.7773641347885132,
        "codebertscore_f1-28": 0.8936184048652649,
        "codebertscore_f3-28": 0.9154480695724487,
        "codebertscore_f1-196": 0.9141331911087036,
        "codebertscore_f3-196": 0.9221859574317932,
        "codebertscore_f1-156": 0.827562689781189,
        "codebertscore_f3-156": 0.8228214979171753,
        "codebertscore_f1-24": 0.9391981363296509,
        "codebertscore_f3-24": 0.9397574067115784,
        "codebertscore_f1-168": 0.9316799640655518,
        "codebertscore_f3-168": 0.9318893551826477,
        "codebertscore_f1-119": 0.9215273857116699,
        "codebertscore_f3-119": 0.9284926652908325,
        "codebertscore_f1-8": 0.9389194250106812,
        "codebertscore_f3-8": 0.9327717423439026,
        "codebertscore_f1-7": 0.8159017562866211,
        "codebertscore_f3-7": 0.818661630153656,
        "codebertscore_f1-25": 0.9179791808128357,
        "codebertscore_f3-25": 0.9331359267234802,
        "codebertscore_f1-60": 0.6982977390289307,
        "codebertscore_f3-60": 0.7455734014511108,
        "codebertscore_f1-65": 0.9546949863433838,
        "codebertscore_f3-65": 0.9626322984695435,
        "codebertscore_f1-142": 0.9105517864227295,
        "codebertscore_f3-142": 0.935990571975708,
        "codebertscore_f1-172": 0.7484493851661682,
        "codebertscore_f3-172": 0.8301749229431152,
        "codebertscore_s_f1-182": 0.9423826932907104,
        "codebertscore_s_f3-182": 0.9573270678520203,
        "codebertscore_s_f1-30": 0.9344071745872498,
        "codebertscore_s_f3-30": 0.9362868666648865,
        "codebertscore_s_f1-6": 0.742458701133728,
        "codebertscore_s_f3-6": 0.7506643533706665,
        "codebertscore_s_f1-77": 0.8930475115776062,
        "codebertscore_s_f3-77": 0.939814567565918,
        "codebertscore_s_f1-68": 0.818547785282135,
        "codebertscore_s_f3-68": 0.8047371506690979,
        "codebertscore_s_f1-62": 0.9376422166824341,
        "codebertscore_s_f3-62": 0.9409385919570923,
        "codebertscore_s_f1-37": 0.7740033268928528,
        "codebertscore_s_f3-37": 0.7821091413497925,
        "codebertscore_s_f1-28": 0.898362934589386,
        "codebertscore_s_f3-28": 0.92056804895401,
        "codebertscore_s_f1-196": 0.9232667684555054,
        "codebertscore_s_f3-196": 0.9310585260391235,
        "codebertscore_s_f1-156": 0.8204445838928223,
        "codebertscore_s_f3-156": 0.8186593651771545,
        "codebertscore_s_f1-24": 0.9429709911346436,
        "codebertscore_s_f3-24": 0.9434388875961304,
        "codebertscore_s_f1-168": 0.9332483410835266,
        "codebertscore_s_f3-168": 0.9346856474876404,
        "codebertscore_s_f1-119": 0.9215888381004333,
        "codebertscore_s_f3-119": 0.9288107752799988,
        "codebertscore_s_f1-8": 0.9367870092391968,
        "codebertscore_s_f3-8": 0.9313216805458069,
        "codebertscore_s_f1-7": 0.8197730183601379,
        "codebertscore_s_f3-7": 0.8228867053985596,
        "codebertscore_s_f1-25": 0.9194211363792419,
        "codebertscore_s_f3-25": 0.9344530701637268,
        "codebertscore_s_f1-60": 0.708381712436676,
        "codebertscore_s_f3-60": 0.7602745890617371,
        "codebertscore_s_f1-65": 0.9550760388374329,
        "codebertscore_s_f3-65": 0.9622896909713745,
        "codebertscore_s_f1-142": 0.9174074530601501,
        "codebertscore_s_f3-142": 0.9427410364151001,
        "codebertscore_s_f1-172": 0.7551156282424927,
        "codebertscore_s_f3-172": 0.8383041620254517,
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-119": 4,
        "raw_gpt35_nsnr-119": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nswr-182": 4,
        "raw_gpt35_nswr-182": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-119": 4,
        "raw_gpt35_nswr-119": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-142": 4,
        "raw_gpt35_nswr-142": "4",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n",
        "snippet": [
            "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n"
        ],
        "simplified": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
        "task_id": "128",
        "164": "// your code here\n    return 0;",
        "grade-164": {
            "execution": 0
        },
        "28": "// your code here\n  long product = 1;\n  long sum = 0;\n  int count = 0;\n  for(int i = 0; i < arr.size(); i++){\n    if(arr[i] > 0){\n      count++;\n      product *= 1;\n      sum += arr[i];\n    }\n    else if(arr[i] < 0){\n      count++;\n      product *= -1;\n      sum += arr[i];\n    }\n    else if(arr[i] == 0){\n      count++;\n      product *= 0;\n      sum += arr[i];\n    }\n  }\n  if(count != 0){\n    return product * sum;\n  }\n  else{\n    return std::nullopt;\n  }",
        "grade-28": {
            "execution": 0
        },
        "6": "// return std::nullopt;\n    // return std::make_optional(0L);\n    long sum = 0;\n    for (auto it = arr.begin(); it != arr.end(); it++) {\n        sum += *it;\n    }\n    return std::make_optional(sum);",
        "grade-6": {
            "execution": 0
        },
        "191": "if (arr.empty()) {\n    return std::nullopt;\n  }\n  int sign = 0;\n  long product = 1;\n  long sum = 0;\n  for (auto elem : arr) {\n    sign = std::signbit(elem) ? -1 : 1;\n    if (sign == 0) {\n      product = product * 0;\n    } else {\n      product = product * sign;\n    }\n    sum = sum + std::abs(elem);\n  }\n  return product * sum;",
        "grade-191": {
            "execution": 0
        },
        "70": "if (arr.empty()) return std::nullopt;\n  long s = 1;\n  long sum = 0;\n  for (auto a : arr) {\n    if (a != 0) {\n      s *= (a / abs(a));\n      sum += abs(a);\n    }\n  }\n  return std::make_optional(s * sum);",
        "grade-70": {
            "execution": 0
        },
        "62": "long long ans = 1;\n\tlong long sum = 0;\n\tfor (long n : arr) {\n\t\tsum += std::abs(n);\n\t\tif (n < 0) ans *= -1;\n\t}\n\tif (arr.size() == 0) return {};\n\treturn {sum * ans};",
        "grade-62": {
            "execution": 0
        },
        "57": "if (arr.empty()) {\n    return std::nullopt;\n  }\n\n  int sign_multiply = 1;\n  int sum_magnitude = 0;\n  for (long & number : arr) {\n    if (number == 0) {\n      continue;\n    }\n    sign_multiply *= number / std::abs(number);\n    sum_magnitude += std::abs(number);\n  }\n  return sign_multiply * sum_magnitude;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    if(arr.size()==0) return {};\n    long mults = 1;\n    long sum = 0;\n    for(auto x: arr){\n        int s = 1;\n        if(x<0) s = -1;\n        mults *= s;\n        sum += abs(x);\n    }\n    return sum*mults;",
        "grade-35": {
            "execution": 0
        },
        "190": "assert(arr.size() < 6);\n    long result = 0;\n    long prodsigns = 1;\n    for (auto i : arr) {\n        prodsigns *= std::copysign(1, i);\n        result += std::abs(i);\n    }\n    if (arr.size() == 0)\n        return std::nullopt;\n    return result * prodsigns;",
        "grade-190": {
            "execution": 0
        },
        "26": "long prod = 1;\n    long sum = 0;\n    if (arr.size() == 0)\n        return std::nullopt;\n    for (auto &i : arr) {\n        if (i < 0) {\n            prod *= -1;\n            sum += std::abs(i);\n        } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return prod * sum;",
        "grade-26": {
            "execution": 0
        },
        "174": "// Enter your code here\n  int prod = 1;\n  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i];\n    } else {\n      prod *= 0;\n    }\n  }\n  return prod * sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "if (arr.empty()) return std::nullopt;\n  long sign = 1;\n  for (auto i : arr) {\n    if (i > 0)\n      sign *= 1;\n    else if (i < 0)\n      sign *= -1;\n    else\n      sign *= 0;\n  }\n  long sum = 0;\n  for (auto i : arr) {\n    sum += abs(i);\n  }\n  return sign * sum;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (arr.empty()) {\n        return std::nullopt;\n    }\n    int mul = 1;\n    long sum = 0;\n    for (const auto& element : arr) {\n        if (element < 0) {\n            mul *= -1;\n        } else if (element > 0) {\n            mul *= 1;\n        } else {\n            mul *= 0;\n        }\n        sum += std::abs(element);\n    }\n    return mul * sum;",
        "grade-22": {
            "execution": 0
        },
        "152": "long res = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            res *= 1;\n            sum += i;\n        } else if (i < 0) {\n            res *= -1;\n            sum += -i;\n        } else {\n            res *= 0;\n        }\n    }\n    return res * sum;",
        "grade-152": {
            "execution": 1
        },
        "108": "if (arr.empty()) {\n    return std::nullopt;\n  }\n\n  long result = 1;\n  for (auto i : arr) {\n    long sign = std::copysign(1, i);\n    result *= sign * std::abs(i);\n  }\n  return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "if (arr.empty()) {\n    return std::nullopt;\n  }\n  long mult = 1;\n  long sum = 0;\n  for (auto n : arr) {\n    if (n < 0) {\n      mult *= -1;\n    } else if (n > 0) {\n      sum += std::abs(n);\n    }\n  }\n  return mult * sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "long product = 1;\n    long sum = 0;\n    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    for (int x : arr) {\n        if (x < 0) {\n            product *= -1;\n        } else if (x > 0) {\n            product *= 1;\n        } else {\n            product *= 0;\n        }\n        sum += std::abs(x);\n    }\n    return sum * product;",
        "grade-7": {
            "execution": 0
        },
        "23": "long long prod = 1;\n  long long sum = 0;\n  for (long num : arr) {\n    sum += abs(num);\n    prod *= (num > 0) - (num < 0);\n  }\n  return sum * prod;",
        "grade-23": {
            "execution": 1
        },
        "55": "if (arr.empty()) return std::nullopt;\n\tlong sum = 0;\n\tint prod = 1;\n\tfor (auto &e : arr) {\n\t\tif (e < 0) prod *= -1;\n\t\tsum += abs(e);\n\t}\n\treturn sum * prod;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (arr.empty()) return std::nullopt;\n\tint sign_sum = 0;\n\tfor (const auto& x : arr) {\n\t\tif (x > 0) sign_sum++;\n\t\telse if (x < 0) sign_sum--;\n\t}\n\tlong magn_sum = 0;\n\tfor (const auto& x : arr) {\n\t\tmagn_sum += std::abs(x);\n\t}\n\treturn magn_sum * sign_sum;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 3.8139522087198955e-06,
        "bleu-28": 0.31282635566196143,
        "bleu-6": 0.13763380360479002,
        "bleu-191": 0.13827963663527154,
        "bleu-70": 0.1466550443663654,
        "bleu-62": 0.25679274653970574,
        "bleu-57": 0.12359636365840049,
        "bleu-35": 0.2879209657384188,
        "bleu-190": 0.2634915770834601,
        "bleu-26": 0.3074548538671928,
        "bleu-174": 0.40710888591901495,
        "bleu-140": 0.23550178435462135,
        "bleu-22": 0.1216493393517361,
        "bleu-152": 0.08560402942434818,
        "bleu-108": 0.10132809119554613,
        "bleu-8": 0.15088858936126512,
        "bleu-7": 0.2985886191606501,
        "bleu-23": 0.1388907699072864,
        "bleu-55": 0.18463945564341475,
        "bleu-59": 0.1077768699034598,
        "codebleu-164": 0.02710731377466798,
        "codebleu-28": 0.6646534558624853,
        "codebleu-6": 0.3685965068013849,
        "codebleu-191": 0.5167459550513843,
        "codebleu-70": 0.4295149962079314,
        "codebleu-62": 0.4139787057125787,
        "codebleu-57": 0.42568404884337085,
        "codebleu-35": 0.49236608864460685,
        "codebleu-190": 0.4998682469522642,
        "codebleu-26": 0.5139303066151256,
        "codebleu-174": 0.6135879954451222,
        "codebleu-140": 0.5245780043650207,
        "codebleu-22": 0.49635180806865464,
        "codebleu-152": 0.36670466814851765,
        "codebleu-108": 0.3407680878039863,
        "codebleu-8": 0.44415150028688616,
        "codebleu-7": 0.5148048244593211,
        "codebleu-23": 0.26873629165318247,
        "codebleu-55": 0.3783813077439913,
        "codebleu-59": 0.5038207223100067,
        "chrf-164": 0.046842941609197115,
        "chrf-28": 0.4603826117736578,
        "chrf-6": 0.24042355206383795,
        "chrf-191": 0.2823835178231581,
        "chrf-70": 0.2733724791466928,
        "chrf-62": 0.3226636685291926,
        "chrf-57": 0.23510109645548968,
        "chrf-35": 0.3627071009264593,
        "chrf-190": 0.3805774766470373,
        "chrf-26": 0.37514186610621036,
        "chrf-174": 0.4535965499783083,
        "chrf-140": 0.3095668268095489,
        "chrf-22": 0.2396011801837298,
        "chrf-152": 0.19742153778761767,
        "chrf-108": 0.21702988299238143,
        "chrf-8": 0.24550907186624635,
        "chrf-7": 0.38312549321755607,
        "chrf-23": 0.2558209817998686,
        "chrf-55": 0.34625554293654637,
        "chrf-59": 0.26203509033064104,
        "rougel-164": 0.060606060606060615,
        "rougel-28": 0.5020576131687243,
        "rougel-6": 0.358974358974359,
        "rougel-191": 0.4385026737967914,
        "rougel-70": 0.3902439024390244,
        "rougel-62": 0.43312101910828027,
        "rougel-57": 0.40718562874251496,
        "rougel-35": 0.4634146341463415,
        "rougel-190": 0.4550898203592814,
        "rougel-26": 0.4767441860465117,
        "rougel-174": 0.5549738219895288,
        "rougel-140": 0.45454545454545453,
        "rougel-22": 0.3999999999999999,
        "rougel-152": 0.4074074074074074,
        "rougel-108": 0.41333333333333333,
        "rougel-8": 0.41212121212121217,
        "rougel-7": 0.3977900552486187,
        "rougel-23": 0.4428571428571429,
        "rougel-55": 0.4533333333333333,
        "rougel-59": 0.42528735632183906,
        "meteor-164": 0.018137847642079808,
        "meteor-28": 0.632156974594146,
        "meteor-6": 0.2619240483323098,
        "meteor-191": 0.31664363455719635,
        "meteor-70": 0.2844018158666888,
        "meteor-62": 0.3548017483688966,
        "meteor-57": 0.2565964993911854,
        "meteor-35": 0.39993566483133175,
        "meteor-190": 0.392737016958117,
        "meteor-26": 0.4613134466412303,
        "meteor-174": 0.6150447456186008,
        "meteor-140": 0.41373940776221063,
        "meteor-22": 0.3291878924119094,
        "meteor-152": 0.38313033707865174,
        "meteor-108": 0.22162550268567735,
        "meteor-8": 0.32479112984294634,
        "meteor-7": 0.3805909722958027,
        "meteor-23": 0.3523123945966143,
        "meteor-55": 0.3642736111888593,
        "meteor-59": 0.35227272727272724,
        "ruby-164": 0.03296703296703296,
        "ruby-28": 0.3486842105263158,
        "ruby-6": 0.19780219780219777,
        "ruby-191": 0.26041666666666663,
        "ruby-70": 0.2417582417582418,
        "ruby-62": 0.27472527472527475,
        "ruby-57": 0.2637362637362637,
        "ruby-35": 0.3296703296703297,
        "ruby-190": 0.3076923076923077,
        "ruby-26": 0.23076923076923073,
        "ruby-174": 0.37,
        "ruby-140": 0.27472527472527475,
        "ruby-22": 0.23076923076923073,
        "ruby-152": 0.25274725274725274,
        "ruby-108": 0.29670329670329665,
        "ruby-8": 0.2637362637362637,
        "ruby-7": 0.1648351648351648,
        "ruby-23": 0.3296703296703297,
        "ruby-55": 0.31868131868131866,
        "ruby-59": 0.2417582417582418,
        "codebertscore_f1-164": 0.5871568322181702,
        "codebertscore_f3-164": 0.5631113052368164,
        "codebertscore_f1-28": 0.8125004172325134,
        "codebertscore_f3-28": 0.8249518871307373,
        "codebertscore_f1-6": 0.754231333732605,
        "codebertscore_f3-6": 0.7649380564689636,
        "codebertscore_f1-191": 0.7931104302406311,
        "codebertscore_f3-191": 0.8006725311279297,
        "codebertscore_f1-70": 0.791965901851654,
        "codebertscore_f3-70": 0.7974833846092224,
        "codebertscore_f1-62": 0.8164767026901245,
        "codebertscore_f3-62": 0.8109136819839478,
        "codebertscore_f1-57": 0.781460702419281,
        "codebertscore_f3-57": 0.795410692691803,
        "codebertscore_f1-35": 0.8197059035301208,
        "codebertscore_f3-35": 0.8266059756278992,
        "codebertscore_f1-190": 0.8186269998550415,
        "codebertscore_f3-190": 0.833519697189331,
        "codebertscore_f1-26": 0.824328601360321,
        "codebertscore_f3-26": 0.8331640958786011,
        "codebertscore_f1-174": 0.8505274057388306,
        "codebertscore_f3-174": 0.8605402112007141,
        "codebertscore_f1-140": 0.8241134881973267,
        "codebertscore_f3-140": 0.8301525712013245,
        "codebertscore_f1-22": 0.7907875776290894,
        "codebertscore_f3-22": 0.7966059446334839,
        "codebertscore_f1-152": 0.8068654537200928,
        "codebertscore_f3-152": 0.8035897016525269,
        "codebertscore_f1-108": 0.7633611559867859,
        "codebertscore_f3-108": 0.7578036785125732,
        "codebertscore_f1-8": 0.8173437714576721,
        "codebertscore_f3-8": 0.8178231716156006,
        "codebertscore_f1-7": 0.8081722855567932,
        "codebertscore_f3-7": 0.8141745924949646,
        "codebertscore_f1-23": 0.7930967211723328,
        "codebertscore_f3-23": 0.7799737453460693,
        "codebertscore_f1-55": 0.814979076385498,
        "codebertscore_f3-55": 0.8159903883934021,
        "codebertscore_f1-59": 0.796035647392273,
        "codebertscore_f3-59": 0.8024535775184631,
        "codebertscore_s_f1-164": 0.5974021553993225,
        "codebertscore_s_f3-164": 0.579673707485199,
        "codebertscore_s_f1-28": 0.8156595826148987,
        "codebertscore_s_f3-28": 0.8281347155570984,
        "codebertscore_s_f1-6": 0.7546127438545227,
        "codebertscore_s_f3-6": 0.7611806392669678,
        "codebertscore_s_f1-191": 0.791743278503418,
        "codebertscore_s_f3-191": 0.7989529967308044,
        "codebertscore_s_f1-70": 0.794619083404541,
        "codebertscore_s_f3-70": 0.7979139089584351,
        "codebertscore_s_f1-62": 0.8164112567901611,
        "codebertscore_s_f3-62": 0.8099266886711121,
        "codebertscore_s_f1-57": 0.7736573815345764,
        "codebertscore_s_f3-57": 0.7869953513145447,
        "codebertscore_s_f1-35": 0.8156954050064087,
        "codebertscore_s_f3-35": 0.8219006657600403,
        "codebertscore_s_f1-190": 0.815537691116333,
        "codebertscore_s_f3-190": 0.8315293788909912,
        "codebertscore_s_f1-26": 0.8294664025306702,
        "codebertscore_s_f3-26": 0.8368706703186035,
        "codebertscore_s_f1-174": 0.8486979007720947,
        "codebertscore_s_f3-174": 0.8573722243309021,
        "codebertscore_s_f1-140": 0.8221068978309631,
        "codebertscore_s_f3-140": 0.8264861702919006,
        "codebertscore_s_f1-22": 0.7931237816810608,
        "codebertscore_s_f3-22": 0.7989348769187927,
        "codebertscore_s_f1-152": 0.8058423399925232,
        "codebertscore_s_f3-152": 0.803094208240509,
        "codebertscore_s_f1-108": 0.7637928128242493,
        "codebertscore_s_f3-108": 0.7595793008804321,
        "codebertscore_s_f1-8": 0.8128914833068848,
        "codebertscore_s_f3-8": 0.8119109272956848,
        "codebertscore_s_f1-7": 0.814737856388092,
        "codebertscore_s_f3-7": 0.8217757940292358,
        "codebertscore_s_f1-23": 0.7910962700843811,
        "codebertscore_s_f3-23": 0.7765199542045593,
        "codebertscore_s_f1-55": 0.8146796822547913,
        "codebertscore_s_f3-55": 0.8148685693740845,
        "codebertscore_s_f1-59": 0.7921077013015747,
        "codebertscore_s_f3-59": 0.7970355153083801,
        "gpt35_nsnr-164": 2,
        "raw_gpt35_nsnr-164": "2",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "3 - The code correctly calculates the sum of magnitudes of integers multiplied by product of all signs of each number in the array. However, it does not handle the case where there are 0s in the array, which should result in a sum of 0.",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 0,
        "raw_gpt35_nsnr-152": "3 - The code snippet correctly calculates the product of signs and the sum of magnitudes of integers in the array. However, it does not handle the case of an empty array as required by the problem statement. The use of std::optional could have been helpful in this case.",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 0,
        "raw_gpt35_nsnr-59": "3 - The code correctly calculates the sum of magnitudes of integers multiplied by product of all signs of each number in the array. However, it does not return None for empty arr as required by the problem statement.",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "Score: 1",
        "gpt35_nswr-191": 4,
        "raw_gpt35_nswr-191": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 2,
        "raw_gpt35_nswr-152": "2",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n",
        "snippet": [
            "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n"
        ],
        "simplified": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "task_id": "100",
        "164": "std::vector<long> result;\n  while (n) {\n    result.push_back(n);\n    n = n % 2 ? n + 2 : n + 1;\n  }\n  return result;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::vector<long> levels;\n    long val = n;\n    while (val != 0) {\n        levels.push_back(val);\n        if (val % 2 == 0) {\n            val = val / 2;\n        } else {\n            val = val / 2 + 1;\n        }\n    }\n    return levels;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> pile;\n  pile.push_back(n);\n  for (long i = 1; i < n; i++) {\n    if (pile[i-1] % 2 == 0) {\n      pile.push_back(pile[i-1] + 1);\n    } else {\n      pile.push_back(pile[i-1] + 2);\n    }\n  }\n  return pile;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::vector<long> result;\n  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n += 1;\n    } else {\n      n += 2;\n    }\n  }\n  return result;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::vector<long> result;\n    // Implement your solution here\n    if(n==1) {\n        result.push_back(1);\n        return result;\n    }\n    result.push_back(n);\n    if(n%2==0) {\n        n+=1;\n    }\n    else {\n        n+=2;\n    }\n    result.push_back(n);\n    if(n%2==0) {\n        n+=1;\n    }\n    else {\n        n+=2;\n    }\n    result.push_back(n);\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> pile;\n  pile.push_back(n);\n  n = n%2 ? n+2 : n+1;\n  while(n>0) {\n    pile.push_back(n);\n    n = n%2 ? n+2 : n+1;\n  }\n  return pile;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> pile;\n  long i = 1;\n  while (i <= n) {\n    pile.push_back(i);\n    if (i % 2 == 0) {\n      i++;\n    } else {\n      i += 2;\n    }\n  }\n  return pile;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> v;\n  for (long i = n; i > 0; i -= 2) {\n    v.push_back(i);\n  }\n  for (long i = n + 2; i > 0; i -= 2) {\n    v.push_back(i);\n  }\n  return v;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::vector<long> result{n};\n    while (n >= 2) {\n        if (n % 2) {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        result.push_back(n);\n    }\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n  for (int i = 0; i < n; i++) {\n    result.push_back(n);\n    if (n % 2) {\n      n = n + 2;\n    } else {\n      n = n + 1;\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> vec;\n  while (n > 0) {\n    vec.push_back(n);\n    n = n % 2 == 0 ? n + 1 : n + 2;\n  }\n  return vec;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::vector<long> result;\n  for (int i = 0; i < n; i++) {\n    if (i == 0) {\n      result.push_back(n);\n    } else {\n      long last_element = result[i - 1];\n      if (last_element % 2 == 0) {\n        result.push_back(last_element + 2);\n      } else {\n        result.push_back(last_element + 1);\n      }\n    }\n  }\n  return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::vector<long> pile;\n    for (long i = n; i > 0; --i) {\n        pile.push_back(i);\n        if (i % 2 == 0)\n            ++i;\n    }\n    std::reverse(pile.begin(), pile.end());\n    return pile;",
        "grade-22": {
            "execution": 0
        },
        "152": "long p = n;\n  std::vector<long> result;\n  while (p > 0) {\n    result.push_back(p);\n    p = (p & 1) ? p + 2 : p + 1;\n  }\n  std::reverse(result.begin(), result.end());\n  return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "assert(n > 0);\n  std::vector<long> result{n};\n  if (n > 1) {\n    long next = n % 2 == 0 ? n + 2 : n + 1;\n    result.push_back(next);\n    for (int i = 1; i < n - 1; ++i) {\n      next = next % 2 == 0 ? next + 2 : next + 1;\n      result.push_back(next);\n    }\n  }\n  return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> v;\n  long i = 1;\n  while (n > 0) {\n    if (n > 0) {\n      v.push_back(n);\n      n -= i;\n    }\n    i++;\n  }\n  return v;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> res;\n  for (long stones = n; stones > 0; stones -= 2) {\n    res.push_back(stones);\n  }\n  return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Generate the vector of stones.\n    std::vector<long> vector;\n    vector.push_back(n);\n    long stones = n;\n    for (long i = 0; i < n - 1; i++) {\n        if (stones % 2 == 0) {\n            stones++;\n        } else {\n            stones += 2;\n        }\n        vector.push_back(stones);\n    }\n    return vector;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> pile;\n  pile.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    pile.push_back(n);\n  }\n  return pile;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n  result.push_back(n);\n  while (n > 0) {\n    if (n % 2 == 0) {\n      n /= 2;\n      result.push_back(n - 1);\n    } else {\n      n /= 2;\n      result.push_back(n);\n    }\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.06509158028309919,
        "bleu-28": 0.05191825359652038,
        "bleu-6": 0.2589282532316954,
        "bleu-191": 0.07817495323645172,
        "bleu-70": 0.0432845028264382,
        "bleu-62": 0.052919548247078126,
        "bleu-57": 0.11242051674721615,
        "bleu-35": 0.07998078004181913,
        "bleu-190": 0.11734586102083117,
        "bleu-26": 0.29538803391992063,
        "bleu-174": 0.06404475474791449,
        "bleu-140": 0.21539463043640258,
        "bleu-22": 0.08135902646836213,
        "bleu-152": 0.06343005002791577,
        "bleu-108": 0.1775654636228764,
        "bleu-8": 0.12496320910599078,
        "bleu-7": 0.08158360704458854,
        "bleu-23": 0.14048255165197435,
        "bleu-55": 0.0488730340718844,
        "bleu-59": 0.048042821124693574,
        "codebleu-164": 0.4249554367201425,
        "codebleu-28": 0.49286987522281633,
        "codebleu-6": 0.6659610227530489,
        "codebleu-191": 0.42798573975044557,
        "codebleu-70": 0.4830659536541889,
        "codebleu-62": 0.5245989304812834,
        "codebleu-57": 0.5166510422174578,
        "codebleu-35": 0.5397504456327985,
        "codebleu-190": 0.44212094856105927,
        "codebleu-26": 0.6185866346754593,
        "codebleu-174": 0.4249554367201425,
        "codebleu-140": 0.6744290391153098,
        "codebleu-22": 0.5661319073083779,
        "codebleu-152": 0.5381461675579322,
        "codebleu-108": 0.6341485901626158,
        "codebleu-8": 0.5181582603640477,
        "codebleu-7": 0.4134060514844988,
        "codebleu-23": 0.6230254021441975,
        "codebleu-55": 0.5117647058823529,
        "codebleu-59": 0.49286987522281633,
        "chrf-164": 0.2871629322732158,
        "chrf-28": 0.24757592143631169,
        "chrf-6": 0.3837836354719231,
        "chrf-191": 0.29568884910591964,
        "chrf-70": 0.27037168973661235,
        "chrf-62": 0.26654212272934713,
        "chrf-57": 0.2941857750445711,
        "chrf-35": 0.3054758781400985,
        "chrf-190": 0.30480014229613656,
        "chrf-26": 0.4263420148666832,
        "chrf-174": 0.2633353569529454,
        "chrf-140": 0.36669119382169035,
        "chrf-22": 0.31071823684960065,
        "chrf-152": 0.3003213626408527,
        "chrf-108": 0.3821583781436428,
        "chrf-8": 0.29777659161674674,
        "chrf-7": 0.2920857008050885,
        "chrf-23": 0.2944391861762689,
        "chrf-55": 0.26291631861251097,
        "chrf-59": 0.27614042610285794,
        "rougel-164": 0.37209302325581395,
        "rougel-28": 0.3333333333333333,
        "rougel-6": 0.523076923076923,
        "rougel-191": 0.3673469387755102,
        "rougel-70": 0.326797385620915,
        "rougel-62": 0.34862385321100914,
        "rougel-57": 0.4271844660194175,
        "rougel-35": 0.41441441441441446,
        "rougel-190": 0.3838383838383838,
        "rougel-26": 0.5283018867924528,
        "rougel-174": 0.37362637362637363,
        "rougel-140": 0.4525547445255474,
        "rougel-22": 0.4035087719298245,
        "rougel-152": 0.3185840707964601,
        "rougel-108": 0.38620689655172413,
        "rougel-8": 0.39583333333333326,
        "rougel-7": 0.40476190476190477,
        "rougel-23": 0.421875,
        "rougel-55": 0.3243243243243243,
        "rougel-59": 0.3333333333333333,
        "meteor-164": 0.2489177489177489,
        "meteor-28": 0.298410068952027,
        "meteor-6": 0.5772089300517395,
        "meteor-191": 0.3258874752432618,
        "meteor-70": 0.3894764798700183,
        "meteor-62": 0.33918671248568166,
        "meteor-57": 0.43013164478338134,
        "meteor-35": 0.37897977164050795,
        "meteor-190": 0.35349087003222335,
        "meteor-26": 0.5402489626556016,
        "meteor-174": 0.2877594872709968,
        "meteor-140": 0.44546783625731007,
        "meteor-22": 0.44494106182417875,
        "meteor-152": 0.3688154709736655,
        "meteor-108": 0.51158809236446,
        "meteor-8": 0.3283898305084746,
        "meteor-7": 0.30971069285772995,
        "meteor-23": 0.5076058201058201,
        "meteor-55": 0.32749220518254646,
        "meteor-59": 0.36806278633902534,
        "ruby-164": 0.14893617021276595,
        "ruby-28": 0.16393442622950816,
        "ruby-6": 0.3975903614457831,
        "ruby-191": 0.11764705882352944,
        "ruby-70": 0.2075471698113207,
        "ruby-62": 0.24193548387096775,
        "ruby-57": 0.1785714285714286,
        "ruby-35": 0.28125,
        "ruby-190": 0.25,
        "ruby-26": 0.3728813559322034,
        "ruby-174": 0.14893617021276595,
        "ruby-140": 0.28888888888888886,
        "ruby-22": 0.25373134328358204,
        "ruby-152": 0.19696969696969702,
        "ruby-108": 0.23469387755102045,
        "ruby-8": 0.20408163265306123,
        "ruby-7": 0.23404255319148937,
        "ruby-23": 0.2962962962962963,
        "ruby-55": 0.21875,
        "ruby-59": 0.23880597014925375,
        "codebertscore_f1-164": 0.826210081577301,
        "codebertscore_f3-164": 0.8078904747962952,
        "codebertscore_f1-28": 0.7609168887138367,
        "codebertscore_f3-28": 0.7692088484764099,
        "codebertscore_f1-6": 0.8514477610588074,
        "codebertscore_f3-6": 0.8644247055053711,
        "codebertscore_f1-191": 0.8090029358863831,
        "codebertscore_f3-191": 0.8072061538696289,
        "codebertscore_f1-70": 0.7560896873474121,
        "codebertscore_f3-70": 0.7610458135604858,
        "codebertscore_f1-62": 0.8104031085968018,
        "codebertscore_f3-62": 0.7948206663131714,
        "codebertscore_f1-57": 0.8217747807502747,
        "codebertscore_f3-57": 0.8216923475265503,
        "codebertscore_f1-35": 0.832904040813446,
        "codebertscore_f3-35": 0.8247052431106567,
        "codebertscore_f1-190": 0.8073562383651733,
        "codebertscore_f3-190": 0.7925443053245544,
        "codebertscore_f1-26": 0.8509284853935242,
        "codebertscore_f3-26": 0.8551503419876099,
        "codebertscore_f1-174": 0.8125628232955933,
        "codebertscore_f3-174": 0.8018892407417297,
        "codebertscore_f1-140": 0.8147847652435303,
        "codebertscore_f3-140": 0.8444108366966248,
        "codebertscore_f1-22": 0.7971957325935364,
        "codebertscore_f3-22": 0.8043330311775208,
        "codebertscore_f1-152": 0.7815715670585632,
        "codebertscore_f3-152": 0.7929784655570984,
        "codebertscore_f1-108": 0.8181661367416382,
        "codebertscore_f3-108": 0.8406726717948914,
        "codebertscore_f1-8": 0.8103390336036682,
        "codebertscore_f3-8": 0.8057984709739685,
        "codebertscore_f1-7": 0.8198038339614868,
        "codebertscore_f3-7": 0.8099117875099182,
        "codebertscore_f1-23": 0.7861983776092529,
        "codebertscore_f3-23": 0.8178288340568542,
        "codebertscore_f1-55": 0.7927222847938538,
        "codebertscore_f3-55": 0.7853274941444397,
        "codebertscore_f1-59": 0.8057594299316406,
        "codebertscore_f3-59": 0.7993787527084351,
        "codebertscore_s_f1-164": 0.8156242966651917,
        "codebertscore_s_f3-164": 0.798190176486969,
        "codebertscore_s_f1-28": 0.7592916488647461,
        "codebertscore_s_f3-28": 0.7693645358085632,
        "codebertscore_s_f1-6": 0.8470707535743713,
        "codebertscore_s_f3-6": 0.8612231612205505,
        "codebertscore_s_f1-191": 0.8000698685646057,
        "codebertscore_s_f3-191": 0.7979162931442261,
        "codebertscore_s_f1-70": 0.7616172432899475,
        "codebertscore_s_f3-70": 0.7686387300491333,
        "codebertscore_s_f1-62": 0.8001529574394226,
        "codebertscore_s_f3-62": 0.7891955971717834,
        "codebertscore_s_f1-57": 0.8212136030197144,
        "codebertscore_s_f3-57": 0.8205147385597229,
        "codebertscore_s_f1-35": 0.8220282196998596,
        "codebertscore_s_f3-35": 0.8146474361419678,
        "codebertscore_s_f1-190": 0.7999352216720581,
        "codebertscore_s_f3-190": 0.7879971265792847,
        "codebertscore_s_f1-26": 0.850959300994873,
        "codebertscore_s_f3-26": 0.8561491370201111,
        "codebertscore_s_f1-174": 0.8023536801338196,
        "codebertscore_s_f3-174": 0.7944411635398865,
        "codebertscore_s_f1-140": 0.8228150010108948,
        "codebertscore_s_f3-140": 0.8557199835777283,
        "codebertscore_s_f1-22": 0.797617495059967,
        "codebertscore_s_f3-22": 0.8041217923164368,
        "codebertscore_s_f1-152": 0.7848666310310364,
        "codebertscore_s_f3-152": 0.7961989045143127,
        "codebertscore_s_f1-108": 0.818676233291626,
        "codebertscore_s_f3-108": 0.841757595539093,
        "codebertscore_s_f1-8": 0.8081267476081848,
        "codebertscore_s_f3-8": 0.8043429851531982,
        "codebertscore_s_f1-7": 0.8122350573539734,
        "codebertscore_s_f3-7": 0.8036719560623169,
        "codebertscore_s_f1-23": 0.7987987995147705,
        "codebertscore_s_f3-23": 0.8282215595245361,
        "codebertscore_s_f1-55": 0.7872540950775146,
        "codebertscore_s_f3-55": 0.7828314304351807,
        "codebertscore_s_f1-59": 0.796843409538269,
        "codebertscore_s_f3-59": 0.7935387492179871,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\n",
        "snippet": [
            "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n"
        ],
        "simplified": "Given a positive integer N, return the total sum of its digits in binary.",
        "task_id": "84",
        "164": "std::string bin_string = \"\";\n    while(N){\n        bin_string = std::to_string(N%2) + bin_string;\n        N /= 2;\n    }\n    return bin_string;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::string num = \"\";\n\tstd::string binStr = \"\";\n\tint rem, i, j, len;\n\twhile (N != 0) {\n\t\trem = N % 2;\n\t\tnum = num + std::to_string(rem);\n\t\tN = N / 2;\n\t}\n\tlen = num.length();\n\t//std::cout << num << std::endl;\n\t//std::cout << len << std::endl;\n\t//std::cout << num.size() << std::endl;\n\t//std::cout << num.length() << std::endl;\n\tfor (i = len - 1; i >= 0; i--) {\n\t\tbinStr = binStr + num[i];\n\t}\n\treturn binStr;",
        "grade-28": {
            "execution": 0
        },
        "6": "int sum = 0;\n  std::string sumString = \"\";\n  for (int i = 0; i < 10; i++) {\n    sum += (N & 1);\n    N >>= 1;\n  }\n  sumString = std::to_string(sum);\n  return sumString;",
        "grade-6": {
            "execution": 0
        },
        "190": "// Convert number to binary.\n    int temp = N;\n    int num = 0;\n    while (temp != 0) {\n        num = num + temp % 2;\n        temp = temp / 2;\n    }\n    // Return binary sum of digits.\n    return std::to_string(num);",
        "grade-190": {
            "execution": 0
        },
        "70": "std::string s;\n    if(N==0)\n    {\n        s = s + \"0\";\n        return s;\n    }\n    while(N!=0)\n    {\n        if(N%2 == 0)\n        {\n            s = s + \"0\";\n        }\n        else\n        {\n            s = s + \"1\";\n        }\n        N = N/2;\n    }\n    std::reverse(s.begin(),s.end());\n    return s;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string result = \"\";\n    while (N > 0) {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "int sum = 0;\n    while(N != 0) {\n        sum += N % 2;\n        N /= 2;\n    }\n    return std::to_string(sum);",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string binary;\n    binary.reserve(100);\n    for (long i = N; i > 0; i /= 2) {\n        binary += ('0' + i % 2);\n    }\n    long sumOfDigits = 0;\n    for (int i = 0; i < binary.size(); i++) {\n        sumOfDigits += binary[i] - '0';\n    }\n    std::cout << \"The sum of digits of \" << N << \" in binary is: \" << sumOfDigits << std::endl;\n    return binary;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::string result = \"\";\n    do {\n        auto val = N % 2;\n        result = (char)(val + '0') + result;\n        N /= 2;\n    } while (N > 0);\n    return result;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::string ans = \"\";\n    while(N > 0) {\n        ans += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::string result = \"\";\n    std::vector<int> binary_repr;\n    int carry = 0;\n    int sum = 0;\n    while(N) {\n        sum = N % 2 + carry;\n        carry = 0;\n        if(sum > 1) {\n            sum = sum % 2;\n            carry = 1;\n        }\n        binary_repr.push_back(sum);\n        N = N / 2;\n    }\n    if(carry == 1) {\n        binary_repr.push_back(carry);\n    }\n    int i = binary_repr.size() - 1;\n    while(i >= 0) {\n        result += std::to_string(binary_repr[i]);\n        i--;\n    }\n    return result;",
        "grade-174": {
            "execution": 0
        },
        "139": "int a[N];\n    long temp = N;\n    int i = 0;\n    int sum = 0;\n    while(temp > 0) {\n        a[i] = temp % 2;\n        temp = temp / 2;\n        i++;\n    }\n    // std::cout << \"solving for \" << N << std::endl;\n    // for(int j = 0; j < i; j++) {\n    //     std::cout << a[j] << \" \";\n    // }\n    // std::cout << std::endl;\n    for(int j = 0; j < i; j++) {\n        sum += a[j];\n    }\n    std::string result = std::to_string(sum);\n    return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "// Write your code here\n    std::string a=\"\";\n    while(N>0)\n    {\n        int rem=N%2;\n        a=std::to_string(rem)+a;\n        N=N/2;\n    }\n    int sum=0;\n    for(int i=0;i<a.length();i++)\n    {\n        sum+=a[i]-'0';\n    }\n    return std::to_string(sum);",
        "grade-22": {
            "execution": 0
        },
        "152": "std::string bin = \"\";\n\twhile (N > 0) {\n\t\tint remainder = N % 2;\n\t\tN /= 2;\n\t\tbin += std::to_string(remainder);\n\t}\n\treverse(bin.begin(), bin.end());\n\tint sum = 0;\n\tfor (int i = 0; i < bin.length(); i++) {\n\t\tsum += int(bin[i] - '0');\n\t}\n\treturn std::to_string(sum);",
        "grade-152": {
            "execution": 0
        },
        "108": "return std::bitset<10>(N).to_string();",
        "grade-108": {
            "execution": 0
        },
        "8": "// To store the binary number\n  std::string s;\n  // For each iteration from 0 to most significant bit\n  while (N) {\n    // Add the current bit\n    s += std::to_string(N & 1);\n    // Right shift to right by 1 bit\n    N >>= 1;\n  }\n  return s;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string s = \"\";\n  while (N > 0) {\n    int t = N%2;\n    s = s + char(t + '0');\n    N /= 2;\n  }\n  std::reverse(s.begin(), s.end());\n  return s;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string result = \"\";\n    while (N > 0) {\n        int rem = N % 2;\n        N = N / 2;\n        result += std::to_string(rem);\n    }\n    std::reverse(result.begin(), result.end());\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string result;\n    // Write your code here\n    std::vector<int> v;\n    int sum=0;\n    while(N>0)\n    {\n        if(N%2==0)\n        {\n            v.push_back(0);\n        }\n        else\n        {\n            v.push_back(1);\n        }\n        N/=2;\n    }\n    // std::reverse(v.begin(),v.end());\n    for(int i=v.size()-1;i>=0;i--)\n    {\n        sum+=v[i];\n    }\n    result=std::to_string(sum);\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string s = \"\";\n\tif (N == 0) {\n\t\treturn \"0\";\n\t}\n\tint i = 0;\n\twhile (N > 0) {\n\t\tif (N % 2 == 0) {\n\t\t\ts += \"0\";\n\t\t}\n\t\telse {\n\t\t\ts += \"1\";\n\t\t}\n\t\tN /= 2;\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.08843320139413491,
        "bleu-28": 0.11035940629663912,
        "bleu-6": 0.2754277425468693,
        "bleu-190": 0.08216152042381396,
        "bleu-70": 0.07326327804936347,
        "bleu-62": 0.1069010161983152,
        "bleu-57": 0.07893439450944671,
        "bleu-35": 0.2092343255183342,
        "bleu-189": 0.07056800000637627,
        "bleu-26": 0.12064031267251182,
        "bleu-174": 0.14014502838203968,
        "bleu-139": 0.1359789349581793,
        "bleu-22": 0.38930387046632914,
        "bleu-152": 0.343654506994398,
        "bleu-108": 0.0034501826535008454,
        "bleu-8": 0.051605281936521086,
        "bleu-7": 0.11437713624050729,
        "bleu-23": 0.11847123019735133,
        "bleu-55": 0.1555845802354623,
        "bleu-59": 0.1559667950664547,
        "codebleu-164": 0.23281200085923798,
        "codebleu-28": 0.61032355048541,
        "codebleu-6": 0.40511194883599,
        "codebleu-190": 0.36277734530892664,
        "codebleu-70": 0.49773170137620265,
        "codebleu-62": 0.25648260045950716,
        "codebleu-57": 0.2098800176986152,
        "codebleu-35": 0.5864899168992886,
        "codebleu-189": 0.2923965373611722,
        "codebleu-26": 0.37231370193537555,
        "codebleu-174": 0.6287308400832653,
        "codebleu-139": 0.6026146594264695,
        "codebleu-22": 0.6698139558266203,
        "codebleu-152": 0.6390540334258709,
        "codebleu-108": 0.07909926713779361,
        "codebleu-8": 0.27980241579621606,
        "codebleu-7": 0.40778185249400156,
        "codebleu-23": 0.42743548016444766,
        "codebleu-55": 0.575346906747456,
        "codebleu-59": 0.45263897781506657,
        "chrf-164": 0.3236284354350464,
        "chrf-28": 0.36330099719506487,
        "chrf-6": 0.38196464529823065,
        "chrf-190": 0.25852593481608366,
        "chrf-70": 0.1967985235775851,
        "chrf-62": 0.2546149841050649,
        "chrf-57": 0.2511450631307565,
        "chrf-35": 0.31323125719214734,
        "chrf-189": 0.17279180842532552,
        "chrf-26": 0.24521484134294216,
        "chrf-174": 0.35496939562432095,
        "chrf-139": 0.35236296533615596,
        "chrf-22": 0.5123840507766425,
        "chrf-152": 0.5074380856060626,
        "chrf-108": 0.12367543985106665,
        "chrf-8": 0.25196418147454747,
        "chrf-7": 0.20569412038382726,
        "chrf-23": 0.26490234287987896,
        "chrf-55": 0.3451448579514208,
        "chrf-59": 0.23231344414982483,
        "rougel-164": 0.39316239316239315,
        "rougel-28": 0.2823529411764706,
        "rougel-6": 0.4507042253521127,
        "rougel-190": 0.3357664233576642,
        "rougel-70": 0.3255813953488372,
        "rougel-62": 0.42016806722689076,
        "rougel-57": 0.3652173913043478,
        "rougel-35": 0.4097560975609757,
        "rougel-189": 0.37209302325581395,
        "rougel-26": 0.3529411764705882,
        "rougel-174": 0.36448598130841126,
        "rougel-139": 0.3127572016460905,
        "rougel-22": 0.5257142857142857,
        "rougel-152": 0.508108108108108,
        "rougel-108": 0.16666666666666669,
        "rougel-8": 0.23129251700680273,
        "rougel-7": 0.3356643356643356,
        "rougel-23": 0.32394366197183094,
        "rougel-55": 0.330188679245283,
        "rougel-59": 0.3999999999999999,
        "meteor-164": 0.2869643328929986,
        "meteor-28": 0.434964483676676,
        "meteor-6": 0.36739274236757696,
        "meteor-190": 0.3174982623473779,
        "meteor-70": 0.34136548423712226,
        "meteor-62": 0.31871768318359844,
        "meteor-57": 0.31117953240780843,
        "meteor-35": 0.4273983102461799,
        "meteor-189": 0.251259491713446,
        "meteor-26": 0.2852502147766323,
        "meteor-174": 0.5243363034250585,
        "meteor-139": 0.41780703410091863,
        "meteor-22": 0.5559589065959996,
        "meteor-152": 0.5556612961571639,
        "meteor-108": 0.09331207330219188,
        "meteor-8": 0.2160195634684932,
        "meteor-7": 0.27410999361430394,
        "meteor-23": 0.31848662627730107,
        "meteor-55": 0.4615333202921232,
        "meteor-59": 0.35469274633511755,
        "ruby-164": 0.23750000000000004,
        "ruby-28": 0.16000000000000003,
        "ruby-6": 0.3125,
        "ruby-190": 0.1875,
        "ruby-70": 0.11956521739130432,
        "ruby-62": 0.25,
        "ruby-57": 0.21250000000000002,
        "ruby-35": 0.30400000000000005,
        "ruby-189": 0.21250000000000002,
        "ruby-26": 0.19999999999999996,
        "ruby-174": 0.23880597014925375,
        "ruby-139": 0.16564417177914115,
        "ruby-22": 0.27368421052631575,
        "ruby-152": 0.2666666666666667,
        "ruby-108": 0.09999999999999998,
        "ruby-8": 0.125,
        "ruby-7": 0.1875,
        "ruby-23": 0.19999999999999996,
        "ruby-55": 0.18181818181818177,
        "ruby-59": 0.18888888888888888,
        "codebertscore_f1-164": 0.7830433249473572,
        "codebertscore_f3-164": 0.754205048084259,
        "codebertscore_f1-28": 0.7614843845367432,
        "codebertscore_f3-28": 0.7998171448707581,
        "codebertscore_f1-6": 0.8172726035118103,
        "codebertscore_f3-6": 0.8112404346466064,
        "codebertscore_f1-190": 0.7877383232116699,
        "codebertscore_f3-190": 0.7862827777862549,
        "codebertscore_f1-70": 0.7351062893867493,
        "codebertscore_f3-70": 0.7266150712966919,
        "codebertscore_f1-62": 0.7881454229354858,
        "codebertscore_f3-62": 0.7604994177818298,
        "codebertscore_f1-57": 0.8091782331466675,
        "codebertscore_f3-57": 0.7809439301490784,
        "codebertscore_f1-35": 0.7847987413406372,
        "codebertscore_f3-35": 0.8154476881027222,
        "codebertscore_f1-189": 0.7573333978652954,
        "codebertscore_f3-189": 0.7406944036483765,
        "codebertscore_f1-26": 0.7779194116592407,
        "codebertscore_f3-26": 0.7651398181915283,
        "codebertscore_f1-174": 0.7513843178749084,
        "codebertscore_f3-174": 0.7769737839698792,
        "codebertscore_f1-139": 0.7702701091766357,
        "codebertscore_f3-139": 0.7993834018707275,
        "codebertscore_f1-22": 0.8312150835990906,
        "codebertscore_f3-22": 0.8502976894378662,
        "codebertscore_f1-152": 0.8397416472434998,
        "codebertscore_f3-152": 0.854237973690033,
        "codebertscore_f1-108": 0.6644030809402466,
        "codebertscore_f3-108": 0.6353237628936768,
        "codebertscore_f1-8": 0.701097309589386,
        "codebertscore_f3-8": 0.718410313129425,
        "codebertscore_f1-7": 0.7689724564552307,
        "codebertscore_f3-7": 0.7644405364990234,
        "codebertscore_f1-23": 0.7839100956916809,
        "codebertscore_f3-23": 0.7743197083473206,
        "codebertscore_f1-55": 0.7387508749961853,
        "codebertscore_f3-55": 0.7717316150665283,
        "codebertscore_f1-59": 0.7768399119377136,
        "codebertscore_f3-59": 0.774081826210022,
        "codebertscore_s_f1-164": 0.7831341028213501,
        "codebertscore_s_f3-164": 0.7504401803016663,
        "codebertscore_s_f1-28": 0.7680703997612,
        "codebertscore_s_f3-28": 0.8082168102264404,
        "codebertscore_s_f1-6": 0.8214015364646912,
        "codebertscore_s_f3-6": 0.8128247857093811,
        "codebertscore_s_f1-190": 0.7965214252471924,
        "codebertscore_s_f3-190": 0.7960636615753174,
        "codebertscore_s_f1-70": 0.7430246472358704,
        "codebertscore_s_f3-70": 0.7349992990493774,
        "codebertscore_s_f1-62": 0.7888928055763245,
        "codebertscore_s_f3-62": 0.7575680613517761,
        "codebertscore_s_f1-57": 0.8256533741950989,
        "codebertscore_s_f3-57": 0.7916650176048279,
        "codebertscore_s_f1-35": 0.7838578224182129,
        "codebertscore_s_f3-35": 0.8155636191368103,
        "codebertscore_s_f1-189": 0.7580409049987793,
        "codebertscore_s_f3-189": 0.7395736575126648,
        "codebertscore_s_f1-26": 0.782251238822937,
        "codebertscore_s_f3-26": 0.7667354345321655,
        "codebertscore_s_f1-174": 0.7617232203483582,
        "codebertscore_s_f3-174": 0.7887395024299622,
        "codebertscore_s_f1-139": 0.7819889783859253,
        "codebertscore_s_f3-139": 0.8116407990455627,
        "codebertscore_s_f1-22": 0.8406727910041809,
        "codebertscore_s_f3-22": 0.8592965006828308,
        "codebertscore_s_f1-152": 0.8428557515144348,
        "codebertscore_s_f3-152": 0.8571243286132812,
        "codebertscore_s_f1-108": 0.6673803925514221,
        "codebertscore_s_f3-108": 0.6341755390167236,
        "codebertscore_s_f1-8": 0.7056304216384888,
        "codebertscore_s_f3-8": 0.7227019667625427,
        "codebertscore_s_f1-7": 0.7726534605026245,
        "codebertscore_s_f3-7": 0.7669245004653931,
        "codebertscore_s_f1-23": 0.7886887788772583,
        "codebertscore_s_f3-23": 0.7782580256462097,
        "codebertscore_s_f1-55": 0.751650869846344,
        "codebertscore_s_f3-55": 0.7872253656387329,
        "codebertscore_s_f1-59": 0.779036283493042,
        "codebertscore_s_f3-59": 0.7751047611236572,
        "gpt35_nsnr-164": 0,
        "raw_gpt35_nsnr-164": "3 - The code correctly converts the input integer to binary and returns it as a string. However, it does not calculate the sum of the binary digits as required by the problem.",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "3 - The code correctly converts the input integer to binary and stores it in a string. However, it does not calculate the sum of the binary digits as required by the problem.",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n// digits(235) == 15\nlong digits(long n) {\n",
        "snippet": [
            "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n"
        ],
        "simplified": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "task_id": "131",
        "166": "long s = 1;\n  while (n > 0) {\n    long i = n % 10;\n    if (i % 2 == 1) {\n      s *= i;\n    }\n    n /= 10;\n  }\n  return s;",
        "grade-166": {
            "execution": 0
        },
        "28": "long product = 1;\n    while(n > 0) {\n        long mod = n % 10;\n        if(mod % 2 != 0) {\n            product *= mod;\n        }\n        n /= 10;\n    }\n    return product;",
        "grade-28": {
            "execution": 0
        },
        "6": "int sum = 1;\n  while(n > 0){\n    int digit = n % 10;\n    if(digit % 2 == 1){\n      sum *= digit;\n    }\n    n /= 10;\n  }\n  return sum;",
        "grade-6": {
            "execution": 0
        },
        "195": "int n1=0;\n  while(n>0)\n  {\n    if(n%2!=0)\n    {\n      n1=n1*10+(n%10);\n    }\n    n=n/10;\n  }\n  int s=0;\n  while(n1>0)\n  {\n    s=s*10+(n1%10);\n    n1=n1/10;\n  }\n  return s;",
        "grade-195": {
            "execution": 0
        },
        "70": "long sum = 1;\n    while(n != 0){\n        int rem = n % 10;\n        if(rem % 2 != 0){\n            sum *= rem;\n        }\n        n /= 10;\n    }\n    return sum;",
        "grade-70": {
            "execution": 0
        },
        "62": "return std::accumulate(std::to_string(n).begin(), std::to_string(n).end(), 1,\n     [](long m, char c) { return m * ((c - '0') % 2 ? c - '0' : 1);});",
        "grade-62": {
            "execution": 0
        },
        "57": "int sum = 1;\n  while(n > 0){\n    if((n % 10) % 2 == 1){\n      sum *= (n % 10);\n    }\n    n /= 10;\n  }\n  return sum;",
        "grade-57": {
            "execution": 0
        },
        "35": "long sum = 1;\n    while(n != 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            sum *= digit;\n        }\n        n /= 10;\n    }\n    return sum;",
        "grade-35": {
            "execution": 0
        },
        "194": "long ans = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tans *= n % 10;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn ans;",
        "grade-194": {
            "execution": 0
        },
        "26": "long product = 1;\n  while (n > 0) {\n    if (n % 2 != 0) {\n      product *= n % 10;\n    }\n    n /= 10;\n  }\n  return product;",
        "grade-26": {
            "execution": 0
        },
        "177": "int result = 1;\n  while (n != 0) {\n    int dig = n % 10;\n    if (dig % 2 != 0) {\n      result *= dig;\n    }\n    n /= 10;\n  }\n  return result;",
        "grade-177": {
            "execution": 0
        },
        "141": "// your code here\n  long prod = 1;\n  while(n > 0)\n  {\n    if(n % 2 != 0)\n    {\n      prod *= n % 10;\n    }\n    n /= 10;\n  }\n  return prod;",
        "grade-141": {
            "execution": 0
        },
        "22": "long ret = 1;\n    do {\n        if (n % 2 == 1) {\n            ret *= n % 10;\n        }\n        n /= 10;\n    } while (n > 0);\n    return ret;",
        "grade-22": {
            "execution": 0
        },
        "153": "long result = 1;\n  if (n == 0) {\n    return 0;\n  }\n  if (n < 0) {\n    n = n * -1;\n  }\n  while (n > 0) {\n    if (n % 2 != 0) {\n      result = result * (n % 10);\n    }\n    n = n / 10;\n  }\n  return result;",
        "grade-153": {
            "execution": 0
        },
        "108": "long result = 1;\n  while (n > 0) {\n    long d = n % 10;\n    if (d % 2 == 1) {\n      result *= d;\n    }\n    n /= 10;\n  }\n  return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "int sum = 1;\n  for(int i = 0; i < to_string(n).length(); i++){\n    if(stoi(to_string(n)[i]) % 2 != 0){\n      sum *= stoi(to_string(n)[i]);\n    }\n  }\n  return sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "long result = 1;\n  while (n != 0) {\n    long remainder = n % 10;\n    if (remainder % 2 != 0) {\n      result *= remainder;\n    }\n    n /= 10;\n  }\n  return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "long ans = 1;\n  long i;\n  while(n!=0){\n    i = n%10;\n    if(i%2!=0){\n      ans *= i;\n    }\n    n /= 10;\n  }\n  return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "long counter = 1;\n    while(n) {\n        if(n % 2 != 0)\n            counter *= n % 10;\n        n /= 10;\n    }\n    return counter;",
        "grade-55": {
            "execution": 0
        },
        "59": "if(n==0) return 0;\n    long result = 1;\n    while(n!=0){\n        long current = n%10;\n        if(current%2==1) result*=current;\n        n/=10;\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-166": 0.10598962666287705,
        "bleu-28": 0.040766421380569275,
        "bleu-6": 0.09901418115560517,
        "bleu-195": 0.07619107090577208,
        "bleu-70": 0.04328688751134144,
        "bleu-62": 0.07237290106079987,
        "bleu-57": 0.10760204142821747,
        "bleu-35": 0.04328688751134144,
        "bleu-194": 0.08540509769478115,
        "bleu-26": 0.0357695069277034,
        "bleu-177": 0.04366830663095806,
        "bleu-141": 0.053234073649933426,
        "bleu-22": 0.09390614570912287,
        "bleu-153": 0.1265562129340986,
        "bleu-108": 0.09726102492165001,
        "bleu-8": 0.3314827727096506,
        "bleu-7": 0.04289511067960218,
        "bleu-23": 0.04720979448492126,
        "bleu-55": 0.03420099426488407,
        "bleu-59": 0.16939285694530748,
        "codebleu-166": 0.25022782576590386,
        "codebleu-28": 0.23855321816828326,
        "codebleu-6": 0.2524547640441668,
        "codebleu-195": 0.4521749472244521,
        "codebleu-70": 0.23949798510021905,
        "codebleu-62": 0.3690261601827048,
        "codebleu-57": 0.25339953097610257,
        "codebleu-35": 0.24550399110622503,
        "codebleu-194": 0.21378176025280823,
        "codebleu-26": 0.2077757542468022,
        "codebleu-177": 0.24044275203215482,
        "codebleu-141": 0.2343655333082564,
        "codebleu-22": 0.22826710149984328,
        "codebleu-153": 0.45712544227395707,
        "codebleu-108": 0.24455922417428927,
        "codebleu-8": 0.5181343757989063,
        "codebleu-7": 0.24455922417428927,
        "codebleu-23": 0.26422740539351064,
        "codebleu-55": 0.18434147367415718,
        "codebleu-59": 0.3333981684531775,
        "chrf-166": 0.16093369199536284,
        "chrf-28": 0.1894739406139375,
        "chrf-6": 0.16736483285954487,
        "chrf-195": 0.15184972311211747,
        "chrf-70": 0.1369700454784834,
        "chrf-62": 0.2342034498585962,
        "chrf-57": 0.1460364286274838,
        "chrf-35": 0.14630753514964054,
        "chrf-194": 0.14613250750127704,
        "chrf-26": 0.1719965878016922,
        "chrf-177": 0.15118390485869265,
        "chrf-141": 0.20338261649681327,
        "chrf-22": 0.15654983549813153,
        "chrf-153": 0.1971238464607907,
        "chrf-108": 0.1609157203909837,
        "chrf-8": 0.3923895510036811,
        "chrf-7": 0.15417925480481975,
        "chrf-23": 0.1430626357636335,
        "chrf-55": 0.12596467737737674,
        "chrf-59": 0.22903420429634253,
        "rougel-166": 0.43199999999999994,
        "rougel-28": 0.352,
        "rougel-6": 0.416,
        "rougel-195": 0.35668789808917195,
        "rougel-70": 0.3650793650793651,
        "rougel-62": 0.2818791946308724,
        "rougel-57": 0.4126984126984127,
        "rougel-35": 0.3650793650793651,
        "rougel-194": 0.3833333333333333,
        "rougel-26": 0.35000000000000003,
        "rougel-177": 0.38095238095238093,
        "rougel-141": 0.384,
        "rougel-22": 0.3770491803278689,
        "rougel-153": 0.3841059602649006,
        "rougel-108": 0.384,
        "rougel-8": 0.5714285714285714,
        "rougel-7": 0.3650793650793651,
        "rougel-23": 0.39062499999999994,
        "rougel-55": 0.32758620689655166,
        "rougel-59": 0.3880597014925373,
        "meteor-166": 0.2665369441801289,
        "meteor-28": 0.2199319488353223,
        "meteor-6": 0.23998104886531618,
        "meteor-195": 0.2795031055900621,
        "meteor-70": 0.23301132468491267,
        "meteor-62": 0.2670169385194479,
        "meteor-57": 0.2300315819695665,
        "meteor-35": 0.23301132468491267,
        "meteor-194": 0.21460416666666665,
        "meteor-26": 0.22207754629629628,
        "meteor-177": 0.2595776304102067,
        "meteor-141": 0.2783057121613013,
        "meteor-22": 0.20487205102589712,
        "meteor-153": 0.3152218334142166,
        "meteor-108": 0.22663025250347374,
        "meteor-8": 0.4980740353855193,
        "meteor-7": 0.22633744855967078,
        "meteor-23": 0.2589086158988402,
        "meteor-55": 0.20207543621769813,
        "meteor-59": 0.2830615942028986,
        "ruby-166": 0.308641975308642,
        "ruby-28": 0.24691358024691357,
        "ruby-6": 0.2962962962962963,
        "ruby-195": 0.14814814814814814,
        "ruby-70": 0.2592592592592593,
        "ruby-62": 0.18518518518518523,
        "ruby-57": 0.2962962962962963,
        "ruby-35": 0.2592592592592593,
        "ruby-194": 0.2716049382716049,
        "ruby-26": 0.24691358024691357,
        "ruby-177": 0.2716049382716049,
        "ruby-141": 0.24691358024691357,
        "ruby-22": 0.2592592592592593,
        "ruby-153": 0.23456790123456794,
        "ruby-108": 0.2716049382716049,
        "ruby-8": 0.37037037037037035,
        "ruby-7": 0.2592592592592593,
        "ruby-23": 0.28395061728395066,
        "ruby-55": 0.2098765432098766,
        "ruby-59": 0.2716049382716049,
        "codebertscore_f1-166": 0.7927694320678711,
        "codebertscore_f3-166": 0.7719557881355286,
        "codebertscore_f1-28": 0.7683858871459961,
        "codebertscore_f3-28": 0.744020938873291,
        "codebertscore_f1-6": 0.7727844715118408,
        "codebertscore_f3-6": 0.7495570182800293,
        "codebertscore_f1-195": 0.7535995244979858,
        "codebertscore_f3-195": 0.7557534575462341,
        "codebertscore_f1-70": 0.7666319608688354,
        "codebertscore_f3-70": 0.7432590126991272,
        "codebertscore_f1-62": 0.7283015847206116,
        "codebertscore_f3-62": 0.7166266441345215,
        "codebertscore_f1-57": 0.7695488333702087,
        "codebertscore_f3-57": 0.746221125125885,
        "codebertscore_f1-35": 0.7692562937736511,
        "codebertscore_f3-35": 0.7464279532432556,
        "codebertscore_f1-194": 0.7665718793869019,
        "codebertscore_f3-194": 0.7408945560455322,
        "codebertscore_f1-26": 0.7683773040771484,
        "codebertscore_f3-26": 0.7411826848983765,
        "codebertscore_f1-177": 0.7644664645195007,
        "codebertscore_f3-177": 0.7403349876403809,
        "codebertscore_f1-141": 0.7514187097549438,
        "codebertscore_f3-141": 0.7424978613853455,
        "codebertscore_f1-22": 0.7618520855903625,
        "codebertscore_f3-22": 0.7387740612030029,
        "codebertscore_f1-153": 0.7783562541007996,
        "codebertscore_f3-153": 0.7570812106132507,
        "codebertscore_f1-108": 0.7694293856620789,
        "codebertscore_f3-108": 0.7490523457527161,
        "codebertscore_f1-8": 0.8430206775665283,
        "codebertscore_f3-8": 0.8275068998336792,
        "codebertscore_f1-7": 0.7494356036186218,
        "codebertscore_f3-7": 0.7323564291000366,
        "codebertscore_f1-23": 0.7828909158706665,
        "codebertscore_f3-23": 0.760883092880249,
        "codebertscore_f1-55": 0.7565031051635742,
        "codebertscore_f3-55": 0.7307475209236145,
        "codebertscore_f1-59": 0.7695894241333008,
        "codebertscore_f3-59": 0.7472705841064453,
        "codebertscore_s_f1-166": 0.7911241054534912,
        "codebertscore_s_f3-166": 0.7673876285552979,
        "codebertscore_s_f1-28": 0.7660987973213196,
        "codebertscore_s_f3-28": 0.7407152056694031,
        "codebertscore_s_f1-6": 0.7740725874900818,
        "codebertscore_s_f3-6": 0.7478315234184265,
        "codebertscore_s_f1-195": 0.7574607133865356,
        "codebertscore_s_f3-195": 0.7550206780433655,
        "codebertscore_s_f1-70": 0.7637432217597961,
        "codebertscore_s_f3-70": 0.7405122518539429,
        "codebertscore_s_f1-62": 0.7260373830795288,
        "codebertscore_s_f3-62": 0.7115634679794312,
        "codebertscore_s_f1-57": 0.7682114243507385,
        "codebertscore_s_f3-57": 0.7404954433441162,
        "codebertscore_s_f1-35": 0.76683109998703,
        "codebertscore_s_f3-35": 0.744521975517273,
        "codebertscore_s_f1-194": 0.7600200176239014,
        "codebertscore_s_f3-194": 0.7296808362007141,
        "codebertscore_s_f1-26": 0.7651220560073853,
        "codebertscore_s_f3-26": 0.733256459236145,
        "codebertscore_s_f1-177": 0.7638198733329773,
        "codebertscore_s_f3-177": 0.7369078993797302,
        "codebertscore_s_f1-141": 0.7496875524520874,
        "codebertscore_s_f3-141": 0.735413134098053,
        "codebertscore_s_f1-22": 0.7577213048934937,
        "codebertscore_s_f3-22": 0.7307723760604858,
        "codebertscore_s_f1-153": 0.7752076983451843,
        "codebertscore_s_f3-153": 0.7511786818504333,
        "codebertscore_s_f1-108": 0.766547441482544,
        "codebertscore_s_f3-108": 0.7448001503944397,
        "codebertscore_s_f1-8": 0.8467984199523926,
        "codebertscore_s_f3-8": 0.8273537158966064,
        "codebertscore_s_f1-7": 0.743274450302124,
        "codebertscore_s_f3-7": 0.7236220836639404,
        "codebertscore_s_f1-23": 0.775894045829773,
        "codebertscore_s_f3-23": 0.7516369223594666,
        "codebertscore_s_f1-55": 0.7522937059402466,
        "codebertscore_s_f3-55": 0.7211704850196838,
        "codebertscore_s_f1-59": 0.7738329768180847,
        "codebertscore_s_f3-59": 0.7487687468528748,
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-195": 0,
        "raw_gpt35_nswr-195": "Score: 2",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\n",
        "snippet": [
            "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n"
        ],
        "simplified": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "task_id": "159",
        "167": "vector<long>result;\n    result.push_back(0);\n    result.push_back(0);\n    if(number < 0 || need < 0 || remaining < 0)\n        return result;\n    if(number + need > remaining)\n    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0] = number + need;\n        result[1] = remaining - result[0];\n    }\n    return result;",
        "grade-167": {
            "execution": 0
        },
        "28": "if (remaining < need) {\n        return { number + remaining, 0 };\n    }\n    return { number + need, remaining - need };",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining - need);\n    } else {\n        result.push_back(number + remaining);\n        result.push_back(0);\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "193": "if (remaining == 0) {\n    return {0,0};\n  }\n  if (number < 0 || need < 0 || remaining < 0 || number > 1000 || need > 1000 || remaining > 1000) {\n    return {0,0};\n  }\n  if (number + need <= remaining) {\n    return {number + need, remaining - (number + need)};\n  }\n  return {number + remaining, 0};",
        "grade-193": {
            "execution": 0
        },
        "70": "std::vector<long> result;\n    if(number >= need)\n        result.push_back(number);\n    else\n        result.push_back(number + remaining);\n    if(remaining < need)\n        result.push_back(0);\n    else\n        result.push_back(remaining - need);\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (number + remaining < need)\n      return {number + remaining, 0};\n   else\n      return {need, number + remaining - need};",
        "grade-62": {
            "execution": 0
        },
        "57": "if(remaining>=need){\n        return {number+need,remaining-need};\n    }else{\n        return {number+remaining,0};\n    }",
        "grade-57": {
            "execution": 1
        },
        "35": "// your code here\n  \tstd::vector<long> res;\n\tif(need >= remaining){\n\t\tres.push_back(number + remaining);\n\t\tres.push_back(0);\n\t}\n\telse{\n\t\tres.push_back(number + need);\n\t\tres.push_back(remaining - need);\n\t}\n\treturn res;",
        "grade-35": {
            "execution": 1
        },
        "192": "return {number + std::min(need, remaining), std::max(0L, remaining - need)};",
        "grade-192": {
            "execution": 1
        },
        "26": "long n = 0;\n    long r = 0;\n    if (remaining < need) {\n        r = 0;\n        n = number + remaining;\n    } else {\n        r = remaining - need;\n        n = number + need;\n    }\n    std::vector<long> ans;\n    ans.push_back(n);\n    ans.push_back(r);\n    return ans;",
        "grade-26": {
            "execution": 1
        },
        "177": "// your code here\n  long numEaten, carrotsLeft;\n  numEaten = number;\n  if (need < remaining) {\n    numEaten += need;\n    carrotsLeft = remaining - need;\n  } else {\n    numEaten += remaining;\n    carrotsLeft = 0;\n  }\n  std::vector<long> result{numEaten, carrotsLeft};\n  return result;",
        "grade-177": {
            "execution": 1
        },
        "141": "std::vector<long> result(2);\n    //check if there are enough carrots\n    if (number + remaining >= need) {\n        result[0] = need;\n        result[1] = number + remaining - need;\n    }\n    else {\n        result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return result;",
        "grade-141": {
            "execution": 0
        },
        "22": "std::vector<long> result;\n    if(remaining >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining - need);\n    } else {\n        result.push_back(number + remaining);\n        result.push_back(0);\n    }\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "154": "long eat_total = number;\n  if (remaining > need) {\n    eat_total += need;\n    remaining -= need;\n  } else {\n    eat_total += remaining;\n    remaining = 0;\n  }\n  std::vector<long> result = {eat_total, remaining};\n  return result;",
        "grade-154": {
            "execution": 1
        },
        "110": "std::vector<long> res(2);\n    long totalNeed = number + need;\n    res[0] = (totalNeed <= remaining) ? totalNeed : (remaining + number);\n    res[1] = (totalNeed <= remaining) ? (remaining - totalNeed) : 0;\n    return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "// Your code here\n    std::vector<long> x;\n    if(number <= 1000 && need <= 1000 && remaining <= 1000){\n      if(number >= 0 && need >= 0 && remaining >= 0){\n        if(remaining >= need){\n          x.push_back(need + number);\n          x.push_back(remaining - need);\n        }\n        else if(remaining < need){\n          x.push_back(remaining + number);\n          x.push_back(0);\n        }\n      }\n    }\n    return x;",
        "grade-8": {
            "execution": 1
        },
        "7": "// your code here\n    std::vector<long> result;\n    long total = number + remaining;\n    if (total >= need) {\n        result.push_back(number + need);\n        result.push_back(total - need);\n    } else {\n        result.push_back(total);\n        result.push_back(0);\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "int total_carrots_eaten = number;\n    int carrots_left_in_stock = remaining;\n    while(number < need){\n        number++;\n        carrots_left_in_stock--;\n        total_carrots_eaten++;\n        if(carrots_left_in_stock == 0){\n            return {total_carrots_eaten, 0};\n        }\n    }\n    return {total_carrots_eaten, carrots_left_in_stock};",
        "grade-23": {
            "execution": 0
        },
        "55": "int sum = number + remaining;\n   if(sum >= need)\n      return {need, sum - need};\n   else \n      return {sum, 0};",
        "grade-55": {
            "execution": 0
        },
        "59": "vector<long> v;\n  if (number+need<=remaining)\n  {\n    v.push_back(number+need);\n    v.push_back(remaining-(number+need));\n  }\n  else\n  {\n    v.push_back(number+remaining);\n    v.push_back(0);\n  }\n  return v;",
        "grade-59": {
            "execution": 0
        },
        "bleu-167": 0.05853619838493579,
        "bleu-28": 0.708412616445661,
        "bleu-6": 0.07431081247795364,
        "bleu-193": 0.1897533601104202,
        "bleu-70": 0.05827830530853596,
        "bleu-62": 0.5212340106862171,
        "bleu-57": 0.63201262513575,
        "bleu-35": 0.09698828953911937,
        "bleu-192": 0.24428720699882367,
        "bleu-26": 0.06219725466347135,
        "bleu-177": 0.05988964180819259,
        "bleu-141": 0.05125991373340464,
        "bleu-22": 0.07431081247795364,
        "bleu-154": 0.05657548369823611,
        "bleu-110": 0.03840050896652555,
        "bleu-8": 0.02660367567791898,
        "bleu-7": 0.052368373060262687,
        "bleu-23": 0.10578298543307849,
        "bleu-55": 0.2596432731441429,
        "bleu-59": 0.06191048170138025,
        "codebleu-167": 0.5938042999600336,
        "codebleu-28": 0.7965208825015208,
        "codebleu-6": 0.6009471009471009,
        "codebleu-193": 0.7347759168419554,
        "codebleu-70": 0.4894894894894894,
        "codebleu-62": 0.749496497738532,
        "codebleu-57": 0.809107673187344,
        "codebleu-35": 0.6009471009471009,
        "codebleu-192": 0.520228854534586,
        "codebleu-26": 0.5829290829290829,
        "codebleu-177": 0.6009471009471009,
        "codebleu-141": 0.5829290829290829,
        "codebleu-22": 0.6009471009471009,
        "codebleu-154": 0.5743820743820743,
        "codebleu-110": 0.4818664818664818,
        "codebleu-8": 0.6412566412566412,
        "codebleu-7": 0.5924000924000924,
        "codebleu-23": 0.625138073462802,
        "codebleu-55": 0.6394013175429744,
        "codebleu-59": 0.5829290829290829,
        "chrf-167": 0.4750691704196842,
        "chrf-28": 0.8473184272928426,
        "chrf-6": 0.5108316538978837,
        "chrf-193": 0.6162589742740756,
        "chrf-70": 0.47091276298112617,
        "chrf-62": 0.7547599967621476,
        "chrf-57": 0.8409150188422805,
        "chrf-35": 0.5424228240205693,
        "chrf-192": 0.5071943765950374,
        "chrf-26": 0.5247046110443514,
        "chrf-177": 0.4412213741225728,
        "chrf-141": 0.47417310459518286,
        "chrf-22": 0.5108316538978837,
        "chrf-154": 0.4179752488692901,
        "chrf-110": 0.4375806400287985,
        "chrf-8": 0.3823974279563386,
        "chrf-7": 0.3530664940027702,
        "chrf-23": 0.3060563884759697,
        "chrf-55": 0.48079094599836564,
        "chrf-59": 0.5011430148234253,
        "rougel-167": 0.32478632478632474,
        "rougel-28": 0.8727272727272727,
        "rougel-6": 0.3529411764705883,
        "rougel-193": 0.4067796610169492,
        "rougel-70": 0.3023255813953488,
        "rougel-62": 0.7857142857142857,
        "rougel-57": 0.6440677966101694,
        "rougel-35": 0.4666666666666666,
        "rougel-192": 0.4444444444444444,
        "rougel-26": 0.3125,
        "rougel-177": 0.2857142857142857,
        "rougel-141": 0.30612244897959184,
        "rougel-22": 0.3529411764705883,
        "rougel-154": 0.3499999999999999,
        "rougel-110": 0.21276595744680848,
        "rougel-8": 0.24637681159420288,
        "rougel-7": 0.29473684210526313,
        "rougel-23": 0.375,
        "rougel-55": 0.48275862068965514,
        "rougel-59": 0.36363636363636365,
        "meteor-167": 0.5686936936936937,
        "meteor-28": 0.9395128714600757,
        "meteor-6": 0.5129090806322969,
        "meteor-193": 0.6182080283876691,
        "meteor-70": 0.45580900989289513,
        "meteor-62": 0.8682941176470589,
        "meteor-57": 0.8107494700087293,
        "meteor-35": 0.6251158308313873,
        "meteor-192": 0.4955555555555556,
        "meteor-26": 0.5605036110707188,
        "meteor-177": 0.5923566878980892,
        "meteor-141": 0.5569335243760009,
        "meteor-22": 0.5129090806322969,
        "meteor-154": 0.5392208614864864,
        "meteor-110": 0.41263440860215056,
        "meteor-8": 0.33898305084745767,
        "meteor-7": 0.49613200049580397,
        "meteor-23": 0.5397029260665623,
        "meteor-55": 0.6756726186885442,
        "meteor-59": 0.4686411799820914,
        "ruby-167": 0.21111111111111114,
        "ruby-28": 0.7857142857142857,
        "ruby-6": 0.22413793103448276,
        "ruby-193": 0.25274725274725274,
        "ruby-70": 0.2033898305084746,
        "ruby-62": 0.6551724137931034,
        "ruby-57": 0.53125,
        "ruby-35": 0.31746031746031744,
        "ruby-192": 0.18518518518518523,
        "ruby-26": 0.1594202898550725,
        "ruby-177": 0.16901408450704225,
        "ruby-141": 0.18309859154929575,
        "ruby-22": 0.22413793103448276,
        "ruby-154": 0.2264150943396226,
        "ruby-110": 0.13432835820895528,
        "ruby-8": 0.14414414414414412,
        "ruby-7": 0.19117647058823528,
        "ruby-23": 0.16981132075471694,
        "ruby-55": 0.25806451612903225,
        "ruby-59": 0.2295081967213115,
        "codebertscore_f1-167": 0.7304352521896362,
        "codebertscore_f3-167": 0.7705596685409546,
        "codebertscore_f1-28": 0.920722246170044,
        "codebertscore_f3-28": 0.9190394282341003,
        "codebertscore_f1-6": 0.8014707565307617,
        "codebertscore_f3-6": 0.8555145263671875,
        "codebertscore_f1-193": 0.8353216052055359,
        "codebertscore_f3-193": 0.8650491237640381,
        "codebertscore_f1-70": 0.7819269299507141,
        "codebertscore_f3-70": 0.8333101272583008,
        "codebertscore_f1-62": 0.8858832120895386,
        "codebertscore_f3-62": 0.8897482752799988,
        "codebertscore_f1-57": 0.938028872013092,
        "codebertscore_f3-57": 0.9455881118774414,
        "codebertscore_f1-35": 0.8012626767158508,
        "codebertscore_f3-35": 0.8669196367263794,
        "codebertscore_f1-192": 0.8201757073402405,
        "codebertscore_f3-192": 0.845355212688446,
        "codebertscore_f1-26": 0.765505313873291,
        "codebertscore_f3-26": 0.820292055606842,
        "codebertscore_f1-177": 0.7570337653160095,
        "codebertscore_f3-177": 0.8110085129737854,
        "codebertscore_f1-141": 0.7477195262908936,
        "codebertscore_f3-141": 0.798566997051239,
        "codebertscore_f1-22": 0.7991778254508972,
        "codebertscore_f3-22": 0.8526100516319275,
        "codebertscore_f1-154": 0.7916983962059021,
        "codebertscore_f3-154": 0.8267732858657837,
        "codebertscore_f1-110": 0.8002110719680786,
        "codebertscore_f3-110": 0.8362647294998169,
        "codebertscore_f1-8": 0.7344160079956055,
        "codebertscore_f3-8": 0.7871929407119751,
        "codebertscore_f1-7": 0.7313209176063538,
        "codebertscore_f3-7": 0.783358097076416,
        "codebertscore_f1-23": 0.7089696526527405,
        "codebertscore_f3-23": 0.7422412633895874,
        "codebertscore_f1-55": 0.834961473941803,
        "codebertscore_f3-55": 0.8467803001403809,
        "codebertscore_f1-59": 0.8320023417472839,
        "codebertscore_f3-59": 0.8859718441963196,
        "codebertscore_s_f1-167": 0.7522138357162476,
        "codebertscore_s_f3-167": 0.797829270362854,
        "codebertscore_s_f1-28": 0.9344320297241211,
        "codebertscore_s_f3-28": 0.9328259825706482,
        "codebertscore_s_f1-6": 0.8038457036018372,
        "codebertscore_s_f3-6": 0.8650018572807312,
        "codebertscore_s_f1-193": 0.8422151803970337,
        "codebertscore_s_f3-193": 0.8744022250175476,
        "codebertscore_s_f1-70": 0.7765581011772156,
        "codebertscore_s_f3-70": 0.8317090272903442,
        "codebertscore_s_f1-62": 0.8982973098754883,
        "codebertscore_s_f3-62": 0.900317370891571,
        "codebertscore_s_f1-57": 0.937616229057312,
        "codebertscore_s_f3-57": 0.9454535841941833,
        "codebertscore_s_f1-35": 0.7963958978652954,
        "codebertscore_s_f3-35": 0.8684086203575134,
        "codebertscore_s_f1-192": 0.816047191619873,
        "codebertscore_s_f3-192": 0.8532590866088867,
        "codebertscore_s_f1-26": 0.7729688882827759,
        "codebertscore_s_f3-26": 0.8405073881149292,
        "codebertscore_s_f1-177": 0.7495884895324707,
        "codebertscore_s_f3-177": 0.8158138394355774,
        "codebertscore_s_f1-141": 0.7584290504455566,
        "codebertscore_s_f3-141": 0.8156293630599976,
        "codebertscore_s_f1-22": 0.8007766008377075,
        "codebertscore_s_f3-22": 0.8610771298408508,
        "codebertscore_s_f1-154": 0.788917064666748,
        "codebertscore_s_f3-154": 0.83531653881073,
        "codebertscore_s_f1-110": 0.792879581451416,
        "codebertscore_s_f3-110": 0.8353231549263,
        "codebertscore_s_f1-8": 0.7493927478790283,
        "codebertscore_s_f3-8": 0.8067129850387573,
        "codebertscore_s_f1-7": 0.7446240186691284,
        "codebertscore_s_f3-7": 0.8108090758323669,
        "codebertscore_s_f1-23": 0.7088378071784973,
        "codebertscore_s_f3-23": 0.7736058831214905,
        "codebertscore_s_f1-55": 0.8347777724266052,
        "codebertscore_s_f3-55": 0.8504288196563721,
        "codebertscore_s_f1-59": 0.8384886980056763,
        "codebertscore_s_f3-59": 0.8933149576187134,
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long a) {\n",
        "snippet": [
            "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n"
        ],
        "simplified": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
        "task_id": "77",
        "163": "long res = cbrt(a);\n  return res*res*res == a;",
        "grade-163": {
            "execution": 1
        },
        "28": "if (a < 0) {\n        a = abs(a);\n    }\n    // long b = floor(cbrt(a));\n    // return b * b * b == a;\n    for (long b = 0; b * b * b <= a; b++) {\n        if (b * b * b == a) {\n            return true;\n        }\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Your code\n    double d=pow(a,1.0/3.0);\n    int t=(int)d;\n    if(t==d)\n    return true;\n    else\n    return false;",
        "grade-6": {
            "execution": 0
        },
        "189": "// long root = sqrt(a);\n  // return root * root * root == a;\n  return cbrt(a) == floor(cbrt(a));",
        "grade-189": {
            "execution": 1
        },
        "70": "if (a < 0) {\n\t\ta = -a;\n\t}\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tlong x = 1;\n\tlong x3 = x * x * x;\n\twhile (x3 < a) {\n\t\tx3 = x * x * x;\n\t\tx++;\n\t}\n\tif (x3 == a) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (a<0) {\n        a=-a;\n    }\n    long x = static_cast<long>(pow(a, 1.0/3.0) + 0.5);\n    return (x*x*x == a);",
        "grade-62": {
            "execution": 1
        },
        "57": "long i = 0;\n    while (i*i*i <= a) {\n        if (i*i*i == a) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    int i = 1;\n    while(i*i*i < a)\n    {\n        i++;\n    }\n    if(i*i*i == a)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-35": {
            "execution": 0
        },
        "188": "for(int i = -100; i <= 100; i++) {\n        if(i * i * i == a) return true;\n    }\n    return false;",
        "grade-188": {
            "execution": 1
        },
        "26": "long b = abs(a);\n\treturn (floor(cbrt(b)) == ceil(cbrt(b)));",
        "grade-26": {
            "execution": 1
        },
        "173": "// Write your code here\n    // printf(\"a: %d\",a);\n    if(a<0)\n        a *= -1;\n    if(a==0)\n        return true;\n    float temp = sqrt(a);\n    for(long i=0;i<=temp;i++){\n        if(i*i*i == a)\n            return true;\n    }\n    return false;",
        "grade-173": {
            "execution": 1
        },
        "139": "long b=sqrt(a);\n    long c=b*b*b;\n    if(c==a) return true;\n    else return false;",
        "grade-139": {
            "execution": 0
        },
        "22": "if (a==0)\n        return true;\n    if (a<0)\n        a = -a;\n    for (long i=1; i<=a; i++)\n        if (i*i*i == a)\n            return true;\n    return false;",
        "grade-22": {
            "execution": 1
        },
        "151": "// Write code here\n\tbool check = false;\n\tif (a == 0 || a == 1)\n\t\treturn true;\n\tif (a < 0)\n\t\ta = -a;\n\tint res = cbrt(a);\n\tif (res*res*res == a)\n\t\treturn true;\n\treturn false;",
        "grade-151": {
            "execution": 1
        },
        "108": "// your code here!\n  long sq = std::sqrt(a);\n  long cb = sq * sq * sq;\n  return (cb == a);",
        "grade-108": {
            "execution": 0
        },
        "8": "if (a == 0) {\n    return true;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  for (long x = 1; x < a; x++) {\n    if (x * x * x == a) {\n      return true;\n    }\n  }\n  return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "return cbrt(a) == (int)cbrt(a);",
        "grade-7": {
            "execution": 1
        },
        "23": "long root = round(std::cbrt(a));\n    return a == root * root * root;",
        "grade-23": {
            "execution": 1
        },
        "55": "if (a<0)\n    {\n        return true;\n    }\n    long b = 0;\n    while (b*b*b<a)\n    {\n        b++;\n    }\n    if (b*b*b==a)\n    {\n        return true;\n    }\n    return false;",
        "grade-55": {
            "execution": 1
        },
        "59": "long b = abs(a);\n\tlong x = round(cbrt(b));\n\treturn b == x * x * x;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.04742396842681806,
        "bleu-28": 0.16353675494656325,
        "bleu-6": 0.1193756798436947,
        "bleu-189": 0.14122877747339727,
        "bleu-70": 0.06229984647128151,
        "bleu-62": 0.06390070145350682,
        "bleu-57": 0.4814805033528217,
        "bleu-35": 0.4118816624507275,
        "bleu-188": 0.46120127350267315,
        "bleu-26": 0.13352750695371754,
        "bleu-173": 0.27043468096990875,
        "bleu-139": 0.15462145585958095,
        "bleu-22": 0.43515631137368643,
        "bleu-151": 0.17891935801846132,
        "bleu-108": 0.08540150098598577,
        "bleu-8": 0.08490924407605206,
        "bleu-7": 0.04370878055513308,
        "bleu-23": 0.06962576643012355,
        "bleu-55": 0.09854027679556498,
        "bleu-59": 0.1398870695418933,
        "codebleu-163": 0.26658995872814634,
        "codebleu-28": 0.7328608867068295,
        "codebleu-6": 0.4252923976608187,
        "codebleu-189": 0.4921803906037591,
        "codebleu-70": 0.5900584795321637,
        "codebleu-62": 0.4954678362573099,
        "codebleu-57": 0.633554831369099,
        "codebleu-35": 0.6248031133861564,
        "codebleu-188": 0.5612076796433211,
        "codebleu-26": 0.3696080301284061,
        "codebleu-173": 0.6783882991208774,
        "codebleu-139": 0.46877407086309175,
        "codebleu-22": 0.6965026600827487,
        "codebleu-151": 0.57729986418639,
        "codebleu-108": 0.41796095504877123,
        "codebleu-8": 0.5928362573099414,
        "codebleu-7": 0.2115808148990669,
        "codebleu-23": 0.3269878052221996,
        "codebleu-55": 0.5878654970760233,
        "codebleu-59": 0.4478731259315987,
        "chrf-163": 0.16581737862236604,
        "chrf-28": 0.42171990862063713,
        "chrf-6": 0.3609924366061974,
        "chrf-189": 0.23159073747317696,
        "chrf-70": 0.34372577688662176,
        "chrf-62": 0.1830224595632056,
        "chrf-57": 0.5480094113092219,
        "chrf-35": 0.5152913408090793,
        "chrf-188": 0.5878677040060776,
        "chrf-26": 0.2188352943508557,
        "chrf-173": 0.4765273487766637,
        "chrf-139": 0.37919215021693103,
        "chrf-22": 0.5867337424891935,
        "chrf-151": 0.39689247513084974,
        "chrf-108": 0.17394409101048655,
        "chrf-8": 0.3736779598103499,
        "chrf-7": 0.15698162587054731,
        "chrf-23": 0.15509179066197637,
        "chrf-55": 0.3690886191226408,
        "chrf-59": 0.20990805330819529,
        "rougel-163": 0.3548387096774194,
        "rougel-28": 0.448,
        "rougel-6": 0.4186046511627907,
        "rougel-189": 0.37037037037037035,
        "rougel-70": 0.4067796610169491,
        "rougel-62": 0.35789473684210527,
        "rougel-57": 0.7058823529411764,
        "rougel-35": 0.717391304347826,
        "rougel-188": 0.775,
        "rougel-26": 0.36111111111111116,
        "rougel-173": 0.48062015503875966,
        "rougel-139": 0.4533333333333333,
        "rougel-22": 0.6326530612244898,
        "rougel-151": 0.45283018867924524,
        "rougel-108": 0.30769230769230765,
        "rougel-8": 0.49523809523809526,
        "rougel-7": 0.30508474576271183,
        "rougel-23": 0.2647058823529412,
        "rougel-55": 0.5263157894736843,
        "rougel-59": 0.35616438356164387,
        "meteor-163": 0.2059849704777241,
        "meteor-28": 0.5711065410255851,
        "meteor-6": 0.4190943539546486,
        "meteor-189": 0.4131383115216833,
        "meteor-70": 0.5098470195181993,
        "meteor-62": 0.35291158677839113,
        "meteor-57": 0.7297934853236151,
        "meteor-35": 0.7506343077771648,
        "meteor-188": 0.6944444444444444,
        "meteor-26": 0.2761552918632076,
        "meteor-173": 0.7561361999231823,
        "meteor-139": 0.4021889786359509,
        "meteor-22": 0.7572924275626979,
        "meteor-151": 0.49496596378817065,
        "meteor-108": 0.2474563953488372,
        "meteor-8": 0.5124282002188184,
        "meteor-7": 0.2443167912005644,
        "meteor-23": 0.2524902818270165,
        "meteor-55": 0.5071463342617051,
        "meteor-59": 0.30098039215686284,
        "ruby-163": 0.25,
        "ruby-28": 0.2716049382716049,
        "ruby-6": 0.20454545454545459,
        "ruby-189": 0.15909090909090906,
        "ruby-70": 0.22972972972972971,
        "ruby-62": 0.13725490196078427,
        "ruby-57": 0.5,
        "ruby-35": 0.5833333333333333,
        "ruby-188": 0.6363636363636364,
        "ruby-26": 0.25,
        "ruby-173": 0.2941176470588235,
        "ruby-139": 0.2954545454545454,
        "ruby-22": 0.4444444444444444,
        "ruby-151": 0.29032258064516125,
        "ruby-108": 0.18181818181818177,
        "ruby-8": 0.34426229508196726,
        "ruby-7": 0.18181818181818177,
        "ruby-23": 0.18181818181818177,
        "ruby-55": 0.37254901960784315,
        "ruby-59": 0.18181818181818177,
        "codebertscore_f1-163": 0.791790783405304,
        "codebertscore_f3-163": 0.7790806889533997,
        "codebertscore_f1-28": 0.8264122605323792,
        "codebertscore_f3-28": 0.8418307900428772,
        "codebertscore_f1-6": 0.7543152570724487,
        "codebertscore_f3-6": 0.7568504810333252,
        "codebertscore_f1-189": 0.7703045010566711,
        "codebertscore_f3-189": 0.7625534534454346,
        "codebertscore_f1-70": 0.7936434745788574,
        "codebertscore_f3-70": 0.8023561835289001,
        "codebertscore_f1-62": 0.7515230178833008,
        "codebertscore_f3-62": 0.7727784514427185,
        "codebertscore_f1-57": 0.9114913940429688,
        "codebertscore_f3-57": 0.9030987620353699,
        "codebertscore_f1-35": 0.85423743724823,
        "codebertscore_f3-35": 0.8733797073364258,
        "codebertscore_f1-188": 0.9086701273918152,
        "codebertscore_f3-188": 0.9070642590522766,
        "codebertscore_f1-26": 0.7386747002601624,
        "codebertscore_f3-26": 0.721699059009552,
        "codebertscore_f1-173": 0.821718156337738,
        "codebertscore_f3-173": 0.8575743436813354,
        "codebertscore_f1-139": 0.8338786959648132,
        "codebertscore_f3-139": 0.8270303010940552,
        "codebertscore_f1-22": 0.879960298538208,
        "codebertscore_f3-22": 0.8865401744842529,
        "codebertscore_f1-151": 0.800018310546875,
        "codebertscore_f3-151": 0.8120410442352295,
        "codebertscore_f1-108": 0.7531247735023499,
        "codebertscore_f3-108": 0.7624794840812683,
        "codebertscore_f1-8": 0.8325769305229187,
        "codebertscore_f3-8": 0.8313807249069214,
        "codebertscore_f1-7": 0.7163435220718384,
        "codebertscore_f3-7": 0.6869264245033264,
        "codebertscore_f1-23": 0.7643210291862488,
        "codebertscore_f3-23": 0.7557160258293152,
        "codebertscore_f1-55": 0.8367627859115601,
        "codebertscore_f3-55": 0.8317498564720154,
        "codebertscore_f1-59": 0.775669515132904,
        "codebertscore_f3-59": 0.7718903422355652,
        "codebertscore_s_f1-163": 0.778053879737854,
        "codebertscore_s_f3-163": 0.7665367126464844,
        "codebertscore_s_f1-28": 0.8369917869567871,
        "codebertscore_s_f3-28": 0.852368950843811,
        "codebertscore_s_f1-6": 0.751797080039978,
        "codebertscore_s_f3-6": 0.7546172738075256,
        "codebertscore_s_f1-189": 0.7657665014266968,
        "codebertscore_s_f3-189": 0.7606033086776733,
        "codebertscore_s_f1-70": 0.8010098934173584,
        "codebertscore_s_f3-70": 0.8080781698226929,
        "codebertscore_s_f1-62": 0.761509358882904,
        "codebertscore_s_f3-62": 0.7821439504623413,
        "codebertscore_s_f1-57": 0.9163013100624084,
        "codebertscore_s_f3-57": 0.9072638154029846,
        "codebertscore_s_f1-35": 0.8658389449119568,
        "codebertscore_s_f3-35": 0.884357750415802,
        "codebertscore_s_f1-188": 0.9057945013046265,
        "codebertscore_s_f3-188": 0.9058246612548828,
        "codebertscore_s_f1-26": 0.7294027209281921,
        "codebertscore_s_f3-26": 0.7140130996704102,
        "codebertscore_s_f1-173": 0.8276322484016418,
        "codebertscore_s_f3-173": 0.865791916847229,
        "codebertscore_s_f1-139": 0.833589494228363,
        "codebertscore_s_f3-139": 0.826109766960144,
        "codebertscore_s_f1-22": 0.8918818831443787,
        "codebertscore_s_f3-22": 0.8941359519958496,
        "codebertscore_s_f1-151": 0.7974529266357422,
        "codebertscore_s_f3-151": 0.8085116744041443,
        "codebertscore_s_f1-108": 0.7423662543296814,
        "codebertscore_s_f3-108": 0.7533698678016663,
        "codebertscore_s_f1-8": 0.8448885083198547,
        "codebertscore_s_f3-8": 0.8389427065849304,
        "codebertscore_s_f1-7": 0.7153812050819397,
        "codebertscore_s_f3-7": 0.6901519894599915,
        "codebertscore_s_f1-23": 0.7576307058334351,
        "codebertscore_s_f3-23": 0.7513189315795898,
        "codebertscore_s_f1-55": 0.8535522818565369,
        "codebertscore_s_f3-55": 0.8480851650238037,
        "codebertscore_s_f1-59": 0.7828747630119324,
        "codebertscore_s_f3-59": 0.7790152430534363,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(Union_long_float_std_string u2) {\n        return f0 == u2.f0 || f1 == u2.f1 || f2 == u2.f2 ;\n    }\n};\nunion Union_long_float_std_string_{}{\n    long f0;\n    float f1;\n    std::string f2;\n    {} f3;    Union_long_float_std_string_{}(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_{}(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_{}(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_{}({} _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_{}() {}\n    bool operator==(Union_long_float_std_string_{} u2) {\n        return f0 == u2.f0 || f1 == u2.f1 || f2 == u2.f2 || f3 == u2.f3 ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// compare_one(1, 2.5) \u279e 2.5\n// compare_one(1, \"2,3\") \u279e \"2,3\"\n// compare_one(\"5,1\", \"6\") \u279e \"6\"\n// compare_one(\"1\", 1) \u279e None\nUnion_long_float_std_string_{} compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n",
        "snippet": [
            "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n"
        ],
        "simplified": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
        "task_id": "137",
        "166": "if (a == b) {\n        Union_long_float_std_string_{} none_;\n        return none_;\n    }\n    else {\n        if (a.f0 > b.f0) {\n            Union_long_float_std_string_{} a_;\n            a_.f0 = a.f0;\n            return a_;\n        }\n        else if (a.f1 > b.f1) {\n            Union_long_float_std_string_{} a_;\n            a_.f1 = a.f1;\n            return a_;\n        }\n        else if (a.f2 > b.f2) {\n            Union_long_float_std_string_{} a_;\n            a_.f2 = a.f2;\n            return a_;\n        }\n        else {\n            Union_long_float_std_string_{} b_;\n            b_.f0 = b.f0;\n            return b_;\n        }\n    }",
        "grade-166": {
            "execution": 0
        },
        "28": "if (a == b) {\n        return {{}};\n    } else if (std::to_string(a.f0) == a.f2 || std::to_string(a.f1) == a.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    } else if (std::to_string(b.f0) == b.f2 || std::to_string(b.f1) == b.f2) {\n        return Union_long_float_std_string_{}(b.f2);\n    } else if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    } else if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    } else {\n        return Union_long_float_std_string_{}(b.f0);\n    }",
        "grade-28": {
            "execution": 0
        },
        "6": "if (a.f0 == b.f0) return Union_long_float_std_string_{}{};\n    if (a.f1 == b.f1) return Union_long_float_std_string_{}{};\n    if (a.f2 == b.f2) return Union_long_float_std_string_{}{};\n    return Union_long_float_std_string_{}(std::max(a.f0, std::max(b.f0, std::max(a.f1, std::max(b.f1, std::max(std::stod(a.f2), std::stod(b.f2)))))));",
        "grade-6": {
            "execution": 0
        },
        "195": "if (a.f0 == b.f0 && a.f1 == b.f1 && a.f2 == b.f2) {\n        return {};\n    }\n    if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    }\n    if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    }\n    if (a.f2 > b.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    }\n    return {};",
        "grade-195": {
            "execution": 0
        },
        "70": "if (a.f0 == b.f0) {\n        return Union_long_float_std_string_{}{};\n    }\n    else if (a.f1 == b.f1) {\n        return Union_long_float_std_string_{}{};\n    }\n    else if (a.f2 == b.f2) {\n        return Union_long_float_std_string_{}{};\n    }\n    else if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    }\n    else if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    }\n    else if (a.f2 > b.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    }\n    else if (b.f0 > a.f0) {\n        return Union_long_float_std_string_{}(b.f0);\n    }\n    else if (b.f1 > a.f1) {\n        return Union_long_float_std_string_{}(b.f1);\n    }\n    else if (b.f2 > a.f2) {\n        return Union_long_float_std_string_{}(b.f2);\n    }",
        "grade-70": {
            "execution": 0
        },
        "62": "if ( a == b ) return {} ;\n    if ( a.f0 > b.f0 ) return a.f0 ;\n    if ( a.f1 > b.f1 ) return a.f1 ;\n    if ( a.f2 > b.f2 ) return a.f2 ;\n    if ( b.f0 > a.f0 ) return b.f0 ;\n    if ( b.f1 > a.f1 ) return b.f1 ;\n    if ( b.f2 > a.f2 ) return b.f2 ;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (a == b) {\n        return {};\n    }\n    else if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    }\n    else if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    }\n    else if (a.f2 > b.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    }\n    else if (b.f0 > a.f0) {\n        return Union_long_float_std_string_{}(b.f0);\n    }\n    else if (b.f1 > a.f1) {\n        return Union_long_float_std_string_{}(b.f1);\n    }\n    else if (b.f2 > a.f2) {\n        return Union_long_float_std_string_{}(b.f2);\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "if (a == b) {\n        return {{}};\n    }\n    if (a.f2.size() > 0 && b.f2.size() > 0) {\n        return std::max(a.f2, b.f2);\n    }\n    if (a.f2.size() > 0 && b.f2.size() == 0) {\n        return a.f2;\n    }\n    if (a.f2.size() == 0 && b.f2.size() > 0) {\n        return b.f2;\n    }\n    if (a.f1 > 0.0 && b.f1 > 0.0) {\n        return std::max(a.f1, b.f1);\n    }\n    if (a.f1 > 0.0 && b.f1 <= 0.0) {\n        return a.f1;\n    }\n    if (a.f1 <= 0.0 && b.f1 > 0.0) {\n        return b.f1;\n    }\n    if (a.f0 > 0 && b.f0 > 0) {\n        return std::max(a.f0, b.f0);\n    }\n    return Union_long_float_std_string_{}{};",
        "grade-35": {
            "execution": 0
        },
        "194": "if (a == b) return {};\n    return std::max(a, b);",
        "grade-194": {
            "execution": 0
        },
        "26": "if (a.f0 == b.f0) { return {}; }\n    if (a.f1 == b.f1) { return {}; }\n    if (a.f2 == b.f2) { return {}; }\n    if (a.f0 > b.f0) { return a.f0; }\n    if (a.f1 > b.f1) { return a.f1; }\n    if (a.f2 > b.f2) { return a.f2; }\n    if (b.f0 > a.f0) { return b.f0; }\n    if (b.f1 > a.f1) { return b.f1; }\n    if (b.f2 > a.f2) { return b.f2; }\n    return {};",
        "grade-26": {
            "execution": 0
        },
        "177": "if (a == b) return {} ;\n    if (a.f0 > b.f0 || a.f1 > b.f1) return a ;\n    if (b.f0 > a.f0 || b.f1 > a.f1) return b ;\n    return std::max(a.f2, b.f2) ;",
        "grade-177": {
            "execution": 0
        },
        "140": "if (a == b) return {} ;\n    if (typeid(a.f0) == typeid(a.f1)) return (a.f0 > a.f1 ? a : b) ;\n    if (typeid(a.f0) == typeid(a.f2)) return (a.f0 > a.f2 ? a : b) ;\n    if (typeid(a.f1) == typeid(a.f2)) return (a.f1 > a.f2 ? a : b) ;\n    assert(0) ;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (a == b) {\n        {} c;\n        return c;\n    } else if (a.f0 > b.f0) {\n        return a.f0;\n    } else if (a.f1 > b.f1) {\n        return a.f1;\n    } else if (a.f2 > b.f2) {\n        return a.f2;\n    } else if (b.f0 > a.f0) {\n        return b.f0;\n    } else if (b.f1 > a.f1) {\n        return b.f1;\n    } else if (b.f2 > a.f2) {\n        return b.f2;\n    }",
        "grade-22": {
            "execution": 0
        },
        "153": "if (a.f0==b.f0) {\n    return {}();\n  }\n  if (a.f1==b.f1) {\n    return {}();\n  }\n  if (a.f2==b.f2) {\n    return {}();\n  }\n  if (a.f0>b.f0) {\n    return a.f0;\n  }\n  if (a.f1>b.f1) {\n    return a.f1;\n  }\n  if (a.f2>b.f2) {\n    return a.f2;\n  }\n  return b.f0;",
        "grade-153": {
            "execution": 0
        },
        "108": "if (a == b) {\n        return {} ;\n    }\n    Union_long_float_std_string_{} mx(a) ;\n    if (a < b) {\n        mx = b ;\n    }\n    return mx ;",
        "grade-108": {
            "execution": 0
        },
        "8": "if (a == b) {\n        return {} ;\n    } else if (a.f0 > b.f0) {\n        return a.f0 ;\n    } else if (a.f1 > b.f1) {\n        return a.f1 ;\n    } else if (a.f2 > b.f2) {\n        return a.f2 ;\n    } else if (b.f0 > a.f0) {\n        return b.f0 ;\n    } else if (b.f1 > a.f1) {\n        return b.f1 ;\n    } else if (b.f2 > a.f2) {\n        return b.f2 ;\n    } else {\n        assert(false);\n    }",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> s_a = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"};\n    std::vector<std::string> s_b = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"};\n    for(int i = 0; i < s_a.size(); i++){\n        if(a.f2.find(s_a[i]) == std::string::npos){\n            Union_long_float_std_string_{} _r = Union_long_float_std_string_{}(a.f0);\n            return _r;\n        }\n    }\n    for(int i = 0; i < s_b.size(); i++){\n        if(b.f2.find(s_b[i]) == std::string::npos){\n            Union_long_float_std_string_{} _r = Union_long_float_std_string_{}(b.f0);\n            return _r;\n        }\n    }\n    return Union_long_float_std_string_{}(1.1);",
        "grade-7": {
            "execution": 0
        },
        "23": "if (a.f0 > b.f0) return Union_long_float_std_string_{}(a.f0);\n    if (a.f1 > b.f1) return Union_long_float_std_string_{}(a.f1);\n    if (a.f2 > b.f2) return Union_long_float_std_string_{}(a.f2);\n    if (b.f0 > a.f0) return Union_long_float_std_string_{}(b.f0);\n    if (b.f1 > a.f1) return Union_long_float_std_string_{}(b.f1);\n    if (b.f2 > a.f2) return Union_long_float_std_string_{}(b.f2);\n    return Union_long_float_std_string_{}{};",
        "grade-23": {
            "execution": 0
        },
        "55": "if (a.f0 == b.f0) return Union_long_float_std_string_{}{};\n    if (a.f1 == b.f1) return Union_long_float_std_string_{}{};\n    if (a.f2 == b.f2) return Union_long_float_std_string_{}{};\n    if (a.f0 > b.f0) return Union_long_float_std_string_{}(a.f0);\n    if (a.f1 > b.f1) return Union_long_float_std_string_{}(a.f1);\n    if (a.f2 > b.f2) return Union_long_float_std_string_{}(a.f2);\n    return Union_long_float_std_string_{}(b.f0);",
        "grade-55": {
            "execution": 0
        },
        "59": "if (a.f0 == b.f0 || a.f1 == b.f1 || a.f2 == b.f2) {\n        return {};\n    }\n    if (a.f0 > b.f0 || a.f1 > b.f1 || a.f2 > b.f2) {\n        return a;\n    }\n    return b;",
        "grade-59": {
            "execution": 0
        },
        "bleu-166": 0.017410357835648826,
        "bleu-28": 0.037313687425359614,
        "bleu-6": 0.018147207653513582,
        "bleu-195": 0.01164829411025308,
        "bleu-70": 0.050969177133639125,
        "bleu-62": 0.011981152664060128,
        "bleu-57": 0.03282948261017224,
        "bleu-35": 0.06624352389149057,
        "bleu-194": 3.746240605358969e-09,
        "bleu-26": 0.03442656864293761,
        "bleu-177": 0.0019855378455957383,
        "bleu-140": 0.018928564825834226,
        "bleu-22": 0.017667221219062407,
        "bleu-153": 0.015350979182632722,
        "bleu-108": 9.138577453000226e-06,
        "bleu-8": 0.021173605856622747,
        "bleu-7": 0.12618717107744268,
        "bleu-23": 0.027049465565120574,
        "bleu-55": 0.018554381723243873,
        "bleu-59": 0.0019527847860132,
        "codebleu-166": 0.1452656216366851,
        "codebleu-28": 0.19128458869405274,
        "codebleu-6": 0.15516103487505173,
        "codebleu-195": 0.1221672902187692,
        "codebleu-70": 0.2216454286455144,
        "codebleu-62": 0.13805397032367,
        "codebleu-57": 0.181657878364452,
        "codebleu-35": 0.25590782346239793,
        "codebleu-194": 0.02607709949569152,
        "codebleu-26": 0.17555530663941088,
        "codebleu-177": 0.08796606330240164,
        "codebleu-140": 0.13676655900668433,
        "codebleu-22": 0.16034317465733824,
        "codebleu-153": 0.13484858682359935,
        "codebleu-108": 0.045362952650019675,
        "codebleu-8": 0.15829709893996352,
        "codebleu-7": 0.24892659676796275,
        "codebleu-23": 0.16771062423315627,
        "codebleu-55": 0.1516900873837391,
        "codebleu-59": 0.08114984414996224,
        "chrf-166": 0.1320176917932957,
        "chrf-28": 0.16086673824310269,
        "chrf-6": 0.1273793700823773,
        "chrf-195": 0.09764672498818178,
        "chrf-70": 0.16660190711448958,
        "chrf-62": 0.08305187520424964,
        "chrf-57": 0.14648378196639908,
        "chrf-35": 0.12212010306894631,
        "chrf-194": 0.028183730119916473,
        "chrf-26": 0.0891970718942387,
        "chrf-177": 0.0652598422556157,
        "chrf-140": 0.12377262032426009,
        "chrf-22": 0.08974212598471637,
        "chrf-153": 0.07702276166475816,
        "chrf-108": 0.04641705002361014,
        "chrf-8": 0.09546055473343572,
        "chrf-7": 0.1944318439139572,
        "chrf-23": 0.14744690557126572,
        "chrf-55": 0.1395126371483295,
        "chrf-59": 0.05275835119077755,
        "rougel-166": 0.2164179104477612,
        "rougel-28": 0.2807625649913345,
        "rougel-6": 0.2271880819366853,
        "rougel-195": 0.20849420849420852,
        "rougel-70": 0.2880523731587561,
        "rougel-62": 0.22265624999999997,
        "rougel-57": 0.2669039145907473,
        "rougel-35": 0.30441400304414,
        "rougel-194": 0.07852193995381063,
        "rougel-26": 0.26408450704225356,
        "rougel-177": 0.15384615384615385,
        "rougel-140": 0.25239005736137665,
        "rougel-22": 0.2392523364485981,
        "rougel-153": 0.24045801526717556,
        "rougel-108": 0.12080536912751678,
        "rougel-8": 0.2444444444444444,
        "rougel-7": 0.2835595776772248,
        "rougel-23": 0.24535315985130113,
        "rougel-55": 0.23551401869158878,
        "rougel-59": 0.15702479338842976,
        "meteor-166": 0.10570269642026961,
        "meteor-28": 0.17287538656735837,
        "meteor-6": 0.14952941176470588,
        "meteor-195": 0.10592512918199334,
        "meteor-70": 0.16631441840353217,
        "meteor-62": 0.12737898884949284,
        "meteor-57": 0.1473701151722881,
        "meteor-35": 0.18869591490286672,
        "meteor-194": 0.037244692287019626,
        "meteor-26": 0.14424285435195136,
        "meteor-177": 0.0850585347990261,
        "meteor-140": 0.1205215780399427,
        "meteor-22": 0.127013510869474,
        "meteor-153": 0.11893329902190587,
        "meteor-108": 0.05037859772423026,
        "meteor-8": 0.12948660932195116,
        "meteor-7": 0.2232633520105526,
        "meteor-23": 0.13563402789475354,
        "meteor-55": 0.11752324959977888,
        "meteor-59": 0.08499088485088264,
        "ruby-166": 0.12895377128953767,
        "ruby-28": 0.18491484184914841,
        "ruby-6": 0.14355231143552316,
        "ruby-195": 0.12895377128953767,
        "ruby-70": 0.1873479318734793,
        "ruby-62": 0.13625304136253036,
        "ruby-57": 0.17031630170316303,
        "ruby-35": 0.1922141119221411,
        "ruby-194": 0.041362530413625254,
        "ruby-26": 0.16301703163017034,
        "ruby-177": 0.09002433090024331,
        "ruby-140": 0.15815085158150854,
        "ruby-22": 0.14841849148418496,
        "ruby-153": 0.15085158150851585,
        "ruby-108": 0.06569343065693434,
        "ruby-8": 0.15085158150851585,
        "ruby-7": 0.18004866180048662,
        "ruby-23": 0.15571776155717765,
        "ruby-55": 0.15085158150851585,
        "ruby-59": 0.09245742092457421,
        "codebertscore_f1-166": 0.6978886723518372,
        "codebertscore_f3-166": 0.6717415452003479,
        "codebertscore_f1-28": 0.6891754865646362,
        "codebertscore_f3-28": 0.6684343814849854,
        "codebertscore_f1-6": 0.6590556502342224,
        "codebertscore_f3-6": 0.6360780596733093,
        "codebertscore_f1-195": 0.6700191497802734,
        "codebertscore_f3-195": 0.6424732804298401,
        "codebertscore_f1-70": 0.6947019696235657,
        "codebertscore_f3-70": 0.6754470467567444,
        "codebertscore_f1-62": 0.6450390219688416,
        "codebertscore_f3-62": 0.6042832732200623,
        "codebertscore_f1-57": 0.6922417879104614,
        "codebertscore_f3-57": 0.6679099798202515,
        "codebertscore_f1-35": 0.6843379735946655,
        "codebertscore_f3-35": 0.6640129685401917,
        "codebertscore_f1-194": 0.6095066070556641,
        "codebertscore_f3-194": 0.5307289361953735,
        "codebertscore_f1-26": 0.6666922569274902,
        "codebertscore_f3-26": 0.6304529309272766,
        "codebertscore_f1-177": 0.640506386756897,
        "codebertscore_f3-177": 0.5945043563842773,
        "codebertscore_f1-140": 0.6808332204818726,
        "codebertscore_f3-140": 0.6349065899848938,
        "codebertscore_f1-22": 0.674920380115509,
        "codebertscore_f3-22": 0.6370071172714233,
        "codebertscore_f1-153": 0.6613242030143738,
        "codebertscore_f3-153": 0.6205019354820251,
        "codebertscore_f1-108": 0.6280964612960815,
        "codebertscore_f3-108": 0.5762472152709961,
        "codebertscore_f1-8": 0.6707615852355957,
        "codebertscore_f3-8": 0.6338092684745789,
        "codebertscore_f1-7": 0.7107502818107605,
        "codebertscore_f3-7": 0.7038269639015198,
        "codebertscore_f1-23": 0.6687813401222229,
        "codebertscore_f3-23": 0.6438975930213928,
        "codebertscore_f1-55": 0.6723025441169739,
        "codebertscore_f3-55": 0.6485728025436401,
        "codebertscore_f1-59": 0.6359370350837708,
        "codebertscore_f3-59": 0.5961151719093323,
        "codebertscore_s_f1-166": 0.807144045829773,
        "codebertscore_s_f3-166": 0.757100522518158,
        "codebertscore_s_f1-28": 0.8046955466270447,
        "codebertscore_s_f3-28": 0.7628467082977295,
        "codebertscore_s_f1-6": 0.7986989617347717,
        "codebertscore_s_f3-6": 0.7523596882820129,
        "codebertscore_s_f1-195": 0.800919771194458,
        "codebertscore_s_f3-195": 0.7505070567131042,
        "codebertscore_s_f1-70": 0.7982355356216431,
        "codebertscore_s_f3-70": 0.7586303949356079,
        "codebertscore_s_f1-62": 0.7908232808113098,
        "codebertscore_s_f3-62": 0.7454180121421814,
        "codebertscore_s_f1-57": 0.8024255037307739,
        "codebertscore_s_f3-57": 0.7573723196983337,
        "codebertscore_s_f1-35": 0.7828066349029541,
        "codebertscore_s_f3-35": 0.7568838596343994,
        "codebertscore_s_f1-194": 0.8172223567962646,
        "codebertscore_s_f3-194": 0.7288753390312195,
        "codebertscore_s_f1-26": 0.7895834445953369,
        "codebertscore_s_f3-26": 0.7515290379524231,
        "codebertscore_s_f1-177": 0.7995330095291138,
        "codebertscore_s_f3-177": 0.742862343788147,
        "codebertscore_s_f1-140": 0.8153491020202637,
        "codebertscore_s_f3-140": 0.7664144039154053,
        "codebertscore_s_f1-22": 0.793839156627655,
        "codebertscore_s_f3-22": 0.75262451171875,
        "codebertscore_s_f1-153": 0.7981060147285461,
        "codebertscore_s_f3-153": 0.7493230700492859,
        "codebertscore_s_f1-108": 0.8178507685661316,
        "codebertscore_s_f3-108": 0.738702118396759,
        "codebertscore_s_f1-8": 0.7927746772766113,
        "codebertscore_s_f3-8": 0.7523401379585266,
        "codebertscore_s_f1-7": 0.8200182914733887,
        "codebertscore_s_f3-7": 0.7873810529708862,
        "codebertscore_s_f1-23": 0.8007456064224243,
        "codebertscore_s_f3-23": 0.7544280290603638,
        "codebertscore_s_f1-55": 0.8032897710800171,
        "codebertscore_s_f3-55": 0.7549332976341248,
        "codebertscore_s_f1-59": 0.7991344928741455,
        "codebertscore_s_f3-59": 0.7454445958137512,
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-166": 2,
        "raw_gpt35_nswr-166": "2",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-195": 2,
        "raw_gpt35_nswr-195": "2",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 1,
        "raw_gpt35_nswr-62": "1",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-194": 2,
        "raw_gpt35_nswr-194": "2",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-177": 2,
        "raw_gpt35_nswr-177": "2",
        "gpt35_nswr-140": 2,
        "raw_gpt35_nswr-140": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-153": 2,
        "raw_gpt35_nswr-153": "2",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3, 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfloat triangle_area(long a, long b, long c) {\n",
        "snippet": [
            "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "task_id": "71",
        "168": "assert(a>0 && b>0 && c>0);\n  // Return -1 for invalid inputs\n  if ( a+b <= c || b+c <= a || a+c <= b ) {\n    return -1;\n  }\n  // Return the area of triangle\n  return sqrt( (a+b+c)*(a+b-c)*(b+c-a)*(a+c-b) )/4;",
        "grade-168": {
            "execution": 0
        },
        "28": "if (a+b > c && a+c > b && b+c > a)\n        return sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4;\n    else\n        return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "if(a+b>c && a+c>b && b+c>a)\n    {\n        float s = (a+b+c)/2.0;\n        float area = sqrt(s*(s-a)*(s-b)*(s-c));\n        return area;\n    }\n    else\n    {\n        return -1;\n    }",
        "grade-6": {
            "execution": 0
        },
        "196": "if(a+b>c && a+c>b && b+c>a)\n\t{\n\t\tfloat s = (a+b+c)/2.0;\n\t\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n\t}\n\telse\n\t\treturn -1;",
        "grade-196": {
            "execution": 0
        },
        "71": "//cout << a << ' ' << b << ' ' << c << endl;\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    //cout << area << endl;\n    if(area > 0)\n        return area;\n    else\n        return -1;",
        "grade-71": {
            "execution": 0
        },
        "62": "float area,p;\n\tp=(a+b+c)/2.0;\n\tarea=sqrt(p*(p-a)*(p-b)*(p-c));\n\tif(area>0)\n\treturn area;\n\telse\n\treturn -1;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (a+b > c && a+c > b && b+c > a)\n        return abs((float)a*(float)b*0.5);\n    else\n        return -1;",
        "grade-57": {
            "execution": 0
        },
        "35": "float s = (a + b + c) / 2.0;\n  if(a + b > c && a + c > b && b + c > a) {\n    float result = sqrt(s * (s - a) * (s - b) * (s - c));\n    return (float)((int)(result * 100)) / 100;\n  } else {\n    return -1;\n  }",
        "grade-35": {
            "execution": 0
        },
        "194": "std::sort(std::begin({a, b, c}), std::end({a, b, c}));\n  if (a + b <= c) return -1;\n  long p = (a + b + c) / 2;\n  float x = (float)p * (p - a) * (p - b) * (p - c);\n  return std::sqrt(x);",
        "grade-194": {
            "execution": 0
        },
        "26": "if(a + b > c && a + c > b && b + c > a)\n        return sqrt(4 * a * a * b * b - (a * a + b * b - c * c) * (a * a + b * b - c * c)) / 4;\n    return -1;",
        "grade-26": {
            "execution": 0
        },
        "178": "float s=(a+b+c)/2.0;\n  if((s-a)<0.0 || (s-b)<0.0 || (s-c)<0.0){\n    return -1;\n  }\n  return sqrt(s*(s-a)*(s-b)*(s-c));",
        "grade-178": {
            "execution": 0
        },
        "144": "// Error checking\n    assert(a > 0 && b > 0 && c > 0);\n    //\n    long s = (a + b + c) / 2;\n    long area = sqrt(s * (s - a) * (s - b) * (s - c));\n    float ans = (float)area / (1.0 * area);\n    if(ans == 1.0) return area;\n    else return -1;",
        "grade-144": {
            "execution": 0
        },
        "22": "if (a+b <= c || a+c <= b || b+c <= a) return -1;\n    double p = (a+b+c)/2.0;\n    return sqrt(p*(p-a)*(p-b)*(p-c));",
        "grade-22": {
            "execution": 0
        },
        "156": "assert(a > 0 && b > 0 && c > 0);\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  float s = (a + b + c) / 2.0;\n  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n  return round(area * 100) / 100;",
        "grade-156": {
            "execution": 0
        },
        "109": "float p = (a + b + c) / 2.0;\n  float area = sqrt(p * (p - a) * (p - b) * (p - c));\n  if (area <= 0) {\n    return -1;\n  }\n  return area;",
        "grade-109": {
            "execution": 0
        },
        "8": "float p, area;\n    p = (a + b + c) / 2.0;\n    area = sqrt(p * (p - a) * (p - b) * (p - c));\n    if (area > 0)\n        return area;\n    else\n        return -1;",
        "grade-8": {
            "execution": 0
        },
        "7": "float area = -1;\n  float s = (a + b + c) / 2.0;\n  area = sqrt(s * (s - a) * (s - b) * (s - c));\n  if (a + b > c && a + c > b && b + c > a) {\n    return area;\n  }\n  return -1;",
        "grade-7": {
            "execution": 0
        },
        "23": "long sum = a + b + c;\n    if (a > 0 && b > 0 && c > 0 && (a < sum) && (b < sum) && (c < sum)) {\n        float s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;",
        "grade-23": {
            "execution": 0
        },
        "55": "if(a < 0 || b < 0 || c < 0) return -1;\n    if(a + b > c && a + c > b && b + c > a)\n        return 0.5 * std::sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n    return -1;",
        "grade-55": {
            "execution": 0
        },
        "59": "return 0;",
        "grade-59": {
            "execution": 0
        },
        "bleu-168": 0.3246574781737023,
        "bleu-28": 0.2619972995092396,
        "bleu-6": 0.4313179074944513,
        "bleu-196": 0.3675952892577141,
        "bleu-71": 0.289367540339323,
        "bleu-62": 0.3116048166252621,
        "bleu-57": 0.15865656476247478,
        "bleu-35": 0.32214796339350515,
        "bleu-194": 0.34549400284356246,
        "bleu-26": 0.17485040493972995,
        "bleu-178": 0.2937412991457564,
        "bleu-144": 0.27211353334423616,
        "bleu-22": 0.5208214148172055,
        "bleu-156": 0.40756725456100057,
        "bleu-109": 0.3157552396914229,
        "bleu-8": 0.3116048166252621,
        "bleu-7": 0.4204568807711045,
        "bleu-23": 0.2939337059318496,
        "bleu-55": 0.28954064374197697,
        "bleu-59": 1.0734807958127193e-11,
        "codebleu-168": 0.5792912035102613,
        "codebleu-28": 0.5148188962202813,
        "codebleu-6": 0.6774891431467815,
        "codebleu-196": 0.6323446917810351,
        "codebleu-71": 0.6083568308493424,
        "codebleu-62": 0.5554602590863096,
        "codebleu-57": 0.3182872345886644,
        "codebleu-35": 0.6652666554679386,
        "codebleu-194": 0.6674053048686306,
        "codebleu-26": 0.4805753906465707,
        "codebleu-178": 0.5339524768828717,
        "codebleu-144": 0.6185519078269595,
        "codebleu-22": 0.6531934602080188,
        "codebleu-156": 0.696131162212398,
        "codebleu-109": 0.5376469634766972,
        "codebleu-8": 0.5616469635129155,
        "codebleu-7": 0.6841021361433733,
        "codebleu-23": 0.6657120236674908,
        "codebleu-55": 0.5664875953642559,
        "codebleu-59": 0.01923076941585579,
        "chrf-168": 0.3573966387218806,
        "chrf-28": 0.284050415993547,
        "chrf-6": 0.47276059316459523,
        "chrf-196": 0.35080515919261906,
        "chrf-71": 0.4350820628530007,
        "chrf-62": 0.4280570382160128,
        "chrf-57": 0.288954936187387,
        "chrf-35": 0.3612755316134588,
        "chrf-194": 0.40634698641309713,
        "chrf-26": 0.2473499296271946,
        "chrf-178": 0.29577057146487135,
        "chrf-144": 0.40836250708700095,
        "chrf-22": 0.4317392841586465,
        "chrf-156": 0.4913629191935066,
        "chrf-109": 0.44349903125934903,
        "chrf-8": 0.41148809956354887,
        "chrf-7": 0.49290777455631685,
        "chrf-23": 0.3259735423996887,
        "chrf-55": 0.31909067727408374,
        "chrf-59": 0.04438190831404663,
        "rougel-168": 0.4745762711864407,
        "rougel-28": 0.5774647887323944,
        "rougel-6": 0.6887417218543047,
        "rougel-196": 0.6527777777777778,
        "rougel-71": 0.5212121212121212,
        "rougel-62": 0.5223880597014925,
        "rougel-57": 0.49586776859504134,
        "rougel-35": 0.46060606060606063,
        "rougel-194": 0.5380116959064327,
        "rougel-26": 0.4931506849315068,
        "rougel-178": 0.42580645161290326,
        "rougel-144": 0.4795321637426901,
        "rougel-22": 0.7499999999999999,
        "rougel-156": 0.6971428571428572,
        "rougel-109": 0.556390977443609,
        "rougel-8": 0.5223880597014925,
        "rougel-7": 0.522875816993464,
        "rougel-23": 0.5149700598802395,
        "rougel-55": 0.48484848484848486,
        "rougel-59": 0.07594936708860758,
        "meteor-168": 0.4887560119589237,
        "meteor-28": 0.44045368620037806,
        "meteor-6": 0.716403162055336,
        "meteor-196": 0.6581973406148928,
        "meteor-71": 0.4147291302167262,
        "meteor-62": 0.40741807284339127,
        "meteor-57": 0.33616678521228127,
        "meteor-35": 0.45084459236475954,
        "meteor-194": 0.597461505462262,
        "meteor-26": 0.3164378041225333,
        "meteor-178": 0.5093810795464996,
        "meteor-144": 0.41153481085690546,
        "meteor-22": 0.7361880578639581,
        "meteor-156": 0.7596242641335479,
        "meteor-109": 0.48140647649624163,
        "meteor-8": 0.40741807284339127,
        "meteor-7": 0.5078026091215784,
        "meteor-23": 0.6176927888481817,
        "meteor-55": 0.5308053040103493,
        "meteor-59": 0.021834061135371178,
        "ruby-168": 0.27722772277227725,
        "ruby-28": 0.39473684210526316,
        "ruby-6": 0.5526315789473684,
        "ruby-196": 0.5526315789473684,
        "ruby-71": 0.3932584269662921,
        "ruby-62": 0.35526315789473684,
        "ruby-57": 0.3421052631578947,
        "ruby-35": 0.2921348314606742,
        "ruby-194": 0.41052631578947374,
        "ruby-26": 0.3157894736842105,
        "ruby-178": 0.240506329113924,
        "ruby-144": 0.33684210526315794,
        "ruby-22": 0.6842105263157895,
        "ruby-156": 0.5454545454545454,
        "ruby-109": 0.32894736842105265,
        "ruby-8": 0.35526315789473684,
        "ruby-7": 0.22077922077922074,
        "ruby-23": 0.3626373626373627,
        "ruby-55": 0.2808988764044944,
        "ruby-59": 0.03947368421052633,
        "codebertscore_f1-168": 0.831615149974823,
        "codebertscore_f3-168": 0.8384256362915039,
        "codebertscore_f1-28": 0.8517687320709229,
        "codebertscore_f3-28": 0.8383922576904297,
        "codebertscore_f1-6": 0.9085908532142639,
        "codebertscore_f3-6": 0.9085671305656433,
        "codebertscore_f1-196": 0.9008147120475769,
        "codebertscore_f3-196": 0.896173357963562,
        "codebertscore_f1-71": 0.8324492573738098,
        "codebertscore_f3-71": 0.8477147221565247,
        "codebertscore_f1-62": 0.853728175163269,
        "codebertscore_f3-62": 0.8507513999938965,
        "codebertscore_f1-57": 0.8592967391014099,
        "codebertscore_f3-57": 0.8399572968482971,
        "codebertscore_f1-35": 0.843568742275238,
        "codebertscore_f3-35": 0.8510074615478516,
        "codebertscore_f1-194": 0.8401250243186951,
        "codebertscore_f3-194": 0.8451705574989319,
        "codebertscore_f1-26": 0.8227400779724121,
        "codebertscore_f3-26": 0.8132829666137695,
        "codebertscore_f1-178": 0.8527528047561646,
        "codebertscore_f3-178": 0.8589372634887695,
        "codebertscore_f1-144": 0.8228254318237305,
        "codebertscore_f3-144": 0.8440073132514954,
        "codebertscore_f1-22": 0.9227402210235596,
        "codebertscore_f3-22": 0.9137102961540222,
        "codebertscore_f1-156": 0.861362636089325,
        "codebertscore_f3-156": 0.8747538328170776,
        "codebertscore_f1-109": 0.8530466556549072,
        "codebertscore_f3-109": 0.8485183715820312,
        "codebertscore_f1-8": 0.8395888209342957,
        "codebertscore_f3-8": 0.8371049761772156,
        "codebertscore_f1-7": 0.8560121655464172,
        "codebertscore_f3-7": 0.8546494245529175,
        "codebertscore_f1-23": 0.8283863067626953,
        "codebertscore_f3-23": 0.8346958160400391,
        "codebertscore_f1-55": 0.8362082242965698,
        "codebertscore_f3-55": 0.8310217261314392,
        "codebertscore_f1-59": 0.48024922609329224,
        "codebertscore_f3-59": 0.43482619524002075,
        "codebertscore_s_f1-168": 0.8444960713386536,
        "codebertscore_s_f3-168": 0.8524011373519897,
        "codebertscore_s_f1-28": 0.8630866408348083,
        "codebertscore_s_f3-28": 0.8502653241157532,
        "codebertscore_s_f1-6": 0.9182763695716858,
        "codebertscore_s_f3-6": 0.918067991733551,
        "codebertscore_s_f1-196": 0.9059045314788818,
        "codebertscore_s_f3-196": 0.901326596736908,
        "codebertscore_s_f1-71": 0.8385932445526123,
        "codebertscore_s_f3-71": 0.8554598689079285,
        "codebertscore_s_f1-62": 0.8668189644813538,
        "codebertscore_s_f3-62": 0.8650548458099365,
        "codebertscore_s_f1-57": 0.8675968050956726,
        "codebertscore_s_f3-57": 0.8478697538375854,
        "codebertscore_s_f1-35": 0.8544454574584961,
        "codebertscore_s_f3-35": 0.8613539934158325,
        "codebertscore_s_f1-194": 0.8520572185516357,
        "codebertscore_s_f3-194": 0.8580674529075623,
        "codebertscore_s_f1-26": 0.8406771421432495,
        "codebertscore_s_f3-26": 0.8298569917678833,
        "codebertscore_s_f1-178": 0.8655049204826355,
        "codebertscore_s_f3-178": 0.8728252649307251,
        "codebertscore_s_f1-144": 0.8320281505584717,
        "codebertscore_s_f3-144": 0.8554197549819946,
        "codebertscore_s_f1-22": 0.925493597984314,
        "codebertscore_s_f3-22": 0.9164114594459534,
        "codebertscore_s_f1-156": 0.8757767081260681,
        "codebertscore_s_f3-156": 0.8912755846977234,
        "codebertscore_s_f1-109": 0.866265058517456,
        "codebertscore_s_f3-109": 0.8600227236747742,
        "codebertscore_s_f1-8": 0.8586437702178955,
        "codebertscore_s_f3-8": 0.8570054173469543,
        "codebertscore_s_f1-7": 0.8698887825012207,
        "codebertscore_s_f3-7": 0.8673769235610962,
        "codebertscore_s_f1-23": 0.8421647548675537,
        "codebertscore_s_f3-23": 0.8475936055183411,
        "codebertscore_s_f1-55": 0.8463860750198364,
        "codebertscore_s_f3-55": 0.8396057486534119,
        "codebertscore_s_f1-59": 0.6249638795852661,
        "codebertscore_s_f3-59": 0.5503145456314087,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-178": 3,
        "raw_gpt35_nsnr-178": "3",
        "gpt35_nsnr-144": 3,
        "raw_gpt35_nsnr-144": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 0,
        "raw_gpt35_nsnr-59": "0",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-178": 4,
        "raw_gpt35_nswr-178": "4",
        "gpt35_nswr-144": 3,
        "raw_gpt35_nswr-144": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 0,
        "raw_gpt35_nswr-59": "0"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n",
        "snippet": [
            "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n"
        ],
        "simplified": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
        "task_id": "120",
        "165": "std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num : arr) {\n        pq.push(num);\n        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
        "grade-165": {
            "execution": 0
        },
        "28": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        long max = INT_MIN;\n        long maxIndex = -1;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push_back(max);\n        arr.erase(arr.begin() + maxIndex);\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Build the heap\n    std::make_heap(arr.begin(), arr.end());\n    // To store the result\n    std::vector<long> res;\n    for(long i = 0; i < k; i++) {\n        // Select the maximum from heap\n        res.push_back(arr.front());\n        // Delete the root\n        std::pop_heap(arr.begin(), arr.end());\n        arr.pop_back();\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "191": "// create max heap\n    std::make_heap(arr.begin(), arr.end());\n    // pop k elements\n    for (int i = 0; i < k; i++) {\n        std::pop_heap(arr.begin(), arr.end());\n        arr.pop_back();\n    }\n    // sort the elements\n    std::sort(arr.begin(), arr.end());\n    return arr;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::vector<long> res;\n    if (arr.size() < k) {\n        return res;\n    }\n    std::multiset<long> mt;\n    for (long el : arr) {\n        mt.insert(el);\n    }\n    std::vector<long>::iterator it = arr.begin();\n    while (k > 0) {\n        res.push_back(*mt.rbegin());\n        mt.erase(mt.find(*mt.rbegin()));\n        k--;\n    }\n    return res;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (arr.size() == 0) return arr;\n    long len = arr.size();\n    if (k == 0) return std::vector<long>();\n    if (k >= len) return arr;\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> result;\n    for (long i = len - 1; i >= len - k; i--) {\n        result.push_back(arr[i]);\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> result(k);\n    long n = arr.size();\n    // insert the first k-1 elements into the priority queue\n    std::priority_queue<long> q;\n    for (long i = 0; i < k - 1; i++)\n        q.push(arr[i]);\n    // extract the max and insert\n    for (long i = k - 1; i < n; i++) {\n        q.push(arr[i]);\n        result[i - k + 1] = q.top();\n        q.pop();\n    }\n    // add the last k-1 elements\n    for (long i = 0; i < k - 1; i++) {\n        result[n - k + 1 + i] = q.top();\n        q.pop();\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::multiset<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n        if (s.size() > k)\n            s.erase(s.begin());\n    }\n    std::vector<long> v(s.begin(), s.end());\n    std::reverse(v.begin(), v.end());\n    return v;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::vector<long> result;\n    // TODO: Write your code here\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(), result.end());\n    for (long i = k; i < arr.size(); i++) {\n        long j = 0;\n        while (j < k && result[j] < arr[i]) {\n            j++;\n        }\n        if (j < k) {\n            result.insert(result.begin() + j, arr[i]);\n            result.pop_back();\n        }\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "175": "// return a vector with maximum k values\n    // brute force: sort the array and return first k elements\n\n    std::sort(arr.begin(), arr.end());\n\n    std::vector<long> ans;\n    for(long i = arr.size() - 1; i >= arr.size() - k; i--) {\n        ans.push_back(arr[i]);\n    }\n    return ans;",
        "grade-175": {
            "execution": 0
        },
        "140": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(), result.end());\n    for (long i = k; i < arr.size(); i++) {\n        long j = 0;\n        while (j < k) {\n            if (arr[i] > result[j]) {\n                result.erase(result.begin() + j);\n                result.push_back(arr[i]);\n                std::sort(result.begin(), result.end());\n                break;\n            }\n            j++;\n        }\n    }\n    return result;",
        "grade-140": {
            "execution": 1
        },
        "22": "if (arr.size() == 0) return {};\n    if (arr.size() == 1) return arr;\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> res(arr.end() - k, arr.end());\n    return res;",
        "grade-22": {
            "execution": 1
        },
        "152": "assert(k <= arr.size());\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "std::vector<long> result;\n    if (arr.size() == k) {\n        return arr;\n    }\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(INT64_MIN);\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > result[0]) {\n            result[0] = arr[i];\n            long temp = result[0];\n            for (long j = 1; j < k; j++) {\n                if (result[j] < temp) {\n                    std::swap(result[j], temp);\n                }\n            }\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "// create max heap to store the largest k values\n    std::priority_queue<long> pq;\n    for (long& i : arr) {\n        pq.push(i);\n        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    // create vector to store the largest k values in sorted order\n    std::vector<long> res;\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (arr.size() == 0) {\n    return {};\n  }\n  if (arr.size() == 1) {\n    return arr;\n  }\n  std::vector<long> ret;\n  for (long i = 0; i < k; i++) {\n    long max = arr[0];\n    long max_index = 0;\n    for (long j = 0; j < arr.size(); j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        max_index = j;\n      }\n    }\n    ret.push_back(max);\n    arr.erase(arr.begin() + max_index);\n  }\n  return ret;",
        "grade-23": {
            "execution": 0
        },
        "55": "// Insert your code here\n  int n = arr.size();\n  if(k > n){\n    k = n;\n  }\n  std::priority_queue<long> pq;\n  for(int i = 0; i < k; i++){\n    pq.push(arr[i]);\n  }\n  for(int i = k; i < n; i++){\n    if(arr[i] > pq.top()){\n      pq.pop();\n      pq.push(arr[i]);\n    }\n  }\n  std::vector<long> ans;\n  while(!pq.empty()){\n    ans.push_back(pq.top());\n    pq.pop();\n  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    long i = 0;\n    while (!pq.empty() && i < k) {\n        result.push_back(pq.top());\n        pq.pop();\n        i++;\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-165": 0.06484954196858377,
        "bleu-28": 0.07980500717216638,
        "bleu-6": 0.21785027807222437,
        "bleu-191": 0.28011493801633514,
        "bleu-70": 0.09310316814101795,
        "bleu-62": 0.17075600132599839,
        "bleu-57": 0.014307583393401917,
        "bleu-35": 0.1581986980421277,
        "bleu-190": 0.018539353188936222,
        "bleu-26": 0.0886312315616087,
        "bleu-175": 0.22070682264744426,
        "bleu-140": 0.10596635287127558,
        "bleu-22": 0.41700123678729123,
        "bleu-152": 0.08470035657305344,
        "bleu-108": 0.05819789550455329,
        "bleu-8": 0.017157589223136524,
        "bleu-7": 0.04962470936865228,
        "bleu-23": 0.06748621038685554,
        "bleu-55": 0.08641442785036914,
        "bleu-59": 0.05337484241197143,
        "codebleu-165": 0.6304635492493876,
        "codebleu-28": 0.6203609891629148,
        "codebleu-6": 0.7269768459338593,
        "codebleu-191": 0.7388267167074942,
        "codebleu-70": 0.6922544470498808,
        "codebleu-62": 0.731046429537824,
        "codebleu-57": 0.6435185185185185,
        "codebleu-35": 0.7192445474861229,
        "codebleu-190": 0.18875978745734323,
        "codebleu-26": 0.717651571478941,
        "codebleu-175": 0.7273066450834649,
        "codebleu-140": 0.7239741229639975,
        "codebleu-22": 0.8535011101721942,
        "codebleu-152": 0.6556865520079673,
        "codebleu-108": 0.6768152948487188,
        "codebleu-8": 0.530122655122655,
        "codebleu-7": 0.6286340167069,
        "codebleu-23": 0.678123621351758,
        "codebleu-55": 0.7019585792734587,
        "codebleu-59": 0.6329050949245886,
        "chrf-165": 0.21808765272055677,
        "chrf-28": 0.3010296518362662,
        "chrf-6": 0.4266250443968484,
        "chrf-191": 0.5215061080033299,
        "chrf-70": 0.2918197474419896,
        "chrf-62": 0.41313204251175384,
        "chrf-57": 0.1956528948737847,
        "chrf-35": 0.4000198592583801,
        "chrf-190": 0.1766728783902215,
        "chrf-26": 0.308047070261683,
        "chrf-175": 0.4309513272612713,
        "chrf-140": 0.3216623365475787,
        "chrf-22": 0.6797383736373803,
        "chrf-152": 0.2508903966629538,
        "chrf-108": 0.2500644259689026,
        "chrf-8": 0.1963801464653032,
        "chrf-7": 0.19962152204221473,
        "chrf-23": 0.28379745692591657,
        "chrf-55": 0.3065124435759898,
        "chrf-59": 0.2270054480786086,
        "rougel-165": 0.34146341463414637,
        "rougel-28": 0.28767123287671237,
        "rougel-6": 0.4413793103448276,
        "rougel-191": 0.45925925925925926,
        "rougel-70": 0.33112582781456956,
        "rougel-62": 0.36601307189542487,
        "rougel-57": 0.21719457013574658,
        "rougel-35": 0.3888888888888889,
        "rougel-190": 0.2,
        "rougel-26": 0.30337078651685395,
        "rougel-175": 0.48484848484848486,
        "rougel-140": 0.30208333333333337,
        "rougel-22": 0.631578947368421,
        "rougel-152": 0.35658914728682173,
        "rougel-108": 0.30985915492957744,
        "rougel-8": 0.22352941176470587,
        "rougel-7": 0.32432432432432434,
        "rougel-23": 0.30337078651685395,
        "rougel-55": 0.24880382775119617,
        "rougel-59": 0.3134328358208955,
        "meteor-165": 0.409125515914889,
        "meteor-28": 0.4689991201940039,
        "meteor-6": 0.5676972876437103,
        "meteor-191": 0.6115631307468044,
        "meteor-70": 0.4296296296296296,
        "meteor-62": 0.4957954454011428,
        "meteor-57": 0.3291024851098788,
        "meteor-35": 0.6174758384967672,
        "meteor-190": 0.11220760233918126,
        "meteor-26": 0.4239883409068801,
        "meteor-175": 0.5638626481305693,
        "meteor-140": 0.48916613520408164,
        "meteor-22": 0.8507168271771586,
        "meteor-152": 0.3852529997960854,
        "meteor-108": 0.3853775853775854,
        "meteor-8": 0.33231152543321857,
        "meteor-7": 0.42087275626370285,
        "meteor-23": 0.4281012940651495,
        "meteor-55": 0.518217056282016,
        "meteor-59": 0.35866221907990553,
        "ruby-165": 0.24096385542168675,
        "ruby-28": 0.17924528301886788,
        "ruby-6": 0.3047619047619048,
        "ruby-191": 0.3157894736842105,
        "ruby-70": 0.22522522522522526,
        "ruby-62": 0.23008849557522126,
        "ruby-57": 0.1270718232044199,
        "ruby-35": 0.2596153846153846,
        "ruby-190": 0.125,
        "ruby-26": 0.18840579710144922,
        "ruby-175": 0.3369565217391305,
        "ruby-140": 0.1842105263157895,
        "ruby-22": 0.472972972972973,
        "ruby-152": 0.2359550561797753,
        "ruby-108": 0.20588235294117652,
        "ruby-8": 0.1384615384615384,
        "ruby-7": 0.2222222222222222,
        "ruby-23": 0.18840579710144922,
        "ruby-55": 0.14792899408284022,
        "ruby-59": 0.22340425531914898,
        "codebertscore_f1-165": 0.6982587575912476,
        "codebertscore_f3-165": 0.7297380566596985,
        "codebertscore_f1-28": 0.6824250817298889,
        "codebertscore_f3-28": 0.7284027338027954,
        "codebertscore_f1-6": 0.7440316081047058,
        "codebertscore_f3-6": 0.8119667768478394,
        "codebertscore_f1-191": 0.7844258546829224,
        "codebertscore_f3-191": 0.8328762054443359,
        "codebertscore_f1-70": 0.7342661619186401,
        "codebertscore_f3-70": 0.7788500785827637,
        "codebertscore_f1-62": 0.7884900569915771,
        "codebertscore_f3-62": 0.8409674763679504,
        "codebertscore_f1-57": 0.6627979874610901,
        "codebertscore_f3-57": 0.7290663719177246,
        "codebertscore_f1-35": 0.7717676758766174,
        "codebertscore_f3-35": 0.8128006458282471,
        "codebertscore_f1-190": 0.7069462537765503,
        "codebertscore_f3-190": 0.72352135181427,
        "codebertscore_f1-26": 0.7268380522727966,
        "codebertscore_f3-26": 0.7992717623710632,
        "codebertscore_f1-175": 0.7967573404312134,
        "codebertscore_f3-175": 0.8620933890342712,
        "codebertscore_f1-140": 0.7163487672805786,
        "codebertscore_f3-140": 0.7896645665168762,
        "codebertscore_f1-22": 0.8633617162704468,
        "codebertscore_f3-22": 0.8939517140388489,
        "codebertscore_f1-152": 0.7383767366409302,
        "codebertscore_f3-152": 0.7798978090286255,
        "codebertscore_f1-108": 0.7168543338775635,
        "codebertscore_f3-108": 0.7590342164039612,
        "codebertscore_f1-8": 0.6739162802696228,
        "codebertscore_f3-8": 0.7249706387519836,
        "codebertscore_f1-7": 0.6826513409614563,
        "codebertscore_f3-7": 0.7228392958641052,
        "codebertscore_f1-23": 0.6960399150848389,
        "codebertscore_f3-23": 0.7411605715751648,
        "codebertscore_f1-55": 0.7037639617919922,
        "codebertscore_f3-55": 0.7588520646095276,
        "codebertscore_f1-59": 0.7162870764732361,
        "codebertscore_f3-59": 0.7610547542572021,
        "codebertscore_s_f1-165": 0.7030425667762756,
        "codebertscore_s_f3-165": 0.7422767281532288,
        "codebertscore_s_f1-28": 0.6942175626754761,
        "codebertscore_s_f3-28": 0.7461332082748413,
        "codebertscore_s_f1-6": 0.747643232345581,
        "codebertscore_s_f3-6": 0.8273029327392578,
        "codebertscore_s_f1-191": 0.7762767672538757,
        "codebertscore_s_f3-191": 0.8303989768028259,
        "codebertscore_s_f1-70": 0.7319729328155518,
        "codebertscore_s_f3-70": 0.7808297872543335,
        "codebertscore_s_f1-62": 0.7830343246459961,
        "codebertscore_s_f3-62": 0.8428749442100525,
        "codebertscore_s_f1-57": 0.6747406721115112,
        "codebertscore_s_f3-57": 0.7424246072769165,
        "codebertscore_s_f1-35": 0.765288770198822,
        "codebertscore_s_f3-35": 0.8142110109329224,
        "codebertscore_s_f1-190": 0.6744070649147034,
        "codebertscore_s_f3-190": 0.6782991290092468,
        "codebertscore_s_f1-26": 0.7388447523117065,
        "codebertscore_s_f3-26": 0.8133041858673096,
        "codebertscore_s_f1-175": 0.7861634492874146,
        "codebertscore_s_f3-175": 0.8583194017410278,
        "codebertscore_s_f1-140": 0.7362473607063293,
        "codebertscore_s_f3-140": 0.8106780648231506,
        "codebertscore_s_f1-22": 0.8655659556388855,
        "codebertscore_s_f3-22": 0.9012248516082764,
        "codebertscore_s_f1-152": 0.7237511873245239,
        "codebertscore_s_f3-152": 0.7705722451210022,
        "codebertscore_s_f1-108": 0.7222133874893188,
        "codebertscore_s_f3-108": 0.771917462348938,
        "codebertscore_s_f1-8": 0.6869481205940247,
        "codebertscore_s_f3-8": 0.7401803731918335,
        "codebertscore_s_f1-7": 0.6836295127868652,
        "codebertscore_s_f3-7": 0.7340566515922546,
        "codebertscore_s_f1-23": 0.7079846262931824,
        "codebertscore_s_f3-23": 0.759523868560791,
        "codebertscore_s_f1-55": 0.7142015695571899,
        "codebertscore_s_f3-55": 0.7837333679199219,
        "codebertscore_s_f1-59": 0.7070607542991638,
        "codebertscore_s_f3-59": 0.7570216059684753,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 0,
        "raw_gpt35_nsnr-190": "0",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n",
        "snippet": [
            "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n"
        ],
        "simplified": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "56",
        "171": "int a = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            a++;\n        } else {\n            a--;\n        }\n        if (a < 0) {\n            return false;\n        }\n    }\n    if (a == 0) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-171": {
            "execution": 1
        },
        "28": "std::stack<char> s;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='<'){\n            s.push(brackets[i]);\n        }\n        else{\n            if(s.empty()){\n                return false;\n            }\n            else{\n                s.pop();\n            }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-28": {
            "execution": 1
        },
        "6": "std::stack<char> bracketStack;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            bracketStack.push(brackets[i]);\n        } else {\n            if (bracketStack.empty()) {\n                return false;\n            } else {\n                bracketStack.pop();\n            }\n        }\n    }\n    return bracketStack.empty();",
        "grade-6": {
            "execution": 1
        },
        "71": "if (brackets.size() == 0) {\n\t\treturn true;\n\t}\n\telse if (brackets.at(0) == '>') {\n\t\treturn false;\n\t}\n\telse {\n\t\tint b = 0;\n\t\tfor (char c : brackets) {\n\t\t\tif (c == '<') {\n\t\t\t\tb++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tb--;\n\t\t\t}\n\t\t\tif (b < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (b != 0) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}",
        "grade-71": {
            "execution": 1
        },
        "63": "std::stack<char> bracket;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      bracket.push(brackets[i]);\n    } else {\n      if (bracket.empty()) {\n        return false;\n      } else {\n        bracket.pop();\n      }\n    }\n  }\n  if (bracket.empty()) {\n    return true;\n  } else {\n    return false;\n  }",
        "grade-63": {
            "execution": 1
        },
        "58": "// all the opening brackets\n  std::stack<char> stack;\n  // iterate the whole string\n  for (char& ch : brackets) {\n    // we found an opening bracket\n    if (ch == '<') {\n      stack.push(ch);\n    }\n    // we found a closing bracket\n    else {\n      // if we found a closing bracket but there are no\n      // opening brackets we have a wrong bracketing\n      if (stack.empty()) {\n        return false;\n      }\n      //  remove the top opening bracket\n      stack.pop();\n    }\n  }\n  // the whole string is correct iff the stack is empty\n  return stack.empty();",
        "grade-58": {
            "execution": 1
        },
        "35": "",
        "grade-35": {
            "execution": 0
        },
        "26": "// Print a message to show that the function has been called.\n    std::cout << \"The string is \" << brackets << std::endl;\n    int open_bracket_num = 0;\n    int close_bracket_num = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_bracket_num++;\n        } else if (brackets[i] == '>') {\n            close_bracket_num++;\n        }\n    }\n    if (open_bracket_num != close_bracket_num) {\n        return false;\n    }\n    int balance = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            balance++;\n        } else if (brackets[i] == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    if (balance != 0) {\n        return false;\n    }\n    return true;",
        "grade-26": {
            "execution": 1
        },
        "182": "int i, num=0;\n  int n = brackets.length();\n  for(i=0;i<n;i++){\n    if(brackets[i]=='<') num++;\n    else num--;\n    if(num<0) break;\n  }\n  if(num!=0) return false;\n  return true;",
        "grade-182": {
            "execution": 1
        },
        "145": "// YOUR CODE HERE\n    // check if brackets string is empty. If yes, return true\n    if (brackets.length() == 0) {\n        return true;\n    }\n    // check if brackets string has odd number of characters. If yes, return false\n    if (brackets.length() % 2 != 0) {\n        return false;\n    }\n    // if brackets has even number of characters and is not empty, create a stack\n    std::stack<char> stk;\n    // iterate through brackets string\n    for (char &c : brackets) {\n        // if current character is opening bracket, push it to stack\n        if (c == '<') {\n            stk.push(c);\n        }\n        // if current character is closing bracket\n        else {\n            // if stack is empty, that means there's a closing bracket with no\n            // corresponding opening bracket, so return false\n            if (stk.empty()) {\n                return false;\n            }\n            // otherwise, pop the stack as there's an opening bracket corresponding\n            // to the current closing bracket\n            else {\n                stk.pop();\n            }\n        }\n    }\n    // if stack is empty, return true. Otherwise, return false\n    return stk.empty();",
        "grade-145": {
            "execution": 1
        },
        "22": "std::stack<char> stk;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            stk.push(brackets[i]);\n        } else {\n            if (stk.empty()) {\n                return false;\n            } else {\n                stk.pop();\n            }\n        }\n    }\n    return stk.empty();",
        "grade-22": {
            "execution": 1
        },
        "158": "int len = brackets.length();\n\tint count = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count != 0) {\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-158": {
            "execution": 1
        },
        "113": "/*\n\tint open=0;\n\tint close=0;\n\tint i;\n\tfor(i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='<')\n\t\t\topen++;\n\t\telse if(brackets[i]=='>')\n\t\t\tclose++;\n\t\tif(close>open)\n\t\t\treturn false;\n\t}\n\tif(open==close)\n\t\treturn true;\n\telse\n\t\treturn false;\n\t\t*/\n\tstd::stack<char> st;\n\tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='<')\n\t\t\tst.push(brackets[i]);\n\t\telse if(brackets[i]=='>')\n\t\t{\n\t\t\tif(st.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.empty())\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-113": {
            "execution": 1
        },
        "8": "// set open_counter to 0\n    int open_counter = 0;\n    // loop over chars in brackets\n    for (size_t i = 0; i < brackets.size(); i++) {\n        // if char is \">\"\n        if (brackets[i] == '>') {\n            // decrement open_counter\n            open_counter--;\n        }\n        // if char is \"<\"\n        else if (brackets[i] == '<') {\n            // increment open_counter\n            open_counter++;\n        }\n        // if open_counter is less than 0\n        if (open_counter < 0) {\n            // return False\n            return false;\n        }\n    }\n    // if open_counter is 0\n    if (open_counter == 0) {\n        // return True\n        return true;\n    }\n    // else\n    else {\n        // return False\n        return false;\n    }",
        "grade-8": {
            "execution": 1
        },
        "7": "int balance = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            balance += 1;\n        } else {\n            balance -= 1;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;",
        "grade-7": {
            "execution": 1
        },
        "23": "// your code here",
        "grade-23": {
            "execution": 0
        },
        "56": "// You're welcome to use a stack, we've included one for you.\n  std::stack<char> stack;\n  // You can add some code here to make it easier to solve the problem.\n  \n  // You'll need to fill this with code!\n  // Note that this code currently does nothing, and will always return true.\n  // This is only here so that the code compiles.\n  for(int i=0;i<brackets.length();i++){\n    if(brackets[i]=='<'){\n      stack.push(brackets[i]);\n    }\n    else if(!stack.empty()){\n      stack.pop();\n    }\n    else\n      return false;\n  }\n  if(stack.empty())\n    return true;\n  else\n    return false;",
        "grade-56": {
            "execution": 1
        },
        "60": "if (brackets.size()%2!=0) return false;\n\tstd::stack<char> s;\n\tfor (int i=0;i<brackets.size();i++) {\n\t\tif (brackets[i]=='<') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\tif (s.empty()) return false;\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
        "grade-60": {
            "execution": 1
        },
        "135": "// hint: it may be useful to know how many \"open\"\n  // angle brackets there are at any time.\n  int counter = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      counter++;\n    } else {\n      counter--;\n    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  if (counter == 0) {\n    return true;\n  } else {\n    return false;\n  }",
        "grade-135": {
            "execution": 1
        },
        "161": "// replace all characters in brackets with '<' or '>'\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] != '<' && brackets[i] != '>') {\n      brackets[i] = '?';\n    }\n  }\n  // return true if brackets is the same as brackets reversed\n  std::string reversed = brackets;\n  std::reverse(reversed.begin(), reversed.end());\n  return brackets == reversed;",
        "grade-161": {
            "execution": 0
        },
        "bleu-171": 0.5322769978478936,
        "bleu-28": 0.42938682426602875,
        "bleu-6": 0.4520657467575864,
        "bleu-71": 0.29233831072375893,
        "bleu-63": 0.42938682426602875,
        "bleu-58": 0.086131825009026,
        "bleu-35": 0.0,
        "bleu-26": 0.2818262577045877,
        "bleu-182": 0.5177048234585784,
        "bleu-145": 0.09000088946000025,
        "bleu-22": 0.4459373896312702,
        "bleu-158": 0.5350327435043228,
        "bleu-113": 0.29338646826557513,
        "bleu-8": 0.2955929991983696,
        "bleu-7": 0.24347176792165548,
        "bleu-23": 0.0,
        "bleu-56": 0.26897219987440957,
        "bleu-60": 0.45896329355373455,
        "bleu-135": 0.4241767588751979,
        "bleu-161": 0.3175595663302616,
        "codebleu-171": 0.6620007142385472,
        "codebleu-28": 0.6214670038168925,
        "codebleu-6": 0.6009909673793027,
        "codebleu-71": 0.5939294503691549,
        "codebleu-63": 0.6226273016596063,
        "codebleu-58": 0.4222313371616079,
        "codebleu-35": 0.0,
        "codebleu-26": 0.7692347076534616,
        "codebleu-182": 0.6506559859935441,
        "codebleu-145": 0.5294950024484577,
        "codebleu-22": 0.594376256537661,
        "codebleu-158": 0.6821147887440405,
        "codebleu-113": 0.7206323797100568,
        "codebleu-8": 0.7430711031477167,
        "codebleu-7": 0.36616364485835745,
        "codebleu-23": 0.018867924528301886,
        "codebleu-56": 0.6377187060488897,
        "codebleu-60": 0.6418343339929773,
        "codebleu-135": 0.6720371861584011,
        "codebleu-161": 0.5921219726473945,
        "chrf-171": 0.5494267858629379,
        "chrf-28": 0.5507988165211828,
        "chrf-6": 0.5015611187320551,
        "chrf-71": 0.4713905671422927,
        "chrf-63": 0.5404040425243115,
        "chrf-58": 0.2582782887160658,
        "chrf-35": 0.0,
        "chrf-26": 0.5017323180648035,
        "chrf-182": 0.5251404704582172,
        "chrf-145": 0.2857656161955299,
        "chrf-22": 0.4679614158154044,
        "chrf-158": 0.5710597073622404,
        "chrf-113": 0.5529336352392334,
        "chrf-8": 0.45437761346072797,
        "chrf-7": 0.3530065169406668,
        "chrf-23": 0.013619066305896368,
        "chrf-56": 0.48293543651685555,
        "chrf-60": 0.543844708254898,
        "chrf-135": 0.5321277271526236,
        "chrf-161": 0.42175573550998313,
        "rougel-171": 0.7116564417177915,
        "rougel-28": 0.5966850828729281,
        "rougel-6": 0.5977011494252874,
        "rougel-71": 0.5133689839572193,
        "rougel-63": 0.5966850828729281,
        "rougel-58": 0.2697674418604651,
        "rougel-35": 0,
        "rougel-26": 0.5156794425087108,
        "rougel-182": 0.6751592356687898,
        "rougel-145": 0.21951219512195122,
        "rougel-22": 0.6035502958579881,
        "rougel-158": 0.6787878787878787,
        "rougel-113": 0.4927536231884058,
        "rougel-8": 0.5394190871369295,
        "rougel-7": 0.5362318840579711,
        "rougel-23": 0.0,
        "rougel-56": 0.432,
        "rougel-60": 0.5777777777777777,
        "rougel-135": 0.6170212765957448,
        "rougel-161": 0.4873096446700507,
        "meteor-171": 0.6336174274120511,
        "meteor-28": 0.5217418649677283,
        "meteor-6": 0.4515414505217066,
        "meteor-71": 0.5698642473627771,
        "meteor-63": 0.5217418649677283,
        "meteor-58": 0.23277443203842188,
        "meteor-35": 0.0,
        "meteor-26": 0.7891335187501166,
        "meteor-182": 0.6600929445118581,
        "meteor-145": 0.30131311119961063,
        "meteor-22": 0.447899324338789,
        "meteor-158": 0.6765672806226543,
        "meteor-113": 0.5890331231213533,
        "meteor-8": 0.6623610258508968,
        "meteor-7": 0.3587968853376762,
        "meteor-23": 0.0,
        "meteor-56": 0.5124282002188184,
        "meteor-60": 0.4988880836446403,
        "meteor-135": 0.6372600430054285,
        "meteor-161": 0.5014559359706546,
        "ruby-171": 0.6024096385542168,
        "ruby-28": 0.47959183673469385,
        "ruby-6": 0.46153846153846156,
        "ruby-71": 0.3557692307692307,
        "ruby-63": 0.47959183673469385,
        "ruby-58": 0.15909090909090906,
        "ruby-35": 0.0,
        "ruby-26": 0.3529411764705882,
        "ruby-182": 0.5060240963855422,
        "ruby-145": 0.13469387755102036,
        "ruby-22": 0.4534883720930233,
        "ruby-158": 0.49397590361445787,
        "ruby-113": 0.33678756476683935,
        "ruby-8": 0.4113924050632911,
        "ruby-7": 0.40963855421686746,
        "ruby-23": 0.0,
        "ruby-56": 0.281437125748503,
        "ruby-60": 0.4020618556701031,
        "ruby-135": 0.4476190476190476,
        "ruby-161": 0.368421052631579,
        "codebertscore_f1-171": 0.8913673758506775,
        "codebertscore_f3-171": 0.8981747627258301,
        "codebertscore_f1-28": 0.8198939561843872,
        "codebertscore_f3-28": 0.8335923552513123,
        "codebertscore_f1-6": 0.8336625695228577,
        "codebertscore_f3-6": 0.845332682132721,
        "codebertscore_f1-71": 0.8278868198394775,
        "codebertscore_f3-71": 0.8351519107818604,
        "codebertscore_f1-63": 0.8441534638404846,
        "codebertscore_f3-63": 0.8499503135681152,
        "codebertscore_f1-58": 0.6911135315895081,
        "codebertscore_f3-58": 0.7248807549476624,
        "codebertscore_f1-35": 0.0,
        "codebertscore_f3-35": 0.0,
        "codebertscore_f1-26": 0.7893991470336914,
        "codebertscore_f3-26": 0.8280720114707947,
        "codebertscore_f1-182": 0.8961487412452698,
        "codebertscore_f3-182": 0.9041040539741516,
        "codebertscore_f1-145": 0.6739163994789124,
        "codebertscore_f3-145": 0.7375208735466003,
        "codebertscore_f1-22": 0.8191401958465576,
        "codebertscore_f3-22": 0.8360199332237244,
        "codebertscore_f1-158": 0.908709704875946,
        "codebertscore_f3-158": 0.9111446738243103,
        "codebertscore_f1-113": 0.8316544890403748,
        "codebertscore_f3-113": 0.8596739768981934,
        "codebertscore_f1-8": 0.7567407488822937,
        "codebertscore_f3-8": 0.8155238032341003,
        "codebertscore_f1-7": 0.8591527342796326,
        "codebertscore_f3-7": 0.8486855030059814,
        "codebertscore_f1-23": 0.5297908782958984,
        "codebertscore_f3-23": 0.5089396834373474,
        "codebertscore_f1-56": 0.7330162525177002,
        "codebertscore_f3-56": 0.8029550909996033,
        "codebertscore_f1-60": 0.8518862128257751,
        "codebertscore_f3-60": 0.86015385389328,
        "codebertscore_f1-135": 0.8321518301963806,
        "codebertscore_f3-135": 0.8842354416847229,
        "codebertscore_f1-161": 0.7866990566253662,
        "codebertscore_f3-161": 0.815892219543457,
        "codebertscore_s_f1-171": 0.8970727324485779,
        "codebertscore_s_f3-171": 0.903215229511261,
        "codebertscore_s_f1-28": 0.8297252655029297,
        "codebertscore_s_f3-28": 0.8457849025726318,
        "codebertscore_s_f1-6": 0.8392981886863708,
        "codebertscore_s_f3-6": 0.8555392622947693,
        "codebertscore_s_f1-71": 0.8377565741539001,
        "codebertscore_s_f3-71": 0.8446089029312134,
        "codebertscore_s_f1-63": 0.8536680936813354,
        "codebertscore_s_f3-63": 0.8618571162223816,
        "codebertscore_s_f1-58": 0.6943491101264954,
        "codebertscore_s_f3-58": 0.7326533794403076,
        "codebertscore_s_f1-35": 0,
        "codebertscore_s_f3-35": 0,
        "codebertscore_s_f1-26": 0.8047531843185425,
        "codebertscore_s_f3-26": 0.8471344709396362,
        "codebertscore_s_f1-182": 0.9013712406158447,
        "codebertscore_s_f3-182": 0.9087945222854614,
        "codebertscore_s_f1-145": 0.6944194436073303,
        "codebertscore_s_f3-145": 0.7548216581344604,
        "codebertscore_s_f1-22": 0.8263425827026367,
        "codebertscore_s_f3-22": 0.8469769358634949,
        "codebertscore_s_f1-158": 0.9117220640182495,
        "codebertscore_s_f3-158": 0.914120614528656,
        "codebertscore_s_f1-113": 0.8407366275787354,
        "codebertscore_s_f3-113": 0.8684785962104797,
        "codebertscore_s_f1-8": 0.7741042375564575,
        "codebertscore_s_f3-8": 0.8356317281723022,
        "codebertscore_s_f1-7": 0.8661308884620667,
        "codebertscore_s_f3-7": 0.8573687076568604,
        "codebertscore_s_f1-23": 0.5052629709243774,
        "codebertscore_s_f3-23": 0.4871988892555237,
        "codebertscore_s_f1-56": 0.7399324774742126,
        "codebertscore_s_f3-56": 0.8124354481697083,
        "codebertscore_s_f1-60": 0.8549883365631104,
        "codebertscore_s_f3-60": 0.8628467917442322,
        "codebertscore_s_f1-135": 0.8391116857528687,
        "codebertscore_s_f3-135": 0.8948237895965576,
        "codebertscore_s_f1-161": 0.7919780015945435,
        "codebertscore_s_f3-161": 0.8250742554664612,
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "3 - The code snippet correctly checks if every opening bracket has a corresponding closing bracket. However, it does not handle cases where there are extra closing brackets without corresponding opening brackets. For example, the input \">>\" would return True, but it should return False.",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-145": 4,
        "raw_gpt35_nsnr-145": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-161": 3,
        "raw_gpt35_nsnr-161": "3",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-182": 4,
        "raw_gpt35_nswr-182": "4",
        "gpt35_nswr-145": 3,
        "raw_gpt35_nswr-145": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-158": 4,
        "raw_gpt35_nswr-158": "4",
        "gpt35_nswr-113": 3,
        "raw_gpt35_nswr-113": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4",
        "gpt35_nswr-161": 2,
        "raw_gpt35_nswr-161": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string s, long n) {\n",
        "snippet": [
            "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n"
        ],
        "simplified": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
        "task_id": "117",
        "163": "std::vector<std::string> v;\n    int cnt = 0;\n    std::string word = \"\";\n    for (char& c : s) {\n        if (c != ' ') {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                cnt = 0;\n            else\n                cnt++;\n            word += c;\n        }\n        else {\n            if (cnt == n) {\n                v.push_back(word);\n            }\n            cnt = 0;\n            word = \"\";\n        }\n    }\n    if (cnt == n)\n        v.push_back(word);\n    return v;",
        "grade-163": {
            "execution": 0
        },
        "28": "//your code here",
        "grade-28": {
            "execution": 0
        },
        "6": "std::stringstream ss(s);\n\tstd::vector<std::string> words;\n\tstd::string word;\n\tstd::vector<std::string> ret;\n\twhile (ss >> word) {\n\t\tlong count = 0;\n\t\tstd::string lower_case = word;\n\t\tstd::transform(lower_case.begin(), lower_case.end(), lower_case.begin(), ::tolower);\n\t\tfor (int i = 0; i < lower_case.size(); i++) {\n\t\t\tif (lower_case[i] != 'a' && lower_case[i] != 'e' && lower_case[i] != 'i' && lower_case[i] != 'o' && lower_case[i] != 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tret.push_back(word);\n\t\t}\n\t}\n\treturn ret;",
        "grade-6": {
            "execution": 1
        },
        "189": "// Let's break down this problem step by step, shall we?\n\t// We need to iterate over each letter in the string 's' and check \n\t// whether or not that letter is a consonant or a vowel.\n\t// There are two things we can do, we can write out every possible vowel \n\t// and check if the letter is contained in that list, or we can use \n\t// regular expressions and check if the letter is contained in a regex \n\t// that checks if the letter is a vowel.\n\t// Let's go with the second approach.\n\t// We can use std::regex_match to check if a given character is a vowel, \n\t// let's implement that:\n\tauto is_vowel = [](char c) {\n\t\treturn std::regex_match(std::string(1, c), std::regex(\"[aeiou]\"));\n\t};\n\t// Next, we need to iterate over the input string and check if each letter \n\t// is a vowel or a consonant, and keep track of how many consonants are \n\t// in the current word.\n\tstd::vector<std::string> result;\n\tstd::string current_word;\n\tlong current_word_consonants = 0;\n\tfor (char c : s) {\n\t\t// If the current character is a vowel we go to the next character\n\t\tif (is_vowel(c)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// If the current character is a consonant we append it to the current \n\t\t// word and increment the consonant counter for the current word.\n\t\tcurrent_word += c;\n\t\tcurrent_word_consonants++;\n\t\t// If the next character is a space, we've reached the end of a word.\n\t\t// We need to check if the current word has exactly n consonants and \n\t\t// add it to the result vector if that's the case.\n\t\tif (c == ' ') {\n\t\t\tif (current_word_consonants == n) {\n\t\t\t\tresult.push_back(current_word);\n\t\t\t}\n\t\t\t// And then reset the current",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<std::string> words;\n  std::string word;\n  //char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n  //std::vector<char> v(vowels, vowels + sizeof(vowels)/sizeof(char));\n  long count = 0;\n  for(int i = 0; i < s.length(); i++) {\n    if(s[i] == ' ') {\n      if(count == n) {\n        words.push_back(word);\n      }\n      word = \"\";\n      count = 0;\n    } else {\n      word += s[i];\n      if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n        count++;\n      }\n    }\n  }\n  if(count == n) {\n    words.push_back(word);\n  }\n  return words;",
        "grade-70": {
            "execution": 0
        },
        "62": "int cons = 0;\n\tstd::vector<std::string> result;\n\tstd::string word = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tif (cons == n) {\n\t\t\t\tresult.push_back(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tcons = 0;\n\t\t}\n\t\telse {\n\t\t\tword += s[i];\n\t\t\tif (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n\t\t\t\tcons++;\n\t\t\t}\n\t\t}\n\t}\n\tif (cons == n) {\n\t\tresult.push_back(word);\n\t}\n\treturn result;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::string> result;\n    std::vector<std::string> words;\n    int count = 0;\n    std::string w = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            words.push_back(w);\n            w = \"\";\n        } else {\n            w += s[i];\n        }\n    }\n    words.push_back(w);\n    for (int i = 0; i < words.size(); i++) {\n        count = 0;\n        for (int j = 0; j < words[i].length(); j++) {\n            if (words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u') {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(words[i]);\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "if(s.empty()) return {};\n    std::vector<std::string> res;\n    std::string temp;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] != ' '){\n            temp += s[i];\n        }else{\n            if(temp.size() == n) res.push_back(temp);\n            temp = \"\";\n        }\n    }\n    if(temp.size() == n) res.push_back(temp);\n    return res;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<std::string> res;\n  std::stringstream ss(s);\n  std::string word;\n  while (ss >> word) {\n    int numConsonants = 0;\n    for (char c : word) {\n      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        numConsonants++;\n      }\n    }\n    if (numConsonants == n) {\n      res.push_back(word);\n    }\n  }\n  return res;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::istringstream stream(s);\n    std::vector<std::string> words;\n    std::string word;\n    std::regex pattern(\"[^aeiou ]\");\n    while (stream >> word) {\n        if (std::regex_replace(word, pattern, \"\").size() == n)\n            words.push_back(word);\n    }\n    return words;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<std::string> result;\n  std::istringstream ss(s);\n  std::string curr;\n  while (ss >> curr) {\n    if (count_consonants(curr) == n)\n      result.push_back(curr);\n  }\n  return result;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<std::string> res;\n  int len = s.length();\n  int cnt = 0;\n  std::string temp = \"\";\n  for(int i = 0; i < len; i++) {\n    if(s[i] != ' ') {\n      if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n        cnt++;\n      }\n      temp += s[i];\n    } else {\n      if(temp.length() - cnt == n) {\n        res.push_back(temp);\n      }\n      temp = \"\";\n      cnt = 0;\n    }\n  }\n  if(temp.length() - cnt == n) {\n    res.push_back(temp);\n  }\n  return res;",
        "grade-139": {
            "execution": 0
        },
        "22": "//your code here\n    int i, j, len, count, val;\n    len = s.length();\n    std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string word;\n    // std::cout << s << \"\\n\";\n    while(ss >> word) {\n      count = 0;\n      // std::cout << word << \"\\n\";\n      for(j = 0; j < word.length(); j++) {\n        val = isalpha(word[j]);\n        if(val == 0) {\n          count++;\n        }\n      }\n      if(count == n) {\n        v.push_back(word);\n      }\n    }\n    return v;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<std::string> result;\n    std::string word;\n    std::stringstream ss(s);\n    while (std::getline(ss, word, ' ')) {\n        std::cout << word << std::endl;\n        int wordLength = word.length();\n        int count = 0;\n        for (int i = 0; i < wordLength; i++) {\n            if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> result;\n    std::stringstream stream(s);\n    std::string item;\n    while (getline(stream, item, ' ')) {\n        int count = 0;\n        for (auto ch : item) {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') count++;\n        }\n        if (item.size() - count == n) result.push_back(item);\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        long count = 0;\n        for (char const &c : word) {\n            switch (c) {\n                case 'b':\n                case 'c':\n                case 'd':\n                case 'f':\n                case 'g':\n                case 'h':\n                case 'j':\n                case 'k':\n                case 'l':\n                case 'm':\n                case 'n':\n                case 'p':\n                case 'q':\n                case 'r':\n                case 's':\n                case 't':\n                case 'v':\n                case 'w':\n                case 'x':\n                case 'y':\n                case 'z':\n                    count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> result;\n    std::string temp = \"\";\n    int consNum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] != ' ') {\n            temp += s[i];\n            if (isalpha(s[i]) && \n                (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u')) {\n                consNum++;\n            }\n        } else {\n            if (consNum == n) {\n                result.push_back(temp);\n            }\n            temp = \"\";\n            consNum = 0;\n        }\n    }\n    if (consNum == n) {\n        result.push_back(temp);\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> words;\n    long vowels = 0;\n    long consonants = 0;\n    std::string word = \"\";\n    for (auto c : s) {\n        if (c != ' ') {\n            word += c;\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n            } else {\n                consonants++;\n            }\n        } else {\n            if (consonants == n) {\n                words.push_back(word);\n            }\n            word = \"\";\n            vowels = 0;\n            consonants = 0;\n        }\n    }\n    if (consonants == n) {\n        words.push_back(word);\n    }\n    return words;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> words;\n  std::string word;\n  for (char c : s) {\n    if (c == ' ') {\n      if (count_consonants(word) == n) {\n        words.push_back(word);\n      }\n      word = \"\";\n    } else {\n      word += c;\n    }\n  }\n  if (count_consonants(word) == n) {\n    words.push_back(word);\n  }\n  return words;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::string> result;\n\tstd::stringstream ss(s);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\tlong consonants = 0;\n\t\tfor (char c : word) {\n\t\t\tswitch (tolower(c)) {\n\t\t\tcase 'a':\n\t\t\tcase 'e':\n\t\t\tcase 'i':\n\t\t\tcase 'o':\n\t\t\tcase 'u':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsonants++;\n\t\t\t}\n\t\t}\n\t\tif (consonants == n) {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.1634789152855363,
        "bleu-28": 0.0,
        "bleu-6": 0.2265110134467736,
        "bleu-189": 0.05297053725658471,
        "bleu-70": 0.3222288534403267,
        "bleu-62": 0.41281086816941354,
        "bleu-57": 0.2653464643787189,
        "bleu-35": 0.2419066886044157,
        "bleu-188": 0.06684597328699265,
        "bleu-26": 0.04212564394882741,
        "bleu-173": 0.019116257099264258,
        "bleu-139": 0.3587157342430355,
        "bleu-22": 0.12087085859857721,
        "bleu-151": 0.20970618357514284,
        "bleu-108": 0.0768431167523687,
        "bleu-8": 0.047095598197544185,
        "bleu-7": 0.36549307337850867,
        "bleu-23": 0.17659533778915992,
        "bleu-55": 0.09523777271591966,
        "bleu-59": 0.04449405053355388,
        "codebleu-163": 0.3740663285111787,
        "codebleu-28": 0.008230452674897118,
        "codebleu-6": 0.5505132767212176,
        "codebleu-189": 0.4851532866457454,
        "codebleu-70": 0.6104514264127818,
        "codebleu-62": 0.5749633712998158,
        "codebleu-57": 0.6199136510419524,
        "codebleu-35": 0.431495503968548,
        "codebleu-188": 0.26830607514075927,
        "codebleu-26": 0.19507700304647743,
        "codebleu-173": 0.13357937732416392,
        "codebleu-139": 0.6140662510636268,
        "codebleu-22": 0.4368017445330943,
        "codebleu-151": 0.4841864645045865,
        "codebleu-108": 0.30140723646128925,
        "codebleu-8": 0.29094146814160404,
        "codebleu-7": 0.5900204692881248,
        "codebleu-23": 0.41006275717414964,
        "codebleu-55": 0.2511726732572477,
        "codebleu-59": 0.2830097608273496,
        "chrf-163": 0.2424230230916551,
        "chrf-28": 0.008859096948879912,
        "chrf-6": 0.30013319739584876,
        "chrf-189": 0.23355460048447635,
        "chrf-70": 0.4031370007936313,
        "chrf-62": 0.37229658778294256,
        "chrf-57": 0.36810454775108925,
        "chrf-35": 0.2815465727407994,
        "chrf-188": 0.22661841889379464,
        "chrf-26": 0.201457077178275,
        "chrf-173": 0.2184933604808296,
        "chrf-139": 0.3571222482453852,
        "chrf-22": 0.25826265902920276,
        "chrf-151": 0.2942988039130531,
        "chrf-108": 0.22984835886125288,
        "chrf-8": 0.20063014548522148,
        "chrf-7": 0.35549888511019156,
        "chrf-23": 0.287545675010867,
        "chrf-55": 0.22322570241509734,
        "chrf-59": 0.21562579538572343,
        "rougel-163": 0.3395061728395062,
        "rougel-28": 0.0,
        "rougel-6": 0.3631436314363144,
        "rougel-189": 0.16206896551724137,
        "rougel-70": 0.5356265356265357,
        "rougel-62": 0.5915492957746479,
        "rougel-57": 0.4485981308411215,
        "rougel-35": 0.4377104377104377,
        "rougel-188": 0.26936026936026936,
        "rougel-26": 0.2538461538461539,
        "rougel-173": 0.23076923076923078,
        "rougel-139": 0.4623655913978494,
        "rougel-22": 0.3095238095238095,
        "rougel-151": 0.3542857142857143,
        "rougel-108": 0.30564784053156147,
        "rougel-8": 0.18131868131868134,
        "rougel-7": 0.4690026954177897,
        "rougel-23": 0.3550295857988166,
        "rougel-55": 0.3866171003717472,
        "rougel-59": 0.2352941176470588,
        "meteor-163": 0.3042209989983834,
        "meteor-28": 0.0,
        "meteor-6": 0.3830706897333361,
        "meteor-189": 0.27416505745904646,
        "meteor-70": 0.5059059528246467,
        "meteor-62": 0.4793158592645495,
        "meteor-57": 0.4128351172349426,
        "meteor-35": 0.34969268358274447,
        "meteor-188": 0.2086578104749358,
        "meteor-26": 0.1542137529790141,
        "meteor-173": 0.1025331724969843,
        "meteor-139": 0.4913607179341137,
        "meteor-22": 0.2666609926746807,
        "meteor-151": 0.34556129248496015,
        "meteor-108": 0.23662377855920985,
        "meteor-8": 0.18120500100577955,
        "meteor-7": 0.4612081628655988,
        "meteor-23": 0.28862882851173044,
        "meteor-55": 0.19137303118625743,
        "meteor-59": 0.18958515192325567,
        "ruby-163": 0.1966292134831461,
        "ruby-28": 0.0,
        "ruby-6": 0.17801047120418845,
        "ruby-189": 0.09203980099502485,
        "ruby-70": 0.4061135371179039,
        "ruby-62": 0.4606741573033708,
        "ruby-57": 0.33599999999999997,
        "ruby-35": 0.297752808988764,
        "ruby-188": 0.151685393258427,
        "ruby-26": 0.1460674157303371,
        "ruby-173": 0.1348314606741573,
        "ruby-139": 0.3041237113402062,
        "ruby-22": 0.1404494382022472,
        "ruby-151": 0.1629213483146067,
        "ruby-108": 0.1853932584269663,
        "ruby-8": 0.08064516129032262,
        "ruby-7": 0.31088082901554404,
        "ruby-23": 0.1629213483146067,
        "ruby-55": 0.2415730337078652,
        "ruby-59": 0.1292134831460674,
        "codebertscore_f1-163": 0.7576374411582947,
        "codebertscore_f3-163": 0.7383286952972412,
        "codebertscore_f1-28": 0.48354166746139526,
        "codebertscore_f3-28": 0.45483022928237915,
        "codebertscore_f1-6": 0.7506405711174011,
        "codebertscore_f3-6": 0.7492287158966064,
        "codebertscore_f1-189": 0.6667904257774353,
        "codebertscore_f3-189": 0.7136838436126709,
        "codebertscore_f1-70": 0.8109138011932373,
        "codebertscore_f3-70": 0.8143601417541504,
        "codebertscore_f1-62": 0.8055336475372314,
        "codebertscore_f3-62": 0.7814001441001892,
        "codebertscore_f1-57": 0.7943360805511475,
        "codebertscore_f3-57": 0.7780700922012329,
        "codebertscore_f1-35": 0.7801173329353333,
        "codebertscore_f3-35": 0.7435243129730225,
        "codebertscore_f1-188": 0.7269526720046997,
        "codebertscore_f3-188": 0.7079609632492065,
        "codebertscore_f1-26": 0.6887027025222778,
        "codebertscore_f3-26": 0.6633945107460022,
        "codebertscore_f1-173": 0.6754236221313477,
        "codebertscore_f3-173": 0.6394723057746887,
        "codebertscore_f1-139": 0.7972110509872437,
        "codebertscore_f3-139": 0.7768570184707642,
        "codebertscore_f1-22": 0.7281529307365417,
        "codebertscore_f3-22": 0.7232528328895569,
        "codebertscore_f1-151": 0.7567275762557983,
        "codebertscore_f3-151": 0.7489777207374573,
        "codebertscore_f1-108": 0.7174500823020935,
        "codebertscore_f3-108": 0.702877402305603,
        "codebertscore_f1-8": 0.66432124376297,
        "codebertscore_f3-8": 0.6666761040687561,
        "codebertscore_f1-7": 0.8015896677970886,
        "codebertscore_f3-7": 0.7829285860061646,
        "codebertscore_f1-23": 0.7434477210044861,
        "codebertscore_f3-23": 0.7296966314315796,
        "codebertscore_f1-55": 0.717601478099823,
        "codebertscore_f3-55": 0.6831948161125183,
        "codebertscore_f1-59": 0.6967476606369019,
        "codebertscore_f3-59": 0.6866044402122498,
        "codebertscore_s_f1-163": 0.7586254477500916,
        "codebertscore_s_f3-163": 0.7425551414489746,
        "codebertscore_s_f1-28": 0.5181617736816406,
        "codebertscore_s_f3-28": 0.499342679977417,
        "codebertscore_s_f1-6": 0.7476725578308105,
        "codebertscore_s_f3-6": 0.7508745789527893,
        "codebertscore_s_f1-189": 0.6842725276947021,
        "codebertscore_s_f3-189": 0.7342954874038696,
        "codebertscore_s_f1-70": 0.8122612237930298,
        "codebertscore_s_f3-70": 0.8154511451721191,
        "codebertscore_s_f1-62": 0.8016763925552368,
        "codebertscore_s_f3-62": 0.7816467881202698,
        "codebertscore_s_f1-57": 0.8052070140838623,
        "codebertscore_s_f3-57": 0.7898022532463074,
        "codebertscore_s_f1-35": 0.7853279113769531,
        "codebertscore_s_f3-35": 0.7545487880706787,
        "codebertscore_s_f1-188": 0.7424600124359131,
        "codebertscore_s_f3-188": 0.7316305637359619,
        "codebertscore_s_f1-26": 0.709904134273529,
        "codebertscore_s_f3-26": 0.6999225616455078,
        "codebertscore_s_f1-173": 0.7148102521896362,
        "codebertscore_s_f3-173": 0.6908791065216064,
        "codebertscore_s_f1-139": 0.7924797534942627,
        "codebertscore_s_f3-139": 0.7754044532775879,
        "codebertscore_s_f1-22": 0.727103590965271,
        "codebertscore_s_f3-22": 0.7247260212898254,
        "codebertscore_s_f1-151": 0.754817008972168,
        "codebertscore_s_f3-151": 0.7510181665420532,
        "codebertscore_s_f1-108": 0.7264177203178406,
        "codebertscore_s_f3-108": 0.7179211974143982,
        "codebertscore_s_f1-8": 0.6788813471794128,
        "codebertscore_s_f3-8": 0.6856299042701721,
        "codebertscore_s_f1-7": 0.8019301891326904,
        "codebertscore_s_f3-7": 0.7854877710342407,
        "codebertscore_s_f1-23": 0.751075029373169,
        "codebertscore_s_f3-23": 0.7376140356063843,
        "codebertscore_s_f1-55": 0.7345216870307922,
        "codebertscore_s_f3-55": 0.7075977921485901,
        "codebertscore_s_f1-59": 0.707588255405426,
        "codebertscore_s_f3-59": 0.7046421766281128,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 0,
        "raw_gpt35_nswr-28": "0",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nlong hex_key(std::string num) {\n",
        "snippet": [
            "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n"
        ],
        "simplified": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
        "task_id": "78",
        "168": "std::map<std::string, int> hex_keys = \n        {{\"A\", 10}, {\"B\", 11}, {\"C\", 12}, {\"D\", 13}, {\"E\", 14}, {\"F\", 15}};\n    std::string key = \"\";\n    for (size_t i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key += num[i];\n        } else {\n            key += std::to_string(hex_keys[std::string(1, num[i])]);\n        }\n    }\n    return std::stol(key);",
        "grade-168": {
            "execution": 0
        },
        "29": "long hex_sum=0;\n    int power=0;\n    long hex_number=0;\n    std::string hex={\"0123456789ABCDEF\"};\n    int hex_array[16]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    for(int i=num.size()-1;i>=0;i--){\n        auto x=num[i];\n        int index = hex.find(x);\n        hex_sum+=hex_array[index]*pow(16,power);\n        power++;\n    }\n    return hex_sum;",
        "grade-29": {
            "execution": 0
        },
        "6": "return std::stol(num, nullptr, 16);",
        "grade-6": {
            "execution": 0
        },
        "194": "long n = 0;\n    for (int i = 0; i < num.size(); i++) {\n        n *= 16;\n        if (isdigit(num[i]))\n            n += num[i] - '0';\n        else\n            n += num[i] - 'A' + 10;\n    }\n    return n;",
        "grade-194": {
            "execution": 0
        },
        "72": "long total = 0;\n  long count = 0;\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\n        num[i] == 'B' || num[i] == 'D') {\n      count++;\n    }\n  }\n  return count;",
        "grade-72": {
            "execution": 1
        },
        "64": "if (num.empty()) return 0;\n  const char *hex_characters = \"0123456789ABCDEF\";\n  long result = 0;\n  while(num.length() != 0) {\n    result = result*16;\n    for (int i = 0; i < 16; i++) {\n      if (hex_characters[i] == num[0]) {\n        result += i;\n        break;\n      }\n    }\n    num.erase(0,1);\n  }\n  return result;",
        "grade-64": {
            "execution": 0
        },
        "59": "long count = 0;\n    long k = 0;\n    std::vector<long> primes = {2, 3, 5, 7, 11, 13};\n    while (k < num.size()) {\n        for (long i = 0; i < primes.size(); i++) {\n            if (num[k] == std::to_string(primes[i])[0]) {\n                count++;\n            }\n        }\n        k++;\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        },
        "36": "return std::stol(num, nullptr, 16);",
        "grade-36": {
            "execution": 0
        },
        "193": "long sum = 0;\n\t// bool input_error = false;\n\t// for (char c : num) {\n\t// \tif (c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9' && c != 'A' && c != 'B' && c != 'C' && c != 'D' && c != 'E' && c != 'F') {\n\t// \t\tinput_error = true;\n\t// \t\tbreak;\n\t// \t}\n\t// }\n\t// assert(!input_error);\n\tfor (char c : num) {\n\t\tswitch (c) {\n\t\t\tcase '0':\n\t\t\tcase '1':\n\t\t\tcase '2':\n\t\t\tcase '3':\n\t\t\tcase '4':\n\t\t\tcase '5':\n\t\t\tcase '6':\n\t\t\tcase '7':\n\t\t\tcase '8':\n\t\t\tcase '9': {\n\t\t\t\tsum += c - '0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'A': {\n\t\t\t\tsum += 10;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'B': {\n\t\t\t\tsum += 11;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'C': {\n\t\t\t\tsum += 12;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'D': {\n\t\t\t\tsum += 13;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'E': {\n\t\t\t\tsum += 14;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'F': {\n\t\t\t\tsum += 15;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;",
        "grade-193": {
            "execution": 0
        },
        "27": "// Convert string num to a long\n\tlong long num_ll = std::stoll(num,nullptr,16);\n\tstd::cout << num_ll << \"\\n\";\n\treturn num_ll;",
        "grade-27": {
            "execution": 0
        },
        "178": "int primes[20] = {0,0,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1};\n    long sum = 0;\n    for (int i = 0; i < num.length(); i++) {\n        int n = 0;\n        if (num[i] >= '0' && num[i] <= '9') {\n            n = num[i] - '0';\n        } else {\n            n = num[i] - 'A' + 10;\n        }\n        sum += primes[n];\n    }\n    return sum;",
        "grade-178": {
            "execution": 0
        },
        "144": "// hex key value\n\tstd::map<char, long> hex_kv = {{'0', 0}, {'1', 1}, {'2', 2}, {'3', 3}, {'4', 4},\n\t\t\t\t\t\t\t\t\t{'5', 5}, {'6', 6}, {'7', 7}, {'8', 8}, {'9', 9},\n\t\t\t\t\t\t\t\t\t{'A', 10}, {'B', 11}, {'C', 12}, {'D', 13}, {'E', 14}, {'F', 15}};\n\t// number of digits in hex key\n\tlong key_digits = hex_kv.size();\n\t// hex key value\n\tlong hex_key = 0;\n\t// compute hex key value\n\tfor (long i = 0; i < num.size(); i++) {\n\t\thex_key = hex_key * key_digits + hex_kv[num[i]];\n\t}\n\treturn hex_key;",
        "grade-144": {
            "execution": 0
        },
        "23": "long count = 0;\n  if (num.length() == 0) {\n    return 0;\n  }\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n      count++;\n    }\n  }\n  return count;",
        "grade-23": {
            "execution": 1
        },
        "156": "return strtol(num.c_str(), NULL, 16);",
        "grade-156": {
            "execution": 0
        },
        "111": "// your code here\n    long result = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D')\n            result++;\n    }\n    return result;",
        "grade-111": {
            "execution": 0
        },
        "9": "// hex_key => number of hex numbers that are primes\n  long hex_key = 0;\n  // split => split string by individual characters\n  std::vector<char> split;\n  // primes => prime numbers\n  std::vector<int> primes = {2, 3, 5, 7, 11, 13};\n  // create vector of split characters\n  for (int i = 0; i < num.length(); i++) {\n    split.push_back(num[i]);\n  }\n  // loop through split characters\n  for (int i = 0; i < split.size(); i++) {\n    // loop through primes\n    for (int j = 0; j < primes.size(); j++) {\n      // char -> digit for switch statement\n      char digit = (char)primes[j];\n      // check if prime number\n      switch (digit) {\n        case '2':\n          if (split[i] == '2') {\n            hex_key++;\n          }\n          break;\n        case '3':\n          if (split[i] == '3') {\n            hex_key++;\n          }\n          break;\n        case '5':\n          if (split[i] == '5') {\n            hex_key++;\n          }\n          break;\n        case '7':\n          if (split[i] == '7') {\n            hex_key++;\n          }\n          break;\n        case 'B':\n          if (split[i] == 'B') {\n            hex_key++;\n          }\n          break;\n        case 'D':\n          if (split[i] == 'D') {\n            hex_key++;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return hex_key;",
        "grade-9": {
            "execution": 0
        },
        "7": "long long res = 0;\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tres = res * 16 + num[i] - '0';\n\t\t}\n\t\telse {\n\t\t\tres = res * 16 + num[i] - 'A' + 10;\n\t\t}\n\t}\n\treturn res;",
        "grade-7": {
            "execution": 0
        },
        "24": "long res = 0;\n    long p = 1;\n    for (int i = num.size() - 1; i >= 0; i--) {\n        char c = num[i];\n        int d = c >= 'A' ? (10 + c - 'A') : (c - '0');\n        res += d * p;\n        p *= 16;\n    }\n    return res;",
        "grade-24": {
            "execution": 0
        },
        "57": "long hex_map[26] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25};\n\tlong dec = 0;\n\tlong res = 0;\n\tfor(int i = 0; i < num.length(); i++) {\n\t\tif(num[i] >= 65 && num[i] <= 70) {\n\t\t\tdec += hex_map[num[i] - 65] * pow(16,num.length() - i - 1);\n\t\t} else {\n\t\t\tdec += (num[i] - 48) * pow(16,num.length() - i - 1);\n\t\t}\n\t}\n\treturn dec;",
        "grade-57": {
            "execution": 0
        },
        "61": "long int key = 0;\n    for (int i = 0; i < num.length(); i++) {\n        char c = num[i];\n        if (c >= 'A' && c <= 'F') {\n            c = c - 'A' + '9' + 1;\n        }\n        key = key * 16 + (c - '0');\n    }\n    return key;",
        "grade-61": {
            "execution": 0
        },
        "bleu-168": 0.14938925237770592,
        "bleu-29": 0.11406987440956559,
        "bleu-6": 0.0011377993816500157,
        "bleu-194": 0.359688541826409,
        "bleu-72": 0.24888059574033425,
        "bleu-64": 0.2594676337496517,
        "bleu-59": 0.1874410824180121,
        "bleu-36": 0.0011377993816500157,
        "bleu-193": 0.013062774084040663,
        "bleu-27": 0.019702269951450514,
        "bleu-178": 0.1948333349918575,
        "bleu-144": 0.08850107204243553,
        "bleu-23": 0.21762454397963815,
        "bleu-156": 0.0033414831535842726,
        "bleu-111": 0.3701142171744048,
        "bleu-9": 0.08088652588993972,
        "bleu-7": 0.26626818284640374,
        "bleu-24": 0.1754049797316304,
        "bleu-57": 0.1670248657585964,
        "bleu-61": 0.3379140527198985,
        "codebleu-168": 0.6077658717142396,
        "codebleu-29": 0.5611818224809665,
        "codebleu-6": 0.07763822793960111,
        "codebleu-194": 0.5688061230486416,
        "codebleu-72": 0.5521952983532264,
        "codebleu-64": 0.6764714172614604,
        "codebleu-59": 0.6196035670133189,
        "codebleu-36": 0.07763822793960111,
        "codebleu-193": 0.4662118258609486,
        "codebleu-27": 0.22013877616795224,
        "codebleu-178": 0.5813188701518833,
        "codebleu-144": 0.577040829571651,
        "codebleu-23": 0.613927218143353,
        "codebleu-156": 0.12008534872980071,
        "codebleu-111": 0.5356594265798394,
        "codebleu-9": 0.7076516858085027,
        "codebleu-7": 0.5364369118233621,
        "codebleu-24": 0.5071840772434536,
        "codebleu-57": 0.6757434956810023,
        "codebleu-61": 0.584879922887461,
        "chrf-168": 0.32202629957560913,
        "chrf-29": 0.25829279772806063,
        "chrf-6": 0.07903432063214916,
        "chrf-194": 0.3181063731541907,
        "chrf-72": 0.36372842589809795,
        "chrf-64": 0.3200445211139823,
        "chrf-59": 0.28119229581916977,
        "chrf-36": 0.07903432063214916,
        "chrf-193": 0.11882558764458731,
        "chrf-27": 0.15305223288458109,
        "chrf-178": 0.3355733086454203,
        "chrf-144": 0.22489020183565656,
        "chrf-23": 0.35027780660750385,
        "chrf-156": 0.08823291476216304,
        "chrf-111": 0.3756929059119007,
        "chrf-9": 0.23185889109068308,
        "chrf-7": 0.29173167375919995,
        "chrf-24": 0.22817095582251917,
        "chrf-57": 0.3282712713132225,
        "chrf-61": 0.393958521409938,
        "rougel-168": 0.33476394849785407,
        "rougel-29": 0.34,
        "rougel-6": 0.14634146341463414,
        "rougel-194": 0.5,
        "rougel-72": 0.4090909090909091,
        "rougel-64": 0.41463414634146345,
        "rougel-59": 0.4,
        "rougel-36": 0.14634146341463414,
        "rougel-193": 0.10679611650485436,
        "rougel-27": 0.18181818181818185,
        "rougel-178": 0.3507109004739336,
        "rougel-144": 0.2237762237762238,
        "rougel-23": 0.3850267379679145,
        "rougel-156": 0.21686746987951808,
        "rougel-111": 0.48226950354609927,
        "rougel-9": 0.21686746987951808,
        "rougel-7": 0.4276729559748428,
        "rougel-24": 0.37662337662337664,
        "rougel-57": 0.3553719008264463,
        "rougel-61": 0.45454545454545453,
        "meteor-168": 0.42439111772215327,
        "meteor-29": 0.3058510638297872,
        "meteor-6": 0.05520504731861199,
        "meteor-194": 0.39945915745874466,
        "meteor-72": 0.3880106360029025,
        "meteor-64": 0.42947051675480447,
        "meteor-59": 0.369898430286242,
        "meteor-36": 0.05520504731861199,
        "meteor-193": 0.20705212333562675,
        "meteor-27": 0.13447465592480698,
        "meteor-178": 0.3075513414858702,
        "meteor-144": 0.4211850673266743,
        "meteor-23": 0.40208822017184614,
        "meteor-156": 0.1000787401574803,
        "meteor-111": 0.399963924963925,
        "meteor-9": 0.34727644935947494,
        "meteor-7": 0.3399569268635724,
        "meteor-24": 0.3423645538243626,
        "meteor-57": 0.37456529507639474,
        "meteor-61": 0.4180437519672646,
        "ruby-168": 0.2195121951219512,
        "ruby-29": 0.1984732824427481,
        "ruby-6": 0.08695652173913049,
        "ruby-194": 0.323943661971831,
        "ruby-72": 0.2990654205607477,
        "ruby-64": 0.2210526315789474,
        "ruby-59": 0.25742574257425743,
        "ruby-36": 0.08695652173913049,
        "ruby-193": 0.058309037900874605,
        "ruby-27": 0.10144927536231885,
        "ruby-178": 0.2535211267605634,
        "ruby-144": 0.08294930875576034,
        "ruby-23": 0.2796610169491526,
        "ruby-156": 0.13043478260869568,
        "ruby-111": 0.375,
        "ruby-9": 0.13005780346820806,
        "ruby-7": 0.2777777777777778,
        "ruby-24": 0.21176470588235297,
        "ruby-57": 0.23699421965317924,
        "ruby-61": 0.2941176470588235,
        "codebertscore_f1-168": 0.7461299896240234,
        "codebertscore_f3-168": 0.7743672132492065,
        "codebertscore_f1-29": 0.7327945232391357,
        "codebertscore_f3-29": 0.7654992341995239,
        "codebertscore_f1-6": 0.657833993434906,
        "codebertscore_f3-6": 0.6408835053443909,
        "codebertscore_f1-194": 0.7982804775238037,
        "codebertscore_f3-194": 0.8042810559272766,
        "codebertscore_f1-72": 0.8155149817466736,
        "codebertscore_f3-72": 0.8152323961257935,
        "codebertscore_f1-64": 0.7819380164146423,
        "codebertscore_f3-64": 0.8006793260574341,
        "codebertscore_f1-59": 0.7652963995933533,
        "codebertscore_f3-59": 0.7805910706520081,
        "codebertscore_f1-36": 0.657833993434906,
        "codebertscore_f3-36": 0.6408835053443909,
        "codebertscore_f1-193": 0.6200405359268188,
        "codebertscore_f3-193": 0.6757415533065796,
        "codebertscore_f1-27": 0.6895666718482971,
        "codebertscore_f3-27": 0.6773412823677063,
        "codebertscore_f1-178": 0.7539103031158447,
        "codebertscore_f3-178": 0.7681282758712769,
        "codebertscore_f1-144": 0.666634738445282,
        "codebertscore_f3-144": 0.6951828002929688,
        "codebertscore_f1-23": 0.8203940391540527,
        "codebertscore_f3-23": 0.8195488452911377,
        "codebertscore_f1-156": 0.6629174947738647,
        "codebertscore_f3-156": 0.6478662490844727,
        "codebertscore_f1-111": 0.8302600979804993,
        "codebertscore_f3-111": 0.8282803297042847,
        "codebertscore_f1-9": 0.6915000081062317,
        "codebertscore_f3-9": 0.7459478974342346,
        "codebertscore_f1-7": 0.7919852137565613,
        "codebertscore_f3-7": 0.8018681406974792,
        "codebertscore_f1-24": 0.7624843716621399,
        "codebertscore_f3-24": 0.7809847593307495,
        "codebertscore_f1-57": 0.7182925939559937,
        "codebertscore_f3-57": 0.7505286335945129,
        "codebertscore_f1-61": 0.7869213223457336,
        "codebertscore_f3-61": 0.8109575510025024,
        "codebertscore_s_f1-168": 0.713096022605896,
        "codebertscore_s_f3-168": 0.7346715331077576,
        "codebertscore_s_f1-29": 0.7173932194709778,
        "codebertscore_s_f3-29": 0.7446962594985962,
        "codebertscore_s_f1-6": 0.5893211364746094,
        "codebertscore_s_f3-6": 0.5784938335418701,
        "codebertscore_s_f1-194": 0.783439040184021,
        "codebertscore_s_f3-194": 0.7996765971183777,
        "codebertscore_s_f1-72": 0.7925983667373657,
        "codebertscore_s_f3-72": 0.8012881875038147,
        "codebertscore_s_f1-64": 0.7512725591659546,
        "codebertscore_s_f3-64": 0.7708346843719482,
        "codebertscore_s_f1-59": 0.728034257888794,
        "codebertscore_s_f3-59": 0.7454528212547302,
        "codebertscore_s_f1-36": 0.5893211364746094,
        "codebertscore_s_f3-36": 0.5784938335418701,
        "codebertscore_s_f1-193": 0.6572722792625427,
        "codebertscore_s_f3-193": 0.6944529414176941,
        "codebertscore_s_f1-27": 0.6358408331871033,
        "codebertscore_s_f3-27": 0.620033860206604,
        "codebertscore_s_f1-178": 0.7109308838844299,
        "codebertscore_s_f3-178": 0.7226096987724304,
        "codebertscore_s_f1-144": 0.6947931051254272,
        "codebertscore_s_f3-144": 0.7286744713783264,
        "codebertscore_s_f1-23": 0.7913646697998047,
        "codebertscore_s_f3-23": 0.8032415509223938,
        "codebertscore_s_f1-156": 0.6094110608100891,
        "codebertscore_s_f3-156": 0.5949587225914001,
        "codebertscore_s_f1-111": 0.814445436000824,
        "codebertscore_s_f3-111": 0.8155854940414429,
        "codebertscore_s_f1-9": 0.7099563479423523,
        "codebertscore_s_f3-9": 0.7497196197509766,
        "codebertscore_s_f1-7": 0.7752842903137207,
        "codebertscore_s_f3-7": 0.790903627872467,
        "codebertscore_s_f1-24": 0.7547510862350464,
        "codebertscore_s_f3-24": 0.7767137289047241,
        "codebertscore_s_f1-57": 0.6967494487762451,
        "codebertscore_s_f3-57": 0.7212295532226562,
        "codebertscore_s_f1-61": 0.7797099351882935,
        "codebertscore_s_f3-61": 0.810808002948761,
        "gpt35_nsnr-168": 3,
        "raw_gpt35_nsnr-168": "3",
        "gpt35_nsnr-29": 2,
        "raw_gpt35_nsnr-29": "2",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-64": 3,
        "raw_gpt35_nsnr-64": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-36": 2,
        "raw_gpt35_nsnr-36": "2",
        "gpt35_nsnr-193": 2,
        "raw_gpt35_nsnr-193": "2",
        "gpt35_nsnr-27": 2,
        "raw_gpt35_nsnr-27": "2",
        "gpt35_nsnr-178": 3,
        "raw_gpt35_nsnr-178": "3",
        "gpt35_nsnr-144": 3,
        "raw_gpt35_nsnr-144": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-156": 3,
        "raw_gpt35_nsnr-156": "3",
        "gpt35_nsnr-111": 2,
        "raw_gpt35_nsnr-111": "2",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-61": 2,
        "raw_gpt35_nsnr-61": "2",
        "gpt35_nswr-168": 2,
        "raw_gpt35_nswr-168": "2",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-193": 2,
        "raw_gpt35_nswr-193": "2",
        "gpt35_nswr-27": 0,
        "raw_gpt35_nswr-27": "0",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-144": 2,
        "raw_gpt35_nswr-144": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-156": 3,
        "raw_gpt35_nswr-156": "3",
        "gpt35_nswr-111": 3,
        "raw_gpt35_nswr-111": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nbool is_happy(std::string s) {\n",
        "snippet": [
            "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n"
        ],
        "simplified": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "task_id": "80",
        "195": "//Your code here\n\tint n = s.length();\n\tif (n < 3)\n\t\treturn false;\n\tfor (int i = 0; i < n - 2; i++)\n\t{\n\t\tif (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-195": {
            "execution": 1
        },
        "28": "return (s.length() > 2) && (s[0] != s[1]) && (s[1] != s[2]) && (s[0] != s[2]);",
        "grade-28": {
            "execution": 0
        },
        "6": "int flag = 0;\n    if(s.length() < 3)\n        return false;\n    for(int i = 0; i < s.length() - 3; i++)\n    {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2])\n            flag = 1;\n    }\n    if(flag == 1)\n        return false;\n    else\n        return true;",
        "grade-6": {
            "execution": 0
        },
        "74": "if(s.length() < 3)\n        return false;\n    if(s[0] == s[1] || s[1] == s[2] || s[0] == s[2])\n        return false;\n    int count = 1;\n    while(count < s.length() - 2){\n        if(s[count] == s[count + 1] || s[count + 1] == s[count + 2] || s[count] == s[count + 2])\n            return false;\n        count++;\n    }\n    return true;",
        "grade-74": {
            "execution": 1
        },
        "66": "for (int i = 0; i < s.size() - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;",
        "grade-66": {
            "execution": 0
        },
        "59": "if(s.length() < 3) return false;\n    if(s[0] == s[1] && s[1] == s[2]) return false;\n    for(int i = 3; i < s.length(); i++){\n        if(s[i] == s[i-1] && s[i-1] == s[i-2]) return false;\n    }\n    return true;",
        "grade-59": {
            "execution": 0
        },
        "35": "if(s.length()<3) return false;\n    bool flag = true;\n    for(int i=0;i<s.length()-3;i++){\n        flag = true;\n        for(int j=i+1;j<i+3;j++){\n            if(s[i]==s[j]) {\n                flag = false;\n                break;\n            }\n        }\n        if(!flag) break;\n    }\n    return flag;",
        "grade-35": {
            "execution": 0
        },
        "26": "// Your code here\n    return false;",
        "grade-26": {
            "execution": 0
        },
        "161": "bool happy = true;\n  for (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      happy = false;\n    }\n  }\n  return happy;",
        "grade-161": {
            "execution": 0
        },
        "22": "// First, we check the length of the string\n\tif (s.length() < 3) {\n\t\treturn false;\n\t}\n\t// We iterate through the string\n\tfor (int i = 2; i < s.length(); i++) {\n\t\t// We compare the letter with the previous one\n\t\tif (s[i] == s[i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t\t// We compare the letter with the one from two positions before\n\t\tif (s[i] == s[i - 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-22": {
            "execution": 1
        },
        "179": "int length = s.length();\n  if (length < 3) {\n    return false;\n  }\n  for (int i = 0; i < length - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;",
        "grade-179": {
            "execution": 1
        },
        "118": "bool is_happy = true;\n    int s_length = s.length();\n    if (s_length < 3)\n        return false;\n    for (int i = 0; i < s_length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            is_happy = false;\n            break;\n        }\n    }\n    return is_happy;",
        "grade-118": {
            "execution": 1
        },
        "8": "// Your code here",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here",
        "grade-7": {
            "execution": 0
        },
        "23": "// check if string is happy or not\n    // your code here\n    for(int i=0;i<s.length()-2;i++){\n      if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n        return false;\n    }\n    return true;",
        "grade-23": {
            "execution": 0
        },
        "57": "std::set<char> chars;\n    int len = s.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (i < 2) {\n            chars.insert(s[i]);\n        } else {\n            if (chars.find(s[i]) != chars.end()) {\n                return false;\n            } else {\n                chars.insert(s[i]);\n            }\n        }\n    }\n    return true;",
        "grade-57": {
            "execution": 0
        },
        "61": "if(s.length()<3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]) return false;\n    }\n    return true;",
        "grade-61": {
            "execution": 1
        },
        "143": "int n = s.length();\n    int m = n%3;\n    int checker = 0;\n    for(int i = 0; i < n-3; i+=3){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    if(m != 0){\n        checker = s[n-3]^s[n-2]^s[n-1];\n        if(checker == 0){\n            return false;\n        }\n    }\n    return true;",
        "grade-143": {
            "execution": 0
        },
        "182": "if(s.length()<3)\n        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return true;",
        "grade-182": {
            "execution": 1
        },
        "167": "if (s.length() < 3)\n\t\treturn false;\n\telse {\n\t\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\t\tif (s[i] == s[i + 1] && s[i] == s[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}",
        "grade-167": {
            "execution": 0
        },
        "bleu-195": 0.47740042225447815,
        "bleu-28": 0.1594147086694876,
        "bleu-6": 0.535761702990852,
        "bleu-74": 0.2711449699640185,
        "bleu-66": 0.44765809227116465,
        "bleu-59": 0.566647818605552,
        "bleu-35": 0.3912383923138749,
        "bleu-26": 0.00012883420717061785,
        "bleu-161": 0.44567732266001464,
        "bleu-22": 0.4588340938144331,
        "bleu-179": 0.4187705249988809,
        "bleu-118": 0.4209280931928811,
        "bleu-8": 0.0,
        "bleu-7": 0.0,
        "bleu-23": 0.4421677690118227,
        "bleu-57": 0.2455746747294686,
        "bleu-61": 0.5971159751830833,
        "bleu-143": 0.2703656453835431,
        "bleu-182": 0.5971159751830833,
        "bleu-167": 0.6882225185871214,
        "codebleu-195": 0.6723209725667278,
        "codebleu-28": 0.334671808139416,
        "codebleu-6": 0.7478663882675254,
        "codebleu-74": 0.7136118809589154,
        "codebleu-66": 0.5926396976490359,
        "codebleu-59": 0.8127603091388914,
        "codebleu-35": 0.7002242887545875,
        "codebleu-26": 0.044520000531493485,
        "codebleu-161": 0.6061062836578849,
        "codebleu-22": 0.8029797620644488,
        "codebleu-179": 0.6752250428998647,
        "codebleu-118": 0.6627801679219246,
        "codebleu-8": 0.02222222222222222,
        "codebleu-7": 0.029629629629629624,
        "codebleu-23": 0.6340995425745908,
        "codebleu-57": 0.6603089051681083,
        "codebleu-61": 0.7739602688661459,
        "codebleu-143": 0.7163326141813772,
        "codebleu-182": 0.8038078282225216,
        "codebleu-167": 0.7967700299009725,
        "chrf-195": 0.6575282655357022,
        "chrf-28": 0.19331405541461366,
        "chrf-6": 0.714770435240409,
        "chrf-74": 0.5269676367251515,
        "chrf-66": 0.4659040949188761,
        "chrf-59": 0.7968739828372958,
        "chrf-35": 0.5787152439707738,
        "chrf-26": 0.12415307039253481,
        "chrf-161": 0.4611056995930196,
        "chrf-22": 0.6370406196972778,
        "chrf-179": 0.6163983331508583,
        "chrf-118": 0.5645652176478199,
        "chrf-8": 0.02023215446019875,
        "chrf-7": 0.02727335850353946,
        "chrf-23": 0.5463081926595911,
        "chrf-57": 0.4695574667883215,
        "chrf-61": 0.7739545858529668,
        "chrf-143": 0.5410337414579982,
        "chrf-182": 0.7739545858529668,
        "chrf-167": 0.769603120723082,
        "rougel-195": 0.6875,
        "rougel-28": 0.4833333333333333,
        "rougel-6": 0.7898089171974523,
        "rougel-74": 0.5257731958762887,
        "rougel-66": 0.6713286713286712,
        "rougel-59": 0.7710843373493976,
        "rougel-35": 0.5975609756097561,
        "rougel-26": 0.08,
        "rougel-161": 0.6442953020134228,
        "rougel-22": 0.6951871657754011,
        "rougel-179": 0.7044025157232705,
        "rougel-118": 0.6424242424242426,
        "rougel-8": 0.0,
        "rougel-7": 0.0,
        "rougel-23": 0.6451612903225807,
        "rougel-57": 0.5172413793103449,
        "rougel-61": 0.8051948051948052,
        "rougel-143": 0.49756097560975604,
        "rougel-182": 0.8051948051948052,
        "rougel-167": 0.8936170212765957,
        "meteor-195": 0.807055404708288,
        "meteor-28": 0.4241786958685913,
        "meteor-6": 0.8190319066783911,
        "meteor-74": 0.7566956150394099,
        "meteor-66": 0.7122296319857778,
        "meteor-59": 0.9306350215441123,
        "meteor-35": 0.5558772136953957,
        "meteor-26": 0.024549918166939442,
        "meteor-161": 0.6715900143698695,
        "meteor-22": 0.8880566637073615,
        "meteor-179": 0.7972866243945529,
        "meteor-118": 0.6630686321128547,
        "meteor-8": 0.0,
        "meteor-7": 0.0,
        "meteor-23": 0.7488655798878138,
        "meteor-57": 0.6365522057967641,
        "meteor-61": 0.9118840579710146,
        "meteor-143": 0.6376917738655417,
        "meteor-182": 0.9118840579710146,
        "meteor-167": 0.9553215106674942,
        "ruby-195": 0.5591397849462365,
        "ruby-28": 0.3880597014925373,
        "ruby-6": 0.6777777777777778,
        "ruby-74": 0.3779527559055118,
        "ruby-66": 0.4473684210526315,
        "ruby-59": 0.6363636363636364,
        "ruby-35": 0.4742268041237113,
        "ruby-26": 0.04477611940298509,
        "ruby-161": 0.47560975609756095,
        "ruby-22": 0.5333333333333333,
        "ruby-179": 0.5760869565217391,
        "ruby-118": 0.5102040816326531,
        "ruby-8": 0.0,
        "ruby-7": 0.0,
        "ruby-23": 0.5454545454545454,
        "ruby-57": 0.3457943925233645,
        "ruby-61": 0.7011494252873562,
        "ruby-143": 0.34782608695652173,
        "ruby-182": 0.7011494252873562,
        "ruby-167": 0.8513513513513513,
        "codebertscore_f1-195": 0.8935415744781494,
        "codebertscore_f3-195": 0.9211727976799011,
        "codebertscore_f1-28": 0.789060652256012,
        "codebertscore_f3-28": 0.7528733611106873,
        "codebertscore_f1-6": 0.8749446868896484,
        "codebertscore_f3-6": 0.8984415531158447,
        "codebertscore_f1-74": 0.844039797782898,
        "codebertscore_f3-74": 0.8530701398849487,
        "codebertscore_f1-66": 0.90098637342453,
        "codebertscore_f3-66": 0.9077109694480896,
        "codebertscore_f1-59": 0.9330169558525085,
        "codebertscore_f3-59": 0.9396072626113892,
        "codebertscore_f1-35": 0.8491827845573425,
        "codebertscore_f3-35": 0.8713316321372986,
        "codebertscore_f1-26": 0.654426634311676,
        "codebertscore_f3-26": 0.6235976219177246,
        "codebertscore_f1-161": 0.8819606304168701,
        "codebertscore_f3-161": 0.8931978344917297,
        "codebertscore_f1-22": 0.8309357166290283,
        "codebertscore_f3-22": 0.893161416053772,
        "codebertscore_f1-179": 0.9105979204177856,
        "codebertscore_f3-179": 0.9256916046142578,
        "codebertscore_f1-118": 0.8624020218849182,
        "codebertscore_f3-118": 0.8888271450996399,
        "codebertscore_f1-8": 0.540010929107666,
        "codebertscore_f3-8": 0.5247876048088074,
        "codebertscore_f1-7": 0.541467547416687,
        "codebertscore_f3-7": 0.5290498733520508,
        "codebertscore_f1-23": 0.8786494135856628,
        "codebertscore_f3-23": 0.9126253724098206,
        "codebertscore_f1-57": 0.8081520795822144,
        "codebertscore_f3-57": 0.8391995429992676,
        "codebertscore_f1-61": 0.9351165294647217,
        "codebertscore_f3-61": 0.9467447996139526,
        "codebertscore_f1-143": 0.8366156816482544,
        "codebertscore_f3-143": 0.8742078542709351,
        "codebertscore_f1-182": 0.9310051798820496,
        "codebertscore_f3-182": 0.9426100850105286,
        "codebertscore_f1-167": 0.9278385043144226,
        "codebertscore_f3-167": 0.9391810894012451,
        "codebertscore_s_f1-195": 0.8958477973937988,
        "codebertscore_s_f3-195": 0.9246438145637512,
        "codebertscore_s_f1-28": 0.8038384914398193,
        "codebertscore_s_f3-28": 0.7702050805091858,
        "codebertscore_s_f1-6": 0.8822656273841858,
        "codebertscore_s_f3-6": 0.9047531485557556,
        "codebertscore_s_f1-74": 0.8498925566673279,
        "codebertscore_s_f3-74": 0.8598381876945496,
        "codebertscore_s_f1-66": 0.9052632451057434,
        "codebertscore_s_f3-66": 0.9134008288383484,
        "codebertscore_s_f1-59": 0.929847002029419,
        "codebertscore_s_f3-59": 0.9367213845252991,
        "codebertscore_s_f1-35": 0.8522721529006958,
        "codebertscore_s_f3-35": 0.8720160126686096,
        "codebertscore_s_f1-26": 0.6484544277191162,
        "codebertscore_s_f3-26": 0.61869877576828,
        "codebertscore_s_f1-161": 0.8876672983169556,
        "codebertscore_s_f3-161": 0.9018292427062988,
        "codebertscore_s_f1-22": 0.8393996357917786,
        "codebertscore_s_f3-22": 0.9042321443557739,
        "codebertscore_s_f1-179": 0.915374755859375,
        "codebertscore_s_f3-179": 0.9309491515159607,
        "codebertscore_s_f1-118": 0.8750568628311157,
        "codebertscore_s_f3-118": 0.9022881388664246,
        "codebertscore_s_f1-8": 0.5367661714553833,
        "codebertscore_s_f3-8": 0.5178915858268738,
        "codebertscore_s_f1-7": 0.5434989333152771,
        "codebertscore_s_f3-7": 0.527172327041626,
        "codebertscore_s_f1-23": 0.8773977160453796,
        "codebertscore_s_f3-23": 0.9125651121139526,
        "codebertscore_s_f1-57": 0.8269655108451843,
        "codebertscore_s_f3-57": 0.8595605492591858,
        "codebertscore_s_f1-61": 0.934321403503418,
        "codebertscore_s_f3-61": 0.9467305541038513,
        "codebertscore_s_f1-143": 0.8543030619621277,
        "codebertscore_s_f3-143": 0.8906063437461853,
        "codebertscore_s_f1-182": 0.9272682666778564,
        "codebertscore_s_f3-182": 0.9393177032470703,
        "codebertscore_s_f1-167": 0.9288073182106018,
        "codebertscore_s_f3-167": 0.9394083619117737,
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-118": 4,
        "raw_gpt35_nsnr-118": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 0,
        "raw_gpt35_nswr-26": "Score: 0",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-118": 3,
        "raw_gpt35_nswr-118": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-182": 4,
        "raw_gpt35_nswr-182": "4",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7, 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nlong x_or_y(long n, long x, long y) {\n",
        "snippet": [
            "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n"
        ],
        "simplified": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "task_id": "150",
        "168": "//TODO: complete this\n\tif(n==0 || n==1){\n\t\treturn y;\n\t}\n\telse if(n==2){\n\t\treturn x;\n\t}\n\telse{\n\t\tint flag=0;\n\t\tfor(int i=2;i<=n/2;i++){\n\t\t\tif(n%i==0){\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag==0){\n\t\t\treturn x;\n\t\t}\n\t\telse{\n\t\t\treturn y;\n\t\t}\n\t}",
        "grade-168": {
            "execution": 1
        },
        "28": "if (n <= 1) return y;\n    int s = 0;\n    long u = n - 1;\n    while (u % 2 == 0) {\n        s++;\n        u /= 2;\n    }\n    // u is now odd\n    int t = 1;\n    long v = 2;\n    while (v <= u) {\n        t *= v;\n        v++;\n    }\n    long r = t + s;\n    while (r % 2 == 0) r /= 2;\n    long a = 2;\n    while (a < r) {\n        long z = pow(a, r);\n        long w = z % n;\n        if (w != 1) return y;\n        a++;\n    }\n    return x;",
        "grade-28": {
            "execution": 0
        },
        "6": "//WRITE YOUR CODE HERE\n  if(n < 2) return y;\n  for(int i = 2; i <= sqrt(n); i++)\n  {\n      if(n % i == 0)\n        return y;\n  }\n  return x;",
        "grade-6": {
            "execution": 1
        },
        "194": "if(n<2)\n        return y;\n    for(long i=2;i<n;i++)\n        if(n%i==0)\n            return y;\n    return x;",
        "grade-194": {
            "execution": 1
        },
        "70": "if(n==1)\n        return y;\n    for(int i=2;i<=sqrt(n);i++)\n    {\n        if(n%i==0)\n            return y;\n    }\n    return x;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Condition to check whether n is prime or not.\n    if(n < 2)\n        return 0;\n    for(long i = 2; i <= sqrt(n); i++)\n        if(n % i == 0)\n            return y;\n    return x;",
        "grade-62": {
            "execution": 1
        },
        "57": "if (n == 2) return x;\n  // Check if n is prime.\n  for (long i = 2; i <= n / 2; i++) {\n    if (n % i == 0) {\n      return y;\n    }\n  }\n  return x;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n < 4) return n;\n  if (n % 2 == 0) return x;\n  if (n % 3 == 0) return y;\n  long d = 5;\n  while (d*d <= n) {\n    if (n % d == 0) return x;\n    if (n % (d+2) == 0) return y;\n    d += 6;\n  }\n  return n;",
        "grade-35": {
            "execution": 0
        },
        "193": "// Code here\n  int flag = 0;\n  for(int i = 2; i <= n/2; ++i)\n  {\n      if(n%i == 0)\n      {\n          flag = 1;\n          break;\n      }\n  }\n  if (flag == 0)\n      return x;\n  else\n      return y;",
        "grade-193": {
            "execution": 0
        },
        "26": "for (int i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return y;\n    }\n  }\n  return x;",
        "grade-26": {
            "execution": 0
        },
        "178": "// TODO: implement your solution here\n\tfor(int i=2;i<n;i++)\n\t{\n\t\tif(n%i==0)\n\t\t{\n\t\t\treturn y;\n\t\t}\n\t}\n\treturn x;",
        "grade-178": {
            "execution": 0
        },
        "142": "if (n%2 == 0)\n    return y;\n  return x;",
        "grade-142": {
            "execution": 0
        },
        "22": "if (isPrime(n)) return x;\n  else return y;",
        "grade-22": {
            "execution": 0
        },
        "155": "// TODO: fill code here\n    if(n%2!=0){\n        return x;\n    }\n    else return y;",
        "grade-155": {
            "execution": 0
        },
        "109": "if(n%2==0)\n\t\treturn y;\n\tfor(int i=3;i<=n/2;i=i+2)\n\t{\n\t\tif(n%i==0)\n\t\t\treturn y;\n\t}\n\treturn x;",
        "grade-109": {
            "execution": 0
        },
        "8": "// TODO: implement this function properly\n  if(n<2) return y;\n  int i;\n  for(i=2;i<=n/2;i++)\n  {\n    if(n%i==0)\n    {\n      return y;\n    }\n  }\n  return x;",
        "grade-8": {
            "execution": 1
        },
        "7": "// Write your code here.\n\n  long primes[n+1];\n  for(long i=0;i<=n;i++)\n  {\n      primes[i]=1;\n  }\n  primes[0]=0;\n  primes[1]=0;\n  for(long i=2;i<=n;i++)\n  {\n      if(primes[i]==1)\n      {\n          for(long j=2;j*i<=n;j++)\n          {\n              primes[i*j]=0;\n          }\n      }\n  }\n  if(primes[n]==1)\n  {\n      return x;\n  }\n  else\n  {\n      return y;\n  }",
        "grade-7": {
            "execution": 1
        },
        "23": "return (n % 2) == 0 ? y : x;",
        "grade-23": {
            "execution": 0
        },
        "55": "// YOUR CODE HERE\n  if(n==2){\n      return x;\n  }\n  if(n%2==0){\n      return y;\n  }\n  else{\n    return x;\n  }",
        "grade-55": {
            "execution": 0
        },
        "59": "// implement this function!\n  // x_or_y(15, 8, 5) returns 5.\n  // x_or_y(7, 34, 12) returns 34.\n  if(n==1){\n    return y;\n  }\n  if(n==2){\n    return x;\n  }\n  if(n%2==0){\n    return y;\n  }\n  else{\n    return x;\n  }",
        "grade-59": {
            "execution": 0
        },
        "bleu-168": 0.27544231260178553,
        "bleu-28": 0.07556110850463402,
        "bleu-6": 0.5018104888171839,
        "bleu-194": 0.43563783892923524,
        "bleu-70": 0.4467132817411109,
        "bleu-62": 0.4693147013390975,
        "bleu-57": 0.42248023110348165,
        "bleu-35": 0.18378423981247194,
        "bleu-193": 0.400679520137395,
        "bleu-26": 0.3470967108362592,
        "bleu-178": 0.383238794727233,
        "bleu-142": 0.030814343192847097,
        "bleu-22": 0.018009000602048554,
        "bleu-155": 0.061985903698219824,
        "bleu-109": 0.39398826630456824,
        "bleu-8": 0.471214751649748,
        "bleu-7": 0.15532994666651892,
        "bleu-23": 0.01084594291193553,
        "bleu-55": 0.1582566123873617,
        "bleu-59": 0.14243080608563416,
        "codebleu-168": 0.672992836520619,
        "codebleu-28": 0.5809797621060939,
        "codebleu-6": 0.6551628348405466,
        "codebleu-194": 0.5470614704435413,
        "codebleu-70": 0.584230136559608,
        "codebleu-62": 0.6251286565253116,
        "codebleu-57": 0.5755531395579535,
        "codebleu-35": 0.6140749152450584,
        "codebleu-193": 0.5897674914674153,
        "codebleu-26": 0.40516687334068674,
        "codebleu-178": 0.47287623685006547,
        "codebleu-142": 0.1363679419565254,
        "codebleu-22": 0.12899977712978775,
        "codebleu-155": 0.18794872732193182,
        "codebleu-109": 0.5649664186210499,
        "codebleu-8": 0.6224867069977071,
        "codebleu-7": 0.6125607227245886,
        "codebleu-23": 0.10220835120364655,
        "codebleu-55": 0.303617092847006,
        "codebleu-59": 0.44727162656683855,
        "chrf-168": 0.3993272852456994,
        "chrf-28": 0.24825916610760856,
        "chrf-6": 0.43282512952716184,
        "chrf-194": 0.4271423005424518,
        "chrf-70": 0.4238387302865459,
        "chrf-62": 0.41332577033243895,
        "chrf-57": 0.37090422767892733,
        "chrf-35": 0.2825642994686892,
        "chrf-193": 0.4033756121059284,
        "chrf-26": 0.3884245683802383,
        "chrf-178": 0.38975998986678256,
        "chrf-142": 0.21225013298600548,
        "chrf-22": 0.20558814328731537,
        "chrf-155": 0.2028700157378845,
        "chrf-109": 0.3915384594678979,
        "chrf-8": 0.41453436856731307,
        "chrf-7": 0.30266973521950336,
        "chrf-23": 0.08392158141158572,
        "chrf-55": 0.24110777092074742,
        "chrf-59": 0.2595591644498181,
        "rougel-168": 0.5859872611464968,
        "rougel-28": 0.31840796019900497,
        "rougel-6": 0.6666666666666667,
        "rougel-194": 0.7083333333333334,
        "rougel-70": 0.6601941747572816,
        "rougel-62": 0.625,
        "rougel-57": 0.607142857142857,
        "rougel-35": 0.4366197183098592,
        "rougel-193": 0.6324786324786326,
        "rougel-26": 0.6153846153846154,
        "rougel-178": 0.5656565656565656,
        "rougel-142": 0.3333333333333333,
        "rougel-22": 0.3333333333333333,
        "rougel-155": 0.31707317073170727,
        "rougel-109": 0.6226415094339622,
        "rougel-8": 0.6194690265486725,
        "rougel-7": 0.4083769633507854,
        "rougel-23": 0.25352112676056343,
        "rougel-55": 0.425531914893617,
        "rougel-59": 0.33082706766917297,
        "meteor-168": 0.6766660487978514,
        "meteor-28": 0.41419941706732494,
        "meteor-6": 0.6111800220233649,
        "meteor-194": 0.5293321703345857,
        "meteor-70": 0.5851881599389905,
        "meteor-62": 0.5848982785602505,
        "meteor-57": 0.4879841549295774,
        "meteor-35": 0.4422527093334547,
        "meteor-193": 0.6468380153604089,
        "meteor-26": 0.41810690037609366,
        "meteor-178": 0.41208013424454637,
        "meteor-142": 0.22807239057239057,
        "meteor-22": 0.20471643518518517,
        "meteor-155": 0.24869888475836427,
        "meteor-109": 0.539338556739443,
        "meteor-8": 0.5327034602593442,
        "meteor-7": 0.5674291407484887,
        "meteor-23": 0.14000896057347673,
        "meteor-55": 0.3101010101010101,
        "meteor-59": 0.3789779169432679,
        "ruby-168": 0.43999999999999995,
        "ruby-28": 0.2152777777777778,
        "ruby-6": 0.543859649122807,
        "ruby-194": 0.5964912280701755,
        "ruby-70": 0.5087719298245614,
        "ruby-62": 0.4385964912280702,
        "ruby-57": 0.4035087719298246,
        "ruby-35": 0.3058823529411765,
        "ruby-193": 0.44999999999999996,
        "ruby-26": 0.4736842105263158,
        "ruby-178": 0.4736842105263158,
        "ruby-142": 0.21052631578947367,
        "ruby-22": 0.19298245614035092,
        "ruby-155": 0.19298245614035092,
        "ruby-109": 0.4385964912280702,
        "ruby-8": 0.4736842105263158,
        "ruby-7": 0.27611940298507465,
        "ruby-23": 0.1578947368421053,
        "ruby-55": 0.3508771929824561,
        "ruby-59": 0.22368421052631582,
        "codebertscore_f1-168": 0.803316056728363,
        "codebertscore_f3-168": 0.8190872073173523,
        "codebertscore_f1-28": 0.7198449969291687,
        "codebertscore_f3-28": 0.7438183426856995,
        "codebertscore_f1-6": 0.834583580493927,
        "codebertscore_f3-6": 0.8342610001564026,
        "codebertscore_f1-194": 0.8778872489929199,
        "codebertscore_f3-194": 0.8376593589782715,
        "codebertscore_f1-70": 0.864179253578186,
        "codebertscore_f3-70": 0.8370848298072815,
        "codebertscore_f1-62": 0.8144286274909973,
        "codebertscore_f3-62": 0.8178097605705261,
        "codebertscore_f1-57": 0.8490198254585266,
        "codebertscore_f3-57": 0.8350673317909241,
        "codebertscore_f1-35": 0.8120765089988708,
        "codebertscore_f3-35": 0.7898375988006592,
        "codebertscore_f1-193": 0.8309941291809082,
        "codebertscore_f3-193": 0.8390296101570129,
        "codebertscore_f1-26": 0.8687907457351685,
        "codebertscore_f3-26": 0.8265047073364258,
        "codebertscore_f1-178": 0.8286760449409485,
        "codebertscore_f3-178": 0.8252996206283569,
        "codebertscore_f1-142": 0.7973518371582031,
        "codebertscore_f3-142": 0.7372265458106995,
        "codebertscore_f1-22": 0.7615467309951782,
        "codebertscore_f3-22": 0.7196637392044067,
        "codebertscore_f1-155": 0.7509034872055054,
        "codebertscore_f3-155": 0.7406485080718994,
        "codebertscore_f1-109": 0.8468632698059082,
        "codebertscore_f3-109": 0.8183487057685852,
        "codebertscore_f1-8": 0.842448353767395,
        "codebertscore_f3-8": 0.8365076184272766,
        "codebertscore_f1-7": 0.7679144144058228,
        "codebertscore_f3-7": 0.79402095079422,
        "codebertscore_f1-23": 0.7642465233802795,
        "codebertscore_f3-23": 0.7034342288970947,
        "codebertscore_f1-55": 0.7854702472686768,
        "codebertscore_f3-55": 0.7621498107910156,
        "codebertscore_f1-59": 0.75067538022995,
        "codebertscore_f3-59": 0.737406313419342,
        "codebertscore_s_f1-168": 0.8073887228965759,
        "codebertscore_s_f3-168": 0.8223686814308167,
        "codebertscore_s_f1-28": 0.7324790954589844,
        "codebertscore_s_f3-28": 0.7533053755760193,
        "codebertscore_s_f1-6": 0.8336895108222961,
        "codebertscore_s_f3-6": 0.8317728638648987,
        "codebertscore_s_f1-194": 0.8801177144050598,
        "codebertscore_s_f3-194": 0.8376584053039551,
        "codebertscore_s_f1-70": 0.8662602305412292,
        "codebertscore_s_f3-70": 0.8386531472206116,
        "codebertscore_s_f1-62": 0.8224590420722961,
        "codebertscore_s_f3-62": 0.8245177865028381,
        "codebertscore_s_f1-57": 0.8497856259346008,
        "codebertscore_s_f3-57": 0.8334583044052124,
        "codebertscore_s_f1-35": 0.8209050893783569,
        "codebertscore_s_f3-35": 0.7959151864051819,
        "codebertscore_s_f1-193": 0.8291937112808228,
        "codebertscore_s_f3-193": 0.8393368124961853,
        "codebertscore_s_f1-26": 0.8709312677383423,
        "codebertscore_s_f3-26": 0.8254393935203552,
        "codebertscore_s_f1-178": 0.8244790434837341,
        "codebertscore_s_f3-178": 0.8205803632736206,
        "codebertscore_s_f1-142": 0.7998608350753784,
        "codebertscore_s_f3-142": 0.7358546853065491,
        "codebertscore_s_f1-22": 0.7548032402992249,
        "codebertscore_s_f3-22": 0.7074589133262634,
        "codebertscore_s_f1-155": 0.7470021843910217,
        "codebertscore_s_f3-155": 0.7347705364227295,
        "codebertscore_s_f1-109": 0.8504316210746765,
        "codebertscore_s_f3-109": 0.8217461109161377,
        "codebertscore_s_f1-8": 0.8424742221832275,
        "codebertscore_s_f3-8": 0.8365102410316467,
        "codebertscore_s_f1-7": 0.77463299036026,
        "codebertscore_s_f3-7": 0.7979040145874023,
        "codebertscore_s_f1-23": 0.7746095061302185,
        "codebertscore_s_f3-23": 0.7047868371009827,
        "codebertscore_s_f1-55": 0.7790457606315613,
        "codebertscore_s_f3-55": 0.7531258463859558,
        "codebertscore_s_f1-59": 0.7445201277732849,
        "codebertscore_s_f3-59": 0.7341506481170654,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-178": 3,
        "raw_gpt35_nsnr-178": "3",
        "gpt35_nsnr-142": 2,
        "raw_gpt35_nsnr-142": "2",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "3 (The code snippet correctly returns x if n is prime and y otherwise, but the implementation of the isPrime function is not provided and may affect the correctness of the code snippet.)",
        "gpt35_nsnr-155": 3,
        "raw_gpt35_nsnr-155": "3",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-28": 1,
        "raw_gpt35_nswr-28": "1",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-142": 2,
        "raw_gpt35_nswr-142": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-155": 2,
        "raw_gpt35_nswr-155": "2",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
        "task_id": "149",
        "170": "// Your code here:\n    std::vector<std::string> lst_new;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) {\n            lst_new.push_back(lst[i]);\n        }\n    }\n    std::sort(lst_new.begin(), lst_new.end());\n    return lst_new;",
        "grade-170": {
            "execution": 0
        },
        "29": "// fill your code here",
        "grade-29": {
            "execution": 0
        },
        "6": "std::vector<std::string> vc;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() % 2 == 0) {\n            vc.push_back(lst[i]);\n        }\n    }\n    sort(vc.begin(), vc.end());\n    return vc;",
        "grade-6": {
            "execution": 0
        },
        "199": "std::sort(lst.begin(), lst.end());\n    std::vector<std::string> odd_length;\n    for (std::string word : lst) {\n        if (word.length() % 2 != 0) {\n            odd_length.push_back(word);\n        }\n    }\n    return odd_length;",
        "grade-199": {
            "execution": 0
        },
        "72": "std::vector<std::string> result;\n    for (auto v : lst) {\n        result.push_back(v);\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = i + 1; j < lst.size(); j++) {\n            if (lst[i].length() > lst[j].length()) {\n                std::swap(result[i], result[j]);\n            }\n        }\n    }\n    return result;",
        "grade-72": {
            "execution": 0
        },
        "64": "std::vector<std::string> res_lst;\n    std::sort(lst.begin(), lst.end());\n    for (auto l : lst) {\n        res_lst.push_back(l);\n    }\n    return res_lst;",
        "grade-64": {
            "execution": 0
        },
        "59": "// Write your code here\n  std::vector<std::string> new_lst;\n  int word_length = lst[0].length();\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i].length() == word_length) {\n      new_lst.push_back(lst[i]);\n    }\n  }\n  std::sort(new_lst.begin(), new_lst.end());\n  return new_lst;",
        "grade-59": {
            "execution": 0
        },
        "36": "std::vector<std::string> v;\n    for (auto word : lst) {\n        if ((word.length()%2)==0) {\n            v.push_back(word);\n        }\n    }\n    std::sort(v.begin(), v.end());\n    std::sort(v.begin(), v.end(), [](std::string s1, std::string s2) {\n        return s1.length() < s2.length();\n    });\n    return v;",
        "grade-36": {
            "execution": 1
        },
        "198": "std::sort(lst.begin(), lst.end());\n    lst.erase(unique(lst.begin(), lst.end()), lst.end());\n    return lst;",
        "grade-198": {
            "execution": 0
        },
        "27": "std::sort(lst.begin(), lst.end());\n  return lst;",
        "grade-27": {
            "execution": 0
        },
        "183": "for (size_t i = 0; i < lst.size(); i++) {\n        for (size_t j = i + 1; j < lst.size(); j++) {\n            if (lst[i].length() > lst[j].length()) {\n                std::string temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n    return lst;",
        "grade-183": {
            "execution": 0
        },
        "142": "int i = 0;\n  while (i < lst.size()) {\n    if (lst[i].size() % 2 != 0) {\n      lst.erase(lst.begin() + i);\n    } else {\n      i++;\n    }\n  }\n  std::sort(lst.begin(), lst.end());\n  return lst;",
        "grade-142": {
            "execution": 0
        },
        "23": "std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n    int current_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() != current_length) {\n            current_length = lst[i].length();\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "156": "std::vector<std::string> result;\n  for (std::string item : lst) {\n    if (item.length() % 2 == 0) {\n      result.push_back(item);\n    }\n  }\n  return result;",
        "grade-156": {
            "execution": 0
        },
        "110": "std::vector<std::string> res;\n    for (auto s : lst) {\n        res.push_back(s);\n    }\n    sort(res.begin(), res.end());\n    return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "std::vector<std::string> lst2;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() % 2 == 0) {\n            lst2.push_back(lst[i]);\n        }\n    }\n    std::sort(lst2.begin(), lst2.end(), [](std::string a, std::string b) { return a.size() < b.size(); });\n    return lst2;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> even_lst;\n  for (std::string s : lst) {\n    if (s.length() % 2 == 0) {\n      even_lst.push_back(s);\n    }\n  }\n  std::sort(even_lst.begin(), even_lst.end());\n  return even_lst;",
        "grade-7": {
            "execution": 0
        },
        "24": "std::vector<std::string> odd_lst;\n  for (unsigned int i = 0; i < lst.size(); i++) {\n    if (lst[i].length() % 2 == 0) {\n      odd_lst.push_back(lst[i]);\n    }\n  }\n  std::sort(odd_lst.begin(), odd_lst.end());\n  return odd_lst;",
        "grade-24": {
            "execution": 0
        },
        "57": "std::sort(lst.begin(), lst.end());\n    std::vector<std::string> sorted_lst;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i < lst.size() - 1 && lst[i] == lst[i + 1]) {\n            continue;\n        }\n        sorted_lst.push_back(lst[i]);\n    }\n    return sorted_lst;",
        "grade-57": {
            "execution": 0
        },
        "61": "std::vector<std::string> newsortedlist;\n  std::vector<std::string>::iterator it;\n  std::sort(lst.begin(), lst.end());\n  for (it = lst.begin(); it != lst.end(); it++) {\n    if (newsortedlist.empty()) {\n      newsortedlist.push_back(*it);\n    } else {\n      if (newsortedlist.back() == *it) {\n        continue;\n      } else {\n        newsortedlist.push_back(*it);\n      }\n    }\n  }\n  return newsortedlist;",
        "grade-61": {
            "execution": 0
        },
        "bleu-170": 0.24668173559779732,
        "bleu-29": 0.0,
        "bleu-6": 0.2167170546756544,
        "bleu-199": 0.06945644557035424,
        "bleu-72": 0.3241859141735304,
        "bleu-64": 0.02973683340207943,
        "bleu-59": 0.26805011420799135,
        "bleu-36": 0.16505295578848128,
        "bleu-198": 0.0217012486043559,
        "bleu-27": 0.0004804095207599905,
        "bleu-183": 0.27248424541316735,
        "bleu-142": 0.1395891421222022,
        "bleu-23": 0.2665377757981871,
        "bleu-156": 0.028352958171511483,
        "bleu-110": 0.021118689066484356,
        "bleu-8": 0.35326556457697506,
        "bleu-7": 0.07957923683914817,
        "bleu-24": 0.22574375733048824,
        "bleu-57": 0.23458685693279657,
        "bleu-61": 0.13529510178109358,
        "codebleu-170": 0.3597650891941822,
        "codebleu-29": 0.011544011544011542,
        "codebleu-6": 0.33883277083949487,
        "codebleu-199": 0.22441817547802942,
        "codebleu-72": 0.4713142708948406,
        "codebleu-64": 0.16097019702406798,
        "codebleu-59": 0.4062913090287868,
        "codebleu-36": 0.4163548220015408,
        "codebleu-198": 0.17847452364611915,
        "codebleu-27": 0.07533986383907537,
        "codebleu-183": 0.4258934821768863,
        "codebleu-142": 0.31327811513718545,
        "codebleu-23": 0.408106835968154,
        "codebleu-156": 0.13942897562246176,
        "codebleu-110": 0.153407831607111,
        "codebleu-8": 0.5415932158294892,
        "codebleu-7": 0.22638117319786613,
        "codebleu-24": 0.34535192360546624,
        "codebleu-57": 0.38360698123446135,
        "codebleu-61": 0.41599692462181226,
        "chrf-170": 0.3864527145481969,
        "chrf-29": 0.013237358613980087,
        "chrf-6": 0.3648970632493892,
        "chrf-199": 0.29482459509619197,
        "chrf-72": 0.4255497239153486,
        "chrf-64": 0.2303522086572946,
        "chrf-59": 0.4189234233730229,
        "chrf-36": 0.3121825887953524,
        "chrf-198": 0.14749650280711965,
        "chrf-27": 0.10650027814444077,
        "chrf-183": 0.35027007966417467,
        "chrf-142": 0.24440644070827044,
        "chrf-23": 0.4261395641997025,
        "chrf-156": 0.2204961833150751,
        "chrf-110": 0.19064365492945268,
        "chrf-8": 0.4212637017963725,
        "chrf-7": 0.2722764840961543,
        "chrf-24": 0.39964731246502455,
        "chrf-57": 0.38093722919773837,
        "chrf-61": 0.28353485675038453,
        "rougel-170": 0.5039370078740157,
        "rougel-29": 0.0,
        "rougel-6": 0.5142857142857142,
        "rougel-199": 0.26609442060085836,
        "rougel-72": 0.5448028673835126,
        "rougel-64": 0.26046511627906976,
        "rougel-59": 0.4696969696969697,
        "rougel-36": 0.4341637010676157,
        "rougel-198": 0.28169014084507044,
        "rougel-27": 0.16042780748663102,
        "rougel-183": 0.5475285171102661,
        "rougel-142": 0.4297520661157025,
        "rougel-23": 0.4351145038167939,
        "rougel-156": 0.26976744186046514,
        "rougel-110": 0.27358490566037735,
        "rougel-8": 0.49831649831649827,
        "rougel-7": 0.35193133047210295,
        "rougel-24": 0.5140562248995983,
        "rougel-57": 0.4,
        "rougel-61": 0.3623693379790941,
        "meteor-170": 0.2589257006811053,
        "meteor-29": 0.0,
        "meteor-6": 0.26040715732835895,
        "meteor-199": 0.20115281698044427,
        "meteor-72": 0.3340816359984984,
        "meteor-64": 0.11636425529078566,
        "meteor-59": 0.27126689000558346,
        "meteor-36": 0.3243696002040989,
        "meteor-198": 0.13370088114940926,
        "meteor-27": 0.08443344334433443,
        "meteor-183": 0.4575408249279975,
        "meteor-142": 0.27492525672689455,
        "meteor-23": 0.2944460179206565,
        "meteor-156": 0.1485484670543293,
        "meteor-110": 0.13479938375880102,
        "meteor-8": 0.3506877999127527,
        "meteor-7": 0.19035438482190536,
        "meteor-24": 0.2597466445640511,
        "meteor-57": 0.2962877134061013,
        "meteor-61": 0.26780564857521966,
        "ruby-170": 0.29518072289156627,
        "ruby-29": 0.0,
        "ruby-6": 0.3373493975903614,
        "ruby-199": 0.17469879518072284,
        "ruby-72": 0.3975903614457831,
        "ruby-64": 0.1506024096385542,
        "ruby-59": 0.2530120481927711,
        "ruby-36": 0.28915662650602414,
        "ruby-198": 0.17469879518072284,
        "ruby-27": 0.09036144578313254,
        "ruby-183": 0.39156626506024095,
        "ruby-142": 0.2831325301204819,
        "ruby-23": 0.3012048192771084,
        "ruby-156": 0.13855421686746983,
        "ruby-110": 0.14457831325301207,
        "ruby-8": 0.28915662650602414,
        "ruby-7": 0.1987951807228916,
        "ruby-24": 0.32530120481927716,
        "ruby-57": 0.29518072289156627,
        "ruby-61": 0.22891566265060237,
        "codebertscore_f1-170": 0.8330280184745789,
        "codebertscore_f3-170": 0.8202918767929077,
        "codebertscore_f1-29": 0.4975692629814148,
        "codebertscore_f3-29": 0.4751037061214447,
        "codebertscore_f1-6": 0.8518601059913635,
        "codebertscore_f3-6": 0.8201462030410767,
        "codebertscore_f1-199": 0.7814170718193054,
        "codebertscore_f3-199": 0.7438545227050781,
        "codebertscore_f1-72": 0.857804000377655,
        "codebertscore_f3-72": 0.8484285473823547,
        "codebertscore_f1-64": 0.7698968648910522,
        "codebertscore_f3-64": 0.7154191732406616,
        "codebertscore_f1-59": 0.8231319189071655,
        "codebertscore_f3-59": 0.8125926852226257,
        "codebertscore_f1-36": 0.7933010458946228,
        "codebertscore_f3-36": 0.7706689834594727,
        "codebertscore_f1-198": 0.7183516621589661,
        "codebertscore_f3-198": 0.655682384967804,
        "codebertscore_f1-27": 0.7093686461448669,
        "codebertscore_f3-27": 0.633565366268158,
        "codebertscore_f1-183": 0.8376400470733643,
        "codebertscore_f3-183": 0.8195631504058838,
        "codebertscore_f1-142": 0.8076328039169312,
        "codebertscore_f3-142": 0.7766124606132507,
        "codebertscore_f1-23": 0.8508346676826477,
        "codebertscore_f3-23": 0.8289255499839783,
        "codebertscore_f1-156": 0.7789471745491028,
        "codebertscore_f3-156": 0.7269503474235535,
        "codebertscore_f1-110": 0.7681807279586792,
        "codebertscore_f3-110": 0.7104987502098083,
        "codebertscore_f1-8": 0.8383293151855469,
        "codebertscore_f3-8": 0.8244529366493225,
        "codebertscore_f1-7": 0.7902165055274963,
        "codebertscore_f3-7": 0.751198947429657,
        "codebertscore_f1-24": 0.8482053875923157,
        "codebertscore_f3-24": 0.8226132988929749,
        "codebertscore_f1-57": 0.8352463245391846,
        "codebertscore_f3-57": 0.8227499723434448,
        "codebertscore_f1-61": 0.765587329864502,
        "codebertscore_f3-61": 0.7564077973365784,
        "codebertscore_s_f1-170": 0.8373733162879944,
        "codebertscore_s_f3-170": 0.8231958746910095,
        "codebertscore_s_f1-29": 0.490359365940094,
        "codebertscore_s_f3-29": 0.4668048620223999,
        "codebertscore_s_f1-6": 0.8526699542999268,
        "codebertscore_s_f3-6": 0.8200110793113708,
        "codebertscore_s_f1-199": 0.7763549089431763,
        "codebertscore_s_f3-199": 0.7352938652038574,
        "codebertscore_s_f1-72": 0.8595373034477234,
        "codebertscore_s_f3-72": 0.8511207699775696,
        "codebertscore_s_f1-64": 0.7730103135108948,
        "codebertscore_s_f3-64": 0.7129055261611938,
        "codebertscore_s_f1-59": 0.8262101411819458,
        "codebertscore_s_f3-59": 0.8154627084732056,
        "codebertscore_s_f1-36": 0.7934931516647339,
        "codebertscore_s_f3-36": 0.772113561630249,
        "codebertscore_s_f1-198": 0.7273492217063904,
        "codebertscore_s_f3-198": 0.653649628162384,
        "codebertscore_s_f1-27": 0.7105819582939148,
        "codebertscore_s_f3-27": 0.6239195466041565,
        "codebertscore_s_f1-183": 0.8412643671035767,
        "codebertscore_s_f3-183": 0.8227525353431702,
        "codebertscore_s_f1-142": 0.819579005241394,
        "codebertscore_s_f3-142": 0.7847057580947876,
        "codebertscore_s_f1-23": 0.854722261428833,
        "codebertscore_s_f3-23": 0.8318471908569336,
        "codebertscore_s_f1-156": 0.7787870764732361,
        "codebertscore_s_f3-156": 0.7212293744087219,
        "codebertscore_s_f1-110": 0.768930971622467,
        "codebertscore_s_f3-110": 0.7089707851409912,
        "codebertscore_s_f1-8": 0.837386965751648,
        "codebertscore_s_f3-8": 0.8240082859992981,
        "codebertscore_s_f1-7": 0.7866108417510986,
        "codebertscore_s_f3-7": 0.7440183758735657,
        "codebertscore_s_f1-24": 0.8490350246429443,
        "codebertscore_s_f3-24": 0.8233569264411926,
        "codebertscore_s_f1-57": 0.8413030505180359,
        "codebertscore_s_f3-57": 0.8253263831138611,
        "codebertscore_s_f1-61": 0.7574169635772705,
        "codebertscore_s_f3-61": 0.7460455894470215,
        "gpt35_nsnr-170": 3,
        "raw_gpt35_nsnr-170": "3",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "3 - The code snippet correctly filters out strings with odd lengths and sorts the resulting list in ascending order by length and alphabetically for words with the same length. However, the function name and parameter name do not match the problem description, which may cause confusion.",
        "gpt35_nsnr-199": 0,
        "raw_gpt35_nsnr-199": "3 - The code correctly sorts the input list in ascending order and correctly identifies and removes strings with odd lengths. However, it does not handle the case where two words have the same length and need to be sorted alphabetically.",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-64": 2,
        "raw_gpt35_nsnr-64": "2",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-198": 0,
        "raw_gpt35_nsnr-198": "3 - The code snippet sorts the list alphabetically and removes duplicates, but it does not delete strings with odd lengths as required by the problem.",
        "gpt35_nsnr-27": 0,
        "raw_gpt35_nsnr-27": "3 - The code snippet sorts the list alphabetically, but it does not delete the strings with odd lengths or sort the list by ascending length.",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-156": 3,
        "raw_gpt35_nsnr-156": "3",
        "gpt35_nsnr-110": 0,
        "raw_gpt35_nsnr-110": "3 - The code correctly sorts the list of strings in ascending order by length and alphabetically if two words have the same length. However, it does not delete the strings with odd lengths as required by the problem.",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 0,
        "raw_gpt35_nsnr-24": "3 - The code correctly filters out strings with odd lengths and sorts the resulting list alphabetically. However, it does not sort the list by ascending length as required by the problem.",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-61": 2,
        "raw_gpt35_nsnr-61": "2",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-64": 0,
        "raw_gpt35_nswr-64": "Score: 1",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-142": 4,
        "raw_gpt35_nswr-142": "4",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-156": 3,
        "raw_gpt35_nswr-156": "3",
        "gpt35_nswr-110": 2,
        "raw_gpt35_nswr-110": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n",
        "snippet": [
            "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n"
        ],
        "simplified": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
        "task_id": "155",
        "163": "std::tuple<long, long> even_odd_count_tuple;\n  std::get<0>(even_odd_count_tuple) = 0;\n  std::get<1>(even_odd_count_tuple) = 0;\n  if (num == 0) {\n    return even_odd_count_tuple;\n  }\n  if (num < 0) {\n    num = num * -1;\n  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n      std::get<0>(even_odd_count_tuple)++;\n    } else {\n      std::get<1>(even_odd_count_tuple)++;\n    }\n    num = num / 10;\n  }\n  return even_odd_count_tuple;",
        "grade-163": {
            "execution": 0
        },
        "28": "long odd = 0, even = 0;\n    while(num != 0) {\n        int rem = num % 10;\n        if(rem % 2 == 0)\n            even++;\n        else\n            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-28": {
            "execution": 0
        },
        "6": "long odd = 0, even = 0;\n    while(num) {\n        if(abs(num % 10) % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-6": {
            "execution": 0
        },
        "189": "long even=0,odd=0;\n  while(num)\n  {\n    int last_digit=num%10;\n    if(last_digit%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
        "grade-189": {
            "execution": 0
        },
        "70": "long even = 0;\n  long odd = 0;\n  int sign = num < 0 ? -1 : 1;\n  num = std::abs(num);\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
        "grade-70": {
            "execution": 0
        },
        "62": "if (num == 0) {\n\t\treturn std::make_tuple(1, 0);\n\t}\n\tlong odd = 0, even = 0;\n\twhile (num != 0) {\n\t\tint digit = abs(num % 10);\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);",
        "grade-62": {
            "execution": 1
        },
        "57": "long even=0,odd=0;\n  while(num){\n    if(num%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
        "grade-57": {
            "execution": 0
        },
        "35": "long even = 0, odd = 0;\n  std::stringstream ss;\n  ss << num;\n  std::string s = ss.str();\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] - '0' % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);",
        "grade-35": {
            "execution": 0
        },
        "188": "long odd_count = 0;\n    long even_count = 0;\n    while(num != 0) {\n        if(abs(num % 10) % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_count, odd_count);",
        "grade-188": {
            "execution": 0
        },
        "26": "long even = 0, odd = 0;\n\tif (num == 0) {\n\t\treturn std::make_tuple(1, 0);\n\t}\n\tif (num < 0) {\n\t\tnum = -num;\n\t}\n\twhile (num > 0) {\n\t\tif (num % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);",
        "grade-26": {
            "execution": 1
        },
        "173": "long even = 0;\n  long odd = 0;\n  while (num != 0) {\n    int rem = num % 10;\n    if (rem % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
        "grade-173": {
            "execution": 0
        },
        "139": "std::tuple<long, long> result(0, 0);\n  bool even = true;\n  while (num != 0) {\n    if (even) {\n      std::get<0>(result) += num % 2;\n    } else {\n      std::get<1>(result) += num % 2;\n    }\n    num /= 10;\n    even = !even;\n  }\n  return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "long odd_count = 0;\n  long even_count = 0;\n  while (num != 0) {\n    long digit = num % 10;\n    num /= 10;\n    if (digit % 2 == 0)\n      even_count++;\n    else\n      odd_count++;\n  }\n  return std::make_tuple(even_count, odd_count);",
        "grade-22": {
            "execution": 0
        },
        "151": "long even = 0;\n  long odd = 0;\n  long n = std::abs(num);\n  while (n > 0) {\n    long last_digit = n % 10;\n    if (last_digit % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    n /= 10;\n  }\n  return std::make_tuple(even, odd);",
        "grade-151": {
            "execution": 0
        },
        "108": "int odd = 0, even = 0;\n    long num1 = abs(num);\n    while(num1 != 0){\n        int i = num1 % 10;\n        if(i%2 == 0) even++;\n        else odd++;\n        num1 = num1 / 10;\n    }\n    std::tuple<long, long> t = std::make_tuple(even, odd);\n    return t;",
        "grade-108": {
            "execution": 0
        },
        "8": "int count[2] = {0, 0};\n    int tmp = abs(num);\n    while(tmp != 0) {\n        count[tmp % 10 % 2]++;\n        tmp /= 10;\n    }\n    return std::make_tuple(count[0], count[1]);",
        "grade-8": {
            "execution": 0
        },
        "7": "// write code here\n  int oddCount = 0;\n  int evenCount = 0;\n  int  n;\n  n = abs(num);\n  while(n != 0)\n  {\n    if(n % 2 == 0)\n    {\n      evenCount++;\n    }\n    else\n    {\n      oddCount++;\n    }\n    n = n / 10;\n  }\n  return std::make_tuple(evenCount, oddCount);",
        "grade-7": {
            "execution": 0
        },
        "23": "long even = 0, odd = 0;\n    int n;\n    if(num>0){\n        n = num;\n    }\n    else{\n        n = -num;\n    }\n    while(n!=0){\n        if(n%2==0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n        n/=10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code here\n  std::tuple<long, long> result;\n  if(num == 0)\n  {\n    std::get<0>(result) = 1;\n    std::get<1>(result) = 0;\n    return result;\n  }\n  if(num < 0)\n  {\n    num = -num;\n  }\n  std::get<0>(result) = 0;\n  std::get<1>(result) = 0;\n  while(num > 0)\n  {\n    if(num % 2 == 0)\n    {\n      std::get<0>(result)++;\n    }\n    else\n    {\n      std::get<1>(result)++;\n    }\n    num /= 10;\n  }\n  return result;",
        "grade-55": {
            "execution": 1
        },
        "59": "int even = 0;\n    int odd = 0;\n    if (num < 0) {\n        num = -num;\n    }\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.05852499665727438,
        "bleu-28": 0.09739609803516584,
        "bleu-6": 0.1362947824213361,
        "bleu-189": 0.10302965227456978,
        "bleu-70": 0.1290807740444174,
        "bleu-62": 0.09070601447300294,
        "bleu-57": 0.09675966198067348,
        "bleu-35": 0.27994280204664784,
        "bleu-188": 0.1321432035264889,
        "bleu-26": 0.08191629659095444,
        "bleu-173": 0.0976424113968524,
        "bleu-139": 0.03159148437360479,
        "bleu-22": 0.09697587133981106,
        "bleu-151": 0.12913796809064804,
        "bleu-108": 0.13401542587172352,
        "bleu-8": 0.0782259105822748,
        "bleu-7": 0.12415475624479189,
        "bleu-23": 0.08986753438228115,
        "bleu-55": 0.05196072836151971,
        "bleu-59": 0.09348716079759876,
        "codebleu-163": 0.525703794369645,
        "codebleu-28": 0.4566115005898137,
        "codebleu-6": 0.44224869633947544,
        "codebleu-189": 0.44830282155178647,
        "codebleu-70": 0.5432983324612513,
        "codebleu-62": 0.5448184414524683,
        "codebleu-57": 0.3889898817151766,
        "codebleu-35": 0.6651752219066855,
        "codebleu-188": 0.44771133072425023,
        "codebleu-26": 0.5569155446756425,
        "codebleu-173": 0.44510403916768665,
        "codebleu-139": 0.5051203590371277,
        "codebleu-22": 0.4431660546715626,
        "codebleu-151": 0.528669406942151,
        "codebleu-108": 0.5785413418885686,
        "codebleu-8": 0.42654928132698217,
        "codebleu-7": 0.5182431925548296,
        "codebleu-23": 0.5390044879640962,
        "codebleu-55": 0.527641778865769,
        "codebleu-59": 0.5128722970216238,
        "chrf-163": 0.16606067977823696,
        "chrf-28": 0.20128390732106624,
        "chrf-6": 0.22475773090390821,
        "chrf-189": 0.21485568883984554,
        "chrf-70": 0.2392228964078486,
        "chrf-62": 0.23173167363888625,
        "chrf-57": 0.1909143009848285,
        "chrf-35": 0.3807219803181955,
        "chrf-188": 0.21518747639618063,
        "chrf-26": 0.20298525344691667,
        "chrf-173": 0.20278278030855856,
        "chrf-139": 0.18350214588302027,
        "chrf-22": 0.1986189409227697,
        "chrf-151": 0.2311551121597417,
        "chrf-108": 0.27053345429963,
        "chrf-8": 0.19533126336989162,
        "chrf-7": 0.24044218017648444,
        "chrf-23": 0.21331145510761243,
        "chrf-55": 0.1776291259864645,
        "chrf-59": 0.22083323911825123,
        "rougel-163": 0.31413612565445026,
        "rougel-28": 0.41860465116279066,
        "rougel-6": 0.3870967741935484,
        "rougel-189": 0.41269841269841273,
        "rougel-70": 0.3918918918918919,
        "rougel-62": 0.4230769230769231,
        "rougel-57": 0.40336134453781514,
        "rougel-35": 0.5153374233128835,
        "rougel-188": 0.3787878787878788,
        "rougel-26": 0.379746835443038,
        "rougel-173": 0.4,
        "rougel-139": 0.2987012987012987,
        "rougel-22": 0.3846153846153846,
        "rougel-151": 0.36111111111111116,
        "rougel-108": 0.37086092715231783,
        "rougel-8": 0.3333333333333333,
        "rougel-7": 0.37583892617449666,
        "rougel-23": 0.37583892617449666,
        "rougel-55": 0.30136986301369867,
        "rougel-59": 0.3835616438356164,
        "meteor-163": 0.34449341646550663,
        "meteor-28": 0.30973526384031225,
        "meteor-6": 0.3236172027290448,
        "meteor-189": 0.34049598675449017,
        "meteor-70": 0.3700586858570295,
        "meteor-62": 0.3613331784435691,
        "meteor-57": 0.3034360203994693,
        "meteor-35": 0.5373141163037006,
        "meteor-188": 0.31567738939682644,
        "meteor-26": 0.35332370439148525,
        "meteor-173": 0.3092863721535872,
        "meteor-139": 0.307615015072061,
        "meteor-22": 0.32080314009661837,
        "meteor-151": 0.3610795454545454,
        "meteor-108": 0.47863508623600504,
        "meteor-8": 0.29381266957650115,
        "meteor-7": 0.3730142738806854,
        "meteor-23": 0.33652200889758827,
        "meteor-55": 0.33856420025209044,
        "meteor-59": 0.33795198910536833,
        "ruby-163": 0.19834710743801653,
        "ruby-28": 0.24285714285714288,
        "ruby-6": 0.19999999999999996,
        "ruby-189": 0.2142857142857143,
        "ruby-70": 0.20512820512820518,
        "ruby-62": 0.2790697674418605,
        "ruby-57": 0.2142857142857143,
        "ruby-35": 0.3978494623655914,
        "ruby-188": 0.15714285714285714,
        "ruby-26": 0.21590909090909094,
        "ruby-173": 0.22857142857142854,
        "ruby-139": 0.1785714285714286,
        "ruby-22": 0.2571428571428571,
        "ruby-151": 0.16216216216216217,
        "ruby-108": 0.1728395061728395,
        "ruby-8": 0.1428571428571429,
        "ruby-7": 0.17721518987341767,
        "ruby-23": 0.20253164556962022,
        "ruby-55": 0.18120805369127513,
        "ruby-59": 0.1842105263157895,
        "codebertscore_f1-163": 0.7001003623008728,
        "codebertscore_f3-163": 0.7118352651596069,
        "codebertscore_f1-28": 0.760975182056427,
        "codebertscore_f3-28": 0.7571565508842468,
        "codebertscore_f1-6": 0.7636396288871765,
        "codebertscore_f3-6": 0.7556675672531128,
        "codebertscore_f1-189": 0.7657841444015503,
        "codebertscore_f3-189": 0.7636446952819824,
        "codebertscore_f1-70": 0.7676847577095032,
        "codebertscore_f3-70": 0.7664885520935059,
        "codebertscore_f1-62": 0.7605386972427368,
        "codebertscore_f3-62": 0.7598919868469238,
        "codebertscore_f1-57": 0.759162187576294,
        "codebertscore_f3-57": 0.7474988102912903,
        "codebertscore_f1-35": 0.8072196841239929,
        "codebertscore_f3-35": 0.8186014890670776,
        "codebertscore_f1-188": 0.7529445886611938,
        "codebertscore_f3-188": 0.7508118152618408,
        "codebertscore_f1-26": 0.7500712871551514,
        "codebertscore_f3-26": 0.7426440715789795,
        "codebertscore_f1-173": 0.7682173848152161,
        "codebertscore_f3-173": 0.7635823488235474,
        "codebertscore_f1-139": 0.7411054372787476,
        "codebertscore_f3-139": 0.740685760974884,
        "codebertscore_f1-22": 0.7658100128173828,
        "codebertscore_f3-22": 0.7649812698364258,
        "codebertscore_f1-151": 0.7744726538658142,
        "codebertscore_f3-151": 0.7801281809806824,
        "codebertscore_f1-108": 0.7840225696563721,
        "codebertscore_f3-108": 0.7999082207679749,
        "codebertscore_f1-8": 0.7582032680511475,
        "codebertscore_f3-8": 0.756041944026947,
        "codebertscore_f1-7": 0.7660679221153259,
        "codebertscore_f3-7": 0.7741962671279907,
        "codebertscore_f1-23": 0.7574938535690308,
        "codebertscore_f3-23": 0.7587608098983765,
        "codebertscore_f1-55": 0.6928714513778687,
        "codebertscore_f3-55": 0.7026761174201965,
        "codebertscore_f1-59": 0.7492766976356506,
        "codebertscore_f3-59": 0.7417567372322083,
        "codebertscore_s_f1-163": 0.7068749070167542,
        "codebertscore_s_f3-163": 0.7141793966293335,
        "codebertscore_s_f1-28": 0.7665970921516418,
        "codebertscore_s_f3-28": 0.7618265748023987,
        "codebertscore_s_f1-6": 0.7673582434654236,
        "codebertscore_s_f3-6": 0.7592383027076721,
        "codebertscore_s_f1-189": 0.7688106894493103,
        "codebertscore_s_f3-189": 0.7641182541847229,
        "codebertscore_s_f1-70": 0.7694414258003235,
        "codebertscore_s_f3-70": 0.766722559928894,
        "codebertscore_s_f1-62": 0.7655970454216003,
        "codebertscore_s_f3-62": 0.7656369805335999,
        "codebertscore_s_f1-57": 0.7647172808647156,
        "codebertscore_s_f3-57": 0.7526341080665588,
        "codebertscore_s_f1-35": 0.8127619028091431,
        "codebertscore_s_f3-35": 0.8243352770805359,
        "codebertscore_s_f1-188": 0.7607647776603699,
        "codebertscore_s_f3-188": 0.7578471899032593,
        "codebertscore_s_f1-26": 0.7511347532272339,
        "codebertscore_s_f3-26": 0.7445746064186096,
        "codebertscore_s_f1-173": 0.7709853053092957,
        "codebertscore_s_f3-173": 0.7651687264442444,
        "codebertscore_s_f1-139": 0.7314159274101257,
        "codebertscore_s_f3-139": 0.7303061485290527,
        "codebertscore_s_f1-22": 0.7703168988227844,
        "codebertscore_s_f3-22": 0.7684668898582458,
        "codebertscore_s_f1-151": 0.7743813395500183,
        "codebertscore_s_f3-151": 0.7805299758911133,
        "codebertscore_s_f1-108": 0.7895513772964478,
        "codebertscore_s_f3-108": 0.8024552464485168,
        "codebertscore_s_f1-8": 0.76337069272995,
        "codebertscore_s_f3-8": 0.7574160695075989,
        "codebertscore_s_f1-7": 0.7707123160362244,
        "codebertscore_s_f3-7": 0.7797173857688904,
        "codebertscore_s_f1-23": 0.7626972198486328,
        "codebertscore_s_f3-23": 0.7604087591171265,
        "codebertscore_s_f1-55": 0.6967943906784058,
        "codebertscore_s_f3-55": 0.7070754766464233,
        "codebertscore_s_f1-59": 0.7606568336486816,
        "codebertscore_s_f3-59": 0.7531540989875793,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nstd::vector<long> sort_third(std::vector<long> l) {\n",
        "snippet": [
            "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
        "task_id": "33",
        "173": "std::vector<long> lv;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long> lvv;\n            lvv.push_back(l[i]);\n            lvv.push_back(l[i + 1]);\n            lvv.push_back(l[i + 2]);\n            std::sort(lvv.begin(), lvv.end());\n            lv.push_back(lvv[0]);\n            lv.push_back(lvv[1]);\n            lv.push_back(lvv[2]);\n        } else {\n            lv.push_back(l[i]);\n        }\n    }\n    return lv;",
        "grade-173": {
            "execution": 0
        },
        "28": "std::vector<long>::iterator it;\n  int counter = 1;\n  for (it = l.begin(); it != l.end(); it++, counter++) {\n    if (counter % 3 == 0) {\n      std::sort(it, it + 3);\n    }\n  }\n  return l;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> nums;\n    // YOUR CODE HERE\n\n    if (l.size() < 3) {\n        return l;\n    }\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            nums.push_back(l[i]);\n        }\n    }\n\n    std::sort(nums.begin(), nums.end());\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l[i] = nums[i/3];\n        }\n    }\n\n    return l;",
        "grade-6": {
            "execution": 1
        },
        "71": "std::vector<long> answer;\n  int count = 0;\n  for (auto i = l.begin(); i != l.end(); i++) {\n    if (count % 3 == 0) {\n      std::vector<long> temp = {};\n      for (int j = 0; j < 3; j++) {\n        temp.push_back(*i);\n        i++;\n      }\n      i--;\n      sort(temp.begin(), temp.end());\n      for (auto j = temp.begin(); j != temp.end(); j++) {\n        answer.push_back(*j);\n      }\n    } else {\n      answer.push_back(*i);\n    }\n    count++;\n  }\n  return answer;",
        "grade-71": {
            "execution": 0
        },
        "63": "for (int i = 0; i < l.size(); i++) {\n\t\t\t\tif (i % 3 == 0) {\n\t\t\t\t\t\tstd::sort(l.begin() + i, l.begin() + i + 3);\n\t\t\t\t}\n\t\t}\n\t\treturn l;",
        "grade-63": {
            "execution": 0
        },
        "58": "if (l.size() < 3) {\n    return l;\n  }\n  std::vector<long> other;\n  std::vector<long> s;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      s.push_back(l[i]);\n    } else {\n      other.push_back(l[i]);\n    }\n  }\n  std::sort(s.begin(), s.end());\n  for (int i = 0; i < other.size(); i++) {\n    s.push_back(other[i]);\n  }\n  return s;",
        "grade-58": {
            "execution": 0
        },
        "35": "std::vector<long> a;\n    for (int i = 2; i < l.size(); i += 3) {\n        long temp = l[i];\n        for (int j = i - 3; j >= 0; j -= 3) {\n            if (l[j] <= temp) {\n                break;\n            }\n            l[j + 3] = l[j];\n            l[j] = temp;\n        }\n    }\n    return l;",
        "grade-35": {
            "execution": 0
        },
        "199": "std::vector<long> l_new;\n\tstd::vector<long> l_sort;\n\tlong i = 0;\n\tint idx = 0;\n\twhile (i < l.size()) {\n\t\tif (i % 3 == 0) {\n\t\t\tl_sort.push_back(l[i]);\n\t\t\tl_new.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tl_new.push_back(l[i]);\n\t\t}\n\t\ti++;\n\t}\n\tstd::sort(l_sort.begin(), l_sort.end());\n\ti = 0;\n\tfor (int i = 0; i < l_new.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tl_new[i] = l_sort[idx];\n\t\t\tidx++;\n\t\t}\n\t}\n\treturn l_new;",
        "grade-199": {
            "execution": 1
        },
        "26": "std::vector<long> r;\n    std::vector<long> l1;\n    r = l;\n    int x;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 3 == 0)\n            l1.push_back(l[i]);\n    }\n    std::sort(l1.begin(), l1.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 3 == 0){\n            r[i] = l1[j];\n            j++;\n        }\n    }\n    return r;",
        "grade-26": {
            "execution": 1
        },
        "183": "std::vector<long> l_new;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long> temp;\n            temp.push_back(l[i]);\n            if (i + 1 < l.size()) {\n                temp.push_back(l[i + 1]);\n            }\n            if (i + 2 < l.size()) {\n                temp.push_back(l[i + 2]);\n            }\n            std::sort(temp.begin(), temp.end());\n            l_new.insert(l_new.end(), temp.begin(), temp.end());\n        } else {\n            l_new.push_back(l[i]);\n        }\n    }\n    return l_new;",
        "grade-183": {
            "execution": 0
        },
        "147": "std::vector<long> result;\n\tint size = l.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tstd::vector<long> temp = l;\n\t\t\ttemp.erase(temp.begin() + i);\n\t\t\tstd::sort(temp.begin(), temp.end());\n\t\t\tresult.push_back(temp[0]);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(l[i]);\n\t\t}\n\t}\n\treturn result;",
        "grade-147": {
            "execution": 0
        },
        "22": "std::vector<long> temp;\n  std::vector<long> ret;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      temp.push_back(l[i]);\n    }\n  }\n  std::sort(temp.begin(), temp.end());\n  int j = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      ret.push_back(temp[j]);\n      j++;\n    } else {\n      ret.push_back(l[i]);\n    }\n  }\n  return ret;",
        "grade-22": {
            "execution": 1
        },
        "159": "std::vector<long> l_prime;\n  if (l.size() <= 1) {\n    return l;\n  }\n  long i = 0;\n  while (i < l.size()) {\n    if (i % 3 == 0) {\n      std::vector<long> i_third = {l[i], l[i + 1], l[i + 2]};\n      std::sort(i_third.begin(), i_third.end());\n      l_prime.push_back(i_third[0]);\n      l_prime.push_back(i_third[1]);\n      l_prime.push_back(i_third[2]);\n      i += 3;\n    } else {\n      l_prime.push_back(l[i]);\n      i += 1;\n    }\n  }\n  return l_prime;",
        "grade-159": {
            "execution": 0
        },
        "114": "std::vector<long> res;\n    int n = l.size();\n    int a[n];\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            a[count] = l[i];\n            count++;\n        }\n    }\n    std::sort(a, a + count);\n    int b[n];\n    count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i] = a[count];\n            count++;\n        } else {\n            b[i] = l[i];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        res.push_back(b[i]);\n    }\n    return res;",
        "grade-114": {
            "execution": 1
        },
        "8": "std::vector<long> v;\n    std::vector<long> v3;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            v3.push_back(l[i]);\n        } else {\n            v.push_back(l[i]);\n        }\n    }\n    std::sort(v3.begin(), v3.end());\n    for (int i = 0; i < v3.size(); i++) {\n        v.insert(v.begin() + i * 3, v3[i]);\n    }\n    return v;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> result(l.size());\n\n\tint start = 0;\n\t// iterate over all of the members of the list\n\tfor (auto num : l) {\n\t\t// check if the current index is a multiple of three\n\t\tif (start % 3 == 0) {\n\t\t\tstd::vector<long> sublist(l.begin() + start, l.begin() + start + 3);\n\t\t\t// sort the sublist\n\t\t\tstd::sort(sublist.begin(), sublist.end());\n\t\t\t// copy the values into the result array\n\t\t\tresult[start] = sublist[0];\n\t\t\tresult[start + 1] = sublist[1];\n\t\t\tresult[start + 2] = sublist[2];\n\t\t} else {\n\t\t\t// if the index is not a multiple of three, then just copy the number\n\t\t\tresult[start] = num;\n\t\t}\n\t\tstart++;\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> out;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tstd::vector<long> tmp = out;\n\t\t\tstd::sort(tmp.begin(), tmp.end());\n\t\t\tout = tmp;\n\t\t}\n\t\telse {\n\t\t\tout.push_back(l[i]);\n\t\t}\n\t}\n\treturn out;",
        "grade-23": {
            "execution": 0
        },
        "56": "// your code here\n  std::vector<long> ret;\n  std::vector<long> temp;\n  int j = 0;\n  for(int i = 0; i < l.size(); i++) {\n    if(i % 3 == 0) {\n      temp.push_back(l[i]);\n      j++;\n    }\n    else {\n      ret.push_back(l[i]);\n    }\n  }\n  std::sort(temp.begin(), temp.end());\n  for(int i = 2; i < l.size(); i+=3) {\n    ret.insert(ret.begin() + i, temp[j-1]);\n    j--;\n  }\n  return ret;",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> result(l.size());\n    int index = 0;\n    int sorted_index = 0;\n    std::vector<long> sorted;\n    for (auto i : l) {\n        if (index % 3 == 0) {\n            sorted.push_back(i);\n        } else {\n            result[index] = i;\n        }\n        index++;\n    }\n    std::sort(sorted.begin(), sorted.end());\n    index = 0;\n    for (auto i : l) {\n        if (index % 3 == 0) {\n            result[index] = sorted[sorted_index];\n            sorted_index++;\n        }\n        index++;\n    }\n    return result;",
        "grade-60": {
            "execution": 1
        },
        "135": "// 1. Get the index of the third element in the list\n  // 2. Create a new vector of the same size as l\n  // 3. Fill in the values of the new vector in the first two indicies\n  // 4. Sort the third set of elements and fill in the new vector\n  // 5. Return the new vector\n  std::vector<long> ret;\n  long third = l.size() / 3;\n  long part = third * 2;\n  std::sort(l.begin() + third, l.begin() + part);\n  for (long i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      ret.push_back(l[i]);\n    }\n  }\n  for (long i = 0; i < third; i++) {\n    ret.push_back(l[i + third]);\n  }\n  for (long i = part; i < l.size(); i++) {\n    ret.push_back(l[i]);\n  }\n  return ret;",
        "grade-135": {
            "execution": 0
        },
        "bleu-173": 0.41240613993035125,
        "bleu-28": 0.14593075722073764,
        "bleu-6": 0.5077658938557867,
        "bleu-71": 0.29823678910582746,
        "bleu-63": 0.19470249216502158,
        "bleu-58": 0.5257378594928507,
        "bleu-35": 0.18952533505888344,
        "bleu-199": 0.4269222899826349,
        "bleu-26": 0.47946655431732993,
        "bleu-183": 0.38756517486062414,
        "bleu-147": 0.41674284780803705,
        "bleu-22": 0.5114924024186313,
        "bleu-159": 0.35461173107983457,
        "bleu-114": 0.27912414053805984,
        "bleu-8": 0.5363809581862928,
        "bleu-7": 0.14992139569893065,
        "bleu-23": 0.400728415835954,
        "bleu-56": 0.452539923627629,
        "bleu-60": 0.2524140622140415,
        "bleu-135": 0.31267847802292265,
        "codebleu-173": 0.6804179497532957,
        "codebleu-28": 0.31426718217807637,
        "codebleu-6": 0.7378278969435319,
        "codebleu-71": 0.6783353603005233,
        "codebleu-63": 0.309460766844164,
        "codebleu-58": 0.7405453666591628,
        "codebleu-35": 0.39992979212216856,
        "codebleu-199": 0.7316198978180493,
        "codebleu-26": 0.7033307716445527,
        "codebleu-183": 0.7039850805040723,
        "codebleu-147": 0.6571579260159947,
        "codebleu-22": 0.7530107015332209,
        "codebleu-159": 0.6700674535685951,
        "codebleu-114": 0.6126429192799604,
        "codebleu-8": 0.7404656869770583,
        "codebleu-7": 0.6095628306689381,
        "codebleu-23": 0.5169204529849819,
        "codebleu-56": 0.7381008154216028,
        "codebleu-60": 0.6405903030159107,
        "codebleu-135": 0.73229251022869,
        "chrf-173": 0.48136963761331436,
        "chrf-28": 0.24543499308297892,
        "chrf-6": 0.4609497285270243,
        "chrf-71": 0.4376656557061559,
        "chrf-63": 0.2595567042132005,
        "chrf-58": 0.582846024692729,
        "chrf-35": 0.2238672024030803,
        "chrf-199": 0.5241087052407322,
        "chrf-26": 0.4788478266903888,
        "chrf-183": 0.49967625045395553,
        "chrf-147": 0.4701458575320304,
        "chrf-22": 0.5879124094545394,
        "chrf-159": 0.5144700211587722,
        "chrf-114": 0.3738634672913701,
        "chrf-8": 0.54423088332883,
        "chrf-7": 0.2719245214261294,
        "chrf-23": 0.47000501743870343,
        "chrf-56": 0.5353412347353924,
        "chrf-60": 0.36460822787248093,
        "chrf-135": 0.494216868571948,
        "rougel-173": 0.5255474452554744,
        "rougel-28": 0.4242424242424242,
        "rougel-6": 0.6412213740458016,
        "rougel-71": 0.47058823529411764,
        "rougel-63": 0.454054054054054,
        "rougel-58": 0.556390977443609,
        "rougel-35": 0.4504504504504504,
        "rougel-199": 0.5602836879432623,
        "rougel-26": 0.6692015209125476,
        "rougel-183": 0.48813559322033906,
        "rougel-147": 0.4916666666666667,
        "rougel-22": 0.7232472324723248,
        "rougel-159": 0.4593639575971732,
        "rougel-114": 0.493421052631579,
        "rougel-8": 0.5823754789272031,
        "rougel-7": 0.3207547169811321,
        "rougel-23": 0.5462962962962963,
        "rougel-56": 0.5357142857142857,
        "rougel-60": 0.43773584905660373,
        "rougel-135": 0.44126074498567336,
        "meteor-173": 0.5760336627116753,
        "meteor-28": 0.30845771144278605,
        "meteor-6": 0.5706001939771768,
        "meteor-71": 0.5576837362484213,
        "meteor-63": 0.3461550402036571,
        "meteor-58": 0.6024332810047096,
        "meteor-35": 0.291951294168589,
        "meteor-199": 0.547217595157143,
        "meteor-26": 0.5227858671698081,
        "meteor-183": 0.6077802887666736,
        "meteor-147": 0.5514996834441279,
        "meteor-22": 0.7724370610282322,
        "meteor-159": 0.5567170584207376,
        "meteor-114": 0.4658943018930709,
        "meteor-8": 0.5710498395201061,
        "meteor-7": 0.3750483028557895,
        "meteor-23": 0.45902619630759545,
        "meteor-56": 0.5652591066809634,
        "meteor-60": 0.42108405705012736,
        "meteor-135": 0.5527315977410057,
        "ruby-173": 0.33108108108108103,
        "ruby-28": 0.2777777777777778,
        "ruby-6": 0.4191176470588235,
        "ruby-71": 0.2760736196319018,
        "ruby-63": 0.3015873015873016,
        "ruby-58": 0.27142857142857146,
        "ruby-35": 0.31746031746031744,
        "ruby-199": 0.3782051282051282,
        "ruby-26": 0.4817518248175182,
        "ruby-183": 0.33136094674556216,
        "ruby-147": 0.32539682539682535,
        "ruby-22": 0.5931034482758621,
        "ruby-159": 0.26751592356687903,
        "ruby-114": 0.3202247191011236,
        "ruby-8": 0.3555555555555555,
        "ruby-7": 0.21354166666666663,
        "ruby-23": 0.38095238095238093,
        "ruby-56": 0.3246753246753247,
        "ruby-60": 0.2302158273381295,
        "ruby-135": 0.2869955156950673,
        "codebertscore_f1-173": 0.81973797082901,
        "codebertscore_f3-173": 0.8397842645645142,
        "codebertscore_f1-28": 0.778349757194519,
        "codebertscore_f3-28": 0.7603934407234192,
        "codebertscore_f1-6": 0.8397754430770874,
        "codebertscore_f3-6": 0.8502695560455322,
        "codebertscore_f1-71": 0.828493058681488,
        "codebertscore_f3-71": 0.8358033895492554,
        "codebertscore_f1-63": 0.815418004989624,
        "codebertscore_f3-63": 0.7964971661567688,
        "codebertscore_f1-58": 0.8629394769668579,
        "codebertscore_f3-58": 0.8622309565544128,
        "codebertscore_f1-35": 0.7977983951568604,
        "codebertscore_f3-35": 0.7843384146690369,
        "codebertscore_f1-199": 0.832097589969635,
        "codebertscore_f3-199": 0.8430382013320923,
        "codebertscore_f1-26": 0.8467769622802734,
        "codebertscore_f3-26": 0.8483248949050903,
        "codebertscore_f1-183": 0.8230524659156799,
        "codebertscore_f3-183": 0.8386741876602173,
        "codebertscore_f1-147": 0.8595246076583862,
        "codebertscore_f3-147": 0.867816150188446,
        "codebertscore_f1-22": 0.8924671411514282,
        "codebertscore_f3-22": 0.8949196338653564,
        "codebertscore_f1-159": 0.83231121301651,
        "codebertscore_f3-159": 0.8417077660560608,
        "codebertscore_f1-114": 0.8130753636360168,
        "codebertscore_f3-114": 0.8227030038833618,
        "codebertscore_f1-8": 0.8549314141273499,
        "codebertscore_f3-8": 0.8693820238113403,
        "codebertscore_f1-7": 0.7320716381072998,
        "codebertscore_f3-7": 0.7619439363479614,
        "codebertscore_f1-23": 0.8764688372612,
        "codebertscore_f3-23": 0.8761995434761047,
        "codebertscore_f1-56": 0.8387695550918579,
        "codebertscore_f3-56": 0.8617543578147888,
        "codebertscore_f1-60": 0.806430459022522,
        "codebertscore_f3-60": 0.8223516941070557,
        "codebertscore_f1-135": 0.796374499797821,
        "codebertscore_f3-135": 0.8443552255630493,
        "codebertscore_s_f1-173": 0.8225509524345398,
        "codebertscore_s_f3-173": 0.8467724919319153,
        "codebertscore_s_f1-28": 0.7774311304092407,
        "codebertscore_s_f3-28": 0.7585369944572449,
        "codebertscore_s_f1-6": 0.846656858921051,
        "codebertscore_s_f3-6": 0.8578553199768066,
        "codebertscore_s_f1-71": 0.8281600475311279,
        "codebertscore_s_f3-71": 0.838586151599884,
        "codebertscore_s_f1-63": 0.8225462436676025,
        "codebertscore_s_f3-63": 0.7998462319374084,
        "codebertscore_s_f1-58": 0.8678526282310486,
        "codebertscore_s_f3-58": 0.8691046237945557,
        "codebertscore_s_f1-35": 0.7950343489646912,
        "codebertscore_s_f3-35": 0.7835120558738708,
        "codebertscore_s_f1-199": 0.8390836119651794,
        "codebertscore_s_f3-199": 0.8531407117843628,
        "codebertscore_s_f1-26": 0.8517037034034729,
        "codebertscore_s_f3-26": 0.8563836216926575,
        "codebertscore_s_f1-183": 0.8274080157279968,
        "codebertscore_s_f3-183": 0.8462207913398743,
        "codebertscore_s_f1-147": 0.8597703576087952,
        "codebertscore_s_f3-147": 0.8696005344390869,
        "codebertscore_s_f1-22": 0.8937895894050598,
        "codebertscore_s_f3-22": 0.8981081247329712,
        "codebertscore_s_f1-159": 0.8313388228416443,
        "codebertscore_s_f3-159": 0.8448669910430908,
        "codebertscore_s_f1-114": 0.8254650235176086,
        "codebertscore_s_f3-114": 0.836402952671051,
        "codebertscore_s_f1-8": 0.8630934357643127,
        "codebertscore_s_f3-8": 0.8802035450935364,
        "codebertscore_s_f1-7": 0.733428418636322,
        "codebertscore_s_f3-7": 0.7664149403572083,
        "codebertscore_s_f1-23": 0.8786498308181763,
        "codebertscore_s_f3-23": 0.8808115720748901,
        "codebertscore_s_f1-56": 0.8427162170410156,
        "codebertscore_s_f3-56": 0.8681524991989136,
        "codebertscore_s_f1-60": 0.8136479258537292,
        "codebertscore_s_f3-60": 0.83258056640625,
        "codebertscore_s_f1-135": 0.8025402426719666,
        "codebertscore_s_f3-135": 0.8532653450965881,
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-199": 3,
        "raw_gpt35_nsnr-199": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-147": 2,
        "raw_gpt35_nsnr-147": "2",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-159": 3,
        "raw_gpt35_nsnr-159": "3",
        "gpt35_nsnr-114": 3,
        "raw_gpt35_nsnr-114": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nsnr-135": 3,
        "raw_gpt35_nsnr-135": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-159": 3,
        "raw_gpt35_nswr-159": "3",
        "gpt35_nswr-114": 3,
        "raw_gpt35_nswr-114": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-135": 3,
        "raw_gpt35_nswr-135": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns True if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and False otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n// check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n// check_if_last_char_is_a_letter(\"\") \u279e False\nbool check_if_last_char_is_a_letter(std::string txt) {\n",
        "snippet": [
            "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n"
        ],
        "simplified": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
        "task_id": "134",
        "164": "std::string no_spaces;\n\tfor (int i = 0; i < txt.length(); i++) {\n\t\tif (txt[i] != ' ') {\n\t\t\tno_spaces += txt[i];\n\t\t}\n\t}\n\tint no_spaces_len = no_spaces.length();\n\tif (no_spaces_len == 0) {\n\t\treturn false;\n\t}\n\tchar last_char = no_spaces[no_spaces_len - 1];\n\tif (isalpha(last_char)) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-164": {
            "execution": 0
        },
        "28": "if(txt.empty())\n        return false;\n    int counter = 0;\n    int i = txt.length()-1;\n    while(txt[i]==' '){\n        i--;\n        counter++;\n    }\n    char last_character = txt[i];\n    if(isalpha(last_character)==false)\n        return false;\n    if(counter==0)\n        return false;\n    else\n        return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "return true;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::stringstream ss(txt);\n\t\tstd::string s;\n\t\twhile(ss>>s){\n\t\t\tif(s.back()<65)\n\t\t\treturn false;\n\t\t\telse\n\t\t\tif(s.back()>90)\n\t\t\treturn false;\n\t\t\telse\n\t\t\tif(s.back()>122)\n\t\t\treturn false;\n\t\t\telse\n\t\t\tif(s.back()<97)\n\t\t\treturn false;\n\t\t\telse\n\t\t\treturn true;\n\t\t}",
        "grade-190": {
            "execution": 0
        },
        "71": "for(int i=0;i<txt.length();i++){\n        if(isalpha(txt[i])){\n            return false;\n        }\n    }\n    return true;",
        "grade-71": {
            "execution": 0
        },
        "63": "std::reverse(txt.begin(), txt.end());\n\tif (std::isalpha(txt[0]) && !std::isalnum(txt[1])) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-63": {
            "execution": 1
        },
        "58": "return std::regex_match(txt, std::regex(\"([a-zA-Z]$)\"));",
        "grade-58": {
            "execution": 0
        },
        "35": "if(txt.empty())\n\t\treturn false;\n\tif(isalpha(txt[txt.size()-1]) == false)\n\t\treturn false;\n\tif(txt[txt.size()-1] == ' ')\n\t\treturn false;\n\tfor(int i = 0; i < txt.size()-1; i++)\n\t{\n\t\tif(txt[i] == ' ' && isalpha(txt[i+1]))\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-35": {
            "execution": 0
        },
        "189": "if(!txt.empty()){\n\t\tint n = txt.length();\n\t\tif(int(txt[n-1]) > 64 && int(txt[n-1]) < 91){\n\t\t\treturn true;\n\t\t}\n\t\telse if(int(txt[n-1]) > 96 && int(txt[n-1]) < 123){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse{\n\t\treturn false;\n\t}",
        "grade-189": {
            "execution": 0
        },
        "26": "if(txt.length()==0){\n        return false;\n    }\n    else{\n    if(isalpha(txt[txt.length()-1]) && isspace(txt[txt.length()-2])){\n        return true;\n    }\n    else{\n        return false;\n    }\n    }",
        "grade-26": {
            "execution": 0
        },
        "174": "int l = txt.length();\n\tif (l == 0) return false;\n\tfor (int i = l - 1; i >= 0; i--) {\n\t\tif (txt[i] == ' ') {\n\t\t\treturn false;\n\t\t}\n\t\tif (txt[i] >= 'a' && txt[i] <= 'z') {\n\t\t\treturn true;\n\t\t}\n\t\tif (txt[i] >= 'A' && txt[i] <= 'Z') {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-174": {
            "execution": 0
        },
        "140": "if(txt.size()==0){\n\t\treturn false;\n\t}\n\tchar lastChar = txt[txt.size()-1];\n\tif(lastChar == ' '){\n\t\treturn false;\n\t}\n\tif((lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')){\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-140": {
            "execution": 0
        },
        "22": "// assert(check_if_last_char_is_a_letter(\"apple pie\") == false);\n\t// assert(check_if_last_char_is_a_letter(\"apple pi e\") == true);\n\t// assert(check_if_last_char_is_a_letter(\"apple pi e \") == false);\n\t// assert(check_if_last_char_is_a_letter(\"\") == false);\n\tchar last = txt[txt.length() - 1];\n\tif (isalpha(last) && !isspace(last)) return true;\n\treturn false;",
        "grade-22": {
            "execution": 0
        },
        "152": "if(txt.length()==0)\n        return false;\n    char c=txt[txt.length()-1];\n    if(isalpha(c))\n    {\n        if(txt.length()!=1)\n        {\n            c=txt[txt.length()-2];\n            if(isspace(c))\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;",
        "grade-152": {
            "execution": 1
        },
        "109": "std::string s;\n\tstd::stringstream ss(txt);\n\tstd::string lastWord;\n\twhile (ss >> s)\n\t\tlastWord = s;\n\tif (isalpha(lastWord[lastWord.length() - 1]))\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-109": {
            "execution": 0
        },
        "8": "int len = txt.length();\n  char last = txt[len-1];\n  if(last >= 'a' && last <= 'z') return true;\n  if(last >= 'A' && last <= 'Z') return true;\n  return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "int len = txt.length();\n\tstd::cout << txt[len - 1] << \" \" << txt[len - 2] << std::endl;\n\tif (txt[len - 1] >= 'a' && txt[len - 1] <= 'z' || txt[len - 1] >= 'A' && txt[len - 1] <= 'Z') {\n\t\tif (txt[len - 2] == ' ') {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-7": {
            "execution": 0
        },
        "23": "if(txt==\"\") return false;\n\tfor(int i=txt.length()-1;i>=0;i--){\n\t\tif(txt[i]!=' ') return isalpha(txt[i]);\n\t}",
        "grade-23": {
            "execution": 0
        },
        "56": "",
        "grade-56": {
            "execution": 0
        },
        "60": "bool last_char_is_alpha = isalpha(txt.back());\n\tbool last_char_is_space = isspace(txt.back());\n\tbool at_least_1_alpha = 0;\n\tfor (auto& t : txt) {\n\t\tif (isalpha(t)) {\n\t\t\tat_least_1_alpha = 1;\n\t\t}\n\t}\n\tif (last_char_is_alpha && !last_char_is_space && at_least_1_alpha) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-60": {
            "execution": 0
        },
        "bleu-164": 0.19992949173413688,
        "bleu-28": 0.26136823386561486,
        "bleu-6": 2.3195228302435706e-16,
        "bleu-190": 0.15845530021580354,
        "bleu-71": 0.033018733781594124,
        "bleu-63": 0.04634907964335025,
        "bleu-58": 0.0028906297504728445,
        "bleu-35": 0.2737692816257367,
        "bleu-189": 0.13287237087191928,
        "bleu-26": 0.24596216708314858,
        "bleu-174": 0.19971872361177284,
        "bleu-140": 0.239808077945728,
        "bleu-22": 0.21187536209649782,
        "bleu-152": 0.4762259631343879,
        "bleu-109": 0.08897172265563974,
        "bleu-8": 0.12730490153706356,
        "bleu-7": 0.1303746507956921,
        "bleu-23": 0.09417232420998319,
        "bleu-56": 0.0,
        "bleu-60": 0.06292944439585935,
        "codebleu-164": 0.4285552110767,
        "codebleu-28": 0.4433366299084904,
        "codebleu-6": 0.013245033112599246,
        "codebleu-190": 0.45031125525041943,
        "codebleu-71": 0.17590621010065527,
        "codebleu-63": 0.2218367766713889,
        "codebleu-58": 0.048626270573600874,
        "codebleu-35": 0.5793031896359072,
        "codebleu-189": 0.4630823576788566,
        "codebleu-26": 0.3560837820414766,
        "codebleu-174": 0.44054259632002796,
        "codebleu-140": 0.3601253542861868,
        "codebleu-22": 0.3808550447143459,
        "codebleu-152": 0.5851505653666802,
        "codebleu-109": 0.2617541803068113,
        "codebleu-8": 0.23648358842035866,
        "codebleu-7": 0.3591827555919448,
        "codebleu-23": 0.2496047679273163,
        "codebleu-56": 0.0,
        "codebleu-60": 0.3175425078411517,
        "chrf-164": 0.32055408579144673,
        "chrf-28": 0.3867226902215528,
        "chrf-6": 0.04580611366284208,
        "chrf-190": 0.3153360276165882,
        "chrf-71": 0.1850919855443497,
        "chrf-63": 0.1830790276442988,
        "chrf-58": 0.057076604508818116,
        "chrf-35": 0.37730433382105133,
        "chrf-189": 0.31556785632376716,
        "chrf-26": 0.3995217186734157,
        "chrf-174": 0.37260560405533866,
        "chrf-140": 0.33052135312600733,
        "chrf-22": 0.29534336301442715,
        "chrf-152": 0.5944831981751073,
        "chrf-109": 0.21413328948442792,
        "chrf-8": 0.2818856741247581,
        "chrf-7": 0.2882078103776526,
        "chrf-23": 0.21382896878197774,
        "chrf-56": 0.0,
        "chrf-60": 0.19787514045864418,
        "rougel-164": 0.36097560975609755,
        "rougel-28": 0.4742268041237113,
        "rougel-6": 0.052631578947368425,
        "rougel-190": 0.4020618556701031,
        "rougel-71": 0.33333333333333337,
        "rougel-63": 0.3067484662576688,
        "rougel-58": 0.15714285714285714,
        "rougel-35": 0.5116279069767442,
        "rougel-189": 0.38461538461538464,
        "rougel-26": 0.5,
        "rougel-174": 0.3911111111111111,
        "rougel-140": 0.4975609756097561,
        "rougel-22": 0.4210526315789474,
        "rougel-152": 0.673469387755102,
        "rougel-109": 0.3058823529411765,
        "rougel-8": 0.39306358381502887,
        "rougel-7": 0.3305084745762712,
        "rougel-23": 0.38554216867469876,
        "rougel-56": 0,
        "rougel-60": 0.32432432432432434,
        "meteor-164": 0.3743824336688015,
        "meteor-28": 0.3740398439104539,
        "meteor-6": 0.029385673098247952,
        "meteor-190": 0.3441976663585951,
        "meteor-71": 0.2096950826958456,
        "meteor-63": 0.20744159875722887,
        "meteor-58": 0.0767273731954965,
        "meteor-35": 0.48895960922900433,
        "meteor-189": 0.3548775816478063,
        "meteor-26": 0.3404906970649896,
        "meteor-174": 0.4118783192539625,
        "meteor-140": 0.3743824336688015,
        "meteor-22": 0.39752141452646966,
        "meteor-152": 0.5595265805088606,
        "meteor-109": 0.20657239131418317,
        "meteor-8": 0.27855848634931246,
        "meteor-7": 0.271644128113879,
        "meteor-23": 0.2460500041201643,
        "meteor-56": 0.0,
        "meteor-60": 0.22526502795899347,
        "ruby-164": 0.18918918918918914,
        "ruby-28": 0.32432432432432434,
        "ruby-6": 0.027027027027026973,
        "ruby-190": 0.2792792792792793,
        "ruby-71": 0.2072072072072072,
        "ruby-63": 0.18018018018018023,
        "ruby-58": 0.09909909909909909,
        "ruby-35": 0.33333333333333337,
        "ruby-189": 0.2432432432432432,
        "ruby-26": 0.33333333333333337,
        "ruby-174": 0.2192982456140351,
        "ruby-140": 0.3513513513513513,
        "ruby-22": 0.2702702702702703,
        "ruby-152": 0.5315315315315315,
        "ruby-109": 0.18018018018018023,
        "ruby-8": 0.2702702702702703,
        "ruby-7": 0.16000000000000003,
        "ruby-23": 0.2702702702702703,
        "ruby-56": 0.0,
        "ruby-60": 0.21621621621621623,
        "codebertscore_f1-164": 0.7571120262145996,
        "codebertscore_f3-164": 0.7722877860069275,
        "codebertscore_f1-28": 0.7799578309059143,
        "codebertscore_f3-28": 0.7762570381164551,
        "codebertscore_f1-6": 0.5838360786437988,
        "codebertscore_f3-6": 0.5085553526878357,
        "codebertscore_f1-190": 0.7664092779159546,
        "codebertscore_f3-190": 0.7547048926353455,
        "codebertscore_f1-71": 0.7504700422286987,
        "codebertscore_f3-71": 0.7239358425140381,
        "codebertscore_f1-63": 0.746310830116272,
        "codebertscore_f3-63": 0.7368058562278748,
        "codebertscore_f1-58": 0.6115043759346008,
        "codebertscore_f3-58": 0.6140656471252441,
        "codebertscore_f1-35": 0.8086302280426025,
        "codebertscore_f3-35": 0.7849980592727661,
        "codebertscore_f1-189": 0.7990918159484863,
        "codebertscore_f3-189": 0.7886411547660828,
        "codebertscore_f1-26": 0.8199940919876099,
        "codebertscore_f3-26": 0.7856179475784302,
        "codebertscore_f1-174": 0.7913265824317932,
        "codebertscore_f3-174": 0.7865435481071472,
        "codebertscore_f1-140": 0.8232430815696716,
        "codebertscore_f3-140": 0.8204829692840576,
        "codebertscore_f1-22": 0.7436621189117432,
        "codebertscore_f3-22": 0.7764274477958679,
        "codebertscore_f1-152": 0.819339394569397,
        "codebertscore_f3-152": 0.7949302196502686,
        "codebertscore_f1-109": 0.7340835332870483,
        "codebertscore_f3-109": 0.7350274920463562,
        "codebertscore_f1-8": 0.7865248322486877,
        "codebertscore_f3-8": 0.7750016450881958,
        "codebertscore_f1-7": 0.7842574119567871,
        "codebertscore_f3-7": 0.7835306525230408,
        "codebertscore_f1-23": 0.767589271068573,
        "codebertscore_f3-23": 0.7473869323730469,
        "codebertscore_f1-56": 0.0,
        "codebertscore_f3-56": 0.0,
        "codebertscore_f1-60": 0.7252645492553711,
        "codebertscore_f3-60": 0.7536490559577942,
        "codebertscore_s_f1-164": 0.8775784373283386,
        "codebertscore_s_f3-164": 0.8819039463996887,
        "codebertscore_s_f1-28": 0.8983216285705566,
        "codebertscore_s_f3-28": 0.8856269121170044,
        "codebertscore_s_f1-6": 0.8774843811988831,
        "codebertscore_s_f3-6": 0.8118414282798767,
        "codebertscore_s_f1-190": 0.8933950066566467,
        "codebertscore_s_f3-190": 0.8750169277191162,
        "codebertscore_s_f1-71": 0.9008509516716003,
        "codebertscore_s_f3-71": 0.8649637699127197,
        "codebertscore_s_f1-63": 0.8958809971809387,
        "codebertscore_s_f3-63": 0.863325297832489,
        "codebertscore_s_f1-58": 0.8599130511283875,
        "codebertscore_s_f3-58": 0.8186997175216675,
        "codebertscore_s_f1-35": 0.9056512713432312,
        "codebertscore_s_f3-35": 0.8873196840286255,
        "codebertscore_s_f1-189": 0.9033457040786743,
        "codebertscore_s_f3-189": 0.8928493857383728,
        "codebertscore_s_f1-26": 0.9201858043670654,
        "codebertscore_s_f3-26": 0.8918778896331787,
        "codebertscore_s_f1-174": 0.8957169055938721,
        "codebertscore_s_f3-174": 0.8857871890068054,
        "codebertscore_s_f1-140": 0.9193893074989319,
        "codebertscore_s_f3-140": 0.9057050943374634,
        "codebertscore_s_f1-22": 0.8942680954933167,
        "codebertscore_s_f3-22": 0.8778500556945801,
        "codebertscore_s_f1-152": 0.9169079661369324,
        "codebertscore_s_f3-152": 0.8969331383705139,
        "codebertscore_s_f1-109": 0.8915866017341614,
        "codebertscore_s_f3-109": 0.8666181564331055,
        "codebertscore_s_f1-8": 0.9057061076164246,
        "codebertscore_s_f3-8": 0.8838826417922974,
        "codebertscore_s_f1-7": 0.8903818726539612,
        "codebertscore_s_f3-7": 0.8857401013374329,
        "codebertscore_s_f1-23": 0.900733232498169,
        "codebertscore_s_f3-23": 0.8703845739364624,
        "codebertscore_s_f1-56": 0,
        "codebertscore_s_f3-56": 0,
        "codebertscore_s_f1-60": 0.8678391575813293,
        "codebertscore_s_f3-60": 0.8680613040924072,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "Score: 0",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-71": 2,
        "raw_gpt35_nsnr-71": "2",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-56": 0,
        "raw_gpt35_nsnr-56": "3 - The code snippet correctly checks if the last character of the given string is an alphabetical character and not part of a word. However, it does not handle the case where the input string has trailing spaces. The function returns True for \"apple pi e \" instead of False.",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 2,
        "raw_gpt35_nswr-190": "2",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string, std::string substring) {\n",
        "snippet": [
            "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n"
        ],
        "simplified": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "task_id": "18",
        "169": "int count = 0;\n    int sublen = substring.length();\n    int strlen = string.length();\n    if(sublen==0 || strlen==0) return 0;\n    for(int i=0;i<strlen;i++){\n        if(string[i]==substring[0]){\n            if(sublen==1) count++;\n            else{\n                for(int j=1;j<sublen;j++){\n                    if(string[i+j]==substring[j]){\n                        if(j==sublen-1) count++;\n                    }\n                    else{\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return count;",
        "grade-169": {
            "execution": 1
        },
        "28": "int count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
        "grade-28": {
            "execution": 0
        },
        "6": "long i,j,flag=0,count=0;\n    //cout<<\"\\nThe main string is: \"<<string;\n    //cout<<\"\\nThe substring to be searched is: \"<<substring;\n    //cout<<\"\\nThe length of the string is: \"<<strlen(string);\n    //cout<<\"\\nThe length of the substring is: \"<<strlen(substring);\n    for(i=0;i<strlen(string);i++)\n    {\n        if(string[i]==substring[0])\n        {\n            flag=1;\n            for(j=1;j<strlen(substring);j++)\n            {\n                if(string[i+j]!=substring[j])\n                {\n                    flag=0;\n                    break;\n                }\n            }\n            if(flag==1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-6": {
            "execution": 0
        },
        "70": "long  result = 0;\n    int pos = 0;\n    while(pos!=-1)\n    {\n        pos = string.find(substring,pos);\n        if(pos!=-1)\n        {\n            result++;\n            pos++;\n        }\n    }\n    return result;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Implement the function here\n  return std::count(string.begin(), string.end(), substring);",
        "grade-62": {
            "execution": 0
        },
        "57": "// your code here\n    long count=0;\n    for(int i=0;i<string.length();++i)\n    {\n        if(string[i]==substring[0])\n        {\n            if(string.substr(i,substring.length())==substring)\n            {\n                ++count;\n            }\n        }\n    }\n    return count;",
        "grade-57": {
            "execution": 1
        },
        "35": "int cnt = 0;\n    for(int i = 0; i < string.size(); ++i) {\n        if(string.substr(i, substring.size()) == substring)\n            cnt++;\n    }\n    return cnt;",
        "grade-35": {
            "execution": 1
        },
        "26": "// Your code goes here\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == substring[0]) {\n            int j = 0;\n            int m = i;\n            for(int k = 0; k < substring.length(); k++) {\n                if(string[m] == substring[j]) {\n                    m++;\n                    j++;\n                }\n                else {\n                    break;\n                }\n            }\n            if(j == substring.length()) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-26": {
            "execution": 1
        },
        "183": "long result = 0;\n    for (int i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring)\n            result++;\n    }\n    return result;",
        "grade-183": {
            "execution": 1
        },
        "144": "long count = 0;\n\tlong pos = 0;\n\tlong subLength = substring.length();\n\twhile (string.find(substring, pos) != std::string::npos) {\n\t\tpos = string.find(substring, pos) + subLength;\n\t\tcount++;\n\t}\n\treturn count;",
        "grade-144": {
            "execution": 0
        },
        "22": "long count = 0;\n  long size_substring = substring.size();\n  long size_string = string.size();\n  long j;\n  for (long i = 0; i < size_string; i++) {\n    if (string[i] == substring[0]) {\n      j = 0;\n      while (j < size_substring && i + j < size_string && string[i + j] == substring[j]) {\n        j++;\n      }\n      if (j == size_substring) {\n        count++;\n      }\n    }\n  }\n  return count;",
        "grade-22": {
            "execution": 1
        },
        "156": "long count=0;\n    long n=substring.length();\n    for(int i=0;i<string.length();i++){\n        if(string.substr(i,n)==substring){\n            count++;\n        }\n    }\n    return count;",
        "grade-156": {
            "execution": 1
        },
        "112": "long cnt = 0;\n    for (int i = 0; i < string.size(); ++i) {\n        if (string.substr(i, substring.size()) == substring)\n            ++cnt;\n    }\n    return cnt;",
        "grade-112": {
            "execution": 1
        },
        "8": "unsigned long long n = string.length();\n    unsigned long long m = substring.length();\n    unsigned long long i, j;\n    unsigned long long count = 0;\n    for (i = 0; i <= n - m; i++) {\n        for (j = 0; j < m; j++) {\n            if (string[i + j] != substring[j])\n                break;\n        }\n        if (j == m) {\n            count++;\n        }\n    }\n    return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Take the length of the two strings.\n    int string_len = string.length();\n    int substring_len = substring.length();\n    // Keep track of how many substring are there in the original string.\n    int count = 0;\n    // Loop over the original string.\n    for (int i = 0; i < string_len; i++) {\n        // Take a substring of the original string.\n        std::string str = string.substr(i, substring_len);\n        // Compare the original string with a substring from the original string.\n        if (str == substring) {\n            // Add 1 to the count if the current substring from the original string is the same as the input substring.\n            count++;\n        }\n    }\n    // Return the count variable.\n    return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "long res = 0;\n    for (int i = 0; i < string.size(); i++) {\n        for (int j = 0; j < substring.size(); j++) {\n            if (string[i] == substring[j]) {\n                int k = 1;\n                while (string[i + k] == substring[j + k] && i + k < string.size() && j + k < substring.size()) {\n                    k++;\n                }\n                if (k == substring.size()) {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "//if length of string is less than length of substring, just return 0\n    if(string.length() < substring.length())\n        return 0;\n    //else if length of string is equal to length of substring, just return 1 if they are same or 0 if they are not same\n    else if(string.length() == substring.length())\n        return (string == substring);\n    //else if length of string is greater than length of substring, then iterate the characters of string\n    else{\n        long count = 0;\n        std::string::iterator i, j;\n        for(i = string.begin(); i < string.end(); i++){\n            j = i;\n            std::string::iterator k = substring.begin();\n            while(*j == *k && k < substring.end()){\n                ++j;\n                ++k;\n            }\n            if(k == substring.end())\n                count++;\n        }\n        return count;\n    }",
        "grade-55": {
            "execution": 1
        },
        "59": "long times{0};\n    for(auto it{string.begin()}; it != string.end(); ++it) {\n        if(*it == substring[0]) {\n            auto temp{it};\n            for(auto jt{substring.begin()}; jt != substring.end(); ++jt) {\n                if(*temp == *jt) {\n                    temp++;\n                } else {\n                    break;\n                }\n            }\n            if(temp == it + substring.size()) {\n                times++;\n            }\n        }\n    }\n    return times;",
        "grade-59": {
            "execution": 1
        },
        "134": "size_t nPos = string.find(substring, 0); // fist occurrence\n    long count = 0;\n    while(nPos != std::string::npos)\n    {\n        count++;\n        nPos = string.find(substring, nPos+1);\n    }\n    return count;",
        "grade-134": {
            "execution": 1
        },
        "160": "return std::count(string.begin(), string.end(), substring[0])-1;",
        "grade-160": {
            "execution": 0
        },
        "bleu-169": 0.23488601119747923,
        "bleu-28": 0.1277663209963352,
        "bleu-6": 0.09399638006609859,
        "bleu-70": 0.06098213504339542,
        "bleu-62": 0.012269280310977787,
        "bleu-57": 0.4392464914858271,
        "bleu-35": 0.3356333716489083,
        "bleu-26": 0.253486121990648,
        "bleu-183": 0.37797003829565784,
        "bleu-144": 0.13050819017329776,
        "bleu-22": 0.14638430143169162,
        "bleu-156": 0.4030063803148059,
        "bleu-112": 0.33361746442817775,
        "bleu-8": 0.2263837756187891,
        "bleu-7": 0.18056227022134927,
        "bleu-23": 0.19347108370334823,
        "bleu-55": 0.14921882450345458,
        "bleu-59": 0.053190141093041134,
        "bleu-134": 0.04237740874249396,
        "bleu-160": 0.012187441671981214,
        "codebleu-169": 0.6699165867732628,
        "codebleu-28": 0.4083423487131206,
        "codebleu-6": 0.5506728061887554,
        "codebleu-70": 0.3652753210731245,
        "codebleu-62": 0.1976239285614544,
        "codebleu-57": 0.6186798544515567,
        "codebleu-35": 0.5200320033052154,
        "codebleu-26": 0.6648460944280419,
        "codebleu-183": 0.5335591015863187,
        "codebleu-144": 0.4673552690794338,
        "codebleu-22": 0.5787114682775549,
        "codebleu-156": 0.5743327887579235,
        "codebleu-112": 0.5183270671936875,
        "codebleu-8": 0.5767512430533588,
        "codebleu-7": 0.6089492887583219,
        "codebleu-23": 0.69427157859868,
        "codebleu-55": 0.7104880290901052,
        "codebleu-59": 0.5912451937296658,
        "codebleu-134": 0.38289384779007685,
        "codebleu-160": 0.19017462238397548,
        "chrf-169": 0.528579784062501,
        "chrf-28": 0.3262229350403117,
        "chrf-6": 0.36253338962134907,
        "chrf-70": 0.22712598627220376,
        "chrf-62": 0.21984762673151528,
        "chrf-57": 0.5856262240318445,
        "chrf-35": 0.4380838113820184,
        "chrf-26": 0.544124674363352,
        "chrf-183": 0.46818673382208237,
        "chrf-144": 0.3785977751345927,
        "chrf-22": 0.3598061244731875,
        "chrf-156": 0.5319112546519796,
        "chrf-112": 0.4398028476496502,
        "chrf-8": 0.4196752616427177,
        "chrf-7": 0.40800511960557306,
        "chrf-23": 0.4093333242462286,
        "chrf-55": 0.4154962962588666,
        "chrf-59": 0.3332412832900675,
        "chrf-134": 0.2771466601302595,
        "chrf-160": 0.19660462701106848,
        "rougel-169": 0.4339622641509434,
        "rougel-28": 0.3709677419354838,
        "rougel-6": 0.28679245283018867,
        "rougel-70": 0.3548387096774194,
        "rougel-62": 0.24242424242424243,
        "rougel-57": 0.5655172413793104,
        "rougel-35": 0.6504065040650406,
        "rougel-26": 0.43434343434343436,
        "rougel-183": 0.6504065040650406,
        "rougel-144": 0.3851851851851852,
        "rougel-22": 0.39344262295081966,
        "rougel-156": 0.6461538461538462,
        "rougel-112": 0.6341463414634146,
        "rougel-8": 0.40909090909090906,
        "rougel-7": 0.3565217391304348,
        "rougel-23": 0.3921568627450981,
        "rougel-55": 0.3157894736842105,
        "rougel-59": 0.37305699481865284,
        "rougel-134": 0.31818181818181823,
        "rougel-160": 0.26530612244897955,
        "meteor-169": 0.42861757153044,
        "meteor-28": 0.33454241071428575,
        "meteor-6": 0.3613820618901151,
        "meteor-70": 0.2285714285714286,
        "meteor-62": 0.10931069958847738,
        "meteor-57": 0.6115353051557573,
        "meteor-35": 0.5448016116317771,
        "meteor-26": 0.49263565891472866,
        "meteor-183": 0.541242311826447,
        "meteor-144": 0.3113279418659165,
        "meteor-22": 0.37852585577265513,
        "meteor-156": 0.47422096317280454,
        "meteor-112": 0.5347785865590258,
        "meteor-8": 0.37744535653226663,
        "meteor-7": 0.43872632694007013,
        "meteor-23": 0.42655454434586415,
        "meteor-55": 0.4156691712689723,
        "meteor-59": 0.4065113744868984,
        "meteor-134": 0.23715842269111032,
        "meteor-160": 0.11127596439169139,
        "ruby-169": 0.30714285714285716,
        "ruby-28": 0.25,
        "ruby-6": 0.1606217616580311,
        "ruby-70": 0.25,
        "ruby-62": 0.16666666666666663,
        "ruby-57": 0.3972602739726028,
        "ruby-35": 0.5138888888888888,
        "ruby-26": 0.2857142857142857,
        "ruby-183": 0.5277777777777778,
        "ruby-144": 0.19444444444444442,
        "ruby-22": 0.2702702702702703,
        "ruby-156": 0.5138888888888888,
        "ruby-112": 0.5,
        "ruby-8": 0.28846153846153844,
        "ruby-7": 0.21518987341772156,
        "ruby-23": 0.25757575757575757,
        "ruby-55": 0.20657276995305163,
        "ruby-59": 0.2479338842975206,
        "ruby-134": 0.20833333333333337,
        "ruby-160": 0.16666666666666663,
        "codebertscore_f1-169": 0.8152089715003967,
        "codebertscore_f3-169": 0.8438698053359985,
        "codebertscore_f1-28": 0.8115078806877136,
        "codebertscore_f3-28": 0.8160017728805542,
        "codebertscore_f1-6": 0.7364258766174316,
        "codebertscore_f3-6": 0.7703828811645508,
        "codebertscore_f1-70": 0.796979546546936,
        "codebertscore_f3-70": 0.8003315925598145,
        "codebertscore_f1-62": 0.7050279378890991,
        "codebertscore_f3-62": 0.6938369870185852,
        "codebertscore_f1-57": 0.8628550171852112,
        "codebertscore_f3-57": 0.8701026439666748,
        "codebertscore_f1-35": 0.8863146305084229,
        "codebertscore_f3-35": 0.8770477175712585,
        "codebertscore_f1-26": 0.7732048034667969,
        "codebertscore_f3-26": 0.7912145853042603,
        "codebertscore_f1-183": 0.9064742922782898,
        "codebertscore_f3-183": 0.892703652381897,
        "codebertscore_f1-144": 0.8164517879486084,
        "codebertscore_f3-144": 0.8191765546798706,
        "codebertscore_f1-22": 0.8107957243919373,
        "codebertscore_f3-22": 0.8221624493598938,
        "codebertscore_f1-156": 0.9068094491958618,
        "codebertscore_f3-156": 0.8990127444267273,
        "codebertscore_f1-112": 0.882818877696991,
        "codebertscore_f3-112": 0.8752896189689636,
        "codebertscore_f1-8": 0.7953183054924011,
        "codebertscore_f3-8": 0.8181049823760986,
        "codebertscore_f1-7": 0.7438487410545349,
        "codebertscore_f3-7": 0.802291989326477,
        "codebertscore_f1-23": 0.7938094735145569,
        "codebertscore_f3-23": 0.807233989238739,
        "codebertscore_f1-55": 0.7239285707473755,
        "codebertscore_f3-55": 0.765856146812439,
        "codebertscore_f1-59": 0.7292007803916931,
        "codebertscore_f3-59": 0.7482303380966187,
        "codebertscore_f1-134": 0.7749521732330322,
        "codebertscore_f3-134": 0.7843986749649048,
        "codebertscore_f1-160": 0.7404729127883911,
        "codebertscore_f3-160": 0.7203444242477417,
        "codebertscore_s_f1-169": 0.8261772394180298,
        "codebertscore_s_f3-169": 0.851452112197876,
        "codebertscore_s_f1-28": 0.8141379952430725,
        "codebertscore_s_f3-28": 0.8182767033576965,
        "codebertscore_s_f1-6": 0.7536070942878723,
        "codebertscore_s_f3-6": 0.7869115471839905,
        "codebertscore_s_f1-70": 0.8010316491127014,
        "codebertscore_s_f3-70": 0.8057308197021484,
        "codebertscore_s_f1-62": 0.6917382478713989,
        "codebertscore_s_f3-62": 0.683254599571228,
        "codebertscore_s_f1-57": 0.8714805841445923,
        "codebertscore_s_f3-57": 0.8791629076004028,
        "codebertscore_s_f1-35": 0.8851385116577148,
        "codebertscore_s_f3-35": 0.8756262063980103,
        "codebertscore_s_f1-26": 0.7884766459465027,
        "codebertscore_s_f3-26": 0.8063941597938538,
        "codebertscore_s_f1-183": 0.9040588736534119,
        "codebertscore_s_f3-183": 0.8906791806221008,
        "codebertscore_s_f1-144": 0.8134443163871765,
        "codebertscore_s_f3-144": 0.8154811859130859,
        "codebertscore_s_f1-22": 0.8120291829109192,
        "codebertscore_s_f3-22": 0.8229833841323853,
        "codebertscore_s_f1-156": 0.9056059718132019,
        "codebertscore_s_f3-156": 0.8983103632926941,
        "codebertscore_s_f1-112": 0.8813790082931519,
        "codebertscore_s_f3-112": 0.8744304180145264,
        "codebertscore_s_f1-8": 0.8040236234664917,
        "codebertscore_s_f3-8": 0.825541615486145,
        "codebertscore_s_f1-7": 0.7564355731010437,
        "codebertscore_s_f3-7": 0.8173437118530273,
        "codebertscore_s_f1-23": 0.8044073581695557,
        "codebertscore_s_f3-23": 0.817741870880127,
        "codebertscore_s_f1-55": 0.7379583120346069,
        "codebertscore_s_f3-55": 0.7804306745529175,
        "codebertscore_s_f1-59": 0.7419785261154175,
        "codebertscore_s_f3-59": 0.7591968774795532,
        "codebertscore_s_f1-134": 0.7780876755714417,
        "codebertscore_s_f3-134": 0.7881380915641785,
        "codebertscore_s_f1-160": 0.734279215335846,
        "codebertscore_s_f3-160": 0.7130008935928345,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-134": 4,
        "raw_gpt35_nsnr-134": "4",
        "gpt35_nsnr-160": 2,
        "raw_gpt35_nsnr-160": "2",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-112": 4,
        "raw_gpt35_nswr-112": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-134": 3,
        "raw_gpt35_nswr-134": "3",
        "gpt35_nswr-160": 2,
        "raw_gpt35_nswr-160": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return True else return False.\n// If the given array is empty then return True.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n",
        "snippet": [
            "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n"
        ],
        "simplified": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
        "task_id": "109",
        "165": "if(arr.size()<2) return true;\n    int right_shift_count=0;\n    for(auto it=arr.begin();it!=arr.end();it++){\n        if(*it<*(it+1)) return false;\n        if(*it>*(it+1)) right_shift_count++;\n    }\n    if(right_shift_count>1) return false;\n    return true;",
        "grade-165": {
            "execution": 0
        },
        "29": "// Write your code here\n\tif (arr.size() == 0)\n\t\treturn true;\n\tint n = arr.size();\n\tif (n == 1)\n\t\treturn true;\n\tfor (int i = 0; i < n; i++) {\n\t\tint n_shifts = 0;\n\t\twhile (arr[i] != i + 1) {\n\t\t\tint temp = arr[i];\n\t\t\tarr[i] = arr[temp - 1];\n\t\t\tarr[temp - 1] = temp;\n\t\t\tn_shifts++;\n\t\t}\n\t\tif (n_shifts > 2)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-29": {
            "execution": 0
        },
        "6": "// WRITE YOUR CODE HERE",
        "grade-6": {
            "execution": 0
        },
        "192": "if(arr.size()<=1) return true;\n    int index=-1;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]<arr[i-1]){\n            index=i;\n            break;\n        }\n    }\n    if(index==-1) return true;\n    for(int i=index;i<arr.size();i++){\n        if(arr[i]<arr[i-1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-192": {
            "execution": 0
        },
        "71": "int N = arr.size();\n    std::set<long> myset;\n    for(int i=0; i<N; i++)\n    {\n        myset.insert(arr[i]);\n    }\n    if(myset.size() == N)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-71": {
            "execution": 0
        },
        "63": "//your code here!",
        "grade-63": {
            "execution": 0
        },
        "58": "std::sort(arr.begin(), arr.end());\n  int count{0};\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] != i+1) {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  return true;",
        "grade-58": {
            "execution": 0
        },
        "36": "//Your code goes here\n    if(arr.size()==0) return true;\n    int min_=*std::min_element(arr.begin(),arr.end());\n    int pos=std::distance(arr.begin(),std::find(arr.begin(),arr.end(),min_));\n    if(pos==0) return true;\n    while(pos>0){\n        std::rotate(arr.begin(),arr.begin()+1,arr.end());\n        pos--;\n    }\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]>arr[i+1]) return false;\n    }\n    return true;",
        "grade-36": {
            "execution": 1
        },
        "191": "int left = 0;\n    int right = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != i + 1) {\n            left = i;\n            break;\n        }\n    }\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i] != i + 1) {\n            right = i;\n            break;\n        }\n    }\n    std::sort(arr.begin() + left, arr.begin() + right + 1);\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != i + 1)\n            return false;\n    }\n    return true;",
        "grade-191": {
            "execution": 0
        },
        "27": "// Write your code here\n    // To print results to the standard output you can use cout\n    // Example: cout << \"Hello world!\";\n    //Do not use cout in the function, while debugging code is disabled.\n    return 0;",
        "grade-27": {
            "execution": 0
        },
        "175": "//Write your code here\n  long temp=0;\n  bool flag = true;\n  if(arr.size()==0){\n    return true;\n  }\n  while(flag){\n    flag = false;\n    for(int i=1;i<arr.size();i++){\n      if(arr[i]<arr[i-1]){\n        flag = true;\n        temp = arr[i];\n        arr[i] = arr[i-1];\n        arr[i-1] = temp;\n      }\n    }\n  }\n  if(flag){\n    return false;\n  }\n  return true;",
        "grade-175": {
            "execution": 0
        },
        "140": "int n = arr.size();\n\tif (n == 0) return true;\n\tstd::vector<long> temp(n);\n\tlong x = arr[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tif (arr[i] <= x) return false;\n\t\ttemp[i] = x;\n\t\tx = arr[i];\n\t}\n\ttemp[0] = x;\n\tif (temp == arr) return true;\n\treturn false;",
        "grade-140": {
            "execution": 0
        },
        "23": "int n = arr.size();\n    if(n == 0) return true;\n    if(n == 1) return true;\n    if(n == 2) {\n        if(arr[0] > arr[1]) return true;\n        else return false;\n    }\n    int i = 0;\n    while(i < n-1) {\n        if(arr[i] <= arr[i+1]) i++;\n        else {\n            if(i == 0) {\n                for(int j = 1; j < n; j++)\n                    if(arr[j] < arr[0]) return false;\n                return true;\n            }\n            else {\n                for(int j = i+1; j < n; j++)\n                    if(arr[j] < arr[i]) return false;\n                return true;\n            }\n        }\n    }\n    return true;",
        "grade-23": {
            "execution": 0
        },
        "153": "std::vector<long> vec = arr;\n\tsort(vec.begin(), vec.end());\n\tint index = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == vec[index]) {\n\t\t\tindex++;\n\t\t}\n\t}\n\tif (index == arr.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-153": {
            "execution": 0
        },
        "109": "int n = arr.size();\n\tif (n <= 1)\n\t\treturn true;\n\tstd::sort(arr.begin(), arr.end());\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] != i + 1)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-109": {
            "execution": 0
        },
        "8": "// Write your code here\n\tif (arr.size() == 0)\n\t\treturn true;\n\tint index = arr.size() - 1;\n\tfor (int i = arr.size() - 1; i >= 0; i--) {\n\t\tif (arr[i] < arr[index])\n\t\t\tindex = i;\n\t}\n\tif (index == 0)\n\t\treturn true;\n\treturn false;",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = arr.size();\n    if(n==0) return true;\n    if(n==1) return true;\n    // Check if the elements are sorted and distinct or not.\n    for(int i=0;i<n-1;i++){\n        if(arr[i]>=arr[i+1]) return false;\n    }\n    // Now we will check if we can achieve sorted array or not.\n    int max = 0;\n    for(int i=0;i<n;i++){\n        if(arr[i]>max) max = arr[i];\n    }\n    if(arr[0]<max) return true;\n    else return false;",
        "grade-7": {
            "execution": 0
        },
        "24": "if (arr.size() == 0)\n\t\treturn true;\n\tif (arr.size() == 1)\n\t\treturn true;\n\tlong min = arr[0];\n\tlong max = arr[0];\n\tfor (long i = 1; i < arr.size(); i++) {\n\t\tif (arr[i] < min)\n\t\t\tmin = arr[i];\n\t\tif (arr[i] > max)\n\t\t\tmax = arr[i];\n\t}\n\tint count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == min)\n\t\t\tcount++;\n\t}\n\tif (count == arr.size())\n\t\treturn true;\n\tlong index = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == max) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == 0)\n\t\treturn false;\n\tfor (long i = index; i < arr.size(); i++) {\n\t\tif (arr[i] < max)\n\t\t\treturn false;\n\t}\n\tfor (long i = 0; i < index; i++) {\n\t\tif (arr[i] > min)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-24": {
            "execution": 0
        },
        "56": "if(arr.size()==0) return true;\n    long min=arr[0];\n    for(long i=1;i<arr.size();i++){\n        if(arr[i]<min) return false;\n        if(arr[i]<arr[i-1]) min=arr[i];\n    }\n    return true;",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> arr1=arr;\n    sort(arr1.begin(),arr1.end());\n    std::rotate(arr.begin(),arr.begin()+1,arr.end());\n    if(arr==arr1)\n        return true;\n    else\n        return false;",
        "grade-60": {
            "execution": 0
        },
        "bleu-165": 0.23592049515888325,
        "bleu-29": 0.38102333754537154,
        "bleu-6": 0.0,
        "bleu-192": 0.4868906284121195,
        "bleu-71": 0.2803318951105121,
        "bleu-63": 0.0,
        "bleu-58": 0.3246360278923268,
        "bleu-36": 0.2842180681277551,
        "bleu-191": 0.28050847659363776,
        "bleu-27": 0.008577354496968,
        "bleu-175": 0.4317671325764024,
        "bleu-140": 0.40222036085218,
        "bleu-23": 0.2663411591261875,
        "bleu-153": 0.3646489361441931,
        "bleu-109": 0.31173656171846487,
        "bleu-8": 0.4921096018050211,
        "bleu-7": 0.2860771587702134,
        "bleu-24": 0.20170234634194817,
        "bleu-56": 0.5510291252624975,
        "bleu-60": 0.09850156433347379,
        "codebleu-165": 0.5728422206517784,
        "codebleu-29": 0.6741966846377834,
        "codebleu-6": 0.02035623409669211,
        "codebleu-192": 0.7231056882542974,
        "codebleu-71": 0.4556152582300976,
        "codebleu-63": 0.015267175572519082,
        "codebleu-58": 0.520774935982131,
        "codebleu-36": 0.6492969449911592,
        "codebleu-191": 0.6631903688690612,
        "codebleu-27": 0.16773867566534095,
        "codebleu-175": 0.681635186413745,
        "codebleu-140": 0.5847210495263075,
        "codebleu-23": 0.6729354785503435,
        "codebleu-153": 0.5918928054318624,
        "codebleu-109": 0.5175695782859105,
        "codebleu-8": 0.6164974135759189,
        "codebleu-7": 0.6829912285832436,
        "codebleu-24": 0.7148791442376529,
        "codebleu-56": 0.6590410635471471,
        "codebleu-60": 0.3818033473017502,
        "chrf-165": 0.3928299145613651,
        "chrf-29": 0.5383213914682086,
        "chrf-6": 0.0,
        "chrf-192": 0.6358268258015963,
        "chrf-71": 0.37216654210981803,
        "chrf-63": 0.011540727665571758,
        "chrf-58": 0.4054145740438882,
        "chrf-36": 0.4849358722270253,
        "chrf-191": 0.4958884112395235,
        "chrf-27": 0.10793250083690581,
        "chrf-175": 0.5682481652766831,
        "chrf-140": 0.5091813619071996,
        "chrf-23": 0.5040894663581943,
        "chrf-153": 0.4215613565485803,
        "chrf-109": 0.46009113386767353,
        "chrf-8": 0.587641919793857,
        "chrf-7": 0.4739729946352033,
        "chrf-24": 0.4670241690503978,
        "chrf-56": 0.6221701425496153,
        "chrf-60": 0.282170629529622,
        "rougel-165": 0.4777777777777778,
        "rougel-29": 0.5258215962441315,
        "rougel-6": 0.0,
        "rougel-192": 0.6,
        "rougel-71": 0.5375,
        "rougel-63": 0.0,
        "rougel-58": 0.5294117647058824,
        "rougel-36": 0.38314176245210724,
        "rougel-191": 0.4780876494023904,
        "rougel-27": 0.08333333333333333,
        "rougel-175": 0.6481481481481481,
        "rougel-140": 0.5816326530612245,
        "rougel-23": 0.45925925925925926,
        "rougel-153": 0.5698924731182796,
        "rougel-109": 0.4727272727272728,
        "rougel-8": 0.5649717514124293,
        "rougel-7": 0.5062240663900415,
        "rougel-24": 0.40220385674931125,
        "rougel-56": 0.6511627906976745,
        "rougel-60": 0.4025157232704403,
        "meteor-165": 0.41995135000018646,
        "meteor-29": 0.5787414753496108,
        "meteor-6": 0.0,
        "meteor-192": 0.6257279291870487,
        "meteor-71": 0.3946042025262335,
        "meteor-63": 0.0,
        "meteor-58": 0.40591980475468137,
        "meteor-36": 0.5617540175519511,
        "meteor-191": 0.5333919747458291,
        "meteor-27": 0.039414414414414414,
        "meteor-175": 0.4742034210378368,
        "meteor-140": 0.5217336083369517,
        "meteor-23": 0.4838503859795069,
        "meteor-153": 0.504330943847073,
        "meteor-109": 0.4194719471947194,
        "meteor-8": 0.588852924400913,
        "meteor-7": 0.5842743188646017,
        "meteor-24": 0.49341497797907624,
        "meteor-56": 0.5527198803869405,
        "meteor-60": 0.35591257379229657,
        "ruby-165": 0.33333333333333337,
        "ruby-29": 0.3916666666666667,
        "ruby-6": 0.0,
        "ruby-192": 0.4700854700854701,
        "ruby-71": 0.3763440860215054,
        "ruby-63": 0.0,
        "ruby-58": 0.3763440860215054,
        "ruby-36": 0.25595238095238093,
        "ruby-191": 0.30379746835443033,
        "ruby-27": 0.053763440860215006,
        "ruby-175": 0.5284552845528455,
        "ruby-140": 0.35922330097087374,
        "ruby-23": 0.3163841807909604,
        "ruby-153": 0.34408602150537637,
        "ruby-109": 0.27956989247311825,
        "ruby-8": 0.4301075268817204,
        "ruby-7": 0.3513513513513513,
        "ruby-24": 0.27037037037037037,
        "ruby-56": 0.4623655913978495,
        "ruby-60": 0.25806451612903225,
        "codebertscore_f1-165": 0.8269038200378418,
        "codebertscore_f3-165": 0.844647228717804,
        "codebertscore_f1-29": 0.8369441628456116,
        "codebertscore_f3-29": 0.8568501472473145,
        "codebertscore_f1-6": 0.5346276164054871,
        "codebertscore_f3-6": 0.5173277258872986,
        "codebertscore_f1-192": 0.8652241826057434,
        "codebertscore_f3-192": 0.8623539209365845,
        "codebertscore_f1-71": 0.8249799013137817,
        "codebertscore_f3-71": 0.8287250995635986,
        "codebertscore_f1-63": 0.5498473048210144,
        "codebertscore_f3-63": 0.5307174921035767,
        "codebertscore_f1-58": 0.8725685477256775,
        "codebertscore_f3-58": 0.8717626333236694,
        "codebertscore_f1-36": 0.8079450726509094,
        "codebertscore_f3-36": 0.8323434591293335,
        "codebertscore_f1-191": 0.7985861897468567,
        "codebertscore_f3-191": 0.8203700184822083,
        "codebertscore_f1-27": 0.608905553817749,
        "codebertscore_f3-27": 0.61119544506073,
        "codebertscore_f1-175": 0.8410876989364624,
        "codebertscore_f3-175": 0.855997622013092,
        "codebertscore_f1-140": 0.856468677520752,
        "codebertscore_f3-140": 0.8587273359298706,
        "codebertscore_f1-23": 0.8181114196777344,
        "codebertscore_f3-23": 0.8431772589683533,
        "codebertscore_f1-153": 0.8480689525604248,
        "codebertscore_f3-153": 0.8451212048530579,
        "codebertscore_f1-109": 0.8629739880561829,
        "codebertscore_f3-109": 0.8573808073997498,
        "codebertscore_f1-8": 0.8584902882575989,
        "codebertscore_f3-8": 0.8610132336616516,
        "codebertscore_f1-7": 0.8212382197380066,
        "codebertscore_f3-7": 0.85917729139328,
        "codebertscore_f1-24": 0.8076631426811218,
        "codebertscore_f3-24": 0.8318560719490051,
        "codebertscore_f1-56": 0.8900370001792908,
        "codebertscore_f3-56": 0.8762370944023132,
        "codebertscore_f1-60": 0.7774789333343506,
        "codebertscore_f3-60": 0.7724778652191162,
        "codebertscore_s_f1-165": 0.9700806736946106,
        "codebertscore_s_f3-165": 0.9719609618186951,
        "codebertscore_s_f1-29": 0.9670838713645935,
        "codebertscore_s_f3-29": 0.9733493328094482,
        "codebertscore_s_f1-6": 0.9671209454536438,
        "codebertscore_s_f3-6": 0.9493021965026855,
        "codebertscore_s_f1-192": 0.9766907691955566,
        "codebertscore_s_f3-192": 0.9771561026573181,
        "codebertscore_s_f1-71": 0.9746540784835815,
        "codebertscore_s_f3-71": 0.9709071516990662,
        "codebertscore_s_f1-63": 0.9676647186279297,
        "codebertscore_s_f3-63": 0.9493681788444519,
        "codebertscore_s_f1-58": 0.9791849851608276,
        "codebertscore_s_f3-58": 0.9754725098609924,
        "codebertscore_s_f1-36": 0.962537407875061,
        "codebertscore_s_f3-36": 0.9727385640144348,
        "codebertscore_s_f1-191": 0.9638723134994507,
        "codebertscore_s_f3-191": 0.9710035920143127,
        "codebertscore_s_f1-27": 0.9479196071624756,
        "codebertscore_s_f3-27": 0.9462184309959412,
        "codebertscore_s_f1-175": 0.9702861905097961,
        "codebertscore_s_f3-175": 0.9741607904434204,
        "codebertscore_s_f1-140": 0.9745151996612549,
        "codebertscore_s_f3-140": 0.973816990852356,
        "codebertscore_s_f1-23": 0.9644942283630371,
        "codebertscore_s_f3-23": 0.9736319184303284,
        "codebertscore_s_f1-153": 0.9772270321846008,
        "codebertscore_s_f3-153": 0.9741663932800293,
        "codebertscore_s_f1-109": 0.9782935976982117,
        "codebertscore_s_f3-109": 0.9750091433525085,
        "codebertscore_s_f1-8": 0.9761795997619629,
        "codebertscore_s_f3-8": 0.9749025702476501,
        "codebertscore_s_f1-7": 0.9629899859428406,
        "codebertscore_s_f3-7": 0.9739664793014526,
        "codebertscore_s_f1-24": 0.9576924443244934,
        "codebertscore_s_f3-24": 0.9708015322685242,
        "codebertscore_s_f1-56": 0.9822306036949158,
        "codebertscore_s_f3-56": 0.978217363357544,
        "codebertscore_s_f1-60": 0.9657636880874634,
        "codebertscore_s_f3-60": 0.9583314657211304,
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 0,
        "raw_gpt35_nsnr-63": "3 - The code correctly checks if it is possible to obtain a sorted array by performing right shift operations. It correctly handles the case where the given array is empty and returns True. However, it does not handle the case where the array is already sorted in non-decreasing order and returns False instead of True.",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-191": 3,
        "raw_gpt35_nsnr-191": "3",
        "gpt35_nsnr-27": 0,
        "raw_gpt35_nsnr-27": "3 - The code snippet is incomplete and does not contain any logic to solve the problem. However, based on the problem description, it is possible to determine a solution using a simple approach of finding the minimum element in the array and checking if it is at the beginning or end of the array. If it is at the end, we can perform right shift operations until it reaches the beginning. If it is at the beginning, we can perform right shift operations until it reaches the end. This approach should work for all cases and pass all possible tests.",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-191": 2,
        "raw_gpt35_nswr-191": "2",
        "gpt35_nswr-27": 0,
        "raw_gpt35_nswr-27": "0",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nbool check_dict_case(std::map<std::string, std::string> dict) {\n",
        "snippet": [
            "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n"
        ],
        "simplified": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
        "task_id": "95",
        "163": "// Write your code here...\n    bool lower=true;\n    bool upper=true;\n    bool check=true;\n    bool empty=true;\n    if(dict.size()==0){\n        check=false;\n    }\n    for(auto x : dict){\n        std::string key=x.first;\n        if(key[0]>=65 && key[0]<=90){\n            lower=false;\n        }\n        if(key[0]>=97 && key[0]<=122){\n            upper=false;\n        }\n    }\n    if(lower==false && upper==false || (lower==false && upper==true) || (lower==true && upper==false)){\n        check=false;\n    }\n    return check;",
        "grade-163": {
            "execution": 0
        },
        "28": "bool isLower = true;\n    bool isUpper = true;\n    for (std::map<std::string, std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n        if (i->first.length() == 0) {\n            return false;\n        }\n        for (int j = 0; j < i->first.length(); j++) {\n            if (isupper(i->first[j])) {\n                isLower = false;\n            }\n            if (islower(i->first[j])) {\n                isUpper = false;\n            }\n        }\n    }\n    if (!isLower && !isUpper) {\n        return false;\n    }\n    return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "if(dict.size()==0) return false;\n    std::map<std::string, std::string>::iterator itr;\n    int count_lower=0, count_upper=0;\n    for(itr=dict.begin(); itr!=dict.end(); ++itr){\n        if(isupper(itr->first[0])) count_upper++;\n        else count_lower++;\n    }\n    if(count_lower==0 || count_upper==0) return true;\n    return false;",
        "grade-6": {
            "execution": 0
        },
        "190": "int upper = 0;\n    int lower = 0;\n    if (dict.size() == 0)\n        return false;\n    else {\n        for (auto itr = dict.begin(); itr != dict.end(); itr++) {\n            std::string key = itr->first;\n            if (std::islower(key[0]))\n                lower++;\n            else if (std::isupper(key[0]))\n                upper++;\n            else\n                return false;\n        }\n        if (upper == 0 || lower == 0)\n            return true;\n        else\n            return false;\n    }",
        "grade-190": {
            "execution": 0
        },
        "70": "bool lowercase = false;\n  bool uppercase = false;\n  if (dict.size() == 0) {\n    return false;\n  }\n  std::map<std::string, std::string>::iterator it;\n  for (it = dict.begin(); it != dict.end(); it++) {\n    if (islower(it->first[0])) {\n      lowercase = true;\n    } else if (isupper(it->first[0])) {\n      uppercase = true;\n    } else {\n      return false;\n    }\n  }\n  if (lowercase && uppercase) {\n    return false;\n  }\n  return true;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (dict.size() == 0) {\n\t\treturn false;\n\t}\n\tfor (auto i = dict.begin(); i != dict.end(); i++) {\n\t\tif (isdigit(i->first[0])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (auto i = dict.begin(); i != dict.end(); i++) {\n\t\tfor (int j = 0; j < i->first.size(); j++) {\n\t\t\tif (islower(i->first[j])) {\n\t\t\t\tfor (auto k = dict.begin(); k != dict.end(); k++) {\n\t\t\t\t\tfor (int l = 0; l < k->first.size(); l++) {\n\t\t\t\t\t\tif (isupper(k->first[l])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isupper(i->first[j])) {\n\t\t\t\tfor (auto k = dict.begin(); k != dict.end(); k++) {\n\t\t\t\t\tfor (int l = 0; l < k->first.size(); l++) {\n\t\t\t\t\t\tif (islower(k->first[l])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Create a upper case and lower case set.\n    std::set<std::string> uppercase;\n    std::set<std::string> lowercase;\n    std::set<std::string> keys = dict.keys();\n    // Populate uppercase and lowercase set.\n    for (std::string key : keys) {\n        // If the key is present in either of the sets, return false.\n        if (uppercase.find(key) != uppercase.end() || lowercase.find(key) != lowercase.end())\n            return false;\n        // If the key is neither in upper nor lower case set, add the key.\n        uppercase.insert(key);\n        lowercase.insert(key);\n    }\n    // If the dict is empty, return false.\n    if (keys.size() == 0)\n        return false;\n    return true;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::map<std::string, std::string>::iterator itr;\n    bool result = true;\n    if (dict.size() == 0) {\n        return false;\n    } else {\n        itr = dict.begin();\n        std::string current_key = itr->first;\n        bool current_case = isupper(current_key[0]);\n        for (itr = dict.begin(); itr != dict.end(); itr++) {\n            if (isupper(itr->first[0]) != current_case) {\n                result = false;\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "// your code goes here\n\tif(dict.size() == 0)\n\t\treturn false;\n\tbool flag = true;\n\tif(dict.begin()->first[0] >= 'a' && dict.begin()->first[0] <= 'z'){\n\t\tstd::map<std::string, std::string>::iterator it;\n\t\tfor(it = dict.begin(); it != dict.end(); it++){\n\t\t\tstd::string temp = it->first;\n\t\t\tfor(int i = 0; i < temp.length(); i++){\n\t\t\t\tif(temp[i] < 'a' || temp[i] > 'z'){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(dict.begin()->first[0] >= 'A' && dict.begin()->first[0] <= 'Z'){\n\t\tstd::map<std::string, std::string>::iterator it;\n\t\tfor(it = dict.begin(); it != dict.end(); it++){\n\t\t\tstd::string temp = it->first;\n\t\t\tfor(int i = 0; i < temp.length(); i++){\n\t\t\t\tif(temp[i] < 'A' || temp[i] > 'Z'){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tflag = false;\n\t}\n\treturn flag;",
        "grade-189": {
            "execution": 1
        },
        "26": "if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    bool is_key_int = false;\n    for(auto i: dict) {\n        is_lower = is_lower || (std::isupper(i.first[0]) == 0);\n        is_upper = is_upper || (std::isupper(i.first[0]) == 1);\n        is_key_int = is_key_int || (std::isupper(i.first[0]) == 0 && \n                                    std::isdigit(i.first[0]) == 0);\n    }\n    return (is_lower && !is_upper && !is_key_int) || \n           (!is_lower && is_upper && !is_key_int);",
        "grade-26": {
            "execution": 0
        },
        "173": "if (dict.empty()) return false;\n  std::vector<bool> upper;\n  for (auto it = dict.begin(); it != dict.end(); ++it) {\n    upper.push_back(std::isupper(it->first[0]));\n  }\n  return std::adjacent_find(upper.begin(), upper.end(),\n      std::not_equal_to<bool>()) == upper.end();",
        "grade-173": {
            "execution": 0
        },
        "139": "if(dict.size() == 0) return false;\n    bool check_lower = false;\n    bool check_upper = false;\n    for(std::map<std::string, std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            check_upper = true;\n        } else {\n            check_lower = true;\n        }\n    }\n    return (check_lower == check_upper) ? false : true;",
        "grade-139": {
            "execution": 0
        },
        "22": "// Write your code here.\n  bool upper = false;\n  bool lower = false;\n  for(auto pair : dict){\n      if(std::isupper(pair.first[0])){\n          upper = true;\n      }else{\n          lower = true;\n      }\n  }\n  return lower && !upper || upper && !lower;",
        "grade-22": {
            "execution": 0
        },
        "151": "if (dict.size() == 0)\n\t\treturn false;\n\tbool is_all_lower = true;\n\tfor (std::map<std::string, std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n\t\tif (std::islower(i->first[0])) {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tis_all_lower = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_all_lower)\n\t\treturn true;\n\tfor (std::map<std::string, std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n\t\tif (std::isupper(i->first[0])) {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-151": {
            "execution": 0
        },
        "108": "// TODO: Implement the function here\n  int count_lower_keys = 0;\n  int count_upper_keys = 0;\n  for (auto elem : dict) {\n    if (islower(elem.first[0])) {\n      count_lower_keys++;\n    } else if (isupper(elem.first[0])) {\n      count_upper_keys++;\n    }\n  }\n  if (count_lower_keys == dict.size() || count_upper_keys == dict.size()) {\n    return true;\n  }\n  return false;",
        "grade-108": {
            "execution": 0
        },
        "8": "if (dict.size() == 0) {\n\t\treturn false;\n\t}\n\tstd::map<std::string, std::string>::iterator it;\n\tit = dict.begin();\n\tstd::string first_key = it->first;\n\tif (islower(first_key[0])) {\n\t\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif (!islower(it->first[0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else if (isupper(first_key[0])) {\n\t\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif (!isupper(it->first[0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-8": {
            "execution": 0
        },
        "7": "int allLower=0, allUpper=0;\n  if(dict.size()==0)\n    return false;\n  for(auto x:dict){\n    allLower=0;\n    allUpper=0;\n    for(auto y:x.first){\n      if(islower(y))\n        allLower=1;\n      else\n        allUpper=1;\n    }\n    if(allLower==0 || allUpper==0)\n      return false;\n  }\n  return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (dict.size()==0)\n\t\treturn false;\n\tbool is_all_upper = true;\n\tfor (auto item : dict) {\n\t\tif (isupper(item.first[0]))\n\t\t\tis_all_upper = true;\n\t\telse {\n\t\t\tis_all_upper = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_all_upper) {\n\t\tfor (auto item : dict) {\n\t\t\tif (!isupper(item.first[0]))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\telse {\n\t\tfor (auto item : dict) {\n\t\t\tif (!islower(item.first[0]))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}",
        "grade-23": {
            "execution": 0
        },
        "55": "int n = dict.size();\n    if(n == 0)\n        return false;\n    std::map<std::string, std::string>::iterator it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0])) {\n            for(it = dict.begin(); it != dict.end(); it++) {\n                if(!isupper(it->first[0]))\n                    return false;\n            }\n            return true;\n        }\n    }\n    return true;",
        "grade-55": {
            "execution": 0
        },
        "59": "if(dict.size() == 0) return false;\n    bool s_lower = true;\n    bool s_upper = true;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        s_lower = s_lower && (std::string(it->first) == std::string(it->first).substr(0, 1) + std::string(it->first).substr(1, it->first.size()-1));\n        s_upper = s_upper && (std::string(it->first) == std::string(it->first).substr(0, 1) + std::string(it->first).substr(1, it->first.size()-1));\n    }\n    return s_lower || s_upper;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.21857777792844119,
        "bleu-28": 0.2854877217421421,
        "bleu-6": 0.20750969903569724,
        "bleu-190": 0.24982129543839052,
        "bleu-70": 0.31425389957282523,
        "bleu-62": 0.20180456264424396,
        "bleu-57": 0.1478420101313504,
        "bleu-35": 0.2317600346423973,
        "bleu-189": 0.28761035743052366,
        "bleu-26": 0.13868049755694678,
        "bleu-173": 0.14506174019459808,
        "bleu-139": 0.24713590602243912,
        "bleu-22": 0.028307948877321295,
        "bleu-151": 0.3193990681041189,
        "bleu-108": 0.08014217378943636,
        "bleu-8": 0.36133468759205045,
        "bleu-7": 0.14936594394810884,
        "bleu-23": 0.1661140798716757,
        "bleu-55": 0.3165463926909623,
        "bleu-59": 0.25636573704996657,
        "codebleu-163": 0.4338224110842363,
        "codebleu-28": 0.5198628996382771,
        "codebleu-6": 0.3682703148836193,
        "codebleu-190": 0.42582647289511855,
        "codebleu-70": 0.44918555270997956,
        "codebleu-62": 0.5809731800627889,
        "codebleu-57": 0.42139756967350267,
        "codebleu-35": 0.4158403879304357,
        "codebleu-189": 0.6580197091245119,
        "codebleu-26": 0.3971236721008745,
        "codebleu-173": 0.32514141861828755,
        "codebleu-139": 0.353299310412277,
        "codebleu-22": 0.16824985930922629,
        "codebleu-151": 0.5628501102493811,
        "codebleu-108": 0.28558619541898683,
        "codebleu-8": 0.5712870200990992,
        "codebleu-7": 0.28100873304998436,
        "codebleu-23": 0.3727844405915948,
        "codebleu-55": 0.45831561158400647,
        "codebleu-59": 0.4839354381185986,
        "chrf-163": 0.3318912222321553,
        "chrf-28": 0.4369692434637916,
        "chrf-6": 0.4421407473342971,
        "chrf-190": 0.463690808726006,
        "chrf-70": 0.48278822308561237,
        "chrf-62": 0.40038897302015813,
        "chrf-57": 0.32889843948758035,
        "chrf-35": 0.4122262696925847,
        "chrf-189": 0.46237572589546466,
        "chrf-26": 0.3088321322093774,
        "chrf-173": 0.2733300039870898,
        "chrf-139": 0.4495459588296258,
        "chrf-22": 0.1962920161966548,
        "chrf-151": 0.46449510185233117,
        "chrf-108": 0.2763317504719877,
        "chrf-8": 0.5106349495960606,
        "chrf-7": 0.3136371031571887,
        "chrf-23": 0.3445153744469222,
        "chrf-55": 0.4545088379979674,
        "chrf-59": 0.3619420782579714,
        "rougel-163": 0.4080459770114942,
        "rougel-28": 0.4647058823529412,
        "rougel-6": 0.4041095890410959,
        "rougel-190": 0.49673202614379086,
        "rougel-70": 0.445859872611465,
        "rougel-62": 0.4146868250539957,
        "rougel-57": 0.28415300546448086,
        "rougel-35": 0.4336569579288026,
        "rougel-189": 0.4204322200392927,
        "rougel-26": 0.3303303303303303,
        "rougel-173": 0.3661971830985915,
        "rougel-139": 0.39583333333333337,
        "rougel-22": 0.19920318725099603,
        "rougel-151": 0.40793201133144474,
        "rougel-108": 0.2898550724637681,
        "rougel-8": 0.4333333333333333,
        "rougel-7": 0.41155234657039713,
        "rougel-23": 0.3654485049833887,
        "rougel-55": 0.4630225080385852,
        "rougel-59": 0.3814713896457766,
        "meteor-163": 0.3436937930274066,
        "meteor-28": 0.4075370062412745,
        "meteor-6": 0.283969674014002,
        "meteor-190": 0.35775169413274494,
        "meteor-70": 0.3777698564046682,
        "meteor-62": 0.4207163681582164,
        "meteor-57": 0.3012923098292682,
        "meteor-35": 0.28811017710562004,
        "meteor-189": 0.5017627257605135,
        "meteor-26": 0.27954578170620176,
        "meteor-173": 0.28039540780292116,
        "meteor-139": 0.26374760849881584,
        "meteor-22": 0.12443591649327997,
        "meteor-151": 0.3724297800383625,
        "meteor-108": 0.2150223197579954,
        "meteor-8": 0.39053431665174293,
        "meteor-7": 0.27527639192826386,
        "meteor-23": 0.3167697240376228,
        "meteor-55": 0.35398738869842905,
        "meteor-59": 0.28596854092708907,
        "ruby-163": 0.20765027322404372,
        "ruby-28": 0.2786885245901639,
        "ruby-6": 0.2295081967213115,
        "ruby-190": 0.3715846994535519,
        "ruby-70": 0.27322404371584696,
        "ruby-62": 0.275,
        "ruby-57": 0.11475409836065575,
        "ruby-35": 0.26775956284153,
        "ruby-189": 0.3098159509202454,
        "ruby-26": 0.18579234972677594,
        "ruby-173": 0.21311475409836067,
        "ruby-139": 0.2295081967213115,
        "ruby-22": 0.1202185792349727,
        "ruby-151": 0.21857923497267762,
        "ruby-108": 0.19672131147540983,
        "ruby-8": 0.17486338797814205,
        "ruby-7": 0.2896174863387978,
        "ruby-23": 0.2568306010928961,
        "ruby-55": 0.2622950819672131,
        "ruby-59": 0.17934782608695654,
        "codebertscore_f1-163": 0.7797480821609497,
        "codebertscore_f3-163": 0.7795703411102295,
        "codebertscore_f1-28": 0.8332575559616089,
        "codebertscore_f3-28": 0.8166003823280334,
        "codebertscore_f1-6": 0.788263201713562,
        "codebertscore_f3-6": 0.76474928855896,
        "codebertscore_f1-190": 0.8147086501121521,
        "codebertscore_f3-190": 0.8031696081161499,
        "codebertscore_f1-70": 0.7958123683929443,
        "codebertscore_f3-70": 0.7757406830787659,
        "codebertscore_f1-62": 0.7902657985687256,
        "codebertscore_f3-62": 0.7730932831764221,
        "codebertscore_f1-57": 0.7250676155090332,
        "codebertscore_f3-57": 0.7346862554550171,
        "codebertscore_f1-35": 0.791289746761322,
        "codebertscore_f3-35": 0.7760812044143677,
        "codebertscore_f1-189": 0.7872778177261353,
        "codebertscore_f3-189": 0.7907794117927551,
        "codebertscore_f1-26": 0.7669991254806519,
        "codebertscore_f3-26": 0.761029839515686,
        "codebertscore_f1-173": 0.710396945476532,
        "codebertscore_f3-173": 0.6854426264762878,
        "codebertscore_f1-139": 0.786496639251709,
        "codebertscore_f3-139": 0.7582911849021912,
        "codebertscore_f1-22": 0.6805031299591064,
        "codebertscore_f3-22": 0.6638640761375427,
        "codebertscore_f1-151": 0.7917097806930542,
        "codebertscore_f3-151": 0.7798417806625366,
        "codebertscore_f1-108": 0.7316924929618835,
        "codebertscore_f3-108": 0.7229714393615723,
        "codebertscore_f1-8": 0.8092409372329712,
        "codebertscore_f3-8": 0.783447265625,
        "codebertscore_f1-7": 0.7675151824951172,
        "codebertscore_f3-7": 0.7401939034461975,
        "codebertscore_f1-23": 0.7543794512748718,
        "codebertscore_f3-23": 0.7272063493728638,
        "codebertscore_f1-55": 0.8160141706466675,
        "codebertscore_f3-55": 0.7763888239860535,
        "codebertscore_f1-59": 0.7656552195549011,
        "codebertscore_f3-59": 0.758236825466156,
        "codebertscore_s_f1-163": 0.7866743206977844,
        "codebertscore_s_f3-163": 0.7872071862220764,
        "codebertscore_s_f1-28": 0.8391722440719604,
        "codebertscore_s_f3-28": 0.8213000297546387,
        "codebertscore_s_f1-6": 0.8124893307685852,
        "codebertscore_s_f3-6": 0.7926973700523376,
        "codebertscore_s_f1-190": 0.8216156959533691,
        "codebertscore_s_f3-190": 0.8094674944877625,
        "codebertscore_s_f1-70": 0.8122818470001221,
        "codebertscore_s_f3-70": 0.7926433682441711,
        "codebertscore_s_f1-62": 0.8057141304016113,
        "codebertscore_s_f3-62": 0.7842085957527161,
        "codebertscore_s_f1-57": 0.7338402271270752,
        "codebertscore_s_f3-57": 0.7445412278175354,
        "codebertscore_s_f1-35": 0.7971861958503723,
        "codebertscore_s_f3-35": 0.7824916839599609,
        "codebertscore_s_f1-189": 0.8044728636741638,
        "codebertscore_s_f3-189": 0.8038755655288696,
        "codebertscore_s_f1-26": 0.7740458250045776,
        "codebertscore_s_f3-26": 0.7698599100112915,
        "codebertscore_s_f1-173": 0.7407041192054749,
        "codebertscore_s_f3-173": 0.7247134447097778,
        "codebertscore_s_f1-139": 0.8037595748901367,
        "codebertscore_s_f3-139": 0.7779536843299866,
        "codebertscore_s_f1-22": 0.7078375220298767,
        "codebertscore_s_f3-22": 0.6931852102279663,
        "codebertscore_s_f1-151": 0.8029271364212036,
        "codebertscore_s_f3-151": 0.789636492729187,
        "codebertscore_s_f1-108": 0.7539312839508057,
        "codebertscore_s_f3-108": 0.7464264035224915,
        "codebertscore_s_f1-8": 0.8202402591705322,
        "codebertscore_s_f3-8": 0.7932706475257874,
        "codebertscore_s_f1-7": 0.7936511635780334,
        "codebertscore_s_f3-7": 0.768871545791626,
        "codebertscore_s_f1-23": 0.768947422504425,
        "codebertscore_s_f3-23": 0.7428295016288757,
        "codebertscore_s_f1-55": 0.8272950649261475,
        "codebertscore_s_f3-55": 0.7897732853889465,
        "codebertscore_s_f1-59": 0.779771625995636,
        "codebertscore_s_f3-59": 0.7707937359809875,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string) {\n",
        "snippet": [
            "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n"
        ],
        "simplified": "Return list of all prefixes from shortest to longest of the input string",
        "task_id": "14",
        "126": "std::vector<std::string> prefixes;\n    for (size_t x = 1; x <= string.size(); x++) {\n        prefixes.push_back(string.substr(0, x));\n    }\n    return prefixes;",
        "grade-126": {
            "execution": 1
        },
        "14": "std::vector<std::string> result;\n  for (int length = 1; length <= string.length(); length++) {\n    result.push_back(string.substr(0, length));\n  }\n  return result;",
        "grade-14": {
            "execution": 1
        },
        "3": "std::vector<std::string> results;\n    for (int i = 1; i <= string.size(); i++) {\n        results.push_back(string.substr(0, i));\n    }\n    return results;",
        "grade-3": {
            "execution": 1
        },
        "156": "std::vector<std::string> res;\n    for (size_t i = 1; i <= string.size(); i++) {\n        res.push_back(string.substr(0, i));\n    }\n    return res;",
        "grade-156": {
            "execution": 1
        },
        "47": "std::vector<std::string> prefixes;\n\tfor (size_t length = 1; length <= string.length(); length++) {\n\t\tprefixes.push_back(string.substr(0, length));\n\t}\n\treturn prefixes;",
        "grade-47": {
            "execution": 1
        },
        "40": "std::vector<std::string>prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;",
        "grade-40": {
            "execution": 1
        },
        "35": "std::vector<std::string> all_prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    all_prefixes.push_back(string.substr(0, i + 1));\n  }\n  return all_prefixes;",
        "grade-35": {
            "execution": 1
        },
        "18": "std::vector<std::string> result;\n    int n = string.length();\n    std::string current_substring = \"\";\n    for (int i = 0; i < n; i++) {\n        current_substring += string[i];\n        result.push_back(current_substring);\n    }\n    return result;",
        "grade-18": {
            "execution": 1
        },
        "13": "std::vector<std::string> prefixes;\n    for (int length = 1; length <= string.length(); length++) {\n        prefixes.push_back(string.substr(0, length));\n    }\n    return prefixes;",
        "grade-13": {
            "execution": 1
        },
        "131": "int N = string.size();\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < N; i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;",
        "grade-131": {
            "execution": 1
        },
        "188": "int length = string.length();\n  int j = 0;\n  std::vector<std::string> result;\n  for (int i = 1; i <= length; i++) {\n    // Add new prefix to the list\n    result.push_back(string.substr(j, i));\n  }\n  return result;",
        "grade-188": {
            "execution": 1
        },
        "106": "// START SOLUTION\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size(); i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n  // END SOLUTION",
        "grade-106": {
            "execution": 1
        },
        "11": "assert(!string.empty());\n    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (char c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
        "grade-11": {
            "execution": 0
        },
        "115": "std::vector<std::string> prefixes = {};\n    for (unsigned long i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
        "grade-115": {
            "execution": 1
        },
        "80": "// Don't worry about these:\n    std::vector<std::string> prefixes;\n    size_t length = string.length();\n    for (size_t i = 1; i <= length; i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return prefixes;",
        "grade-80": {
            "execution": 1
        },
        "4": "std::vector<std::string> out;\n    for (int i = 1; i <= string.size(); i++) {\n        out.push_back(string.substr(0, i));\n    }\n    return out;",
        "grade-4": {
            "execution": 1
        },
        "34": "std::vector<std::string> result;\n\tfor (int i = 1; i <= string.size(); i++) {\n\t\tresult.push_back(string.substr(0, i));\n\t}\n\treturn result;",
        "grade-34": {
            "execution": 1
        },
        "37": "int n = string.size();\n  std::vector<std::string> res;\n  for (int i = 0; i < n; i++) {\n    res.push_back(string.substr(0, i + 1));\n  }\n  return res;",
        "grade-37": {
            "execution": 1
        },
        "98": "int n = string.size();\n    std::vector<std::string> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return result;",
        "grade-98": {
            "execution": 1
        },
        "120": "std::vector<std::string> result;\n    if(string.size() == 0) return result;\n    for(int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0, i+1));\n    }\n    return result;",
        "grade-120": {
            "execution": 1
        },
        "bleu-126": 0.16870889724776994,
        "bleu-14": 0.24755381541848934,
        "bleu-3": 0.33650510614117907,
        "bleu-156": 0.2771260416159656,
        "bleu-47": 0.22277189743542913,
        "bleu-40": 0.40039061582291224,
        "bleu-35": 0.40039061582291224,
        "bleu-18": 0.42319968357605253,
        "bleu-13": 0.24755381541848934,
        "bleu-131": 0.35211207462634336,
        "bleu-188": 0.28495569362746903,
        "bleu-106": 0.30125306018672227,
        "bleu-11": 0.1154826997781798,
        "bleu-115": 0.32030695183548935,
        "bleu-80": 0.24223226295519013,
        "bleu-4": 0.42898536440426865,
        "bleu-34": 0.33650510614117907,
        "bleu-37": 0.35211207462634336,
        "bleu-98": 0.35211207462634336,
        "bleu-120": 0.3263674633284716,
        "codebleu-126": 0.5098867737912092,
        "codebleu-14": 0.5265796230378932,
        "codebleu-3": 0.5478724159256918,
        "codebleu-156": 0.5371071862696143,
        "codebleu-47": 0.5220083664746537,
        "codebleu-40": 0.5810481649662322,
        "codebleu-35": 0.5810481649662322,
        "codebleu-18": 0.6954608753161496,
        "codebleu-13": 0.5265796230378932,
        "codebleu-131": 0.612198038321589,
        "codebleu-188": 0.5970571783576784,
        "codebleu-106": 0.5679010255396857,
        "codebleu-11": 0.4756173479975098,
        "codebleu-115": 0.640689614395902,
        "codebleu-80": 0.5911663592959914,
        "codebleu-4": 0.5671209859133328,
        "codebleu-34": 0.5478724159256918,
        "codebleu-37": 0.612198038321589,
        "codebleu-98": 0.612198038321589,
        "codebleu-120": 0.5990659017664617,
        "chrf-126": 0.337795048560493,
        "chrf-14": 0.4232608890608944,
        "chrf-3": 0.4104716367009583,
        "chrf-156": 0.3772809843530079,
        "chrf-47": 0.3880520470543759,
        "chrf-40": 0.4426802081854228,
        "chrf-35": 0.4354339834984561,
        "chrf-18": 0.624512363798013,
        "chrf-13": 0.4086189050823063,
        "chrf-131": 0.4181799531111033,
        "chrf-188": 0.4570074050494474,
        "chrf-106": 0.3827092293376272,
        "chrf-11": 0.33510274694131126,
        "chrf-115": 0.4452247392288687,
        "chrf-80": 0.40739324052209414,
        "chrf-4": 0.48714729705817816,
        "chrf-34": 0.4222599335499468,
        "chrf-37": 0.4299893351916111,
        "chrf-98": 0.44267943046756825,
        "chrf-120": 0.46281058075273507,
        "rougel-126": 0.5,
        "rougel-14": 0.5384615384615384,
        "rougel-3": 0.576923076923077,
        "rougel-156": 0.5576923076923078,
        "rougel-47": 0.5192307692307693,
        "rougel-40": 0.5904761904761905,
        "rougel-35": 0.5904761904761905,
        "rougel-18": 0.6440677966101696,
        "rougel-13": 0.5384615384615384,
        "rougel-131": 0.509090909090909,
        "rougel-188": 0.45901639344262296,
        "rougel-106": 0.5357142857142858,
        "rougel-11": 0.39999999999999997,
        "rougel-115": 0.5982905982905983,
        "rougel-80": 0.4915254237288135,
        "rougel-4": 0.6346153846153846,
        "rougel-34": 0.576923076923077,
        "rougel-37": 0.509090909090909,
        "rougel-98": 0.509090909090909,
        "rougel-120": 0.5714285714285715,
        "meteor-126": 0.33720538720538723,
        "meteor-14": 0.35637133049242425,
        "meteor-3": 0.4441500865051903,
        "meteor-156": 0.4129187884353174,
        "meteor-47": 0.3467919307539495,
        "meteor-40": 0.4632361117470451,
        "meteor-35": 0.4632361117470451,
        "meteor-18": 0.7534440677018994,
        "meteor-13": 0.35637133049242425,
        "meteor-131": 0.5319522471910112,
        "meteor-188": 0.5247430316682393,
        "meteor-106": 0.43752098073645607,
        "meteor-11": 0.34261361729734563,
        "meteor-115": 0.5764243398651312,
        "meteor-80": 0.4618476060582373,
        "meteor-4": 0.5320530911747128,
        "meteor-34": 0.4441500865051903,
        "meteor-37": 0.5319522471910112,
        "meteor-98": 0.5319522471910112,
        "meteor-120": 0.48102081475233627,
        "ruby-126": 0.339622641509434,
        "ruby-14": 0.37735849056603776,
        "ruby-3": 0.41509433962264153,
        "ruby-156": 0.39622641509433965,
        "ruby-47": 0.3584905660377359,
        "ruby-40": 0.4528301886792453,
        "ruby-35": 0.4528301886792453,
        "ruby-18": 0.4769230769230769,
        "ruby-13": 0.37735849056603776,
        "ruby-131": 0.3157894736842105,
        "ruby-188": 0.3188405797101449,
        "ruby-106": 0.35593220338983056,
        "ruby-11": 0.18867924528301883,
        "ruby-115": 0.5,
        "ruby-80": 0.3076923076923077,
        "ruby-4": 0.4339622641509434,
        "ruby-34": 0.41509433962264153,
        "ruby-37": 0.3157894736842105,
        "ruby-98": 0.3157894736842105,
        "ruby-120": 0.4545454545454546,
        "codebertscore_f1-126": 0.8261153101921082,
        "codebertscore_f3-126": 0.8297271728515625,
        "codebertscore_f1-14": 0.8559432625770569,
        "codebertscore_f3-14": 0.8546047806739807,
        "codebertscore_f1-3": 0.8718549013137817,
        "codebertscore_f3-3": 0.8698705434799194,
        "codebertscore_f1-156": 0.8648470640182495,
        "codebertscore_f3-156": 0.8647195100784302,
        "codebertscore_f1-47": 0.82908695936203,
        "codebertscore_f3-47": 0.8337716460227966,
        "codebertscore_f1-40": 0.8531195521354675,
        "codebertscore_f3-40": 0.8596640229225159,
        "codebertscore_f1-35": 0.8452061414718628,
        "codebertscore_f3-35": 0.856904149055481,
        "codebertscore_f1-18": 0.8898181319236755,
        "codebertscore_f3-18": 0.9129705429077148,
        "codebertscore_f1-13": 0.8379478454589844,
        "codebertscore_f3-13": 0.8418096899986267,
        "codebertscore_f1-131": 0.8438645005226135,
        "codebertscore_f3-131": 0.8551548719406128,
        "codebertscore_f1-188": 0.8446173071861267,
        "codebertscore_f3-188": 0.8638991713523865,
        "codebertscore_f1-106": 0.8257952332496643,
        "codebertscore_f3-106": 0.8507784605026245,
        "codebertscore_f1-11": 0.7952890396118164,
        "codebertscore_f3-11": 0.7922035455703735,
        "codebertscore_f1-115": 0.8481830954551697,
        "codebertscore_f3-115": 0.8621929287910461,
        "codebertscore_f1-80": 0.8101198077201843,
        "codebertscore_f3-80": 0.8376810550689697,
        "codebertscore_f1-4": 0.8851472735404968,
        "codebertscore_f3-4": 0.8824915289878845,
        "codebertscore_f1-34": 0.8721797466278076,
        "codebertscore_f3-34": 0.870261013507843,
        "codebertscore_f1-37": 0.8628287315368652,
        "codebertscore_f3-37": 0.8714209794998169,
        "codebertscore_f1-98": 0.8625405430793762,
        "codebertscore_f3-98": 0.872117280960083,
        "codebertscore_f1-120": 0.8677367568016052,
        "codebertscore_f3-120": 0.8767101764678955,
        "codebertscore_s_f1-126": 0.8277326226234436,
        "codebertscore_s_f3-126": 0.8319416046142578,
        "codebertscore_s_f1-14": 0.85019451379776,
        "codebertscore_s_f3-14": 0.8496453166007996,
        "codebertscore_s_f1-3": 0.8717952370643616,
        "codebertscore_s_f3-3": 0.8712013363838196,
        "codebertscore_s_f1-156": 0.862703800201416,
        "codebertscore_s_f3-156": 0.8636251091957092,
        "codebertscore_s_f1-47": 0.8297079205513,
        "codebertscore_s_f3-47": 0.8341119885444641,
        "codebertscore_s_f1-40": 0.8547800779342651,
        "codebertscore_s_f3-40": 0.8623155355453491,
        "codebertscore_s_f1-35": 0.8501178026199341,
        "codebertscore_s_f3-35": 0.8620389699935913,
        "codebertscore_s_f1-18": 0.8897653222084045,
        "codebertscore_s_f3-18": 0.9125338196754456,
        "codebertscore_s_f1-13": 0.840231716632843,
        "codebertscore_s_f3-13": 0.8436719179153442,
        "codebertscore_s_f1-131": 0.8500325679779053,
        "codebertscore_s_f3-131": 0.8601183891296387,
        "codebertscore_s_f1-188": 0.844196081161499,
        "codebertscore_s_f3-188": 0.8646637201309204,
        "codebertscore_s_f1-106": 0.8277988433837891,
        "codebertscore_s_f3-106": 0.854621171951294,
        "codebertscore_s_f1-11": 0.7963437438011169,
        "codebertscore_s_f3-11": 0.7934515476226807,
        "codebertscore_s_f1-115": 0.8511481285095215,
        "codebertscore_s_f3-115": 0.8658956289291382,
        "codebertscore_s_f1-80": 0.8113743662834167,
        "codebertscore_s_f3-80": 0.8397894501686096,
        "codebertscore_s_f1-4": 0.8849245309829712,
        "codebertscore_s_f3-4": 0.8837506175041199,
        "codebertscore_s_f1-34": 0.8647359609603882,
        "codebertscore_s_f3-34": 0.8634600043296814,
        "codebertscore_s_f1-37": 0.8659005165100098,
        "codebertscore_s_f3-37": 0.8731358647346497,
        "codebertscore_s_f1-98": 0.8631600737571716,
        "codebertscore_s_f3-98": 0.8717045187950134,
        "codebertscore_s_f1-120": 0.8626129627227783,
        "codebertscore_s_f3-120": 0.87434983253479,
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-47": 4,
        "raw_gpt35_nsnr-47": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-131": 4,
        "raw_gpt35_nsnr-131": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-106": 4,
        "raw_gpt35_nsnr-106": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-98": 4,
        "raw_gpt35_nsnr-98": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nswr-126": 4,
        "raw_gpt35_nswr-126": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-47": 3,
        "raw_gpt35_nswr-47": "3",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-131": 4,
        "raw_gpt35_nswr-131": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-106": 4,
        "raw_gpt35_nswr-106": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-115": 4,
        "raw_gpt35_nswr-115": "4",
        "gpt35_nswr-80": 4,
        "raw_gpt35_nswr-80": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-98": 4,
        "raw_gpt35_nswr-98": "4",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n",
        "snippet": [
            "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n"
        ],
        "simplified": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "task_id": "21",
        "164": "assert(numbers.size() >= 2);\n  // mean\n  float sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);\n  float mean = sum / numbers.size();\n  // std\n  std::vector<float> diff(numbers.size());\n  std::transform(numbers.begin(), numbers.end(), diff.begin(),\n                 std::bind2nd(std::minus<float>(), mean));\n  float sq_sum = std::inner_product(diff.begin(), diff.end(), diff.begin(), 0.0);\n  float stdev = std::sqrt(sq_sum / numbers.size());\n  // rescale\n  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] = (numbers[i] - mean) / stdev;\n  }\n  return numbers;",
        "grade-164": {
            "execution": 0
        },
        "28": "if (numbers.size() < 2) {\n\t\tthrow std::domain_error(\"rescale_to_unit requires at least two numbers\");\n\t}\n\tfloat max_val = -std::numeric_limits<float>::infinity();\n\tfloat min_val = std::numeric_limits<float>::infinity();\n\tfor (float number : numbers) {\n\t\tif (number > max_val) {\n\t\t\tmax_val = number;\n\t\t}\n\t\tif (number < min_val) {\n\t\t\tmin_val = number;\n\t\t}\n\t}\n\tfloat diff = max_val - min_val;\n\tif (diff == 0) {\n\t\tthrow std::domain_error(\"all numbers are equal in rescale_to_unit\");\n\t}\n\tstd::vector<float> scaled;\n\tfor (float number : numbers) {\n\t\tscaled.push_back((number - min_val) / diff);\n\t}\n\treturn scaled;",
        "grade-28": {
            "execution": 1
        },
        "6": "float min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (float number : numbers) {\n\t\tif (number < min) min = number;\n\t\tif (number > max) max = number;\n\t}\n\tfloat diff = max - min;\n\tstd::vector<float> rescaled;\n\tfor (float number : numbers) {\n\t\trescaled.push_back((number - min) / diff);\n\t}\n\treturn rescaled;",
        "grade-6": {
            "execution": 1
        },
        "190": "//assert(numbers.size() >= 2);\n    // Your code here\n    int i,j;\n    float min = *std::min_element(numbers.begin(),numbers.end());\n    float max = *std::max_element(numbers.begin(),numbers.end());\n    for(i=0;i<numbers.size();i++)\n    {\n        numbers[i] = (numbers[i]-min)/(max-min);\n    }\n    return numbers;",
        "grade-190": {
            "execution": 1
        },
        "70": "float smallest = numbers[0];\n  float largest = numbers[0];\n  for (int i = 1; i < numbers.size(); i++) {\n    if (numbers[i] < smallest) smallest = numbers[i];\n    if (numbers[i] > largest) largest = numbers[i];\n  }\n  std::vector<float> res;\n  for (int i = 0; i < numbers.size(); i++) {\n    res.push_back((numbers[i] - smallest) / (largest - smallest));\n  }\n  return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "float max_number = numbers[0];\n  float min_number = numbers[0];\n  for (int i = 0; i < numbers.size(); i++) {\n    max_number = std::max(max_number, numbers[i]);\n    min_number = std::min(min_number, numbers[i]);\n  }\n  std::vector<float> result;\n  for (int i = 0; i < numbers.size(); i++) {\n    result.push_back((numbers[i] - min_number) / (max_number - min_number));\n  }\n  return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<float> result;\n   float max_number = *std::max_element(numbers.begin(), numbers.end());\n   float min_number = *std::min_element(numbers.begin(), numbers.end());\n   for (int i = 0; i < numbers.size(); i++) {\n      result.push_back((numbers[i] - min_number) / (max_number - min_number));\n   }\n   return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "float max_value = *max_element(numbers.begin(), numbers.end());\n\tfloat min_value = *min_element(numbers.begin(), numbers.end());\n\tfor (float &n : numbers) {\n\t\tn = (n - min_value) / (max_value - min_value);\n\t}\n\treturn numbers;",
        "grade-35": {
            "execution": 1
        },
        "189": "std::vector<float> a;\n\tfloat max = *max_element(numbers.begin(), numbers.end());\n\tfloat min = *min_element(numbers.begin(), numbers.end());\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\ta.push_back((numbers[i] - min) / (max - min));\n\t}\n\treturn a;",
        "grade-189": {
            "execution": 1
        },
        "26": "float max = *std::max_element(numbers.begin(), numbers.end());\n  float min = *std::min_element(numbers.begin(), numbers.end());\n  std::vector<float> list;\n  for (int i = 0; i < numbers.size(); i++) {\n    float num = (numbers[i] - min) / (max - min);\n    list.push_back(num);\n  }\n  return list;",
        "grade-26": {
            "execution": 1
        },
        "174": "std::vector<float> result;\n  float smallest = numbers[0];\n  float largest = numbers[0];\n  for (float n : numbers) {\n    if (n < smallest) {\n      smallest = n;\n    }\n    if (n > largest) {\n      largest = n;\n    }\n  }\n  float range = largest - smallest;\n  for (float n : numbers) {\n    result.push_back((n - smallest) / range);\n  }\n  return result;",
        "grade-174": {
            "execution": 1
        },
        "140": "std::vector<float> res;\n    float min = *min_element(numbers.begin(), numbers.end());\n    float max = *max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    for (float i : numbers) {\n        res.push_back((i - min) / range);\n    }\n    return res;",
        "grade-140": {
            "execution": 1
        },
        "22": "float max = numbers[0];\n\tfloat min = numbers[0];\n\tfor (float num : numbers) {\n\t\tif (num > max) {\n\t\t\tmax = num;\n\t\t}\n\t\tif (num < min) {\n\t\t\tmin = num;\n\t\t}\n\t}\n\tfloat diff = max - min;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tnumbers[i] = (numbers[i] - min) / diff;\n\t}\n\treturn numbers;",
        "grade-22": {
            "execution": 1
        },
        "152": "std::vector<float>result(numbers.size());\n    float max = numbers[0];\n    float min = numbers[0];\n    for (auto &i : numbers) {\n        if (i > max) {\n            max = i;\n        }\n        if (i < min) {\n            min = i;\n        }\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;",
        "grade-152": {
            "execution": 1
        },
        "109": "float max = 0;\n\tfloat min = numbers[0];\n\tstd::vector<float> result;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t}\n\tif (max == min) {\n\t\tresult.push_back(1);\n\t\treturn result;\n\t}\n\tfloat newmax = 1;\n\tfloat newmin = 0;\n\tfloat a = (newmax - newmin) / (max - min);\n\tfloat b = newmin - (a * min);\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tresult.push_back(a * numbers[i] + b);\n\t}\n\treturn result;",
        "grade-109": {
            "execution": 1
        },
        "8": "assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float number : numbers) {\n        if (number < min) min = number;\n        if (number > max) max = number;\n    }\n    std::vector<float> result(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<float> ret;\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        ret.push_back((numbers[i] - min) / (max - min));\n    }\n    return ret;",
        "grade-7": {
            "execution": 1
        },
        "23": "// Save the min and max of the input, so that we know what the delta is\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float delta = max - min;\n    // Now scale all numbers to a fraction of the range\n    for (float &n : numbers) {\n        n = (n - min) / delta;\n    }\n    return numbers;",
        "grade-23": {
            "execution": 1
        },
        "55": "assert(numbers.size() > 1);\n    std::vector<float> ans;\n    auto it = std::minmax_element(numbers.begin(), numbers.end());\n    float min = *it.first;\n    float max = *it.second;\n    float d = max - min;\n    for (float x : numbers) {\n        ans.push_back((x - min) / d);\n    }\n    return ans;",
        "grade-55": {
            "execution": 1
        },
        "59": "assert(numbers.size() > 1);\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    std::vector<float> rescaled_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        rescaled_numbers.push_back((numbers[i] - min) / range);\n    }\n    return rescaled_numbers;",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.19944317933516723,
        "bleu-28": 0.08825199276072417,
        "bleu-6": 0.21674022257532197,
        "bleu-190": 0.4258227158617043,
        "bleu-70": 0.5636863027708776,
        "bleu-62": 0.4680088035625054,
        "bleu-57": 0.3000385834833419,
        "bleu-35": 0.04805183202060984,
        "bleu-189": 0.3758165337916002,
        "bleu-26": 0.39714397117422273,
        "bleu-174": 0.07675925612779627,
        "bleu-140": 0.07804652362850568,
        "bleu-22": 0.47503233182429094,
        "bleu-152": 0.5355187669441515,
        "bleu-109": 0.46812907869211834,
        "bleu-8": 0.5281025983684757,
        "bleu-7": 0.3785149693543402,
        "bleu-23": 0.0824213124376491,
        "bleu-55": 0.12230651513179482,
        "bleu-59": 0.35442414828555024,
        "codebleu-164": 0.5748086594612972,
        "codebleu-28": 0.5061927740448204,
        "codebleu-6": 0.4953948463387497,
        "codebleu-190": 0.5902333452649751,
        "codebleu-70": 0.7875447135375301,
        "codebleu-62": 0.7046983827803173,
        "codebleu-57": 0.5281910847966877,
        "codebleu-35": 0.3174575025774674,
        "codebleu-189": 0.5295723531639999,
        "codebleu-26": 0.5717446042379877,
        "codebleu-174": 0.45755170755170743,
        "codebleu-140": 0.40906885150805855,
        "codebleu-22": 0.6388375494045903,
        "codebleu-152": 0.6978168592557373,
        "codebleu-109": 0.7660386310084449,
        "codebleu-8": 0.6983146933707026,
        "codebleu-7": 0.5480045232992417,
        "codebleu-23": 0.4313221503108848,
        "codebleu-55": 0.46176169096187547,
        "codebleu-59": 0.5625427721415589,
        "chrf-164": 0.43697438172061076,
        "chrf-28": 0.3373360793882382,
        "chrf-6": 0.44184138106275034,
        "chrf-190": 0.5584117248977597,
        "chrf-70": 0.6062089576799498,
        "chrf-62": 0.5749942415273963,
        "chrf-57": 0.4487852547037579,
        "chrf-35": 0.31935524130407766,
        "chrf-189": 0.4659189723317623,
        "chrf-26": 0.4728730196566067,
        "chrf-174": 0.23516728667268263,
        "chrf-140": 0.304302425346491,
        "chrf-22": 0.5907141923941651,
        "chrf-152": 0.5848478892751808,
        "chrf-109": 0.6773071932496504,
        "chrf-8": 0.6421211880968284,
        "chrf-7": 0.46279706350601807,
        "chrf-23": 0.3372165149875642,
        "chrf-55": 0.30919090838204827,
        "chrf-59": 0.48839173163224586,
        "rougel-164": 0.38187702265372164,
        "rougel-28": 0.2857142857142857,
        "rougel-6": 0.4479166666666667,
        "rougel-190": 0.543778801843318,
        "rougel-70": 0.7456140350877192,
        "rougel-62": 0.6371681415929203,
        "rougel-57": 0.47290640394088673,
        "rougel-35": 0.36257309941520466,
        "rougel-189": 0.5380710659898477,
        "rougel-26": 0.5192307692307693,
        "rougel-174": 0.3571428571428571,
        "rougel-140": 0.35675675675675667,
        "rougel-22": 0.5742574257425742,
        "rougel-152": 0.6296296296296297,
        "rougel-109": 0.5683453237410072,
        "rougel-8": 0.6126126126126126,
        "rougel-7": 0.5221674876847291,
        "rougel-23": 0.3033175355450237,
        "rougel-55": 0.30769230769230765,
        "rougel-59": 0.4608294930875576,
        "meteor-164": 0.5188482961753379,
        "meteor-28": 0.34031795687092853,
        "meteor-6": 0.4029790623577606,
        "meteor-190": 0.6435103677621283,
        "meteor-70": 0.623404021229647,
        "meteor-62": 0.5558738529961841,
        "meteor-57": 0.3700721498439541,
        "meteor-35": 0.2920510304219824,
        "meteor-189": 0.4468618215674462,
        "meteor-26": 0.43913425579024823,
        "meteor-174": 0.2718763487665369,
        "meteor-140": 0.30759922555663116,
        "meteor-22": 0.6511677768367401,
        "meteor-152": 0.7666691900183487,
        "meteor-109": 0.6049759349287028,
        "meteor-8": 0.742385422298602,
        "meteor-7": 0.4443107550313809,
        "meteor-23": 0.3512747875354108,
        "meteor-55": 0.3144962613535149,
        "meteor-59": 0.47862144029111225,
        "ruby-164": 0.26108374384236455,
        "ruby-28": 0.15000000000000002,
        "ruby-6": 0.3113207547169812,
        "ruby-190": 0.4144144144144144,
        "ruby-70": 0.6885245901639344,
        "ruby-62": 0.5416666666666667,
        "ruby-57": 0.3867924528301887,
        "ruby-35": 0.2735849056603774,
        "ruby-189": 0.4339622641509434,
        "ruby-26": 0.3867924528301887,
        "ruby-174": 0.2075471698113207,
        "ruby-140": 0.23584905660377353,
        "ruby-22": 0.42452830188679247,
        "ruby-152": 0.4636363636363636,
        "ruby-109": 0.41279069767441856,
        "ruby-8": 0.4482758620689655,
        "ruby-7": 0.42452830188679247,
        "ruby-23": 0.1132075471698113,
        "ruby-55": 0.16981132075471694,
        "ruby-59": 0.33333333333333337,
        "codebertscore_f1-164": 0.772794246673584,
        "codebertscore_f3-164": 0.8134445548057556,
        "codebertscore_f1-28": 0.7492426633834839,
        "codebertscore_f3-28": 0.7911872863769531,
        "codebertscore_f1-6": 0.7920910120010376,
        "codebertscore_f3-6": 0.7850691080093384,
        "codebertscore_f1-190": 0.865504264831543,
        "codebertscore_f3-190": 0.8952993750572205,
        "codebertscore_f1-70": 0.8897241353988647,
        "codebertscore_f3-70": 0.8974971175193787,
        "codebertscore_f1-62": 0.868927538394928,
        "codebertscore_f3-62": 0.8836292624473572,
        "codebertscore_f1-57": 0.8356538414955139,
        "codebertscore_f3-57": 0.8660728335380554,
        "codebertscore_f1-35": 0.7805876135826111,
        "codebertscore_f3-35": 0.7820795774459839,
        "codebertscore_f1-189": 0.8454408645629883,
        "codebertscore_f3-189": 0.8692362904548645,
        "codebertscore_f1-26": 0.8420829176902771,
        "codebertscore_f3-26": 0.8733451962471008,
        "codebertscore_f1-174": 0.7901189923286438,
        "codebertscore_f3-174": 0.7837986350059509,
        "codebertscore_f1-140": 0.795832097530365,
        "codebertscore_f3-140": 0.8088237643241882,
        "codebertscore_f1-22": 0.8801571726799011,
        "codebertscore_f3-22": 0.8876555562019348,
        "codebertscore_f1-152": 0.8761784434318542,
        "codebertscore_f3-152": 0.8813087940216064,
        "codebertscore_f1-109": 0.8477893471717834,
        "codebertscore_f3-109": 0.882396936416626,
        "codebertscore_f1-8": 0.8833617568016052,
        "codebertscore_f3-8": 0.8946266174316406,
        "codebertscore_f1-7": 0.8417112231254578,
        "codebertscore_f3-7": 0.8714941143989563,
        "codebertscore_f1-23": 0.7528426051139832,
        "codebertscore_f3-23": 0.7862001657485962,
        "codebertscore_f1-55": 0.7717013359069824,
        "codebertscore_f3-55": 0.790503978729248,
        "codebertscore_f1-59": 0.8422094583511353,
        "codebertscore_f3-59": 0.8736771941184998,
        "codebertscore_s_f1-164": 0.7841171622276306,
        "codebertscore_s_f3-164": 0.8258956670761108,
        "codebertscore_s_f1-28": 0.7563305497169495,
        "codebertscore_s_f3-28": 0.7971845865249634,
        "codebertscore_s_f1-6": 0.8034424781799316,
        "codebertscore_s_f3-6": 0.7926213145256042,
        "codebertscore_s_f1-190": 0.8734508156776428,
        "codebertscore_s_f3-190": 0.9018151164054871,
        "codebertscore_s_f1-70": 0.8910425901412964,
        "codebertscore_s_f3-70": 0.898033857345581,
        "codebertscore_s_f1-62": 0.8712822794914246,
        "codebertscore_s_f3-62": 0.8853185176849365,
        "codebertscore_s_f1-57": 0.8466323614120483,
        "codebertscore_s_f3-57": 0.8755019307136536,
        "codebertscore_s_f1-35": 0.7901323437690735,
        "codebertscore_s_f3-35": 0.7881273031234741,
        "codebertscore_s_f1-189": 0.8529132008552551,
        "codebertscore_s_f3-189": 0.8768265247344971,
        "codebertscore_s_f1-26": 0.8515901565551758,
        "codebertscore_s_f3-26": 0.8802852630615234,
        "codebertscore_s_f1-174": 0.7999263405799866,
        "codebertscore_s_f3-174": 0.7914072275161743,
        "codebertscore_s_f1-140": 0.8046329021453857,
        "codebertscore_s_f3-140": 0.8143421411514282,
        "codebertscore_s_f1-22": 0.8889788389205933,
        "codebertscore_s_f3-22": 0.8923110961914062,
        "codebertscore_s_f1-152": 0.8854210376739502,
        "codebertscore_s_f3-152": 0.8908059597015381,
        "codebertscore_s_f1-109": 0.8558521866798401,
        "codebertscore_s_f3-109": 0.8878955841064453,
        "codebertscore_s_f1-8": 0.8944642543792725,
        "codebertscore_s_f3-8": 0.9032743573188782,
        "codebertscore_s_f1-7": 0.8518458008766174,
        "codebertscore_s_f3-7": 0.880494236946106,
        "codebertscore_s_f1-23": 0.7607710957527161,
        "codebertscore_s_f3-23": 0.7928940057754517,
        "codebertscore_s_f1-55": 0.7852587699890137,
        "codebertscore_s_f3-55": 0.798468291759491,
        "codebertscore_s_f1-59": 0.8504982590675354,
        "codebertscore_s_f3-59": 0.8798994421958923,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 1,
        "raw_gpt35_nswr-164": "1",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n",
        "snippet": [
            "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n"
        ],
        "simplified": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "task_id": "4",
        "163": "// Your code goes here.\n    float sum = 0.0;\n    float mean = 0.0;\n    for(int i = 0; i < numbers.size(); i++)\n        sum += numbers[i];\n    mean = sum / numbers.size();\n    for(int i = 0; i < numbers.size(); i++)\n        numbers[i] = abs(numbers[i] - mean);\n    sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++)\n        sum += numbers[i];\n    return sum / numbers.size();",
        "grade-163": {
            "execution": 0
        },
        "28": "// Return 0 if there are no numbers.\n    if (numbers.size() == 0) return 0;\n    // Calculate the mean first.\n    float mean = 0;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.size();\n    // Now calculate the absolute differences\n    float abs_diff = 0;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        abs_diff += std::abs(numbers[i] - mean);\n    }\n    // Return the average absolute difference\n    return abs_diff / numbers.size();",
        "grade-28": {
            "execution": 0
        },
        "6": "// Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    // 1.0\n    // Reference:\n    // https://www.geeksforgeeks.org/program-to-find-the-average-of-a-list-of-numbers-in-python/\n    assert(numbers.size() > 0);\n    float sum = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float sum_of_diffs = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum_of_diffs += fabs(numbers[i] - mean);\n    }\n    return sum_of_diffs / numbers.size();",
        "grade-6": {
            "execution": 0
        },
        "189": "// Find mean:\n    float sum = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    // Find absolute difference between each element and mean:\n    std::vector<float> abs_diff;\n    for (int i = 0; i < numbers.size(); i++) {\n        abs_diff.push_back(std::abs(numbers[i] - mean));\n    }\n    // Find average of absolute differences:\n    float sum_abs_diff = 0.0;\n    for (int i = 0; i < abs_diff.size(); i++) {\n        sum_abs_diff += abs_diff[i];\n    }\n    float mean_abs_diff = sum_abs_diff / abs_diff.size();\n    return mean_abs_diff;",
        "grade-189": {
            "execution": 0
        },
        "70": "// Compute the mean of the dataset as a float\n    float mean=0;\n    float x=0;\n    int n=numbers.size();\n    for(int i=0;i<n;i++)\n    {\n        x=x+numbers[i];\n    }\n    mean=x/n;\n    // Compute the absolute difference from the mean, then take the mean of that\n    std::vector<float> ab;\n    for(int i=0;i<n;i++)\n    {\n        ab.push_back(abs(numbers[i]-mean));\n    }\n    float y=0;\n    for(int i=0;i<n;i++)\n    {\n        y=y+ab[i];\n    }\n    float mad=y/n;\n    return mad;",
        "grade-70": {
            "execution": 0
        },
        "62": "float mean_of_elems = 0.0;\n  for (auto elem : numbers) {\n    mean_of_elems += elem;\n  }\n  mean_of_elems /= numbers.size();\n  float mad = 0.0;\n  for (auto elem : numbers) {\n    mad += abs(elem - mean_of_elems);\n  }\n  mad /= numbers.size();\n  return mad;",
        "grade-62": {
            "execution": 0
        },
        "57": "float sum = 0;\n    for (std::vector<float>::iterator it = numbers.begin(); it != numbers.end(); ++it) {\n        sum += *it;\n    }\n    float mean = sum / numbers.size();\n    float mad = 0;\n    for (std::vector<float>::iterator it = numbers.begin(); it != numbers.end(); ++it) {\n        mad += std::abs(*it - mean);\n    }\n    return mad / numbers.size();",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(numbers.size() > 0);\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    float sum2 = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum2 += abs(numbers[i] - mean);\n    }\n    float median = sum2 / numbers.size();\n    return median;",
        "grade-35": {
            "execution": 0
        },
        "188": "int n = numbers.size();\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / n;\n  // float sum_sq = 0.0;\n  float sum_abs = 0.0;\n  for (int i = 0; i < n; i++) {\n    // sum_sq += std::pow(numbers[i] - mean, 2);\n    sum_abs += std::abs(numbers[i] - mean);\n  }\n  return sum_abs / n;",
        "grade-188": {
            "execution": 0
        },
        "26": "// TODO: Find the mean value in the numbers vector.\n    float sum = 0;\n    int n = numbers.size();\n    for(int i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n    float mean = sum / n;\n    // TODO: For each element in the numbers vector, find the absolute\n    // difference between it and the mean.\n    float abs_diff = 0;\n    for(int i = 0; i < n; i++) {\n        abs_diff += abs(numbers[i] - mean);\n    }\n    // TODO: Return the mean of all absolute differences.\n    return abs_diff / n;",
        "grade-26": {
            "execution": 0
        },
        "173": "float sum = 0;\n    float mean = 0;\n    int i;\n    int n = numbers.size();\n    if (n == 0) {\n        return 0;\n    }\n    // Calculate mean of the numbers first\n    for (i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / n;\n    // Calculate mean absolute deviation\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / n;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<float> deviations;\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor (unsigned int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t}\n\tmean = sum / numbers.size();\n\tfor (unsigned int i = 0; i < numbers.size(); i++) {\n\t\tdeviations.push_back(abs(numbers[i] - mean));\n\t}\n\tsum = 0;\n\tfor (unsigned int i = 0; i < deviations.size(); i++) {\n\t\tsum += deviations[i];\n\t}\n\treturn sum / deviations.size();",
        "grade-139": {
            "execution": 0
        },
        "22": "float sum = 0.0;\n    float mean = 0.0;\n    float abs_diff_sum = 0.0;\n    int numbers_size = 0;\n    numbers_size = numbers.size();\n    assert(numbers_size > 0);\n    // For each element in the list\n    for (int i = 0; i < numbers_size; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers_size;\n    // For each element in the list\n    for (int i = 0; i < numbers_size; i++) {\n        abs_diff_sum += std::abs(numbers[i] - mean);\n    }\n    return abs_diff_sum / numbers_size;",
        "grade-22": {
            "execution": 0
        },
        "151": "float mean = 0;\n    for (auto number : numbers) {\n        mean += number;\n    }\n    mean /= numbers.size();\n    float m_abs_dev = 0;\n    for (auto number : numbers) {\n        m_abs_dev += std::abs(number - mean);\n    }\n    m_abs_dev /= numbers.size();\n    return m_abs_dev;",
        "grade-151": {
            "execution": 0
        },
        "108": "float sum_numbers = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum_numbers += numbers[i];\n\t}\n\tfloat mean = sum_numbers / numbers.size();\n\tfloat sum_absolute_deviation = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum_absolute_deviation += abs(numbers[i] - mean);\n\t}\n\treturn sum_absolute_deviation / numbers.size();",
        "grade-108": {
            "execution": 0
        },
        "8": "assert(numbers.size() > 0);\n\tfloat sum = 0;\n\tfloat sum_squares = 0;\n\tint count = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tsum_squares += numbers[i] * numbers[i];\n\t\tcount++;\n\t}\n\tfloat mean = sum / count;\n\tfloat variance = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tvariance += pow(numbers[i] - mean, 2);\n\t}\n\tvariance = variance / (count - 1);\n\tfloat std_dev = sqrt(variance);\n\treturn std_dev;",
        "grade-8": {
            "execution": 0
        },
        "7": "float sum = 0.0;\n    float avg = 0.0;\n    float count = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        count += 1.0;\n    }\n    avg = sum / count;\n    float sum_abs_diff = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum_abs_diff += std::abs(numbers[i] - avg);\n    }\n    return sum_abs_diff / count;",
        "grade-7": {
            "execution": 0
        },
        "23": "float average = 0;\n\tint sum = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t}\n\taverage = sum / numbers.size();\n\tstd::vector<float> diffs;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tfloat diff = abs(numbers[i] - average);\n\t\tdiffs.push_back(diff);\n\t}\n\tint diffs_sum = 0;\n\tfor (int i = 0; i < diffs.size(); i++) {\n\t\tdiffs_sum += diffs[i];\n\t}\n\tfloat mad = diffs_sum / diffs.size();\n\treturn mad;",
        "grade-23": {
            "execution": 0
        },
        "55": "assert(numbers.size() > 0);\n    float sum = 0;\n    float mean = 0;\n    int n = numbers.size();\n    for (int i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / n;\n    float MAD = 0;\n    for (int i = 0; i < n; i++) {\n        MAD += abs(numbers[i] - mean);\n    }\n    MAD = MAD / n;\n    return MAD;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Calculate mean\n\tdouble total = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\ttotal += numbers[i];\n\t}\n\tdouble mean = total / numbers.size();\n\tstd::cout << \"Mean = \" << mean << std::endl;\n\t// Calculate MAD\n\tdouble mad = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tmad += abs(numbers[i] - mean);\n\t}\n\tmad /= numbers.size();\n\treturn mad;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.5235347473084553,
        "bleu-28": 0.43797838196996786,
        "bleu-6": 0.317770048478606,
        "bleu-189": 0.390439289452051,
        "bleu-70": 0.2699018840312515,
        "bleu-62": 0.20212490344432163,
        "bleu-57": 0.26879270972328706,
        "bleu-35": 0.6277790737948084,
        "bleu-188": 0.29178210027813817,
        "bleu-26": 0.3520718212995801,
        "bleu-173": 0.44754303483604585,
        "bleu-139": 0.4892388604426433,
        "bleu-22": 0.35130954578506285,
        "bleu-151": 0.1999660283571387,
        "bleu-108": 0.6494831797108033,
        "bleu-8": 0.44129648501014723,
        "bleu-7": 0.5419522328420869,
        "bleu-23": 0.46166615597817917,
        "bleu-55": 0.5026941763131753,
        "bleu-59": 0.5089665768408508,
        "codebleu-163": 0.7634401631162784,
        "codebleu-28": 0.7153144962048956,
        "codebleu-6": 0.752558778125395,
        "codebleu-189": 0.7408990948933456,
        "codebleu-70": 0.6773948561041641,
        "codebleu-62": 0.35403406658692604,
        "codebleu-57": 0.6209128801883388,
        "codebleu-35": 0.7973041937749737,
        "codebleu-188": 0.6314994464581655,
        "codebleu-26": 0.6471651638130783,
        "codebleu-173": 0.6871784971429653,
        "codebleu-139": 0.784899561761741,
        "codebleu-22": 0.6569762972211034,
        "codebleu-151": 0.38621926865673706,
        "codebleu-108": 0.7464582626661824,
        "codebleu-8": 0.7622310499157302,
        "codebleu-7": 0.6884115122081401,
        "codebleu-23": 0.7825515848668086,
        "codebleu-55": 0.7190984783009691,
        "codebleu-59": 0.7491570721595949,
        "chrf-163": 0.7061586675846531,
        "chrf-28": 0.5404808870687321,
        "chrf-6": 0.545761519404976,
        "chrf-189": 0.5516986374897654,
        "chrf-70": 0.3968105097138871,
        "chrf-62": 0.35221816987239246,
        "chrf-57": 0.4557157283821401,
        "chrf-35": 0.7132105106103748,
        "chrf-188": 0.44213040935938197,
        "chrf-26": 0.4611869650240316,
        "chrf-173": 0.5426273694566943,
        "chrf-139": 0.6299092425074687,
        "chrf-22": 0.5354356658924844,
        "chrf-151": 0.3997618212120068,
        "chrf-108": 0.6401570374505704,
        "chrf-8": 0.5824392281315263,
        "chrf-7": 0.5966995608359543,
        "chrf-23": 0.6496145509630277,
        "chrf-55": 0.5469932386749768,
        "chrf-59": 0.595404364176169,
        "rougel-163": 0.689655172413793,
        "rougel-28": 0.6666666666666666,
        "rougel-6": 0.5342019543973942,
        "rougel-189": 0.5692883895131086,
        "rougel-70": 0.44961240310077516,
        "rougel-62": 0.48192771084337355,
        "rougel-57": 0.5504587155963303,
        "rougel-35": 0.7867298578199051,
        "rougel-188": 0.4326923076923077,
        "rougel-26": 0.5493562231759657,
        "rougel-173": 0.6261682242990655,
        "rougel-139": 0.649789029535865,
        "rougel-22": 0.5625000000000001,
        "rougel-151": 0.4727272727272727,
        "rougel-108": 0.806282722513089,
        "rougel-8": 0.6359832635983265,
        "rougel-7": 0.7428571428571428,
        "rougel-23": 0.6367346938775511,
        "rougel-55": 0.6305418719211824,
        "rougel-59": 0.6756756756756757,
        "meteor-163": 0.742116101420735,
        "meteor-28": 0.7981387006125383,
        "meteor-6": 0.8002978918423465,
        "meteor-189": 0.6387432889852307,
        "meteor-70": 0.5408000741701713,
        "meteor-62": 0.3647098796554068,
        "meteor-57": 0.53788279978248,
        "meteor-35": 0.8178174529670416,
        "meteor-188": 0.44113771109162936,
        "meteor-26": 0.6747889752326789,
        "meteor-173": 0.6824825204425472,
        "meteor-139": 0.705248572421997,
        "meteor-22": 0.636539632944456,
        "meteor-151": 0.3643825121962505,
        "meteor-108": 0.8178084935897437,
        "meteor-8": 0.6041421824800809,
        "meteor-7": 0.6892023420801627,
        "meteor-23": 0.6345874514235794,
        "meteor-55": 0.597440659027216,
        "meteor-59": 0.7618581312578047,
        "ruby-163": 0.5298507462686567,
        "ruby-28": 0.5467625899280575,
        "ruby-6": 0.3875598086124402,
        "ruby-189": 0.4023668639053254,
        "ruby-70": 0.29374999999999996,
        "ruby-62": 0.33673469387755106,
        "ruby-57": 0.42500000000000004,
        "ruby-35": 0.6991150442477876,
        "ruby-188": 0.26363636363636367,
        "ruby-26": 0.37037037037037035,
        "ruby-173": 0.4568965517241379,
        "ruby-139": 0.49640287769784175,
        "ruby-22": 0.40476190476190477,
        "ruby-151": 0.33673469387755106,
        "ruby-108": 0.7040816326530612,
        "ruby-8": 0.5177304964539007,
        "ruby-7": 0.625,
        "ruby-23": 0.48299319727891155,
        "ruby-55": 0.4571428571428572,
        "ruby-59": 0.5403225806451613,
        "codebertscore_f1-163": 0.8832151889801025,
        "codebertscore_f3-163": 0.884490966796875,
        "codebertscore_f1-28": 0.8184027075767517,
        "codebertscore_f3-28": 0.8473866581916809,
        "codebertscore_f1-6": 0.7430316209793091,
        "codebertscore_f3-6": 0.8016042709350586,
        "codebertscore_f1-189": 0.8188496232032776,
        "codebertscore_f3-189": 0.8530480265617371,
        "codebertscore_f1-70": 0.8122380375862122,
        "codebertscore_f3-70": 0.8484964966773987,
        "codebertscore_f1-62": 0.7932822704315186,
        "codebertscore_f3-62": 0.7985544800758362,
        "codebertscore_f1-57": 0.8386930823326111,
        "codebertscore_f3-57": 0.842029869556427,
        "codebertscore_f1-35": 0.8920360803604126,
        "codebertscore_f3-35": 0.8889952301979065,
        "codebertscore_f1-188": 0.8416377305984497,
        "codebertscore_f3-188": 0.864162027835846,
        "codebertscore_f1-26": 0.8045993447303772,
        "codebertscore_f3-26": 0.8459405303001404,
        "codebertscore_f1-173": 0.8472146391868591,
        "codebertscore_f3-173": 0.8657287955284119,
        "codebertscore_f1-139": 0.8690232038497925,
        "codebertscore_f3-139": 0.8728044033050537,
        "codebertscore_f1-22": 0.834572970867157,
        "codebertscore_f3-22": 0.8561140894889832,
        "codebertscore_f1-151": 0.8111549019813538,
        "codebertscore_f3-151": 0.8048445582389832,
        "codebertscore_f1-108": 0.8834702968597412,
        "codebertscore_f3-108": 0.8842325210571289,
        "codebertscore_f1-8": 0.8534899353981018,
        "codebertscore_f3-8": 0.8706921935081482,
        "codebertscore_f1-7": 0.878555417060852,
        "codebertscore_f3-7": 0.8872446417808533,
        "codebertscore_f1-23": 0.862591564655304,
        "codebertscore_f3-23": 0.8777309656143188,
        "codebertscore_f1-55": 0.879638671875,
        "codebertscore_f3-55": 0.880183756351471,
        "codebertscore_f1-59": 0.852627158164978,
        "codebertscore_f3-59": 0.8704842329025269,
        "codebertscore_s_f1-163": 0.8923671841621399,
        "codebertscore_s_f3-163": 0.895949125289917,
        "codebertscore_s_f1-28": 0.8289936184883118,
        "codebertscore_s_f3-28": 0.8603383302688599,
        "codebertscore_s_f1-6": 0.763798713684082,
        "codebertscore_s_f3-6": 0.8269699215888977,
        "codebertscore_s_f1-189": 0.8300734758377075,
        "codebertscore_s_f3-189": 0.8660154342651367,
        "codebertscore_s_f1-70": 0.8231218457221985,
        "codebertscore_s_f3-70": 0.8613634705543518,
        "codebertscore_s_f1-62": 0.7882108092308044,
        "codebertscore_s_f3-62": 0.7928528785705566,
        "codebertscore_s_f1-57": 0.836444079875946,
        "codebertscore_s_f3-57": 0.839152455329895,
        "codebertscore_s_f1-35": 0.9032614231109619,
        "codebertscore_s_f3-35": 0.901897668838501,
        "codebertscore_s_f1-188": 0.8448137640953064,
        "codebertscore_s_f3-188": 0.8697460889816284,
        "codebertscore_s_f1-26": 0.8191295862197876,
        "codebertscore_s_f3-26": 0.863879382610321,
        "codebertscore_s_f1-173": 0.8547772765159607,
        "codebertscore_s_f3-173": 0.8730705976486206,
        "codebertscore_s_f1-139": 0.879317581653595,
        "codebertscore_s_f3-139": 0.8859686255455017,
        "codebertscore_s_f1-22": 0.8403595685958862,
        "codebertscore_s_f3-22": 0.8632602691650391,
        "codebertscore_s_f1-151": 0.8110530972480774,
        "codebertscore_s_f3-151": 0.8040780425071716,
        "codebertscore_s_f1-108": 0.8849749565124512,
        "codebertscore_s_f3-108": 0.8859657645225525,
        "codebertscore_s_f1-8": 0.85709547996521,
        "codebertscore_s_f3-8": 0.8763384222984314,
        "codebertscore_s_f1-7": 0.8824503421783447,
        "codebertscore_s_f3-7": 0.8918190002441406,
        "codebertscore_s_f1-23": 0.8645555973052979,
        "codebertscore_s_f3-23": 0.8818801641464233,
        "codebertscore_s_f1-55": 0.8893096446990967,
        "codebertscore_s_f3-55": 0.8919743895530701,
        "codebertscore_s_f1-59": 0.8531338572502136,
        "codebertscore_s_f3-59": 0.872277557849884,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\n",
        "snippet": [
            "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n"
        ],
        "simplified": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
        "task_id": "139",
        "171": "long result=1;\n    for(int i=1;i<=n;i++){\n        result*=i;\n    }\n    return result;",
        "grade-171": {
            "execution": 0
        },
        "30": "// Write your code here\n    // To print results to the standard output you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n == 0) {\n        return 1;\n    } else {\n        return n * special_factorial(n - 1);\n    }",
        "grade-6": {
            "execution": 0
        },
        "73": "long long factorial = 1;\n  long long fact = 1;\n  for (long i = 1; i <= n; i++) {\n    factorial *= i;\n    fact *= factorial;\n  }\n  return fact;",
        "grade-73": {
            "execution": 1
        },
        "64": "long result = 1;\n  while (n > 0) {\n    long factorial = 1;\n    long temp = n;\n    while (temp > 0) {\n      factorial *= temp;\n      temp--;\n    }\n    result *= factorial;\n    n--;\n  }\n  return result;",
        "grade-64": {
            "execution": 1
        },
        "59": "// assert(n > 0);\n  // TODO: implement this function correctly\n  assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  int fac = 1;\n  for (int i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac * special_factorial(n - 1);",
        "grade-59": {
            "execution": 1
        },
        "37": "long a=1;\n  for(int i=1;i<=n;i++)\n  {\n    a=a*i;\n  }\n  return a;",
        "grade-37": {
            "execution": 0
        },
        "27": "long result = 1;\n    if (n == 0)\n        return 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;",
        "grade-27": {
            "execution": 0
        },
        "184": "long fac = 1;\n  for (int i = n; i > 0; i--)\n    fac *= i;\n  return fac;",
        "grade-184": {
            "execution": 0
        },
        "144": "int num = n;\n    int factorial = 1;\n    for (int i = 1; i <= num; ++i) {\n        factorial *= i;\n    }\n    return factorial;",
        "grade-144": {
            "execution": 0
        },
        "23": "// Your code goes here\n  long output=1;\n  if(n==0)\n  {\n    return 1;\n  }\n  for(int i=n;i>0;i--)\n  {\n    output*=i;\n  }\n  return output;",
        "grade-23": {
            "execution": 0
        },
        "157": "return (n > 1) ? n * special_factorial(n - 1) : 1;",
        "grade-157": {
            "execution": 0
        },
        "112": "assert(n > 0);\n  long ans = 1;\n  for (long i = 1; i <= n; i++) {\n    long fact = 1;\n    for (long j = 1; j <= i; j++) {\n      fact *= j;\n    }\n    ans *= fact;\n  }\n  return ans;",
        "grade-112": {
            "execution": 1
        },
        "8": "if (n == 1) return 1;\n  long fact = n;\n  for (int i = 1; i < n; i++) {\n    fact *= (n - i);\n  }\n  return fact;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(n > 0);\n  // Write your code here!\n  return 0;",
        "grade-7": {
            "execution": 0
        },
        "24": "long int fact[n+1];\n    fact[0]=1;\n    fact[1]=1;\n    for(int i=2;i<=n;i++)\n    {\n        fact[i]=fact[i-1]*i;\n    }\n    long ans=1;\n    for(int i=0;i<=n;i++)\n    {\n        ans=ans*fact[i];\n    }\n    return ans;",
        "grade-24": {
            "execution": 1
        },
        "57": "// Your code here\n    if(n==0){\n        return 1;\n    }\n    long fact = 1;\n    long mod = 10;\n    while(n>0){\n        fact *= n;\n        fact %= mod;\n        n--;\n    }\n    return fact;",
        "grade-57": {
            "execution": 0
        },
        "61": "long ans = 1;\n  while(n > 0) {\n    ans *= factorial(n);\n    n--;\n  }\n  return ans;",
        "grade-61": {
            "execution": 0
        },
        "134": "long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2; i > 0; i--) {\n    result *= i;\n  }\n  return result;",
        "grade-134": {
            "execution": 0
        },
        "160": "long i,f=1;\n    for(i=n;i>=1;i--)\n    {\n        f=f*i;\n    }\n    return f;",
        "grade-160": {
            "execution": 0
        },
        "bleu-171": 0.4710451881968143,
        "bleu-30": 0.011734190039234364,
        "bleu-6": 0.03240673381888667,
        "bleu-73": 0.5352293333509477,
        "bleu-64": 0.0927097496488127,
        "bleu-59": 0.3102384127059562,
        "bleu-37": 0.48777892720034716,
        "bleu-27": 0.5063034686840439,
        "bleu-184": 0.22368320722414692,
        "bleu-144": 0.37990324434519585,
        "bleu-23": 0.21185902388463876,
        "bleu-157": 0.014756749732948238,
        "bleu-112": 0.3720771325025895,
        "bleu-8": 0.4803122946335449,
        "bleu-7": 0.0073119623281346635,
        "bleu-24": 0.2623417785578918,
        "bleu-57": 0.13793498383724034,
        "bleu-61": 0.06276799445778312,
        "bleu-134": 0.1288970287045925,
        "bleu-160": 0.2493383487562099,
        "codebleu-171": 0.4599390482429634,
        "codebleu-30": 0.22460746622308428,
        "codebleu-6": 0.2133681537392425,
        "codebleu-73": 0.6163350266390523,
        "codebleu-64": 0.4317617866004962,
        "codebleu-59": 0.5727183934057947,
        "codebleu-37": 0.5274992408650349,
        "codebleu-27": 0.5149111707096894,
        "codebleu-184": 0.33362134938660465,
        "codebleu-144": 0.519893030222282,
        "codebleu-23": 0.49319073161017996,
        "codebleu-157": 0.13082932872214817,
        "codebleu-112": 0.6024303099417343,
        "codebleu-8": 0.5559117260351487,
        "codebleu-7": 0.12899944053807894,
        "codebleu-24": 0.6754475208137514,
        "codebleu-57": 0.4332270541072126,
        "codebleu-61": 0.24643370856437563,
        "codebleu-134": 0.5072777734088089,
        "codebleu-160": 0.44975746538118266,
        "chrf-171": 0.39639874743708825,
        "chrf-30": 0.08788185041783925,
        "chrf-6": 0.13366781473033285,
        "chrf-73": 0.5582662961373033,
        "chrf-64": 0.2878245718962641,
        "chrf-59": 0.40925275040350007,
        "chrf-37": 0.39994676843357785,
        "chrf-27": 0.38439619037398065,
        "chrf-184": 0.2940934420813443,
        "chrf-144": 0.39066068027379136,
        "chrf-23": 0.25736199709490276,
        "chrf-157": 0.11333159869259775,
        "chrf-112": 0.4911123594635372,
        "chrf-8": 0.46049020944072483,
        "chrf-7": 0.07403497712962474,
        "chrf-24": 0.4671938645046075,
        "chrf-57": 0.3283113835211259,
        "chrf-61": 0.1768340888872887,
        "chrf-134": 0.23182619414325056,
        "chrf-160": 0.2520554350028271,
        "rougel-171": 0.72,
        "rougel-30": 0.07228915662650602,
        "rougel-6": 0.2898550724637681,
        "rougel-73": 0.7126436781609196,
        "rougel-64": 0.41666666666666663,
        "rougel-59": 0.4745762711864407,
        "rougel-37": 0.7368421052631579,
        "rougel-27": 0.6823529411764706,
        "rougel-184": 0.5277777777777777,
        "rougel-144": 0.625,
        "rougel-23": 0.5,
        "rougel-157": 0.16129032258064516,
        "rougel-112": 0.5636363636363637,
        "rougel-8": 0.6136363636363636,
        "rougel-7": 0.19672131147540983,
        "rougel-24": 0.537313432835821,
        "rougel-57": 0.3958333333333333,
        "rougel-61": 0.3888888888888889,
        "rougel-134": 0.4098360655737705,
        "rougel-160": 0.5974025974025974,
        "meteor-171": 0.5362519715146011,
        "meteor-30": 0.04597701149425287,
        "meteor-6": 0.22783460177420134,
        "meteor-73": 0.7768690767456904,
        "meteor-64": 0.3562709263392857,
        "meteor-59": 0.4638747240294629,
        "meteor-37": 0.5349990463475109,
        "meteor-27": 0.596317666618993,
        "meteor-184": 0.3857549309031789,
        "meteor-144": 0.5038506848108512,
        "meteor-23": 0.5157198014340871,
        "meteor-157": 0.10869565217391305,
        "meteor-112": 0.6773437178842584,
        "meteor-8": 0.5329801038062284,
        "meteor-7": 0.07263922518159806,
        "meteor-24": 0.6539854925419978,
        "meteor-57": 0.40256867255830897,
        "meteor-61": 0.17688679245283015,
        "meteor-134": 0.3862998722322476,
        "meteor-160": 0.4463903946152467,
        "ruby-171": 0.6136363636363636,
        "ruby-30": 0.022727272727272707,
        "ruby-6": 0.18181818181818177,
        "ruby-73": 0.6136363636363636,
        "ruby-64": 0.3076923076923077,
        "ruby-59": 0.32432432432432434,
        "ruby-37": 0.6363636363636364,
        "ruby-27": 0.5227272727272727,
        "ruby-184": 0.43181818181818177,
        "ruby-144": 0.5227272727272727,
        "ruby-23": 0.29166666666666663,
        "ruby-157": 0.11363636363636365,
        "ruby-112": 0.43939393939393945,
        "ruby-8": 0.4772727272727273,
        "ruby-7": 0.13636363636363635,
        "ruby-24": 0.38888888888888884,
        "ruby-57": 0.2692307692307693,
        "ruby-61": 0.2727272727272727,
        "ruby-134": 0.28205128205128205,
        "ruby-160": 0.5227272727272727,
        "codebertscore_f1-171": 0.8768600225448608,
        "codebertscore_f3-171": 0.8466886878013611,
        "codebertscore_f1-30": 0.6053008437156677,
        "codebertscore_f3-30": 0.6078592538833618,
        "codebertscore_f1-6": 0.7470338344573975,
        "codebertscore_f3-6": 0.7334839701652527,
        "codebertscore_f1-73": 0.8987259268760681,
        "codebertscore_f3-73": 0.8907451033592224,
        "codebertscore_f1-64": 0.8041156530380249,
        "codebertscore_f3-64": 0.8071166276931763,
        "codebertscore_f1-59": 0.8010396957397461,
        "codebertscore_f3-59": 0.8267636299133301,
        "codebertscore_f1-37": 0.8908816576004028,
        "codebertscore_f3-37": 0.8663333058357239,
        "codebertscore_f1-27": 0.858871579170227,
        "codebertscore_f3-27": 0.8389536738395691,
        "codebertscore_f1-184": 0.8644605875015259,
        "codebertscore_f3-184": 0.8492618203163147,
        "codebertscore_f1-144": 0.8684306144714355,
        "codebertscore_f3-144": 0.8560473918914795,
        "codebertscore_f1-23": 0.8095227479934692,
        "codebertscore_f3-23": 0.8216851949691772,
        "codebertscore_f1-157": 0.7566133141517639,
        "codebertscore_f3-157": 0.7374750375747681,
        "codebertscore_f1-112": 0.8631155490875244,
        "codebertscore_f3-112": 0.8611788153648376,
        "codebertscore_f1-8": 0.8760522603988647,
        "codebertscore_f3-8": 0.8667659163475037,
        "codebertscore_f1-7": 0.6662307977676392,
        "codebertscore_f3-7": 0.6661394834518433,
        "codebertscore_f1-24": 0.8607034683227539,
        "codebertscore_f3-24": 0.8689320683479309,
        "codebertscore_f1-57": 0.7842375040054321,
        "codebertscore_f3-57": 0.7932223081588745,
        "codebertscore_f1-61": 0.7957862615585327,
        "codebertscore_f3-61": 0.7833548188209534,
        "codebertscore_f1-134": 0.7993872165679932,
        "codebertscore_f3-134": 0.7980497479438782,
        "codebertscore_f1-160": 0.8718675971031189,
        "codebertscore_f3-160": 0.8529497981071472,
        "codebertscore_s_f1-171": 0.9539193511009216,
        "codebertscore_s_f3-171": 0.9372247457504272,
        "codebertscore_s_f1-30": 0.8692761659622192,
        "codebertscore_s_f3-30": 0.8699501752853394,
        "codebertscore_s_f1-6": 0.9215866327285767,
        "codebertscore_s_f3-6": 0.9021967649459839,
        "codebertscore_s_f1-73": 0.9607829451560974,
        "codebertscore_s_f3-73": 0.954892635345459,
        "codebertscore_s_f1-64": 0.9242987632751465,
        "codebertscore_s_f3-64": 0.9228135347366333,
        "codebertscore_s_f1-59": 0.9201604723930359,
        "codebertscore_s_f3-59": 0.9310227632522583,
        "codebertscore_s_f1-37": 0.9586173892021179,
        "codebertscore_s_f3-37": 0.9445603489875793,
        "codebertscore_s_f1-27": 0.9487478733062744,
        "codebertscore_s_f3-27": 0.9365215301513672,
        "codebertscore_s_f1-184": 0.9509657025337219,
        "codebertscore_s_f3-184": 0.9370113611221313,
        "codebertscore_s_f1-144": 0.9527013897895813,
        "codebertscore_s_f3-144": 0.945317268371582,
        "codebertscore_s_f1-23": 0.9309185743331909,
        "codebertscore_s_f3-23": 0.9291357398033142,
        "codebertscore_s_f1-157": 0.9217424988746643,
        "codebertscore_s_f3-157": 0.8977344036102295,
        "codebertscore_s_f1-112": 0.9449511766433716,
        "codebertscore_s_f3-112": 0.9444553852081299,
        "codebertscore_s_f1-8": 0.9522433876991272,
        "codebertscore_s_f3-8": 0.9457802772521973,
        "codebertscore_s_f1-7": 0.9037595391273499,
        "codebertscore_s_f3-7": 0.8813668489456177,
        "codebertscore_s_f1-24": 0.9358781576156616,
        "codebertscore_s_f3-24": 0.9453575015068054,
        "codebertscore_s_f1-57": 0.917211651802063,
        "codebertscore_s_f3-57": 0.916175127029419,
        "codebertscore_s_f1-61": 0.9304804801940918,
        "codebertscore_s_f3-61": 0.912579357624054,
        "codebertscore_s_f1-134": 0.9156404137611389,
        "codebertscore_s_f3-134": 0.918721079826355,
        "codebertscore_s_f1-160": 0.9548787474632263,
        "codebertscore_s_f3-160": 0.942719578742981,
        "gpt35_nsnr-171": 3,
        "raw_gpt35_nsnr-171": "3",
        "gpt35_nsnr-30": 0,
        "raw_gpt35_nsnr-30": "0",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-73": 3,
        "raw_gpt35_nsnr-73": "3",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-184": 3,
        "raw_gpt35_nsnr-184": "3",
        "gpt35_nsnr-144": 3,
        "raw_gpt35_nsnr-144": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-157": 3,
        "raw_gpt35_nsnr-157": "3",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "Score: 0",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-61": 0,
        "raw_gpt35_nsnr-61": "Functional Correctness: 2",
        "gpt35_nsnr-134": 4,
        "raw_gpt35_nsnr-134": "4",
        "gpt35_nsnr-160": 3,
        "raw_gpt35_nsnr-160": "3",
        "gpt35_nswr-171": 3,
        "raw_gpt35_nswr-171": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-144": 3,
        "raw_gpt35_nswr-144": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-157": 0,
        "raw_gpt35_nswr-157": "Score: 0\n\nExplanation:\nThe code snippet is not implementing the required functionality of the problem. It is calculating the regular factorial of n, not the Brazilian factorial. The reference code is correct and implements the required functionality.",
        "gpt35_nswr-112": 3,
        "raw_gpt35_nswr-112": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-134": 2,
        "raw_gpt35_nswr-134": "2",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool valid_date(std::string date) {\n",
        "snippet": [
            "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n"
        ],
        "simplified": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "task_id": "124",
        "165": "// Your code here\n    if(date.length()==0)\n        return false;\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year = date.substr(6,4);\n    // checking for invalid months\n    if(std::stoi(month)>12||std::stoi(month)<1)\n        return false;\n    // checking for invalid days\n    if(std::stoi(day)>31||std::stoi(day)<1)\n        return false;\n    if(std::stoi(month)==4||std::stoi(month)==6||std::stoi(month)==9||std::stoi(month)==11)\n    {\n        if(std::stoi(day)>30)\n            return false;\n    }\n    if(std::stoi(month)==2)\n    {\n        if(std::stoi(day)>29)\n            return false;\n    }\n    if(date[2]!='-'||date[5]!='-')\n        return false;\n    return true;",
        "grade-165": {
            "execution": 1
        },
        "28": "//your code here\n  assert(!date.empty());\n  bool invalid = false;\n  for(int i = 0; i < date.size(); i++){\n    if(date[i] == '/') {\n      invalid = true;\n      break;\n    }\n  }\n  if(invalid) return false;\n  std::string mm, dd, yyyy;\n  mm = date.substr(0,2);\n  dd = date.substr(3,2);\n  yyyy = date.substr(6,4);\n  int month = stoi(mm);\n  int day = stoi(dd);\n  int year = stoi(yyyy);\n  int thirt[7] = {1,3,5,7,8,10,12};\n  std::set<int> thirty(thirt, thirt+7);\n  int leap = 28;\n  if(year % 4 == 0) leap = 29;\n  if(month > 12) return false;\n  if(thirty.find(month) != thirty.end()){\n    if(day > 31) return false;\n  }\n  else if(month == 2){\n    if(day > leap) return false;\n  }\n  else{\n    if(day > 30) return false;\n  }\n  return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "bool res = true;\n\tint month = 0, day = 0, year = 0;\n\tint count = 0;\n\tfor (size_t i = 0; i < date.size(); i++) {\n\t\tif (date[i] == '-')\n\t\t\tcount++;\n\t}\n\tif (count != 2)\n\t\treturn false;\n\tsize_t pos = date.find('-');\n\tif (pos != 2)\n\t\treturn false;\n\tstd::stringstream ss;\n\tss << date.substr(0, 2);\n\tss >> month;\n\tss.clear();\n\tsize_t pos2 = date.find('-', pos + 1);\n\tss << date.substr(pos + 1, pos2 - pos - 1);\n\tss >> day;\n\tss.clear();\n\tss << date.substr(pos2 + 1, date.size() - pos2 - 1);\n\tss >> year;\n\tss.clear();\n\tif (month < 1 || month > 12)\n\t\treturn false;\n\tswitch (month) {\n\tcase 1:\n\tcase 3:\n\tcase 5:\n\tcase 7:\n\tcase 8:\n\tcase 10:\n\tcase 12:\n\t\tif (day < 1 || day > 31)\n\t\t\treturn false;\n\t\tbreak;\n\tcase 4:\n\tcase 6:\n\tcase 9:\n\tcase 11:\n\t\tif (day < 1 || day > 30)\n\t\t\treturn false;\n\t\tbreak;\n\tcase 2:\n\t\tif (day < 1 || day > 29)\n\t\t\treturn false;\n\t\tbreak;\n\t}\n\treturn res;",
        "grade-6": {
            "execution": 1
        },
        "191": "// your code here\n\t// std::vector<std::string>v;\n\tstd::stringstream ss(date);\n\tstd::string s;\n\tstd::vector<std::string> v;\n\twhile(std::getline(ss,s,'-'))\n\t\tv.push_back(s);\n\tif(v.size()!=3)\n\t\treturn false;\n\tif(v[0].length()!=2 || v[1].length()!=2 || v[2].length()!=4)\n\t\treturn false;\n\tint d,m,y;\n\tstd::stringstream ss1(v[0]);\n\tss1>>m;\n\tstd::stringstream ss2(v[1]);\n\tss2>>d;\n\tstd::stringstream ss3(v[2]);\n\tss3>>y;\n\t\n\tstd::vector<int> v1;\n\tv1.push_back(d);\n\tv1.push_back(m);\n\tv1.push_back(y);\n\t\n\tif(std::find(v1.begin(),v1.end(),0)!=v1.end())\n\t\treturn false;\n\t\n\tif(v1[1]<1 || v1[1]>12)\n\t\treturn false;\n\tif(v1[0]<1 || v1[0]>31)\n\t\treturn false;\n\tif(v1[1]==2)\n\t{\n\t\tif(v1[0]>29)\n\t\t\treturn false;\n\t}\n\tif(v1[1]==4 || v1[1]==6 || v1[1]==9 || v1[1]==11)\n\t{\n\t\tif(v1[0]>30)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-191": {
            "execution": 1
        },
        "70": "std::string month, day, year;\n  month = date.substr(0,2);\n  day = date.substr(3,2);\n  year = date.substr(6,4);\n  if (month.compare(\"01\") == 0 || month.compare(\"03\") == 0 || month.compare(\"05\") == 0 || month.compare(\"07\") == 0 || month.compare(\"08\") == 0 || month.compare(\"10\") == 0 || month.compare(\"12\") == 0) {\n    if (stoi(day) > 31 || stoi(day) < 1) {\n      return false;\n    }\n  }\n  else if (month.compare(\"04\") == 0 || month.compare(\"06\") == 0 || month.compare(\"09\") == 0 || month.compare(\"11\") == 0) {\n    if (stoi(day) > 30 || stoi(day) < 1) {\n      return false;\n    }\n  }\n  else if (month.compare(\"02\") == 0) {\n    if (stoi(day) > 29 || stoi(day) < 1) {\n      return false;\n    }\n  }\n  else {\n    return false;\n  }\n  if (stoi(month) > 12 || stoi(month) < 1) {\n    return false;\n  }\n  if (stoi(year) > 9999 || stoi(year) < 1) {\n    return false;\n  }\n  return true;",
        "grade-70": {
            "execution": 0
        },
        "62": "if(date.length() == 0) return false;\n    if(date.length() != 10) return false;\n    std::vector<std::string> date_chunks;\n    std::vector<int> date_chunks_int;\n    std::string curr_chunk = \"\";\n    for(int i = 0; i < date.length(); i++) {\n        if(date[i] == '-') {\n            date_chunks.push_back(curr_chunk);\n            curr_chunk = \"\";\n        } else {\n            curr_chunk += date[i];\n        }\n    }\n    date_chunks.push_back(curr_chunk);\n    if(date_chunks.size() != 3) return false;\n    for(int i = 0; i < date_chunks.size(); i++) {\n        if(date_chunks[i].length() == 0) return false;\n        for(int j = 0; j < date_chunks[i].length(); j++) {\n            if(date_chunks[i][j] < '0' || date_chunks[i][j] > '9') return false;\n        }\n        int curr_chunk_int = stoi(date_chunks[i]);\n        date_chunks_int.push_back(curr_chunk_int);\n    }\n    if(date_chunks_int[0] < 1 || date_chunks_int[0] > 12) return false;\n    if(date_chunks_int[0] == 1 || date_chunks_int[0] == 3 || date_chunks_int[0] == 5 || date_chunks_int[0] == 7 || date_chunks_int[0] == 8 || date_chunks_int[0] == 10 || date_chunks_int[0] == 12) {\n        if(date_chunks_int[1] < 1 || date_chunks_int[1] > 31) return false;\n    } else if(date_chunks_int[0] == 4 || date_chunks_int[0] == 6 ||",
        "grade-62": {
            "execution": 0
        },
        "57": "// your code here\n    string sep = \"-\";\n    int i = date.find(sep);\n    string month = date.substr(0, i);\n    int j = date.find(sep, i+1);\n    string day = date.substr(i+1, j-i-1);\n    string year = date.substr(j+1);\n    if(month.length() == 2 && day.length() == 2 && year.length() == 4){\n        if(stoi(month) > 0 && stoi(month) < 13){\n            if(stoi(month) == 1 || stoi(month) == 3 || stoi(month) == 5 || stoi(month) == 7 || stoi(month) == 8 || stoi(month) == 10 || stoi(month) == 12){\n                if(stoi(day) > 0 && stoi(day) < 32){\n                    return true;\n                }\n            }\n            else if(stoi(month) == 4 || stoi(month) == 6 || stoi(month) == 9 || stoi(month) == 11){\n                if(stoi(day) > 0 && stoi(day) < 31){\n                    return true;\n                }\n            }\n            else if(stoi(month) == 2){\n                if(stoi(day) > 0 && stoi(day) < 30){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    if(date.size()!=10)\n    return false;\n    for(int i=0;i<date.size();i++)\n    {\n        if(i==2||i==5)\n        {\n            if(date[i]!='-')\n            return false;\n        }\n        else\n        {\n            if(!isdigit(date[i]))\n            return false;\n        }\n    }\n    std::string months[12]={\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    int days[12]={31,31,31,31,31,31,31,30,30,30,30,29};\n    int month=atoi(date.substr(0,2).c_str());\n    int day=atoi(date.substr(3,2).c_str());\n    int year=atoi(date.substr(6,4).c_str());\n    if(day>=1&&day<=31&&month>=1&&month<=12&&year>=1)\n    {\n        if(month!=2)\n        {\n            if(day<=days[month-1])\n            return true;\n            else\n            return false;\n        }\n        else\n        {\n            if(year%4==0)\n            {\n                if(day<=days[month-1])\n                return true;\n                else\n                return false;\n            }\n            else\n            {\n                if(day<=days[month-1]-1)\n                return true;\n                else\n                return false;\n            }\n        }\n    }\n    else\n    return false;",
        "grade-35": {
            "execution": 0
        },
        "190": "// Your code here\n    std::string word, word1, word2, word3;\n    int temp1, temp2, temp3;\n    std::stringstream s_stream(date);\n    s_stream >> word1 >> word2 >> word3;\n    temp1 = std::stoi(word1);\n    temp2 = std::stoi(word2);\n    temp3 = std::stoi(word3);\n    if (temp1 > 12 || temp1 < 1 || temp2 > 31 || temp2 < 1 || temp3 < 1) {\n      return false;\n    }\n    else if (temp1 == 2 && temp2 > 29) {\n      return false;\n    }\n    else if (temp1 == 2 && temp2 == 29 && temp3 % 4 != 0) {\n      return false;\n    }\n    else if (temp1 == 2 && temp2 == 29 && temp3 % 100 == 0 && temp3 % 400 != 0) {\n      return false;\n    }\n    else if (temp1 == 4 || temp1 == 6 || temp1 == 9 || temp1 == 11) {\n      if (temp2 > 30) {\n        return false;\n      }\n    }\n    return true;\n  }\n\nint main() {\nassert(valid_date(\"03-11-2000\") == true);\nassert(valid_date(\"15-01-2012\") == false);\nassert(valid_date(\"04-0-2040\") == false);\nassert(valid_date(\"06-04-2020\") == true);\nassert(valid_date(\"06/04/2020\") == false);\nassert(valid_date(\"02-29-2020\") == true);\nassert(valid_date(\"02-29-2021\") == false);\nassert(valid_date(\"02-29-2000\") == true);\nassert(valid_date(\"02-29-1910\") == false);\nassert(valid_date(\"04-31-2020\") == false);\nassert(valid_date(\"13-01-2020\") == false);\nassert(valid_date(\"00-01-2020\") == false);\nassert(valid_date(\"01-00-2020\") == false);\nassert(valid_date(\"02-",
        "grade-190": {
            "execution": 0
        },
        "26": "int m = 0, d = 0, y = 0;\n    sscanf(date.c_str(), \"%d-%d-%d\", &m, &d, &y);\n    if(date.length() != 10)\n        return false;\n    if(m > 12)\n        return false;\n    if(m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)\n    {\n        if(d < 1 || d > 31)\n            return false;\n    }\n    else if(m == 4 || m == 6 || m == 9 || m == 11)\n    {\n        if(d < 1 || d > 30)\n            return false;\n    }\n    else if(m == 2)\n    {\n        if(d < 1 || d > 29)\n            return false;\n    }\n    return true;",
        "grade-26": {
            "execution": 1
        },
        "175": "std::stringstream stream(date);\n  int day, month, year;\n  char seperator;\n  stream >> month >> seperator >> day >> seperator >> year;\n  if(month < 1 || month > 12 || day < 1 || day > 31 || year < 1)\n    return false;\n  else if(month == 2 && day > 29)\n    return false;\n  else if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)\n    return false;\n  else\n    return true;",
        "grade-175": {
            "execution": 1
        },
        "140": "// your code here\n  int month,day,year;\n  std::stringstream ss(date);\n  char ch;\n  ss>>month>>ch>>day>>ch>>year;\n  std::vector<int>Days = {31,29,31,30,31,30,31,31,30,31,30,31};\n  if(month<=0||month>12)\n  return false;\n  if(day<=0||day>Days[month-1])\n  return false;\n  return true;",
        "grade-140": {
            "execution": 1
        },
        "22": "// write code here\n\tbool result = true;\n\tint day = 0, month = 0, year = 0;\n\tif (date.length() != 10)\n\t\treturn false;\n\tif (date[2] != '-' || date[5] != '-')\n\t\treturn false;\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (i == 2 || i == 5) {\n\t\t\tcontinue;\n\t\t}\n\t\telse if (i < 2) {\n\t\t\tday *= 10;\n\t\t\tday += date[i] - '0';\n\t\t}\n\t\telse if (i < 5) {\n\t\t\tmonth *= 10;\n\t\t\tmonth += date[i] - '0';\n\t\t}\n\t\telse {\n\t\t\tyear *= 10;\n\t\t\tyear += date[i] - '0';\n\t\t}\n\t}\n\tif (month > 12 || month < 1)\n\t\treturn false;\n\tif (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\t\tif (day > 31 || day < 1)\n\t\t\treturn false;\n\t}\n\telse if (month == 4 || month == 6 || month == 9 || month == 11) {\n\t\tif (day > 30 || day < 1)\n\t\t\treturn false;\n\t}\n\telse {\n\t\tif (day > 29 || day < 1)\n\t\t\treturn false;\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<std::string> v;\n    std::string s;\n    std::stringstream ss(date);\n    while(std::getline(ss, s, '-')){\n        v.push_back(s);\n    }\n    if(v.size() != 3) return false;\n    int day = std::stoi(v[1]);\n    int mon = std::stoi(v[0]);\n    int year = std::stoi(v[2]);\n    if(mon < 1 || mon > 12) return false;\n    if(day < 1 || day > 31) return false;\n    if(mon == 2){\n        if(day > 29) return false;\n    }\n    else if(mon == 4 || mon == 6 || mon == 9 || mon == 11){\n        if(day > 30) return false;\n    }\n    if(year < 0) return false;\n    return true;",
        "grade-152": {
            "execution": 1
        },
        "108": "// split the string by '-'\n  std::string temp[3];\n  int index = 0;\n  for (int i = 0; i < date.length(); i++) {\n    if (date[i] == '-') {\n      index++;\n    } else {\n      temp[index] += date[i];\n    }\n  }\n  // for (int i = 0; i < 3; i++) {\n  //   std::cout << temp[i] << std::endl;\n  // }\n  int month = std::stoi(temp[0]);\n  int day = std::stoi(temp[1]);\n  int year = std::stoi(temp[2]);\n  // std::cout << month << \" \" << day << \" \" << year << std::endl;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) {\n    return false;\n  }\n  if (day > 29 && month == 2) {\n    return false;\n  }\n  return true;",
        "grade-108": {
            "execution": 0
        },
        "8": "int count=0;\n  bool day_valid=false;\n  bool month_valid=false;\n  bool year_valid=false;\n  for(int i=0;i<date.length();i++){\n    if(date[i]=='-'||date[i]=='/'){\n      count++;\n    }\n  }\n  if(count==2){\n    std::istringstream date_stream(date);\n    std::string month,day,year;\n    std::getline(date_stream,month,'-');\n    std::getline(date_stream,day,'-');\n    std::getline(date_stream,year,'-');\n    try{\n      int month_int=std::stoi(month);\n      int day_int=std::stoi(day);\n      int year_int=std::stoi(year);\n      int month_max[12]={31,29,31,30,31,30,31,31,30,31,30,31};\n      int month_max_leap[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n      if(year_int%4==0){\n        if(month_int>=1&&month_int<=12){\n          if(day_int>=1&&day_int<=month_max_leap[month_int-1]){\n            day_valid=true;\n          }\n        }\n      }\n      else{\n        if(month_int>=1&&month_int<=12){\n          if(day_int>=1&&day_int<=month_max[month_int-1]){\n            day_valid=true;\n          }\n        }\n      }\n      if(day_valid==true){\n        if(month_int>=1&&month_int<=12){\n          month_valid=true;\n        }\n      }\n      if(month_valid==true){\n        if(year_int>=1000&&year_int<=9999){\n          year_valid=true;\n        }\n      }\n    }\n    catch(std::",
        "grade-8": {
            "execution": 0
        },
        "7": "int x;\n  std::stringstream ss;\n  std::string temp;\n  std::string month,day,year;\n  //Check if date is empty or not\n  if(date.empty())\n    return false;\n  int i;\n  for(i=0;i<date.length();i++)\n  {\n    if(date[i]=='-'||date[i]=='/')\n      break;\n    else\n      month+=date[i];\n  }\n  for(i=i+1;i<date.length();i++)\n  {\n    if(date[i]=='-'||date[i]=='/')\n      break;\n    else\n      day+=date[i];\n  }\n  for(i=i+1;i<date.length();i++)\n  {\n    if(date[i]=='-'||date[i]=='/')\n      return false;\n    else\n      year+=date[i];\n  }\n  if(month.empty()||day.empty()||year.empty())\n    return false;\n  ss<<month;\n  ss>>x;\n  //Check if month is between 1 to 12\n  if(x<1||x>12)\n    return false;\n  ss.clear();\n  ss<<day;\n  ss>>x;\n  ss.clear();\n  //Check if day is between 1 to 31 for months 1,3,5,7,8,10,12\n  if(month==\"1\"||month==\"3\"||month==\"5\"||month==\"7\"||month==\"8\"||month==\"10\"||month==\"12\")\n  {\n    if(x<1||x>31)\n      return false;\n  }\n  //Check if day is between 1 to 30 for months 4,6,9,11\n  else if(month==\"4\"||month==\"6\"||month==\"9\"||month==\"11\")\n  {\n    if(x<1||x>30)\n      return false;\n  }\n  //Check if day is between 1 to 29 for month 2\n  else if(month==\"2\")\n  {",
        "grade-7": {
            "execution": 0
        },
        "23": "std::stringstream ss(date);\n    char c;\n    int month;\n    int day;\n    int year;\n    ss >> month >> c >> day >> c >> year;\n    if(ss.fail() || month < 1 || month > 12 || day < 1) return false;\n    if(month == 2) {\n        if(year % 4 == 0) return day <= 29;\n        else return day <= 28;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11) return day <= 30;\n    else return day <= 31;",
        "grade-23": {
            "execution": 1
        },
        "55": "return false;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::string> date_vec;\n    std::istringstream ss(date);\n    std::string token;\n    while(std::getline(ss, token, '-')) {\n        date_vec.push_back(token);\n    }\n    if(date_vec.size() != 3) return false;\n    int month = std::stoi(date_vec[0]);\n    int day = std::stoi(date_vec[1]);\n    int year = std::stoi(date_vec[2]);\n    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(day > 29) return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n    }\n    if(year < 1) return false;\n    return true;",
        "grade-59": {
            "execution": 1
        },
        "bleu-165": 0.2926473868143664,
        "bleu-28": 0.33650803190820305,
        "bleu-6": 0.22032702660037884,
        "bleu-191": 0.16858137199400164,
        "bleu-70": 0.1513805284355928,
        "bleu-62": 0.2359955088311255,
        "bleu-57": 0.14046303728207238,
        "bleu-35": 0.3446114068805885,
        "bleu-190": 0.07168698619051093,
        "bleu-26": 0.2720079324468482,
        "bleu-175": 0.060700078524145565,
        "bleu-140": 0.060925254031311396,
        "bleu-22": 0.29800560625091027,
        "bleu-152": 0.24441322839160334,
        "bleu-108": 0.19808316939820492,
        "bleu-8": 0.12317413046633259,
        "bleu-7": 0.14751877169452687,
        "bleu-23": 0.09172136639912637,
        "bleu-55": 1.418201674311421e-32,
        "bleu-59": 0.24391896250875253,
        "codebleu-165": 0.533017210798035,
        "codebleu-28": 0.6106238169317622,
        "codebleu-6": 0.555802566108011,
        "codebleu-191": 0.5532112368390736,
        "codebleu-70": 0.5365623950161946,
        "codebleu-62": 0.6247008255685836,
        "codebleu-57": 0.531237798493774,
        "codebleu-35": 0.6524318037925958,
        "codebleu-190": 0.5069727066536422,
        "codebleu-26": 0.41535681244502864,
        "codebleu-175": 0.2087145874014017,
        "codebleu-140": 0.19990996606545522,
        "codebleu-22": 0.548759758750586,
        "codebleu-152": 0.4934080162535978,
        "codebleu-108": 0.4725607624793546,
        "codebleu-8": 0.5339292337988704,
        "codebleu-7": 0.6132415471786776,
        "codebleu-23": 0.24987101112656687,
        "codebleu-55": 0.006557377049180329,
        "codebleu-59": 0.4928715962796498,
        "chrf-165": 0.4618083241492602,
        "chrf-28": 0.49325201885559783,
        "chrf-6": 0.41547768599177765,
        "chrf-191": 0.3686329277731633,
        "chrf-70": 0.38508347625958,
        "chrf-62": 0.4018022028313337,
        "chrf-57": 0.3260673585188893,
        "chrf-35": 0.5858455453487585,
        "chrf-190": 0.27990494937475824,
        "chrf-26": 0.39586133955435654,
        "chrf-175": 0.24227544133960832,
        "chrf-140": 0.19419753894671019,
        "chrf-22": 0.4583849249906773,
        "chrf-152": 0.39058733016526753,
        "chrf-108": 0.3485491674122436,
        "chrf-8": 0.28126678702214897,
        "chrf-7": 0.37520694197853915,
        "chrf-23": 0.22163447177367246,
        "chrf-55": 0.02881056937286797,
        "chrf-59": 0.4154542428918073,
        "rougel-165": 0.3949579831932774,
        "rougel-28": 0.4628099173553719,
        "rougel-6": 0.4196597353497165,
        "rougel-191": 0.3645655877342419,
        "rougel-70": 0.30434782608695654,
        "rougel-62": 0.3785594639865997,
        "rougel-57": 0.3179297597042514,
        "rougel-35": 0.5172413793103449,
        "rougel-190": 0.2573099415204678,
        "rougel-26": 0.3605769230769231,
        "rougel-175": 0.29069767441860467,
        "rougel-140": 0.2195845697329377,
        "rougel-22": 0.4364326375711575,
        "rougel-152": 0.3896713615023474,
        "rougel-108": 0.424,
        "rougel-8": 0.29918699186991876,
        "rougel-7": 0.3549295774647887,
        "rougel-23": 0.2801120448179272,
        "rougel-55": 0.02654867256637168,
        "rougel-59": 0.3943661971830986,
        "meteor-165": 0.4887416871759962,
        "meteor-28": 0.4860952212345441,
        "meteor-6": 0.46775903595692336,
        "meteor-191": 0.4653709179342953,
        "meteor-70": 0.45380446582696077,
        "meteor-62": 0.4145949204751776,
        "meteor-57": 0.4005382545174934,
        "meteor-35": 0.4917104913588985,
        "meteor-190": 0.3504911851288328,
        "meteor-26": 0.42513939683702684,
        "meteor-175": 0.24313399563137889,
        "meteor-140": 0.19345238095238093,
        "meteor-22": 0.49590600656141703,
        "meteor-152": 0.4276286012980692,
        "meteor-108": 0.41941534150612947,
        "meteor-8": 0.35019261358290565,
        "meteor-7": 0.4579071404022717,
        "meteor-23": 0.24146805750168665,
        "meteor-55": 0.007462686567164179,
        "meteor-59": 0.44146606334841626,
        "ruby-165": 0.18972332015810278,
        "ruby-28": 0.26819923371647514,
        "ruby-6": 0.2679738562091504,
        "ruby-191": 0.228021978021978,
        "ruby-70": 0.20972644376899696,
        "ruby-62": 0.25668449197860965,
        "ruby-57": 0.19496855345911945,
        "ruby-35": 0.3837535014005602,
        "ruby-190": 0.1778741865509761,
        "ruby-26": 0.20627802690582964,
        "ruby-175": 0.18385650224215244,
        "ruby-140": 0.13452914798206284,
        "ruby-22": 0.29605263157894735,
        "ruby-152": 0.2376681614349776,
        "ruby-108": 0.3068592057761733,
        "ruby-8": 0.201530612244898,
        "ruby-7": 0.22997946611909648,
        "ruby-23": 0.18385650224215244,
        "ruby-55": 0.013452914798206317,
        "ruby-59": 0.24215246636771304,
        "codebertscore_f1-165": 0.7840589284896851,
        "codebertscore_f3-165": 0.790477454662323,
        "codebertscore_f1-28": 0.8094316124916077,
        "codebertscore_f3-28": 0.8262174129486084,
        "codebertscore_f1-6": 0.7864344716072083,
        "codebertscore_f3-6": 0.8051513433456421,
        "codebertscore_f1-191": 0.7453032732009888,
        "codebertscore_f3-191": 0.7743338942527771,
        "codebertscore_f1-70": 0.7741822600364685,
        "codebertscore_f3-70": 0.7840608954429626,
        "codebertscore_f1-62": 0.7562044858932495,
        "codebertscore_f3-62": 0.7831313014030457,
        "codebertscore_f1-57": 0.7752724885940552,
        "codebertscore_f3-57": 0.7861364483833313,
        "codebertscore_f1-35": 0.8274508118629456,
        "codebertscore_f3-35": 0.8427842855453491,
        "codebertscore_f1-190": 0.7353755235671997,
        "codebertscore_f3-190": 0.7636436820030212,
        "codebertscore_f1-26": 0.7979789972305298,
        "codebertscore_f3-26": 0.798843264579773,
        "codebertscore_f1-175": 0.7298238277435303,
        "codebertscore_f3-175": 0.7180567979812622,
        "codebertscore_f1-140": 0.6954829096794128,
        "codebertscore_f3-140": 0.6856260299682617,
        "codebertscore_f1-22": 0.8074373602867126,
        "codebertscore_f3-22": 0.8091905117034912,
        "codebertscore_f1-152": 0.7784057259559631,
        "codebertscore_f3-152": 0.7806621789932251,
        "codebertscore_f1-108": 0.8079137802124023,
        "codebertscore_f3-108": 0.820973813533783,
        "codebertscore_f1-8": 0.7303280234336853,
        "codebertscore_f3-8": 0.7397270798683167,
        "codebertscore_f1-7": 0.7664721012115479,
        "codebertscore_f3-7": 0.7839454412460327,
        "codebertscore_f1-23": 0.7458028197288513,
        "codebertscore_f3-23": 0.728734016418457,
        "codebertscore_f1-55": 0.48722043633461,
        "codebertscore_f3-55": 0.4193825125694275,
        "codebertscore_f1-59": 0.7817095518112183,
        "codebertscore_f3-59": 0.7828944325447083,
        "codebertscore_s_f1-165": 0.7853743433952332,
        "codebertscore_s_f3-165": 0.7922206521034241,
        "codebertscore_s_f1-28": 0.8104817867279053,
        "codebertscore_s_f3-28": 0.8250133395195007,
        "codebertscore_s_f1-6": 0.794140636920929,
        "codebertscore_s_f3-6": 0.8118150234222412,
        "codebertscore_s_f1-191": 0.7542771100997925,
        "codebertscore_s_f3-191": 0.7775752544403076,
        "codebertscore_s_f1-70": 0.7802397012710571,
        "codebertscore_s_f3-70": 0.7908452749252319,
        "codebertscore_s_f1-62": 0.7733485698699951,
        "codebertscore_s_f3-62": 0.7908632159233093,
        "codebertscore_s_f1-57": 0.7777649760246277,
        "codebertscore_s_f3-57": 0.7872744798660278,
        "codebertscore_s_f1-35": 0.8340137004852295,
        "codebertscore_s_f3-35": 0.8483479022979736,
        "codebertscore_s_f1-190": 0.7420917749404907,
        "codebertscore_s_f3-190": 0.7696053385734558,
        "codebertscore_s_f1-26": 0.800017774105072,
        "codebertscore_s_f3-26": 0.800746500492096,
        "codebertscore_s_f1-175": 0.7494921684265137,
        "codebertscore_s_f3-175": 0.7422116994857788,
        "codebertscore_s_f1-140": 0.7211394906044006,
        "codebertscore_s_f3-140": 0.710538387298584,
        "codebertscore_s_f1-22": 0.8092419505119324,
        "codebertscore_s_f3-22": 0.810585618019104,
        "codebertscore_s_f1-152": 0.7796372771263123,
        "codebertscore_s_f3-152": 0.7840195298194885,
        "codebertscore_s_f1-108": 0.8088481426239014,
        "codebertscore_s_f3-108": 0.8212391138076782,
        "codebertscore_s_f1-8": 0.7352940440177917,
        "codebertscore_s_f3-8": 0.7412007451057434,
        "codebertscore_s_f1-7": 0.771236777305603,
        "codebertscore_s_f3-7": 0.7875564694404602,
        "codebertscore_s_f1-23": 0.7563776969909668,
        "codebertscore_s_f3-23": 0.7433683276176453,
        "codebertscore_s_f1-55": 0.662588357925415,
        "codebertscore_s_f3-55": 0.559575617313385,
        "codebertscore_s_f1-59": 0.7833254933357239,
        "codebertscore_s_f3-59": 0.7871915102005005,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 0,
        "raw_gpt35_nsnr-55": "Score: 0",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n",
        "snippet": [
            "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n"
        ],
        "simplified": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "task_id": "69",
        "164": "// Your code here\n    unordered_map<long, long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = 0;\n    long key = -1;\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->first == i->second && i->first > max) {\n            max = i->first;\n            key = i->first;\n        }\n    }\n    return key;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::map<long, long> mp;\n    for(long i = 0; i < lst.size(); i++)\n        mp[lst[i]]++;\n    for(auto i : mp)\n        if(i.first <= i.second)\n            return i.first;\n    return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::map<long,long>mymap;\n  long max = -1;\n  for(auto i = 0; i < lst.size(); i++){\n    if(mymap.find(lst[i]) != mymap.end()){\n      mymap[lst[i]]++;\n    }\n    else{\n      mymap[lst[i]] = 1;\n    }\n  }\n  for(auto i = 0; i < lst.size(); i++){\n    if(mymap[lst[i]] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::map<long, int> cnt;\n    for (auto i : lst) cnt[i]++;\n    for (auto i : cnt) {\n        if (i.first <= i.second) return i.first;\n    }\n    return -1;",
        "grade-190": {
            "execution": 0
        },
        "70": "long max = -1;\n  std::map<long, int> freq_list;\n  for (auto i : lst) {\n    freq_list[i] += 1;\n  }\n  for (auto i : freq_list) {\n    if (i.first <= i.second && i.first > max) {\n      max = i.first;\n    }\n  }\n  return max;",
        "grade-70": {
            "execution": 1
        },
        "62": "// sort the list\n    std::sort(lst.begin(), lst.end());\n    // iterate through the list\n    int start = 0;\n    int end = 0;\n    long max = -1;\n    long current = -1;\n    long maxCount = 0;\n    long currentCount = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == lst[i + 1]) {\n            current = lst[i];\n            currentCount++;\n        } else {\n            if (currentCount >= current) {\n                max = current;\n                maxCount = currentCount;\n            }\n            current = lst[i];\n            currentCount = 1;\n        }\n    }\n    return max;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::unordered_map<long, long> freq;\n  for (long i: lst) {\n    freq[i]++;\n  }\n  for (long i: lst) {\n    if (freq[i] >= i) {\n      return i;\n    }\n  }\n  return -1;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::map<long, long> myMap;\n  int n = lst.size();\n  for(int i = 0; i < n; i++)\n  {\n    myMap[lst[i]]++;\n  }\n  for(int i = 0; i < n; i++)\n  {\n    if(myMap[lst[i]] >= lst[i])\n    {\n      return lst[i];\n    }\n  }\n  return -1;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::sort(lst.begin(), lst.end());\n    int count = 1;\n    for(int i = 0; i < lst.size() - 1; i++) {\n        count = 1;\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst[i] == lst[j]) {\n                count++;\n            }\n        }\n        if(count >= lst[i]) {\n            return lst[i];\n        }\n    }\n    return -1;",
        "grade-189": {
            "execution": 0
        },
        "26": "// ...\n  std::map<long, long> counter;\n  for(long i=0; i<lst.size(); i++){\n    counter[lst[i]]++;\n  }\n  for(long i=lst.size(); i>0; i--){\n    if(counter[i] >= i){\n      return i;\n    }\n  }\n  return -1;",
        "grade-26": {
            "execution": 1
        },
        "174": "std::unordered_map<long, long> frequency;\n    for (long l : lst)\n        frequency[l]++;\n    long greatest = -1;\n    for (auto pair : frequency) {\n        if (pair.first <= pair.second)\n            greatest = std::max(greatest, pair.first);\n    }\n    return greatest;",
        "grade-174": {
            "execution": 1
        },
        "139": "std::map<long, long> dict;\n  std::map<long, long>::iterator m_it;\n  long max = -1;\n  for(long i = 0; i < lst.size(); i++) {\n    m_it = dict.find(lst[i]);\n    if(m_it == dict.end()) {\n      dict.insert(std::pair<long, long>(lst[i], 1));\n    } else {\n      m_it->second++;\n    }\n  }\n  for(m_it = dict.begin(); m_it != dict.end(); m_it++) {\n    if(m_it->first <= m_it->second && m_it->first > max) {\n      max = m_it->first;\n    }\n  }\n  return max;",
        "grade-139": {
            "execution": 1
        },
        "22": "int max = lst[0];\n  std::sort(lst.begin(), lst.end());\n  // loop through numbers\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  // loop through list again to count numbers\n  for (int i = 0; i < lst.size(); i++) {\n    int count = 0;\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    for (int k = 0; k < lst.size(); k++) {\n      if (lst[i] == lst[k]) {\n        count++;\n      }\n    }\n    if (count >= lst[i]) {\n      return lst[i];\n    }\n  }\n  return -1;",
        "grade-22": {
            "execution": 0
        },
        "152": "int res = -1;\n  std::unordered_map<long, int> map;\n  for (long x : lst) {\n    map[x]++;\n  }\n  for (long x : lst) {\n    if (map[x] >= x && x > res) {\n      res = x;\n    }\n  }\n  return res;",
        "grade-152": {
            "execution": 1
        },
        "108": "// your code here...\n  std::map<long, long> m;\n  for(auto i: lst)\n  {\n    m[i]++;\n  }\n  auto v = *std::max_element(m.begin(), m.end(), [](auto &a, auto &b){return a.second<b.second;});\n  return (v.first<=v.second)?v.first:-1;",
        "grade-108": {
            "execution": 0
        },
        "8": "long x = -1;\n    long max = -1;\n    std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > 0) {\n            m[lst[i]]++;\n        }\n    }\n    for(auto i : m) {\n        if(i.first <= i.second) {\n            if(i.first > max) {\n                max = i.first;\n            }\n        }\n    }\n    if(max == -1) {\n        return -1;\n    }\n    return max;",
        "grade-8": {
            "execution": 1
        },
        "7": "for(int i = lst.size() - 1; i >= 0; i--) {\n    std::cout << \"lst[\" << i << \"] = \" << lst[i] << std::endl;\n    long count = 0;\n    for(int j = 0; j < lst.size(); j++) {\n      if(lst[i] == lst[j]) {\n        count++;\n      }\n    }\n    if(count >= lst[i]) {\n      return lst[i];\n    }\n  }\n  return -1;",
        "grade-7": {
            "execution": 0
        },
        "23": "long cnt = 0;\n  long max = -1;\n  int idx = 0;\n  std::sort(lst.begin(), lst.end());\n  for(int i = 0; i < lst.size(); i++){\n    cnt = 0;\n    for(int j = 0; j < lst.size(); j++){\n      if(lst[i] == lst[j]){\n        cnt++;\n      }\n    }\n    if(cnt >= lst[i] && max < lst[i]){\n      max = lst[i];\n    }\n  }\n  return max;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::map<long, long> m;\n    long max = -1;\n    for(long i=0; i<lst.size(); i++) {\n        m[lst[i]]++;\n        if(m[lst[i]]>=lst[i] && lst[i]>max)\n            max = lst[i];\n    }\n    return max;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++)\n        m[lst[i]]++;\n    for(auto it = m.rbegin(); it != m.rend(); it++)\n        if(it->first <= it->second)\n            return it->first;\n    return -1;",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.18788853239935324,
        "bleu-28": 0.06796424247598781,
        "bleu-6": 0.29006522750830466,
        "bleu-190": 0.010344908497905779,
        "bleu-70": 0.06100958042777425,
        "bleu-62": 0.2954261376336938,
        "bleu-57": 0.025891107947337514,
        "bleu-35": 0.15860961653134145,
        "bleu-189": 0.2803489884206575,
        "bleu-26": 0.13246501230615618,
        "bleu-174": 0.02640967624591285,
        "bleu-139": 0.26532222278551026,
        "bleu-22": 0.32167449614612437,
        "bleu-152": 0.026295399236372377,
        "bleu-108": 0.02716871697175141,
        "bleu-8": 0.25163202884323593,
        "bleu-7": 0.2606328572177786,
        "bleu-23": 0.34016561754184305,
        "bleu-55": 0.14837933233901854,
        "bleu-59": 0.12596497133670878,
        "codebleu-164": 0.38403048740692336,
        "codebleu-28": 0.22079675940218133,
        "codebleu-6": 0.5308151727876654,
        "codebleu-190": 0.1464495238626837,
        "codebleu-70": 0.21153325725004493,
        "codebleu-62": 0.5056175462364091,
        "codebleu-57": 0.15761576345617123,
        "codebleu-35": 0.32491618327611793,
        "codebleu-189": 0.431769808217598,
        "codebleu-26": 0.28934430880487644,
        "codebleu-174": 0.1880247057018457,
        "codebleu-139": 0.5004575504272821,
        "codebleu-22": 0.603275497493149,
        "codebleu-152": 0.1911012023387791,
        "codebleu-108": 0.25316087522625974,
        "codebleu-8": 0.44179077316065335,
        "codebleu-7": 0.3818319727590771,
        "codebleu-23": 0.5094309604105334,
        "codebleu-55": 0.2930764717354641,
        "codebleu-59": 0.2798079845594569,
        "chrf-164": 0.24465233997689165,
        "chrf-28": 0.17659598217835115,
        "chrf-6": 0.3099157372251698,
        "chrf-190": 0.11608264222523623,
        "chrf-70": 0.20130140647766173,
        "chrf-62": 0.3065663446504894,
        "chrf-57": 0.15023467425852016,
        "chrf-35": 0.23600782127163134,
        "chrf-189": 0.3155127869614174,
        "chrf-26": 0.21583129640766205,
        "chrf-174": 0.15755426229330616,
        "chrf-139": 0.2778898868603829,
        "chrf-22": 0.3348578236419406,
        "chrf-152": 0.1371360261585718,
        "chrf-108": 0.12623740186699173,
        "chrf-8": 0.30765378239044316,
        "chrf-7": 0.2874317469751327,
        "chrf-23": 0.35938769143383176,
        "chrf-55": 0.2499430892696065,
        "chrf-59": 0.21974173246686576,
        "rougel-164": 0.363036303630363,
        "rougel-28": 0.3132530120481927,
        "rougel-6": 0.4610591900311527,
        "rougel-190": 0.23728813559322035,
        "rougel-70": 0.2755905511811024,
        "rougel-62": 0.40840840840840836,
        "rougel-57": 0.27848101265822783,
        "rougel-35": 0.4043321299638989,
        "rougel-189": 0.5202702702702703,
        "rougel-26": 0.3643122676579926,
        "rougel-174": 0.21600000000000003,
        "rougel-139": 0.39428571428571424,
        "rougel-22": 0.44141689373297005,
        "rougel-152": 0.25806451612903225,
        "rougel-108": 0.22775800711743774,
        "rougel-8": 0.4370860927152318,
        "rougel-7": 0.439344262295082,
        "rougel-23": 0.5530546623794212,
        "rougel-55": 0.45454545454545453,
        "rougel-59": 0.3345724907063197,
        "meteor-164": 0.25542432246728525,
        "meteor-28": 0.16352844574780062,
        "meteor-6": 0.4067880679202109,
        "meteor-190": 0.12092714288520849,
        "meteor-70": 0.19182432783141284,
        "meteor-62": 0.3866073923979877,
        "meteor-57": 0.13860701332174777,
        "meteor-35": 0.2774055404806074,
        "meteor-189": 0.350980328037798,
        "meteor-26": 0.2197976929902396,
        "meteor-174": 0.10844079718640094,
        "meteor-139": 0.34420383885049227,
        "meteor-22": 0.427090743708859,
        "meteor-152": 0.12889502392103963,
        "meteor-108": 0.12665515256188833,
        "meteor-8": 0.3285152670134939,
        "meteor-7": 0.33353601355771156,
        "meteor-23": 0.40026478984604486,
        "meteor-55": 0.28756469302221965,
        "meteor-59": 0.19871739130434785,
        "ruby-164": 0.23076923076923073,
        "ruby-28": 0.19780219780219777,
        "ruby-6": 0.34065934065934067,
        "ruby-190": 0.12637362637362637,
        "ruby-70": 0.18681318681318682,
        "ruby-62": 0.20879120879120883,
        "ruby-57": 0.15934065934065933,
        "ruby-35": 0.25274725274725274,
        "ruby-189": 0.3571428571428571,
        "ruby-26": 0.24725274725274726,
        "ruby-174": 0.13186813186813184,
        "ruby-139": 0.21978021978021978,
        "ruby-22": 0.2432432432432432,
        "ruby-152": 0.1648351648351648,
        "ruby-108": 0.13186813186813184,
        "ruby-8": 0.3131868131868132,
        "ruby-7": 0.2362637362637363,
        "ruby-23": 0.3626373626373627,
        "ruby-55": 0.31868131868131866,
        "ruby-59": 0.2142857142857143,
        "codebertscore_f1-164": 0.7566980719566345,
        "codebertscore_f3-164": 0.7536388039588928,
        "codebertscore_f1-28": 0.7447811365127563,
        "codebertscore_f3-28": 0.7129079103469849,
        "codebertscore_f1-6": 0.8014398813247681,
        "codebertscore_f3-6": 0.783950686454773,
        "codebertscore_f1-190": 0.703648567199707,
        "codebertscore_f3-190": 0.6729071736335754,
        "codebertscore_f1-70": 0.7647621035575867,
        "codebertscore_f3-70": 0.7470195889472961,
        "codebertscore_f1-62": 0.785946786403656,
        "codebertscore_f3-62": 0.7907571196556091,
        "codebertscore_f1-57": 0.7505035400390625,
        "codebertscore_f3-57": 0.7147489190101624,
        "codebertscore_f1-35": 0.7718898057937622,
        "codebertscore_f3-35": 0.732632040977478,
        "codebertscore_f1-189": 0.8055861592292786,
        "codebertscore_f3-189": 0.7802962064743042,
        "codebertscore_f1-26": 0.7510241270065308,
        "codebertscore_f3-26": 0.7128485441207886,
        "codebertscore_f1-174": 0.7177133560180664,
        "codebertscore_f3-174": 0.7015592455863953,
        "codebertscore_f1-139": 0.7695609331130981,
        "codebertscore_f3-139": 0.7786821722984314,
        "codebertscore_f1-22": 0.7998705506324768,
        "codebertscore_f3-22": 0.7868661284446716,
        "codebertscore_f1-152": 0.7184204459190369,
        "codebertscore_f3-152": 0.6929140090942383,
        "codebertscore_f1-108": 0.6628406047821045,
        "codebertscore_f3-108": 0.6591420769691467,
        "codebertscore_f1-8": 0.7933015823364258,
        "codebertscore_f3-8": 0.774155855178833,
        "codebertscore_f1-7": 0.7842959761619568,
        "codebertscore_f3-7": 0.7646710276603699,
        "codebertscore_f1-23": 0.8155968189239502,
        "codebertscore_f3-23": 0.7959820032119751,
        "codebertscore_f1-55": 0.800075113773346,
        "codebertscore_f3-55": 0.7631633281707764,
        "codebertscore_f1-59": 0.7331137657165527,
        "codebertscore_f3-59": 0.7113482356071472,
        "codebertscore_s_f1-164": 0.7570393085479736,
        "codebertscore_s_f3-164": 0.7549123167991638,
        "codebertscore_s_f1-28": 0.75294429063797,
        "codebertscore_s_f3-28": 0.7215654850006104,
        "codebertscore_s_f1-6": 0.8003299236297607,
        "codebertscore_s_f3-6": 0.7821183204650879,
        "codebertscore_s_f1-190": 0.7252900004386902,
        "codebertscore_s_f3-190": 0.6961534023284912,
        "codebertscore_s_f1-70": 0.7825877070426941,
        "codebertscore_s_f3-70": 0.765926718711853,
        "codebertscore_s_f1-62": 0.7856460809707642,
        "codebertscore_s_f3-62": 0.7881650924682617,
        "codebertscore_s_f1-57": 0.7690569162368774,
        "codebertscore_s_f3-57": 0.7347322106361389,
        "codebertscore_s_f1-35": 0.7777450084686279,
        "codebertscore_s_f3-35": 0.7409155964851379,
        "codebertscore_s_f1-189": 0.8078555464744568,
        "codebertscore_s_f3-189": 0.7805625796318054,
        "codebertscore_s_f1-26": 0.7658393979072571,
        "codebertscore_s_f3-26": 0.7289842367172241,
        "codebertscore_s_f1-174": 0.7214874625205994,
        "codebertscore_s_f3-174": 0.7062229514122009,
        "codebertscore_s_f1-139": 0.7656060457229614,
        "codebertscore_s_f3-139": 0.7749767303466797,
        "codebertscore_s_f1-22": 0.8031249046325684,
        "codebertscore_s_f3-22": 0.7848436236381531,
        "codebertscore_s_f1-152": 0.733849048614502,
        "codebertscore_s_f3-152": 0.7090262770652771,
        "codebertscore_s_f1-108": 0.6726081371307373,
        "codebertscore_s_f3-108": 0.6697843074798584,
        "codebertscore_s_f1-8": 0.7946125864982605,
        "codebertscore_s_f3-8": 0.7741249203681946,
        "codebertscore_s_f1-7": 0.7935853004455566,
        "codebertscore_s_f3-7": 0.7699447870254517,
        "codebertscore_s_f1-23": 0.8214888572692871,
        "codebertscore_s_f3-23": 0.8001835346221924,
        "codebertscore_s_f1-55": 0.8049107193946838,
        "codebertscore_s_f3-55": 0.7708733677864075,
        "codebertscore_s_f1-59": 0.7425736784934998,
        "codebertscore_s_f3-59": 0.7222769260406494,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n",
        "snippet": [
            "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"
        ],
        "simplified": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "task_id": "20",
        "163": "assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    auto smallest = std::make_tuple(numbers[0], numbers[1]);\n    auto distance = std::abs(std::get<0>(smallest) - std::get<1>(smallest));\n    for (unsigned int i = 1; i < numbers.size() - 1; i++) {\n        if (distance > std::abs(numbers[i] - numbers[i + 1])) {\n            distance = std::abs(numbers[i] - numbers[i + 1]);\n            smallest = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return smallest;",
        "grade-163": {
            "execution": 0
        },
        "28": "// TODO: return the pair of closest elements from numbers\n    int length=numbers.size();\n    int min=INT_MAX;\n    float num1=0;\n    float num2=0;\n    for(int i=0;i<length;i++){\n        for(int j=i+1;j<length;j++){\n            if(min>(std::abs(numbers[i]-numbers[j]))){\n                min=std::abs(numbers[i]-numbers[j]);\n                num1=numbers[i];\n                num2=numbers[j];\n            }\n        }\n    }\n    if(num1>num2){\n        std::swap(num1,num2);\n    }\n    return std::make_tuple(num1,num2);",
        "grade-28": {
            "execution": 0
        },
        "6": "assert(numbers.size() >= 2);\n    std::vector<float>::iterator i,j;\n    float diff= abs(numbers[0]-numbers[1]);\n    for(i=numbers.begin();i!=numbers.end();i++){\n        for(j=i+1;j!=numbers.end();j++){\n            if (diff>abs(*i-*j)){\n                diff=abs(*i-*j);\n            }\n        }\n    }\n    std::tuple<float, float> tup (i,j);\n    return tup;",
        "grade-6": {
            "execution": 0
        },
        "189": "// TODO\n\treturn std::make_tuple(0.0, 0.0);",
        "grade-189": {
            "execution": 0
        },
        "70": "std::sort(numbers.begin(), numbers.end());\n    float min = std::numeric_limits<float>::max();\n    std::tuple<float, float> result(0, 0);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float curr = numbers[i + 1] - numbers[i];\n        if (curr < min) {\n            min = curr;\n            result = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your implementation of the function here.\n  float min = std::numeric_limits<float>::max();\n  float closest1, closest2;\n  std::sort(numbers.begin(), numbers.end());\n  for (auto i = 0; i < numbers.size() - 1; i++) {\n    if (min > abs(numbers[i] - numbers[i + 1])) {\n      min = abs(numbers[i] - numbers[i + 1]);\n      closest1 = numbers[i];\n      closest2 = numbers[i + 1];\n    }\n  }\n  std::tuple<float, float> result(closest1, closest2);\n  return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (numbers.size()<2) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  std::sort(numbers.begin(), numbers.end());\n  float diff = numbers[numbers.size()-1] - numbers[0];\n  float min = numbers[0];\n  float max = numbers[1];\n  for (size_t i = 0; i < numbers.size()-1; i++) {\n    if (numbers[i+1] - numbers[i] < diff) {\n      diff = numbers[i+1] - numbers[i];\n      min = numbers[i];\n      max = numbers[i+1];\n    }\n  }\n  return std::make_tuple(min, max);",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(numbers.size() >= 2);\n    float first = 0;\n    float second = 0;\n    float diff = 0;\n    float last_diff = 0;\n    std::sort(numbers.begin(), numbers.end());\n    // printVector(numbers);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        diff = numbers[i + 1] - numbers[i];\n        if (i == 0) {\n            last_diff = diff;\n            first = numbers[i];\n            second = numbers[i + 1];\n        } else {\n            if (diff < last_diff) {\n                last_diff = diff;\n                first = numbers[i];\n                second = numbers[i + 1];\n            }\n        }\n    }\n    return std::make_tuple(first, second);",
        "grade-35": {
            "execution": 0
        },
        "188": "float d = std::numeric_limits<float>::max();\n    float t1, t2;\n    float mx = std::numeric_limits<float>::min();\n    float mn = std::numeric_limits<float>::max();\n    for (int i = 0; i < numbers.size(); i++) {\n        mx = std::max(mx, numbers[i]);\n        mn = std::min(mn, numbers[i]);\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < d) {\n                d = std::abs(numbers[i] - numbers[j]);\n                t1 = numbers[i];\n                t2 = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(t1, t2);",
        "grade-188": {
            "execution": 0
        },
        "26": "float min_difference = std::numeric_limits<float>::max();\n    std::pair<float, float> min_pair = std::make_pair(0.0, 0.0);\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float difference = std::abs(numbers[i] - numbers[j]);\n            if (difference < min_difference) {\n                min_difference = difference;\n                min_pair = std::make_pair(numbers[i], numbers[j]);\n            }\n        }\n    }\n    if (min_pair.first > min_pair.second) {\n        return std::make_tuple(min_pair.second, min_pair.first);\n    }\n    return std::make_tuple(min_pair.first, min_pair.second);",
        "grade-26": {
            "execution": 0
        },
        "173": "// write your code here\n\tint len=numbers.size();\n\tif(len<2)\n\t{\n\t\tassert(0);\n\t}\n\tint i=0;\n\tfloat sum=std::numeric_limits<float>::max();\n\tstd::tuple<float, float> result;\n\tfor(i=0;i<len-1;i++)\n\t{\n\t\tif(abs(numbers[i]-numbers[i+1])<sum)\n\t\t{\n\t\t\tsum=abs(numbers[i]-numbers[i+1]);\n\t\t\tresult=std::make_tuple(numbers[i],numbers[i+1]);\n\t\t}\n\t}\n\treturn result;",
        "grade-173": {
            "execution": 0
        },
        "139": "// Ensure the numbers are sorted\n    std::sort(numbers.begin(), numbers.end());\n    float smallest = numbers[0];\n    float closest_to_smallest = numbers[1];\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        // Attempt to find a smaller number that is closer to the current smallest\n        if (numbers[i + 1] - smallest < closest_to_smallest - smallest) {\n            closest_to_smallest = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(smallest, closest_to_smallest);",
        "grade-139": {
            "execution": 0
        },
        "22": "float diff_min = numbers[1] - numbers[0];\n  float num1 = numbers[0];\n  float num2 = numbers[1];\n  for (int i = 0; i < numbers.size() - 1; i++) {\n    float diff = numbers[i + 1] - numbers[i];\n    if (diff < diff_min) {\n      diff_min = diff;\n      num1 = numbers[i];\n      num2 = numbers[i + 1];\n    }\n  }\n  return std::make_tuple(num1, num2);",
        "grade-22": {
            "execution": 0
        },
        "151": "assert(numbers.size() >= 2);\n    float min = std::numeric_limits<float>::max();\n    float res1 = 0;\n    float res2 = 0;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (std::abs(numbers[i + 1] - numbers[i]) < min) {\n            min = std::abs(numbers[i + 1] - numbers[i]);\n            res1 = numbers[i];\n            res2 = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(res1, res2);",
        "grade-151": {
            "execution": 0
        },
        "108": "float min = std::numeric_limits<float>::max();\n    float result1, result2;\n    for (auto const& item1 : numbers) {\n        for (auto const& item2 : numbers) {\n            float diff = abs(item1 - item2);\n            if (diff < min && diff != 0) {\n                min = diff;\n                result1 = item1;\n                result2 = item2;\n            }\n        }\n    }\n    return std::make_tuple(result1, result2);",
        "grade-108": {
            "execution": 0
        },
        "8": "assert(numbers.size() >= 2);\n    float diff = std::numeric_limits<float>::max();\n    float x = 0.0;\n    float y = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float d = abs(numbers[i] - numbers[j]);\n            if (d < diff) {\n                diff = d;\n                x = numbers[i];\n                y = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(x, y);",
        "grade-8": {
            "execution": 0
        },
        "7": "std::sort(numbers.begin(), numbers.end());\n    float closest_sum = numbers[1] - numbers[0];\n    std::tuple<float, float> smallest_pair(numbers[0], numbers[1]);\n    for (int i = 1; i < numbers.size() - 1; i++) {\n        float sum = numbers[i + 1] - numbers[i];\n        if (sum < closest_sum) {\n            closest_sum = sum;\n            smallest_pair = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return smallest_pair;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::tuple<float, float> closest = std::make_tuple(numbers[0], numbers[1]);\n    float min_diff = std::abs(std::get<0>(closest) - std::get<1>(closest));\n    for (auto x : numbers) {\n        for (auto y : numbers) {\n            if (std::abs(x - y) < min_diff) {\n                min_diff = std::abs(x - y);\n                closest = std::make_tuple(x, y);\n            }\n        }\n    }\n    return closest;",
        "grade-23": {
            "execution": 0
        },
        "55": "float num;\n    float diff = 0;\n    float min = 99999;\n    std::tuple<float, float> closest_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = 0; j < numbers.size(); j++) {\n            if (j != i) {\n                diff = numbers[i] - numbers[j];\n                if (fabs(diff) < min) {\n                    min = fabs(diff);\n                    closest_numbers = std::make_tuple(numbers[i], numbers[j]);\n                }\n            }\n        }\n    }\n    return closest_numbers;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Write your implementation here.  Good luck!\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<float> d;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        d.push_back(numbers[i + 1] - numbers[i]);\n    }\n    std::sort(d.begin(), d.end());\n    std::tuple<float, float> closest_numbers(numbers[d.size()], numbers[d.size() + 1]);\n    return closest_numbers;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.25422098963406525,
        "bleu-28": 0.34071021726044526,
        "bleu-6": 0.29104959378189205,
        "bleu-189": 0.000130561680446263,
        "bleu-70": 0.3129691585637822,
        "bleu-62": 0.2689255615681746,
        "bleu-57": 0.2535449568221293,
        "bleu-35": 0.24301458881630225,
        "bleu-188": 0.31597592130744645,
        "bleu-26": 0.3747984389726649,
        "bleu-173": 0.3027744971362675,
        "bleu-139": 0.2483834967250886,
        "bleu-22": 0.2743508178111922,
        "bleu-151": 0.32345703334902487,
        "bleu-108": 0.042609301515109534,
        "bleu-8": 0.46211287543058566,
        "bleu-7": 0.3168744766755125,
        "bleu-23": 0.09223565098730946,
        "bleu-55": 0.45816514599830205,
        "bleu-59": 0.3141664928938874,
        "codebleu-163": 0.637674455600922,
        "codebleu-28": 0.6241095301812787,
        "codebleu-6": 0.5809328857007924,
        "codebleu-189": 0.029807799523680744,
        "codebleu-70": 0.5910585502401685,
        "codebleu-62": 0.6024471439550796,
        "codebleu-57": 0.6787879081729338,
        "codebleu-35": 0.6269565936097324,
        "codebleu-188": 0.6784046779952109,
        "codebleu-26": 0.6386343575795224,
        "codebleu-173": 0.6137643820967624,
        "codebleu-139": 0.5357690464560504,
        "codebleu-22": 0.5435129589233959,
        "codebleu-151": 0.6021209645212837,
        "codebleu-108": 0.34564152549249477,
        "codebleu-8": 0.6390636285687475,
        "codebleu-7": 0.6358741849106246,
        "codebleu-23": 0.4487878403072272,
        "codebleu-55": 0.6277944279119928,
        "codebleu-59": 0.5437779102917372,
        "chrf-163": 0.38246138979546507,
        "chrf-28": 0.43928268161870476,
        "chrf-6": 0.40819435311179236,
        "chrf-189": 0.037372739126787104,
        "chrf-70": 0.40380972672582155,
        "chrf-62": 0.3810394340045442,
        "chrf-57": 0.3893049379121155,
        "chrf-35": 0.38863815989472283,
        "chrf-188": 0.4939322300027545,
        "chrf-26": 0.46224125204974015,
        "chrf-173": 0.4141308787711568,
        "chrf-139": 0.34122273112657703,
        "chrf-22": 0.37537580998492337,
        "chrf-151": 0.4181610728574571,
        "chrf-108": 0.20446931541592817,
        "chrf-8": 0.5317066011839207,
        "chrf-7": 0.3863564957052759,
        "chrf-23": 0.25192766624908086,
        "chrf-55": 0.5032283110022913,
        "chrf-59": 0.4290061061411201,
        "rougel-163": 0.41860465116279066,
        "rougel-28": 0.5226480836236934,
        "rougel-6": 0.44528301886792454,
        "rougel-189": 0.10810810810810811,
        "rougel-70": 0.38735177865612647,
        "rougel-62": 0.43636363636363634,
        "rougel-57": 0.3767123287671233,
        "rougel-35": 0.3986486486486487,
        "rougel-188": 0.47813411078717205,
        "rougel-26": 0.5228758169934641,
        "rougel-173": 0.4312267657992565,
        "rougel-139": 0.3333333333333333,
        "rougel-22": 0.3983050847457627,
        "rougel-151": 0.450381679389313,
        "rougel-108": 0.23636363636363636,
        "rougel-8": 0.5427509293680296,
        "rougel-7": 0.38281250000000006,
        "rougel-23": 0.26506024096385544,
        "rougel-55": 0.5625,
        "rougel-59": 0.4000000000000001,
        "meteor-163": 0.4171778203308814,
        "meteor-28": 0.42673390370405745,
        "meteor-6": 0.42885010169812215,
        "meteor-189": 0.0462962962962963,
        "meteor-70": 0.37294722447461315,
        "meteor-62": 0.40826554300348805,
        "meteor-57": 0.4402538555144832,
        "meteor-35": 0.42630821362907084,
        "meteor-188": 0.5104198826845369,
        "meteor-26": 0.485931174503375,
        "meteor-173": 0.43732099739921154,
        "meteor-139": 0.3279722998108592,
        "meteor-22": 0.3285559121102888,
        "meteor-151": 0.43768638621983347,
        "meteor-108": 0.18253968253968256,
        "meteor-8": 0.56281548938767,
        "meteor-7": 0.3941507284014386,
        "meteor-23": 0.28410572449664134,
        "meteor-55": 0.5325564591647414,
        "meteor-59": 0.3931760068186661,
        "ruby-163": 0.22807017543859653,
        "ruby-28": 0.35031847133757965,
        "ruby-6": 0.14814814814814814,
        "ruby-189": 0.06153846153846154,
        "ruby-70": 0.16923076923076918,
        "ruby-62": 0.26206896551724135,
        "ruby-57": 0.2222222222222222,
        "ruby-35": 0.22891566265060237,
        "ruby-188": 0.2816901408450704,
        "ruby-26": 0.3920454545454546,
        "ruby-173": 0.2230215827338129,
        "ruby-139": 0.13076923076923075,
        "ruby-22": 0.2384615384615385,
        "ruby-151": 0.2272727272727273,
        "ruby-108": 0.1461538461538462,
        "ruby-8": 0.3165467625899281,
        "ruby-7": 0.16153846153846152,
        "ruby-23": 0.13076923076923075,
        "ruby-55": 0.3615384615384616,
        "ruby-59": 0.1923076923076923,
        "codebertscore_f1-163": 0.7940919399261475,
        "codebertscore_f3-163": 0.8140207529067993,
        "codebertscore_f1-28": 0.8058507442474365,
        "codebertscore_f3-28": 0.8334378004074097,
        "codebertscore_f1-6": 0.8373879194259644,
        "codebertscore_f3-6": 0.8466348052024841,
        "codebertscore_f1-189": 0.6197805404663086,
        "codebertscore_f3-189": 0.6004841923713684,
        "codebertscore_f1-70": 0.8077502250671387,
        "codebertscore_f3-70": 0.8268628716468811,
        "codebertscore_f1-62": 0.8019454479217529,
        "codebertscore_f3-62": 0.8302310109138489,
        "codebertscore_f1-57": 0.802750825881958,
        "codebertscore_f3-57": 0.8147523403167725,
        "codebertscore_f1-35": 0.7729858756065369,
        "codebertscore_f3-35": 0.7982362508773804,
        "codebertscore_f1-188": 0.781133234500885,
        "codebertscore_f3-188": 0.8064587116241455,
        "codebertscore_f1-26": 0.781649112701416,
        "codebertscore_f3-26": 0.8238765001296997,
        "codebertscore_f1-173": 0.8262722492218018,
        "codebertscore_f3-173": 0.8451434373855591,
        "codebertscore_f1-139": 0.7745054364204407,
        "codebertscore_f3-139": 0.8132991790771484,
        "codebertscore_f1-22": 0.8061138987541199,
        "codebertscore_f3-22": 0.8143400549888611,
        "codebertscore_f1-151": 0.8150846362113953,
        "codebertscore_f3-151": 0.8330520987510681,
        "codebertscore_f1-108": 0.7257835865020752,
        "codebertscore_f3-108": 0.7350057363510132,
        "codebertscore_f1-8": 0.8224329352378845,
        "codebertscore_f3-8": 0.8363645076751709,
        "codebertscore_f1-7": 0.8113785982131958,
        "codebertscore_f3-7": 0.828937828540802,
        "codebertscore_f1-23": 0.7591230273246765,
        "codebertscore_f3-23": 0.7732243537902832,
        "codebertscore_f1-55": 0.8046828508377075,
        "codebertscore_f3-55": 0.814466655254364,
        "codebertscore_f1-59": 0.8098868727684021,
        "codebertscore_f3-59": 0.8329690098762512,
        "codebertscore_s_f1-163": 0.80619215965271,
        "codebertscore_s_f3-163": 0.8255187273025513,
        "codebertscore_s_f1-28": 0.8171060681343079,
        "codebertscore_s_f3-28": 0.8437936902046204,
        "codebertscore_s_f1-6": 0.8444824814796448,
        "codebertscore_s_f3-6": 0.8537970185279846,
        "codebertscore_s_f1-189": 0.6233943700790405,
        "codebertscore_s_f3-189": 0.5953570604324341,
        "codebertscore_s_f1-70": 0.8110216856002808,
        "codebertscore_s_f3-70": 0.8301755785942078,
        "codebertscore_s_f1-62": 0.8056483268737793,
        "codebertscore_s_f3-62": 0.8335267305374146,
        "codebertscore_s_f1-57": 0.8114911913871765,
        "codebertscore_s_f3-57": 0.8221054077148438,
        "codebertscore_s_f1-35": 0.7837382555007935,
        "codebertscore_s_f3-35": 0.8090991377830505,
        "codebertscore_s_f1-188": 0.7977831959724426,
        "codebertscore_s_f3-188": 0.8216215968132019,
        "codebertscore_s_f1-26": 0.7920759320259094,
        "codebertscore_s_f3-26": 0.8339287638664246,
        "codebertscore_s_f1-173": 0.8286036849021912,
        "codebertscore_s_f3-173": 0.845146119594574,
        "codebertscore_s_f1-139": 0.7756420373916626,
        "codebertscore_s_f3-139": 0.8157851099967957,
        "codebertscore_s_f1-22": 0.8120294213294983,
        "codebertscore_s_f3-22": 0.8190582990646362,
        "codebertscore_s_f1-151": 0.819442868232727,
        "codebertscore_s_f3-151": 0.8383296132087708,
        "codebertscore_s_f1-108": 0.7352619171142578,
        "codebertscore_s_f3-108": 0.745534360408783,
        "codebertscore_s_f1-8": 0.8319606184959412,
        "codebertscore_s_f3-8": 0.844810962677002,
        "codebertscore_s_f1-7": 0.8163581490516663,
        "codebertscore_s_f3-7": 0.8339759707450867,
        "codebertscore_s_f1-23": 0.7666677832603455,
        "codebertscore_s_f3-23": 0.7815902233123779,
        "codebertscore_s_f1-55": 0.8192628026008606,
        "codebertscore_s_f3-55": 0.8266795873641968,
        "codebertscore_s_f1-59": 0.8108198046684265,
        "codebertscore_s_f3-59": 0.8311988115310669,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Return sorted unique common elements for two lists.",
        "task_id": "58",
        "173": "std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> ans;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(ans));\n  return ans;",
        "grade-173": {
            "execution": 1
        },
        "28": "std::vector<long> result;\n    std::set<long> s(l1.begin(), l1.end());\n    s.insert(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n            std::inserter(result, result.begin()));\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// create a vector for the output\n    std::vector<long> output;\n    // loop through the first list\n    for (int i = 0; i < l1.size(); i++) {\n        // loop through the second list\n        for (int j = 0; j < l2.size(); j++) {\n            // if an element in the first list is in the second list\n            if (l1[i] == l2[j]) {\n                // push it to the output vector\n                output.push_back(l1[i]);\n            }\n        }\n    }\n    // remove the duplicates from the output vector\n    std::sort(output.begin(), output.end());\n    output.erase(std::unique(output.begin(), output.end()), output.end());\n    // return the output vector\n    return output;",
        "grade-6": {
            "execution": 1
        },
        "70": "std::vector<long> commonElements;\n    for(auto i: l1){\n        for(auto j: l2){\n            if(i == j){\n                commonElements.push_back(i);\n            }\n        }\n    }\n    std::sort(commonElements.begin(), commonElements.end());\n    commonElements.erase(std::unique(commonElements.begin(), commonElements.end()), commonElements.end());\n    return commonElements;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), inserter(res, res.begin()));\n    return res;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<long> common = {};\n\t//sort both the lists\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tint i = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif (l1[i] == l2[j]) {\n\t\t\tcommon.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn common;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<long> result;\n    int i = 0, j = 0;\n    int n = l1.size();\n    int m = l2.size();\n    while (i < n && j < m) {\n        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "26": "std::vector<long> common_elements;\n\tint i = 0, j = 0;\n\tfor (int i = 0; i < l1.size(); i++) {\n\t\tfor (int j = 0; j < l2.size(); j++) {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\tcommon_elements.push_back(l1[i]);\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(common_elements.begin(), common_elements.end());\n\treturn common_elements;",
        "grade-26": {
            "execution": 0
        },
        "184": "std::vector<long> list1 = l1;\n    std::vector<long> list2 = l2;\n    std::vector<long> common_list;\n    std::sort(list1.begin(), list1.end());\n    std::sort(list2.begin(), list2.end());\n    std::set_intersection(list1.begin(), list1.end(), list2.begin(), list2.end(), std::back_inserter(common_list));\n    return common_list;",
        "grade-184": {
            "execution": 1
        },
        "147": "std::vector<long> l3;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tset_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(l3));\n\treturn l3;",
        "grade-147": {
            "execution": 1
        },
        "22": "// Write code here.\n\tstd::vector<long> common;\n\tif (l1.size() == 0 || l2.size() == 0) {\n\t\treturn common;\n\t}\n\tstd::unordered_map<long, long> m;\n\tfor (long i = 0; i < l1.size(); i++) {\n\t\tm[l1[i]]++;\n\t}\n\tfor (long i = 0; i < l2.size(); i++) {\n\t\tif (m.find(l2[i]) != m.end()) {\n\t\t\tcommon.push_back(l2[i]);\n\t\t}\n\t}\n\tsort(common.begin(), common.end());\n\treturn common;",
        "grade-22": {
            "execution": 0
        },
        "161": "// For given set of elements find intersection between them.\n    std::vector<long> comm_elements;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n                          std::back_inserter(comm_elements));\n    return comm_elements;",
        "grade-161": {
            "execution": 1
        },
        "113": "std::vector<long> v1, v2;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v1));\n    return v1;",
        "grade-113": {
            "execution": 1
        },
        "8": "std::vector<long> common;\n\t// TODO: Write - Your - Code\n\treturn common;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n\tstd::vector<long> retval;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tlong num1 = l1.size();\n\tlong num2 = l2.size();\n\tlong i=0, j=0;\n\twhile(i<num1 && j<num2) {\n\t\tif(l1[i] == l2[j]) {\n\t\t\tretval.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else if(l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t} else {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn retval;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long>res;\n    std::sort(l1.begin(),l1.end());\n    std::sort(l2.begin(),l2.end());\n    std::set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),std::back_inserter(res));\n    std::vector<long>::iterator it;\n    it=std::unique(res.begin(),res.end());\n    res.resize(std::distance(res.begin(),it));\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> a;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            a.push_back(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return a;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    for (long i = 0, j = 0; i < l1.size() && j < l2.size();) {\n        if (l1[i] == l2[j]) {\n            res.push_back(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return res;",
        "grade-59": {
            "execution": 1
        },
        "135": "std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> result;\n  for (std::vector<long>::iterator i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end(); ) {\n    if (*i == *j) {\n      result.push_back(*i);\n      i++;\n      j++;\n    } else if (*i < *j) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;",
        "grade-135": {
            "execution": 1
        },
        "164": "sort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tstd::vector<long> l3;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\t\t\tstd::back_inserter(l3));\n\treturn l3;",
        "grade-164": {
            "execution": 1
        },
        "bleu-173": 0.3226221527166273,
        "bleu-28": 0.33891671509403204,
        "bleu-6": 0.2871788714788684,
        "bleu-70": 0.23233155687479198,
        "bleu-62": 0.3309330333316498,
        "bleu-57": 0.365492851649078,
        "bleu-35": 0.2581528860760269,
        "bleu-26": 0.38700053725989286,
        "bleu-184": 0.26459145072196305,
        "bleu-147": 0.3122372864872088,
        "bleu-22": 0.32113245143306846,
        "bleu-161": 0.335450722404548,
        "bleu-113": 0.32488655878945394,
        "bleu-8": 0.0005438280985333828,
        "bleu-7": 0.3190071831687186,
        "bleu-23": 0.3146746696173407,
        "bleu-55": 0.3766135830526447,
        "bleu-59": 0.3886151922996489,
        "bleu-135": 0.3153820681454889,
        "bleu-164": 0.324014392174902,
        "codebleu-173": 0.5220805817922206,
        "codebleu-28": 0.5850506803006129,
        "codebleu-6": 0.7193339516635312,
        "codebleu-70": 0.5177486715476458,
        "codebleu-62": 0.550447567980101,
        "codebleu-57": 0.667106465836269,
        "codebleu-35": 0.49680813445389477,
        "codebleu-26": 0.601177537233767,
        "codebleu-184": 0.5704611278300469,
        "codebleu-147": 0.49295049628911536,
        "codebleu-22": 0.7219735701073989,
        "codebleu-161": 0.5724946703987353,
        "codebleu-113": 0.5280310274030502,
        "codebleu-8": 0.0602278695775394,
        "codebleu-7": 0.6570345998291047,
        "codebleu-23": 0.6472814451715199,
        "codebleu-55": 0.6635790786597631,
        "codebleu-59": 0.6663320075597401,
        "codebleu-135": 0.6643805939323442,
        "codebleu-164": 0.5089194536856204,
        "chrf-173": 0.39898869153002925,
        "chrf-28": 0.39176523574126293,
        "chrf-6": 0.4867751094762455,
        "chrf-70": 0.31681399645436453,
        "chrf-62": 0.3976289050579972,
        "chrf-57": 0.44733994386632403,
        "chrf-35": 0.30944273256451754,
        "chrf-26": 0.4106637123126611,
        "chrf-184": 0.34779289060838875,
        "chrf-147": 0.40975472361877757,
        "chrf-22": 0.4137634632682854,
        "chrf-161": 0.38707677909130356,
        "chrf-113": 0.39898869153002925,
        "chrf-8": 0.07591292210868747,
        "chrf-7": 0.41970811992103374,
        "chrf-23": 0.40768402135906046,
        "chrf-55": 0.44439631236879124,
        "chrf-59": 0.45013927283615585,
        "chrf-135": 0.4322385250696437,
        "chrf-164": 0.4089150220101409,
        "rougel-173": 0.4477611940298508,
        "rougel-28": 0.4666666666666667,
        "rougel-6": 0.43333333333333335,
        "rougel-70": 0.423963133640553,
        "rougel-62": 0.48756218905472637,
        "rougel-57": 0.421455938697318,
        "rougel-35": 0.39823008849557523,
        "rougel-26": 0.5701357466063348,
        "rougel-184": 0.4484304932735426,
        "rougel-147": 0.5185185185185186,
        "rougel-22": 0.5447761194029851,
        "rougel-161": 0.460093896713615,
        "rougel-113": 0.48275862068965514,
        "rougel-8": 0.08823529411764705,
        "rougel-7": 0.39259259259259255,
        "rougel-23": 0.46031746031746035,
        "rougel-55": 0.38095238095238093,
        "rougel-59": 0.41106719367588934,
        "rougel-135": 0.3740458015267175,
        "rougel-164": 0.46153846153846156,
        "meteor-173": 0.41970602993209943,
        "meteor-28": 0.39130125150547196,
        "meteor-6": 0.5242486338797815,
        "meteor-70": 0.3935418434147221,
        "meteor-62": 0.36925452825323374,
        "meteor-57": 0.4308184079529106,
        "meteor-35": 0.31229594804763094,
        "meteor-26": 0.5307086438055196,
        "meteor-184": 0.4066588898609896,
        "meteor-147": 0.42424748381774874,
        "meteor-22": 0.6562129364327167,
        "meteor-161": 0.4301960365180936,
        "meteor-113": 0.4189585570381865,
        "meteor-8": 0.028409090909090905,
        "meteor-7": 0.41228932049010086,
        "meteor-23": 0.4118217671596512,
        "meteor-55": 0.4297990527268927,
        "meteor-59": 0.42943264262226627,
        "meteor-135": 0.44989704420403903,
        "meteor-164": 0.42196453771648734,
        "ruby-173": 0.33913043478260874,
        "ruby-28": 0.34782608695652173,
        "ruby-6": 0.2918918918918919,
        "ruby-70": 0.28695652173913044,
        "ruby-62": 0.3739130434782608,
        "ruby-57": 0.3356164383561644,
        "ruby-35": 0.22608695652173916,
        "ruby-26": 0.4,
        "ruby-184": 0.29565217391304344,
        "ruby-147": 0.3652173913043478,
        "ruby-22": 0.3790849673202614,
        "ruby-161": 0.33043478260869563,
        "ruby-113": 0.33043478260869563,
        "ruby-8": 0.034782608695652195,
        "ruby-7": 0.28387096774193543,
        "ruby-23": 0.3211678832116789,
        "ruby-55": 0.25547445255474455,
        "ruby-59": 0.30434782608695654,
        "ruby-135": 0.23809523809523814,
        "ruby-164": 0.34782608695652173,
        "codebertscore_f1-173": 0.7994077205657959,
        "codebertscore_f3-173": 0.788493812084198,
        "codebertscore_f1-28": 0.8001365661621094,
        "codebertscore_f3-28": 0.7874112129211426,
        "codebertscore_f1-6": 0.7937912344932556,
        "codebertscore_f3-6": 0.8441784977912903,
        "codebertscore_f1-70": 0.8007520437240601,
        "codebertscore_f3-70": 0.8158349394798279,
        "codebertscore_f1-62": 0.8116430640220642,
        "codebertscore_f3-62": 0.7941256165504456,
        "codebertscore_f1-57": 0.8376303315162659,
        "codebertscore_f3-57": 0.8500779867172241,
        "codebertscore_f1-35": 0.8181629180908203,
        "codebertscore_f3-35": 0.8163013458251953,
        "codebertscore_f1-26": 0.8637863397598267,
        "codebertscore_f3-26": 0.8693327307701111,
        "codebertscore_f1-184": 0.7789889574050903,
        "codebertscore_f3-184": 0.7756483554840088,
        "codebertscore_f1-147": 0.7981592416763306,
        "codebertscore_f3-147": 0.7769790887832642,
        "codebertscore_f1-22": 0.8432077169418335,
        "codebertscore_f3-22": 0.8647400140762329,
        "codebertscore_f1-161": 0.7759726047515869,
        "codebertscore_f3-161": 0.7818050384521484,
        "codebertscore_f1-113": 0.7993617057800293,
        "codebertscore_f3-113": 0.7847651839256287,
        "codebertscore_f1-8": 0.6304922103881836,
        "codebertscore_f3-8": 0.6093814969062805,
        "codebertscore_f1-7": 0.8147050142288208,
        "codebertscore_f3-7": 0.8378528952598572,
        "codebertscore_f1-23": 0.8035052418708801,
        "codebertscore_f3-23": 0.8021198511123657,
        "codebertscore_f1-55": 0.8388897180557251,
        "codebertscore_f3-55": 0.848112165927887,
        "codebertscore_f1-59": 0.8503990769386292,
        "codebertscore_f3-59": 0.860120415687561,
        "codebertscore_f1-135": 0.8158813714981079,
        "codebertscore_f3-135": 0.8339734673500061,
        "codebertscore_f1-164": 0.7920624613761902,
        "codebertscore_f3-164": 0.7784960269927979,
        "codebertscore_s_f1-173": 0.8082917928695679,
        "codebertscore_s_f3-173": 0.7960005402565002,
        "codebertscore_s_f1-28": 0.8063870668411255,
        "codebertscore_s_f3-28": 0.7946938276290894,
        "codebertscore_s_f1-6": 0.8065444231033325,
        "codebertscore_s_f3-6": 0.8589709401130676,
        "codebertscore_s_f1-70": 0.8040724396705627,
        "codebertscore_s_f3-70": 0.8221082091331482,
        "codebertscore_s_f1-62": 0.8165512681007385,
        "codebertscore_s_f3-62": 0.7986505031585693,
        "codebertscore_s_f1-57": 0.8492423892021179,
        "codebertscore_s_f3-57": 0.8636250495910645,
        "codebertscore_s_f1-35": 0.8290097713470459,
        "codebertscore_s_f3-35": 0.8277053236961365,
        "codebertscore_s_f1-26": 0.8645578622817993,
        "codebertscore_s_f3-26": 0.8743515610694885,
        "codebertscore_s_f1-184": 0.7863843441009521,
        "codebertscore_s_f3-184": 0.7818974852561951,
        "codebertscore_s_f1-147": 0.8096977472305298,
        "codebertscore_s_f3-147": 0.787545382976532,
        "codebertscore_s_f1-22": 0.8524087071418762,
        "codebertscore_s_f3-22": 0.8763428330421448,
        "codebertscore_s_f1-161": 0.7798999547958374,
        "codebertscore_s_f3-161": 0.7866285443305969,
        "codebertscore_s_f1-113": 0.8041638731956482,
        "codebertscore_s_f3-113": 0.7914472818374634,
        "codebertscore_s_f1-8": 0.6140801310539246,
        "codebertscore_s_f3-8": 0.597725510597229,
        "codebertscore_s_f1-7": 0.8256864547729492,
        "codebertscore_s_f3-7": 0.8487628102302551,
        "codebertscore_s_f1-23": 0.8091312050819397,
        "codebertscore_s_f3-23": 0.8095168471336365,
        "codebertscore_s_f1-55": 0.8481273055076599,
        "codebertscore_s_f3-55": 0.857204020023346,
        "codebertscore_s_f1-59": 0.8610280156135559,
        "codebertscore_s_f3-59": 0.8717725276947021,
        "codebertscore_s_f1-135": 0.8224826455116272,
        "codebertscore_s_f3-135": 0.8401128053665161,
        "codebertscore_s_f1-164": 0.8046903610229492,
        "codebertscore_s_f3-164": 0.7878223657608032,
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "Score: 0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-184": 4,
        "raw_gpt35_nswr-184": "4",
        "gpt35_nswr-147": 4,
        "raw_gpt35_nswr-147": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-113": 3,
        "raw_gpt35_nswr-113": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n",
        "snippet": [
            "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n"
        ],
        "simplified": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
        "task_id": "162",
        "166": "if (text.empty())\n        return std::nullopt;\n    else {\n        unsigned char result[MD5_DIGEST_LENGTH];\n        std::stringstream stream;\n        MD5((unsigned char*)text.c_str(), text.size(), result);\n        for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n            stream << std::hex << (int)result[i];\n        return stream.str();\n    }",
        "grade-166": {
            "execution": 0
        },
        "28": "// Please implement your function here\n    int n = text.length();\n    int i;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), n);\n    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    std::string s(mdString);\n    return s;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (text.length() == 0) return std::nullopt;\n  using byte = unsigned char;\n  byte digest[MD5_DIGEST_LENGTH];\n  MD5_CTX ctx;\n  MD5_Init(&ctx);\n  MD5_Update(&ctx, text.c_str(), text.length());\n  MD5_Final(digest, &ctx);\n  std::stringstream ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n  }\n  return ss.str();",
        "grade-6": {
            "execution": 0
        },
        "193": "if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5;\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (char byte : std::experimental::filesystem::v1::md5(text)) {\n    ss << std::setw(2) << static_cast<int>(byte);\n  }\n  return ss.str();",
        "grade-193": {
            "execution": 0
        },
        "71": "if (text.empty()) {\n    return std::nullopt;\n  }\n  const char* data = text.c_str();\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)data, strlen(data), (unsigned char*)&digest);\n  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);",
        "grade-71": {
            "execution": 0
        },
        "63": "",
        "grade-63": {
            "execution": 0
        },
        "58": "// 1. text is not empty\n  if(text.length()==0) return std::nullopt;\n  // 2. std::optional<std::string> ret = md5(text);\n  std::string ret = md5(text);\n  return ret;",
        "grade-58": {
            "execution": 0
        },
        "35": "if (text.empty()) {\n    return std::nullopt;\n  }\n\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  char md5[MD5_DIGEST_LENGTH * 2 + 1];\n\n  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    sprintf(&md5[i * 2], \"%02x\", (unsigned int)digest[i]);\n  }\n\n  return std::string(md5);",
        "grade-35": {
            "execution": 0
        },
        "192": "if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string result;\n  result.resize(MD5_DIGEST_LENGTH);\n  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)result.data());\n  std::stringstream ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n  }\n  return ss.str();",
        "grade-192": {
            "execution": 0
        },
        "26": "std::optional<std::string> opt = std::nullopt;\n    int i = 0;\n    while (i < text.length()) {\n        text[i] = toupper(text[i]);\n        i++;\n    }\n    for (i = 0; i < text.length(); i++) {\n        if (!isalpha(text[i]) && !isdigit(text[i])) {\n            return opt;\n        }\n    }\n    opt = text;\n    return opt;",
        "grade-26": {
            "execution": 0
        },
        "177": "// Write your code here!\n    constexpr char hexmap[] = {'0', '1', '2', '3', '4', '5', '6', '7',\n                               '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n    std::string hash;\n    hash.reserve(32);\n    md5::MD5 md5;\n    md5.update(text);\n    auto digest = md5.digest();\n    for (int i = 0; i < 16; ++i) {\n        hash.push_back(hexmap[(digest[i] >> 4) & 0xF]);\n        hash.push_back(hexmap[digest[i] & 0xF]);\n    }\n    return hash;",
        "grade-177": {
            "execution": 0
        },
        "142": "using namespace std;\n    using namespace std::string_literals;\n    if (text.empty()) return nullopt;\n    const auto md5_hash = md5(text.c_str());\n    auto bytes = string_to_bytes(md5_hash);\n    auto bytes_hex = bytes_to_hex(bytes);\n    return bytes_hex;",
        "grade-142": {
            "execution": 0
        },
        "22": "if (text.empty()) {\n\t\treturn std::nullopt;\n\t}\n\tstd::array<unsigned char, MD5_DIGEST_LENGTH> md5;\n\tMD5((unsigned char*) text.c_str(), text.size(), md5.data());\n\tstd::stringstream ss;\n\tfor (int i = 0; i < md5.size(); i++) {\n\t\tss << std::hex << std::setw(2) << std::setfill('0') << (int) md5[i];\n\t}\n\treturn ss.str();",
        "grade-22": {
            "execution": 0
        },
        "154": "if (text.empty()) {\n    return std::nullopt;\n  }\n  MD5 md5;\n  md5.update(text);\n  return md5.toString();",
        "grade-154": {
            "execution": 0
        },
        "111": "if (text.empty()) {\n    return std::nullopt;\n  }\n  MD5 digest;\n  digest.update(text);\n  return digest.toString();",
        "grade-111": {
            "execution": 0
        },
        "8": "if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash;\n  md5_hash.resize(32);\n  int ret = ::md5((const unsigned char *)text.c_str(), text.size(), (unsigned char *)md5_hash.data());\n  assert(ret == 0);\n  return md5_hash;",
        "grade-8": {
            "execution": 0
        },
        "7": "// if (text.empty()) {\n    //     return {};\n    // }\n    // u_int8_t hash[MD5_DIGEST_LENGTH];\n    // MD5_CTX md5_ctx;\n    // MD5_Init(&md5_ctx);\n    // MD5_Update(&md5_ctx, text.c_str(), text.size());\n    // MD5_Final(hash, &md5_ctx);\n    // char md5[MD5_DIGEST_LENGTH * 2 + 1];\n    // for (size_t i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    //     sprintf(&md5[i * 2], \"%02x\", (unsigned int)hash[i]);\n    // }\n    // return md5;\n    return {};",
        "grade-7": {
            "execution": 0
        },
        "23": "if (text.empty()) {\n        return std::nullopt;\n    }\n    std::hash<std::string> hash_fn;\n    std::size_t hash = hash_fn(text);\n    std::stringstream ss;\n    ss << std::hex << hash;\n    return ss.str();",
        "grade-23": {
            "execution": 0
        },
        "56": "unsigned char hash[MD5_DIGEST_LENGTH];\n  std::stringstream ss;\n  MD5((unsigned char*)text.c_str(), text.size(), hash);\n  for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];\n  return ss.str();",
        "grade-56": {
            "execution": 0
        },
        "60": "if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), result);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n    return std::string(mdString);",
        "grade-60": {
            "execution": 0
        },
        "bleu-166": 0.15246035787465712,
        "bleu-28": 0.20833519210545656,
        "bleu-6": 0.2818605444607318,
        "bleu-193": 0.03575029864440736,
        "bleu-71": 0.18976112147897936,
        "bleu-63": 0.0,
        "bleu-58": 0.035289933945545485,
        "bleu-35": 0.20254789400785814,
        "bleu-192": 0.20967387812776683,
        "bleu-26": 0.14393097292395723,
        "bleu-177": 0.12335323254768936,
        "bleu-142": 0.02350540207470662,
        "bleu-22": 0.2024880533792513,
        "bleu-154": 0.002540905162080001,
        "bleu-111": 0.002540905162080001,
        "bleu-8": 0.09286340635165212,
        "bleu-7": 0.17620585784695167,
        "bleu-23": 0.015034222547294593,
        "bleu-56": 0.14078757430341646,
        "bleu-60": 0.1999662157628714,
        "codebleu-166": 0.31399740442448026,
        "codebleu-28": 0.4081657942311894,
        "codebleu-6": 0.45386138387473823,
        "codebleu-193": 0.22339277354591927,
        "codebleu-71": 0.38370923979201976,
        "codebleu-63": 0.0,
        "codebleu-58": 0.12756389561963888,
        "codebleu-35": 0.39901861125681415,
        "codebleu-192": 0.38369553265671064,
        "codebleu-26": 0.3491380991888279,
        "codebleu-177": 0.3802660367072883,
        "codebleu-142": 0.16702702764990962,
        "codebleu-22": 0.37577411144825357,
        "codebleu-154": 0.09903162856692829,
        "codebleu-111": 0.09903162856692829,
        "codebleu-8": 0.24385583617315298,
        "codebleu-7": 0.43353962906033405,
        "codebleu-23": 0.14491594888154613,
        "codebleu-56": 0.29431667397273115,
        "codebleu-60": 0.36363261290767457,
        "chrf-166": 0.30936056205059304,
        "chrf-28": 0.38988674361661924,
        "chrf-6": 0.4208983181681257,
        "chrf-193": 0.16676013775489668,
        "chrf-71": 0.3147038617170245,
        "chrf-63": 0.0,
        "chrf-58": 0.16974719281531303,
        "chrf-35": 0.3270134049316272,
        "chrf-192": 0.31739433995783844,
        "chrf-26": 0.2322478368685136,
        "chrf-177": 0.1925102075771231,
        "chrf-142": 0.17909871245375442,
        "chrf-22": 0.3099782197570588,
        "chrf-154": 0.10302158878513577,
        "chrf-111": 0.10983496538683196,
        "chrf-8": 0.25924281224755363,
        "chrf-7": 0.3025502475049553,
        "chrf-23": 0.1285991235979596,
        "chrf-56": 0.26624600193616343,
        "chrf-60": 0.33150541253082705,
        "rougel-166": 0.4075471698113207,
        "rougel-28": 0.4329896907216495,
        "rougel-6": 0.46557377049180326,
        "rougel-193": 0.22058823529411767,
        "rougel-71": 0.3875432525951557,
        "rougel-63": 0,
        "rougel-58": 0.2136752136752137,
        "rougel-35": 0.41258741258741255,
        "rougel-192": 0.4053156146179402,
        "rougel-26": 0.33093525179856115,
        "rougel-177": 0.30724637681159417,
        "rougel-142": 0.24561403508771926,
        "rougel-22": 0.38127090301003347,
        "rougel-154": 0.17307692307692307,
        "rougel-111": 0.17307692307692307,
        "rougel-8": 0.32669322709163345,
        "rougel-7": 0.4394904458598726,
        "rougel-23": 0.17721518987341772,
        "rougel-56": 0.3731343283582089,
        "rougel-60": 0.42599277978339345,
        "meteor-166": 0.2425022159776705,
        "meteor-28": 0.31294436748100096,
        "meteor-6": 0.2811951730210844,
        "meteor-193": 0.13500342043868835,
        "meteor-71": 0.3011847958833036,
        "meteor-63": 0.0,
        "meteor-58": 0.09840098400984011,
        "meteor-35": 0.32016898714711606,
        "meteor-192": 0.2584811632621951,
        "meteor-26": 0.26653359946773114,
        "meteor-177": 0.22153034563761353,
        "meteor-142": 0.12491083676268863,
        "meteor-22": 0.2404711618532688,
        "meteor-154": 0.08084829867674857,
        "meteor-111": 0.08084829867674857,
        "meteor-8": 0.17275648698251034,
        "meteor-7": 0.34683287562318227,
        "meteor-23": 0.10307437892283984,
        "meteor-56": 0.21451137884872828,
        "meteor-60": 0.32896502179435577,
        "ruby-166": 0.2816091954022989,
        "ruby-28": 0.32183908045977017,
        "ruby-6": 0.3275862068965517,
        "ruby-193": 0.11494252873563215,
        "ruby-71": 0.24137931034482762,
        "ruby-63": 0.0,
        "ruby-58": 0.13793103448275867,
        "ruby-35": 0.2816091954022989,
        "ruby-192": 0.2701149425287356,
        "ruby-26": 0.2183908045977011,
        "ruby-177": 0.10919540229885061,
        "ruby-142": 0.13793103448275867,
        "ruby-22": 0.26436781609195403,
        "ruby-154": 0.0977011494252874,
        "ruby-111": 0.0977011494252874,
        "ruby-8": 0.1839080459770115,
        "ruby-7": 0.23563218390804597,
        "ruby-23": 0.10919540229885061,
        "ruby-56": 0.2701149425287356,
        "ruby-60": 0.31034482758620685,
        "codebertscore_f1-166": 0.7584075927734375,
        "codebertscore_f3-166": 0.7359218001365662,
        "codebertscore_f1-28": 0.8111839294433594,
        "codebertscore_f3-28": 0.8009254932403564,
        "codebertscore_f1-6": 0.7912542223930359,
        "codebertscore_f3-6": 0.7770856022834778,
        "codebertscore_f1-193": 0.6544545888900757,
        "codebertscore_f3-193": 0.6406036019325256,
        "codebertscore_f1-71": 0.7704671621322632,
        "codebertscore_f3-71": 0.7534586191177368,
        "codebertscore_f1-63": 0.0,
        "codebertscore_f3-63": 0.0,
        "codebertscore_f1-58": 0.6616281867027283,
        "codebertscore_f3-58": 0.6220266222953796,
        "codebertscore_f1-35": 0.7549370527267456,
        "codebertscore_f3-35": 0.7373298406600952,
        "codebertscore_f1-192": 0.737504243850708,
        "codebertscore_f3-192": 0.7227688431739807,
        "codebertscore_f1-26": 0.712560772895813,
        "codebertscore_f3-26": 0.676981508731842,
        "codebertscore_f1-177": 0.7137721180915833,
        "codebertscore_f3-177": 0.7313105463981628,
        "codebertscore_f1-142": 0.6700257062911987,
        "codebertscore_f3-142": 0.6506514549255371,
        "codebertscore_f1-22": 0.740459144115448,
        "codebertscore_f3-22": 0.7239964008331299,
        "codebertscore_f1-154": 0.6745157837867737,
        "codebertscore_f3-154": 0.6117223501205444,
        "codebertscore_f1-111": 0.665159285068512,
        "codebertscore_f3-111": 0.6080641150474548,
        "codebertscore_f1-8": 0.7188211679458618,
        "codebertscore_f3-8": 0.6748905777931213,
        "codebertscore_f1-7": 0.7754794359207153,
        "codebertscore_f3-7": 0.775981068611145,
        "codebertscore_f1-23": 0.6390953063964844,
        "codebertscore_f3-23": 0.6068723797798157,
        "codebertscore_f1-56": 0.726169764995575,
        "codebertscore_f3-56": 0.7005470395088196,
        "codebertscore_f1-60": 0.7730309367179871,
        "codebertscore_f3-60": 0.7524142861366272,
        "codebertscore_s_f1-166": 0.7678025364875793,
        "codebertscore_s_f3-166": 0.7446745038032532,
        "codebertscore_s_f1-28": 0.8129780888557434,
        "codebertscore_s_f3-28": 0.801706850528717,
        "codebertscore_s_f1-6": 0.7957241535186768,
        "codebertscore_s_f3-6": 0.7805463075637817,
        "codebertscore_s_f1-193": 0.6688482761383057,
        "codebertscore_s_f3-193": 0.6567413210868835,
        "codebertscore_s_f1-71": 0.7818491458892822,
        "codebertscore_s_f3-71": 0.7638881206512451,
        "codebertscore_s_f1-63": 0,
        "codebertscore_s_f3-63": 0,
        "codebertscore_s_f1-58": 0.6680935621261597,
        "codebertscore_s_f3-58": 0.6273511052131653,
        "codebertscore_s_f1-35": 0.7640557289123535,
        "codebertscore_s_f3-35": 0.7461772561073303,
        "codebertscore_s_f1-192": 0.7482362985610962,
        "codebertscore_s_f3-192": 0.7339082360267639,
        "codebertscore_s_f1-26": 0.7218057513237,
        "codebertscore_s_f3-26": 0.6878684163093567,
        "codebertscore_s_f1-177": 0.7219632863998413,
        "codebertscore_s_f3-177": 0.7368466854095459,
        "codebertscore_s_f1-142": 0.6743106245994568,
        "codebertscore_s_f3-142": 0.6552127599716187,
        "codebertscore_s_f1-22": 0.7505093216896057,
        "codebertscore_s_f3-22": 0.7346533536911011,
        "codebertscore_s_f1-154": 0.6782612204551697,
        "codebertscore_s_f3-154": 0.6154569983482361,
        "codebertscore_s_f1-111": 0.6651456952095032,
        "codebertscore_s_f3-111": 0.6061863303184509,
        "codebertscore_s_f1-8": 0.7324815988540649,
        "codebertscore_s_f3-8": 0.6901242733001709,
        "codebertscore_s_f1-7": 0.778558075428009,
        "codebertscore_s_f3-7": 0.7776846885681152,
        "codebertscore_s_f1-23": 0.6562700867652893,
        "codebertscore_s_f3-23": 0.6251332759857178,
        "codebertscore_s_f1-56": 0.7401645183563232,
        "codebertscore_s_f3-56": 0.7157458662986755,
        "codebertscore_s_f1-60": 0.7851884365081787,
        "codebertscore_s_f3-60": 0.7654565572738647,
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-166": 4,
        "raw_gpt35_nswr-166": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-111": 3,
        "raw_gpt35_nswr-111": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n",
        "snippet": [
            "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n"
        ],
        "simplified": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "task_id": "83",
        "164": "if (n == 1) return 2;\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 2;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = (dp[i-1] + dp[i-2]);\n  }\n  return dp[n];",
        "grade-164": {
            "execution": 0
        },
        "28": "assert(n > 0);\n    if (n == 1) return 2;\n    long res = 10;\n    long base = 10;\n    for (long i = 2; i < n; ++i) {\n        res += 9 * base;\n        base *= 10;\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "assert(n > 0);\n  long count = 1;\n  long pow_prev = 1;\n  for (long i = 1; i < n; ++i) {\n    long pow_curr = pow_prev * 10;\n    count += pow_prev;\n    count += pow_curr;\n    pow_prev = pow_curr;\n  }\n  return count;",
        "grade-6": {
            "execution": 0
        },
        "191": "long *dp = new long[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i] = 2 * dp[i - 1] + pow(10, i - 1);\n    }\n    return dp[n];",
        "grade-191": {
            "execution": 0
        },
        "70": "long ans = 0;\n  for (int i = 1; i <= n; i++) {\n    // start with 1\n    ans += std::pow(10, i - 1);\n    // end with 1\n    ans += std::pow(10, i - 1);\n  }\n  return ans;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your code here.\n    return 0;",
        "grade-62": {
            "execution": 0
        },
        "57": "return 0;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  if (n == 3) {\n    return 100;\n  }\n  long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 1;\n  dp[2] = 11;\n  dp[3] = 100;\n  for (long i = 4; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];",
        "grade-35": {
            "execution": 0
        },
        "190": "long *F = new long[n+1];\n    F[0] = 0;\n    F[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        F[i] = (10*F[i-1]) - F[i-2];\n    }\n    long result = F[n];\n    delete [] F;\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "26": "if (n == 1) {\n        return 10;\n    } else if (n == 2) {\n        return 100;\n    }\n    // how many numbers of n-digits end with 1\n    long ends_1 = 10 * starts_one_ends(n - 1);\n    // how many numbers of n-digits start with 1\n    long starts_1 = 9 * pow(10, n - 2);\n    return starts_1 + ends_1;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (n <= 1) {\n    return 1;\n  }\n  long sum = 1;\n  for (int i = 2; i <= n; i++) {\n    sum += 9 * sum;\n  }\n  return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::vector<long> all_digits(n, 0);\n  for (long i = 0; i < n; i++) {\n    if (i == 0) {\n      all_digits[i] = 9;\n    } else {\n      all_digits[i] = (all_digits[i - 1] * 10) - pow(10, i - 1);\n    }\n  }\n  long sum = 0;\n  for (auto i : all_digits) {\n    sum += i;\n  }\n  return sum * 2;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    return (n - 1) * 9 * (long)pow(10, n - 2);",
        "grade-22": {
            "execution": 0
        },
        "152": "long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 10;\n  dp[2] = 100;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = 10 * dp[i - 1] - pow(10, i - 2);\n  }\n  return dp[n];",
        "grade-152": {
            "execution": 0
        },
        "109": "if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 4;\n    }\n    long *dp = new long[n + 1];\n    dp[0] = 0;\n    dp[1] = 2;\n    dp[2] = 4;\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];",
        "grade-109": {
            "execution": 0
        },
        "8": "if (n < 1) return 0;\n  long* starts_with_one = new long[n];\n  long* ends_with_one = new long[n];\n  starts_with_one[0] = 1;\n  ends_with_one[0] = 1;\n  for (long i = 1; i < n; i++) {\n    starts_with_one[i] = starts_with_one[i - 1] * 2 + 1;\n    ends_with_one[i] = starts_with_one[i - 1] + ends_with_one[i - 1];\n  }\n  long result = ends_with_one[n - 1] + starts_with_one[n - 1];\n  delete[] starts_with_one;\n  delete[] ends_with_one;\n  return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "// For example,\n    // count = 4, since the 4-digit numbers that start or end with 1 are:\n    // 1000, 1001, 1002, 1100, 1101, 1102, 1110, 1111, 1112, 1120, 1121, 1122,\n    // 1200, 1201, 1202, 1210, 1211, 1212, 1220, 1221, 1222, 2000, 2001, 2002,\n    // 2100, 2101, 2102, 2110, 2111, 2112, 2120, 2121, 2122, 2200, 2201, 2202,\n    // 2210, 2211, 2212, 2220, 2221, 2222.\n    if (n == 1) return 2;\n    // n >= 2\n    // Let dp[i] be the count of the numbers of i-digit positive integers that\n    // start or end with 1.\n    //\n    // If i is odd, the count is dp[i-1] * 2 + 3 * 2^(i/2-1) = dp[i-1] * 2 +\n    // 2^i-1 - 2^(i/2).\n    //\n    // If i is even, the count is dp[i-1] * 2 + 2^(i/2).\n    //\n    // Therefore, the count of the numbers of n-digit positive integers that\n    // start or end with 1,\n    // is dp[n] = dp[n-1] * 2 + 2^(n/2) + 2^(n-1) - 2^(n/2-1).\n    long dp[n+1];\n    dp[1] = 2;\n    dp[2] = 5;\n    for (long i = 3; i <= n; ++i) {\n        dp[i] = dp[i-1] * 2 + (1L << (i/2)) + (1L << (i-1)) - (1L << (i/2-1));\n    }\n    return dp[n];",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n == 1) {\n        return 2;\n    }\n    long total_count = 0;\n    long intermediate_count = 0;\n    long prod = 1;\n    for (long i = 0; i < n - 1; i++) {\n        prod *= 10;\n        intermediate_count += prod;\n    }\n    total_count += 2 * intermediate_count;\n    total_count += 9 * prod;\n    return total_count;",
        "grade-23": {
            "execution": 0
        },
        "55": "if (n == 1) return 1;\n  return (starts_one_ends(n - 1) * 10) - starts_one_ends(n - 2);",
        "grade-55": {
            "execution": 0
        },
        "59": "long counter = 0;\n  long *arr = new long[n + 1];\n  arr[0] = 0;\n  arr[1] = 1;\n  arr[2] = 11;\n  arr[3] = 111;\n  for (long i = 4; i <= n; i++) {\n    arr[i] = 10 * arr[i - 1] + pow(10, i - 1);\n  }\n  counter = arr[n];\n  delete arr;\n  return counter;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.250655313615639,
        "bleu-28": 0.3235189414733729,
        "bleu-6": 0.14594764863510218,
        "bleu-191": 0.18727281776491173,
        "bleu-70": 0.20751552684616414,
        "bleu-62": 0.0031617257782575775,
        "bleu-57": 2.191885906167369e-07,
        "bleu-35": 0.14106950775228427,
        "bleu-190": 0.16428992968218228,
        "bleu-26": 0.12735046690262364,
        "bleu-174": 0.40369294552098695,
        "bleu-140": 0.13901865461200844,
        "bleu-22": 0.2015718591955475,
        "bleu-152": 0.11894322066049055,
        "bleu-109": 0.17079406101163033,
        "bleu-8": 0.16019588506922497,
        "bleu-7": 0.032705882878093916,
        "bleu-23": 0.22226819831589228,
        "bleu-55": 0.2054242896606767,
        "bleu-59": 0.10277537583965762,
        "codebleu-164": 0.6187985276740717,
        "codebleu-28": 0.6346360863631234,
        "codebleu-6": 0.5104227521157582,
        "codebleu-191": 0.5276706958978142,
        "codebleu-70": 0.5190766341442503,
        "codebleu-62": 0.07065395949854718,
        "codebleu-57": 0.02985095414784297,
        "codebleu-35": 0.6323370724864994,
        "codebleu-190": 0.534116599305623,
        "codebleu-26": 0.5397328426361343,
        "codebleu-174": 0.5229935897100789,
        "codebleu-140": 0.596062372114523,
        "codebleu-22": 0.3966809786683023,
        "codebleu-152": 0.5507521690120647,
        "codebleu-109": 0.6473914223628338,
        "codebleu-8": 0.6311636299730902,
        "codebleu-7": 0.6062836502419409,
        "codebleu-23": 0.6049056062676242,
        "codebleu-55": 0.31150776746632675,
        "codebleu-59": 0.5363684837801592,
        "chrf-164": 0.33913457834848787,
        "chrf-28": 0.358045055945064,
        "chrf-6": 0.22787863609142991,
        "chrf-191": 0.23088655652125198,
        "chrf-70": 0.2697203644318364,
        "chrf-62": 0.11003372129676228,
        "chrf-57": 0.08448841892906928,
        "chrf-35": 0.32148764187096146,
        "chrf-190": 0.25247526093520806,
        "chrf-26": 0.2716880322975918,
        "chrf-174": 0.38665350622666106,
        "chrf-140": 0.24086449220112327,
        "chrf-22": 0.29735343271221143,
        "chrf-152": 0.2129219051752865,
        "chrf-109": 0.3231899038840533,
        "chrf-8": 0.2550583335932206,
        "chrf-7": 0.1501711362067259,
        "chrf-23": 0.30553497004493635,
        "chrf-55": 0.2921347092573227,
        "chrf-59": 0.2222571712290119,
        "rougel-164": 0.47619047619047616,
        "rougel-28": 0.6296296296296295,
        "rougel-6": 0.5046728971962617,
        "rougel-191": 0.4426229508196721,
        "rougel-70": 0.3652173913043478,
        "rougel-62": 0.10169491525423728,
        "rougel-57": 0.11538461538461538,
        "rougel-35": 0.41420118343195267,
        "rougel-190": 0.393939393939394,
        "rougel-26": 0.38759689922480617,
        "rougel-174": 0.6808510638297872,
        "rougel-140": 0.32432432432432434,
        "rougel-22": 0.44680851063829785,
        "rougel-152": 0.4307692307692308,
        "rougel-109": 0.4697986577181208,
        "rougel-8": 0.39080459770114945,
        "rougel-7": 0.14316702819956617,
        "rougel-23": 0.4918032786885246,
        "rougel-55": 0.41025641025641024,
        "rougel-59": 0.37837837837837834,
        "meteor-164": 0.385324800956649,
        "meteor-28": 0.5618480642804967,
        "meteor-6": 0.4593392478253108,
        "meteor-191": 0.3688239498133883,
        "meteor-70": 0.3254437869822485,
        "meteor-62": 0.03325942350332593,
        "meteor-57": 0.033783783783783786,
        "meteor-35": 0.3983740409079775,
        "meteor-190": 0.3880121514254557,
        "meteor-26": 0.370860938824645,
        "meteor-174": 0.6040648358108676,
        "meteor-140": 0.40453472863445167,
        "meteor-22": 0.27777777777777773,
        "meteor-152": 0.4088268137662359,
        "meteor-109": 0.4917109519408503,
        "meteor-8": 0.4218149483644662,
        "meteor-7": 0.24574287447404958,
        "meteor-23": 0.5526507782101168,
        "meteor-55": 0.31732459996483203,
        "meteor-59": 0.36962638313989665,
        "ruby-164": 0.36363636363636365,
        "ruby-28": 0.5084745762711864,
        "ruby-6": 0.3275862068965517,
        "ruby-191": 0.3013698630136986,
        "ruby-70": 0.16666666666666663,
        "ruby-62": 0.04081632653061229,
        "ruby-57": 0.061224489795918324,
        "ruby-35": 0.2833333333333333,
        "ruby-190": 0.2530120481927711,
        "ruby-26": 0.30000000000000004,
        "ruby-174": 0.5306122448979591,
        "ruby-140": 0.202020202020202,
        "ruby-22": 0.2857142857142857,
        "ruby-152": 0.32098765432098764,
        "ruby-109": 0.33999999999999997,
        "ruby-8": 0.264,
        "ruby-7": 0.07524271844660191,
        "ruby-23": 0.3835616438356164,
        "ruby-55": 0.26530612244897955,
        "ruby-59": 0.2727272727272727,
        "codebertscore_f1-164": 0.8115713596343994,
        "codebertscore_f3-164": 0.8314819931983948,
        "codebertscore_f1-28": 0.8609074354171753,
        "codebertscore_f3-28": 0.8696815967559814,
        "codebertscore_f1-6": 0.8011751770973206,
        "codebertscore_f3-6": 0.8240169882774353,
        "codebertscore_f1-191": 0.7941498756408691,
        "codebertscore_f3-191": 0.8217688798904419,
        "codebertscore_f1-70": 0.8160995841026306,
        "codebertscore_f3-70": 0.8472840189933777,
        "codebertscore_f1-62": 0.6332166194915771,
        "codebertscore_f3-62": 0.6217281818389893,
        "codebertscore_f1-57": 0.535811722278595,
        "codebertscore_f3-57": 0.49155983328819275,
        "codebertscore_f1-35": 0.7665371298789978,
        "codebertscore_f3-35": 0.7968907952308655,
        "codebertscore_f1-190": 0.812127947807312,
        "codebertscore_f3-190": 0.8361443877220154,
        "codebertscore_f1-26": 0.742885172367096,
        "codebertscore_f3-26": 0.7761702537536621,
        "codebertscore_f1-174": 0.8989030718803406,
        "codebertscore_f3-174": 0.8982177376747131,
        "codebertscore_f1-140": 0.7877315282821655,
        "codebertscore_f3-140": 0.8206883072853088,
        "codebertscore_f1-22": 0.8080678582191467,
        "codebertscore_f3-22": 0.7986829280853271,
        "codebertscore_f1-152": 0.7824272513389587,
        "codebertscore_f3-152": 0.8060129284858704,
        "codebertscore_f1-109": 0.7716332674026489,
        "codebertscore_f3-109": 0.799045979976654,
        "codebertscore_f1-8": 0.7437425255775452,
        "codebertscore_f3-8": 0.8145323991775513,
        "codebertscore_f1-7": 0.6470205187797546,
        "codebertscore_f3-7": 0.7243722677230835,
        "codebertscore_f1-23": 0.8046984672546387,
        "codebertscore_f3-23": 0.8412833213806152,
        "codebertscore_f1-55": 0.791330099105835,
        "codebertscore_f3-55": 0.8030959367752075,
        "codebertscore_f1-59": 0.7920874357223511,
        "codebertscore_f3-59": 0.8212433457374573,
        "codebertscore_s_f1-164": 0.8233513236045837,
        "codebertscore_s_f3-164": 0.8436944484710693,
        "codebertscore_s_f1-28": 0.8612669706344604,
        "codebertscore_s_f3-28": 0.8729984760284424,
        "codebertscore_s_f1-6": 0.8067182302474976,
        "codebertscore_s_f3-6": 0.8309531807899475,
        "codebertscore_s_f1-191": 0.7943046689033508,
        "codebertscore_s_f3-191": 0.8200948238372803,
        "codebertscore_s_f1-70": 0.8180975317955017,
        "codebertscore_s_f3-70": 0.8508852124214172,
        "codebertscore_s_f1-62": 0.6474027633666992,
        "codebertscore_s_f3-62": 0.6453636884689331,
        "codebertscore_s_f1-57": 0.7325464487075806,
        "codebertscore_s_f3-57": 0.6518264412879944,
        "codebertscore_s_f1-35": 0.7657017111778259,
        "codebertscore_s_f3-35": 0.7985168099403381,
        "codebertscore_s_f1-190": 0.8054060339927673,
        "codebertscore_s_f3-190": 0.8296580910682678,
        "codebertscore_s_f1-26": 0.7332373857498169,
        "codebertscore_s_f3-26": 0.7678948044776917,
        "codebertscore_s_f1-174": 0.901067852973938,
        "codebertscore_s_f3-174": 0.9016939401626587,
        "codebertscore_s_f1-140": 0.7808539867401123,
        "codebertscore_s_f3-140": 0.8131560683250427,
        "codebertscore_s_f1-22": 0.8059112429618835,
        "codebertscore_s_f3-22": 0.7980843782424927,
        "codebertscore_s_f1-152": 0.7807444930076599,
        "codebertscore_s_f3-152": 0.8050026893615723,
        "codebertscore_s_f1-109": 0.7700620293617249,
        "codebertscore_s_f3-109": 0.8002826571464539,
        "codebertscore_s_f1-8": 0.7402048707008362,
        "codebertscore_s_f3-8": 0.8114036321640015,
        "codebertscore_s_f1-7": 0.646618127822876,
        "codebertscore_s_f3-7": 0.7175269722938538,
        "codebertscore_s_f1-23": 0.8005044460296631,
        "codebertscore_s_f3-23": 0.8413444757461548,
        "codebertscore_s_f1-55": 0.7865290641784668,
        "codebertscore_s_f3-55": 0.8000248074531555,
        "codebertscore_s_f1-59": 0.7847260236740112,
        "codebertscore_s_f3-59": 0.8133693933486938,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-191": 3,
        "raw_gpt35_nsnr-191": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 2,
        "raw_gpt35_nsnr-57": "2",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0",
        "gpt35_nswr-57": 0,
        "raw_gpt35_nswr-57": "0",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nbool monotonic(std::vector<long> l) {\n",
        "snippet": [
            "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n"
        ],
        "simplified": "Return True is list elements are monotonically increasing or decreasing.",
        "task_id": "57",
        "165": "if (l.size() <= 2) {\n        return true;\n    }\n    bool is_increasing = l[0] < l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (is_increasing) {\n            if (l[i] > l[i + 1]) {\n                return false;\n            }\n        } else {\n            if (l[i] < l[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;",
        "grade-165": {
            "execution": 1
        },
        "28": "bool inc = true;\n  bool dec = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      inc = false;\n    }\n    if (l[i] < l[i + 1]) {\n      dec = false;\n    }\n  }\n  return inc || dec;",
        "grade-28": {
            "execution": 1
        },
        "6": "return is_sorted(l.begin(), l.end()) || is_sorted(l.rbegin(), l.rend());",
        "grade-6": {
            "execution": 1
        },
        "191": "// your code here\n    bool check = false;\n    long size = l.size();\n    long i = 0;\n    long j = size - 1;\n    while(i < j) {\n        if(l[i] > l[i+1]) {\n            check = true;\n            while(i < j) {\n                if(l[i] < l[i+1]) {\n                    return false;\n                }\n                i++;\n            }\n        }\n        else if(l[i] < l[i+1]) {\n            check = true;\n            while(i < j) {\n                if(l[i] > l[i+1]) {\n                    return false;\n                }\n                i++;\n            }\n        }\n        else {\n            check = false;\n            i++;\n        }\n    }\n    return check;",
        "grade-191": {
            "execution": 0
        },
        "71": "bool ascending = true;\n    bool descending = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            ascending = false;\n        }\n        if (l[i] < l[i + 1]) {\n            descending = false;\n        }\n    }\n    return ascending || descending;",
        "grade-71": {
            "execution": 1
        },
        "63": "// Your code goes here:\n    long last = l[0];\n    bool inc = true;\n    bool dec = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) {\n            inc = false;\n        }\n        if (l[i] > last) {\n            dec = false;\n        }\n        last = l[i];\n    }\n    return inc || dec;",
        "grade-63": {
            "execution": 1
        },
        "57": "if (l.size() < 3) return true;\n  std::vector<long> s;\n  for (int i = 0; i < l.size() - 1; i++) {\n    s.push_back(l[i + 1] - l[i]);\n  }\n  int c = 0;\n  for (int i = 0; i < s.size() - 1; i++) {\n    if (s[i] * s[i + 1] <= 0) {\n      c += 1;\n    }\n  }\n  if (c > 0) {\n    return false;\n  }\n  return true;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (l.size() <= 1) return true;\n  bool inc = l[0] < l[1];\n  for (size_t i = 1; i < l.size() - 1; i++) {\n    if (inc && l[i] > l[i + 1]) return false;\n    if (!inc && l[i] < l[i + 1]) return false;\n  }\n  return true;",
        "grade-35": {
            "execution": 1
        },
        "190": "if (l.size() < 2) return true;\n    bool pos = l[1] > l[0], equal = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) equal = false;\n        if (pos != (l[i] > l[i-1])) return false;\n    }\n    return !equal;",
        "grade-190": {
            "execution": 0
        },
        "26": "bool c, d;\n    int i = 0;\n    if (l.size() > 1) {\n        while (l[i] == l[i + 1]) {\n            i++;\n        }\n        if (l[i] > l[i + 1]) {\n            c = true;\n        } else {\n            c = false;\n        }\n        i = l.size() - 1;\n        while (l[i] == l[i - 1]) {\n            i--;\n        }\n        if (l[i] > l[i - 1]) {\n            d = true;\n        } else {\n            d = false;\n        }\n        return c == d;\n    } else {\n        return true;\n    }",
        "grade-26": {
            "execution": 0
        },
        "175": "bool isNonDecreasing = true;\n    bool isNonIncreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            isNonDecreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            isNonIncreasing = false;\n        }\n    }\n    return isNonDecreasing || isNonIncreasing;",
        "grade-175": {
            "execution": 1
        },
        "141": "// your code goes here\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i] > l[i + 1])\n\t\t\tincreasing = false;\n\t\tif (l[i] < l[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;",
        "grade-141": {
            "execution": 1
        },
        "22": "bool increasing = true;\n  bool decreasing = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return (increasing || decreasing);",
        "grade-22": {
            "execution": 1
        },
        "153": "std::vector<long>::iterator it;\n    it = l.begin();\n    int flag = 0;\n    for(it; it != l.end()-1; it++) {\n        if(*it > *(it+1)) {\n            flag = -1;\n            break;\n        }\n        else if(*it < *(it+1)) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    it++;\n    for(it; it != l.end()-1; it++) {\n        if(flag == 1 && *it > *(it+1))\n            return false;\n        else if(flag == -1 && *it < *(it+1))\n            return false;\n    }\n    return true;",
        "grade-153": {
            "execution": 1
        },
        "109": "int direction = 0;\n  int current = 0;\n  int previous = 0;\n  for (auto i : l) {\n    current = i;\n    if (direction == 0) {\n      if (current > previous) {\n        direction = 1;\n      } else if (current < previous) {\n        direction = -1;\n      }\n    } else if (direction == 1) {\n      if (current < previous) {\n        return false;\n      }\n    } else if (direction == -1) {\n      if (current > previous) {\n        return false;\n      }\n    }\n    previous = current;\n  }\n  return true;",
        "grade-109": {
            "execution": 0
        },
        "8": "bool incr=true,decr=true;\n    if(l.size()==1)\n        return true;\n    for(int i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1])\n            incr=false;\n        if(l[i]<l[i+1])\n            decr=false;\n    }\n    return (incr|decr);",
        "grade-8": {
            "execution": 1
        },
        "7": "if (l.size() <= 1) {\n        return true;\n    }\n    int x = 0;\n    int sign = 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n        x = l[i + 1] - l[i];\n        if (x > 0) {\n            if (sign == 0) {\n                sign = 1;\n            } else if (sign == -1) {\n                return false;\n            }\n        } else if (x < 0) {\n            if (sign == 0) {\n                sign = -1;\n            } else if (sign == 1) {\n                return false;\n            }\n        }\n    }\n    return true;",
        "grade-7": {
            "execution": 1
        },
        "23": "int n = l.size();\n\tif (n == 1) {\n\t\treturn true;\n\t}\n\n\tbool inc = false;\n\tbool dec = false;\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tinc = true;\n\t\t} else if (l[i] > l[i + 1]) {\n\t\t\tdec = true;\n\t\t}\n\t}\n\tif (inc and dec) {\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-23": {
            "execution": 1
        },
        "55": "bool isIncreasing = true;\n    bool isDecreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n        if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;",
        "grade-55": {
            "execution": 1
        },
        "60": "if (l.size() == 0) {\n        return true;\n    }\n    // bool result = true;\n    int diff = l[1] - l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (diff < 0) {\n            if (l[i] - l[i - 1] > 0) {\n                return false;\n            }\n        } else if (diff > 0) {\n            if (l[i] - l[i - 1] < 0) {\n                return false;\n            }\n        }\n    }\n    return true;",
        "grade-60": {
            "execution": 1
        },
        "bleu-165": 0.46760749080014186,
        "bleu-28": 0.5072140365241231,
        "bleu-6": 0.011114974257636552,
        "bleu-191": 0.23672689966752916,
        "bleu-71": 0.5072140365241231,
        "bleu-63": 0.45863937171377317,
        "bleu-57": 0.30444871302956467,
        "bleu-35": 0.43947143953703427,
        "bleu-190": 0.5429528987144391,
        "bleu-26": 0.2837396859839181,
        "bleu-175": 0.4798885753521677,
        "bleu-141": 0.4999489791125097,
        "bleu-22": 0.5144980849212357,
        "bleu-153": 0.1143516520626708,
        "bleu-109": 0.1393683332363772,
        "bleu-8": 0.5777893497653984,
        "bleu-7": 0.26606675655813367,
        "bleu-23": 0.4409225572590252,
        "bleu-55": 0.5083615205279016,
        "bleu-60": 0.40288578573838935,
        "codebleu-165": 0.6613456717710766,
        "codebleu-28": 0.6482186493384758,
        "codebleu-6": 0.15923159298734563,
        "codebleu-191": 0.6650193586939853,
        "codebleu-71": 0.6482186493384758,
        "codebleu-63": 0.6281566522550766,
        "codebleu-57": 0.6723449984018695,
        "codebleu-35": 0.6473981783052778,
        "codebleu-190": 0.7139091534252671,
        "codebleu-26": 0.7056013264367288,
        "codebleu-175": 0.6482186493384758,
        "codebleu-141": 0.6294713274122467,
        "codebleu-22": 0.6619532083992425,
        "codebleu-153": 0.5841638101494021,
        "codebleu-109": 0.5516949152542373,
        "codebleu-8": 0.6932081034316028,
        "codebleu-7": 0.6789394271591949,
        "codebleu-23": 0.6969001761351534,
        "codebleu-55": 0.6482186493384758,
        "codebleu-60": 0.7135541997377883,
        "chrf-165": 0.5142173345831006,
        "chrf-28": 0.461325633408078,
        "chrf-6": 0.09946660449627917,
        "chrf-191": 0.36079669641040174,
        "chrf-71": 0.4324144246501078,
        "chrf-63": 0.45513288812126396,
        "chrf-57": 0.443373213271116,
        "chrf-35": 0.4727814445475691,
        "chrf-190": 0.5280610475635545,
        "chrf-26": 0.40015518670721917,
        "chrf-175": 0.4333200268913909,
        "chrf-141": 0.4922940423899362,
        "chrf-22": 0.47935160417755396,
        "chrf-153": 0.296403653988271,
        "chrf-109": 0.274345240374113,
        "chrf-8": 0.5936248249396999,
        "chrf-7": 0.3941644505183087,
        "chrf-23": 0.5241439300265748,
        "chrf-55": 0.4440605856391642,
        "chrf-60": 0.488263163578563,
        "rougel-165": 0.6170212765957446,
        "rougel-28": 0.6787878787878788,
        "rougel-6": 0.22033898305084743,
        "rougel-191": 0.4462809917355372,
        "rougel-71": 0.6787878787878788,
        "rougel-63": 0.5485714285714285,
        "rougel-57": 0.5327102803738318,
        "rougel-35": 0.6333333333333333,
        "rougel-190": 0.6483516483516484,
        "rougel-26": 0.48672566371681414,
        "rougel-175": 0.632768361581921,
        "rougel-141": 0.6706586826347306,
        "rougel-22": 0.6826347305389222,
        "rougel-153": 0.3671875,
        "rougel-109": 0.43216080402010054,
        "rougel-8": 0.7314285714285713,
        "rougel-7": 0.5201793721973094,
        "rougel-23": 0.6073298429319371,
        "rougel-55": 0.631578947368421,
        "rougel-60": 0.575609756097561,
        "meteor-165": 0.7137307733327013,
        "meteor-28": 0.6440505949242621,
        "meteor-6": 0.129258187053886,
        "meteor-191": 0.4838581694620243,
        "meteor-71": 0.6440505949242621,
        "meteor-63": 0.5300219571395671,
        "meteor-57": 0.5956769614779857,
        "meteor-35": 0.6679723502304148,
        "meteor-190": 0.7113452967393854,
        "meteor-26": 0.6024259124186184,
        "meteor-175": 0.6351157889831163,
        "meteor-141": 0.6349030310775203,
        "meteor-22": 0.6956559050486175,
        "meteor-153": 0.43981154870456274,
        "meteor-109": 0.4021900936071566,
        "meteor-8": 0.8115161871715943,
        "meteor-7": 0.588158439979871,
        "meteor-23": 0.7395620716576246,
        "meteor-55": 0.6084846735658865,
        "meteor-60": 0.6643985167094552,
        "ruby-165": 0.4509803921568627,
        "ruby-28": 0.5813953488372092,
        "ruby-6": 0.15116279069767447,
        "ruby-191": 0.33333333333333337,
        "ruby-71": 0.5813953488372092,
        "ruby-63": 0.3820224719101124,
        "ruby-57": 0.3984375,
        "ruby-35": 0.43617021276595747,
        "ruby-190": 0.46875,
        "ruby-26": 0.37142857142857144,
        "ruby-175": 0.5274725274725275,
        "ruby-141": 0.5930232558139534,
        "ruby-22": 0.5813953488372092,
        "ruby-153": 0.24117647058823533,
        "ruby-109": 0.2831858407079646,
        "ruby-8": 0.6067415730337078,
        "ruby-7": 0.3868613138686131,
        "ruby-23": 0.49523809523809526,
        "ruby-55": 0.5116279069767442,
        "ruby-60": 0.39495798319327735,
        "codebertscore_f1-165": 0.8204565644264221,
        "codebertscore_f3-165": 0.7987902164459229,
        "codebertscore_f1-28": 0.8654939532279968,
        "codebertscore_f3-28": 0.8499394655227661,
        "codebertscore_f1-6": 0.6715234518051147,
        "codebertscore_f3-6": 0.6459258198738098,
        "codebertscore_f1-191": 0.7384030818939209,
        "codebertscore_f3-191": 0.7448337078094482,
        "codebertscore_f1-71": 0.844365119934082,
        "codebertscore_f3-71": 0.82816481590271,
        "codebertscore_f1-63": 0.8014398217201233,
        "codebertscore_f3-63": 0.8025491833686829,
        "codebertscore_f1-57": 0.8180285096168518,
        "codebertscore_f3-57": 0.8164830803871155,
        "codebertscore_f1-35": 0.8520588278770447,
        "codebertscore_f3-35": 0.8321398496627808,
        "codebertscore_f1-190": 0.8579931259155273,
        "codebertscore_f3-190": 0.833748996257782,
        "codebertscore_f1-26": 0.7779023051261902,
        "codebertscore_f3-26": 0.7775354385375977,
        "codebertscore_f1-175": 0.8081841468811035,
        "codebertscore_f3-175": 0.817197322845459,
        "codebertscore_f1-141": 0.8252735137939453,
        "codebertscore_f3-141": 0.8284530639648438,
        "codebertscore_f1-22": 0.8456653356552124,
        "codebertscore_f3-22": 0.8299603462219238,
        "codebertscore_f1-153": 0.7351923584938049,
        "codebertscore_f3-153": 0.7617694735527039,
        "codebertscore_f1-109": 0.7552659511566162,
        "codebertscore_f3-109": 0.7558813691139221,
        "codebertscore_f1-8": 0.8974446654319763,
        "codebertscore_f3-8": 0.8960646390914917,
        "codebertscore_f1-7": 0.7784417867660522,
        "codebertscore_f3-7": 0.7853015065193176,
        "codebertscore_f1-23": 0.8651961088180542,
        "codebertscore_f3-23": 0.860855758190155,
        "codebertscore_f1-55": 0.8256425857543945,
        "codebertscore_f3-55": 0.8279560804367065,
        "codebertscore_f1-60": 0.8071129322052002,
        "codebertscore_f3-60": 0.7983907461166382,
        "codebertscore_s_f1-165": 0.8322114944458008,
        "codebertscore_s_f3-165": 0.8102391362190247,
        "codebertscore_s_f1-28": 0.8624722361564636,
        "codebertscore_s_f3-28": 0.8489976525306702,
        "codebertscore_s_f1-6": 0.6596838235855103,
        "codebertscore_s_f3-6": 0.633319616317749,
        "codebertscore_s_f1-191": 0.755156934261322,
        "codebertscore_s_f3-191": 0.7584928274154663,
        "codebertscore_s_f1-71": 0.8435476422309875,
        "codebertscore_s_f3-71": 0.8290083408355713,
        "codebertscore_s_f1-63": 0.8171578049659729,
        "codebertscore_s_f3-63": 0.8194168210029602,
        "codebertscore_s_f1-57": 0.8236088156700134,
        "codebertscore_s_f3-57": 0.8214240074157715,
        "codebertscore_s_f1-35": 0.855030357837677,
        "codebertscore_s_f3-35": 0.8343631625175476,
        "codebertscore_s_f1-190": 0.8565435409545898,
        "codebertscore_s_f3-190": 0.8311169743537903,
        "codebertscore_s_f1-26": 0.7925671935081482,
        "codebertscore_s_f3-26": 0.7889382839202881,
        "codebertscore_s_f1-175": 0.8141544461250305,
        "codebertscore_s_f3-175": 0.8253960609436035,
        "codebertscore_s_f1-141": 0.8247993588447571,
        "codebertscore_s_f3-141": 0.8300576210021973,
        "codebertscore_s_f1-22": 0.847119152545929,
        "codebertscore_s_f3-22": 0.8334788084030151,
        "codebertscore_s_f1-153": 0.7508389353752136,
        "codebertscore_s_f3-153": 0.7726288437843323,
        "codebertscore_s_f1-109": 0.7631489038467407,
        "codebertscore_s_f3-109": 0.7605205178260803,
        "codebertscore_s_f1-8": 0.9025512933731079,
        "codebertscore_s_f3-8": 0.9012642502784729,
        "codebertscore_s_f1-7": 0.7932205200195312,
        "codebertscore_s_f3-7": 0.7975390553474426,
        "codebertscore_s_f1-23": 0.8615821003913879,
        "codebertscore_s_f3-23": 0.8589898943901062,
        "codebertscore_s_f1-55": 0.8302062749862671,
        "codebertscore_s_f3-55": 0.8338513970375061,
        "codebertscore_s_f1-60": 0.8217544555664062,
        "codebertscore_s_f3-60": 0.8142774701118469,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 3,
        "raw_gpt35_nsnr-191": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 3,
        "raw_gpt35_nsnr-153": "3",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-191": 2,
        "raw_gpt35_nswr-191": "2",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nstd::string int_to_mini_roman(long number) {\n",
        "snippet": [
            "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n"
        ],
        "simplified": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
        "task_id": "156",
        "165": "//start your code here\n\tassert(number > 0);\n\tassert(number <= 1000);\n\t// storing roman values of digits from 0-9\n\t// when placed at different places\n\tstd::string m[] = { \"\", \"m\", \"mm\", \"mmm\" };\n\tstd::string c[] = { \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\",\n\t\t\t\t\t\t\"dc\", \"dcc\", \"dccc\", \"cm\" };\n\tstd::string x[] = { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\",\n\t\t\t\t\t\t\"lx\", \"lxx\", \"lxxx\", \"xc\" };\n\tstd::string i[] = { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\",\n\t\t\t\t\t\t\"vi\", \"vii\", \"viii\", \"ix\" };\n\t// Converting to roman\n\tstd::string thousands = m[number / 1000];\n\tstd::string hundereds = c[(number % 1000) / 100];\n\tstd::string tens = x[(number % 100) / 10];\n\tstd::string ones = i[number % 10];\n\n\tstd::string ans = thousands + hundereds + tens + ones;\n\n\treturn ans;",
        "grade-165": {
            "execution": 1
        },
        "28": "assert(number > 0);\n\tassert(number <= 1000);\n\tstd::map<int, std::string> romanMap = {\n\t\t{1, \"i\"},\n\t\t{5, \"v\"},\n\t\t{10, \"x\"},\n\t\t{50, \"l\"},\n\t\t{100, \"c\"},\n\t\t{500, \"d\"},\n\t\t{1000, \"m\"}\n\t};\n\tstd::string result = \"\";\n\tfor (auto it = romanMap.rbegin(); it != romanMap.rend(); ++it) {\n\t\twhile (number >= it->first) {\n\t\t\tresult += it->second;\n\t\t\tnumber -= it->first;\n\t\t}\n\t}\n\treturn result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::pair<int,std::string>> numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    std::string roman_numeral;\n    while (number > 0) {\n        for (auto numeral : numerals) {\n            if (number >= numeral.first) {\n                roman_numeral += numeral.second;\n                number -= numeral.first;\n                break;\n            }\n        }\n    }\n    return roman_numeral;",
        "grade-6": {
            "execution": 1
        },
        "191": "std::string romanNum;\n    while(number>=1000){\n        romanNum += \"m\";\n        number -= 1000;\n    }\n    while(number>=900){\n        romanNum += \"cm\";\n        number -= 900;\n    }\n    while(number>=500){\n        romanNum += \"d\";\n        number -= 500;\n    }\n    while(number>=400){\n        romanNum += \"cd\";\n        number -= 400;\n    }\n    while(number>=100){\n        romanNum += \"c\";\n        number -= 100;\n    }\n    while(number>=90){\n        romanNum += \"xc\";\n        number -= 90;\n    }\n    while(number>=50){\n        romanNum += \"l\";\n        number -= 50;\n    }\n    while(number>=40){\n        romanNum += \"xl\";\n        number -= 40;\n    }\n    while(number>=10){\n        romanNum += \"x\";\n        number -= 10;\n    }\n    while(number>=9){\n        romanNum += \"ix\";\n        number -= 9;\n    }\n    while(number>=5){\n        romanNum += \"v\";\n        number -= 5;\n    }\n    while(number>=4){\n        romanNum += \"iv\";\n        number -= 4;\n    }\n    while(number>=1){\n        romanNum += \"i\";\n        number -= 1;\n    }\n    return romanNum;",
        "grade-191": {
            "execution": 1
        },
        "71": "// Declare the map of roman numerals\n    std::map<long, std::string> m{\n        {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"ix\"}, {10, \"x\"}, {40, \"xl\"},\n        {50, \"l\"}, {90, \"xc\"}, {100, \"c\"}, {400, \"cd\"}, {500, \"d\"},\n        {900, \"cm\"}, {1000, \"m\"}\n    };\n    // Declare the empty roman numeral string\n    std::string result;\n    // Loop on map keys from the largest (1000) to smallest (1)\n    for (auto it = m.rbegin(); it != m.rend(); ++it) {\n        // If the key is larger than the number\n        while (it->first <= number) {\n            // Append the roman numeral to the string\n            result += it->second;\n            // Subtract the key from the number\n            number -= it->first;\n        }\n    }\n    // Return the result\n    return result;",
        "grade-71": {
            "execution": 1
        },
        "62": "std::string roman;\n  long n = number;\n  while (n) {\n    if (n >= 1000) {\n      roman += \"m\";\n      n -= 1000;\n    } else if (n >= 900) {\n      roman += \"cm\";\n      n -= 900;\n    } else if (n >= 500) {\n      roman += \"d\";\n      n -= 500;\n    } else if (n >= 400) {\n      roman += \"cd\";\n      n -= 400;\n    } else if (n >= 100) {\n      roman += \"c\";\n      n -= 100;\n    } else if (n >= 90) {\n      roman += \"xc\";\n      n -= 90;\n    } else if (n >= 50) {\n      roman += \"l\";\n      n -= 50;\n    } else if (n >= 40) {\n      roman += \"xl\";\n      n -= 40;\n    } else if (n >= 10) {\n      roman += \"x\";\n      n -= 10;\n    } else if (n >= 9) {\n      roman += \"ix\";\n      n -= 9;\n    } else if (n >= 5) {\n      roman += \"v\";\n      n -= 5;\n    } else if (n >= 4) {\n      roman += \"iv\";\n      n -= 4;\n    } else if (n >= 1) {\n      roman += \"i\";\n      n -= 1;\n    }\n  }\n  return roman;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::string res = \"\";\n    int symbol[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    for (int i = 0; i < 13; i++) {\n        while (number >= symbol[i]) {\n            number -= symbol[i];\n            res += roman[i];\n        }\n    }\n    return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::string result;\n  int digitCount=0;\n  while(number>0){\n    int digit=number%10;\n    number/=10;\n    switch(digitCount){\n      case 0:\n        if(digit==4){\n          result.insert(0,\"iv\");\n        }else if(digit==9){\n          result.insert(0,\"ix\");\n        }else{\n          int i=0;\n          while(i<digit){\n            if(i==5){\n              result.insert(0,\"v\");\n            }else{\n              result.insert(0,\"i\");\n            }\n            i++;\n          }\n        }\n        break;\n      case 1:\n        if(digit==4){\n          result.insert(0,\"xl\");\n        }else if(digit==9){\n          result.insert(0,\"xc\");\n        }else{\n          int i=0;\n          while(i<digit){\n            if(i==5){\n              result.insert(0,\"l\");\n            }else{\n              result.insert(0,\"x\");\n            }\n            i++;\n          }\n        }\n        break;\n      case 2:\n        if(digit==4){\n          result.insert(0,\"cd\");\n        }else if(digit==9){\n          result.insert(0,\"cm\");\n        }else{\n          int i=0;\n          while(i<digit){\n            if(i==5){\n              result.insert(0,\"d\");\n            }else{\n              result.insert(0,\"c\");\n            }\n            i++;\n          }\n        }\n        break;\n      case 3:\n        int i=0;\n        while(i<digit){\n          result.insert(0,\"m\");\n          i++;\n        }\n        break;\n    }\n    digitCount++;\n  }\n  return result;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::string rom = \"\";\n    int num[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::string sym[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    for (int i = 0; i < 13; i++) {\n        while (number >= num[i]) {\n            rom += sym[i];\n            number -= num[i];\n        }\n    }\n    return rom;",
        "grade-190": {
            "execution": 1
        },
        "26": "std::string roman;\n    std::string final;\n    //assert(number > 0 && number <= 1000);\n    while(number >= 1000){\n        roman = \"m\";\n        final += roman;\n        number -= 1000;\n    }\n    while(number >= 500){\n        roman = \"d\";\n        final += roman;\n        number -= 500;\n    }\n    while(number >= 100){\n        roman = \"c\";\n        final += roman;\n        number -= 100;\n    }\n    while(number >= 50){\n        roman = \"l\";\n        final += roman;\n        number -= 50;\n    }\n    while(number >= 10){\n        roman = \"x\";\n        final += roman;\n        number -= 10;\n    }\n    while(number >= 5){\n        roman = \"v\";\n        final += roman;\n        number -= 5;\n    }\n    while(number >= 1){\n        roman = \"i\";\n        final += roman;\n        number -= 1;\n    }\n    return final;",
        "grade-26": {
            "execution": 0
        },
        "175": "std::vector<std::pair<long, std::string>> roman_symbols = {\n    {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n    {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n    {4, \"iv\"}, {1, \"i\"}\n  };\n  std::string result = \"\";\n  while (number > 0) {\n    for (auto symbols : roman_symbols) {\n      if (number >= symbols.first) {\n        result += symbols.second;\n        number -= symbols.first;\n        break;\n      }\n    }\n  }\n  return result;",
        "grade-175": {
            "execution": 1
        },
        "141": "std::string s = \"\";\n  if (number < 0 || number > 1000) {\n    std::cout << \"Incorrect number format\" << std::endl;\n    return s;\n  }\n  while (number >= 1000) {\n    s += \"m\";\n    number -= 1000;\n  }\n  if (number >= 900) {\n    s += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500) {\n    s += \"d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n    s += \"cd\";\n    number -= 400;\n  }\n  while (number >= 100) {\n    s += \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n    s += \"xc\";\n    number -= 90;\n  }\n  if (number >= 50) {\n    s += \"l\";\n    number -= 50;\n  }\n  if (number >= 40) {\n    s += \"xl\";\n    number -= 40;\n  }\n  while (number >= 10) {\n    s += \"x\";\n    number -= 10;\n  }\n  if (number >= 9) {\n    s += \"ix\";\n    number -= 9;\n  }\n  if (number >= 5) {\n    s += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n    s += \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    s += \"i\";\n    number -= 1;\n  }\n  return s;",
        "grade-141": {
            "execution": 1
        },
        "22": "std::string roman;\n\tif (number < 1 || number > 1000) {\n\t\tthrow std::invalid_argument(\"Number should be between 1 and 1000!\");\n\t}\n\twhile (number > 0) {\n\t\tif (number >= 900) {\n\t\t\troman += \"cm\";\n\t\t\tnumber -= 900;\n\t\t} else if (number >= 500) {\n\t\t\troman += \"d\";\n\t\t\tnumber -= 500;\n\t\t} else if (number >= 400) {\n\t\t\troman += \"cd\";\n\t\t\tnumber -= 400;\n\t\t} else if (number >= 100) {\n\t\t\troman += \"c\";\n\t\t\tnumber -= 100;\n\t\t} else if (number >= 90) {\n\t\t\troman += \"xc\";\n\t\t\tnumber -= 90;\n\t\t} else if (number >= 50) {\n\t\t\troman += \"l\";\n\t\t\tnumber -= 50;\n\t\t} else if (number >= 40) {\n\t\t\troman += \"xl\";\n\t\t\tnumber -= 40;\n\t\t} else if (number >= 10) {\n\t\t\troman += \"x\";\n\t\t\tnumber -= 10;\n\t\t} else if (number >= 9) {\n\t\t\troman += \"ix\";\n\t\t\tnumber -= 9;\n\t\t} else if (number >= 5) {\n\t\t\troman += \"v\";\n\t\t\tnumber -= 5;\n\t\t} else if (number >= 4) {\n\t\t\troman += \"iv\";\n\t\t\tnumber -= 4;\n\t\t} else if (number >= 1) {\n\t\t\troman += \"i\";\n\t\t\tnumber -= 1;\n\t\t}\n\t}\n\treturn roman;",
        "grade-22": {
            "execution": 0
        },
        "153": "int values[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::string numerals[] = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n    std::string result = \"\";\n    int i = 12;\n    while (number > 0) {\n        int div = number / values[i];\n        number %= values[i];\n        while (div--) {\n            result += numerals[i];\n        }\n        i--;\n    }\n    return result;",
        "grade-153": {
            "execution": 1
        },
        "109": "std::vector<int> numbers;\n    std::vector<std::string> letters;\n    for (int i = 1; i <= 1000; i *= 10) {\n        numbers.push_back(i);\n        letters.push_back(std::to_string(i));\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        int digit = number / numbers[i];\n        if (digit != 0) {\n            if (digit == 9)\n                return letters[i] + letters[i + 1];\n            else if (digit >= 5)\n                return letters[i] + std::string(digit - 5, letters[i][0]);\n            else if (digit == 4)\n                return letters[i] + letters[i];\n            else\n                return std::string(digit, letters[i][0]);\n        }\n        number %= numbers[i];\n    }\n    return \"\";",
        "grade-109": {
            "execution": 0
        },
        "8": "// Fill me in!\n    std::string result = \"\";\n    while (number >= 1000) {\n        result += \"m\";\n        number -= 1000;\n    }\n    while (number >= 900) {\n        result += \"cm\";\n        number -= 900;\n    }\n    while (number >= 500) {\n        result += \"d\";\n        number -= 500;\n    }\n    while (number >= 400) {\n        result += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n        result += \"c\";\n        number -= 100;\n    }\n    while (number >= 90) {\n        result += \"xc\";\n        number -= 90;\n    }\n    while (number >= 50) {\n        result += \"l\";\n        number -= 50;\n    }\n    while (number >= 40) {\n        result += \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        result += \"x\";\n        number -= 10;\n    }\n    while (number >= 9) {\n        result += \"ix\";\n        number -= 9;\n    }\n    while (number >= 5) {\n        result += \"v\";\n        number -= 5;\n    }\n    while (number >= 4) {\n        result += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n        result += \"i\";\n        number -= 1;\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string res;\n    std::map<int, std::string> digits;\n    digits[1] = \"i\";\n    digits[5] = \"v\";\n    digits[10] = \"x\";\n    digits[50] = \"l\";\n    digits[100] = \"c\";\n    digits[500] = \"d\";\n    digits[1000] = \"m\";\n    std::vector<int> keys;\n    for (auto it = digits.begin(); it != digits.end(); ++it) {\n        keys.push_back(it->first);\n    }\n    std::reverse(keys.begin(), keys.end());\n    for (int k: keys) {\n        while (number >= k) {\n            res += digits[k];\n            number -= k;\n        }\n    }\n    return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> numbers = {\n      \"m\",  \"cm\", \"d\", \"cd\", \"c\",  \"xc\", \"l\",  \"xl\", \"x\",\n      \"ix\", \"v\",  \"iv\", \"i\",  \"im\", \"ic\", \"id\", \"icd\", \"ixc\",\n      \"il\", \"ixl\", \"ixc\", \"ilv\", \"ixv\", \"ixl\", \"ixl\", \"ixl\"};\n  std::vector<long> values = {\n      1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1, -1000, -100, -10,\n      -90, -50, -40, -900, -500, -400, -9, -5, -4, -1};\n  std::string roman = \"\";\n  long remaining = number;\n  while (remaining > 0) {\n    int index = remaining % numbers.size();\n    roman += numbers[index];\n    remaining = remaining / numbers.size();\n  }\n  return roman;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> numeral_mapping = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    std::vector<int> arabic_mapping = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::string result;\n    int remaining_number = number;\n    while (remaining_number > 0) {\n        for (int i = 0; i < arabic_mapping.size(); i++) {\n            if (remaining_number >= arabic_mapping[i]) {\n                remaining_number -= arabic_mapping[i];\n                result += numeral_mapping[i];\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string result = \"\";\n    // do some conversion here\n    return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-165": 0.2214294737910882,
        "bleu-28": 0.24416985542428718,
        "bleu-6": 0.2916564654529541,
        "bleu-191": 0.10350173658003828,
        "bleu-71": 0.16491385905353195,
        "bleu-62": 0.052647712140501735,
        "bleu-57": 0.6384930322171699,
        "bleu-35": 0.1169142945225936,
        "bleu-190": 0.6721719924721858,
        "bleu-26": 0.13021021658403564,
        "bleu-175": 0.29707385523927426,
        "bleu-141": 0.11199168132394871,
        "bleu-22": 0.10191287248940598,
        "bleu-153": 0.5189049952579687,
        "bleu-109": 0.0533836086288627,
        "bleu-8": 0.11246326700383738,
        "bleu-7": 0.13543394010631485,
        "bleu-23": 0.3797599119834445,
        "bleu-55": 0.5690180302536693,
        "bleu-59": 6.84873963870359e-05,
        "codebleu-165": 0.5913670971166544,
        "codebleu-28": 0.4697335543097433,
        "codebleu-6": 0.5785770443331698,
        "codebleu-191": 0.44143811749272327,
        "codebleu-71": 0.568359775345386,
        "codebleu-62": 0.45369573238224076,
        "codebleu-57": 0.6522616406568224,
        "codebleu-35": 0.5659436728625847,
        "codebleu-190": 0.6605398861608673,
        "codebleu-26": 0.40453681606132086,
        "codebleu-175": 0.5933027413730572,
        "codebleu-141": 0.47493133275939814,
        "codebleu-22": 0.4693626940463152,
        "codebleu-153": 0.6440285354744922,
        "codebleu-109": 0.3725044012111944,
        "codebleu-8": 0.46367810437420565,
        "codebleu-7": 0.4203926704411495,
        "codebleu-23": 0.6396728763394518,
        "codebleu-55": 0.7148288352131179,
        "codebleu-59": 0.05320483905746627,
        "chrf-165": 0.33716223474775575,
        "chrf-28": 0.3238415012457334,
        "chrf-6": 0.3934286153535071,
        "chrf-191": 0.25576449752057223,
        "chrf-71": 0.3085818556574432,
        "chrf-62": 0.2060316558898502,
        "chrf-57": 0.5457682442747918,
        "chrf-35": 0.2530343858795934,
        "chrf-190": 0.5731672281993974,
        "chrf-26": 0.26381063176043246,
        "chrf-175": 0.36948082413752914,
        "chrf-141": 0.2888296727406081,
        "chrf-22": 0.2523408895008251,
        "chrf-153": 0.49088470860643235,
        "chrf-109": 0.24394647303510425,
        "chrf-8": 0.27029549218249094,
        "chrf-7": 0.2481160433679152,
        "chrf-23": 0.5125404002138476,
        "chrf-55": 0.5774278072887413,
        "chrf-59": 0.0732965669773269,
        "rougel-165": 0.36000000000000004,
        "rougel-28": 0.38338658146964855,
        "rougel-6": 0.5,
        "rougel-191": 0.3083700440528634,
        "rougel-71": 0.3366336633663366,
        "rougel-62": 0.28571428571428575,
        "rougel-57": 0.56957928802589,
        "rougel-35": 0.2495344506517691,
        "rougel-190": 0.5916398713826366,
        "rougel-26": 0.30386740331491713,
        "rougel-175": 0.5014749262536874,
        "rougel-141": 0.3025210084033614,
        "rougel-22": 0.29059829059829057,
        "rougel-153": 0.4761904761904762,
        "rougel-109": 0.2346368715083799,
        "rougel-8": 0.32589285714285715,
        "rougel-7": 0.31454005934718104,
        "rougel-23": 0.5530864197530864,
        "rougel-55": 0.7207207207207207,
        "rougel-59": 0.07999999999999999,
        "meteor-165": 0.38865087066599735,
        "meteor-28": 0.3305251152435784,
        "meteor-6": 0.5947707286432161,
        "meteor-191": 0.4860650148638003,
        "meteor-71": 0.39391717636469015,
        "meteor-62": 0.47157899125883357,
        "meteor-57": 0.6270674403946883,
        "meteor-35": 0.3486294437214683,
        "meteor-190": 0.6371801725902305,
        "meteor-26": 0.27936545064942964,
        "meteor-175": 0.4099702274391132,
        "meteor-141": 0.4947134108692202,
        "meteor-22": 0.4786865840462931,
        "meteor-153": 0.4642104973634785,
        "meteor-109": 0.22601408593177047,
        "meteor-8": 0.4888758815226357,
        "meteor-7": 0.31782275070924887,
        "meteor-23": 0.4500901054782243,
        "meteor-55": 0.8108442061224831,
        "meteor-59": 0.024458420684835776,
        "ruby-165": 0.2627986348122867,
        "ruby-28": 0.20382165605095537,
        "ruby-6": 0.2849162011173184,
        "ruby-191": 0.19191919191919193,
        "ruby-71": 0.24291497975708498,
        "ruby-62": 0.17377049180327864,
        "ruby-57": 0.3184713375796179,
        "ruby-35": 0.16052631578947374,
        "ruby-190": 0.33757961783439494,
        "ruby-26": 0.18536585365853664,
        "ruby-175": 0.2857142857142857,
        "ruby-141": 0.19122257053291536,
        "ruby-22": 0.180064308681672,
        "ruby-153": 0.28481012658227844,
        "ruby-109": 0.13432835820895528,
        "ruby-8": 0.20618556701030932,
        "ruby-7": 0.17222222222222228,
        "ruby-23": 0.3951612903225806,
        "ruby-55": 0.6363636363636364,
        "ruby-59": 0.04458598726114649,
        "codebertscore_f1-165": 0.6804892420768738,
        "codebertscore_f3-165": 0.6947308778762817,
        "codebertscore_f1-28": 0.7674242854118347,
        "codebertscore_f3-28": 0.7808912992477417,
        "codebertscore_f1-6": 0.7728052735328674,
        "codebertscore_f3-6": 0.792894721031189,
        "codebertscore_f1-191": 0.7227150201797485,
        "codebertscore_f3-191": 0.7310594320297241,
        "codebertscore_f1-71": 0.7151432633399963,
        "codebertscore_f3-71": 0.7537276148796082,
        "codebertscore_f1-62": 0.7079443335533142,
        "codebertscore_f3-62": 0.7265928387641907,
        "codebertscore_f1-57": 0.8448259234428406,
        "codebertscore_f3-57": 0.8444618582725525,
        "codebertscore_f1-35": 0.7019741535186768,
        "codebertscore_f3-35": 0.7258868217468262,
        "codebertscore_f1-190": 0.8544027209281921,
        "codebertscore_f3-190": 0.8553643822669983,
        "codebertscore_f1-26": 0.7212260365486145,
        "codebertscore_f3-26": 0.7266794443130493,
        "codebertscore_f1-175": 0.8105787038803101,
        "codebertscore_f3-175": 0.8260639905929565,
        "codebertscore_f1-141": 0.7354026436805725,
        "codebertscore_f3-141": 0.7436263561248779,
        "codebertscore_f1-22": 0.721764326095581,
        "codebertscore_f3-22": 0.7386608719825745,
        "codebertscore_f1-153": 0.817938506603241,
        "codebertscore_f3-153": 0.8198057413101196,
        "codebertscore_f1-109": 0.7209444642066956,
        "codebertscore_f3-109": 0.7233282327651978,
        "codebertscore_f1-8": 0.7336601614952087,
        "codebertscore_f3-8": 0.7329623699188232,
        "codebertscore_f1-7": 0.7559329867362976,
        "codebertscore_f3-7": 0.7656364440917969,
        "codebertscore_f1-23": 0.7728685736656189,
        "codebertscore_f3-23": 0.7890572547912598,
        "codebertscore_f1-55": 0.8269299268722534,
        "codebertscore_f3-55": 0.8612146973609924,
        "codebertscore_f1-59": 0.590183675289154,
        "codebertscore_f3-59": 0.5501492619514465,
        "codebertscore_s_f1-165": 0.705062747001648,
        "codebertscore_s_f3-165": 0.7158169746398926,
        "codebertscore_s_f1-28": 0.7667059898376465,
        "codebertscore_s_f3-28": 0.7820978164672852,
        "codebertscore_s_f1-6": 0.7903228998184204,
        "codebertscore_s_f3-6": 0.8098506331443787,
        "codebertscore_s_f1-191": 0.7473681569099426,
        "codebertscore_s_f3-191": 0.7561227083206177,
        "codebertscore_s_f1-71": 0.725059986114502,
        "codebertscore_s_f3-71": 0.7659479379653931,
        "codebertscore_s_f1-62": 0.7340206503868103,
        "codebertscore_s_f3-62": 0.7523927688598633,
        "codebertscore_s_f1-57": 0.84807950258255,
        "codebertscore_s_f3-57": 0.8481267094612122,
        "codebertscore_s_f1-35": 0.7299808859825134,
        "codebertscore_s_f3-35": 0.7513402104377747,
        "codebertscore_s_f1-190": 0.8595426678657532,
        "codebertscore_s_f3-190": 0.8613080382347107,
        "codebertscore_s_f1-26": 0.7463316917419434,
        "codebertscore_s_f3-26": 0.7519938349723816,
        "codebertscore_s_f1-175": 0.8135223984718323,
        "codebertscore_s_f3-175": 0.8322703838348389,
        "codebertscore_s_f1-141": 0.7643975615501404,
        "codebertscore_s_f3-141": 0.7709798216819763,
        "codebertscore_s_f1-22": 0.7535467147827148,
        "codebertscore_s_f3-22": 0.7694926857948303,
        "codebertscore_s_f1-153": 0.8189386129379272,
        "codebertscore_s_f3-153": 0.8207205533981323,
        "codebertscore_s_f1-109": 0.731645405292511,
        "codebertscore_s_f3-109": 0.7334685921669006,
        "codebertscore_s_f1-8": 0.7607340216636658,
        "codebertscore_s_f3-8": 0.7590213418006897,
        "codebertscore_s_f1-7": 0.7587634921073914,
        "codebertscore_s_f3-7": 0.7705069780349731,
        "codebertscore_s_f1-23": 0.7837805151939392,
        "codebertscore_s_f3-23": 0.8037289381027222,
        "codebertscore_s_f1-55": 0.8231481313705444,
        "codebertscore_s_f3-55": 0.8603190183639526,
        "codebertscore_s_f1-59": 0.5824083685874939,
        "codebertscore_s_f3-59": 0.5467994809150696,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 2,
        "raw_gpt35_nsnr-59": "2",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0 || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n",
        "snippet": [
            "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n"
        ],
        "simplified": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
        "task_id": "103",
        "164": "return Union_std_string_long((std::string)\"\");",
        "grade-164": {
            "execution": 0
        },
        "29": "if (n>m) return -1;\n    std::string str=\"0b\";\n    long sum=0;\n    long counter=0;\n    for (int i=n;i<=m;i++){\n        sum+=i;\n        counter++;\n    }\n    long avg = sum/counter;\n    avg = round(avg);\n    while (avg!=0){\n        if (avg%2==0){\n            str=\"0\"+str;\n        }else{\n            str=\"1\"+str;\n        }\n        avg=avg/2;\n    }\n    return str;",
        "grade-29": {
            "execution": 0
        },
        "6": "Union_std_string_long r = Union_std_string_long(std::string(\"0b0\"));\n    if (n > m) {\n        r = Union_std_string_long(long(-1));\n    } else {\n        long sum = n;\n        for (long i = n + 1; i <= m; i++) {\n            sum += i;\n        }\n        r = Union_std_string_long(std::string(\"0b\") + std::bitset<16>(sum / (m - n + 1)).to_string());\n    }\n    return r;",
        "grade-6": {
            "execution": 0
        },
        "190": "if (n>m) {\n        return -1;\n    }\n    long sum = 0;\n    int count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n        count += 1;\n    }\n    int rounded_avg = std::round(sum/count);\n    std::string binary = std::bitset<8>(rounded_avg).to_string();\n    binary = \"0b\" + binary;\n    return binary;",
        "grade-190": {
            "execution": 0
        },
        "71": "if (n > m) {\n        return -1;\n    }\n    double avg = (n + m) / 2.0;\n    avg = round(avg);\n    return std::bitset<32>(avg).to_string();",
        "grade-71": {
            "execution": 0
        },
        "63": "return Union_std_string_long(std::to_string(n));",
        "grade-63": {
            "execution": 0
        },
        "58": "long sum = 0;\n    if (n > m) return -1;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg).to_string();\n    return ss.str();",
        "grade-58": {
            "execution": 0
        },
        "36": "if (n > m) { return std::string(\"-1\"); }\n    float r = std::floor(((n + m) / 2.0f) + 0.5f);\n    std::bitset<32> bi(static_cast<long>(r));\n    return std::string(\"0b\" + bi.to_string());",
        "grade-36": {
            "execution": 0
        },
        "189": "if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long rounded = round(sum * 1.0 / (m - n + 1));\n    std::string binary = \"\";\n    while (rounded > 0) {\n        binary += (rounded % 2 == 0 ? \"0\" : \"1\");\n        rounded /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return \"0b\" + binary;",
        "grade-189": {
            "execution": 0
        },
        "27": "if (n > m) {\n        return -1;\n    }\n    // n and m are within bounds.\n    long average = ((n + m) / 2);\n    std::string binary = std::bitset<8>(average).to_string();\n    return binary;",
        "grade-27": {
            "execution": 0
        },
        "174": "if (n > m) {\n        return \"0b-1\";\n    }\n    long avg = (n + m) / 2;\n    std::bitset<sizeof(int) * 8> bset(avg);\n    return std::string(\"0b\") + bset.to_string();",
        "grade-174": {
            "execution": 0
        },
        "140": "if (n>m) {\n        return -1;\n    } else {\n        int count = 0;\n        int sum = 0;\n        while (n<=m) {\n            sum += n;\n            n++;\n            count++;\n        }\n        std::string s = \"0b\";\n        std::bitset<1000> bits (sum/count);\n        s += bits.to_string();\n        std::string temp = \"\";\n        for (int i = s.length()-1; i>1; i--) {\n            temp += s[i];\n        }\n        s = temp;\n        return s;\n    }",
        "grade-140": {
            "execution": 0
        },
        "23": "if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = (long) std::round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<64>(avg).to_string();\n    return \"0b\" + binary.substr(binary.find(\"1\"));",
        "grade-23": {
            "execution": 0
        },
        "152": "if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n    if (0.5 < (float) sum / (m - n + 1) - avg) {\n        avg += 1;\n    }\n    std::string answer = \"0b\";\n    answer += std::bitset<64>(avg).to_string();\n    return answer;",
        "grade-152": {
            "execution": 0
        },
        "109": "assert(n >= 1 && m >= 1);\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    long result = (long) round((double) sum / count);\n    return std::bitset<64>(result).to_string();",
        "grade-109": {
            "execution": 0
        },
        "8": "return \"Replace this string with your implementation.\";",
        "grade-8": {
            "execution": 0
        },
        "7": "return Union_std_string_long(m);",
        "grade-7": {
            "execution": 0
        },
        "24": "if (n > m) return -1;\n    float result = 0;\n    for (long i = n; i <= m; i++) {\n        result += i;\n    }\n    result /= (m - n + 1);\n    std::string binary = std::bitset<32>(std::round(result)).to_string();\n    return binary;",
        "grade-24": {
            "execution": 0
        },
        "56": "if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long result = std::round(sum / (m - n + 1));\n    return std::bitset<20>(result).to_string();",
        "grade-56": {
            "execution": 0
        },
        "60": "long sum = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    std::string bin = std::bitset<32>(sum / (m - n + 1)).to_string();\n    return std::string(\"0b\") + bin.substr(bin.find(\"1\"));",
        "grade-60": {
            "execution": 0
        },
        "bleu-164": 0.0028237858457492554,
        "bleu-29": 0.13045675286624384,
        "bleu-6": 0.08742561107843148,
        "bleu-190": 0.09375750214548224,
        "bleu-71": 0.15215991031005496,
        "bleu-63": 0.002727600048884898,
        "bleu-58": 0.11719991805050047,
        "bleu-36": 0.1398126109999024,
        "bleu-189": 0.13313471666434437,
        "bleu-27": 0.1585527380898966,
        "bleu-174": 0.21532830976088274,
        "bleu-140": 0.0958602188686378,
        "bleu-23": 0.08855735451322086,
        "bleu-152": 0.08142418608349876,
        "bleu-109": 0.08941561235460621,
        "bleu-8": 0.0015628753110876002,
        "bleu-7": 4.180867154578147e-05,
        "bleu-24": 0.13111188161791373,
        "bleu-56": 0.1137514205453163,
        "bleu-60": 0.09727101927206179,
        "codebleu-164": 0.09020836255862062,
        "codebleu-29": 0.6735087201185357,
        "codebleu-6": 0.5905753331975858,
        "codebleu-190": 0.5746163529882521,
        "codebleu-71": 0.4277538560611393,
        "codebleu-63": 0.07401887888878347,
        "codebleu-58": 0.521457037759021,
        "codebleu-36": 0.5072354517765391,
        "codebleu-189": 0.6705213409427168,
        "codebleu-27": 0.4874671337312702,
        "codebleu-174": 0.5138735566949801,
        "codebleu-140": 0.6155571985633159,
        "codebleu-23": 0.5885355522914872,
        "codebleu-152": 0.5838047104730056,
        "codebleu-109": 0.5459284242390564,
        "codebleu-8": 0.032520343729726175,
        "codebleu-7": 0.040664296880911235,
        "codebleu-24": 0.5141425847038561,
        "codebleu-56": 0.5305660505828806,
        "codebleu-60": 0.5795995466397622,
        "chrf-164": 0.15879480231045823,
        "chrf-29": 0.3321365431728662,
        "chrf-6": 0.2567621122292827,
        "chrf-190": 0.29718504027533343,
        "chrf-71": 0.2669227865833303,
        "chrf-63": 0.19284328375463608,
        "chrf-58": 0.32184736275559794,
        "chrf-36": 0.2842349314184595,
        "chrf-189": 0.300627070787274,
        "chrf-27": 0.29252419182620043,
        "chrf-174": 0.32473433185196143,
        "chrf-140": 0.3341664505055665,
        "chrf-23": 0.30198364909904235,
        "chrf-152": 0.29171564862468824,
        "chrf-109": 0.28798577202489134,
        "chrf-8": 0.14273595038368336,
        "chrf-7": 0.12646772881646198,
        "chrf-24": 0.3162945223732034,
        "chrf-56": 0.29244310849558525,
        "chrf-60": 0.3023789568302922,
        "rougel-164": 0.19718309859154928,
        "rougel-29": 0.4293785310734463,
        "rougel-6": 0.32335329341317365,
        "rougel-190": 0.39215686274509803,
        "rougel-71": 0.4716981132075472,
        "rougel-63": 0.17142857142857143,
        "rougel-58": 0.3571428571428572,
        "rougel-36": 0.3768115942028986,
        "rougel-189": 0.4324324324324325,
        "rougel-27": 0.46551724137931033,
        "rougel-174": 0.4576271186440678,
        "rougel-140": 0.3783783783783784,
        "rougel-23": 0.3312883435582822,
        "rougel-152": 0.3764705882352941,
        "rougel-109": 0.3398692810457517,
        "rougel-8": 0.14492753623188406,
        "rougel-7": 0.15625000000000003,
        "rougel-24": 0.3941605839416058,
        "rougel-56": 0.37593984962406013,
        "rougel-60": 0.32894736842105265,
        "meteor-164": 0.10914964809045809,
        "meteor-29": 0.44451456697209285,
        "meteor-6": 0.34013965927099854,
        "meteor-190": 0.3999799455637755,
        "meteor-71": 0.39279228344298245,
        "meteor-63": 0.0996313202247191,
        "meteor-58": 0.29801324503311255,
        "meteor-36": 0.41581628319529024,
        "meteor-189": 0.39863567914575576,
        "meteor-27": 0.3552294100883443,
        "meteor-174": 0.46630218962344905,
        "meteor-140": 0.3831387130868851,
        "meteor-23": 0.3349282296650718,
        "meteor-152": 0.3763313948081862,
        "meteor-109": 0.3869485587913904,
        "meteor-8": 0.04690431519699813,
        "meteor-7": 0.047348484848484855,
        "meteor-24": 0.33211022777960764,
        "meteor-56": 0.3574666612830404,
        "meteor-60": 0.34090909090909094,
        "ruby-164": 0.12068965517241381,
        "ruby-29": 0.2773109243697479,
        "ruby-6": 0.21100917431192656,
        "ruby-190": 0.25263157894736843,
        "ruby-71": 0.2931034482758621,
        "ruby-63": 0.10344827586206895,
        "ruby-58": 0.19512195121951215,
        "ruby-36": 0.26249999999999996,
        "ruby-189": 0.26771653543307083,
        "ruby-27": 0.18965517241379315,
        "ruby-174": 0.31666666666666665,
        "ruby-140": 0.26771653543307083,
        "ruby-23": 0.19999999999999996,
        "ruby-152": 0.2232142857142857,
        "ruby-109": 0.17894736842105263,
        "ruby-8": 0.06896551724137934,
        "ruby-7": 0.08620689655172409,
        "ruby-24": 0.22784810126582278,
        "ruby-56": 0.21333333333333337,
        "ruby-60": 0.21276595744680848,
        "codebertscore_f1-164": 0.6587955951690674,
        "codebertscore_f3-164": 0.624458909034729,
        "codebertscore_f1-29": 0.7815967798233032,
        "codebertscore_f3-29": 0.8098986744880676,
        "codebertscore_f1-6": 0.7252531051635742,
        "codebertscore_f3-6": 0.7484669089317322,
        "codebertscore_f1-190": 0.7585694789886475,
        "codebertscore_f3-190": 0.7795184850692749,
        "codebertscore_f1-71": 0.8171334862709045,
        "codebertscore_f3-71": 0.8264596462249756,
        "codebertscore_f1-63": 0.7067634463310242,
        "codebertscore_f3-63": 0.6786648631095886,
        "codebertscore_f1-58": 0.7721993327140808,
        "codebertscore_f3-58": 0.7816222906112671,
        "codebertscore_f1-36": 0.7922415137290955,
        "codebertscore_f3-36": 0.8226650953292847,
        "codebertscore_f1-189": 0.7746121883392334,
        "codebertscore_f3-189": 0.8057924509048462,
        "codebertscore_f1-27": 0.8113619089126587,
        "codebertscore_f3-27": 0.827857255935669,
        "codebertscore_f1-174": 0.7985002994537354,
        "codebertscore_f3-174": 0.8209964632987976,
        "codebertscore_f1-140": 0.7347686290740967,
        "codebertscore_f3-140": 0.77059406042099,
        "codebertscore_f1-23": 0.7607661485671997,
        "codebertscore_f3-23": 0.7859023213386536,
        "codebertscore_f1-152": 0.7655870914459229,
        "codebertscore_f3-152": 0.786609947681427,
        "codebertscore_f1-109": 0.75721275806427,
        "codebertscore_f3-109": 0.7694371938705444,
        "codebertscore_f1-8": 0.6312640905380249,
        "codebertscore_f3-8": 0.6202638745307922,
        "codebertscore_f1-7": 0.68125319480896,
        "codebertscore_f3-7": 0.6532613039016724,
        "codebertscore_f1-24": 0.7865840196609497,
        "codebertscore_f3-24": 0.7961370944976807,
        "codebertscore_f1-56": 0.7861320972442627,
        "codebertscore_f3-56": 0.7966058850288391,
        "codebertscore_f1-60": 0.7652892470359802,
        "codebertscore_f3-60": 0.7823817729949951,
        "codebertscore_s_f1-164": 0.6121413111686707,
        "codebertscore_s_f3-164": 0.5660986304283142,
        "codebertscore_s_f1-29": 0.7984614968299866,
        "codebertscore_s_f3-29": 0.827056884765625,
        "codebertscore_s_f1-6": 0.729462742805481,
        "codebertscore_s_f3-6": 0.7560626268386841,
        "codebertscore_s_f1-190": 0.7657225131988525,
        "codebertscore_s_f3-190": 0.7891926169395447,
        "codebertscore_s_f1-71": 0.7894507646560669,
        "codebertscore_s_f3-71": 0.801313579082489,
        "codebertscore_s_f1-63": 0.6864322423934937,
        "codebertscore_s_f3-63": 0.655328094959259,
        "codebertscore_s_f1-58": 0.7585649490356445,
        "codebertscore_s_f3-58": 0.7714046835899353,
        "codebertscore_s_f1-36": 0.7606539130210876,
        "codebertscore_s_f3-36": 0.7979642152786255,
        "codebertscore_s_f1-189": 0.7876905798912048,
        "codebertscore_s_f3-189": 0.8225587010383606,
        "codebertscore_s_f1-27": 0.7889183759689331,
        "codebertscore_s_f3-27": 0.8060203790664673,
        "codebertscore_s_f1-174": 0.7729711532592773,
        "codebertscore_s_f3-174": 0.8008894920349121,
        "codebertscore_s_f1-140": 0.7592576146125793,
        "codebertscore_s_f3-140": 0.7841200232505798,
        "codebertscore_s_f1-23": 0.7549647688865662,
        "codebertscore_s_f3-23": 0.7824134826660156,
        "codebertscore_s_f1-152": 0.7786881923675537,
        "codebertscore_s_f3-152": 0.8012509346008301,
        "codebertscore_s_f1-109": 0.7555217742919922,
        "codebertscore_s_f3-109": 0.7699885368347168,
        "codebertscore_s_f1-8": 0.5737274885177612,
        "codebertscore_s_f3-8": 0.5559020042419434,
        "codebertscore_s_f1-7": 0.658123254776001,
        "codebertscore_s_f3-7": 0.6217018961906433,
        "codebertscore_s_f1-24": 0.7673395872116089,
        "codebertscore_s_f3-24": 0.7778898477554321,
        "codebertscore_s_f1-56": 0.7668041586875916,
        "codebertscore_s_f3-56": 0.7794332504272461,
        "codebertscore_s_f1-60": 0.7534680366516113,
        "codebertscore_s_f3-60": 0.7718450427055359,
        "gpt35_nsnr-164": 2,
        "raw_gpt35_nsnr-164": "2",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 2,
        "raw_gpt35_nsnr-63": "2",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-164": 0,
        "raw_gpt35_nswr-164": "0",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 2,
        "raw_gpt35_nswr-190": "2",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 2,
        "raw_gpt35_nswr-63": "2",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers in the list l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// True\n// >>> below_threshold([1, 20, 4, 10], 5)\n// False\nbool below_threshold(std::vector<long> l, long t) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n"
        ],
        "simplified": "Return True if all numbers in the list l are below threshold t.",
        "task_id": "52",
        "29": "// TODO: Write your code here\n\tfor(int i=0;i<l.size();i++)\n\t{\n\t\tif(l[i]>t)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-29": {
            "execution": 0
        },
        "6": "for(int i=0;i<l.size();i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;",
        "grade-6": {
            "execution": 0
        },
        "85": "std::vector<long>::iterator it;\n    for(it = l.begin(); it!=l.end(); it++){\n        if(*it >= t){\n            return false;\n        }\n    }\n    return true;",
        "grade-85": {
            "execution": 1
        },
        "75": "bool ok=true;\n  for(int i=0;i<l.size();i++){\n    if(l[i]>=t){\n      ok=false;\n      break;\n    }\n  }\n  return ok;",
        "grade-75": {
            "execution": 1
        },
        "68": "// NOTE: Loop until l.size(), cannot use l.size()-1, as it might overflow\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;",
        "grade-68": {
            "execution": 1
        },
        "39": "// long n=l.size();\n    // for(long i=0;i<n;i++){\n    //     if(l[i]>=t){\n    //         return false;\n    //     }\n    // }\n    // return true;\n    return std::all_of(l.begin(),l.end(),[&](long i){return i<t;});",
        "grade-39": {
            "execution": 1
        },
        "27": "if (l.size()==0) {\n    return true;\n  }\n  int i = 0;\n  while (i < l.size()) {\n    if (l[i] >= t) {\n      return false;\n    }\n    i++;\n  }\n  return true;",
        "grade-27": {
            "execution": 1
        },
        "185": "long sum = 0;\n  for (int i = 0; i < l.size(); i++) {\n    sum += l[i];\n  }\n  if (sum > t) {\n    return false;\n  }\n  return true;",
        "grade-185": {
            "execution": 0
        },
        "22": "// Your code here!\n    int i;\n    for(i=0;i<l.size();i++)\n    {\n    \tif(l[i]>t)\n    \t{\n    \t\treturn false;\n    \t}\n    }\n    return true;",
        "grade-22": {
            "execution": 0
        },
        "137": "for(int i=0;i<l.size();i++)\n    {\n        if(l[i]>t)\n        {\n            return false;\n        }\n    }\n    return true;",
        "grade-137": {
            "execution": 0
        },
        "8": "long i;\n    bool flag = true;\n    for(i=0;i<l.size();i++)\n    {\n        if(l[i]<t)\n        {\n            flag = true;\n        }\n        else\n        {\n            flag = false;\n            break;\n        }\n    }\n    return flag;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (l.size() == 0) {\n        return false;\n    }\n    long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum < t) {\n        return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (l.size()==0) return true;\n    //assert(l.size() > 0);\n    if(l[0]>=t) return false;\n    else return below_threshold(std::vector<long>(l.begin()+1,l.end()),t);",
        "grade-23": {
            "execution": 1
        },
        "65": "for(long i=0;i<l.size();i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;",
        "grade-65": {
            "execution": 0
        },
        "70": "int i;\n    int lsize = l.size();\n    for(i=0;i<lsize;i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;",
        "grade-70": {
            "execution": 1
        },
        "168": "// put your code here\n  for(int i=0;i<l.size();i++)\n  {\n    if(l[i]>t)\n      return false;\n  }\n  return true;",
        "grade-168": {
            "execution": 0
        },
        "192": "return all_of(l.begin(), l.end(), [t](long n) {return n < t;});",
        "grade-192": {
            "execution": 1
        },
        "57": "return std::all_of(l.begin(), l.end(), [t](long v) {return v < t;});",
        "grade-57": {
            "execution": 1
        },
        "136": "return std::all_of(l.begin(), l.end(), [t](long l_item) {\n        return l_item < t;\n    });",
        "grade-136": {
            "execution": 1
        },
        "66": "int n = l.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tif (l[i] >= t)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-66": {
            "execution": 1
        },
        "bleu-29": 0.6606445733180777,
        "bleu-6": 0.7303292045801433,
        "bleu-85": 0.13636305425610826,
        "bleu-75": 0.6128216022370894,
        "bleu-68": 0.4580676559440617,
        "bleu-39": 0.2650083324155283,
        "bleu-27": 0.4200402809362061,
        "bleu-185": 0.5268716454552016,
        "bleu-22": 0.5515192750603364,
        "bleu-137": 0.7303292045801433,
        "bleu-8": 0.4183819766300239,
        "bleu-7": 0.36658988020287936,
        "bleu-23": 0.21654229277680062,
        "bleu-65": 0.6618160948794205,
        "bleu-70": 0.5428885823027011,
        "bleu-168": 0.6932933034923354,
        "bleu-192": 0.05287262700318019,
        "bleu-57": 0.05316370801518305,
        "bleu-136": 0.05316370801518305,
        "bleu-66": 0.6956196540691666,
        "codebleu-29": 0.7869083187701167,
        "codebleu-6": 0.7986746192055332,
        "codebleu-85": 0.6128762541806019,
        "codebleu-75": 0.7871951020643699,
        "codebleu-68": 0.785521152394776,
        "codebleu-39": 0.7763004715382078,
        "codebleu-27": 0.7841605817957328,
        "codebleu-185": 0.775798552161342,
        "codebleu-22": 0.7582502095832396,
        "codebleu-137": 0.794414844537248,
        "codebleu-8": 0.7176405196972113,
        "codebleu-7": 0.7609206572100892,
        "codebleu-23": 0.6264296372596522,
        "codebleu-65": 0.7861286569047533,
        "codebleu-70": 0.7774726040974024,
        "codebleu-168": 0.7905066842787374,
        "codebleu-192": 0.4793385099979916,
        "codebleu-57": 0.5012759279918788,
        "codebleu-136": 0.5036231884057971,
        "codebleu-66": 0.8082807424986267,
        "chrf-29": 0.7794683876907187,
        "chrf-6": 0.8117347203034359,
        "chrf-85": 0.43578093948103247,
        "chrf-75": 0.682356698536499,
        "chrf-68": 0.7043027682587919,
        "chrf-39": 0.5647511675592041,
        "chrf-27": 0.6335173945070888,
        "chrf-185": 0.7222283894717468,
        "chrf-22": 0.7155209493650213,
        "chrf-137": 0.8117347203034359,
        "chrf-8": 0.5493929557339228,
        "chrf-7": 0.6005444968868434,
        "chrf-23": 0.4680073996902764,
        "chrf-65": 0.7206699469897647,
        "chrf-70": 0.6988869676413094,
        "chrf-168": 0.7970478346106543,
        "chrf-192": 0.21572949345799683,
        "chrf-57": 0.21759717123846,
        "chrf-136": 0.21850734485323076,
        "chrf-66": 0.8090553566929058,
        "rougel-29": 0.85,
        "rougel-6": 0.918918918918919,
        "rougel-85": 0.5393258426966292,
        "rougel-75": 0.7951807228915662,
        "rougel-68": 0.693069306930693,
        "rougel-39": 0.46875000000000006,
        "rougel-27": 0.6593406593406592,
        "rougel-185": 0.761904761904762,
        "rougel-22": 0.8048780487804877,
        "rougel-137": 0.918918918918919,
        "rougel-8": 0.6593406593406592,
        "rougel-7": 0.56,
        "rougel-23": 0.4528301886792453,
        "rougel-65": 0.8918918918918918,
        "rougel-70": 0.7073170731707318,
        "rougel-168": 0.8717948717948718,
        "rougel-192": 0.3582089552238806,
        "rougel-57": 0.34285714285714286,
        "rougel-136": 0.34285714285714286,
        "rougel-66": 0.7692307692307692,
        "meteor-29": 0.9472826086956522,
        "meteor-6": 0.9610779118277144,
        "meteor-85": 0.6547794478828962,
        "meteor-75": 0.898333241652456,
        "meteor-68": 0.9242101463074043,
        "meteor-39": 0.5490482731554162,
        "meteor-27": 0.8939313984168864,
        "meteor-185": 0.9252621797424665,
        "meteor-22": 0.9349145063430778,
        "meteor-137": 0.9610779118277144,
        "meteor-8": 0.7876195391186994,
        "meteor-7": 0.757589269789177,
        "meteor-23": 0.4708257633829681,
        "meteor-65": 0.9305162591523447,
        "meteor-70": 0.9549549549549551,
        "meteor-168": 0.9524590163934427,
        "meteor-192": 0.2934707007476961,
        "meteor-57": 0.2910114490654528,
        "meteor-136": 0.2910114490654528,
        "meteor-66": 0.9730655063077651,
        "ruby-29": 0.7272727272727273,
        "ruby-6": 0.8421052631578947,
        "ruby-85": 0.37735849056603776,
        "ruby-75": 0.6808510638297872,
        "ruby-68": 0.523076923076923,
        "ruby-39": 0.28260869565217395,
        "ruby-27": 0.4545454545454546,
        "ruby-185": 0.625,
        "ruby-22": 0.6521739130434783,
        "ruby-137": 0.8421052631578947,
        "ruby-8": 0.49090909090909096,
        "ruby-7": 0.421875,
        "ruby-23": 0.30000000000000004,
        "ruby-65": 0.8157894736842105,
        "ruby-70": 0.5217391304347826,
        "ruby-168": 0.7619047619047619,
        "ruby-192": 0.19444444444444442,
        "ruby-57": 0.19444444444444442,
        "ruby-136": 0.19444444444444442,
        "ruby-66": 0.5952380952380952,
        "codebertscore_f1-29": 0.8990849852561951,
        "codebertscore_f3-29": 0.9517068266868591,
        "codebertscore_f1-6": 0.9741062521934509,
        "codebertscore_f3-6": 0.9741063714027405,
        "codebertscore_f1-85": 0.825031042098999,
        "codebertscore_f3-85": 0.8386949896812439,
        "codebertscore_f1-75": 0.8998637199401855,
        "codebertscore_f3-75": 0.9224318861961365,
        "codebertscore_f1-68": 0.8720173835754395,
        "codebertscore_f3-68": 0.9278552532196045,
        "codebertscore_f1-39": 0.8596867322921753,
        "codebertscore_f3-39": 0.9145992994308472,
        "codebertscore_f1-27": 0.913384199142456,
        "codebertscore_f3-27": 0.9211046695709229,
        "codebertscore_f1-185": 0.9150992631912231,
        "codebertscore_f3-185": 0.9392616152763367,
        "codebertscore_f1-22": 0.9091962575912476,
        "codebertscore_f3-22": 0.939556360244751,
        "codebertscore_f1-137": 0.9783096313476562,
        "codebertscore_f3-137": 0.9783096313476562,
        "codebertscore_f1-8": 0.8367218971252441,
        "codebertscore_f3-8": 0.8633037805557251,
        "codebertscore_f1-7": 0.8771038055419922,
        "codebertscore_f3-7": 0.8981747031211853,
        "codebertscore_f1-23": 0.7915639877319336,
        "codebertscore_f3-23": 0.8012946248054504,
        "codebertscore_f1-65": 0.9617466926574707,
        "codebertscore_f3-65": 0.9617468118667603,
        "codebertscore_f1-70": 0.9201681613922119,
        "codebertscore_f3-70": 0.9341704845428467,
        "codebertscore_f1-168": 0.9166568517684937,
        "codebertscore_f3-168": 0.9570892453193665,
        "codebertscore_f1-192": 0.7685990929603577,
        "codebertscore_f3-192": 0.7569932341575623,
        "codebertscore_f1-57": 0.759285569190979,
        "codebertscore_f3-57": 0.7526342272758484,
        "codebertscore_f1-136": 0.755269467830658,
        "codebertscore_f3-136": 0.7481865882873535,
        "codebertscore_f1-66": 0.945673406124115,
        "codebertscore_f3-66": 0.9570110440254211,
        "codebertscore_s_f1-29": 0.9054749608039856,
        "codebertscore_s_f3-29": 0.9586285352706909,
        "codebertscore_s_f1-6": 0.9725556373596191,
        "codebertscore_s_f3-6": 0.9725556373596191,
        "codebertscore_s_f1-85": 0.8218594193458557,
        "codebertscore_s_f3-85": 0.8364996910095215,
        "codebertscore_s_f1-75": 0.9077959060668945,
        "codebertscore_s_f3-75": 0.9308302998542786,
        "codebertscore_s_f1-68": 0.8725904226303101,
        "codebertscore_s_f3-68": 0.9309926629066467,
        "codebertscore_s_f1-39": 0.8586192727088928,
        "codebertscore_s_f3-39": 0.9189637303352356,
        "codebertscore_s_f1-27": 0.922809898853302,
        "codebertscore_s_f3-27": 0.9290398359298706,
        "codebertscore_s_f1-185": 0.9221872687339783,
        "codebertscore_s_f3-185": 0.94823157787323,
        "codebertscore_s_f1-22": 0.9097789525985718,
        "codebertscore_s_f3-22": 0.941118061542511,
        "codebertscore_s_f1-137": 0.972119152545929,
        "codebertscore_s_f3-137": 0.972119152545929,
        "codebertscore_s_f1-8": 0.8521368503570557,
        "codebertscore_s_f3-8": 0.8798765540122986,
        "codebertscore_s_f1-7": 0.872234046459198,
        "codebertscore_s_f3-7": 0.8927943706512451,
        "codebertscore_s_f1-23": 0.7931253910064697,
        "codebertscore_s_f3-23": 0.8047468662261963,
        "codebertscore_s_f1-65": 0.9602651596069336,
        "codebertscore_s_f3-65": 0.9602652192115784,
        "codebertscore_s_f1-70": 0.9242875576019287,
        "codebertscore_s_f3-70": 0.9373169541358948,
        "codebertscore_s_f1-168": 0.9217761158943176,
        "codebertscore_s_f3-168": 0.9628310799598694,
        "codebertscore_s_f1-192": 0.7603612542152405,
        "codebertscore_s_f3-192": 0.7451754808425903,
        "codebertscore_s_f1-57": 0.7575543522834778,
        "codebertscore_s_f3-57": 0.7465375661849976,
        "codebertscore_s_f1-136": 0.7565856575965881,
        "codebertscore_s_f3-136": 0.7434728741645813,
        "codebertscore_s_f1-66": 0.9540787935256958,
        "codebertscore_s_f3-66": 0.963462233543396,
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-85": 4,
        "raw_gpt35_nsnr-85": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-185": 3,
        "raw_gpt35_nsnr-185": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-85": 4,
        "raw_gpt35_nswr-85": "4",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-185": 2,
        "raw_gpt35_nswr-185": "2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-137": 4,
        "raw_gpt35_nswr-137": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns True if the string\n// length is a prime number or False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\nbool prime_length(std::string string) {\n",
        "snippet": [
            "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n"
        ],
        "simplified": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
        "task_id": "82",
        "169": "int len = string.length();\n  if (len < 2) {\n    return false;\n  }\n  if (len == 2) {\n    return true;\n  }\n  if (len % 2 == 0) {\n    return false;\n  }\n  int i;\n  for (i = 3; i <= sqrt(len); i += 2) {\n    if (len % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-169": {
            "execution": 1
        },
        "28": "int s = string.length();\n    int count = 0;\n    for (int i = 2; i < s; i++) {\n        if (s % i == 0) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-28": {
            "execution": 0
        },
        "6": "// Define the function\n    int count = 0;\n    int length = string.length();\n    for (int i = 1; i <= length; i++) {\n        if (length % i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    else {\n        return false;\n    }",
        "grade-6": {
            "execution": 1
        },
        "72": "int length = string.length();\n\tbool isPrime = true;\n\tfor (int i = 2; i < length / 2; i++) {\n\t\tif (length % i == 0) {\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isPrime;",
        "grade-72": {
            "execution": 0
        },
        "64": "// your code here!\n  int n = string.length();\n  if(n==0 || n==1){\n    return false;\n  }\n  else if(n==2){\n    return true;\n  }\n  else if(n%2==0){\n    return false;\n  }\n  else{\n    for(int i=3;i<n;i+=2){\n      if(n%i==0){\n        return false;\n      }\n    }\n    return true;\n  }",
        "grade-64": {
            "execution": 1
        },
        "58": "int string_length = string.length();\n    if (string_length == 2 || string_length == 3) {\n        return true;\n    } else if (string_length == 1 || string_length % 2 == 0) {\n        return false;\n    } else {\n        int counter = 3;\n        while (counter < sqrt(string_length)) {\n            if (string_length % counter == 0) {\n                return false;\n            }\n            counter += 2;\n        }\n        return true;\n    }",
        "grade-58": {
            "execution": 1
        },
        "36": "int length = string.length();\n    int i = 2;\n    while (i < length) {\n        if (length % i == 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;",
        "grade-36": {
            "execution": 0
        },
        "26": "return false;",
        "grade-26": {
            "execution": 0
        },
        "180": "int a=string.length();\n    int c=0;\n    for(int i=1;i<=a;i++)\n    {\n        if(a%i==0)\n        {\n            c++;\n        }\n    }\n    if(c==2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-180": {
            "execution": 1
        },
        "143": "int n = string.length();\n    bool prime = true;\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            prime = false;\n            break;\n        }\n    }\n    return prime;",
        "grade-143": {
            "execution": 0
        },
        "22": "int length = string.length();\n    int flag = 0;\n    for (int i = 1; i <= length; i++) {\n        if (length % i == 0) {\n            flag++;\n        }\n    }\n    if (flag == 2) {\n        return true;\n    }\n    else {\n        return false;\n    }",
        "grade-22": {
            "execution": 1
        },
        "155": "// Initialize return value\n  bool rvalue = true;\n  // Check if the string length is 1 or 2\n  if (string.length() < 3) {\n    // Set return value to false\n    rvalue = false;\n  }\n  // Create a local variable\n  int lvalue = 2;\n  // Iterate through numbers, starting at 2\n  while (lvalue < string.length()) {\n    // Check if the string length is divisible by lvalue\n    if (string.length() % lvalue == 0) {\n      // Set return value to false\n      rvalue = false;\n    }\n    // Increment lvalue\n    lvalue++;\n  }\n  // Return return value\n  return rvalue;",
        "grade-155": {
            "execution": 0
        },
        "110": "return is_prime(string.length());",
        "grade-110": {
            "execution": 0
        },
        "8": "return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<int> v = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n  for (int num : v) {\n    if (string.length() == num) {\n      return true;\n    }\n  }\n  return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string::size_type s = string.size();\n\tif (s == 1)\n\t\treturn true;\n\tif (s % 2 == 0)\n\t\treturn false;\n\tfor (std::string::size_type i = 3; i * i <= s; i += 2) {\n\t\tif (s % i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-23": {
            "execution": 0
        },
        "56": "// C++11 for loop. Iterates over elements of a container\n  for (char c : string) {\n    // Do something with c\n  }\n  // C++11 range-based for loop\n  for (int i : {0, 1, 2, 3, 4, 5}) {\n    // Do something with i\n  }\n  // C++11 range-based for loop on a vector\n  std::vector<int> v {1, 2, 3, 4, 5};\n  for (int i : v) {\n    // Do something with i\n  }\n  return true;",
        "grade-56": {
            "execution": 0
        },
        "61": "int length = string.length();\n    if (length == 1 || length == 2)\n        return true;\n    for (int i = 2; i < length; i++) {\n        if (length % i == 0)\n            return false;\n    }\n    return true;",
        "grade-61": {
            "execution": 0
        },
        "131": "return true;",
        "grade-131": {
            "execution": 0
        },
        "158": "int len = string.length();\n    if (len == 1) {\n        return true;\n    }\n    for (int i = 2; i <= len / 2; i++) {\n        if (len % i == 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-158": {
            "execution": 0
        },
        "bleu-169": 0.26751617387820614,
        "bleu-28": 0.3333025402108897,
        "bleu-6": 0.28128597068065453,
        "bleu-72": 0.3378984965163964,
        "bleu-64": 0.1947764747093124,
        "bleu-58": 0.1725817338508663,
        "bleu-36": 0.27779195551987035,
        "bleu-26": 2.9663949993350038e-08,
        "bleu-180": 0.30344109097311406,
        "bleu-143": 0.3416954461961652,
        "bleu-22": 0.30344109097311406,
        "bleu-155": 0.06903102564821217,
        "bleu-110": 0.0037291700774492237,
        "bleu-8": 2.9663949993350038e-08,
        "bleu-7": 0.020738959561819748,
        "bleu-23": 0.31896317252649725,
        "bleu-56": 0.028218146517477706,
        "bleu-61": 0.44826491192621293,
        "bleu-131": 2.9663949993350038e-08,
        "bleu-158": 0.4028303194555069,
        "codebleu-169": 0.6928558047908359,
        "codebleu-28": 0.6778910970530411,
        "codebleu-6": 0.6763154233323608,
        "codebleu-72": 0.631950305647033,
        "codebleu-64": 0.6661332062105485,
        "codebleu-58": 0.6471534117323134,
        "codebleu-36": 0.558374331642343,
        "codebleu-26": 0.02777782063904963,
        "codebleu-180": 0.6673854712759413,
        "codebleu-143": 0.6215865638728674,
        "codebleu-22": 0.6780492206733286,
        "codebleu-155": 0.6224748415271895,
        "codebleu-110": 0.1217492964354392,
        "codebleu-8": 0.02777782063904963,
        "codebleu-7": 0.41795530732384767,
        "codebleu-23": 0.6738590749094202,
        "codebleu-56": 0.43999062353492724,
        "codebleu-61": 0.7010015456497017,
        "codebleu-131": 0.02777782063904963,
        "codebleu-158": 0.6786138814043514,
        "chrf-169": 0.5426663312845293,
        "chrf-28": 0.4831026592645082,
        "chrf-6": 0.4598150836201509,
        "chrf-72": 0.3991974708002238,
        "chrf-64": 0.4864226593678895,
        "chrf-58": 0.39301632617330823,
        "chrf-36": 0.4410073460613632,
        "chrf-26": 0.12612699336716657,
        "chrf-180": 0.48719215736322075,
        "chrf-143": 0.3975583500581298,
        "chrf-22": 0.4886718677628557,
        "chrf-155": 0.2581041187628293,
        "chrf-110": 0.16248045777942374,
        "chrf-8": 0.11310710376862282,
        "chrf-7": 0.1599818034847551,
        "chrf-23": 0.5091523970262467,
        "chrf-56": 0.1926434200164509,
        "chrf-61": 0.5803545007715701,
        "chrf-131": 0.11310710376862282,
        "chrf-158": 0.5517933428349844,
        "rougel-169": 0.5774647887323943,
        "rougel-28": 0.5714285714285714,
        "rougel-6": 0.5439999999999999,
        "rougel-72": 0.5945945945945946,
        "rougel-64": 0.5194805194805194,
        "rougel-58": 0.4722222222222222,
        "rougel-36": 0.5714285714285714,
        "rougel-26": 0.10344827586206896,
        "rougel-180": 0.5666666666666668,
        "rougel-143": 0.6226415094339622,
        "rougel-22": 0.5666666666666668,
        "rougel-155": 0.29347826086956524,
        "rougel-110": 0.1846153846153846,
        "rougel-8": 0.10344827586206896,
        "rougel-7": 0.07441860465116279,
        "rougel-23": 0.5970149253731343,
        "rougel-56": 0.18285714285714288,
        "rougel-61": 0.7142857142857142,
        "rougel-131": 0.10344827586206896,
        "rougel-158": 0.7079646017699116,
        "meteor-169": 0.6586483390607102,
        "meteor-28": 0.5897865122025714,
        "meteor-6": 0.5461842554130797,
        "meteor-72": 0.5363893902298013,
        "meteor-64": 0.6643222862231127,
        "meteor-58": 0.5158263759422874,
        "meteor-36": 0.5208319934140286,
        "meteor-26": 0.03012048192771084,
        "meteor-180": 0.5681031341107872,
        "meteor-143": 0.5459922351814244,
        "meteor-22": 0.5329861111111112,
        "meteor-155": 0.39549299104623314,
        "meteor-110": 0.10535272277227721,
        "meteor-8": 0.05912539045069165,
        "meteor-7": 0.17547586206896554,
        "meteor-23": 0.7248817562703372,
        "meteor-56": 0.28485395965070764,
        "meteor-61": 0.7504154223591288,
        "meteor-131": 0.05912539045069165,
        "meteor-158": 0.7384569343479737,
        "ruby-169": 0.4137931034482759,
        "ruby-28": 0.359375,
        "ruby-6": 0.34285714285714286,
        "ruby-72": 0.4107142857142857,
        "ruby-64": 0.3737373737373737,
        "ruby-58": 0.3370786516853933,
        "ruby-36": 0.36363636363636365,
        "ruby-26": 0.054545454545454564,
        "ruby-180": 0.36923076923076925,
        "ruby-143": 0.4545454545454546,
        "ruby-22": 0.36923076923076925,
        "ruby-155": 0.1937984496124031,
        "ruby-110": 0.10909090909090913,
        "ruby-8": 0.054545454545454564,
        "ruby-7": 0.03200000000000003,
        "ruby-23": 0.49367088607594933,
        "ruby-56": 0.10833333333333328,
        "ruby-61": 0.5614035087719298,
        "ruby-131": 0.054545454545454564,
        "ruby-158": 0.5689655172413793,
        "codebertscore_f1-169": 0.881519079208374,
        "codebertscore_f3-169": 0.8830114603042603,
        "codebertscore_f1-28": 0.8550422191619873,
        "codebertscore_f3-28": 0.8666955232620239,
        "codebertscore_f1-6": 0.8234935402870178,
        "codebertscore_f3-6": 0.8512664437294006,
        "codebertscore_f1-72": 0.8442583680152893,
        "codebertscore_f3-72": 0.8622717261314392,
        "codebertscore_f1-64": 0.828103244304657,
        "codebertscore_f3-64": 0.8493461608886719,
        "codebertscore_f1-58": 0.7807608246803284,
        "codebertscore_f3-58": 0.7915205359458923,
        "codebertscore_f1-36": 0.8872753381729126,
        "codebertscore_f3-36": 0.8813480138778687,
        "codebertscore_f1-26": 0.5740711688995361,
        "codebertscore_f3-26": 0.5209475159645081,
        "codebertscore_f1-180": 0.8435285091400146,
        "codebertscore_f3-180": 0.8527796864509583,
        "codebertscore_f1-143": 0.8523457646369934,
        "codebertscore_f3-143": 0.8587928414344788,
        "codebertscore_f1-22": 0.8522647023200989,
        "codebertscore_f3-22": 0.8635258674621582,
        "codebertscore_f1-155": 0.714884877204895,
        "codebertscore_f3-155": 0.7538852691650391,
        "codebertscore_f1-110": 0.7020825147628784,
        "codebertscore_f3-110": 0.6522020101547241,
        "codebertscore_f1-8": 0.6196047067642212,
        "codebertscore_f3-8": 0.5488012433052063,
        "codebertscore_f1-7": 0.5515177249908447,
        "codebertscore_f3-7": 0.6430220603942871,
        "codebertscore_f1-23": 0.8643910884857178,
        "codebertscore_f3-23": 0.8809676766395569,
        "codebertscore_f1-56": 0.6980592608451843,
        "codebertscore_f3-56": 0.7363967299461365,
        "codebertscore_f1-61": 0.8914986252784729,
        "codebertscore_f3-61": 0.8937249183654785,
        "codebertscore_f1-131": 0.6196047067642212,
        "codebertscore_f3-131": 0.5488012433052063,
        "codebertscore_f1-158": 0.8966556787490845,
        "codebertscore_f3-158": 0.9001098871231079,
        "codebertscore_s_f1-169": 0.8831253051757812,
        "codebertscore_s_f3-169": 0.8856678605079651,
        "codebertscore_s_f1-28": 0.8625874519348145,
        "codebertscore_s_f3-28": 0.8719966411590576,
        "codebertscore_s_f1-6": 0.8376733660697937,
        "codebertscore_s_f3-6": 0.8642159104347229,
        "codebertscore_s_f1-72": 0.8523216843605042,
        "codebertscore_s_f3-72": 0.8715584874153137,
        "codebertscore_s_f1-64": 0.8344303965568542,
        "codebertscore_s_f3-64": 0.8558995723724365,
        "codebertscore_s_f1-58": 0.7881613969802856,
        "codebertscore_s_f3-58": 0.8032572269439697,
        "codebertscore_s_f1-36": 0.8961139917373657,
        "codebertscore_s_f3-36": 0.8887518048286438,
        "codebertscore_s_f1-26": 0.7027422189712524,
        "codebertscore_s_f3-26": 0.6233130097389221,
        "codebertscore_s_f1-180": 0.8545343279838562,
        "codebertscore_s_f3-180": 0.8613656759262085,
        "codebertscore_s_f1-143": 0.8621849417686462,
        "codebertscore_s_f3-143": 0.8673557043075562,
        "codebertscore_s_f1-22": 0.8607629537582397,
        "codebertscore_s_f3-22": 0.8688818216323853,
        "codebertscore_s_f1-155": 0.7222941517829895,
        "codebertscore_s_f3-155": 0.7661071419715881,
        "codebertscore_s_f1-110": 0.6922306418418884,
        "codebertscore_s_f3-110": 0.6435757875442505,
        "codebertscore_s_f1-8": 0.7113004922866821,
        "codebertscore_s_f3-8": 0.616840124130249,
        "codebertscore_s_f1-7": 0.5619408488273621,
        "codebertscore_s_f3-7": 0.6483511924743652,
        "codebertscore_s_f1-23": 0.8587742447853088,
        "codebertscore_s_f3-23": 0.8755995631217957,
        "codebertscore_s_f1-56": 0.7086179256439209,
        "codebertscore_s_f3-56": 0.7509276270866394,
        "codebertscore_s_f1-61": 0.9008375406265259,
        "codebertscore_s_f3-61": 0.9017408490180969,
        "codebertscore_s_f1-131": 0.7113004922866821,
        "codebertscore_s_f3-131": 0.616840124130249,
        "codebertscore_s_f1-158": 0.9031327366828918,
        "codebertscore_s_f3-158": 0.9047435522079468,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-26": 1,
        "raw_gpt35_nsnr-26": "1",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-143": 3,
        "raw_gpt35_nsnr-143": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-155": 3,
        "raw_gpt35_nsnr-155": "3",
        "gpt35_nsnr-110": 0,
        "raw_gpt35_nsnr-110": "0",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 2,
        "raw_gpt35_nsnr-56": "2",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-131": 0,
        "raw_gpt35_nsnr-131": "0",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-143": 2,
        "raw_gpt35_nswr-143": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-155": 2,
        "raw_gpt35_nswr-155": "2",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 0,
        "raw_gpt35_nswr-56": "0",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-131": 2,
        "raw_gpt35_nswr-131": "2",
        "gpt35_nswr-158": 2,
        "raw_gpt35_nswr-158": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n",
        "snippet": [
            "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n"
        ],
        "simplified": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "task_id": "0",
        "32": "float diff = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i+1; j < numbers.size(); j++) {\n            diff = numbers[i] - numbers[j];\n            if (diff < 0)\n                diff = -diff;\n            if (diff < threshold)\n                return true;\n        }\n    }\n    return false;",
        "grade-32": {
            "execution": 1
        },
        "6": "sort(numbers.begin(), numbers.end());\n  int n = numbers.size();\n  for (int i = 0; i < n-1; i++) {\n    if (abs(numbers[i] - numbers[i+1]) < threshold) {\n      return true;\n    }\n  }\n  return false;",
        "grade-6": {
            "execution": 0
        },
        "82": "int n = numbers.size();\n    assert(n > 0);\n    std::sort(numbers.begin(), numbers.end());\n    int i = 0;\n    int j = 1;\n    while (j < n) {\n        if (numbers[j] - numbers[i] <= threshold) {\n            return true;\n        }\n        ++i;\n        ++j;\n    }\n    return false;",
        "grade-82": {
            "execution": 1
        },
        "72": "for (int i = 0; i < numbers.size(); i++) {\n\t\tfor (int j = i + 1; j < numbers.size(); j++) {\n\t\t\tif (fabs(numbers[i] - numbers[j]) < threshold)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-72": {
            "execution": 1
        },
        "66": "assert(threshold > 0);\n    assert(numbers.size() > 0);\n    std::sort(numbers.begin(), numbers.end());\n    float diff;\n    for (auto i = 0; i < numbers.size() - 1; i++) {\n        diff = numbers[i + 1] - numbers[i];\n        if (diff < threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-66": {
            "execution": 1
        },
        "40": "assert(numbers.size() >= 2);\n    assert(threshold > 0);\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i+1] - numbers[i] < threshold)\n            return true;\n    }\n    return false;",
        "grade-40": {
            "execution": 1
        },
        "29": "for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i+1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-29": {
            "execution": 0
        },
        "177": "for (size_t i = 0; i < numbers.size(); i++) {\n    for (size_t j = i + 1; j < numbers.size(); j++) {\n      if (fabs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;",
        "grade-177": {
            "execution": 1
        },
        "24": "if (numbers.size() < 2) {\n        return false;\n    }\n    // sorts the numbers in increasing order\n    sort(numbers.begin(), numbers.end());\n    int i = 0;\n    while (i < numbers.size() - 1) {\n        if (abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
        "grade-24": {
            "execution": 0
        },
        "191": "float diff;\n  for (int i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size(); j++) {\n      diff = numbers[i] - numbers[j];\n      diff = diff < 0 ? -diff : diff;\n      if (diff < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;",
        "grade-191": {
            "execution": 1
        },
        "131": "assert(numbers.size() > 1);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-131": {
            "execution": 1
        },
        "8": "std::sort(numbers.begin(), numbers.end());\n    float distance = INT_MAX;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i + 1] - numbers[i] < distance) {\n            distance = numbers[i + 1] - numbers[i];\n        }\n    }\n    return distance < threshold;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i+1] - numbers[i] < threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "25": "int length = numbers.size();\n    for (int i = 0; i < length; i++) {\n        for (int j = i + 1; j < length; j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-25": {
            "execution": 1
        },
        "64": "if (numbers.size() < 2) {\n        return false;\n    }\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-64": {
            "execution": 0
        },
        "68": "float diff = std::numeric_limits<float>::max();\n  for (int i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size(); j++) {\n      if (fabs(numbers[i] - numbers[j]) < diff) {\n        diff = fabs(numbers[i] - numbers[j]);\n      }\n    }\n  }\n  if (diff > threshold) {\n    return false;\n  }\n  return true;",
        "grade-68": {
            "execution": 1
        },
        "160": "for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-160": {
            "execution": 1
        },
        "196": "// FIXME\n  return false;",
        "grade-196": {
            "execution": 0
        },
        "181": "assert(numbers.size()>=2);\n\n    int n = numbers.size();\n    std::sort(numbers.begin(), numbers.end());\n    float diff = 0;\n    for(int i=0; i<n-1; i++) {\n        if(numbers[i+1]-numbers[i] <= threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-181": {
            "execution": 1
        },
        "58": "float max_difference = 0.0;\n\tfloat difference = 0.0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tfor (int j = i+1; j < numbers.size(); j++) {\n\t\t\tdifference = numbers[i] - numbers[j];\n\t\t\tif (difference < 0) {\n\t\t\t\tdifference = -difference;\n\t\t\t}\n\t\t\tif (difference > max_difference) {\n\t\t\t\tmax_difference = difference;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_difference < threshold;",
        "grade-58": {
            "execution": 0
        },
        "bleu-32": 0.5682022652965913,
        "bleu-6": 0.47525790664045886,
        "bleu-82": 0.26252236745415125,
        "bleu-72": 0.7735926914000838,
        "bleu-66": 0.33134611228547245,
        "bleu-40": 0.40622290658727367,
        "bleu-29": 0.7611578763899057,
        "bleu-177": 0.7190954844396314,
        "bleu-24": 0.3694333226992464,
        "bleu-191": 0.5558849622174938,
        "bleu-131": 0.5886512373575147,
        "bleu-8": 0.3160708363231108,
        "bleu-7": 0.4187636184666415,
        "bleu-25": 0.5726979820308147,
        "bleu-64": 0.45031134834169756,
        "bleu-68": 0.4621789621535218,
        "bleu-160": 0.7028780719691194,
        "bleu-196": 1.1611209359331835e-05,
        "bleu-181": 0.3286632384093251,
        "bleu-58": 0.4435776485574204,
        "codebleu-32": 0.7891315783189919,
        "codebleu-6": 0.6964068747519515,
        "codebleu-82": 0.6889126690834565,
        "codebleu-72": 0.8240870256057798,
        "codebleu-66": 0.6902954514086594,
        "codebleu-40": 0.6767293058594203,
        "codebleu-29": 0.8269652616475445,
        "codebleu-177": 0.8170289110440889,
        "codebleu-24": 0.6797688949066613,
        "codebleu-191": 0.7621068719387393,
        "codebleu-131": 0.8115468520806394,
        "codebleu-8": 0.693748417748223,
        "codebleu-7": 0.6555086227591097,
        "codebleu-25": 0.7543688132219176,
        "codebleu-64": 0.7008546261567414,
        "codebleu-68": 0.7942700711219368,
        "codebleu-160": 0.8171718414700642,
        "codebleu-196": 0.029006820064354195,
        "codebleu-181": 0.6759867003232757,
        "codebleu-58": 0.7538266083048264,
        "chrf-32": 0.7523282763136424,
        "chrf-6": 0.6520133290903556,
        "chrf-82": 0.5495249384631781,
        "chrf-72": 0.8444411110986849,
        "chrf-66": 0.5762179983939719,
        "chrf-40": 0.6221914211923752,
        "chrf-29": 0.8392035721279711,
        "chrf-177": 0.8021196455601083,
        "chrf-24": 0.6010562656855716,
        "chrf-191": 0.7315170074461144,
        "chrf-131": 0.7748349010659338,
        "chrf-8": 0.468416114077762,
        "chrf-7": 0.5986371754385689,
        "chrf-25": 0.6630023846569756,
        "chrf-64": 0.6680254261515259,
        "chrf-68": 0.7144285118728536,
        "chrf-160": 0.7972466551848574,
        "chrf-196": 0.08932366929415704,
        "chrf-181": 0.5913979826858411,
        "chrf-58": 0.559584319941939,
        "rougel-32": 0.7581699346405228,
        "rougel-6": 0.583941605839416,
        "rougel-82": 0.48,
        "rougel-72": 0.8955223880597015,
        "rougel-66": 0.5222929936305732,
        "rougel-40": 0.563758389261745,
        "rougel-29": 0.8970588235294118,
        "rougel-177": 0.8823529411764706,
        "rougel-24": 0.5161290322580645,
        "rougel-191": 0.7549668874172186,
        "rougel-131": 0.8157894736842104,
        "rougel-8": 0.49333333333333335,
        "rougel-7": 0.5909090909090909,
        "rougel-25": 0.757142857142857,
        "rougel-64": 0.5866666666666667,
        "rougel-68": 0.6742857142857143,
        "rougel-160": 0.8776978417266188,
        "rougel-196": 0.0821917808219178,
        "rougel-181": 0.4903225806451613,
        "rougel-58": 0.6347305389221557,
        "meteor-32": 0.854455849963487,
        "meteor-6": 0.7215635139642781,
        "meteor-82": 0.6646988039378792,
        "meteor-72": 0.9239578641651265,
        "meteor-66": 0.6716053575109697,
        "meteor-40": 0.6883330749719735,
        "meteor-29": 0.9361333819241981,
        "meteor-177": 0.9062803937753547,
        "meteor-24": 0.7416810338462448,
        "meteor-191": 0.771894597209199,
        "meteor-131": 0.9417951011421494,
        "meteor-8": 0.5438777509828153,
        "meteor-7": 0.6584401506705351,
        "meteor-25": 0.8603891964663625,
        "meteor-64": 0.7502846805520784,
        "meteor-68": 0.7413959836549905,
        "meteor-160": 0.9171137318379775,
        "meteor-196": 0.04834884145228972,
        "meteor-181": 0.6598891164998336,
        "meteor-58": 0.7687786470681206,
        "ruby-32": 0.6511627906976745,
        "ruby-6": 0.44285714285714284,
        "ruby-82": 0.32530120481927716,
        "ruby-72": 0.8059701492537313,
        "ruby-66": 0.4111111111111111,
        "ruby-40": 0.4512195121951219,
        "ruby-29": 0.7971014492753623,
        "ruby-177": 0.782608695652174,
        "ruby-24": 0.375,
        "ruby-191": 0.6309523809523809,
        "ruby-131": 0.7176470588235294,
        "ruby-8": 0.3373493975903614,
        "ruby-7": 0.4477611940298507,
        "ruby-25": 0.6027397260273972,
        "ruby-64": 0.4819277108433735,
        "ruby-68": 0.5462962962962963,
        "ruby-160": 0.7638888888888888,
        "ruby-196": 0.04477611940298509,
        "ruby-181": 0.3522727272727273,
        "ruby-58": 0.52,
        "codebertscore_f1-32": 0.8790319561958313,
        "codebertscore_f3-32": 0.8921442031860352,
        "codebertscore_f1-6": 0.9027082324028015,
        "codebertscore_f3-6": 0.9156430959701538,
        "codebertscore_f1-82": 0.8417157530784607,
        "codebertscore_f3-82": 0.8544907569885254,
        "codebertscore_f1-72": 0.9364134073257446,
        "codebertscore_f3-72": 0.9406991600990295,
        "codebertscore_f1-66": 0.8554931879043579,
        "codebertscore_f3-66": 0.8783599734306335,
        "codebertscore_f1-40": 0.8771634697914124,
        "codebertscore_f3-40": 0.8948960304260254,
        "codebertscore_f1-29": 0.9404605627059937,
        "codebertscore_f3-29": 0.9419937133789062,
        "codebertscore_f1-177": 0.9266331791877747,
        "codebertscore_f3-177": 0.9365202188491821,
        "codebertscore_f1-24": 0.8352394104003906,
        "codebertscore_f3-24": 0.8553543090820312,
        "codebertscore_f1-191": 0.8902130126953125,
        "codebertscore_f3-191": 0.9015035033226013,
        "codebertscore_f1-131": 0.9200699329376221,
        "codebertscore_f3-131": 0.9326034188270569,
        "codebertscore_f1-8": 0.8432149887084961,
        "codebertscore_f3-8": 0.860319972038269,
        "codebertscore_f1-7": 0.8993133306503296,
        "codebertscore_f3-7": 0.9078350067138672,
        "codebertscore_f1-25": 0.92451411485672,
        "codebertscore_f3-25": 0.9351513385772705,
        "codebertscore_f1-64": 0.8844172358512878,
        "codebertscore_f3-64": 0.8973373770713806,
        "codebertscore_f1-68": 0.8909827470779419,
        "codebertscore_f3-68": 0.9172403812408447,
        "codebertscore_f1-160": 0.9217545390129089,
        "codebertscore_f3-160": 0.9320374131202698,
        "codebertscore_f1-196": 0.6377965807914734,
        "codebertscore_f3-196": 0.5946381092071533,
        "codebertscore_f1-181": 0.8659563660621643,
        "codebertscore_f3-181": 0.8842267394065857,
        "codebertscore_f1-58": 0.8300725817680359,
        "codebertscore_f3-58": 0.8578338623046875,
        "codebertscore_s_f1-32": 0.8920122981071472,
        "codebertscore_s_f3-32": 0.9059699773788452,
        "codebertscore_s_f1-6": 0.9074571132659912,
        "codebertscore_s_f3-6": 0.9192668199539185,
        "codebertscore_s_f1-82": 0.857459306716919,
        "codebertscore_s_f3-82": 0.8687962889671326,
        "codebertscore_s_f1-72": 0.9449620246887207,
        "codebertscore_s_f3-72": 0.9465925097465515,
        "codebertscore_s_f1-66": 0.8572432994842529,
        "codebertscore_s_f3-66": 0.8813702464103699,
        "codebertscore_s_f1-40": 0.8841959238052368,
        "codebertscore_s_f3-40": 0.9023205637931824,
        "codebertscore_s_f1-29": 0.954739511013031,
        "codebertscore_s_f3-29": 0.9533280730247498,
        "codebertscore_s_f1-177": 0.9372779130935669,
        "codebertscore_s_f3-177": 0.9447587132453918,
        "codebertscore_s_f1-24": 0.8483108282089233,
        "codebertscore_s_f3-24": 0.8692287802696228,
        "codebertscore_s_f1-191": 0.8982803821563721,
        "codebertscore_s_f3-191": 0.9102535247802734,
        "codebertscore_s_f1-131": 0.9270464777946472,
        "codebertscore_s_f3-131": 0.9394403696060181,
        "codebertscore_s_f1-8": 0.8532505035400391,
        "codebertscore_s_f3-8": 0.8714619874954224,
        "codebertscore_s_f1-7": 0.9048342704772949,
        "codebertscore_s_f3-7": 0.9136450290679932,
        "codebertscore_s_f1-25": 0.9347500205039978,
        "codebertscore_s_f3-25": 0.9443488717079163,
        "codebertscore_s_f1-64": 0.8920695185661316,
        "codebertscore_s_f3-64": 0.9053335785865784,
        "codebertscore_s_f1-68": 0.8951166272163391,
        "codebertscore_s_f3-68": 0.9216831922531128,
        "codebertscore_s_f1-160": 0.9328449964523315,
        "codebertscore_s_f3-160": 0.9413654804229736,
        "codebertscore_s_f1-196": 0.6261100769042969,
        "codebertscore_s_f3-196": 0.5731046795845032,
        "codebertscore_s_f1-181": 0.8711833357810974,
        "codebertscore_s_f3-181": 0.8886532187461853,
        "codebertscore_s_f1-58": 0.841901421546936,
        "codebertscore_s_f3-58": 0.8739464282989502,
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-82": 4,
        "raw_gpt35_nsnr-82": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-131": 4,
        "raw_gpt35_nsnr-131": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-196": 2,
        "raw_gpt35_nsnr-196": "2",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-82": 3,
        "raw_gpt35_nswr-82": "3",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-131": 4,
        "raw_gpt35_nswr-131": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-160": 4,
        "raw_gpt35_nswr-160": "4",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n",
        "snippet": [
            "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n"
        ],
        "simplified": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
        "task_id": "112",
        "164": "for(auto p : c)\n  {\n    s.erase(std::remove(s.begin(), s.end(), p), s.end());\n  }\n  std::string palindrome(s.rbegin(), s.rend());\n  return std::make_tuple(s, s == palindrome);",
        "grade-164": {
            "execution": 1
        },
        "28": "for(int i=0;i<c.size();i++){\n    std::string::iterator it;\n    while((it=find(s.begin(),s.end(),c[i]))!=s.end()){\n      s.erase(it);\n    }\n  }\n  bool ret=true;\n  for(int i=0;i<s.size()/2;i++){\n    if(s[i]!=s[s.size()-1-i]){\n      ret=false;\n      break;\n    }\n  }\n  return std::make_tuple(s,ret);",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string s_new = \"\";\n    for (char ss : s) {\n        bool flag = true;\n        for (char cc : c) {\n            if (ss == cc) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            s_new += ss;\n        }\n    }\n    bool flag = true;\n    for (int i = 0; i < s_new.size() / 2; i++) {\n        if (s_new[i] != s_new[s_new.size() - i - 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return std::make_tuple(s_new, flag);",
        "grade-6": {
            "execution": 1
        },
        "190": "std::string newString;\n    bool result;\n    for(int i = 0; i < s.length(); i++){\n        if(c.find(s[i]) == std::string::npos){\n            newString += s[i];\n        }\n    }\n    for(int i = 0; i < newString.length()/2; i++){\n        if(newString[i] != newString[newString.length()-1-i]){\n            result = false;\n            break;\n        }\n        else{\n            result = true;\n        }\n    }\n    return std::make_tuple(newString, result);",
        "grade-190": {
            "execution": 0
        },
        "71": "string res = \"\";\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (c.find(s[i]) == string::npos) {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\tstring a = res;\n\tstring b = res;\n\treverse(a.begin(), a.end());\n\tbool flag = (a == b) ? true : false;\n\treturn make_tuple(res, flag);",
        "grade-71": {
            "execution": 0
        },
        "62": "for(auto const& e : c)\n  {\n    // erase removes all characters matching 'e'\n    s.erase(std::remove(s.begin(), s.end(), e), s.end());\n  }\n  return {s, std::equal(s.begin(), s.begin() + s.size()/2, s.rbegin())};",
        "grade-62": {
            "execution": 1
        },
        "57": "int count = 0;\n  for(auto i = s.begin(); i != s.end();) {\n    for(auto j = c.begin(); j != c.end();) {\n      if(*i == *j) {\n        s.erase(i);\n        count++;\n      } else j++;\n    }\n    i++;\n  }\n  std::string reversed(s);\n  std::reverse(reversed.begin(), reversed.end());\n  bool check = false;\n  if(s == reversed) check = true;\n  return std::make_tuple(s, check);",
        "grade-57": {
            "execution": 0
        },
        "35": "bool check = false;\n    std::string result;\n    for(auto it = s.begin(); it != s.end(); it++){\n        if(c.find(*it) == std::string::npos){\n            result += *it;\n        }\n    }\n    if(result == std::string(result.rbegin(), result.rend())){\n        check = true;\n    }\n    return std::make_tuple(result, check);",
        "grade-35": {
            "execution": 1
        },
        "189": "for (int i = 0; i < c.size(); i++) {\n\t\tfor (int j = 0; j < s.size(); j++) {\n\t\t\tif (s[j] == c[i]) {\n\t\t\t\ts.erase(j, 1);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\tbool flag = true;\n\tint j = s.size() - 1;\n\tfor (int i = 0; i < s.size() / 2; i++) {\n\t\tif (s[i] != s[j]) {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\treturn std::make_tuple(s, flag);",
        "grade-189": {
            "execution": 1
        },
        "26": "for(int i=0;i<c.size();i++){\n        for(int j=0;j<s.size();j++){\n            if(s[j]==c[i]){\n                s.erase(j,1);\n                j--;\n            }\n        }\n    }\n    std::string s_rev = s;\n    std::reverse(s_rev.begin(),s_rev.end());\n    if(s_rev == s){\n        return std::make_tuple(s,true);\n    }\n    return std::make_tuple(s,false);",
        "grade-26": {
            "execution": 1
        },
        "174": "// \u0417\u0434\u0435\u0441\u044c \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434\n  return {\"\",false};",
        "grade-174": {
            "execution": 0
        },
        "140": "for(int i=0;i<c.size();i++){\n    for(int j=0;j<s.size();j++){\n      if(c[i]==s[j]){\n        s.erase(j,1);\n        j--;\n      }\n    }\n  }\n  bool flag=true;\n  for(int i=0;i<s.size()/2;i++){\n    if(s[i]!=s[s.size()-1-i]){\n      flag=false;\n      break;\n    }\n  }\n  return std::make_tuple(s,flag);",
        "grade-140": {
            "execution": 1
        },
        "22": "for(int i=0;i<c.size();i++){\n        for(int j=0;j<s.size();j++){\n            if(s[j]==c[i]){\n                s.erase(j,1);\n                j--;\n            }\n        }\n    }\n    if(s==string(s.rbegin(),s.rend()))\n        return {s,true};\n    else\n        return {s,false};",
        "grade-22": {
            "execution": 0
        },
        "152": "std::string str;\n    std::vector<int> v;\n    for(int i=0;i<s.size();i++){\n        for(int j=0;j<c.size();j++){\n            if(s[i]==c[j]){\n                v.push_back(i);\n            }\n        }\n    }\n    for(int i=0;i<s.size();i++){\n        if(i!=v[i])\n            str+=s[i];\n    }\n    std::string org_str=str;\n    std::reverse(str.begin(),str.end());\n    if(org_str==str)\n        return std::make_tuple(org_str,true);\n    else\n        return std::make_tuple(org_str,false);",
        "grade-152": {
            "execution": 0
        },
        "109": "std::vector<bool> isin(26,false);\n  std::string res;\n  for(auto& ch: c)\n    isin[ch-'a'] = true;\n  for(auto& ch: s)\n    if(!isin[ch-'a'])\n      res += ch;\n  std::reverse(res.begin(),res.end());\n  return std::make_tuple(res, res == s);",
        "grade-109": {
            "execution": 0
        },
        "8": "std::string temp = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(c.find(s[i]) == std::string::npos){\n            temp += s[i];\n        }\n    }\n    for(int i = 0; i < temp.length()/2; i++){\n        if(temp[i] != temp[temp.length()-1-i]){\n            return std::make_tuple(temp, false);\n        }\n    }\n    return std::make_tuple(temp, true);",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string result=\"\";\n    for(auto x:s)\n        if(c.find(x)==std::string::npos) result.push_back(x);\n    bool check=result==std::string(result.rbegin(),result.rend());\n    return std::make_tuple(result,check);",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string ns;\n  ns.reserve(s.size());\n  for (char ch : s) {\n    if (c.find(ch) == std::string::npos) {\n      ns.push_back(ch);\n    }\n  }\n  return {ns, ns == std::string(ns.rbegin(), ns.rend())};",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint j = 0;\n\t\tfor (; j < c.length(); j++) {\n\t\t\tif (s[i] == c[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == c.length())\n\t\t\tresult += s[i];\n\t}\n\tbool b = true;\n\tint i = 0, j = result.length() - 1;\n\twhile (i < j) {\n\t\tif (result[i] != result[j]) {\n\t\t\tb = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn std::make_tuple(result, b);",
        "grade-55": {
            "execution": 1
        },
        "59": "for(char ch: c)\n    {\n        s.erase(std::remove(s.begin(), s.end(), ch), s.end());\n    }\n    std::string s2 = s;\n    std::reverse(s2.begin(), s2.end());\n    return {s, s == s2};",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.15860839178070887,
        "bleu-28": 0.2959245037193461,
        "bleu-6": 0.19399107006484456,
        "bleu-190": 0.2802176633652489,
        "bleu-71": 0.33571808086569943,
        "bleu-62": 0.1621172081902812,
        "bleu-57": 0.19872344760594757,
        "bleu-35": 0.16515621802422928,
        "bleu-189": 0.20964391260915854,
        "bleu-26": 0.2768294642519408,
        "bleu-174": 0.0018836760047596004,
        "bleu-140": 0.21317782109033817,
        "bleu-22": 0.2721271153746154,
        "bleu-152": 0.2441733988545086,
        "bleu-109": 0.10941158890194556,
        "bleu-8": 0.3275447290195238,
        "bleu-7": 0.13064941622532716,
        "bleu-23": 0.11730901399411353,
        "bleu-55": 0.2742594115813666,
        "bleu-59": 0.1376186623049973,
        "codebleu-164": 0.38669446808804064,
        "codebleu-28": 0.6305794975654729,
        "codebleu-6": 0.48789062198484884,
        "codebleu-190": 0.528292066729983,
        "codebleu-71": 0.5377589175270084,
        "codebleu-62": 0.4636797882644933,
        "codebleu-57": 0.5948358698513021,
        "codebleu-35": 0.4823359027029149,
        "codebleu-189": 0.5559243782286969,
        "codebleu-26": 0.6150983842178619,
        "codebleu-174": 0.050106338564687,
        "codebleu-140": 0.5523271067821816,
        "codebleu-22": 0.5781342469157719,
        "codebleu-152": 0.639306069025014,
        "codebleu-109": 0.3932055988106068,
        "codebleu-8": 0.561227058057947,
        "codebleu-7": 0.3301190085270543,
        "codebleu-23": 0.380269080033495,
        "codebleu-55": 0.5902780766111158,
        "codebleu-59": 0.39666085734450207,
        "chrf-164": 0.27112622480412424,
        "chrf-28": 0.3344094722913852,
        "chrf-6": 0.24780630504100554,
        "chrf-190": 0.3557928931833547,
        "chrf-71": 0.36228356836690756,
        "chrf-62": 0.24320976516594345,
        "chrf-57": 0.29283562326012896,
        "chrf-35": 0.2959560394702577,
        "chrf-189": 0.2397509027167918,
        "chrf-26": 0.31425782192823415,
        "chrf-174": 0.0459554606441235,
        "chrf-140": 0.23687026947762077,
        "chrf-22": 0.3255644803483479,
        "chrf-152": 0.33337043594233845,
        "chrf-109": 0.22081322014312693,
        "chrf-8": 0.37041546360439204,
        "chrf-7": 0.2511706541086612,
        "chrf-23": 0.2601836501138678,
        "chrf-55": 0.3419689531983422,
        "chrf-59": 0.2569038479537227,
        "rougel-164": 0.4242424242424243,
        "rougel-28": 0.460377358490566,
        "rougel-6": 0.3266932270916335,
        "rougel-190": 0.4410646387832699,
        "rougel-71": 0.5550660792951542,
        "rougel-62": 0.3644859813084112,
        "rougel-57": 0.4291187739463601,
        "rougel-35": 0.4104803493449781,
        "rougel-189": 0.3925925925925926,
        "rougel-26": 0.45238095238095233,
        "rougel-174": 0.0903225806451613,
        "rougel-140": 0.3802281368821293,
        "rougel-22": 0.5130434782608696,
        "rougel-152": 0.4481605351170569,
        "rougel-109": 0.2895927601809955,
        "rougel-8": 0.4803149606299213,
        "rougel-7": 0.3880597014925374,
        "rougel-23": 0.37254901960784315,
        "rougel-55": 0.4802867383512545,
        "rougel-59": 0.39800995024875624,
        "meteor-164": 0.3105175292153589,
        "meteor-28": 0.5094383120269179,
        "meteor-6": 0.37610302868816065,
        "meteor-190": 0.3903121484945837,
        "meteor-71": 0.451256019343172,
        "meteor-62": 0.26825806830688154,
        "meteor-57": 0.39544071972132255,
        "meteor-35": 0.3632514126600241,
        "meteor-189": 0.39061454232283466,
        "meteor-26": 0.4104368651045293,
        "meteor-174": 0.046063311688311695,
        "meteor-140": 0.39846262228059703,
        "meteor-22": 0.47219093361486886,
        "meteor-152": 0.4840211715861118,
        "meteor-109": 0.2686483215329369,
        "meteor-8": 0.4136151584412331,
        "meteor-7": 0.2818415782990758,
        "meteor-23": 0.3274163410905385,
        "meteor-55": 0.38096369738560787,
        "meteor-59": 0.2542281432139883,
        "ruby-164": 0.30400000000000005,
        "ruby-28": 0.30714285714285716,
        "ruby-6": 0.12698412698412698,
        "ruby-190": 0.2971014492753623,
        "ruby-71": 0.45599999999999996,
        "ruby-62": 0.264,
        "ruby-57": 0.2867647058823529,
        "ruby-35": 0.248,
        "ruby-189": 0.24827586206896557,
        "ruby-26": 0.2913385826771654,
        "ruby-174": 0.05600000000000005,
        "ruby-140": 0.2246376811594203,
        "ruby-22": 0.376,
        "ruby-152": 0.3505747126436781,
        "ruby-109": 0.17600000000000005,
        "ruby-8": 0.3178294573643411,
        "ruby-7": 0.272,
        "ruby-23": 0.256,
        "ruby-55": 0.33766233766233766,
        "ruby-59": 0.31200000000000006,
        "codebertscore_f1-164": 0.7595586776733398,
        "codebertscore_f3-164": 0.7545309662818909,
        "codebertscore_f1-28": 0.8081642985343933,
        "codebertscore_f3-28": 0.8210756182670593,
        "codebertscore_f1-6": 0.7108004093170166,
        "codebertscore_f3-6": 0.7298607230186462,
        "codebertscore_f1-190": 0.7830832004547119,
        "codebertscore_f3-190": 0.7987000942230225,
        "codebertscore_f1-71": 0.8411455750465393,
        "codebertscore_f3-71": 0.8487012982368469,
        "codebertscore_f1-62": 0.7419443726539612,
        "codebertscore_f3-62": 0.7435033321380615,
        "codebertscore_f1-57": 0.7673734426498413,
        "codebertscore_f3-57": 0.7816163301467896,
        "codebertscore_f1-35": 0.7876331806182861,
        "codebertscore_f3-35": 0.8001927137374878,
        "codebertscore_f1-189": 0.7807598114013672,
        "codebertscore_f3-189": 0.7831389904022217,
        "codebertscore_f1-26": 0.7904959917068481,
        "codebertscore_f3-26": 0.807034969329834,
        "codebertscore_f1-174": 0.5815306305885315,
        "codebertscore_f3-174": 0.5911351442337036,
        "codebertscore_f1-140": 0.7830259799957275,
        "codebertscore_f3-140": 0.7837634682655334,
        "codebertscore_f1-22": 0.82709801197052,
        "codebertscore_f3-22": 0.81974196434021,
        "codebertscore_f1-152": 0.7728062272071838,
        "codebertscore_f3-152": 0.7905151844024658,
        "codebertscore_f1-109": 0.7428182363510132,
        "codebertscore_f3-109": 0.7675970196723938,
        "codebertscore_f1-8": 0.8096123337745667,
        "codebertscore_f3-8": 0.8235048651695251,
        "codebertscore_f1-7": 0.7687738537788391,
        "codebertscore_f3-7": 0.7735912799835205,
        "codebertscore_f1-23": 0.7979942560195923,
        "codebertscore_f3-23": 0.7921165227890015,
        "codebertscore_f1-55": 0.7928448915481567,
        "codebertscore_f3-55": 0.7987542152404785,
        "codebertscore_f1-59": 0.761900782585144,
        "codebertscore_f3-59": 0.7448021173477173,
        "codebertscore_s_f1-164": 0.7535983324050903,
        "codebertscore_s_f3-164": 0.7496026158332825,
        "codebertscore_s_f1-28": 0.8108407855033875,
        "codebertscore_s_f3-28": 0.8244140148162842,
        "codebertscore_s_f1-6": 0.7256712913513184,
        "codebertscore_s_f3-6": 0.7480083107948303,
        "codebertscore_s_f1-190": 0.7833966612815857,
        "codebertscore_s_f3-190": 0.8030651807785034,
        "codebertscore_s_f1-71": 0.8345759510993958,
        "codebertscore_s_f3-71": 0.844279944896698,
        "codebertscore_s_f1-62": 0.7449828386306763,
        "codebertscore_s_f3-62": 0.7451419234275818,
        "codebertscore_s_f1-57": 0.7730385065078735,
        "codebertscore_s_f3-57": 0.788945198059082,
        "codebertscore_s_f1-35": 0.7842727899551392,
        "codebertscore_s_f3-35": 0.8008822202682495,
        "codebertscore_s_f1-189": 0.7836335301399231,
        "codebertscore_s_f3-189": 0.7862549424171448,
        "codebertscore_s_f1-26": 0.7971513271331787,
        "codebertscore_s_f3-26": 0.8150302171707153,
        "codebertscore_s_f1-174": 0.5725870728492737,
        "codebertscore_s_f3-174": 0.5763428211212158,
        "codebertscore_s_f1-140": 0.7851437926292419,
        "codebertscore_s_f3-140": 0.7864677906036377,
        "codebertscore_s_f1-22": 0.8390538096427917,
        "codebertscore_s_f3-22": 0.8324990272521973,
        "codebertscore_s_f1-152": 0.781732439994812,
        "codebertscore_s_f3-152": 0.8025897145271301,
        "codebertscore_s_f1-109": 0.7349327206611633,
        "codebertscore_s_f3-109": 0.763562023639679,
        "codebertscore_s_f1-8": 0.8082926869392395,
        "codebertscore_s_f3-8": 0.8256475925445557,
        "codebertscore_s_f1-7": 0.7579751014709473,
        "codebertscore_s_f3-7": 0.7665712237358093,
        "codebertscore_s_f1-23": 0.7998483180999756,
        "codebertscore_s_f3-23": 0.796934187412262,
        "codebertscore_s_f1-55": 0.7967139482498169,
        "codebertscore_s_f3-55": 0.8030841946601868,
        "codebertscore_s_f1-59": 0.7645571827888489,
        "codebertscore_s_f3-59": 0.7462509274482727,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 0,
        "raw_gpt35_nsnr-174": "3 - The code snippet correctly deletes all characters in s that are equal to any character in c and returns the result string. However, it does not check if the result string is a palindrome or not, and always returns False for the check.",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 2,
        "raw_gpt35_nswr-174": "2",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 2,
        "raw_gpt35_nswr-152": "2",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u279e True\n// is_nested('[]]]]]]][[[[[]') \u279e False\n// is_nested('[][]') \u279e False\n// is_nested('[]') \u279e False\n// is_nested('[[][]]') \u279e True\n// is_nested('[[]][[') \u279e True\nbool is_nested(std::string string) {\n",
        "snippet": [
            "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n"
        ],
        "simplified": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
        "task_id": "132",
        "167": "int count = 0;\n  for(auto x : string){\n    if(x == '[')\n      count++;\n    else\n      count--;\n    if(count < 0)\n      return false;\n  }\n  return count == 0;",
        "grade-167": {
            "execution": 0
        },
        "28": "std::stack<char> s;\n    for(auto ch:string){\n        if(ch=='[')\n        s.push(ch);\n        else if(ch==']'){\n            if(s.empty()) return false;\n            else\n            s.pop();\n        }\n    }\n    return s.empty();",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<char> v;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n            v.push_back(string[i]);\n        }\n        else if(string[i]==']'){\n            if(v.size()>0){\n                if(v[v.size()-1]=='['){\n                    v.pop_back();\n                }\n                else{\n                    return false;\n                }\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    if(v.size()==0){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-6": {
            "execution": 0
        },
        "195": "int count = 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i] == '[') count++;\n    else count--;\n    if(count < 0) return false;\n  }\n  return true;",
        "grade-195": {
            "execution": 0
        },
        "70": "int count_closing = 0;\n\tint count_opening = 0;\n\tbool result = false;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount_opening++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount_closing++;\n\t\t}\n\t}\n\tif (count_closing > count_opening) {\n\t\treturn result;\n\t}\n\telse {\n\t\treturn true;\n\t}",
        "grade-70": {
            "execution": 0
        },
        "62": "int n = string.length();\n    std::stack<char> s;\n    for(int i = 0; i < n; i++) {\n        if(string[i] == '[') {\n            s.push(string[i]);\n        }\n        else if(string[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                s.pop();\n            }\n        }\n    }\n    if(s.empty())\n        return true;\n    else \n        return false;",
        "grade-62": {
            "execution": 0
        },
        "57": "int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::stack<char> s;\n  for(int i=0;i<string.length();i++){\n    if(string[i]=='['){\n      s.push(string[i]);\n    }\n    else if(string[i]==']'){\n      if(s.empty()){\n        return false;\n      }\n      else{\n        s.pop();\n      }\n    }\n  }\n  if(s.empty()){\n    return true;\n  }\n  else{\n    return false;\n  }",
        "grade-35": {
            "execution": 0
        },
        "193": "int len = string.length();\n\tstd::stack<char> stack;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (string[i] == '[') {\n\t\t\tstack.push(string[i]);\n\t\t}\n\t\telse if (!stack.empty() && string[i] == ']') {\n\t\t\tstack.pop();\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-193": {
            "execution": 0
        },
        "26": "// Create a stack to hold characters\n\tstd::stack<char> brackets;\n\tint countOpen = 0;\n\tint countClose = 0;\n\tfor (char const& c : string) {\n\t\t// if the stack is empty, push the current character to the stack\n\t\tif (brackets.empty()) {\n\t\t\tbrackets.push(c);\n\t\t\t// if the stack is not empty, and the current character is the same as the top of the stack\n\t\t\t// pop the top off of the stack\n\t\t} else if (c == brackets.top()) {\n\t\t\tbrackets.pop();\n\t\t\t// otherwise push the current character to the stack\n\t\t} else {\n\t\t\tbrackets.push(c);\n\t\t}\n\t}\n\t// if the stack is empty, the string is nested\n\tif (brackets.empty()) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-26": {
            "execution": 0
        },
        "178": "std::stack<char>stk;\n    bool flag = false;\n    for(auto s:string){\n        if(s == '[')\n            stk.push(s);\n        else{\n            if(stk.empty())\n                return false;\n            stk.pop();\n            flag = true;\n        }\n    }\n    return flag;",
        "grade-178": {
            "execution": 0
        },
        "142": "int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tcount += (string[i] == '[') ? 1 : -1;\n\t\tif (count < 0) return false;\n\t}\n\treturn count == 0;",
        "grade-142": {
            "execution": 0
        },
        "22": "std::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='[')\n\t\t\tst.push(string[i]);\n\t\telse if(string[i]==']'){\n\t\t\tif(st.size()==0)\n\t\t\t\treturn false;\n\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.size()>0)\n\t\treturn false;\n\treturn true;",
        "grade-22": {
            "execution": 0
        },
        "155": "int count = 0;\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tif (string[i] == '[')\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount--;\n\t\t\tif (count < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn count == 0;",
        "grade-155": {
            "execution": 0
        },
        "108": "int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count > 0 ? false : true;",
        "grade-108": {
            "execution": 0
        },
        "8": "int count=0;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n            count++;\n        }\n        else{\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (string == \"\") return false;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[' || string[i] == ']') {\n\t\t\tif (string[i] == ']' && i == 0) return false;\n\t\t\tif (string[i] == ']' && string[i - 1] == '[') return true;\n\t\t}\n\t}\n\treturn false;",
        "grade-7": {
            "execution": 0
        },
        "23": "stack<char> s;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(s.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
        "grade-23": {
            "execution": 0
        },
        "55": "int valid = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tvalid++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tvalid--;\n\t\t}\n\t\tif (valid < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn valid != 0 ? false : true;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::stack<char> brackets;\n  for (char bracket : string) {\n    if (bracket == '[') {\n      brackets.push(bracket);\n    } else if (bracket == ']') {\n      if (brackets.empty()) {\n        return false;\n      }\n      brackets.pop();\n    }\n  }\n  return brackets.empty();",
        "grade-59": {
            "execution": 0
        },
        "bleu-167": 0.18400786379277348,
        "bleu-28": 0.1664596572608553,
        "bleu-6": 0.31618168130391644,
        "bleu-195": 0.3751119348710038,
        "bleu-70": 0.4273309769263091,
        "bleu-62": 0.3793066714593289,
        "bleu-57": 0.48020697205848945,
        "bleu-35": 0.3855560529401088,
        "bleu-193": 0.40551188016723794,
        "bleu-26": 0.09299966876928867,
        "bleu-178": 0.12154794916525194,
        "bleu-142": 0.3727359467933768,
        "bleu-22": 0.4099800364261828,
        "bleu-155": 0.3961697366119886,
        "bleu-108": 0.49111648342542524,
        "bleu-8": 0.37543532756454695,
        "bleu-7": 0.41254285443937255,
        "bleu-23": 0.40457028715858423,
        "bleu-55": 0.4380577748140217,
        "bleu-59": 0.17794808937066361,
        "codebleu-167": 0.27805063300357663,
        "codebleu-28": 0.3712784657644937,
        "codebleu-6": 0.6324452284097344,
        "codebleu-195": 0.4367817567806543,
        "codebleu-70": 0.608786583022397,
        "codebleu-62": 0.6064116217895098,
        "codebleu-57": 0.5606082052851596,
        "codebleu-35": 0.5947481020489385,
        "codebleu-193": 0.5725116621654669,
        "codebleu-26": 0.44081196581196574,
        "codebleu-178": 0.36937383191393025,
        "codebleu-142": 0.4348187693344641,
        "codebleu-22": 0.6223545572601794,
        "codebleu-155": 0.4537533448547218,
        "codebleu-108": 0.5931684652510981,
        "codebleu-8": 0.4642432662319222,
        "codebleu-7": 0.5649423253250088,
        "codebleu-23": 0.5869700610534232,
        "codebleu-55": 0.57063792893406,
        "codebleu-59": 0.3747201579719954,
        "chrf-167": 0.35728571176239676,
        "chrf-28": 0.22131238033725645,
        "chrf-6": 0.3838075447467936,
        "chrf-195": 0.5068868823776209,
        "chrf-70": 0.46776074879640694,
        "chrf-62": 0.3789942971225507,
        "chrf-57": 0.5204296941354306,
        "chrf-35": 0.39135418811001427,
        "chrf-193": 0.373389697081824,
        "chrf-26": 0.2384491212746486,
        "chrf-178": 0.2171589227489743,
        "chrf-142": 0.460220569397304,
        "chrf-22": 0.3986971112656885,
        "chrf-155": 0.5035645721791402,
        "chrf-108": 0.5204700376928357,
        "chrf-8": 0.475811297810228,
        "chrf-7": 0.40650348233754646,
        "chrf-23": 0.37576952974524663,
        "chrf-55": 0.39861581160715687,
        "chrf-59": 0.2146516270108736,
        "rougel-167": 0.4625850340136055,
        "rougel-28": 0.38596491228070173,
        "rougel-6": 0.5311203319502075,
        "rougel-195": 0.6540880503144655,
        "rougel-70": 0.631578947368421,
        "rougel-62": 0.5402843601895734,
        "rougel-57": 0.711864406779661,
        "rougel-35": 0.580952380952381,
        "rougel-193": 0.4974619289340101,
        "rougel-26": 0.2804428044280443,
        "rougel-178": 0.3614457831325301,
        "rougel-142": 0.6211180124223602,
        "rougel-22": 0.5812807881773399,
        "rougel-155": 0.6419753086419753,
        "rougel-108": 0.6994535519125684,
        "rougel-8": 0.6303030303030304,
        "rougel-7": 0.5741626794258374,
        "rougel-23": 0.5625000000000001,
        "rougel-55": 0.6521739130434783,
        "rougel-59": 0.37931034482758624,
        "meteor-167": 0.2738507965603518,
        "meteor-28": 0.2593843922739023,
        "meteor-6": 0.49153532767910835,
        "meteor-195": 0.38290230008876325,
        "meteor-70": 0.5071424302193532,
        "meteor-62": 0.4586802909144433,
        "meteor-57": 0.5345433269953872,
        "meteor-35": 0.45372809986076734,
        "meteor-193": 0.4151798657691826,
        "meteor-26": 0.2918835172552986,
        "meteor-178": 0.2313538684776143,
        "meteor-142": 0.36796401614328467,
        "meteor-22": 0.44510068410684905,
        "meteor-155": 0.3728900971766607,
        "meteor-108": 0.5298067141403865,
        "meteor-8": 0.3737839695463678,
        "meteor-7": 0.505185167403404,
        "meteor-23": 0.38955421929588824,
        "meteor-55": 0.5010330976090827,
        "meteor-59": 0.2585854670410258,
        "ruby-167": 0.33999999999999997,
        "ruby-28": 0.26,
        "ruby-6": 0.42553191489361697,
        "ruby-195": 0.52,
        "ruby-70": 0.5,
        "ruby-62": 0.4144144144144144,
        "ruby-57": 0.5700000000000001,
        "ruby-35": 0.5,
        "ruby-193": 0.31000000000000005,
        "ruby-26": 0.16374269005847952,
        "ruby-178": 0.26,
        "ruby-142": 0.48,
        "ruby-22": 0.4854368932038835,
        "ruby-155": 0.52,
        "ruby-108": 0.5700000000000001,
        "ruby-8": 0.49,
        "ruby-7": 0.4678899082568807,
        "ruby-23": 0.42000000000000004,
        "ruby-55": 0.53,
        "ruby-59": 0.24,
        "codebertscore_f1-167": 0.8243472576141357,
        "codebertscore_f3-167": 0.8003395199775696,
        "codebertscore_f1-28": 0.718498170375824,
        "codebertscore_f3-28": 0.7050824761390686,
        "codebertscore_f1-6": 0.7757874727249146,
        "codebertscore_f3-6": 0.7808190584182739,
        "codebertscore_f1-195": 0.8698856234550476,
        "codebertscore_f3-195": 0.8466426730155945,
        "codebertscore_f1-70": 0.8386175036430359,
        "codebertscore_f3-70": 0.8432751893997192,
        "codebertscore_f1-62": 0.7880633473396301,
        "codebertscore_f3-62": 0.7809951901435852,
        "codebertscore_f1-57": 0.8884451985359192,
        "codebertscore_f3-57": 0.8649959564208984,
        "codebertscore_f1-35": 0.8016283512115479,
        "codebertscore_f3-35": 0.7894493341445923,
        "codebertscore_f1-193": 0.8047215342521667,
        "codebertscore_f3-193": 0.792667806148529,
        "codebertscore_f1-26": 0.7029945254325867,
        "codebertscore_f3-26": 0.736476480960846,
        "codebertscore_f1-178": 0.7234257459640503,
        "codebertscore_f3-178": 0.7172800302505493,
        "codebertscore_f1-142": 0.8782379627227783,
        "codebertscore_f3-142": 0.8549913167953491,
        "codebertscore_f1-22": 0.8119557499885559,
        "codebertscore_f3-22": 0.7951881289482117,
        "codebertscore_f1-155": 0.8797915577888489,
        "codebertscore_f3-155": 0.8563370704650879,
        "codebertscore_f1-108": 0.8901867866516113,
        "codebertscore_f3-108": 0.8690533638000488,
        "codebertscore_f1-8": 0.8925491571426392,
        "codebertscore_f3-8": 0.8710895776748657,
        "codebertscore_f1-7": 0.830239474773407,
        "codebertscore_f3-7": 0.8040462732315063,
        "codebertscore_f1-23": 0.7977785468101501,
        "codebertscore_f3-23": 0.7766548991203308,
        "codebertscore_f1-55": 0.8580504059791565,
        "codebertscore_f3-55": 0.8313883543014526,
        "codebertscore_f1-59": 0.7196551561355591,
        "codebertscore_f3-59": 0.706756055355072,
        "codebertscore_s_f1-167": 0.9298890829086304,
        "codebertscore_s_f3-167": 0.9087079763412476,
        "codebertscore_s_f1-28": 0.878037691116333,
        "codebertscore_s_f3-28": 0.8543962240219116,
        "codebertscore_s_f1-6": 0.8919527530670166,
        "codebertscore_s_f3-6": 0.8941187262535095,
        "codebertscore_s_f1-195": 0.9429689645767212,
        "codebertscore_s_f3-195": 0.925204873085022,
        "codebertscore_s_f1-70": 0.921216607093811,
        "codebertscore_s_f3-70": 0.9206926822662354,
        "codebertscore_s_f1-62": 0.9008690714836121,
        "codebertscore_s_f3-62": 0.8921083807945251,
        "codebertscore_s_f1-57": 0.9493966102600098,
        "codebertscore_s_f3-57": 0.932990550994873,
        "codebertscore_s_f1-35": 0.9071778059005737,
        "codebertscore_s_f3-35": 0.8966760635375977,
        "codebertscore_s_f1-193": 0.9096779227256775,
        "codebertscore_s_f3-193": 0.8956282138824463,
        "codebertscore_s_f1-26": 0.8227283954620361,
        "codebertscore_s_f3-26": 0.8673151731491089,
        "codebertscore_s_f1-178": 0.879030704498291,
        "codebertscore_s_f3-178": 0.8625710010528564,
        "codebertscore_s_f1-142": 0.9452199935913086,
        "codebertscore_s_f3-142": 0.9286518692970276,
        "codebertscore_s_f1-22": 0.913438618183136,
        "codebertscore_s_f3-22": 0.900203287601471,
        "codebertscore_s_f1-155": 0.9467250108718872,
        "codebertscore_s_f3-155": 0.9299076199531555,
        "codebertscore_s_f1-108": 0.9487133622169495,
        "codebertscore_s_f3-108": 0.9338356852531433,
        "codebertscore_s_f1-8": 0.9521001577377319,
        "codebertscore_s_f3-8": 0.936235249042511,
        "codebertscore_s_f1-7": 0.9229425191879272,
        "codebertscore_s_f3-7": 0.9054784774780273,
        "codebertscore_s_f1-23": 0.9097692966461182,
        "codebertscore_s_f3-23": 0.8923313021659851,
        "codebertscore_s_f1-55": 0.9333909749984741,
        "codebertscore_s_f3-55": 0.9148260354995728,
        "codebertscore_s_f1-59": 0.8775201439857483,
        "codebertscore_s_f3-59": 0.8566080927848816,
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-193": 3,
        "raw_gpt35_nsnr-193": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-155": 4,
        "raw_gpt35_nswr-155": "4",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nstd::vector<long> sort_even(std::vector<long> l) {\n",
        "snippet": [
            "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
        "task_id": "37",
        "164": "// We use curr_index to keep track of the current index while we loop through the vector.\n    int curr_index = 0;\n    // We use even_index to keep track of the current even index while we loop through the vector.\n    int even_index = 0;\n    // We use l_prime to store the output vector.\n    std::vector<long> l_prime;\n    // We loop through the entire input vector.\n    while (curr_index < l.size()) {\n        // If the index is odd, we just add the value at that index to l_prime.\n        if (curr_index % 2 != 0) {\n            l_prime.push_back(l[curr_index]);\n        }\n        // If the index is even, we store the value at that index in the even_index variable.\n        else {\n            even_index = curr_index;\n        }\n        // We then increment curr_index by 1.\n        curr_index++;\n    }\n    // We then sort the even indices of l.\n    std::sort(l.begin(), l.begin() + even_index + 1);\n    // We then loop through the entire input vector.\n    curr_index = 0;\n    while (curr_index < l.size()) {\n        // If the index is even, we add the value at that index to l_prime.\n        if (curr_index % 2 == 0) {\n            l_prime.push_back(l[curr_index]);\n        }\n        // We then increment curr_index by 1.\n        curr_index++;\n    }\n    // We then return l_prime.\n    return l_prime;",
        "grade-164": {
            "execution": 0
        },
        "28": "int i;\n\tint n = l.size();\n\tvector<long>res;\n\tif(n == 0)\n\t{\n\t\treturn res;\n\t}\n\telse\n\t{\n\t\tres.push_back(l[0]);\n\t\tif(n == 1)\n\t\t{\n\t\t\treturn res;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsort(l.begin()+1,l.end());\n\t\t\tfor(i=1;i<n;i++)\n\t\t\t{\n\t\t\t\tres.push_back(l[i]);\n\t\t\t\tif(i != n-1)\n\t\t\t\t{\n\t\t\t\t\tres.push_back(l[++i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t}",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> evens;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tevens.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(evens.begin(), evens.end());\n\tstd::vector<long> res;\n\tint k = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(evens[k]);\n\t\t\tk++;\n\t\t}\n\t\telse {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t}\n\treturn res;",
        "grade-6": {
            "execution": 1
        },
        "190": "if (l.size() % 2 == 0) {\n        //even number of elements\n        return l;\n    }\n    else {\n        //odd number of elements\n        std::vector<long> even_indicies;\n        std::vector<long> odd_indicies;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even_indicies.push_back(l[i]);\n            }\n            else {\n                odd_indicies.push_back(l[i]);\n            }\n        }\n        std::sort(even_indicies.begin(), even_indicies.end());\n        l.clear();\n        for (int i = 0; i < even_indicies.size(); i++) {\n            l.push_back(even_indicies[i]);\n            l.push_back(odd_indicies[i]);\n        }\n        l.push_back(odd_indicies[odd_indicies.size() - 1]);\n        return l;\n    }",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<long> sort_vec;\n    for (int i = 0; i < l.size(); i+=2) {\n        sort_vec.push_back(l[i]);\n    }\n    std::sort(sort_vec.begin(), sort_vec.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i+=2) {\n        l[i] = sort_vec[j];\n        j++;\n    }\n    return l;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Replace this with your solution\n    vector<long> res;\n    vector<long> even;\n    vector<long> odd;\n    vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 == 0) {\n            even.push_back(*it);\n        } else {\n            odd.push_back(*it);\n        }\n    }\n    sort(even.begin(), even.end());\n    for(int i = 0; i < odd.size(); i++) {\n        res.push_back(odd[i]);\n        if(i != even.size()) {\n            res.push_back(even[i]);\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> l1;\n    std::vector<long> l2;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l1.push_back(l[i]);\n        } else {\n            l2.push_back(l[i]);\n        }\n    }\n    std::sort(l2.begin(), l2.end());\n    for (int i = 0; i < l1.size(); i++) {\n        l1.insert(l1.begin() + (2 * i + 1), l2[i]);\n    }\n    return l1;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n\tstd::vector<long> x(l.size(),0);\n\tint j=0;\n\tfor(int i=0;i<l.size();i++)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tx[i]=l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx[i]=l[i];\n\t\t\tj++;\n\t\t}\n\t}\n\tstd::sort(x.begin()+1,x.begin()+j+1);\n\treturn x;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<long> evenList;\n\tstd::vector<long> oddList;\n\tstd::vector<long> result;\n\tfor (unsigned int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\toddList.push_back(l[i]);\n\t\t}\n\t\telse {\n\t\t\tevenList.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(evenList.begin(), evenList.end());\n\tfor (unsigned int i = 0; i < oddList.size(); i++) {\n\t\tresult.push_back(oddList[i]);\n\t\tresult.push_back(evenList[i]);\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::vector<long> v;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 2 == 0) {\n      v.push_back(l[i]);\n    } else {\n      v.push_back(l[i]);\n      std::sort(v.begin() + i - 1, v.end());\n    }\n  }\n  return v;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> out;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 2 == 0){\n            out.push_back(l[i]);\n        } else {\n            out.push_back(l[i]);\n            std::sort(out.begin() + (i-1), out.end());\n        }\n    }\n    return out;",
        "grade-174": {
            "execution": 0
        },
        "140": "// Write your code here\n  if(l.size()==0)\n    return l;\n  if(l.size()==1)\n    return l;\n  if(l.size()==2)\n  {\n    if(l[0]>l[1])\n    {\n      long temp=l[0];\n      l[0]=l[1];\n      l[1]=temp;\n    }\n    return l;\n  }\n  for(int i=0;i<l.size();i+=2)\n  {\n    for(int j=i+2;j<l.size();j+=2)\n    {\n      if(l[i]>l[j])\n      {\n        long temp=l[i];\n        l[i]=l[j];\n        l[j]=temp;\n      }\n    }\n  }\n  return l;",
        "grade-140": {
            "execution": 1
        },
        "22": "std::vector<long> even_indices;\n    std::vector<long> odd_indices;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            odd_indices.push_back(l[i]);\n        } else {\n            even_indices.push_back(l[i]);\n        }\n    }\n    std::sort(even_indices.begin(), even_indices.end());\n    std::vector<long> ans;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            ans.push_back(odd_indices[i / 2]);\n        } else {\n            ans.push_back(even_indices[i / 2]);\n        }\n    }\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<long> li;\n  std::vector<long> lo;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 2 == 0) {\n      li.push_back(l[i]);\n    } else {\n      lo.push_back(l[i]);\n    }\n  }\n  std::sort(lo.begin(), lo.end());\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 2 == 0) {\n      l[i] = li[i / 2];\n    } else {\n      l[i] = lo[i / 2];\n    }\n  }\n  return l;",
        "grade-152": {
            "execution": 0
        },
        "109": "for (int i = 0; i < l.size(); i++) {\n        for (int j = i; j < l.size(); j++) {\n            if (l[i] < l[j]) {\n                long temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    return l;",
        "grade-109": {
            "execution": 0
        },
        "8": "for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] > l[j]) {\n                long aux = l[i];\n                l[i] = l[j];\n                l[j] = aux;\n            }\n        }\n    }\n    std::vector<long> l2;\n    int i = 0;\n    while (i < l.size()) {\n        if (i % 2 == 0) {\n            l2.push_back(l[i]);\n        } else {\n            l2.push_back(l[l.size() - 1 - i]);\n        }\n        i++;\n    }\n    return l2;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> res;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t\telse {\n\t\t\tstd::vector<long> odd_list;\n\t\t\twhile (i < l.size() && i % 2 != 0) {\n\t\t\t\todd_list.push_back(l[i]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tstd::sort(odd_list.begin(), odd_list.end());\n\t\t\tfor (int j = 0; j < odd_list.size(); j++) {\n\t\t\t\tres.push_back(odd_list[j]);\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t}\n\treturn res;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> v;\n    int j = 0;\n    int k = 0;\n    if (l.size()%2 == 0)\n    {\n    for (int i = 0; i < l.size(); i++)\n    {\n        if (i%2 == 0)\n        {\n            v.push_back(l[i]);\n        }\n        else\n        {\n            for (int j = 0; j < (l.size()/2); j++)\n            {\n                if (l[i] == l[j*2+1])\n                {\n                    k = l[j*2+1];\n                    l[j*2+1] = l[i];\n                    l[i] = k;\n                }\n            }\n            v.push_back(l[i]);\n        }\n    }\n    }\n    else\n    {\n        for (int i = 0; i < l.size(); i++)\n        {\n            if (i%2 == 0)\n            {\n                v.push_back(l[i]);\n            }\n            else\n            {\n                for (int j = 0; j < (l.size()/2); j++)\n                {\n                    if (l[i] == l[j*2+1])\n                    {\n                        k = l[j*2+1];\n                        l[j*2+1] = l[i];\n                        l[i] = k;\n                    }\n                }\n                v.push_back(l[i]);\n            }\n        }\n    }\n    return v;",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code goes here\n\treturn l;",
        "grade-55": {
            "execution": 0
        },
        "59": "int n = l.size();\n    if (n % 2 == 0)\n        n -= 1;\n    for (int i = 0; i < n; i += 2) {\n        for (int j = i + 2; j < n; j += 2) {\n            if (l[i] > l[j]) {\n                long aux = l[i];\n                l[i] = l[j];\n                l[j] = aux;\n            }\n        }\n    }\n    return l;",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.1298606360242798,
        "bleu-28": 0.3801612013674414,
        "bleu-6": 0.5581156987538841,
        "bleu-190": 0.4140838200901376,
        "bleu-70": 0.41634438622390185,
        "bleu-62": 0.41773152170811917,
        "bleu-57": 0.5440783312093685,
        "bleu-35": 0.36987291516382087,
        "bleu-189": 0.48640953696912853,
        "bleu-26": 0.3806944269041283,
        "bleu-174": 0.42079321698457983,
        "bleu-140": 0.25270792286146193,
        "bleu-22": 0.5286161258764652,
        "bleu-152": 0.5437510091259593,
        "bleu-109": 0.26160992596866484,
        "bleu-8": 0.40299495550528147,
        "bleu-7": 0.4825184508564149,
        "bleu-23": 0.24873809866718372,
        "bleu-55": 8.744230168173978e-08,
        "bleu-59": 0.2539090418803401,
        "codebleu-164": 0.6055188887979839,
        "codebleu-28": 0.603461215163275,
        "codebleu-6": 0.7360672189984154,
        "codebleu-190": 0.7161300433592537,
        "codebleu-70": 0.5520049966594245,
        "codebleu-62": 0.6711499196866759,
        "codebleu-57": 0.7146226792122157,
        "codebleu-35": 0.5740299897377038,
        "codebleu-189": 0.6876920885855683,
        "codebleu-26": 0.4859647177664666,
        "codebleu-174": 0.5054583710300743,
        "codebleu-140": 0.6175740221808069,
        "codebleu-22": 0.7542674790765298,
        "codebleu-152": 0.7423121383126821,
        "codebleu-109": 0.410594088675409,
        "codebleu-8": 0.6684338103404444,
        "codebleu-7": 0.7041292344424995,
        "codebleu-23": 0.7138332893510593,
        "codebleu-55": 0.02083371458893217,
        "codebleu-59": 0.4521598277403392,
        "chrf-164": 0.26607179343304865,
        "chrf-28": 0.43315094510508073,
        "chrf-6": 0.647889288292511,
        "chrf-190": 0.5450458489863829,
        "chrf-70": 0.4388869407921819,
        "chrf-62": 0.5644342387825554,
        "chrf-57": 0.5516276088049296,
        "chrf-35": 0.3460534126122702,
        "chrf-189": 0.5860723562391712,
        "chrf-26": 0.4402342658614535,
        "chrf-174": 0.49157905156650145,
        "chrf-140": 0.29930785873623145,
        "chrf-22": 0.6154631653330885,
        "chrf-152": 0.5715995321228066,
        "chrf-109": 0.2680165512961949,
        "chrf-8": 0.4510418235332878,
        "chrf-7": 0.5450892583523109,
        "chrf-23": 0.4721259830443965,
        "chrf-55": 0.03782275801449536,
        "chrf-59": 0.23955959702952587,
        "rougel-164": 0.3160377358490566,
        "rougel-28": 0.558139534883721,
        "rougel-6": 0.6739130434782609,
        "rougel-190": 0.5545171339563864,
        "rougel-70": 0.6239316239316239,
        "rougel-62": 0.5870307167235495,
        "rougel-57": 0.6222222222222222,
        "rougel-35": 0.4489795918367347,
        "rougel-189": 0.6293706293706295,
        "rougel-26": 0.4818181818181818,
        "rougel-174": 0.5135135135135135,
        "rougel-140": 0.37662337662337664,
        "rougel-22": 0.6757679180887373,
        "rougel-152": 0.6549295774647887,
        "rougel-109": 0.48372093023255813,
        "rougel-8": 0.4913494809688581,
        "rougel-7": 0.5211267605633803,
        "rougel-23": 0.4618937644341802,
        "rougel-55": 0.04285714285714286,
        "rougel-59": 0.3931623931623932,
        "meteor-164": 0.43637614063338703,
        "meteor-28": 0.5822089985476955,
        "meteor-6": 0.7269836724191816,
        "meteor-190": 0.5917742066390715,
        "meteor-70": 0.40083225827681024,
        "meteor-62": 0.6504596390264701,
        "meteor-57": 0.5782446028710025,
        "meteor-35": 0.4815608132156916,
        "meteor-189": 0.634354826718872,
        "meteor-26": 0.3948287105419001,
        "meteor-174": 0.4609836368110237,
        "meteor-140": 0.39041592920353985,
        "meteor-22": 0.615846876678381,
        "meteor-152": 0.5631056892901986,
        "meteor-109": 0.287350422790479,
        "meteor-8": 0.5218770024434878,
        "meteor-7": 0.5682936666089958,
        "meteor-23": 0.49406985248044955,
        "meteor-55": 0.016835016835016835,
        "meteor-59": 0.3113857205858724,
        "ruby-164": 0.1877133105802048,
        "ruby-28": 0.3740458015267175,
        "ruby-6": 0.5172413793103448,
        "ruby-190": 0.4052631578947369,
        "ruby-70": 0.4580152671755725,
        "ruby-62": 0.42592592592592593,
        "ruby-57": 0.4244604316546763,
        "ruby-35": 0.2290076335877863,
        "ruby-189": 0.4193548387096774,
        "ruby-26": 0.3435114503816794,
        "ruby-174": 0.3740458015267175,
        "ruby-140": 0.28248587570621464,
        "ruby-22": 0.5308641975308642,
        "ruby-152": 0.5032679738562091,
        "ruby-109": 0.35114503816793896,
        "ruby-8": 0.35443037974683544,
        "ruby-7": 0.30065359477124187,
        "ruby-23": 0.304635761589404,
        "ruby-55": 0.022900763358778664,
        "ruby-59": 0.23664122137404575,
        "codebertscore_f1-164": 0.7087057828903198,
        "codebertscore_f3-164": 0.7607948780059814,
        "codebertscore_f1-28": 0.8260037302970886,
        "codebertscore_f3-28": 0.8225803375244141,
        "codebertscore_f1-6": 0.8913615942001343,
        "codebertscore_f3-6": 0.8985388875007629,
        "codebertscore_f1-190": 0.7911237478256226,
        "codebertscore_f3-190": 0.8376355171203613,
        "codebertscore_f1-70": 0.8560577630996704,
        "codebertscore_f3-70": 0.8532117009162903,
        "codebertscore_f1-62": 0.8287676572799683,
        "codebertscore_f3-62": 0.8421777486801147,
        "codebertscore_f1-57": 0.8425437211990356,
        "codebertscore_f3-57": 0.8568128347396851,
        "codebertscore_f1-35": 0.819395124912262,
        "codebertscore_f3-35": 0.8274983167648315,
        "codebertscore_f1-189": 0.8616206049919128,
        "codebertscore_f3-189": 0.8754051327705383,
        "codebertscore_f1-26": 0.8604035377502441,
        "codebertscore_f3-26": 0.8624710440635681,
        "codebertscore_f1-174": 0.8799874186515808,
        "codebertscore_f3-174": 0.8774991631507874,
        "codebertscore_f1-140": 0.7804837226867676,
        "codebertscore_f3-140": 0.7682163715362549,
        "codebertscore_f1-22": 0.8476479649543762,
        "codebertscore_f3-22": 0.8727133870124817,
        "codebertscore_f1-152": 0.87239009141922,
        "codebertscore_f3-152": 0.8712879419326782,
        "codebertscore_f1-109": 0.8001916408538818,
        "codebertscore_f3-109": 0.7615055441856384,
        "codebertscore_f1-8": 0.8080671429634094,
        "codebertscore_f3-8": 0.8084700107574463,
        "codebertscore_f1-7": 0.8571106195449829,
        "codebertscore_f3-7": 0.8704714775085449,
        "codebertscore_f1-23": 0.8105867505073547,
        "codebertscore_f3-23": 0.8295251727104187,
        "codebertscore_f1-55": 0.5902175903320312,
        "codebertscore_f3-55": 0.5572882294654846,
        "codebertscore_f1-59": 0.8021463751792908,
        "codebertscore_f3-59": 0.784745454788208,
        "codebertscore_s_f1-164": 0.7404971122741699,
        "codebertscore_s_f3-164": 0.7921468615531921,
        "codebertscore_s_f1-28": 0.8337367177009583,
        "codebertscore_s_f3-28": 0.8296427130699158,
        "codebertscore_s_f1-6": 0.8946323990821838,
        "codebertscore_s_f3-6": 0.903472900390625,
        "codebertscore_s_f1-190": 0.8277294635772705,
        "codebertscore_s_f3-190": 0.8688390254974365,
        "codebertscore_s_f1-70": 0.8643130660057068,
        "codebertscore_s_f3-70": 0.8618585467338562,
        "codebertscore_s_f1-62": 0.8403930068016052,
        "codebertscore_s_f3-62": 0.85813969373703,
        "codebertscore_s_f1-57": 0.846881628036499,
        "codebertscore_s_f3-57": 0.861713171005249,
        "codebertscore_s_f1-35": 0.8198229074478149,
        "codebertscore_s_f3-35": 0.8300619125366211,
        "codebertscore_s_f1-189": 0.8643302321434021,
        "codebertscore_s_f3-189": 0.8786203861236572,
        "codebertscore_s_f1-26": 0.8644298315048218,
        "codebertscore_s_f3-26": 0.8689384460449219,
        "codebertscore_s_f1-174": 0.882195234298706,
        "codebertscore_s_f3-174": 0.8825327754020691,
        "codebertscore_s_f1-140": 0.7905882000923157,
        "codebertscore_s_f3-140": 0.7795947194099426,
        "codebertscore_s_f1-22": 0.8566901683807373,
        "codebertscore_s_f3-22": 0.8819063305854797,
        "codebertscore_s_f1-152": 0.880434513092041,
        "codebertscore_s_f3-152": 0.8815678358078003,
        "codebertscore_s_f1-109": 0.8102673292160034,
        "codebertscore_s_f3-109": 0.7703492045402527,
        "codebertscore_s_f1-8": 0.8277410864830017,
        "codebertscore_s_f3-8": 0.8252800107002258,
        "codebertscore_s_f1-7": 0.8582809567451477,
        "codebertscore_s_f3-7": 0.8714578151702881,
        "codebertscore_s_f1-23": 0.8397902846336365,
        "codebertscore_s_f3-23": 0.8489512801170349,
        "codebertscore_s_f1-55": 0.5867257118225098,
        "codebertscore_s_f3-55": 0.5533175468444824,
        "codebertscore_s_f1-59": 0.8070574402809143,
        "codebertscore_s_f3-59": 0.7898001074790955,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 2,
        "raw_gpt35_nswr-190": "2",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279e True\n// any_int(3, 2, 2) \u279e False\n// any_int(3, -2, 1) \u279e True\n// any_int(3.6, -2.2, 2) \u279e False\nbool any_int(float x, float y, float z) {\n",
        "snippet": [
            "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n"
        ],
        "simplified": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "task_id": "92",
        "180": "assert(x==int(x));\n  assert(y==int(y));\n  assert(z==int(z));\n  \n  if (x + y == z) {\n    return true;\n  }\n  else if (x + z == y) {\n    return true;\n  }\n  else if (y + z == x) {\n    return true;\n  }\n  else {\n    return false;\n  }",
        "grade-180": {
            "execution": 0
        },
        "30": "if (((x + y) == z || (x + z) == y || (y + z) == x) && (std::floor(x) == x) && (std::floor(y) == y) && (std::floor(z) == z))\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-30": {
            "execution": 0
        },
        "7": "return ((x + y == z) || (x + z == y) || (y + z == x));",
        "grade-7": {
            "execution": 0
        },
        "72": "int a, b, c;\n  a = x;\n  b = y;\n  c = z;\n  return (a == b + c || b == a + c || c == a + b);",
        "grade-72": {
            "execution": 0
        },
        "64": "int a = x;\n  int b = y;\n  int c = z;\n  int sum = a + b;\n  if ((sum == c) || (sum == a) || (sum == b)) {\n    return true;\n  }\n  else {\n    return false;\n  }",
        "grade-64": {
            "execution": 0
        },
        "59": "return (x + y == z || x + z == y || y + z == x);",
        "grade-59": {
            "execution": 0
        },
        "37": "if (std::ceil(x) == x && std::ceil(y) == y && std::ceil(z) == z) {\n\t\tif (std::ceil(x) == std::ceil(y) + std::ceil(z))\n\t\t\treturn true;\n\t\telse if (std::ceil(y) == std::ceil(x) + std::ceil(z))\n\t\t\treturn true;\n\t\telse if (std::ceil(z) == std::ceil(x) + std::ceil(y))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;",
        "grade-37": {
            "execution": 0
        },
        "28": "int a, b, c;\n\ta = x;\n\tb = y;\n\tc = z;\n\tif (a + b == c || a + c == b || b + c == a) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-28": {
            "execution": 0
        },
        "190": "if(int(x) == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x) + int(y)){\n        return true;\n    }else{\n        return false;\n    }",
        "grade-190": {
            "execution": 0
        },
        "153": "if((x == y + z) || (y == x + z) || (z == x + y))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-153": {
            "execution": 0
        },
        "24": "assert(is_integral<float>::value == true);\n    if(is_integral<float>::value == true)\n    {\n        if((x == y + z)||(y == x + z)||(z == x + y))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }",
        "grade-24": {
            "execution": 0
        },
        "167": "// return (fmod(x,1)==0 && fmod(y,1)==0 && fmod(z,1)==0) && (x==y+z || y==x+z || z==x+y);\n  return x==floor(x) && y==floor(y) && z==floor(z) && (x==y+z || y==x+z || z==x+y);",
        "grade-167": {
            "execution": 0
        },
        "117": "return (int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;",
        "grade-117": {
            "execution": 0
        },
        "9": "if (fmod(x, 1) != 0 && fmod(y, 1) != 0 && fmod(z, 1) != 0)\n        return false;\n    if (x == y + z || y == x + z || z == x + y)\n        return true;\n    return false;",
        "grade-9": {
            "execution": 0
        },
        "8": "if (x == y + z || y == x + z || z == x + y)\n    return true;\n  else\n    return false;",
        "grade-8": {
            "execution": 0
        },
        "25": "float sum = x + y + z;\n\tif (x == sum || y == sum || z == sum) {\n\t\treturn true;\n\t}\n\telse return false;",
        "grade-25": {
            "execution": 0
        },
        "57": "return (floor(x) + floor(y) == floor(z) || floor(x) + floor(z) == floor(y) || floor(y) + floor(z) == floor(x));",
        "grade-57": {
            "execution": 0
        },
        "61": "if(floor(x)==x && floor(y)==y && floor(z)==z) {\n\t\tif(x+y==z || x+z==y || y+z==x) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-61": {
            "execution": 0
        },
        "142": "int ix = (int)x;\n\tint iy = (int)y;\n\tint iz = (int)z;\n\tif (x == ix && y == iy && z == iz) {\n\t\tif (ix == iy + iz || iy == ix + iz || iz == ix + iy) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-142": {
            "execution": 0
        },
        "170": "if(!(int(x)==x&&int(y)==y&&int(z)==z)){\n        return false;\n    }\n    else if(int(x)==(int(y)+int(z))||int(y)==(int(x)+int(z))||int(z)==(int(x)+int(y))){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-170": {
            "execution": 0
        },
        "bleu-180": 0.08173151248938006,
        "bleu-30": 0.06787587459716013,
        "bleu-7": 0.016866908589736218,
        "bleu-72": 0.10993606541786816,
        "bleu-64": 0.1674485297406104,
        "bleu-59": 0.011615135695752343,
        "bleu-37": 0.06763742399526962,
        "bleu-28": 0.3258229079978499,
        "bleu-190": 0.0795273761846999,
        "bleu-153": 0.06619835492345402,
        "bleu-24": 0.08949613915342047,
        "bleu-167": 0.01718850218398988,
        "bleu-117": 0.024843800850942985,
        "bleu-9": 0.23526283977715615,
        "bleu-8": 0.04847282614350799,
        "bleu-25": 0.049392553476025315,
        "bleu-57": 0.02512928909156384,
        "bleu-61": 0.06204056055549085,
        "bleu-142": 0.08135326462836201,
        "bleu-170": 0.06294844829161693,
        "codebleu-180": 0.5753869609890292,
        "codebleu-30": 0.5121412560210739,
        "codebleu-7": 0.23904313086839116,
        "codebleu-72": 0.30202386611268783,
        "codebleu-64": 0.38508554498350506,
        "codebleu-59": 0.16728206742469892,
        "codebleu-37": 0.5841205130754699,
        "codebleu-28": 0.39253824095802287,
        "codebleu-190": 0.44082833106779623,
        "codebleu-153": 0.28508132332478914,
        "codebleu-24": 0.4275131749030526,
        "codebleu-167": 0.4847204269000032,
        "codebleu-117": 0.32218006603087224,
        "codebleu-9": 0.48764178444882134,
        "codebleu-8": 0.23173981618846815,
        "codebleu-25": 0.22161820258507275,
        "codebleu-57": 0.368404430013774,
        "codebleu-61": 0.4422152289719466,
        "codebleu-142": 0.47824069470683767,
        "codebleu-170": 0.5231845149315567,
        "chrf-180": 0.30299901329383605,
        "chrf-30": 0.2313872929717566,
        "chrf-7": 0.06290776971916766,
        "chrf-72": 0.12985558761848287,
        "chrf-64": 0.2698754941429064,
        "chrf-59": 0.05458550914874434,
        "chrf-37": 0.32906292891606675,
        "chrf-28": 0.3207521140409339,
        "chrf-190": 0.22117050618827944,
        "chrf-153": 0.2105233851036024,
        "chrf-24": 0.25618911460894694,
        "chrf-167": 0.12879855195427994,
        "chrf-117": 0.0910455532031608,
        "chrf-9": 0.3513335191792114,
        "chrf-8": 0.20412368188451477,
        "chrf-25": 0.2163451519825453,
        "chrf-57": 0.10292764832759203,
        "chrf-61": 0.22126199165981583,
        "chrf-142": 0.29646332266662434,
        "chrf-170": 0.28698655019818153,
        "rougel-180": 0.44736842105263164,
        "rougel-30": 0.35761589403973515,
        "rougel-7": 0.297029702970297,
        "rougel-72": 0.4210526315789474,
        "rougel-64": 0.44094488188976383,
        "rougel-59": 0.2736842105263158,
        "rougel-37": 0.3365384615384615,
        "rougel-28": 0.5967741935483871,
        "rougel-190": 0.3787878787878788,
        "rougel-153": 0.3783783783783784,
        "rougel-24": 0.4,
        "rougel-167": 0.28108108108108104,
        "rougel-117": 0.2833333333333333,
        "rougel-9": 0.510948905109489,
        "rougel-8": 0.35643564356435636,
        "rougel-25": 0.32075471698113206,
        "rougel-57": 0.2950819672131147,
        "rougel-61": 0.4545454545454545,
        "rougel-142": 0.38461538461538464,
        "rougel-170": 0.38857142857142857,
        "meteor-180": 0.45651854280460763,
        "meteor-30": 0.36736823818163533,
        "meteor-7": 0.20408682704585274,
        "meteor-72": 0.417809646381075,
        "meteor-64": 0.42684048535260577,
        "meteor-59": 0.15519969271009576,
        "meteor-37": 0.3773685569812962,
        "meteor-28": 0.5727810650887574,
        "meteor-190": 0.36066688573671435,
        "meteor-153": 0.3177918552036199,
        "meteor-24": 0.3683033482008921,
        "meteor-167": 0.2745665611337253,
        "meteor-117": 0.2452619047619048,
        "meteor-9": 0.4898403483309143,
        "meteor-8": 0.25842266462480856,
        "meteor-25": 0.27866641337386017,
        "meteor-57": 0.24453412462908014,
        "meteor-61": 0.36066688573671435,
        "meteor-142": 0.38885401408941894,
        "meteor-170": 0.4261702510565064,
        "ruby-180": 0.32530120481927716,
        "ruby-30": 0.29268292682926833,
        "ruby-7": 0.21739130434782605,
        "ruby-72": 0.24637681159420288,
        "ruby-64": 0.2753623188405797,
        "ruby-59": 0.17391304347826086,
        "ruby-37": 0.24460431654676262,
        "ruby-28": 0.4347826086956522,
        "ruby-190": 0.24637681159420288,
        "ruby-153": 0.21739130434782605,
        "ruby-24": 0.19718309859154926,
        "ruby-167": 0.1724137931034483,
        "ruby-117": 0.17391304347826086,
        "ruby-9": 0.3913043478260869,
        "ruby-8": 0.21739130434782605,
        "ruby-25": 0.2028985507246377,
        "ruby-57": 0.18840579710144922,
        "ruby-61": 0.3623188405797102,
        "ruby-142": 0.24137931034482762,
        "ruby-170": 0.3113207547169812,
        "codebertscore_f1-180": 0.8000423908233643,
        "codebertscore_f3-180": 0.8050022721290588,
        "codebertscore_f1-30": 0.7909274101257324,
        "codebertscore_f3-30": 0.8023101091384888,
        "codebertscore_f1-7": 0.7279059886932373,
        "codebertscore_f3-7": 0.7106377482414246,
        "codebertscore_f1-72": 0.8111409544944763,
        "codebertscore_f3-72": 0.7865861058235168,
        "codebertscore_f1-64": 0.8315230011940002,
        "codebertscore_f3-64": 0.8508671522140503,
        "codebertscore_f1-59": 0.7319504618644714,
        "codebertscore_f3-59": 0.7126688957214355,
        "codebertscore_f1-37": 0.7580430507659912,
        "codebertscore_f3-37": 0.7801898717880249,
        "codebertscore_f1-28": 0.8775330185890198,
        "codebertscore_f3-28": 0.879608154296875,
        "codebertscore_f1-190": 0.7847009301185608,
        "codebertscore_f3-190": 0.7892352342605591,
        "codebertscore_f1-153": 0.7864018678665161,
        "codebertscore_f3-153": 0.7830329537391663,
        "codebertscore_f1-24": 0.7500991225242615,
        "codebertscore_f3-24": 0.7659913897514343,
        "codebertscore_f1-167": 0.7369335889816284,
        "codebertscore_f3-167": 0.7349698543548584,
        "codebertscore_f1-117": 0.7215426564216614,
        "codebertscore_f3-117": 0.7083052396774292,
        "codebertscore_f1-9": 0.8204105496406555,
        "codebertscore_f3-9": 0.836358368396759,
        "codebertscore_f1-8": 0.7935263514518738,
        "codebertscore_f3-8": 0.7916161417961121,
        "codebertscore_f1-25": 0.7836905717849731,
        "codebertscore_f3-25": 0.7879756689071655,
        "codebertscore_f1-57": 0.7401678562164307,
        "codebertscore_f3-57": 0.7131674289703369,
        "codebertscore_f1-61": 0.8338972330093384,
        "codebertscore_f3-61": 0.8370518088340759,
        "codebertscore_f1-142": 0.7646941542625427,
        "codebertscore_f3-142": 0.7842240333557129,
        "codebertscore_f1-170": 0.7808588147163391,
        "codebertscore_f3-170": 0.798957347869873,
        "codebertscore_s_f1-180": 0.9184680581092834,
        "codebertscore_s_f3-180": 0.9170223474502563,
        "codebertscore_s_f1-30": 0.9142645597457886,
        "codebertscore_s_f3-30": 0.9151161313056946,
        "codebertscore_s_f1-7": 0.9182277917861938,
        "codebertscore_s_f3-7": 0.8901474475860596,
        "codebertscore_s_f1-72": 0.9356986284255981,
        "codebertscore_s_f3-72": 0.9200704097747803,
        "codebertscore_s_f1-64": 0.9385891556739807,
        "codebertscore_s_f3-64": 0.9381179809570312,
        "codebertscore_s_f1-59": 0.9184961915016174,
        "codebertscore_s_f3-59": 0.8902568221092224,
        "codebertscore_s_f1-37": 0.8783929944038391,
        "codebertscore_s_f3-37": 0.9056656956672668,
        "codebertscore_s_f1-28": 0.9549842476844788,
        "codebertscore_s_f3-28": 0.949862003326416,
        "codebertscore_s_f1-190": 0.9189020395278931,
        "codebertscore_s_f3-190": 0.9116083383560181,
        "codebertscore_s_f1-153": 0.9256315231323242,
        "codebertscore_s_f3-153": 0.9073361754417419,
        "codebertscore_s_f1-24": 0.8995174169540405,
        "codebertscore_s_f3-24": 0.9022424221038818,
        "codebertscore_s_f1-167": 0.8804993033409119,
        "codebertscore_s_f3-167": 0.8912229537963867,
        "codebertscore_s_f1-117": 0.9069787859916687,
        "codebertscore_s_f3-117": 0.8910669684410095,
        "codebertscore_s_f1-9": 0.9246745705604553,
        "codebertscore_s_f3-9": 0.9282463788986206,
        "codebertscore_s_f1-8": 0.9300652146339417,
        "codebertscore_s_f3-8": 0.9134685397148132,
        "codebertscore_s_f1-25": 0.9259147047996521,
        "codebertscore_s_f3-25": 0.9094232320785522,
        "codebertscore_s_f1-57": 0.9124203324317932,
        "codebertscore_s_f3-57": 0.8951172828674316,
        "codebertscore_s_f1-61": 0.9321309924125671,
        "codebertscore_s_f3-61": 0.9284328818321228,
        "codebertscore_s_f1-142": 0.8965381979942322,
        "codebertscore_s_f3-142": 0.9075024724006653,
        "codebertscore_s_f1-170": 0.9077351689338684,
        "codebertscore_s_f3-170": 0.9137450456619263,
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-117": 3,
        "raw_gpt35_nswr-117": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nstd::vector<long> sort_array(std::vector<long> arr) {\n",
        "snippet": [
            "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n"
        ],
        "simplified": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
        "task_id": "116",
        "164": "std::vector<std::pair<int, long>> pairs;\n  for (auto it = arr.begin(); it != arr.end(); ++it) {\n    int n1s = 0;\n    long n = *it;\n    while (n > 0) {\n      n1s += n & 1;\n      n >>= 1;\n    }\n    pairs.push_back(std::make_pair(n1s, *it));\n  }\n  std::sort(pairs.begin(), pairs.end());\n  std::vector<long> result;\n  for (auto it = pairs.begin(); it != pairs.end(); ++it) {\n    result.push_back(it->second);\n  }\n  return result;",
        "grade-164": {
            "execution": 0
        },
        "28": "// write your code here\n  std::vector<long> sorted;\n  std::vector<long> order;\n  std::vector<long> tmp;\n  int i = 0;\n  while (i < arr.size()) {\n    long x = arr[i];\n    while (x != 0) {\n      order.push_back(x % 2);\n      x /= 2;\n    }\n    i++;\n  }\n  i = 0;\n  while (i < arr.size()) {\n    long x = arr[i];\n    while (x != 0) {\n      tmp.push_back(x % 2);\n      x /= 2;\n    }\n    i++;\n  }\n  i = 0;\n  while (i < arr.size()) {\n    long counter = 0;\n    while (tmp[i] != 0) {\n      if (tmp[i] == order[i])\n        counter++;\n      else\n        break;\n      i++;\n    }\n    if (counter == tmp.size())\n      sorted.push_back(arr[i]);\n    else\n      i++;\n  }\n  return sorted;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::vector<long>> temp;\n    std::vector<long> res;\n    for (int i = 0; i < arr.size(); i++) {\n        temp.push_back({arr[i], ones(arr[i])});\n    }\n    sort(temp.begin(), temp.end(), [](std::vector<long> v1, std::vector<long> v2) {\n        if (v1[1] == v2[1])\n            return v1[0] < v2[0];\n        return v1[1] < v2[1];\n    });\n    for (int i = 0; i < temp.size(); i++) {\n        res.push_back(temp[i][0]);\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "190": "//  iterate through vector and add a member to each value with the number of 1's in its binary representation.\n    //  i.e. 0b10101 --> std::make_pair(long, int) <5,3>\n    //  sort vector based on number of 1's and then on value.\n    std::vector<std::pair<long, int>> converted;\n    std::vector<long> sorted;\n    for (auto x : arr) {\n        int ones = 0;\n        int value = x;\n        while (value > 0) {\n            if (value % 2 == 1)\n                ones++;\n            value /= 2;\n        }\n        converted.push_back(std::make_pair(x, ones));\n    }\n    std::sort(converted.begin(), converted.end(),\n              [](std::pair<long, int>& a, std::pair<long, int>& b) {\n                  if (a.second != b.second)\n                      return a.second < b.second;\n                  else\n                      return a.first < b.first;\n              });\n    for (auto x : converted) {\n        sorted.push_back(x.first);\n    }\n    return sorted;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    if (__builtin_popcount(a) == __builtin_popcount(b))\n      return a < b;\n    return __builtin_popcount(a) < __builtin_popcount(b);\n  });\n  return arr;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> sorted, binary_sorted;\n  // sort\n  std::sort(arr.begin(), arr.end());\n  // loop through\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 0) {\n      std::string binary = std::bitset<32>(arr[i]).to_string();\n      binary_sorted.push_back(count(binary.begin(), binary.end(), '1'));\n    }\n  }\n  // sort based on binary\n  std::sort(binary_sorted.begin(), binary_sorted.end());\n  for (int i = 0; i < binary_sorted.size(); i++) {\n    for (int j = 0; j < arr.size(); j++) {\n      std::string binary = std::bitset<32>(arr[j]).to_string();\n      if (binary_sorted[i] == count(binary.begin(), binary.end(), '1')) {\n        sorted.push_back(arr[j]);\n        arr[j] = -111111;\n        break;\n      }\n    }\n  }\n  return sorted;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (arr.size() == 0) return arr;\n    std::vector<std::vector<long>> ones;\n    for (long i = 0; i < arr.size(); i++) {\n        long num = arr[i];\n        long count = 0;\n        while (num > 0) {\n            count += num % 2;\n            num /= 2;\n        }\n        if (ones.size() <= count) ones.resize(count + 1);\n        ones[count].push_back(arr[i]);\n    }\n    arr.clear();\n    for (long i = 0; i < ones.size(); i++) {\n        std::sort(ones[i].begin(), ones[i].end());\n        arr.insert(arr.end(), ones[i].begin(), ones[i].end());\n    }\n    return arr;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> sorted;\n  for (int i = 0; i < arr.size(); i++) {\n    sorted.push_back(arr[i]);\n  }\n  std::sort(sorted.begin(), sorted.end(),\n            [](const long &a, const long &b) {\n              if (std::bitset<64>(a).count() == std::bitset<64>(b).count()) {\n                return a < b;\n              }\n              return std::bitset<64>(a).count() < std::bitset<64>(b).count();\n            });\n  return sorted;",
        "grade-35": {
            "execution": 0
        },
        "189": "struct Item {\n        long val;\n        int ones;\n    };\n    std::vector<Item> items;\n    for (auto it = arr.begin(); it != arr.end(); ++it) {\n        int num = *it;\n        int count = 0;\n        while (num > 0) {\n            count += num % 2;\n            num /= 2;\n        }\n        items.push_back({*it, count});\n    }\n    std::sort(items.begin(), items.end(), [](Item a, Item b) {\n        if (a.ones < b.ones) {\n            return true;\n        } else if (a.ones == b.ones) {\n            return a.val < b.val;\n        } else {\n            return false;\n        }\n    });\n    std::vector<long> res;\n    for (auto it = items.begin(); it != items.end(); ++it) {\n        res.push_back(it->val);\n    }\n    return res;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::vector<long> output;\n    std::map<long, long> mapOnes;\n    for (long i : arr) {\n        long countOnes = 0;\n        while (i > 0) {\n            countOnes += i % 2;\n            i /= 2;\n        }\n        mapOnes[countOnes] = i;\n    }\n    for (auto pair : mapOnes) {\n        output.push_back(pair.second);\n    }\n    return output;",
        "grade-26": {
            "execution": 0
        },
        "174": "for (int i = 0; i < arr.size(); i++) {\n    for (int j = i + 1; j < arr.size(); j++) {\n      int count1 = 0;\n      int count2 = 0;\n      long num1 = arr[i];\n      long num2 = arr[j];\n      while (num1 != 0) {\n        count1++;\n        num1 /= 2;\n      }\n      while (num2 != 0) {\n        count2++;\n        num2 /= 2;\n      }\n      if (count1 < count2) {\n        long tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n      } else if (count1 == count2) {\n        if (arr[i] > arr[j]) {\n          long tmp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = tmp;\n        }\n      }\n    }\n  }\n  return arr;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::map<int, std::vector<long>> map;\n  std::vector<long> ret;\n  for (auto num : arr) {\n    int ones = __builtin_popcountl(num);\n    if (map.find(ones) == map.end()) {\n      map[ones] = std::vector<long>();\n    }\n    map[ones].push_back(num);\n  }\n  for (auto it = map.begin(); it != map.end(); ++it) {\n    std::sort(it->second.begin(), it->second.end());\n    ret.insert(ret.end(), it->second.begin(), it->second.end());\n  }\n  return ret;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::sort(arr.begin(), arr.end(), [](long& a, long& b) {\n    int c1 = __builtin_popcountl(a);\n    int c2 = __builtin_popcountl(b);\n    if (c1 != c2) {\n      return c1 < c2;\n    }\n    return a < b;\n  });\n  return arr;",
        "grade-22": {
            "execution": 0
        },
        "152": "for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            int x = arr[i];\n            int y = arr[j];\n            int d = x - y;\n            if (d > 0) {\n                arr[i] = y;\n                arr[j] = x;\n            }\n        }\n    }\n    return arr;",
        "grade-152": {
            "execution": 0
        },
        "109": "// your code here\n  std::vector<long> sort_arr;\n  int len = arr.size();\n  for (int i = 0; i < len; i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n      num = num / 2;\n    }\n    sort_arr.push_back(count);\n  }\n  std::sort(sort_arr.begin(), sort_arr.end());\n  return sort_arr;",
        "grade-109": {
            "execution": 0
        },
        "8": "// your code here\n  return arr;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::pair<int, long>> v;\n  for (auto x : arr) {\n    long temp = x;\n    int count = 0;\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    v.push_back(std::make_pair(count, x));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> ans;\n  for (auto x : v) {\n    ans.push_back(x.second);\n  }\n  return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "for (size_t i = 0; i < arr.size(); i++) {\n        for (size_t j = i + 1; j < arr.size(); j++) {\n            long count1 = 0;\n            long count2 = 0;\n            for (size_t k = 0; k < 8; k++) {\n                count1 += (arr[i] >> k) & 1;\n                count2 += (arr[j] >> k) & 1;\n            }\n            if (count1 == count2) {\n                if (arr[i] > arr[j]) {\n                    std::swap(arr[i], arr[j]);\n                }\n            } else if (count1 > count2) {\n                std::swap(arr[i], arr[j]);\n            }\n        }\n    }\n    return arr;",
        "grade-23": {
            "execution": 0
        },
        "55": "//your code here\n  std::vector<long>::iterator it;\n  std::vector<long> res;\n  std::vector<long> binarr;\n  std::vector<long> sorted = arr;\n  std::cout << \"Initial array: \";\n  for (it = arr.begin(); it != arr.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  std::sort(sorted.begin(), sorted.end());\n  std::cout << \"Sorted array: \";\n  for (it = sorted.begin(); it != sorted.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  for (it = sorted.begin(); it != sorted.end(); it++) {\n    binarr.push_back(std::bitset<8>(*it).count());\n  }\n  std::cout << \"number of ones: \";\n  for (it = binarr.begin(); it != binarr.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  for (it = binarr.begin(); it != binarr.end(); it++) {\n    res.push_back(sorted[it - binarr.begin()]);\n  }\n  std::cout << \"sorted array: \";\n  for (it = res.begin(); it != res.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (arr.size() <= 1) {\n    return arr;\n  }\n  std::sort(arr.begin(), arr.end(), [](const long& a, const long& b) {\n    int num_ones_a = std::bitset<32>(a).count();\n    int num_ones_b = std::bitset<32>(b).count();\n    if (num_ones_a != num_ones_b) {\n      return num_ones_a < num_ones_b;\n    }\n    return a < b;\n  });\n  return arr;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.10389535734383536,
        "bleu-28": 0.22314177271262836,
        "bleu-6": 0.2628830194320908,
        "bleu-190": 0.05494595858149194,
        "bleu-70": 0.011549975292656355,
        "bleu-62": 0.2919788583934558,
        "bleu-57": 0.2777137198555149,
        "bleu-35": 0.16451835626495664,
        "bleu-189": 0.07309164380878222,
        "bleu-26": 0.03650699924467958,
        "bleu-174": 0.37526554531629885,
        "bleu-140": 0.0661362291605161,
        "bleu-22": 0.014561698863615422,
        "bleu-152": 0.16243242207850211,
        "bleu-109": 0.13133680173978643,
        "bleu-8": 9.959655982628362e-13,
        "bleu-7": 0.047793545204777355,
        "bleu-23": 0.26691739312649837,
        "bleu-55": 0.03488169461101649,
        "bleu-59": 0.052239444955828954,
        "codebleu-164": 0.38236550646332207,
        "codebleu-28": 0.5539202795420921,
        "codebleu-6": 0.5048332018103049,
        "codebleu-190": 0.46006593943960783,
        "codebleu-70": 0.14741432321934117,
        "codebleu-62": 0.5735086077491779,
        "codebleu-57": 0.5382574932919427,
        "codebleu-35": 0.3568548667961936,
        "codebleu-189": 0.47275517536230854,
        "codebleu-26": 0.19905409909126504,
        "codebleu-174": 0.5976991565577576,
        "codebleu-140": 0.3731470019110766,
        "codebleu-22": 0.166357137697692,
        "codebleu-152": 0.29477202913451983,
        "codebleu-109": 0.33767466771773486,
        "codebleu-8": 0.013513513547995813,
        "codebleu-7": 0.31883838229485684,
        "codebleu-23": 0.49390935392550733,
        "codebleu-55": 0.45782090826980576,
        "codebleu-59": 0.25620370974879086,
        "chrf-164": 0.22505662569611912,
        "chrf-28": 0.29865740669393015,
        "chrf-6": 0.3128379950912749,
        "chrf-190": 0.2020391471790636,
        "chrf-70": 0.11965264924498423,
        "chrf-62": 0.381761928986643,
        "chrf-57": 0.3463392119520892,
        "chrf-35": 0.24373721140674431,
        "chrf-189": 0.22737048591659473,
        "chrf-26": 0.16763623861366705,
        "chrf-174": 0.40478329430010346,
        "chrf-140": 0.1877147552920296,
        "chrf-22": 0.13158009112301786,
        "chrf-152": 0.31392212945949133,
        "chrf-109": 0.2835430317842915,
        "chrf-8": 0.037357711269721566,
        "chrf-7": 0.18906295404020595,
        "chrf-23": 0.31928130643541247,
        "chrf-55": 0.20444234792915755,
        "chrf-59": 0.17659188948314294,
        "rougel-164": 0.36363636363636365,
        "rougel-28": 0.39179954441913434,
        "rougel-6": 0.39185750636132316,
        "rougel-190": 0.24034334763948498,
        "rougel-70": 0.20788530465949817,
        "rougel-62": 0.44957983193277307,
        "rougel-57": 0.4278846153846154,
        "rougel-35": 0.3178082191780822,
        "rougel-189": 0.32710280373831774,
        "rougel-26": 0.26885245901639343,
        "rougel-174": 0.47058823529411764,
        "rougel-140": 0.29090909090909095,
        "rougel-22": 0.22996515679442509,
        "rougel-152": 0.4336569579288026,
        "rougel-109": 0.3730886850152905,
        "rougel-8": 0.035555555555555556,
        "rougel-7": 0.28488372093023256,
        "rougel-23": 0.41558441558441556,
        "rougel-55": 0.2435064935064935,
        "rougel-59": 0.2523076923076923,
        "meteor-164": 0.22615554910747873,
        "meteor-28": 0.34760013622059543,
        "meteor-6": 0.2862779385966628,
        "meteor-190": 0.24234173733998968,
        "meteor-70": 0.11591085892097194,
        "meteor-62": 0.3530459272375554,
        "meteor-57": 0.34739761394020935,
        "meteor-35": 0.19238796340367015,
        "meteor-189": 0.26928988477707777,
        "meteor-26": 0.16120093636017202,
        "meteor-174": 0.43412383616977196,
        "meteor-140": 0.22312797636483847,
        "meteor-22": 0.12951139376508994,
        "meteor-152": 0.2645732498378325,
        "meteor-109": 0.23432804168686377,
        "meteor-8": 0.01912289648138705,
        "meteor-7": 0.20035018993352327,
        "meteor-23": 0.3572427988890728,
        "meteor-55": 0.2364797816246278,
        "meteor-59": 0.1899510896710261,
        "ruby-164": 0.21658986175115202,
        "ruby-28": 0.18018018018018023,
        "ruby-6": 0.24423963133640558,
        "ruby-190": 0.09638554216867468,
        "ruby-70": 0.11981566820276501,
        "ruby-62": 0.28185328185328185,
        "ruby-57": 0.2304147465437788,
        "ruby-35": 0.2304147465437788,
        "ruby-189": 0.1751152073732719,
        "ruby-26": 0.14746543778801846,
        "ruby-174": 0.3317972350230415,
        "ruby-140": 0.15668202764976957,
        "ruby-22": 0.13824884792626724,
        "ruby-152": 0.2949308755760369,
        "ruby-109": 0.19354838709677424,
        "ruby-8": 0.018433179723502335,
        "ruby-7": 0.15668202764976957,
        "ruby-23": 0.32258064516129037,
        "ruby-55": 0.1528822055137845,
        "ruby-59": 0.15207373271889402,
        "codebertscore_f1-164": 0.7401697039604187,
        "codebertscore_f3-164": 0.7315536737442017,
        "codebertscore_f1-28": 0.7743358612060547,
        "codebertscore_f3-28": 0.7719101309776306,
        "codebertscore_f1-6": 0.7693046927452087,
        "codebertscore_f3-6": 0.7622204422950745,
        "codebertscore_f1-190": 0.6747201085090637,
        "codebertscore_f3-190": 0.6982603669166565,
        "codebertscore_f1-70": 0.6425243616104126,
        "codebertscore_f3-70": 0.6145386099815369,
        "codebertscore_f1-62": 0.7764016389846802,
        "codebertscore_f3-62": 0.7951078414916992,
        "codebertscore_f1-57": 0.7940237522125244,
        "codebertscore_f3-57": 0.7922507524490356,
        "codebertscore_f1-35": 0.7193073630332947,
        "codebertscore_f3-35": 0.7145642042160034,
        "codebertscore_f1-189": 0.722959041595459,
        "codebertscore_f3-189": 0.7283727526664734,
        "codebertscore_f1-26": 0.7215068936347961,
        "codebertscore_f3-26": 0.6925643682479858,
        "codebertscore_f1-174": 0.800051748752594,
        "codebertscore_f3-174": 0.7986053228378296,
        "codebertscore_f1-140": 0.6937719583511353,
        "codebertscore_f3-140": 0.6896771788597107,
        "codebertscore_f1-22": 0.6702354550361633,
        "codebertscore_f3-22": 0.6472808718681335,
        "codebertscore_f1-152": 0.7974700927734375,
        "codebertscore_f3-152": 0.7608833312988281,
        "codebertscore_f1-109": 0.7818248867988586,
        "codebertscore_f3-109": 0.757920503616333,
        "codebertscore_f1-8": 0.5231956243515015,
        "codebertscore_f3-8": 0.48086971044540405,
        "codebertscore_f1-7": 0.733767032623291,
        "codebertscore_f3-7": 0.7110427618026733,
        "codebertscore_f1-23": 0.7747253179550171,
        "codebertscore_f3-23": 0.7770898938179016,
        "codebertscore_f1-55": 0.6969457864761353,
        "codebertscore_f3-55": 0.7160140872001648,
        "codebertscore_f1-59": 0.6865056157112122,
        "codebertscore_f3-59": 0.668792724609375,
        "codebertscore_s_f1-164": 0.7528284788131714,
        "codebertscore_s_f3-164": 0.751969039440155,
        "codebertscore_s_f1-28": 0.7923688888549805,
        "codebertscore_s_f3-28": 0.7815647125244141,
        "codebertscore_s_f1-6": 0.7847556471824646,
        "codebertscore_s_f3-6": 0.7803472876548767,
        "codebertscore_s_f1-190": 0.6963923573493958,
        "codebertscore_s_f3-190": 0.7190346717834473,
        "codebertscore_s_f1-70": 0.6839749813079834,
        "codebertscore_s_f3-70": 0.6749286651611328,
        "codebertscore_s_f1-62": 0.7783711552619934,
        "codebertscore_s_f3-62": 0.7973142266273499,
        "codebertscore_s_f1-57": 0.802097737789154,
        "codebertscore_s_f3-57": 0.7956616282463074,
        "codebertscore_s_f1-35": 0.7366911768913269,
        "codebertscore_s_f3-35": 0.7439026832580566,
        "codebertscore_s_f1-189": 0.7371433973312378,
        "codebertscore_s_f3-189": 0.742280125617981,
        "codebertscore_s_f1-26": 0.7419624924659729,
        "codebertscore_s_f3-26": 0.7294512391090393,
        "codebertscore_s_f1-174": 0.808929979801178,
        "codebertscore_s_f3-174": 0.8047677278518677,
        "codebertscore_s_f1-140": 0.7103153467178345,
        "codebertscore_s_f3-140": 0.7140618562698364,
        "codebertscore_s_f1-22": 0.7073892951011658,
        "codebertscore_s_f3-22": 0.7015580534934998,
        "codebertscore_s_f1-152": 0.8234357833862305,
        "codebertscore_s_f3-152": 0.794888973236084,
        "codebertscore_s_f1-109": 0.8032081127166748,
        "codebertscore_s_f3-109": 0.7916668057441711,
        "codebertscore_s_f1-8": 0.5883496999740601,
        "codebertscore_s_f3-8": 0.5545786023139954,
        "codebertscore_s_f1-7": 0.7517645359039307,
        "codebertscore_s_f3-7": 0.7421771287918091,
        "codebertscore_s_f1-23": 0.7850428223609924,
        "codebertscore_s_f3-23": 0.7850103378295898,
        "codebertscore_s_f1-55": 0.7123136520385742,
        "codebertscore_s_f3-55": 0.7312605977058411,
        "codebertscore_s_f1-59": 0.7097199559211731,
        "codebertscore_s_f3-59": 0.7034927010536194,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 2,
        "raw_gpt35_nsnr-28": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 2,
        "raw_gpt35_nsnr-152": "2",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "3 - The code snippet correctly sorts the array of non-negative integers according to the number of ones in their binary representation in ascending order. However, it does not handle negative numbers as required by the problem statement.",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 0,
        "raw_gpt35_nswr-28": "Score: 0",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 0,
        "raw_gpt35_nswr-152": "0",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long> get_positive(std::vector<long> l) {\n",
        "snippet": [
            "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n"
        ],
        "simplified": "Return only positive numbers in the list.",
        "task_id": "30",
        "186": "// start writing your code here\n    std::vector<long> result;\n    for(auto elem : l){\n        if(elem > 0){\n            result.push_back(elem);\n        }\n    }\n    return result;",
        "grade-186": {
            "execution": 1
        },
        "28": "std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result;\n  for (long n : l) {\n    if (n > 0) {\n      result.push_back(n);\n    }\n  }\n  return result;",
        "grade-6": {
            "execution": 1
        },
        "76": "std::vector<long> new_l;\n  for (auto &x : l) {\n    if (x > 0) {\n      new_l.push_back(x);\n    }\n  }\n  return new_l;",
        "grade-76": {
            "execution": 1
        },
        "65": "std::vector<long> l1;\n\tfor (long i : l) {\n\t\tif (i > 0) {\n\t\t\tl1.push_back(i);\n\t\t}\n\t}\n\treturn l1;",
        "grade-65": {
            "execution": 1
        },
        "59": "std::vector<long> newList;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      newList.push_back(l[i]);\n    }\n  }\n  return newList;",
        "grade-59": {
            "execution": 1
        },
        "35": "std::vector<long> result;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n  }\n  return result;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<long> lp;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      lp.push_back(l[i]);\n    }\n  }\n  return lp;",
        "grade-26": {
            "execution": 1
        },
        "199": "// Your solution goes here.\n    std::vector<long> result;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
        "grade-199": {
            "execution": 1
        },
        "157": "std::vector<long> p;\n    for(auto e: l) {\n        if(e > 0) {\n            p.push_back(e);\n        }\n    }\n    return p;",
        "grade-157": {
            "execution": 1
        },
        "22": "// Write your code here.\n  std::vector<long> positive;\n  for(long i : l){\n    if(i>0){\n      positive.push_back(i);\n    }\n  }\n  return positive;",
        "grade-22": {
            "execution": 1
        },
        "171": "std::vector<long> out;\n    for (long x : l) {\n        if (x > 0) {\n            out.push_back(x);\n        }\n    }\n    return out;",
        "grade-171": {
            "execution": 1
        },
        "118": "std::vector<long> res;\n    for (auto i: l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n    }\n    return res;",
        "grade-118": {
            "execution": 0
        },
        "8": "std::vector<long> result;\n    for (auto n : l) {\n        if (n > 0) {\n            result.push_back(n);\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> r;\n    for (auto x : l)\n        if (x > 0)\n            r.push_back(x);\n    return r;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> v;\n    for(auto x: l)\n        if(x > 0)\n            v.push_back(x);\n    return v;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<long>::iterator it;\n  std::vector<long> new_list;\n  for (it = l.begin(); it != l.end(); it++) {\n    if (*it > 0) {\n      new_list.push_back(*it);\n    }\n  }\n  return new_list;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::vector<long> out;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            out.push_back(l[i]);\n        }\n    }\n    return out;",
        "grade-61": {
            "execution": 1
        },
        "145": "std::vector<long> l2;\n    for(long i : l) {\n        if(i > 0) {\n            l2.push_back(i);\n        }\n    }\n    return l2;",
        "grade-145": {
            "execution": 1
        },
        "175": "std::vector<long> new_l;\n    int i = 0;\n    for (auto num : l) {\n        if (num > 0) {\n            new_l.push_back(num);\n        }\n    }\n    return new_l;",
        "grade-175": {
            "execution": 1
        },
        "bleu-186": 0.08625125080672545,
        "bleu-28": 0.6227931882839202,
        "bleu-6": 0.08239633395318469,
        "bleu-76": 0.0831982775892111,
        "bleu-65": 0.08496093185452298,
        "bleu-59": 0.6388840559780095,
        "bleu-35": 0.6983218845196889,
        "bleu-26": 0.6227931882839202,
        "bleu-199": 0.595918146323469,
        "bleu-157": 0.08239633395318469,
        "bleu-22": 0.0897789214863665,
        "bleu-171": 0.12487369492039038,
        "bleu-118": 0.07825291108182181,
        "bleu-8": 0.08239633395318469,
        "bleu-7": 0.08774463920557032,
        "bleu-23": 0.08774463920557032,
        "bleu-57": 0.09265803636762657,
        "bleu-61": 0.66772776364257,
        "bleu-145": 0.08496093185452298,
        "bleu-175": 0.16434947910559086,
        "codebleu-186": 0.44001043296817943,
        "codebleu-28": 0.7725518234477323,
        "codebleu-6": 0.40028339286913045,
        "codebleu-76": 0.40230469453057915,
        "codebleu-65": 0.4072292128615348,
        "codebleu-59": 0.7818431048303915,
        "codebleu-35": 0.7834415568888689,
        "codebleu-26": 0.7725518234477323,
        "codebleu-199": 0.7723170822435612,
        "codebleu-157": 0.40028339286913045,
        "codebleu-22": 0.4599821149116923,
        "codebleu-171": 0.427165796130276,
        "codebleu-118": 0.395524268169231,
        "codebleu-8": 0.40028339286913045,
        "codebleu-7": 0.3613642548312065,
        "codebleu-23": 0.3613642548312065,
        "codebleu-57": 0.5697518443997317,
        "codebleu-61": 0.7869300478264403,
        "codebleu-145": 0.4072292128615348,
        "codebleu-175": 0.5070482103670322,
        "chrf-186": 0.31094628252108986,
        "chrf-28": 0.604130423085708,
        "chrf-6": 0.3192370323001581,
        "chrf-76": 0.3047547002175907,
        "chrf-65": 0.31021798321643146,
        "chrf-59": 0.6552660639049409,
        "chrf-35": 0.666536655807866,
        "chrf-26": 0.5978811917353402,
        "chrf-199": 0.6409636284517177,
        "chrf-157": 0.30845523639335176,
        "chrf-22": 0.3132471996919575,
        "chrf-171": 0.3982902058195541,
        "chrf-118": 0.3111267334749008,
        "chrf-8": 0.32313111482437096,
        "chrf-7": 0.3266808937914506,
        "chrf-23": 0.3266808937914506,
        "chrf-57": 0.3417198297407073,
        "chrf-61": 0.6890854811775046,
        "chrf-145": 0.31021798321643146,
        "chrf-175": 0.3525785708401483,
        "rougel-186": 0.425531914893617,
        "rougel-28": 0.7999999999999999,
        "rougel-6": 0.4597701149425288,
        "rougel-76": 0.4545454545454546,
        "rougel-65": 0.5287356321839081,
        "rougel-59": 0.7962962962962964,
        "rougel-35": 0.8349514563106797,
        "rougel-26": 0.7999999999999999,
        "rougel-199": 0.7678571428571429,
        "rougel-157": 0.4597701149425288,
        "rougel-22": 0.48936170212765956,
        "rougel-171": 0.5287356321839081,
        "rougel-118": 0.5227272727272727,
        "rougel-8": 0.4597701149425288,
        "rougel-7": 0.4819277108433735,
        "rougel-23": 0.4819277108433735,
        "rougel-57": 0.47863247863247865,
        "rougel-61": 0.8571428571428571,
        "rougel-145": 0.5287356321839081,
        "rougel-175": 0.5,
        "meteor-186": 0.36566399807198435,
        "meteor-28": 0.8707867061343345,
        "meteor-6": 0.3708350041053255,
        "meteor-76": 0.3700873528873712,
        "meteor-65": 0.40571394417548257,
        "meteor-59": 0.8868935097668558,
        "meteor-35": 0.8771037181996086,
        "meteor-26": 0.8707867061343345,
        "meteor-199": 0.8800712519994183,
        "meteor-157": 0.3708350041053255,
        "meteor-22": 0.4113176921941862,
        "meteor-171": 0.46404877174107934,
        "meteor-118": 0.3971138103455905,
        "meteor-8": 0.3708350041053255,
        "meteor-7": 0.3633401221995927,
        "meteor-23": 0.3633401221995927,
        "meteor-57": 0.547380128521997,
        "meteor-61": 0.9314422243881307,
        "meteor-145": 0.40571394417548257,
        "meteor-175": 0.44187499999999996,
        "ruby-186": 0.21568627450980393,
        "ruby-28": 0.7037037037037037,
        "ruby-6": 0.27450980392156865,
        "ruby-76": 0.27450980392156865,
        "ruby-65": 0.33333333333333337,
        "ruby-59": 0.7017543859649122,
        "ruby-35": 0.75,
        "ruby-26": 0.7037037037037037,
        "ruby-199": 0.639344262295082,
        "ruby-157": 0.27450980392156865,
        "ruby-22": 0.27450980392156865,
        "ruby-171": 0.33333333333333337,
        "ruby-118": 0.3137254901960784,
        "ruby-8": 0.27450980392156865,
        "ruby-7": 0.33333333333333337,
        "ruby-23": 0.33333333333333337,
        "ruby-57": 0.33333333333333337,
        "ruby-61": 0.7592592592592593,
        "ruby-145": 0.33333333333333337,
        "ruby-175": 0.3137254901960784,
        "codebertscore_f1-186": 0.7908046245574951,
        "codebertscore_f3-186": 0.8187083005905151,
        "codebertscore_f1-28": 0.9381394982337952,
        "codebertscore_f3-28": 0.9404763579368591,
        "codebertscore_f1-6": 0.8630251288414001,
        "codebertscore_f3-6": 0.8499035239219666,
        "codebertscore_f1-76": 0.8309693336486816,
        "codebertscore_f3-76": 0.8247385025024414,
        "codebertscore_f1-65": 0.8671532273292542,
        "codebertscore_f3-65": 0.8609665632247925,
        "codebertscore_f1-59": 0.926334798336029,
        "codebertscore_f3-59": 0.9358900785446167,
        "codebertscore_f1-35": 0.9495806097984314,
        "codebertscore_f3-35": 0.9520363211631775,
        "codebertscore_f1-26": 0.9203488230705261,
        "codebertscore_f3-26": 0.9272847175598145,
        "codebertscore_f1-199": 0.8989333510398865,
        "codebertscore_f3-199": 0.9295622706413269,
        "codebertscore_f1-157": 0.8396616578102112,
        "codebertscore_f3-157": 0.8282255530357361,
        "codebertscore_f1-22": 0.8271343111991882,
        "codebertscore_f3-22": 0.8542957305908203,
        "codebertscore_f1-171": 0.8738028407096863,
        "codebertscore_f3-171": 0.8579883575439453,
        "codebertscore_f1-118": 0.8739420771598816,
        "codebertscore_f3-118": 0.8626914620399475,
        "codebertscore_f1-8": 0.8494593501091003,
        "codebertscore_f3-8": 0.836173415184021,
        "codebertscore_f1-7": 0.8493216633796692,
        "codebertscore_f3-7": 0.8367345929145813,
        "codebertscore_f1-23": 0.8466801643371582,
        "codebertscore_f3-23": 0.8347117900848389,
        "codebertscore_f1-57": 0.825056791305542,
        "codebertscore_f3-57": 0.8437021374702454,
        "codebertscore_f1-61": 0.9510359764099121,
        "codebertscore_f3-61": 0.9536343812942505,
        "codebertscore_f1-145": 0.8598215579986572,
        "codebertscore_f3-145": 0.8533801436424255,
        "codebertscore_f1-175": 0.8413606882095337,
        "codebertscore_f3-175": 0.8388809561729431,
        "codebertscore_s_f1-186": 0.7849521636962891,
        "codebertscore_s_f3-186": 0.8125360608100891,
        "codebertscore_s_f1-28": 0.931898832321167,
        "codebertscore_s_f3-28": 0.9359744191169739,
        "codebertscore_s_f1-6": 0.8529778718948364,
        "codebertscore_s_f3-6": 0.8404156565666199,
        "codebertscore_s_f1-76": 0.8247576355934143,
        "codebertscore_s_f3-76": 0.8181871175765991,
        "codebertscore_s_f1-65": 0.8594412207603455,
        "codebertscore_s_f3-65": 0.8550810813903809,
        "codebertscore_s_f1-59": 0.9211093783378601,
        "codebertscore_s_f3-59": 0.9330186247825623,
        "codebertscore_s_f1-35": 0.9467523694038391,
        "codebertscore_s_f3-35": 0.9508726000785828,
        "codebertscore_s_f1-26": 0.9165189862251282,
        "codebertscore_s_f3-26": 0.9250762462615967,
        "codebertscore_s_f1-199": 0.8981658816337585,
        "codebertscore_s_f3-199": 0.9307324290275574,
        "codebertscore_s_f1-157": 0.8344089984893799,
        "codebertscore_s_f3-157": 0.8235210180282593,
        "codebertscore_s_f1-22": 0.8281779289245605,
        "codebertscore_s_f3-22": 0.8539198637008667,
        "codebertscore_s_f1-171": 0.8709778189659119,
        "codebertscore_s_f3-171": 0.8553810715675354,
        "codebertscore_s_f1-118": 0.8713279366493225,
        "codebertscore_s_f3-118": 0.8618602752685547,
        "codebertscore_s_f1-8": 0.8450440764427185,
        "codebertscore_s_f3-8": 0.8322099447250366,
        "codebertscore_s_f1-7": 0.8412063121795654,
        "codebertscore_s_f3-7": 0.8289117813110352,
        "codebertscore_s_f1-23": 0.836890459060669,
        "codebertscore_s_f3-23": 0.8249933123588562,
        "codebertscore_s_f1-57": 0.8194238543510437,
        "codebertscore_s_f3-57": 0.8373743295669556,
        "codebertscore_s_f1-61": 0.9474281072616577,
        "codebertscore_s_f3-61": 0.951667070388794,
        "codebertscore_s_f1-145": 0.8537488579750061,
        "codebertscore_s_f3-145": 0.8482102751731873,
        "codebertscore_s_f1-175": 0.8383060693740845,
        "codebertscore_s_f3-175": 0.837218701839447,
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-118": 4,
        "raw_gpt35_nsnr-118": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-145": 4,
        "raw_gpt35_nsnr-145": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-157": 4,
        "raw_gpt35_nswr-157": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4",
        "gpt35_nswr-118": 4,
        "raw_gpt35_nswr-118": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-145": 4,
        "raw_gpt35_nswr-145": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nstd::string anti_shuffle(std::string s) {\n",
        "snippet": [
            "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n"
        ],
        "simplified": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
        "task_id": "86",
        "165": "int n = s.length();\n    int i=0;\n    std::string ans=\"\";\n    while(i<n){\n        int j=i;\n        std::string temp=\"\";\n        while(s[j]!=' ' && j<n){\n            temp = temp + s[j];\n            j++;\n        }\n        std::sort(temp.begin(),temp.end());\n        ans = ans + temp;\n        i = j;\n        while(s[i]==' ' && i<n){\n            ans = ans + ' ';\n            i++;\n        }\n    }\n    return ans;",
        "grade-165": {
            "execution": 1
        },
        "28": "std::stringstream ss(s);\n    std::string result = \"\";\n    std::string temp;\n    std::getline(ss,temp,' ');\n    while(temp != \"\"){\n        std::vector<char> x;\n        std::copy(temp.begin(),temp.end(),std::back_inserter(x));\n        std::sort(x.begin(),x.end());\n        for(char c : x){\n            result += c;\n        }\n        result += \" \";\n        std::getline(ss,temp,' ');\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string new_str;\n  for (int i = 0; i < s.length(); i++) {\n    std::string s2;\n    if (isalpha(s[i])) {\n      while (isalpha(s[i])) {\n        s2 += s[i];\n        i++;\n      }\n      i--;\n      std::sort(s2.begin(), s2.end());\n      new_str += s2;\n    } else {\n      new_str += s[i];\n    }\n  }\n  return new_str;",
        "grade-6": {
            "execution": 0
        },
        "193": "int n = s.length();\n    std::string word;\n    std::string ans = \"\";\n    for(int i = 0; i < n; i++) {\n        if(s[i] == ' ') {\n            ans += word;\n            ans += ' ';\n            word = \"\";\n        }\n        else {\n            word += s[i];\n        }\n    }\n    ans += word;\n    // std::cout << \"WORD: \" << word << std::endl;\n    for(int i = 0; i < ans.length(); i++) {\n        if(ans[i] == ' ') {\n            continue;\n        }\n        else {\n            // std::cout << ans[i] << std::endl;\n            int pos = i;\n            for(int j = i+1; j < ans.length(); j++) {\n                if(ans[j] == ' ') {\n                    continue;\n                }\n                if(ans[j] < ans[pos]) {\n                    pos = j;\n                }\n            }\n            std::swap(ans[i], ans[pos]);\n        }\n    }\n    return ans;",
        "grade-193": {
            "execution": 0
        },
        "71": "std::vector<std::string> words;\n    std::string current_word;\n    for (char c : s) {\n        if (c == ' ') {\n            words.push_back(current_word);\n            current_word = \"\";\n        } else {\n            current_word += c;\n        }\n    }\n    words.push_back(current_word);\n    std::string output;\n    for (int i = 0; i < words.size(); i++) {\n        std::sort(words[i].begin(), words[i].end());\n        output += words[i];\n        if (i < words.size() - 1) {\n            output += \" \";\n        }\n    }\n    return output;",
        "grade-71": {
            "execution": 1
        },
        "62": "// your code here",
        "grade-62": {
            "execution": 0
        },
        "57": "std::stringstream strStream(s);\n    std::string word, ans;\n    while (std::getline(strStream, word, ' ')) {\n        std::sort(word.begin(), word.end());\n        ans += word + \" \";\n    }\n    return ans;",
        "grade-57": {
            "execution": 0
        },
        "35": "// Write your code here\n  int n = s.length();\n  std::string temp;\n  std::string result;\n  int j = 0;\n  for(int i = 0; i < n; i++){\n    if(s[i] == ' '){\n      std::sort(temp.begin(), temp.end());\n      for(int i = 0; i < temp.length(); i++){\n        result += temp[i];\n      }\n      temp = \"\";\n      result += s[i];\n    }\n    else\n      temp += s[i];\n  }\n  std::sort(temp.begin(), temp.end());\n  for(int i = 0; i < temp.length(); i++){\n    result += temp[i];\n  }\n  return result;",
        "grade-35": {
            "execution": 1
        },
        "192": "std::vector<std::string> v;\n  std::string result = \"\";\n  std::string tmp = \"\";\n  for (size_t i = 0; i < s.size(); i++) {\n    if (s[i] == ' ') {\n      v.push_back(tmp);\n      tmp = \"\";\n    } else {\n      tmp += s[i];\n    }\n  }\n  v.push_back(tmp);\n  for (size_t i = 0; i < v.size(); i++) {\n    std::string tmp = v[i];\n    std::sort(tmp.begin(), tmp.end());\n    result += tmp;\n    if (i != v.size() - 1) {\n      result += \" \";\n    }\n  }\n  return result;",
        "grade-192": {
            "execution": 1
        },
        "26": "std::string result = \"\";\n    std::string temp = \"\";\n    std::string space = \" \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            std::sort(temp.begin(), temp.end());\n            result += temp;\n            result += space;\n            temp = \"\";\n        } else {\n            temp += s[i];\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    result += temp;\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "177": "std::string l;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tl += ' ';\n\t\t}\n\t\telse {\n\t\t\tint j = i;\n\t\t\tstd::string word;\n\t\t\twhile (s[j] != ' ' && j < s.length()) {\n\t\t\t\tword += s[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tstd::sort(word.begin(), word.end());\n\t\t\tl += word;\n\t\t\ti = j - 1;\n\t\t}\n\t}\n\treturn l;",
        "grade-177": {
            "execution": 1
        },
        "140": "// input: string\n  // output: string where characters of each word are in ascending order.\n  // split the string into tokens\n  std::stringstream ss(s);\n  std::string temp;\n  std::vector<std::string> v;\n  while(ss >> temp) {\n    v.push_back(temp);\n  }\n  for(int i = 0; i < v.size(); i++) {\n    std::string w = v[i];\n    std::sort(w.begin(), w.end());\n    v[i] = w;\n  }\n  std::string ans = \"\";\n  for(int i = 0; i < v.size(); i++) {\n    ans += v[i];\n    if(i != v.size() - 1) {\n      ans += \" \";\n    }\n  }\n  return ans;",
        "grade-140": {
            "execution": 1
        },
        "22": "std::string str;\n    std::string temp;\n    int i=0;\n    while(i<s.length()){\n      while(s[i]!=' ' && i<s.length()){\n        temp.push_back(s[i]);\n        i++;\n      }\n      sort(temp.begin(),temp.end());\n      str+=temp;\n      temp.clear();\n      if(i<s.length()){\n        str.push_back(' ');\n        i++;\n      }\n    }\n    return str;",
        "grade-22": {
            "execution": 1
        },
        "152": "std::vector<std::string> strVec;\n    std::string temp = \"\";\n    // Put words into vector\n    for (auto c : s) {\n        if (c == ' ') {\n            strVec.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += c;\n        }\n    }\n    // add last word\n    strVec.push_back(temp);\n    // Go through each word and sort the word, then put back into vec\n    for (int i = 0; i < strVec.size(); i++) {\n        std::string curr = strVec[i];\n        // sort current string, then put back into vector\n        std::sort(curr.begin(), curr.end());\n        strVec[i] = curr;\n    }\n    // Go through vector and put into string\n    temp = \"\";\n    for (int i = 0; i < strVec.size(); i++) {\n        temp += strVec[i];\n        if (i != strVec.size() - 1) {\n            temp += \" \";\n        }\n    }\n    return temp;",
        "grade-152": {
            "execution": 1
        },
        "109": "int k = 0;\n    int n = s.length();\n    int j = 0;\n    std::string ans = \"\";\n    for(int i = 0; i < n; i++) {\n        if(s[i] == ' ') {\n            int count[1000] = {0};\n            for(j = k; j < i; j++) {\n                count[s[j]]++;\n            }\n            for(j = k; j < i; j++) {\n                if(count[s[j]] > 0) {\n                    ans += s[j];\n                    count[s[j]] = 0;\n                }\n            }\n            ans += \" \";\n            k = i + 1;\n        }\n    }\n    int count[1000] = {0};\n    for(j = k; j < n; j++) {\n        count[s[j]]++;\n    }\n    for(j = k; j < n; j++) {\n        if(count[s[j]] > 0) {\n            ans += s[j];\n            count[s[j]] = 0;\n        }\n    }\n    return ans;",
        "grade-109": {
            "execution": 0
        },
        "8": "std::string result = \"\";\n\tstd::string word = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tresult += word;\n\t\t\tresult += ' ';\n\t\t\tword = \"\";\n\t\t}\n\t\telse {\n\t\t\tword += s[i];\n\t\t}\n\t}\n\tstd::sort(word.begin(), word.end());\n\tresult += word;\n\treturn result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string ans = \"\";\n  std::string wrd = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ') {\n      ans += wrd + \" \";\n      wrd = \"\";\n    } else {\n      wrd += s[i];\n    }\n  }\n  ans += wrd;\n  for (int i = 0; i < ans.length(); i++) {\n    if (ans[i] == ' ') {\n      int j = i + 1;\n      while (ans[j] != ' ' && j < ans.length()) {\n        j++;\n      }\n      sort(ans.begin() + i + 1, ans.begin() + j);\n      i = j;\n    }\n  }\n  return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "int i = 0;\n    std::string res = \"\";\n    while(i < s.length()) {\n        if(s[i] == ' ') {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(i != s.length() - 1 && s[i + 1] == ' ') {\n            res += s[i];\n            i++;\n            continue;\n        }\n        int start = i;\n        while(i < s.length() && s[i] != ' ') {\n            i++;\n        }\n        std::string temp = s.substr(start, i - start);\n        std::sort(temp.begin(), temp.end());\n        res += temp;\n    }\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string result;\n    std::stringstream ss(s);\n    std::string tmp;\n    while (ss >> tmp) {\n        std::sort(tmp.begin(), tmp.end());\n        result.append(tmp + \" \");\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string output;\n    std::string tempWord;\n    std::vector<char> char_vec;\n    int stringIndex = 0;\n    while (stringIndex < s.length()) {\n        if (s[stringIndex] == ' ') {\n            output += tempWord;\n            output += ' ';\n            stringIndex++;\n            tempWord = \"\";\n        } else {\n            tempWord += s[stringIndex];\n            stringIndex++;\n        }\n    }\n    output += tempWord;\n    return output;",
        "grade-59": {
            "execution": 0
        },
        "bleu-165": 0.29597457057982707,
        "bleu-28": 0.16576351048466717,
        "bleu-6": 0.37294337713473197,
        "bleu-193": 0.2041020717456167,
        "bleu-71": 0.28840360416065414,
        "bleu-62": 0.0,
        "bleu-57": 0.12226979858992752,
        "bleu-35": 0.2730649262834438,
        "bleu-192": 0.29932054310990225,
        "bleu-26": 0.4350396058433376,
        "bleu-177": 0.4081743938431024,
        "bleu-140": 0.2095778586222009,
        "bleu-22": 0.3115203337412841,
        "bleu-152": 0.20123690097733754,
        "bleu-109": 0.167654573285317,
        "bleu-8": 0.518992344817206,
        "bleu-7": 0.321990009130043,
        "bleu-23": 0.2836648810827029,
        "bleu-55": 0.09951115309805876,
        "bleu-59": 0.24749384766929058,
        "codebleu-165": 0.6166870798612276,
        "codebleu-28": 0.5043142451444835,
        "codebleu-6": 0.5553993664722802,
        "codebleu-193": 0.666314175877475,
        "codebleu-71": 0.5749237137652677,
        "codebleu-62": 0.012578616352201257,
        "codebleu-57": 0.29102833782309934,
        "codebleu-35": 0.6338259892796426,
        "codebleu-192": 0.6602124607239203,
        "codebleu-26": 0.6367237661008075,
        "codebleu-177": 0.6193838958941864,
        "codebleu-140": 0.5893655164151121,
        "codebleu-22": 0.5706880533079975,
        "codebleu-152": 0.6528870264624547,
        "codebleu-109": 0.5763108888840103,
        "codebleu-8": 0.6004710315611448,
        "codebleu-7": 0.6774068839872112,
        "codebleu-23": 0.6561073595535339,
        "codebleu-55": 0.29781560084072134,
        "codebleu-59": 0.4464306463695583,
        "chrf-165": 0.32147694006082067,
        "chrf-28": 0.2615941917781866,
        "chrf-6": 0.34412778015715795,
        "chrf-193": 0.34438334208079086,
        "chrf-71": 0.4599834328925024,
        "chrf-62": 0.013873816568732867,
        "chrf-57": 0.20539711761321336,
        "chrf-35": 0.3979697679136302,
        "chrf-192": 0.3611068369626727,
        "chrf-26": 0.4295764882687876,
        "chrf-177": 0.40287330958569845,
        "chrf-140": 0.3057869112444136,
        "chrf-22": 0.32666334197209695,
        "chrf-152": 0.3735298311174319,
        "chrf-109": 0.2850772276845582,
        "chrf-8": 0.437760684179365,
        "chrf-7": 0.40180351996400515,
        "chrf-23": 0.3642246045636217,
        "chrf-55": 0.2045186738837462,
        "chrf-59": 0.31148477720824735,
        "rougel-165": 0.40163934426229503,
        "rougel-28": 0.3770491803278689,
        "rougel-6": 0.5045871559633027,
        "rougel-193": 0.3615819209039548,
        "rougel-71": 0.4488188976377953,
        "rougel-62": 0.0,
        "rougel-57": 0.3583815028901734,
        "rougel-35": 0.4705882352941176,
        "rougel-192": 0.47686832740213514,
        "rougel-26": 0.6359832635983262,
        "rougel-177": 0.4615384615384615,
        "rougel-140": 0.36363636363636365,
        "rougel-22": 0.48672566371681414,
        "rougel-152": 0.3583815028901734,
        "rougel-109": 0.3553008595988539,
        "rougel-8": 0.5633802816901409,
        "rougel-7": 0.4507042253521127,
        "rougel-23": 0.3941605839416058,
        "rougel-55": 0.3668639053254438,
        "rougel-59": 0.44131455399061037,
        "meteor-165": 0.48487685959644483,
        "meteor-28": 0.43147338426500453,
        "meteor-6": 0.4158854876152335,
        "meteor-193": 0.4945101671084696,
        "meteor-71": 0.5001182749597125,
        "meteor-62": 0.0,
        "meteor-57": 0.21837026371937368,
        "meteor-35": 0.5548458476168437,
        "meteor-192": 0.5619370207482716,
        "meteor-26": 0.5783448895705551,
        "meteor-177": 0.5139672368643876,
        "meteor-140": 0.4290379702822557,
        "meteor-22": 0.3869471353731788,
        "meteor-152": 0.4793530374548643,
        "meteor-109": 0.39015205100562445,
        "meteor-8": 0.5577660798304944,
        "meteor-7": 0.5479330666322537,
        "meteor-23": 0.5242269314006013,
        "meteor-55": 0.23112029116581595,
        "meteor-59": 0.37617015380504926,
        "ruby-165": 0.23529411764705888,
        "ruby-28": 0.24264705882352944,
        "ruby-6": 0.23636363636363633,
        "ruby-193": 0.2479674796747967,
        "ruby-71": 0.1986301369863014,
        "ruby-62": 0.0,
        "ruby-57": 0.2407407407407407,
        "ruby-35": 0.3370165745856354,
        "ruby-192": 0.3179190751445087,
        "ruby-26": 0.48091603053435117,
        "ruby-177": 0.25396825396825395,
        "ruby-140": 0.25396825396825395,
        "ruby-22": 0.27118644067796616,
        "ruby-152": 0.23949579831932777,
        "ruby-109": 0.2365145228215768,
        "ruby-8": 0.37037037037037035,
        "ruby-7": 0.32386363636363635,
        "ruby-23": 0.24096385542168675,
        "ruby-55": 0.2592592592592593,
        "ruby-59": 0.2314814814814815,
        "codebertscore_f1-165": 0.7997077703475952,
        "codebertscore_f3-165": 0.8055391311645508,
        "codebertscore_f1-28": 0.7314584255218506,
        "codebertscore_f3-28": 0.7428443431854248,
        "codebertscore_f1-6": 0.8222993612289429,
        "codebertscore_f3-6": 0.8280022740364075,
        "codebertscore_f1-193": 0.7580004334449768,
        "codebertscore_f3-193": 0.7941391468048096,
        "codebertscore_f1-71": 0.7822163701057434,
        "codebertscore_f3-71": 0.8069069385528564,
        "codebertscore_f1-62": 0.532488226890564,
        "codebertscore_f3-62": 0.5063521862030029,
        "codebertscore_f1-57": 0.7455396056175232,
        "codebertscore_f3-57": 0.7416931390762329,
        "codebertscore_f1-35": 0.8220328688621521,
        "codebertscore_f3-35": 0.8374162912368774,
        "codebertscore_f1-192": 0.7971464991569519,
        "codebertscore_f3-192": 0.8156360983848572,
        "codebertscore_f1-26": 0.8413084745407104,
        "codebertscore_f3-26": 0.8492463827133179,
        "codebertscore_f1-177": 0.8235295414924622,
        "codebertscore_f3-177": 0.8257346153259277,
        "codebertscore_f1-140": 0.7558485865592957,
        "codebertscore_f3-140": 0.7797937393188477,
        "codebertscore_f1-22": 0.8315469622612,
        "codebertscore_f3-22": 0.8346624970436096,
        "codebertscore_f1-152": 0.7099742889404297,
        "codebertscore_f3-152": 0.766228973865509,
        "codebertscore_f1-109": 0.7457034587860107,
        "codebertscore_f3-109": 0.7645086050033569,
        "codebertscore_f1-8": 0.8422594666481018,
        "codebertscore_f3-8": 0.840043842792511,
        "codebertscore_f1-7": 0.8070354461669922,
        "codebertscore_f3-7": 0.8242960572242737,
        "codebertscore_f1-23": 0.7730176448822021,
        "codebertscore_f3-23": 0.7902224659919739,
        "codebertscore_f1-55": 0.7621895670890808,
        "codebertscore_f3-55": 0.7485616207122803,
        "codebertscore_f1-59": 0.7715660929679871,
        "codebertscore_f3-59": 0.7813276052474976,
        "codebertscore_s_f1-165": 0.8484925031661987,
        "codebertscore_s_f3-165": 0.8523708581924438,
        "codebertscore_s_f1-28": 0.8002299666404724,
        "codebertscore_s_f3-28": 0.8050388693809509,
        "codebertscore_s_f1-6": 0.8604227900505066,
        "codebertscore_s_f3-6": 0.8643963932991028,
        "codebertscore_s_f1-193": 0.8236938714981079,
        "codebertscore_s_f3-193": 0.84699946641922,
        "codebertscore_s_f1-71": 0.8448148965835571,
        "codebertscore_s_f3-71": 0.867146372795105,
        "codebertscore_s_f1-62": 0.75714111328125,
        "codebertscore_s_f3-62": 0.6918313503265381,
        "codebertscore_s_f1-57": 0.8185738921165466,
        "codebertscore_s_f3-57": 0.8028080463409424,
        "codebertscore_s_f1-35": 0.8621667623519897,
        "codebertscore_s_f3-35": 0.8770920634269714,
        "codebertscore_s_f1-192": 0.8484784960746765,
        "codebertscore_s_f3-192": 0.8639178276062012,
        "codebertscore_s_f1-26": 0.8836884498596191,
        "codebertscore_s_f3-26": 0.886846125125885,
        "codebertscore_s_f1-177": 0.8658469319343567,
        "codebertscore_s_f3-177": 0.8664658069610596,
        "codebertscore_s_f1-140": 0.8079684376716614,
        "codebertscore_s_f3-140": 0.8307787775993347,
        "codebertscore_s_f1-22": 0.8685925006866455,
        "codebertscore_s_f3-22": 0.8694730401039124,
        "codebertscore_s_f1-152": 0.7937437295913696,
        "codebertscore_s_f3-152": 0.8461598753929138,
        "codebertscore_s_f1-109": 0.8090399503707886,
        "codebertscore_s_f3-109": 0.8293447494506836,
        "codebertscore_s_f1-8": 0.8835974335670471,
        "codebertscore_s_f3-8": 0.877963125705719,
        "codebertscore_s_f1-7": 0.8447540402412415,
        "codebertscore_s_f3-7": 0.8648533821105957,
        "codebertscore_s_f1-23": 0.8449109792709351,
        "codebertscore_s_f3-23": 0.8540992736816406,
        "codebertscore_s_f1-55": 0.8344025611877441,
        "codebertscore_s_f3-55": 0.8091541528701782,
        "codebertscore_s_f1-59": 0.828532338142395,
        "codebertscore_s_f3-59": 0.836397647857666,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-193": 3,
        "raw_gpt35_nsnr-193": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n",
        "snippet": [
            "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n"
        ],
        "simplified": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
        "task_id": "152",
        "187": "int count = 0;\n    for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n            game[i] = 0;\n        }\n        else if(game[i] > guess[i]){\n            count = game[i] - guess[i];\n            game[i] = count;\n        }\n        else if(game[i] < guess[i]){\n            count = guess[i] - game[i];\n            game[i] = count;\n        }\n    }\n    return game;",
        "grade-187": {
            "execution": 1
        },
        "28": "int size = game.size();\n    std::vector<long> result;\n    for(int i = 0; i < size; i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result(game.size());\n    for (size_t i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "75": "for (int i = 0; i < game.size(); i++) {\n\t\tguess[i] = abs(game[i] - guess[i]);\n\t}\n\treturn guess;",
        "grade-75": {
            "execution": 1
        },
        "64": "std::vector<long> v;\n    for(int i = 0; i < game.size(); i++){\n        long diff = game[i] - guess[i];\n        if(diff < 0) diff *= -1;\n        v.push_back(diff);\n    }\n    return v;",
        "grade-64": {
            "execution": 1
        },
        "59": "std::vector<long> out;\n    if(game.size()==guess.size()){\n        for(long i=0;i<game.size();i++){\n            out.push_back(std::abs(game[i]-guess[i]));\n        }\n    }\n    return out;",
        "grade-59": {
            "execution": 1
        },
        "35": "std::vector<long> result;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn result;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<long> guess_results;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tguess_results.push_back(std::abs(game[i] - guess[i]));\n\t}\n\treturn guess_results;",
        "grade-26": {
            "execution": 1
        },
        "154": "int len = game.size();\n  std::vector<long> results;\n  for (size_t i = 0; i < len; i++) {\n    long result = std::abs(game[i] - guess[i]);\n    results.push_back(result);\n  }\n  return results;",
        "grade-154": {
            "execution": 1
        },
        "22": "// if(game.size() != guess.size()) assert(0);\n\t// std::vector<long> ans;\n\t// for(int i = 0; i < game.size(); i++) {\n\t// \tif(game[i] == guess[i]) ans.push_back(0);\n\t// \telse ans.push_back(abs(game[i] - guess[i]));\n\t// }\n\t// return ans;\n\tint i = 0;\n\twhile(i < game.size()) {\n\t\tif(game[i] == guess[i]) {\n\t\t\tgame.erase(game.begin() + i);\n\t\t\tguess.erase(guess.begin() + i);\n\t\t}\n\t\telse i++;\n\t}\n\tfor(int i = 0; i < game.size(); i++) {\n\t\tgame[i] = abs(game[i] - guess[i]);\n\t}\n\treturn game;",
        "grade-22": {
            "execution": 0
        },
        "168": "std::vector<long> result;\n  for (unsigned int i = 0; i < game.size(); i++) {\n    long difference = abs(game[i] - guess[i]);\n    result.push_back(difference);\n  }\n  return result;",
        "grade-168": {
            "execution": 1
        },
        "120": "std::vector<long> results;\n    for(int i = 0; i < game.size(); i++){\n        results.push_back(std::abs(game[i] - guess[i]));\n    }\n    return results;",
        "grade-120": {
            "execution": 1
        },
        "8": "int min = 0;\n    int max = 0;\n    std::vector<long> vec;\n    for(unsigned int i = 0; i < game.size(); i++){\n        if(guess[i] <= game[i]){\n            min = guess[i];\n            max = game[i];\n        }\n        else if(guess[i] > game[i]){\n            min = game[i];\n            max = guess[i];\n        }\n        vec.push_back(max - min);\n    }\n    return vec;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> result(game.size());\n  for (int i = 0; i < game.size(); i++) {\n    result[i] = abs(game[i] - guess[i]);\n  }\n  return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    result.push_back(std::abs(game[i] - guess[i]));\n  }\n  return result;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<long> difference;\n    for(int i = 0; i < game.size(); i++){\n        difference.push_back(std::abs(game[i] - guess[i]));\n    }\n    return difference;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::vector<long> result;\n    if(game.size() != guess.size()) {\n        return result;\n    }\n    int size = game.size();\n    long diff = 0;\n    for(int i = 0; i < size; i++) {\n        diff = std::abs(game[i] - guess[i]);\n        result.push_back(diff);\n    }\n    return result;",
        "grade-61": {
            "execution": 1
        },
        "144": "int size = game.size();\n  std::vector<long> result;\n  for(int i = 0; i < size; i++){\n    result.push_back(abs(game[i] - guess[i]));\n  }\n  return result;",
        "grade-144": {
            "execution": 1
        },
        "171": "std::vector<long> ret;\n  for(int i = 0; i < game.size(); i++) {\n    long diff = abs(game[i] - guess[i]);\n    ret.push_back(diff);\n  }\n  return ret;",
        "grade-171": {
            "execution": 1
        },
        "158": "for(long i = 0; i < game.size(); i++)\n\t{\n\t\tlong x = guess[i] - game[i];\n\t\tif(x < 0)\n\t\t{\n\t\t\tguess[i] = x * -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tguess[i] = x;\n\t\t}\n\t}\n\treturn guess;",
        "grade-158": {
            "execution": 1
        },
        "bleu-187": 0.25533070818860676,
        "bleu-28": 0.41940950639719177,
        "bleu-6": 0.5210376117549629,
        "bleu-75": 0.6414934367077315,
        "bleu-64": 0.47159448839790813,
        "bleu-59": 0.4842679701176622,
        "bleu-35": 0.44344854015422347,
        "bleu-26": 0.6486521816160521,
        "bleu-154": 0.433399380133188,
        "bleu-22": 0.1676211283471348,
        "bleu-168": 0.55629468450662,
        "bleu-120": 0.6486521816160521,
        "bleu-8": 0.2406987576954205,
        "bleu-7": 0.5702450143017317,
        "bleu-23": 0.6486521816160521,
        "bleu-57": 0.6486521816160521,
        "bleu-61": 0.35010516308198286,
        "bleu-144": 0.6118674615572833,
        "bleu-171": 0.5989931763167742,
        "bleu-158": 0.3540640436796529,
        "codebleu-187": 0.6863144691129387,
        "codebleu-28": 0.7884404852499018,
        "codebleu-6": 0.7571033296369868,
        "codebleu-75": 0.6819487385562876,
        "codebleu-64": 0.7521119322251226,
        "codebleu-59": 0.7753602618743034,
        "codebleu-35": 0.7858655056774831,
        "codebleu-26": 0.7993465368777174,
        "codebleu-154": 0.7683678123697908,
        "codebleu-22": 0.7553611924879517,
        "codebleu-168": 0.7669416007906167,
        "codebleu-120": 0.7993465368777174,
        "codebleu-8": 0.7218840349246238,
        "codebleu-7": 0.7666039294028214,
        "codebleu-23": 0.7993465368777174,
        "codebleu-57": 0.7993465368777174,
        "codebleu-61": 0.7783983808954311,
        "codebleu-144": 0.815075088979754,
        "codebleu-171": 0.7816018713334886,
        "codebleu-158": 0.6537205233818111,
        "chrf-187": 0.465303085856582,
        "chrf-28": 0.6403694553400652,
        "chrf-6": 0.5683275839994846,
        "chrf-75": 0.582545421675121,
        "chrf-64": 0.6275452124675748,
        "chrf-59": 0.6997560253067099,
        "chrf-35": 0.6465408139610134,
        "chrf-26": 0.6791157944483857,
        "chrf-154": 0.5763172142568563,
        "chrf-22": 0.4681549298743077,
        "chrf-168": 0.6560301150643862,
        "chrf-120": 0.7049738504043803,
        "chrf-8": 0.4944030458675765,
        "chrf-7": 0.616860439524407,
        "chrf-23": 0.7291139125923912,
        "chrf-57": 0.6850417090064999,
        "chrf-61": 0.5833169882507835,
        "chrf-144": 0.7060190867295245,
        "chrf-171": 0.7219187410616033,
        "chrf-158": 0.42269294838759014,
        "rougel-187": 0.4337349397590361,
        "rougel-28": 0.59375,
        "rougel-6": 0.7047619047619048,
        "rougel-75": 0.7640449438202246,
        "rougel-64": 0.6607142857142857,
        "rougel-59": 0.7457627118644067,
        "rougel-35": 0.6666666666666667,
        "rougel-26": 0.8316831683168316,
        "rougel-154": 0.5945945945945946,
        "rougel-22": 0.3333333333333333,
        "rougel-168": 0.7499999999999999,
        "rougel-120": 0.8316831683168316,
        "rougel-8": 0.4683544303797468,
        "rougel-7": 0.7238095238095238,
        "rougel-23": 0.8316831683168316,
        "rougel-57": 0.8316831683168316,
        "rougel-61": 0.5185185185185186,
        "rougel-144": 0.737864077669903,
        "rougel-171": 0.7572815533980581,
        "rougel-158": 0.5357142857142858,
        "meteor-187": 0.4908037361623616,
        "meteor-28": 0.7829512659058115,
        "meteor-6": 0.7557685814675702,
        "meteor-75": 0.6458898398068905,
        "meteor-64": 0.780361324857812,
        "meteor-59": 0.9083720697755787,
        "meteor-35": 0.7631589710032308,
        "meteor-26": 0.8985649220554371,
        "meteor-154": 0.7961959569688037,
        "meteor-22": 0.5476143533123029,
        "meteor-168": 0.8507639264467279,
        "meteor-120": 0.8985649220554371,
        "meteor-8": 0.6232592574587336,
        "meteor-7": 0.7696079124650553,
        "meteor-23": 0.8985649220554371,
        "meteor-57": 0.8985649220554371,
        "meteor-61": 0.7722259060988825,
        "meteor-144": 0.9003832450525371,
        "meteor-171": 0.8589814953859841,
        "meteor-158": 0.49138507862161257,
        "ruby-187": 0.2773109243697479,
        "ruby-28": 0.4320987654320988,
        "ruby-6": 0.603448275862069,
        "ruby-75": 0.6595744680851063,
        "ruby-64": 0.523076923076923,
        "ruby-59": 0.6056338028169015,
        "ruby-35": 0.5263157894736843,
        "ruby-26": 0.7592592592592593,
        "ruby-154": 0.4375,
        "ruby-22": 0.2037914691943128,
        "ruby-168": 0.6666666666666667,
        "ruby-120": 0.7592592592592593,
        "ruby-8": 0.3153153153153153,
        "ruby-7": 0.6206896551724138,
        "ruby-23": 0.7592592592592593,
        "ruby-57": 0.7592592592592593,
        "ruby-61": 0.36363636363636365,
        "ruby-144": 0.5892857142857143,
        "ruby-171": 0.6785714285714286,
        "ruby-158": 0.3538461538461538,
        "codebertscore_f1-187": 0.794186532497406,
        "codebertscore_f3-187": 0.804413378238678,
        "codebertscore_f1-28": 0.8920184373855591,
        "codebertscore_f3-28": 0.9090175628662109,
        "codebertscore_f1-6": 0.9066379070281982,
        "codebertscore_f3-6": 0.8982760906219482,
        "codebertscore_f1-75": 0.9086708426475525,
        "codebertscore_f3-75": 0.8888473510742188,
        "codebertscore_f1-64": 0.8650212287902832,
        "codebertscore_f3-64": 0.8897569179534912,
        "codebertscore_f1-59": 0.9247874021530151,
        "codebertscore_f3-59": 0.9333041906356812,
        "codebertscore_f1-35": 0.8977587819099426,
        "codebertscore_f3-35": 0.9087607860565186,
        "codebertscore_f1-26": 0.9140802025794983,
        "codebertscore_f3-26": 0.925078272819519,
        "codebertscore_f1-154": 0.8936731219291687,
        "codebertscore_f3-154": 0.9129632115364075,
        "codebertscore_f1-22": 0.8170861601829529,
        "codebertscore_f3-22": 0.8646239638328552,
        "codebertscore_f1-168": 0.914496898651123,
        "codebertscore_f3-168": 0.9286567568778992,
        "codebertscore_f1-120": 0.925568699836731,
        "codebertscore_f3-120": 0.9306053519248962,
        "codebertscore_f1-8": 0.8070662617683411,
        "codebertscore_f3-8": 0.8331041932106018,
        "codebertscore_f1-7": 0.9184232950210571,
        "codebertscore_f3-7": 0.9089438319206238,
        "codebertscore_f1-23": 0.9348224401473999,
        "codebertscore_f3-23": 0.9398725032806396,
        "codebertscore_f1-57": 0.9183900356292725,
        "codebertscore_f3-57": 0.9233798980712891,
        "codebertscore_f1-61": 0.8655337691307068,
        "codebertscore_f3-61": 0.8831435441970825,
        "codebertscore_f1-144": 0.9177723526954651,
        "codebertscore_f3-144": 0.9258602857589722,
        "codebertscore_f1-171": 0.9247369170188904,
        "codebertscore_f3-171": 0.9339084625244141,
        "codebertscore_f1-158": 0.8278533220291138,
        "codebertscore_f3-158": 0.8339087963104248,
        "codebertscore_s_f1-187": 0.8160959482192993,
        "codebertscore_s_f3-187": 0.8287943005561829,
        "codebertscore_s_f1-28": 0.8990681767463684,
        "codebertscore_s_f3-28": 0.9165576696395874,
        "codebertscore_s_f1-6": 0.9047637581825256,
        "codebertscore_s_f3-6": 0.8985438942909241,
        "codebertscore_s_f1-75": 0.9071654081344604,
        "codebertscore_s_f3-75": 0.8853435516357422,
        "codebertscore_s_f1-64": 0.865175724029541,
        "codebertscore_s_f3-64": 0.8947077393531799,
        "codebertscore_s_f1-59": 0.9316343069076538,
        "codebertscore_s_f3-59": 0.9418675899505615,
        "codebertscore_s_f1-35": 0.894009530544281,
        "codebertscore_s_f3-35": 0.906378448009491,
        "codebertscore_s_f1-26": 0.9103036522865295,
        "codebertscore_s_f3-26": 0.925999641418457,
        "codebertscore_s_f1-154": 0.8951126933097839,
        "codebertscore_s_f3-154": 0.918276846408844,
        "codebertscore_s_f1-22": 0.83781498670578,
        "codebertscore_s_f3-22": 0.8869662880897522,
        "codebertscore_s_f1-168": 0.9090836644172668,
        "codebertscore_s_f3-168": 0.9266552329063416,
        "codebertscore_s_f1-120": 0.9235593676567078,
        "codebertscore_s_f3-120": 0.9316071271896362,
        "codebertscore_s_f1-8": 0.8253546357154846,
        "codebertscore_s_f3-8": 0.8556460738182068,
        "codebertscore_s_f1-7": 0.9169968366622925,
        "codebertscore_s_f3-7": 0.9100197553634644,
        "codebertscore_s_f1-23": 0.931464433670044,
        "codebertscore_s_f3-23": 0.9395808577537537,
        "codebertscore_s_f1-57": 0.9139638543128967,
        "codebertscore_s_f3-57": 0.9220266342163086,
        "codebertscore_s_f1-61": 0.8654025197029114,
        "codebertscore_s_f3-61": 0.8861019611358643,
        "codebertscore_s_f1-144": 0.9210340976715088,
        "codebertscore_s_f3-144": 0.9283345341682434,
        "codebertscore_s_f1-171": 0.9196618795394897,
        "codebertscore_s_f3-171": 0.9322795867919922,
        "codebertscore_s_f1-158": 0.8321948051452637,
        "codebertscore_s_f3-158": 0.8394100666046143,
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n",
        "snippet": [
            "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n"
        ],
        "simplified": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
        "task_id": "12",
        "168": "std::optional<std::string> longest_string;\n    for (auto& s : strings) {\n        if (!longest_string || (longest_string && s.size() > longest_string->size())) {\n            longest_string = s;\n        }\n    }\n    return longest_string;",
        "grade-168": {
            "execution": 1
        },
        "28": "std::optional<std::string> max = std::nullopt;\n  for (auto s : strings) {\n    if (!max.has_value() || s.size() > max->size()) {\n      max = s;\n    }\n  }\n  return max;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (strings.empty()) return std::nullopt;\n    int max_len = 0;\n    std::string max_str = \"\";\n    for (auto &&s : strings) {\n        if (s.length() > max_len) {\n            max_len = s.length();\n            max_str = s;\n        }\n    }\n    return max_str;",
        "grade-6": {
            "execution": 1
        },
        "194": "if (strings.empty()) {\n        return std::nullopt;\n    }\n    auto longest_string = std::make_optional(strings[0]);\n    for (auto const& string : strings) {\n        if (string.size() > longest_string->size()) {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
        "grade-194": {
            "execution": 1
        },
        "72": "std::optional<std::string> longest = std::nullopt;\n    if(strings.size() == 0) {\n        return longest;\n    }\n    std::string lon = strings[0];\n    for(auto e : strings) {\n        if(e.size() > lon.size()) {\n            lon = e;\n        }\n    }\n    return longest = lon;",
        "grade-72": {
            "execution": 1
        },
        "63": "if (strings.empty()) {\n    return std::nullopt;\n  }\n\n  std::string longest_string = strings[0];\n  for (const auto& string : strings) {\n    if (string.size() > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n\n  return longest_string;",
        "grade-63": {
            "execution": 1
        },
        "57": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  size_t max_length = strings[0].length();\n  std::string longest_string = strings[0];\n  for (size_t i = 1; i < strings.size(); ++i) {\n    if (strings[i].length() > max_length) {\n      max_length = strings[i].length();\n      longest_string = strings[i];\n    }\n  }\n  return longest_string;",
        "grade-57": {
            "execution": 1
        },
        "35": "// Write here",
        "grade-35": {
            "execution": 0
        },
        "193": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  auto max_size = std::max_element(strings.begin(), strings.end(), [](const auto& lhs, const auto& rhs) {\n    return lhs.size() < rhs.size();\n  });\n  return *max_size;",
        "grade-193": {
            "execution": 1
        },
        "26": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::sort(strings.begin(), strings.end(), [](const std::string& a, const std::string& b) {\n    return a.size() > b.size();\n  });\n  return strings[0];",
        "grade-26": {
            "execution": 1
        },
        "178": "// Your implementation here\n\treturn {};",
        "grade-178": {
            "execution": 0
        },
        "142": "std::optional<std::string> longest_string;\n    if (strings.size() == 0) {\n        return longest_string;\n    }\n    auto max_len = strings[0].size();\n    for (auto str : strings) {\n        if (str.size() > max_len) {\n            max_len = str.size();\n            longest_string = str;\n        }\n    }\n    return longest_string;",
        "grade-142": {
            "execution": 0
        },
        "22": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string res = strings[0];\n  for (int i = 1; i < strings.size(); i++) {\n    if (strings[i].size() > res.size()) {\n      res = strings[i];\n    }\n  }\n  return res;",
        "grade-22": {
            "execution": 1
        },
        "156": "std::optional<std::string> ret = std::nullopt;\n    for (auto &str : strings) {\n        if (!ret || ret->size() < str.size()) {\n            ret = str;\n        }\n    }\n    return ret;",
        "grade-156": {
            "execution": 1
        },
        "110": "if (strings.empty()) {\n        return std::nullopt;\n    }\n    auto pos = std::max_element(\n        strings.begin(), strings.end(), [](const std::string& a, const std::string& b) {\n            return a.size() < b.size();\n        });\n    return *pos;",
        "grade-110": {
            "execution": 1
        },
        "8": "if (strings.empty()) {\n\t\treturn std::nullopt;\n\t}\n\tstd::vector<std::string>::iterator it = std::max_element(strings.begin(), strings.end(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[](const std::string& a, const std::string& b) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn a.size() < b.size();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\treturn *it;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string max_str;\n  if (strings.size() == 0)\n    return std::nullopt;\n  else {\n    std::for_each(strings.begin(), strings.end(), [&max_str](std::string s) {\n      if (s.size() > max_str.size())\n        max_str = s;\n    });\n    return max_str;\n  }",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string candidate{};\n    std::optional<std::string> longest_string{};\n    for (auto it = strings.begin(); it != strings.end(); ++it) {\n        if (it->length() > candidate.length()) {\n            candidate = *it;\n        }\n    }\n    if (candidate.length() > 0) {\n        longest_string = candidate;\n    }\n    return longest_string;",
        "grade-23": {
            "execution": 1
        },
        "55": "int l = 0;\n    int c = 0;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].size() > l) {\n            l = strings[i].size();\n            c = i;\n        }\n    }\n    if (strings.size() == 0) {\n        return std::nullopt;\n    }\n    return strings[c];",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string longestString;\n    std::size_t maxSize = 0;\n    for (const auto& string : strings) {\n        if (string.size() > maxSize) {\n            maxSize = string.size();\n            longestString = string;\n        }\n    }\n    if (maxSize == 0) {\n        return std::nullopt;\n    }\n    return longestString;",
        "grade-59": {
            "execution": 1
        },
        "bleu-168": 0.1550608885712896,
        "bleu-28": 0.1523667254919178,
        "bleu-6": 0.2109795726861878,
        "bleu-194": 0.1623411503629127,
        "bleu-72": 0.16043374327473495,
        "bleu-63": 0.17680929065682352,
        "bleu-57": 0.33120313906939075,
        "bleu-35": 0.0,
        "bleu-193": 0.11538077193855804,
        "bleu-26": 0.12139944666055551,
        "bleu-178": 0.0005673643360176266,
        "bleu-142": 0.17702642044967243,
        "bleu-22": 0.4452520007390038,
        "bleu-156": 0.14481605402011413,
        "bleu-110": 0.106959386359387,
        "bleu-8": 0.09285247987352484,
        "bleu-7": 0.13794184564345133,
        "bleu-23": 0.16321066171881057,
        "bleu-55": 0.4093659376608187,
        "bleu-59": 0.1471854547917166,
        "codebleu-168": 0.4768196975917277,
        "codebleu-28": 0.5326193825398883,
        "codebleu-6": 0.6086025493281817,
        "codebleu-194": 0.5806794131131492,
        "codebleu-72": 0.6066968842335922,
        "codebleu-63": 0.5923550314004049,
        "codebleu-57": 0.7365413862750827,
        "codebleu-35": 0.02531645569620253,
        "codebleu-193": 0.5540781421208363,
        "codebleu-26": 0.57990077296639,
        "codebleu-178": 0.05981493815254032,
        "codebleu-142": 0.6172313909570183,
        "codebleu-22": 0.781226142177652,
        "codebleu-156": 0.4726381349836847,
        "codebleu-110": 0.5554547233312912,
        "codebleu-8": 0.1174707897285827,
        "codebleu-7": 0.5693197995014434,
        "codebleu-23": 0.6166431781267613,
        "codebleu-55": 0.75837528626532,
        "codebleu-59": 0.5474094700960394,
        "chrf-168": 0.3297195015606515,
        "chrf-28": 0.3025224386047401,
        "chrf-6": 0.41281583813703265,
        "chrf-194": 0.3738460221060912,
        "chrf-72": 0.4119803440396382,
        "chrf-63": 0.3797283498555019,
        "chrf-57": 0.5206923162856314,
        "chrf-35": 0.019202192082048465,
        "chrf-193": 0.33023434351216496,
        "chrf-26": 0.357784492981685,
        "chrf-178": 0.08472823421126538,
        "chrf-142": 0.3960195047793998,
        "chrf-22": 0.5822996181543508,
        "chrf-156": 0.3100196520781627,
        "chrf-110": 0.3452140243227619,
        "chrf-8": 0.343017323773732,
        "chrf-7": 0.3628962912354843,
        "chrf-23": 0.3986268551035605,
        "chrf-55": 0.6032777566512798,
        "chrf-59": 0.3545951638940301,
        "rougel-168": 0.3925233644859813,
        "rougel-28": 0.3818181818181818,
        "rougel-6": 0.4067796610169492,
        "rougel-194": 0.39316239316239315,
        "rougel-72": 0.4,
        "rougel-63": 0.4070796460176991,
        "rougel-57": 0.581081081081081,
        "rougel-35": 0.0,
        "rougel-193": 0.34426229508196726,
        "rougel-26": 0.3622047244094488,
        "rougel-178": 0.09836065573770493,
        "rougel-142": 0.4375,
        "rougel-22": 0.6821705426356589,
        "rougel-156": 0.37383177570093457,
        "rougel-110": 0.32812500000000006,
        "rougel-8": 0.30000000000000004,
        "rougel-7": 0.42748091603053434,
        "rougel-23": 0.43971631205673756,
        "rougel-55": 0.608695652173913,
        "rougel-59": 0.3650793650793651,
        "meteor-168": 0.3250619434984783,
        "meteor-28": 0.38479911926747884,
        "meteor-6": 0.4943431437346915,
        "meteor-194": 0.44958367574775554,
        "meteor-72": 0.4870084904807127,
        "meteor-63": 0.4817881227883124,
        "meteor-57": 0.7627966186040988,
        "meteor-35": 0.0,
        "meteor-193": 0.3761255679471293,
        "meteor-26": 0.44130405004337697,
        "meteor-178": 0.0419287211740042,
        "meteor-142": 0.42937545388525783,
        "meteor-22": 0.829403756438494,
        "meteor-156": 0.355640535372849,
        "meteor-110": 0.38160119667013526,
        "meteor-8": 0.38275629496402885,
        "meteor-7": 0.40807676979814406,
        "meteor-23": 0.4689305249740012,
        "meteor-55": 0.5773144957108637,
        "meteor-59": 0.34716616697416974,
        "ruby-168": 0.21818181818181814,
        "ruby-28": 0.2068965517241379,
        "ruby-6": 0.25757575757575757,
        "ruby-194": 0.2153846153846154,
        "ruby-72": 0.2564102564102564,
        "ruby-63": 0.2295081967213115,
        "ruby-57": 0.42708333333333337,
        "ruby-35": 0.0,
        "ruby-193": 0.19999999999999996,
        "ruby-26": 0.19999999999999996,
        "ruby-178": 0.05769230769230771,
        "ruby-142": 0.2763157894736842,
        "ruby-22": 0.5584415584415585,
        "ruby-156": 0.21818181818181814,
        "ruby-110": 0.1842105263157895,
        "ruby-8": 0.17045454545454541,
        "ruby-7": 0.30379746835443033,
        "ruby-23": 0.3033707865168539,
        "ruby-55": 0.4534883720930233,
        "ruby-59": 0.22972972972972971,
        "codebertscore_f1-168": 0.7646478414535522,
        "codebertscore_f3-168": 0.7841975092887878,
        "codebertscore_f1-28": 0.7731752991676331,
        "codebertscore_f3-28": 0.7952379584312439,
        "codebertscore_f1-6": 0.790423572063446,
        "codebertscore_f3-6": 0.809451162815094,
        "codebertscore_f1-194": 0.7544266581535339,
        "codebertscore_f3-194": 0.7699334025382996,
        "codebertscore_f1-72": 0.7610505223274231,
        "codebertscore_f3-72": 0.7782127261161804,
        "codebertscore_f1-63": 0.7835296392440796,
        "codebertscore_f3-63": 0.7915869951248169,
        "codebertscore_f1-57": 0.8329241871833801,
        "codebertscore_f3-57": 0.853560745716095,
        "codebertscore_f1-35": 0.5396411418914795,
        "codebertscore_f3-35": 0.5140936970710754,
        "codebertscore_f1-193": 0.7241957187652588,
        "codebertscore_f3-193": 0.7414977550506592,
        "codebertscore_f1-26": 0.7485595345497131,
        "codebertscore_f3-26": 0.7581483721733093,
        "codebertscore_f1-178": 0.6482748985290527,
        "codebertscore_f3-178": 0.632716715335846,
        "codebertscore_f1-142": 0.7699736952781677,
        "codebertscore_f3-142": 0.7728739976882935,
        "codebertscore_f1-22": 0.8760212659835815,
        "codebertscore_f3-22": 0.9012042880058289,
        "codebertscore_f1-156": 0.7820672988891602,
        "codebertscore_f3-156": 0.7986447215080261,
        "codebertscore_f1-110": 0.7260878682136536,
        "codebertscore_f3-110": 0.7401205897331238,
        "codebertscore_f1-8": 0.7211393713951111,
        "codebertscore_f3-8": 0.7371995449066162,
        "codebertscore_f1-7": 0.7790448069572449,
        "codebertscore_f3-7": 0.7947821021080017,
        "codebertscore_f1-23": 0.8028914332389832,
        "codebertscore_f3-23": 0.8257020711898804,
        "codebertscore_f1-55": 0.8609336018562317,
        "codebertscore_f3-55": 0.8809206485748291,
        "codebertscore_f1-59": 0.7764322757720947,
        "codebertscore_f3-59": 0.7934808135032654,
        "codebertscore_s_f1-168": 0.7652299404144287,
        "codebertscore_s_f3-168": 0.7835081815719604,
        "codebertscore_s_f1-28": 0.7775618433952332,
        "codebertscore_s_f3-28": 0.79878830909729,
        "codebertscore_s_f1-6": 0.7940029501914978,
        "codebertscore_s_f3-6": 0.8142486214637756,
        "codebertscore_s_f1-194": 0.7666844725608826,
        "codebertscore_s_f3-194": 0.781467616558075,
        "codebertscore_s_f1-72": 0.764855682849884,
        "codebertscore_s_f3-72": 0.7827630043029785,
        "codebertscore_s_f1-63": 0.7928304076194763,
        "codebertscore_s_f3-63": 0.8002811074256897,
        "codebertscore_s_f1-57": 0.8358449339866638,
        "codebertscore_s_f3-57": 0.8572931289672852,
        "codebertscore_s_f1-35": 0.5396313071250916,
        "codebertscore_s_f3-35": 0.5194615721702576,
        "codebertscore_s_f1-193": 0.7233346104621887,
        "codebertscore_s_f3-193": 0.7437036633491516,
        "codebertscore_s_f1-26": 0.7521609663963318,
        "codebertscore_s_f3-26": 0.7607364654541016,
        "codebertscore_s_f1-178": 0.6044732928276062,
        "codebertscore_s_f3-178": 0.5888611078262329,
        "codebertscore_s_f1-142": 0.7763731479644775,
        "codebertscore_s_f3-142": 0.7809555530548096,
        "codebertscore_s_f1-22": 0.8841932415962219,
        "codebertscore_s_f3-22": 0.9083123803138733,
        "codebertscore_s_f1-156": 0.7820854783058167,
        "codebertscore_s_f3-156": 0.7989596724510193,
        "codebertscore_s_f1-110": 0.7309407591819763,
        "codebertscore_s_f3-110": 0.7484468221664429,
        "codebertscore_s_f1-8": 0.7226554155349731,
        "codebertscore_s_f3-8": 0.7401765584945679,
        "codebertscore_s_f1-7": 0.7767380475997925,
        "codebertscore_s_f3-7": 0.7938728332519531,
        "codebertscore_s_f1-23": 0.8025398850440979,
        "codebertscore_s_f3-23": 0.8223559260368347,
        "codebertscore_s_f1-55": 0.8702253699302673,
        "codebertscore_s_f3-55": 0.8862110376358032,
        "codebertscore_s_f1-59": 0.7787527441978455,
        "codebertscore_s_f3-59": 0.8009415864944458,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "3 - The code snippet correctly returns the longest string from a vector of strings, and returns the first one in case of multiple strings of the same length. However, it does not handle the case of an empty input list correctly, as it does not return None as specified in the problem. Instead, it returns an empty optional.",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-178": 0,
        "raw_gpt35_nsnr-178": "3 - The code snippet correctly returns the longest string from a vector of strings, and returns the first one in case of multiple strings of the same length. However, it does not handle the case of an empty input list correctly, as it always returns an empty optional instead of None.",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-142": 4,
        "raw_gpt35_nswr-142": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(Union_std_vector_std_string__long u2) {\n        return f0 == u2.f0 || f1 == u2.f1 ;\n    }\n};\n// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\n",
        "snippet": [
            "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n"
        ],
        "simplified": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
        "task_id": "125",
        "166": "if (txt.find(' ') != std::string::npos)\n        return txt.substr(0, txt.find(' '));\n    else if (txt.find(',') != std::string::npos)\n        return txt.substr(0, txt.find(','));\n    else {\n        int count = 0;\n        for (int i = 0; i < txt.length(); i += 2) {\n            if (txt[i] >= 'a' && txt[i] <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }",
        "grade-166": {
            "execution": 0
        },
        "28": "if (txt.find(' ') != std::string::npos)\n        return txt.substr(0, txt.find(' '));\n    else if (txt.find(',') != std::string::npos)\n        return txt.substr(0, txt.find(','));\n    else\n        return txt.length();",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::string> v;\n    int count;\n    if(txt.find(' ') != std::string::npos){\n      std::istringstream ss(txt);\n      for(std::string s; ss >> s;)\n        v.push_back(s);\n        return Union_std_vector_std_string__long(v);\n    }\n    else if(txt.find(',') != std::string::npos){\n      std::istringstream ss(txt);\n      for(std::string s; getline(ss, s, ',');)\n        v.push_back(s);\n        return Union_std_vector_std_string__long(v);\n    }\n    else{\n      count = 0;\n      for(auto i : txt){\n        if(islower(i)){\n          if((int(i) - int('a')) % 2 != 0)\n            count++;\n        }\n      }\n      return Union_std_vector_std_string__long(count);\n    }",
        "grade-6": {
            "execution": 1
        },
        "192": "if (std::regex_search(txt, std::regex(\"\\\\s+\"))) {\n        std::vector<std::string> splitted_words;\n        std::istringstream iss(txt);\n        std::copy(std::istream_iterator<std::string>(iss),\n            std::istream_iterator<std::string>(),\n            std::back_inserter(splitted_words));\n        return Union_std_vector_std_string__long(splitted_words);\n    }\n    else if (std::regex_search(txt, std::regex(\",\"))) {\n        std::vector<std::string> splitted_words;\n        boost::split(splitted_words, txt, boost::is_any_of(\",\"));\n        return Union_std_vector_std_string__long(splitted_words);\n    }\n    else {\n        return Union_std_vector_std_string__long(txt.size());\n    }",
        "grade-192": {
            "execution": 0
        },
        "70": "std::vector<std::string> v;\n    std::stringstream s(txt);\n    std::string word;\n    while (s >> word) {\n        v.push_back(word);\n    }\n    if (v.size() == 0) {\n        int sum = 0;\n        std::vector<char> cs;\n        std::string s = txt;\n        for (int i = 0; i < s.size(); i++) {\n            if (std::find(cs.begin(), cs.end(), s[i]) == cs.end()) {\n                cs.push_back(s[i]);\n            }\n        }\n        for (int i = 0; i < cs.size(); i++) {\n            if (cs[i] >= 'a' && cs[i] <= 'z') {\n                sum += (int)cs[i] - (int)'a';\n            }\n        }\n        return Union_std_vector_std_string__long(sum);\n    }\n    return Union_std_vector_std_string__long(v);",
        "grade-70": {
            "execution": 0
        },
        "62": "int l = txt.length();\n    for(int i = 0; i < l; i++) {\n        if(txt[i] == ' ') {\n            std::vector<std::string> res;\n            res.push_back(txt.substr(0, i));\n            res.push_back(txt.substr(i+1, l-i-1));\n            return res;\n        }\n    }\n    for(int i = 0; i < l; i++) {\n        if(txt[i] == ',') {\n            std::vector<std::string> res;\n            res.push_back(txt.substr(0, i));\n            res.push_back(txt.substr(i+1, l-i-1));\n            return res;\n        }\n    }\n    int count = 0;\n    for(int i = 0; i < l; i++) {\n        if(txt[i] >= 'a' && txt[i] <= 'z') {\n            if((txt[i] - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> words;\n    words.clear();\n    if (txt.find_first_of(\" \") != std::string::npos) {\n        std::istringstream iss(txt);\n        do {\n            std::string sub;\n            iss >> sub;\n            words.push_back(sub);\n        } while (iss);\n        return Union_std_vector_std_string__long(words);\n    } else if (txt.find_first_of(\",\") != std::string::npos) {\n        std::istringstream iss(txt);\n        do {\n            std::string sub;\n            std::getline(iss, sub, ',');\n            words.push_back(sub);\n        } while (iss);\n        return Union_std_vector_std_string__long(words);\n    } else {\n        int letters = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z') {\n                if ((c - 'a') % 2 == 1) {\n                    letters++;\n                }\n            }\n        }\n        return Union_std_vector_std_string__long(letters);\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string delimiter = \" \";\n    if (txt.find(delimiter) == std::string::npos) {\n        delimiter = \",\";\n        if (txt.find(delimiter) == std::string::npos) {\n            return Union_std_vector_std_string__long(0);\n        }\n    }\n    std::vector<std::string> splitted;\n    std::string token;\n    std::stringstream ss(txt);\n    while (std::getline(ss, token, delimiter[0])) {\n        splitted.push_back(token);\n    }\n    return Union_std_vector_std_string__long(splitted);",
        "grade-35": {
            "execution": 0
        },
        "191": "if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string> ans;\n        std::string temp;\n        std::istringstream stream(txt);\n        while (stream >> temp) {\n            ans.push_back(temp);\n        }\n        return ans;\n    } else if (txt.find(\",\") != std::string::npos) {\n        std::vector<std::string> ans;\n        std::string temp;\n        std::istringstream stream(txt);\n        while (std::getline(stream, temp, ',')) {\n            ans.push_back(temp);\n        }\n        return ans;\n    } else {\n        long odd_sum = 0;\n        for (char c : txt) {\n            if (c - 'a' >= 0 && c - 'a' < 26) {\n                if ((c - 'a') % 2) odd_sum++;\n            }\n        }\n        return odd_sum;\n    }",
        "grade-191": {
            "execution": 1
        },
        "26": "if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string> result{};\n        std::stringstream ss(txt);\n        std::string item;\n        while (std::getline(ss, item, ' ')) {\n            result.push_back(item);\n        }\n        return Union_std_vector_std_string__long(result);\n    } else if (txt.find(',') != std::string::npos) {\n        std::vector<std::string> result{};\n        std::stringstream ss(txt);\n        std::string item;\n        while (std::getline(ss, item, ',')) {\n            result.push_back(item);\n        }\n        return Union_std_vector_std_string__long(result);\n    } else {\n        int result = 0;\n        for (int i = 0; i < txt.size(); i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && i % 2 == 0)\n                result++;\n        }\n        return Union_std_vector_std_string__long(result);\n    }",
        "grade-26": {
            "execution": 0
        },
        "176": "//if whitespace exists, split\n\tif(txt.find(' ') != std::string::npos){\n\t\tstd::vector<std::string> vec;\n\t\tstd::stringstream ss(txt);\n\t\tstd::string token;\n\t\twhile(getline(ss, token, ' ')){\n\t\t\tvec.push_back(token);\n\t\t}\n\t\treturn Union_std_vector_std_string__long(vec);\n\t}\n\t//if no whitespace, split on comma\n\telse if(txt.find(',') != std::string::npos){\n\t\tstd::vector<std::string> vec;\n\t\tstd::stringstream ss(txt);\n\t\tstd::string token;\n\t\twhile(getline(ss, token, ',')){\n\t\t\tvec.push_back(token);\n\t\t}\n\t\treturn Union_std_vector_std_string__long(vec);\n\t}\n\t//if no comma, return number of lowercase letters with odd order in alphabet\n\telse{\n\t\tlong count = 0;\n\t\tfor(char c : txt){\n\t\t\tif(c >= 'a' && c <= 'z'){\n\t\t\t\tif(c - 'a' % 2 == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Union_std_vector_std_string__long(count);\n\t}",
        "grade-176": {
            "execution": 0
        },
        "141": "int count = 0;\n    std::istringstream iss(txt);\n    std::vector<std::string> splitted;\n    for (std::string s; iss >> s; ) {\n        splitted.push_back(s);\n    }\n    if(splitted.size() > 0)\n        return Union_std_vector_std_string__long(splitted);\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z')\n            count++;\n    }\n    return Union_std_vector_std_string__long(count);",
        "grade-141": {
            "execution": 0
        },
        "22": "//std::vector<std::string> result;\n    //char delimiter = ' ';\n    //if (txt.find(delimiter) != std::string::npos) {\n        //result = split_string(txt, delimiter);\n    //} else {\n        //delimiter = ',';\n        //if (txt.find(delimiter) != std::string::npos) {\n            //result = split_string(txt, delimiter);\n        //} else {\n            //std::string odd = \"abcdefghijklmnopqrstuvwxyz\";\n            //int count = 0;\n            //for (char ch: txt) {\n                //if (odd.find(ch) != std::string::npos) {\n                    //count++;\n                //}\n            //}\n            //result.push_back(count);\n        //}\n    //}\n    //return result;\n    if (txt.find(' ') != std::string::npos) {\n        return std::vector<std::string>{split_string(txt, ' ')};\n    } else if (txt.find(',') != std::string::npos) {\n        return std::vector<std::string>{split_string(txt, ',')};\n    } else {\n        std::string odd = \"abcdefghijklmnopqrstuvwxyz\";\n        int count = 0;\n        for (char ch: txt) {\n            if (odd.find(ch) != std::string::npos) {\n                count++;\n            }\n        }\n        return count;\n    }",
        "grade-22": {
            "execution": 0
        },
        "154": "Union_std_vector_std_string__long  r{};\n    int count = 0;\n    std::vector<std::string> result;\n    std::stringstream ss(txt);\n    std::string word;\n    while (getline(ss, word, ' ')) {\n        result.push_back(word);\n    }\n    if (result.size() > 1) {\n        r.f0 = result;\n    } else {\n        if (result[0].find(',') != std::string::npos) {\n            result.clear();\n            std::stringstream ss2(txt);\n            std::string word2;\n            while (getline(ss2, word2, ',')) {\n                result.push_back(word2);\n            }\n            r.f0 = result;\n        } else {\n            for (auto& ch : txt) {\n                int x = ch - 'a';\n                if (x >= 0 && x <= 25) {\n                    count += x % 2 == 0 ? 0 : 1;\n                }\n            }\n            r.f1 = count;\n        }\n    }\n    return r;",
        "grade-154": {
            "execution": 0
        },
        "110": "std::vector<std::string> v;\n    bool flg = false;\n    bool flg2 = false;\n    long ans = 0;\n    std::string str = \"\";\n    for(char c : txt) {\n        if(c != ' ') {\n            flg = true;\n            str += c;\n        }\n        if(c == ' ' && flg) {\n            v.push_back(str);\n            str = \"\";\n            flg = false;\n        }\n        if(c == ',') {\n            flg2 = true;\n        }\n    }\n    if(flg) v.push_back(str);\n    if(!flg && !flg2) {\n        for(char c : txt) {\n            ans += (c - 'a') % 2;\n        }\n        return Union_std_vector_std_string__long(ans);\n    }\n    return Union_std_vector_std_string__long(v);",
        "grade-110": {
            "execution": 0
        },
        "8": "Union_std_vector_std_string__long u;\n    std::vector<std::string> result;\n    int i;\n    for(i = 0; i < txt.length(); i++) {\n        if(txt[i] == ' ' || txt[i] == ',') {\n            break;\n        }\n    }\n    if(i < txt.length()) {\n        std::istringstream iss(txt);\n        do {\n            std::string sub;\n            iss >> sub;\n            result.push_back(sub);\n        } while (iss);\n        u.f0 = result;\n    } else {\n        int odd = 0;\n        for(i = 0; i < txt.length(); i++) {\n            if((txt[i] - 'a') % 2 == 1) {\n                odd++;\n            }\n        }\n        u.f1 = odd;\n    }\n    return u;",
        "grade-8": {
            "execution": 0
        },
        "7": "auto tokens = std::vector<std::string>();\n    auto token = std::string();\n    auto ss = std::stringstream(txt);\n    while (std::getline(ss, token, ' ')) {\n        tokens.push_back(token);\n    }\n    return tokens.size() > 1 ? tokens : std::vector<std::string>{txt}.size();",
        "grade-7": {
            "execution": 0
        },
        "23": "if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string> vs;\n        std::string s = \"\";\n        for (size_t i = 0; i < txt.size(); i++) {\n            if (txt[i] == ' ') {\n                vs.push_back(s);\n                s = \"\";\n            } else {\n                s += txt[i];\n            }\n        }\n        vs.push_back(s);\n        return vs;\n    } else if (txt.find(',') != std::string::npos) {\n        std::vector<std::string> vs;\n        std::string s = \"\";\n        for (size_t i = 0; i < txt.size(); i++) {\n            if (txt[i] == ',') {\n                vs.push_back(s);\n                s = \"\";\n            } else {\n                s += txt[i];\n            }\n        }\n        vs.push_back(s);\n        return vs;\n    } else {\n        int cnt = 0;\n        for (size_t i = 0; i < txt.size(); i++) {\n            if ((txt[i] - 'a') % 2 == 1) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }",
        "grade-23": {
            "execution": 1
        },
        "55": "if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string> str_split_v;\n        char *cstr = new char[txt.length() + 1];\n        std::strcpy(cstr, txt.c_str());\n        char *p = std::strtok(cstr, \" \");\n        while (p != 0) {\n            str_split_v.push_back(p);\n            p = std::strtok(NULL, \" \");\n        }\n        delete[] cstr;\n        return Union_std_vector_std_string__long(str_split_v);\n    } else if (txt.find(',') != std::string::npos) {\n        std::vector<std::string> str_split_v;\n        char *cstr = new char[txt.length() + 1];\n        std::strcpy(cstr, txt.c_str());\n        char *p = std::strtok(cstr, \",\");\n        while (p != 0) {\n            str_split_v.push_back(p);\n            p = std::strtok(NULL, \",\");\n        }\n        delete[] cstr;\n        return Union_std_vector_std_string__long(str_split_v);\n    } else {\n        long c = 0;\n        for (auto &e : txt) {\n            if (e > 'a' && e < 'z' && (e % 2 == 0)) {\n                c++;\n            }\n        }\n        return Union_std_vector_std_string__long(c);\n    }",
        "grade-55": {
            "execution": 1
        },
        "59": "if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string> words = strSplit(txt, ' ');\n        return Union_std_vector_std_string__long(words);\n    }\n    if (txt.find(\",\") != std::string::npos) {\n        std::vector<std::string> words = strSplit(txt, ',');\n        return Union_std_vector_std_string__long(words);\n    }\n    long result = 0;\n    for (char c : txt) {\n        int i = tolower(c) - 'a';\n        result += (i % 2) ? 1 : 0;\n    }\n    return Union_std_vector_std_string__long(result);",
        "grade-59": {
            "execution": 0
        },
        "bleu-166": 0.13294479231130565,
        "bleu-28": 0.02444475703264943,
        "bleu-6": 0.13005422722904686,
        "bleu-192": 0.047371649340733034,
        "bleu-70": 0.22334351023406832,
        "bleu-62": 0.32490400623338156,
        "bleu-57": 0.14128785940647487,
        "bleu-35": 0.034890572209237476,
        "bleu-191": 0.12067030223090454,
        "bleu-26": 0.2319773179104558,
        "bleu-176": 0.14929682134577935,
        "bleu-141": 0.08553731813501235,
        "bleu-22": 0.15184153255164026,
        "bleu-154": 0.12183926029766733,
        "bleu-110": 0.10385459675089624,
        "bleu-8": 0.2644979730562666,
        "bleu-7": 0.011740349276625284,
        "bleu-23": 0.414684905036873,
        "bleu-55": 0.1964002491046958,
        "bleu-59": 0.08236324660616544,
        "codebleu-166": 0.26461475245190236,
        "codebleu-28": 0.13874089558340388,
        "codebleu-6": 0.3434986144212719,
        "codebleu-192": 0.24804287442609338,
        "codebleu-70": 0.45521456171508223,
        "codebleu-62": 0.513669225590793,
        "codebleu-57": 0.3715501540385034,
        "codebleu-35": 0.18731589260778003,
        "codebleu-191": 0.3312114844483406,
        "codebleu-26": 0.42771372226364257,
        "codebleu-176": 0.4041737550908237,
        "codebleu-141": 0.2298364747691642,
        "codebleu-22": 0.45571617574431256,
        "codebleu-154": 0.37550678108005736,
        "codebleu-110": 0.2868776687009057,
        "codebleu-8": 0.38403077639819155,
        "codebleu-7": 0.14287823366719823,
        "codebleu-23": 0.5763185305230073,
        "codebleu-55": 0.528570257863583,
        "codebleu-59": 0.22649279333455075,
        "chrf-166": 0.23306742938856614,
        "chrf-28": 0.1548742457219208,
        "chrf-6": 0.2644395736714097,
        "chrf-192": 0.18842976229455208,
        "chrf-70": 0.27638448939643423,
        "chrf-62": 0.34157059827783315,
        "chrf-57": 0.2566716395288943,
        "chrf-35": 0.181124442334344,
        "chrf-191": 0.24503113286821832,
        "chrf-26": 0.30724745274155135,
        "chrf-176": 0.2668275437037417,
        "chrf-141": 0.21366429057084205,
        "chrf-22": 0.276879586467694,
        "chrf-154": 0.2434830738514978,
        "chrf-110": 0.20769585504964647,
        "chrf-8": 0.3263091608365555,
        "chrf-7": 0.13084103796578994,
        "chrf-23": 0.37381593659390794,
        "chrf-55": 0.28618251798472394,
        "chrf-59": 0.19479899964524214,
        "rougel-166": 0.4188235294117647,
        "rougel-28": 0.29649595687331537,
        "rougel-6": 0.36853002070393376,
        "rougel-192": 0.2800875273522976,
        "rougel-70": 0.4165029469548134,
        "rougel-62": 0.4962406015037594,
        "rougel-57": 0.36363636363636365,
        "rougel-35": 0.2634146341463415,
        "rougel-191": 0.33265720081135897,
        "rougel-26": 0.4321223709369024,
        "rougel-176": 0.33208955223880593,
        "rougel-141": 0.3374083129584352,
        "rougel-22": 0.3209076175040519,
        "rougel-154": 0.3499005964214712,
        "rougel-110": 0.3171806167400881,
        "rougel-8": 0.452991452991453,
        "rougel-7": 0.21578947368421053,
        "rougel-23": 0.602112676056338,
        "rougel-55": 0.3965811965811966,
        "rougel-59": 0.3140877598152425,
        "meteor-166": 0.2713456284153005,
        "meteor-28": 0.12626176670426734,
        "meteor-6": 0.27776897102434894,
        "meteor-192": 0.17908320114756096,
        "meteor-70": 0.37109344593047544,
        "meteor-62": 0.4633103291027821,
        "meteor-57": 0.2630096336066643,
        "meteor-35": 0.13178888604219416,
        "meteor-191": 0.2641112024574498,
        "meteor-26": 0.3521933204130351,
        "meteor-176": 0.26770680571397537,
        "meteor-141": 0.22844865711090068,
        "meteor-22": 0.31788861007746055,
        "meteor-154": 0.2571190818167729,
        "meteor-110": 0.24019252156589058,
        "meteor-8": 0.33787612694383806,
        "meteor-7": 0.09432950745884774,
        "meteor-23": 0.47227977839335183,
        "meteor-55": 0.3669633733906914,
        "meteor-59": 0.21148715063889748,
        "ruby-166": 0.27586206896551724,
        "ruby-28": 0.1827586206896552,
        "ruby-6": 0.2551724137931034,
        "ruby-192": 0.16206896551724137,
        "ruby-70": 0.23448275862068968,
        "ruby-62": 0.3068965517241379,
        "ruby-57": 0.23448275862068968,
        "ruby-35": 0.16896551724137931,
        "ruby-191": 0.21379310344827585,
        "ruby-26": 0.2896551724137931,
        "ruby-176": 0.20344827586206893,
        "ruby-141": 0.21724137931034482,
        "ruby-22": 0.1406727828746177,
        "ruby-154": 0.20344827586206893,
        "ruby-110": 0.21724137931034482,
        "ruby-8": 0.31034482758620685,
        "ruby-7": 0.12758620689655176,
        "ruby-23": 0.41034482758620694,
        "ruby-55": 0.1932203389830508,
        "ruby-59": 0.20344827586206893,
        "codebertscore_f1-166": 0.7682642936706543,
        "codebertscore_f3-166": 0.7599347233772278,
        "codebertscore_f1-28": 0.6855513453483582,
        "codebertscore_f3-28": 0.6441685557365417,
        "codebertscore_f1-6": 0.7500811815261841,
        "codebertscore_f3-6": 0.7626098394393921,
        "codebertscore_f1-192": 0.6718764901161194,
        "codebertscore_f3-192": 0.6745568513870239,
        "codebertscore_f1-70": 0.7758772969245911,
        "codebertscore_f3-70": 0.786025881767273,
        "codebertscore_f1-62": 0.8135247826576233,
        "codebertscore_f3-62": 0.8181659579277039,
        "codebertscore_f1-57": 0.7407189607620239,
        "codebertscore_f3-57": 0.7553374767303467,
        "codebertscore_f1-35": 0.6779047846794128,
        "codebertscore_f3-35": 0.6651442050933838,
        "codebertscore_f1-191": 0.747667670249939,
        "codebertscore_f3-191": 0.7563657760620117,
        "codebertscore_f1-26": 0.7880019545555115,
        "codebertscore_f3-26": 0.8096067905426025,
        "codebertscore_f1-176": 0.7240224480628967,
        "codebertscore_f3-176": 0.743733823299408,
        "codebertscore_f1-141": 0.7481964230537415,
        "codebertscore_f3-141": 0.75307697057724,
        "codebertscore_f1-22": 0.7245634198188782,
        "codebertscore_f3-22": 0.7506954669952393,
        "codebertscore_f1-154": 0.7368689179420471,
        "codebertscore_f3-154": 0.7562545537948608,
        "codebertscore_f1-110": 0.7145591378211975,
        "codebertscore_f3-110": 0.7177761793136597,
        "codebertscore_f1-8": 0.7900386452674866,
        "codebertscore_f3-8": 0.8014888763427734,
        "codebertscore_f1-7": 0.6461544036865234,
        "codebertscore_f3-7": 0.6138703227043152,
        "codebertscore_f1-23": 0.8324459791183472,
        "codebertscore_f3-23": 0.8387216925621033,
        "codebertscore_f1-55": 0.7505187392234802,
        "codebertscore_f3-55": 0.7833700776100159,
        "codebertscore_f1-59": 0.7202563285827637,
        "codebertscore_f3-59": 0.7200432419776917,
        "codebertscore_s_f1-166": 0.8723199367523193,
        "codebertscore_s_f3-166": 0.8560829758644104,
        "codebertscore_s_f1-28": 0.8387032747268677,
        "codebertscore_s_f3-28": 0.7954607009887695,
        "codebertscore_s_f1-6": 0.847223699092865,
        "codebertscore_s_f3-6": 0.839061439037323,
        "codebertscore_s_f1-192": 0.7979684472084045,
        "codebertscore_s_f3-192": 0.7813092470169067,
        "codebertscore_s_f1-70": 0.8646237254142761,
        "codebertscore_s_f3-70": 0.8587507009506226,
        "codebertscore_s_f1-62": 0.8655235171318054,
        "codebertscore_s_f3-62": 0.8648286461830139,
        "codebertscore_s_f1-57": 0.8341469168663025,
        "codebertscore_s_f3-57": 0.8267410397529602,
        "codebertscore_s_f1-35": 0.8185186386108398,
        "codebertscore_s_f3-35": 0.7921807169914246,
        "codebertscore_s_f1-191": 0.8288437724113464,
        "codebertscore_s_f3-191": 0.8240672945976257,
        "codebertscore_s_f1-26": 0.8668492436408997,
        "codebertscore_s_f3-26": 0.8661218881607056,
        "codebertscore_s_f1-176": 0.8206157088279724,
        "codebertscore_s_f3-176": 0.8233104348182678,
        "codebertscore_s_f1-141": 0.8653095364570618,
        "codebertscore_s_f3-141": 0.8482188582420349,
        "codebertscore_s_f1-22": 0.8101580739021301,
        "codebertscore_s_f3-22": 0.824981153011322,
        "codebertscore_s_f1-154": 0.8253251314163208,
        "codebertscore_s_f3-154": 0.8282806873321533,
        "codebertscore_s_f1-110": 0.8146090507507324,
        "codebertscore_s_f3-110": 0.8023352026939392,
        "codebertscore_s_f1-8": 0.8661569356918335,
        "codebertscore_s_f3-8": 0.8589885234832764,
        "codebertscore_s_f1-7": 0.8128209114074707,
        "codebertscore_s_f3-7": 0.7685791850090027,
        "codebertscore_s_f1-23": 0.8826239109039307,
        "codebertscore_s_f3-23": 0.8828620910644531,
        "codebertscore_s_f1-55": 0.8262757658958435,
        "codebertscore_s_f3-55": 0.8412139415740967,
        "codebertscore_s_f1-59": 0.8460307717323303,
        "codebertscore_s_f3-59": 0.8250672221183777,
        "gpt35_nsnr-166": 3,
        "raw_gpt35_nsnr-166": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-191": 4,
        "raw_gpt35_nswr-191": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array) {\n",
        "snippet": [
            "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n"
        ],
        "simplified": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
        "task_id": "88",
        "163": "if (array.size() == 0 || array.size() == 1) return array;\n  int sum = array[0] + array[array.size() - 1];\n  if (sum % 2 == 0) std::sort(array.begin(), array.end(), std::greater<int>());\n  else std::sort(array.begin(), array.end());\n  return array;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::vector<long> sortedArr;\n  for (unsigned int i = 0; i < array.size(); i++) {\n    if (i == 0) {\n      sortedArr.push_back(array[i]);\n    } else {\n      bool inserted = false;\n      for (unsigned int j = 0; j < sortedArr.size(); j++) {\n        if ((i + array.size() - 1) % 2 == 0) {\n          if (array[i] < sortedArr[j]) {\n            sortedArr.insert(sortedArr.begin() + j, array[i]);\n            inserted = true;\n            break;\n          }\n        } else {\n          if (array[i] > sortedArr[j]) {\n            sortedArr.insert(sortedArr.begin() + j, array[i]);\n            inserted = true;\n            break;\n          }\n        }\n      }\n      if (!inserted) {\n        sortedArr.push_back(array[i]);\n      }\n    }\n  }\n  return sortedArr;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n  if (array.size() == 0) {\n    return result;\n  } else if (array.size() == 1) {\n    return array;\n  } else {\n    auto sum_last_first = array[0] + array[array.size() - 1];\n    if (sum_last_first % 2 == 0) {\n      // even, use ascending order\n      std::sort(array.begin(), array.end());\n    } else {\n      // odd, use descending order\n      std::sort(array.begin(), array.end(), std::greater<int>());\n    }\n    return array;\n  }",
        "grade-6": {
            "execution": 0
        },
        "189": "long n = array.size();\n  if(n==0)\n    return array;\n  if(n==1)\n    return array;\n  if( (array[0] + array[n-1]) % 2 == 0 ){\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  }\n  else{\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
        "grade-189": {
            "execution": 1
        },
        "70": "bool reversed = (array.front() + array.back()) % 2 == 0;\n  if(reversed) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
        "grade-70": {
            "execution": 0
        },
        "62": "int sz = array.size();\n    if(sz==0)return array;\n    if(sz==1)return array;\n    if(sz%2==0){\n        int p = 0;\n        int q = sz-1;\n        while(p<q){\n            std::swap(array[p],array[q]);\n            p++;\n            q--;\n        }\n    }\n    else{\n        for(int i=0;i<sz;i++){\n            for(int j=i+1;j<sz;j++){\n                if(array[i]>array[j])std::swap(array[i],array[j]);\n            }\n        }\n    }\n    return array;",
        "grade-62": {
            "execution": 0
        },
        "57": "int sum = array[0] + array[array.size() - 1];\n\tif (sum % 2 == 0) {\n\t\tsort(array.begin(), array.end(), std::greater<int>());\n\t}\n\telse {\n\t\tsort(array.begin(), array.end());\n\t}\n\treturn array;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> v1;\n  std::vector<long> v2;\n  if(array.size()==0){\n    return v1;\n  }\n  if(array.size()==1){\n    return array;\n  }\n  int cnt = array.size();\n  if((array[0]+array[cnt-1])%2==0){\n    for(int i=0;i<cnt;i++){\n      v1.push_back(array[i]);\n    }\n    std::sort(v1.begin(),v1.end(),std::greater<int>());\n    return v1;\n  }\n  else if((array[0]+array[cnt-1])%2!=0){\n    for(int i=0;i<cnt;i++){\n      v2.push_back(array[i]);\n    }\n    std::sort(v2.begin(),v2.end());\n    return v2;\n  }\n  else{\n    return array;\n  }",
        "grade-35": {
            "execution": 1
        },
        "188": "// Write your code here.\n    bool isOdd = (array[0] + array[array.size() - 1]) % 2;\n    if (isOdd) {\n        //odd\n        sort(array.begin(), array.end());\n    } else {\n        //even\n        sort(array.begin(), array.end(), greater<long>());\n    }\n    return array;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> result = array;\n  int i = 0;\n  int j = result.size() - 1;\n  bool isOdd = false;\n  if ((result[i] + result[j]) % 2 != 0)\n    isOdd = true;\n  while (i < j) {\n    while (i < j && result[i] % 2 != 0)\n      i++;\n    while (i < j && result[j] % 2 == 0)\n      j--;\n    if (i < j) {\n      int temp = result[i];\n      result[i] = result[j];\n      result[j] = temp;\n    }\n  }\n  if (isOdd)\n    std::sort(result.begin(), result.end());\n  else\n    std::sort(result.begin(), result.end(), std::greater<long>());\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "if(array.size()<=1) return array;\n  if((array[0]+array[array.size()-1])%2==0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  }\n  else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> result = array;\n   int sum = 0;\n   int begin = 0;\n   int end = array.size() - 1;\n   int temp = 0;\n   sum = array[begin] + array[end];\n   if(sum % 2 == 0) {\n      while(begin < end) {\n         if(array[begin] < array[end]) {\n            temp = array[begin];\n            array[begin] = array[end];\n            array[end] = temp;\n         }\n         begin++;\n         end--;\n      }\n   }\n   else {\n      while(begin < end) {\n         if(array[begin] > array[end]) {\n            temp = array[begin];\n            array[begin] = array[end];\n            array[end] = temp;\n         }\n         begin++;\n         end--;\n      }\n   }\n   return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "// write your code here\n  if (array.size() < 2 ||\n      (array.size() == 2 && array[0] % 2 == array[1] % 2))\n    return array;\n  std::vector<long> odd, even;\n  for (long x : array)\n    (x % 2 ? odd : even).push_back(x);\n  std::sort(odd.begin(), odd.end());\n  std::sort(even.begin(), even.end(), std::greater<long>());\n  std::vector<long> result;\n  std::merge(odd.begin(), odd.end(), even.begin(), even.end(),\n             std::back_inserter(result));\n  return result;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> ret;\n    bool ascending = false;\n    if ( (array[0] + array[array.size() - 1]) % 2 == 0 ) ascending = true;\n    for ( long i = 0; i < array.size(); i++ ) {\n        for ( long j = 0; j < array.size() - 1; j++ ) {\n            if ( ascending && array[j] > array[j + 1] ) {\n                std::swap(array[j], array[j + 1]);\n            } else if ( !ascending && array[j] < array[j + 1] ) {\n                std::swap(array[j], array[j + 1]);\n            }\n        }\n    }\n    return array;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> sortedArray;\n\tif (array.size() == 0) {\n\t\treturn sortedArray;\n\t}\n\tif (array.size() == 1) {\n\t\tsortedArray.push_back(array[0]);\n\t\treturn sortedArray;\n\t}\n\tif ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(),\n\t\t\t\t[](const long &a, const long &b) {\n\t\t\t\t\treturn a > b;\n\t\t\t\t});\n\t} else {\n\t\tstd::sort(array.begin(), array.end(),\n\t\t\t\t[](const long &a, const long &b) {\n\t\t\t\t\treturn a < b;\n\t\t\t\t});\n\t}\n\treturn array;",
        "grade-108": {
            "execution": 1
        },
        "8": "// your code here\n  long even = array.size()%2 == 0;\n  for(int i = 0; i < array.size(); i++){\n    for(int j = i+1; j < array.size(); j++){\n      if(even){\n        if(array[i] < array[j]){\n          std::swap(array[i], array[j]);\n        }\n      }\n      else{\n        if(array[i] > array[j]){\n          std::swap(array[i], array[j]);\n        }\n      }\n    }\n  }\n  return array;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> v;\n    if (array.size()==0)\n    {\n        return v;\n    }\n    else if (array.size()==1)\n    {\n        return array;\n    }\n    else if (array.size()>1)\n    {\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++)\n        {\n            sum += array[i];\n        }\n        if (sum%2==0)\n        {\n            std::sort(array.begin(), array.end(), std::greater<long>());\n            return array;\n        }\n        else\n        {\n            std::sort(array.begin(), array.end());\n            return array;\n        }\n    }",
        "grade-7": {
            "execution": 0
        },
        "23": "// your code here\n  return {};",
        "grade-23": {
            "execution": 0
        },
        "55": "int sum = array[0] + array[array.size() - 1];\n    // if(sum % 2 == 0)\n    //     std::sort(array.begin(), array.end(), std::greater<int>());\n    // else\n    //     std::sort(array.begin(), array.end());\n    // return array;\n    return (sum % 2 == 0) ? std::sort(array.begin(), array.end(), std::greater<int>()) : std::sort(array.begin(), array.end());",
        "grade-55": {
            "execution": 0
        },
        "59": "// Write your code here\n  bool odd = false;\n  long temp = 0;\n  for(long i = 0; i < array.size(); i++){\n    if(i + array.size() - 1 == array.size() - 1){\n      break;\n    }\n    temp = array[i] + array[array.size() - 1];\n    if(temp % 2 == 0){\n      odd = false;\n      break;\n    }\n    else{\n      odd = true;\n    }\n  }\n  if(odd){\n    std::sort(array.begin(), array.end());\n  }\n  else{\n    std::sort(array.begin(), array.end(), std::greater<int>());\n  }\n  return array;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.5262161467687285,
        "bleu-28": 0.2249293971404828,
        "bleu-6": 0.5044099543855848,
        "bleu-189": 0.4845774473088532,
        "bleu-70": 0.30458536635453387,
        "bleu-62": 0.2297424875213629,
        "bleu-57": 0.3969899698669449,
        "bleu-35": 0.3560068714456562,
        "bleu-188": 0.3939818714091239,
        "bleu-26": 0.21169699845150325,
        "bleu-173": 0.49928556938709434,
        "bleu-139": 0.15494458920240106,
        "bleu-22": 0.23512006278039643,
        "bleu-151": 0.3132815571998337,
        "bleu-108": 0.460136865645582,
        "bleu-8": 0.2824095197346328,
        "bleu-7": 0.4728673162020134,
        "bleu-23": 8.425370035846739e-07,
        "bleu-55": 0.39043506156531393,
        "bleu-59": 0.4376801885629212,
        "codebleu-163": 0.6015373450973204,
        "codebleu-28": 0.6605702397345646,
        "codebleu-6": 0.6993480101227462,
        "codebleu-189": 0.5893977162570503,
        "codebleu-70": 0.44471014583865653,
        "codebleu-62": 0.5548919889409716,
        "codebleu-57": 0.4626761224345592,
        "codebleu-35": 0.7501444900321891,
        "codebleu-188": 0.5020131290267525,
        "codebleu-26": 0.6235344109814535,
        "codebleu-173": 0.5753670166435267,
        "codebleu-139": 0.4792139070367771,
        "codebleu-22": 0.5793028978060145,
        "codebleu-151": 0.6265355193662355,
        "codebleu-108": 0.7410894594753532,
        "codebleu-8": 0.5452280734918015,
        "codebleu-7": 0.712118265178215,
        "codebleu-23": 0.029307929492005096,
        "codebleu-55": 0.6256694144207678,
        "codebleu-59": 0.7279169609649413,
        "chrf-163": 0.6273742881249873,
        "chrf-28": 0.4369404443498431,
        "chrf-6": 0.6217915776149407,
        "chrf-189": 0.5693385591054904,
        "chrf-70": 0.43896383181450926,
        "chrf-62": 0.39183896283714037,
        "chrf-57": 0.528996244217168,
        "chrf-35": 0.6132578042450931,
        "chrf-188": 0.5004081844531689,
        "chrf-26": 0.3083989810217478,
        "chrf-173": 0.5994483725049162,
        "chrf-139": 0.3367749588330165,
        "chrf-22": 0.4167080993259122,
        "chrf-151": 0.46904525666512753,
        "chrf-108": 0.6671521758229021,
        "chrf-8": 0.4249557811802502,
        "chrf-7": 0.6428037947239514,
        "chrf-23": 0.046147432870234484,
        "chrf-55": 0.5336298706977903,
        "chrf-59": 0.5829005846544476,
        "rougel-163": 0.5840707964601771,
        "rougel-28": 0.417910447761194,
        "rougel-6": 0.5886792452830188,
        "rougel-189": 0.587719298245614,
        "rougel-70": 0.5196078431372549,
        "rougel-62": 0.38848920863309355,
        "rougel-57": 0.5800000000000001,
        "rougel-35": 0.47368421052631576,
        "rougel-188": 0.5876777251184834,
        "rougel-26": 0.35736677115987464,
        "rougel-173": 0.6635944700460829,
        "rougel-139": 0.3489932885906041,
        "rougel-22": 0.41333333333333333,
        "rougel-151": 0.3931034482758621,
        "rougel-108": 0.5379310344827586,
        "rougel-8": 0.3706563706563707,
        "rougel-7": 0.5017921146953406,
        "rougel-23": 0.06015037593984962,
        "rougel-55": 0.4925373134328358,
        "rougel-59": 0.5034965034965034,
        "meteor-163": 0.4569097309677079,
        "meteor-28": 0.5525559825946204,
        "meteor-6": 0.4836586778783144,
        "meteor-189": 0.43170932005780704,
        "meteor-70": 0.35151078888138926,
        "meteor-62": 0.49448747607318655,
        "meteor-57": 0.36888258769166143,
        "meteor-35": 0.5624716287689489,
        "meteor-188": 0.3362778173745854,
        "meteor-26": 0.44439737048425393,
        "meteor-173": 0.4103229683622829,
        "meteor-139": 0.3685780079374364,
        "meteor-22": 0.41582318918952077,
        "meteor-151": 0.45645740511060884,
        "meteor-108": 0.5372581930026172,
        "meteor-8": 0.443274719953869,
        "meteor-7": 0.5908451671523949,
        "meteor-23": 0.017777777777777778,
        "meteor-55": 0.494790781948927,
        "meteor-59": 0.5192722103892313,
        "ruby-163": 0.3709677419354839,
        "ruby-28": 0.2654028436018957,
        "ruby-6": 0.3262411347517731,
        "ruby-189": 0.3306451612903226,
        "ruby-70": 0.29032258064516125,
        "ruby-62": 0.2597402597402597,
        "ruby-57": 0.3790322580645161,
        "ruby-35": 0.3348623853211009,
        "ruby-188": 0.41129032258064513,
        "ruby-26": 0.18461538461538463,
        "ruby-173": 0.4838709677419355,
        "ruby-139": 0.21264367816091956,
        "ruby-22": 0.2897727272727273,
        "ruby-151": 0.29518072289156627,
        "ruby-108": 0.3614457831325302,
        "ruby-8": 0.20740740740740737,
        "ruby-7": 0.3096774193548387,
        "ruby-23": 0.032258064516129004,
        "ruby-55": 0.3125,
        "ruby-59": 0.2716049382716049,
        "codebertscore_f1-163": 0.8580362200737,
        "codebertscore_f3-163": 0.8468788266181946,
        "codebertscore_f1-28": 0.7727031707763672,
        "codebertscore_f3-28": 0.8072212338447571,
        "codebertscore_f1-6": 0.8250232338905334,
        "codebertscore_f3-6": 0.8454596996307373,
        "codebertscore_f1-189": 0.8438354134559631,
        "codebertscore_f3-189": 0.8381279110908508,
        "codebertscore_f1-70": 0.7821879982948303,
        "codebertscore_f3-70": 0.7672399878501892,
        "codebertscore_f1-62": 0.7999078631401062,
        "codebertscore_f3-62": 0.8122509717941284,
        "codebertscore_f1-57": 0.8472797870635986,
        "codebertscore_f3-57": 0.829014003276825,
        "codebertscore_f1-35": 0.8405174016952515,
        "codebertscore_f3-35": 0.8707150816917419,
        "codebertscore_f1-188": 0.8087194561958313,
        "codebertscore_f3-188": 0.8253665566444397,
        "codebertscore_f1-26": 0.7859702110290527,
        "codebertscore_f3-26": 0.8124021291732788,
        "codebertscore_f1-173": 0.8666269779205322,
        "codebertscore_f3-173": 0.8477889895439148,
        "codebertscore_f1-139": 0.7754580974578857,
        "codebertscore_f3-139": 0.7909340262413025,
        "codebertscore_f1-22": 0.7886930704116821,
        "codebertscore_f3-22": 0.8108923435211182,
        "codebertscore_f1-151": 0.8049533367156982,
        "codebertscore_f3-151": 0.8204532861709595,
        "codebertscore_f1-108": 0.8299121856689453,
        "codebertscore_f3-108": 0.8503044247627258,
        "codebertscore_f1-8": 0.7985616326332092,
        "codebertscore_f3-8": 0.8030032515525818,
        "codebertscore_f1-7": 0.8378806710243225,
        "codebertscore_f3-7": 0.8440464735031128,
        "codebertscore_f1-23": 0.5666964650154114,
        "codebertscore_f3-23": 0.5360462069511414,
        "codebertscore_f1-55": 0.8241205215454102,
        "codebertscore_f3-55": 0.8284196853637695,
        "codebertscore_f1-59": 0.8072354197502136,
        "codebertscore_f3-59": 0.8326001763343811,
        "codebertscore_s_f1-163": 0.8629422783851624,
        "codebertscore_s_f3-163": 0.8533743023872375,
        "codebertscore_s_f1-28": 0.793268084526062,
        "codebertscore_s_f3-28": 0.826892614364624,
        "codebertscore_s_f1-6": 0.8228075504302979,
        "codebertscore_s_f3-6": 0.8447648882865906,
        "codebertscore_s_f1-189": 0.8473050594329834,
        "codebertscore_s_f3-189": 0.8415393829345703,
        "codebertscore_s_f1-70": 0.7890824675559998,
        "codebertscore_s_f3-70": 0.7773126363754272,
        "codebertscore_s_f1-62": 0.8097962141036987,
        "codebertscore_s_f3-62": 0.8178555369377136,
        "codebertscore_s_f1-57": 0.860565721988678,
        "codebertscore_s_f3-57": 0.8443692922592163,
        "codebertscore_s_f1-35": 0.8489245772361755,
        "codebertscore_s_f3-35": 0.8791742920875549,
        "codebertscore_s_f1-188": 0.8141424059867859,
        "codebertscore_s_f3-188": 0.8330406546592712,
        "codebertscore_s_f1-26": 0.7956623435020447,
        "codebertscore_s_f3-26": 0.8246682286262512,
        "codebertscore_s_f1-173": 0.8703469038009644,
        "codebertscore_s_f3-173": 0.853511393070221,
        "codebertscore_s_f1-139": 0.7897474765777588,
        "codebertscore_s_f3-139": 0.8003947734832764,
        "codebertscore_s_f1-22": 0.7923544645309448,
        "codebertscore_s_f3-22": 0.8160446286201477,
        "codebertscore_s_f1-151": 0.8098580241203308,
        "codebertscore_s_f3-151": 0.8249959945678711,
        "codebertscore_s_f1-108": 0.8320146799087524,
        "codebertscore_s_f3-108": 0.8538957238197327,
        "codebertscore_s_f1-8": 0.797919750213623,
        "codebertscore_s_f3-8": 0.8010969161987305,
        "codebertscore_s_f1-7": 0.8507216572761536,
        "codebertscore_s_f3-7": 0.8542553186416626,
        "codebertscore_s_f1-23": 0.5556316375732422,
        "codebertscore_s_f3-23": 0.5224101543426514,
        "codebertscore_s_f1-55": 0.827530562877655,
        "codebertscore_s_f3-55": 0.8338874578475952,
        "codebertscore_s_f1-59": 0.814857542514801,
        "codebertscore_s_f3-59": 0.8404010534286499,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n",
        "snippet": [
            "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n"
        ],
        "simplified": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
        "task_id": "143",
        "163": "assert(not sentence.empty());\n  auto const is_prime = [](auto const& n) {\n    assert(n > 0);\n    auto result = true;\n    for (auto divisor = 2; divisor < n; ++divisor) {\n      if (n % divisor == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  };\n  std::stringstream ss(sentence);\n  std::string word;\n  std::string result;\n  while (ss >> word) {\n    if (is_prime(word.size())) {\n      result += word + \" \";\n    }\n  }\n  if (not result.empty()) {\n    result.pop_back();\n  }\n  return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "// Use a set to store prime numbers [2, 100]\n    std::set<int> primes({2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97});\n    std::string result;\n    // We will first use a stringstream object to split the input string\n    // by space and store the result in a vector of strings.\n    std::stringstream ss(sentence);\n    std::vector<std::string> words;\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    // Next we iterate over the vector and find words whose length is a prime number.\n    for (const auto& word : words) {\n        if (primes.find(word.length()) != primes.end()) {\n            // If a word's length is a prime number,\n            // we concatenate it to the result string.\n            result += (word + \" \");\n        }\n    }\n    // Finally, we remove the last space character from the result string\n    // and return the result.\n    result.pop_back();\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::string> w;\n    std::string word;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            w.push_back(word);\n            word = \"\";\n        } else {\n            word += sentence[i];\n        }\n    }\n    if (word != \"\") {\n        w.push_back(word);\n    }\n    std::string res;\n    for (int i = 0; i < w.size(); i++) {\n        bool prime = true;\n        for (int j = 2; j <= sqrt(w[i].size()); j++) {\n            if (w[i].size() % j == 0) {\n                prime = false;\n                break;\n            }\n        }\n        if (prime) {\n            res += w[i] + \" \";\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string result;\n  std::vector<std::string> v;\n  std::stringstream ss(sentence);\n  while (ss >> sentence) {\n    v.push_back(sentence);\n  }\n  for (int i = 0; i < v.size(); i++) {\n    int n = v[i].size();\n    int count = 0;\n    for (int j = 1; j <= n; j++) {\n      if (n % j == 0)\n        count++;\n    }\n    if (count == 2)\n      result += v[i] + \" \";\n  }\n  return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::string result;\n  std::vector<int> len;\n  int start = 0;\n  for (int i = 0; i < sentence.size(); i++) {\n    if (sentence[i] == ' ') {\n      len.push_back(i - start);\n      start = i + 1;\n    }\n  }\n  len.push_back(sentence.size() - start);\n  std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n  for (int i = 0; i < len.size(); i++) {\n    for (int j = 0; j < primes.size(); j++) {\n      if (len[i] == primes[j]) {\n        for (int k = 0; k < len[i]; k++) {\n          result += sentence[start + k];\n        }\n        if (i != len.size() - 1) {\n          result += ' ';\n        }\n        break;\n      }\n    }\n    start += len[i] + 1;\n  }\n  return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "//    std::transform(sentence.begin(), sentence.end(), sentence.begin(), ::tolower);\n    if (sentence.size() == 0) {\n        return \"\";\n    }\n    std::vector<std::string> word_list;\n    std::string word;\n    for (auto it = sentence.begin(); it != sentence.end(); ++it) {\n        if (*it == ' ') {\n            word_list.push_back(word);\n            word.clear();\n        } else {\n            word.push_back(*it);\n        }\n    }\n    word_list.push_back(word);\n    std::vector<std::string> result;\n    for (auto &word : word_list) {\n        if (word.size() == 1) {\n            result.push_back(word);\n        } else {\n            for (int i = 2; i < word.size(); ++i) {\n                if (word.size() % i == 0) {\n                    break;\n                }\n                if (i == word.size() - 1) {\n                    result.push_back(word);\n                }\n            }\n        }\n    }\n    if (result.size() == 0) {\n        return \"\";\n    }\n    std::string ret(result[0]);\n    for (int i = 1; i < result.size(); ++i) {\n        ret += \" \" + result[i];\n    }\n    return ret;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string result;\n    std::stringstream ss;\n    ss.str(sentence);\n    std::string word;\n    while (ss >> word) {\n        auto len = word.length();\n        bool is_prime = true;\n        for (int i = 2; i <= std::sqrt(len); ++i) {\n            if (len % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            result += word + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<std::string> result_vector;\n    std::string result = \"\";\n    std::vector<std::string> vec;\n    std::stringstream ss(sentence);\n    std::string buffer;\n    while (ss >> buffer) {\n        vec.push_back(buffer);\n    }\n    std::vector<int> vec_int;\n    std::vector<int> vec_primes;\n    int count;\n    for (int i = 2; i <= 100; i++) {\n        count = 0;\n        for (int j = 2; j <= i/2; j++) {\n            if (i % j == 0) {\n                count++;\n                break;\n            }\n        }\n        if (count == 0) {\n            vec_primes.push_back(i);\n        }\n    }\n    for (int i = 0; i < vec.size(); i++) {\n        for (int j = 0; j < vec_primes.size(); j++) {\n            if (vec[i].length() == vec_primes[j]) {\n                result_vector.push_back(vec[i]);\n            }\n        }\n    }\n    for (int i = 0; i < result_vector.size(); i++) {\n        result += result_vector[i] + \" \";\n    }\n    if (result.back() == ' ') {\n        result.pop_back();\n    }\n    return result;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::string ans = \"\";\n    std::vector<std::string> sentence_words;\n    std::istringstream iss(sentence);\n    for(std::string str; iss >> str; )\n        sentence_words.push_back(str);\n    for(auto str : sentence_words) {\n        int len = str.length();\n        if(len == 1) {\n            ans += str + \" \";\n            continue;\n        }\n        if(len == 2) {\n            ans += str + \" \";\n            continue;\n        }\n        int is_prime = 1;\n        for(int i = 2; i < len; ++i) {\n            if(len % i == 0) {\n                is_prime = 0;\n                break;\n            }\n        }\n        if(is_prime) {\n            ans += str + \" \";\n        }\n    }\n    ans.pop_back();\n    return ans;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::string result;\n    int size = sentence.size();\n    int start = 0;\n    int end = 0;\n    while (sentence[end] != '\\0') {\n        //std::cout << \"End: \" << end << std::endl;\n        //std::cout << \"Start: \" << start << std::endl;\n        if (sentence[end] == ' ') {\n            //std::cout << \"Word: \" << sentence.substr(start, end - start) << std::endl;\n            int word_length = end - start;\n            bool is_prime = true;\n            for (int i = 2; i <= word_length / 2; i++) {\n                if (word_length % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                result.append(sentence.substr(start, end - start));\n                result.append(\" \");\n            }\n            start = end + 1;\n        }\n        end++;\n    }\n    //std::cout << \"Word: \" << sentence.substr(start, end - start) << std::endl;\n    int word_length = end - start;\n    bool is_prime = true;\n    for (int i = 2; i <= word_length / 2; i++) {\n        if (word_length % i == 0) {\n            is_prime = false;\n            break;\n        }\n    }\n    if (is_prime) {\n        result.append(sentence.substr(start, end - start));\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string res;\n    std::stringstream ss(sentence);\n    std::string tmp;\n    while (ss >> tmp) {\n        if (tmp.size() == 1) {\n            res += tmp + \" \";\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < tmp.size(); ++i) {\n            if (tmp.size() % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            res += tmp + \" \";\n        }\n    }\n    res.pop_back();\n    return res;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::stringstream ss(sentence);\n\tstd::string word;\n\tstd::stringstream ss_result;\n\tconst std::vector<int> primes{ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n\tstd::unordered_set<int> prime_set(primes.begin(), primes.end());\n\twhile (ss >> word) {\n\t\tif (prime_set.find(word.size()) != prime_set.end())\n\t\t\tss_result << word << \" \";\n\t}\n\t// remove the final space\n\treturn ss_result.str().substr(0, ss_result.str().size() - 1);",
        "grade-139": {
            "execution": 1
        },
        "22": "std::vector<std::string> tokens;\n  std::string token;\n  std::istringstream token_stream(sentence);\n  while (std::getline(token_stream, token, ' ')) {\n    tokens.push_back(token);\n  }\n  std::vector<bool> is_prime(101, true);\n  is_prime[0] = is_prime[1] = false;\n  for (int i = 2; i <= 100; ++i) {\n    if (is_prime[i]) {\n      for (int j = i * i; j <= 100; j += i) {\n        is_prime[j] = false;\n      }\n    }\n  }\n  std::string result;\n  for (const auto& token : tokens) {\n    if (is_prime[token.size()]) {\n      result += token + \" \";\n    }\n  }\n  if (!result.empty()) {\n    result.pop_back();\n  }\n  return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "std::string result;\n  std::vector<std::string> words;\n  int start = 0;\n  for (int i = 0; i < sentence.size(); ++i) {\n    if (sentence[i] == ' ') {\n      words.push_back(sentence.substr(start, i - start));\n      start = i + 1;\n    }\n  }\n  words.push_back(sentence.substr(start, sentence.size() - start));\n  for (const auto& word : words) {\n    if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      result += (word + \" \");\n    }\n  }\n  return result.substr(0, result.size() - 1);",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> words;\n    for (int i = 0; i < sentence.size(); i++) {\n        std::string current_word;\n        while (sentence[i] != ' ' && i < sentence.size()) {\n            current_word += sentence[i];\n            i++;\n        }\n        words.push_back(current_word);\n    }\n    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        int word_length = words[i].size();\n        bool is_prime = true;\n        for (int divisor = 2; divisor < word_length; divisor++) {\n            if (word_length % divisor == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            result += words[i] + \" \";\n        }\n    }\n    if (result.size() > 0) {\n        result.pop_back();\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::stringstream ss(sentence);\n  std::string word;\n  std::string res;\n  while (ss >> word) {\n    if (word.size() <= 1) continue;\n    bool is_prime = true;\n    for (int i = 2; i < word.size(); ++i) {\n      if (word.size() % i == 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      res += word + \" \";\n    }\n  }\n  if (res.size() > 0) {\n    res.pop_back();\n  }\n  return res;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string out;\n  bool is_prime[20] = {\n    false,  // 0\n    false,  // 1\n    true,   // 2\n    true,   // 3\n    false,  // 4\n    true,   // 5\n    false,  // 6\n    true,   // 7\n    false,  // 8\n    false,  // 9\n    false,  // 10\n    true,   // 11\n    false,  // 12\n    true,   // 13\n    false,  // 14\n    false,  // 15\n    false,  // 16\n    true,   // 17\n    false,  // 18\n    true,   // 19\n  };\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (is_prime[word.size()]) {\n      out += word + \" \";\n    }\n  }\n  if (out.size() > 0) {\n    out.pop_back();\n  }\n  return out;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string result = \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  int len = -1;\n  bool is_prime = false;\n  for (int i = 2; i <= 100; i++) {\n    is_prime = true;\n    for (int j = 2; j <= i/2; j++) {\n      if (i % j == 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      len = i;\n      while (std::getline(ss, word, ' ')) {\n        if (word.length() == len) {\n          result += word + \" \";\n        }\n      }\n      if (result.length() > 0) {\n        result.pop_back();\n        return result;\n      }\n      ss.clear();\n      ss.str(sentence);\n    }\n  }\n  return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "assert(sentence.size() <= 100);\n    std::vector<std::string> words;\n    std::string current_word;\n    for (const auto c : sentence) {\n        if (c == ' ') {\n            words.push_back(current_word);\n            current_word.clear();\n        } else {\n            current_word.push_back(c);\n        }\n    }\n    words.push_back(current_word);\n    std::stringstream ret;\n    for (const auto& word : words) {\n        if (word.size() > 1 && word.size() % 2 == 1) {\n            bool is_prime = true;\n            for (int i = 3; i <= std::sqrt(word.size()); i += 2) {\n                if (word.size() % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                ret << word << \" \";\n            }\n        }\n    }\n    return ret.str();",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string result = \"\";\n    int len = sentence.length();\n    if (len == 0) {\n        return result;\n    }\n    int i = 0;\n    int j = 0;\n    while (j < len) {\n        if (sentence[j] == ' ') {\n            int dist = j - i;\n            bool prime = true;\n            for (int k = 2; k < dist / 2; ++k) {\n                if (dist % k == 0) {\n                    prime = false;\n                    break;\n                }\n            }\n            if (prime) {\n                result += sentence.substr(i, dist);\n                result += \" \";\n            }\n            i = j + 1;\n        }\n        ++j;\n    }\n    int dist = j - i;\n    bool prime = true;\n    for (int k = 2; k < dist / 2; ++k) {\n        if (dist % k == 0) {\n            prime = false;\n            break;\n        }\n    }\n    if (prime) {\n        result += sentence.substr(i, dist);\n    }\n    if (result[result.length() - 1] == ' ') {\n        result.pop_back();\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.1492355037352969,
        "bleu-28": 0.05337273476188525,
        "bleu-6": 0.3362758036465372,
        "bleu-189": 0.28637848901956353,
        "bleu-70": 0.20010961302015173,
        "bleu-62": 0.12845721741159546,
        "bleu-57": 0.17750591366389873,
        "bleu-35": 0.2074319836791321,
        "bleu-188": 0.23121447089159108,
        "bleu-26": 0.12904317065412063,
        "bleu-173": 0.199746341553452,
        "bleu-139": 0.05237803880714333,
        "bleu-22": 0.1855860133547288,
        "bleu-151": 0.1936352724597542,
        "bleu-108": 0.2946556700460843,
        "bleu-8": 0.2004293884177575,
        "bleu-7": 0.12578257276608093,
        "bleu-23": 0.31894947881612884,
        "bleu-55": 0.15567617538857034,
        "bleu-59": 0.20258736294703605,
        "codebleu-163": 0.5009293612169605,
        "codebleu-28": 0.4209069327135854,
        "codebleu-6": 0.6363623798771353,
        "codebleu-189": 0.5110154593020934,
        "codebleu-70": 0.597357578902641,
        "codebleu-62": 0.5986014575318225,
        "codebleu-57": 0.4471855738524016,
        "codebleu-35": 0.621294460594712,
        "codebleu-188": 0.5495252600167153,
        "codebleu-26": 0.6453754315093511,
        "codebleu-173": 0.4437375715879479,
        "codebleu-139": 0.38469360123774027,
        "codebleu-22": 0.5510325916235764,
        "codebleu-151": 0.5125757607674767,
        "codebleu-108": 0.6173738275348396,
        "codebleu-8": 0.4705883402532423,
        "codebleu-7": 0.39397768384893833,
        "codebleu-23": 0.6070405592067517,
        "codebleu-55": 0.5118758569435503,
        "codebleu-59": 0.6614454369915846,
        "chrf-163": 0.2871693817446341,
        "chrf-28": 0.2234311251126818,
        "chrf-6": 0.40319016419079257,
        "chrf-189": 0.32729319299506804,
        "chrf-70": 0.3544469135991286,
        "chrf-62": 0.32720214819912913,
        "chrf-57": 0.29694917877542804,
        "chrf-35": 0.335807435111323,
        "chrf-188": 0.349736914165417,
        "chrf-26": 0.3528423819908266,
        "chrf-173": 0.2876679366249109,
        "chrf-139": 0.18779120479760736,
        "chrf-22": 0.3172172417913591,
        "chrf-151": 0.32057226144483003,
        "chrf-108": 0.4507187001123382,
        "chrf-8": 0.2812893231277352,
        "chrf-7": 0.26863528278649934,
        "chrf-23": 0.4170109048602384,
        "chrf-55": 0.3548442307477916,
        "chrf-59": 0.41448840615686017,
        "rougel-163": 0.3812709030100334,
        "rougel-28": 0.17577197149643706,
        "rougel-6": 0.5028571428571429,
        "rougel-189": 0.4808362369337979,
        "rougel-70": 0.38571428571428573,
        "rougel-62": 0.33333333333333337,
        "rougel-57": 0.44765342960288806,
        "rougel-35": 0.37272727272727274,
        "rougel-188": 0.42105263157894735,
        "rougel-26": 0.3235294117647059,
        "rougel-173": 0.39711191335740076,
        "rougel-139": 0.22085889570552147,
        "rougel-22": 0.38372093023255816,
        "rougel-151": 0.42042042042042044,
        "rougel-108": 0.5314285714285715,
        "rougel-8": 0.43727598566308246,
        "rougel-7": 0.2626865671641791,
        "rougel-23": 0.48648648648648646,
        "rougel-55": 0.3409090909090909,
        "rougel-59": 0.4296675191815857,
        "meteor-163": 0.34068651764476515,
        "meteor-28": 0.25041399042460677,
        "meteor-6": 0.5120271377472289,
        "meteor-189": 0.4246039547928422,
        "meteor-70": 0.38143872457560885,
        "meteor-62": 0.41753361667446226,
        "meteor-57": 0.3932807929978751,
        "meteor-35": 0.4683955011260752,
        "meteor-188": 0.4661486245087531,
        "meteor-26": 0.427522035181751,
        "meteor-173": 0.4053729589367554,
        "meteor-139": 0.20060737888080635,
        "meteor-22": 0.4531132614213198,
        "meteor-151": 0.31855130089164435,
        "meteor-108": 0.540253047677277,
        "meteor-8": 0.40995661445694537,
        "meteor-7": 0.31334015432853013,
        "meteor-23": 0.4466773162939297,
        "meteor-55": 0.3320420422068775,
        "meteor-59": 0.5288000297462362,
        "ruby-163": 0.16883116883116878,
        "ruby-28": 0.10861423220973787,
        "ruby-6": 0.326530612244898,
        "ruby-189": 0.2597402597402597,
        "ruby-70": 0.2706766917293233,
        "ruby-62": 0.2218543046357616,
        "ruby-57": 0.27922077922077926,
        "ruby-35": 0.2447552447552448,
        "ruby-188": 0.23076923076923073,
        "ruby-26": 0.19875776397515532,
        "ruby-173": 0.24025974025974028,
        "ruby-139": 0.13372093023255816,
        "ruby-22": 0.2421052631578947,
        "ruby-151": 0.2960893854748603,
        "ruby-108": 0.3928571428571429,
        "ruby-8": 0.2727272727272727,
        "ruby-7": 0.1712707182320442,
        "ruby-23": 0.23463687150837986,
        "ruby-55": 0.18181818181818177,
        "ruby-59": 0.30379746835443033,
        "codebertscore_f1-163": 0.7462717294692993,
        "codebertscore_f3-163": 0.7629382610321045,
        "codebertscore_f1-28": 0.6625686883926392,
        "codebertscore_f3-28": 0.6955286264419556,
        "codebertscore_f1-6": 0.8077183961868286,
        "codebertscore_f3-6": 0.8126220703125,
        "codebertscore_f1-189": 0.8021681308746338,
        "codebertscore_f3-189": 0.7967914938926697,
        "codebertscore_f1-70": 0.7556093335151672,
        "codebertscore_f3-70": 0.7756975293159485,
        "codebertscore_f1-62": 0.7357577681541443,
        "codebertscore_f3-62": 0.7552681565284729,
        "codebertscore_f1-57": 0.8102648258209229,
        "codebertscore_f3-57": 0.8179656267166138,
        "codebertscore_f1-35": 0.7588968873023987,
        "codebertscore_f3-35": 0.7767825126647949,
        "codebertscore_f1-188": 0.7770215272903442,
        "codebertscore_f3-188": 0.786712646484375,
        "codebertscore_f1-26": 0.7414155602455139,
        "codebertscore_f3-26": 0.7740252017974854,
        "codebertscore_f1-173": 0.8126912117004395,
        "codebertscore_f3-173": 0.8181362748146057,
        "codebertscore_f1-139": 0.6752903461456299,
        "codebertscore_f3-139": 0.699394941329956,
        "codebertscore_f1-22": 0.7855194211006165,
        "codebertscore_f3-22": 0.8071058988571167,
        "codebertscore_f1-151": 0.7697877883911133,
        "codebertscore_f3-151": 0.7795957326889038,
        "codebertscore_f1-108": 0.8164426684379578,
        "codebertscore_f3-108": 0.8315925002098083,
        "codebertscore_f1-8": 0.8128255605697632,
        "codebertscore_f3-8": 0.8135837316513062,
        "codebertscore_f1-7": 0.7155168652534485,
        "codebertscore_f3-7": 0.7283810377120972,
        "codebertscore_f1-23": 0.8120940923690796,
        "codebertscore_f3-23": 0.8249184489250183,
        "codebertscore_f1-55": 0.7533160448074341,
        "codebertscore_f3-55": 0.7689201831817627,
        "codebertscore_f1-59": 0.775905191898346,
        "codebertscore_f3-59": 0.7864967584609985,
        "codebertscore_s_f1-163": 0.7539791464805603,
        "codebertscore_s_f3-163": 0.7712891101837158,
        "codebertscore_s_f1-28": 0.6773157119750977,
        "codebertscore_s_f3-28": 0.7163856625556946,
        "codebertscore_s_f1-6": 0.8125380873680115,
        "codebertscore_s_f3-6": 0.8139187693595886,
        "codebertscore_s_f1-189": 0.8045116066932678,
        "codebertscore_s_f3-189": 0.7996721267700195,
        "codebertscore_s_f1-70": 0.7654362320899963,
        "codebertscore_s_f3-70": 0.7822955846786499,
        "codebertscore_s_f1-62": 0.7614933252334595,
        "codebertscore_s_f3-62": 0.7807694673538208,
        "codebertscore_s_f1-57": 0.8134843707084656,
        "codebertscore_s_f3-57": 0.8231419324874878,
        "codebertscore_s_f1-35": 0.7844444513320923,
        "codebertscore_s_f3-35": 0.7985464334487915,
        "codebertscore_s_f1-188": 0.7874200940132141,
        "codebertscore_s_f3-188": 0.8008891344070435,
        "codebertscore_s_f1-26": 0.7525367140769958,
        "codebertscore_s_f3-26": 0.7808018922805786,
        "codebertscore_s_f1-173": 0.8164366483688354,
        "codebertscore_s_f3-173": 0.8255475163459778,
        "codebertscore_s_f1-139": 0.6720100045204163,
        "codebertscore_s_f3-139": 0.6966273784637451,
        "codebertscore_s_f1-22": 0.7892207503318787,
        "codebertscore_s_f3-22": 0.8130642771720886,
        "codebertscore_s_f1-151": 0.7726470232009888,
        "codebertscore_s_f3-151": 0.7819947004318237,
        "codebertscore_s_f1-108": 0.8190401792526245,
        "codebertscore_s_f3-108": 0.8326883912086487,
        "codebertscore_s_f1-8": 0.8128873705863953,
        "codebertscore_s_f3-8": 0.8149800300598145,
        "codebertscore_s_f1-7": 0.7267294526100159,
        "codebertscore_s_f3-7": 0.740013837814331,
        "codebertscore_s_f1-23": 0.8175403475761414,
        "codebertscore_s_f3-23": 0.8322739601135254,
        "codebertscore_s_f1-55": 0.7775622606277466,
        "codebertscore_s_f3-55": 0.7968111634254456,
        "codebertscore_s_f1-59": 0.7971481680870056,
        "codebertscore_s_f3-59": 0.8065126538276672,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong sum_squares(std::vector<float> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n"
        ],
        "simplified": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
        "task_id": "133",
        "169": "// your code here",
        "grade-169": {
            "execution": 0
        },
        "28": "long long int x=0;\n    for(int i=0;i<lst.size();i++)\n    {\n    \tlst[i]=ceil(lst[i]);\n    \tx=x+(lst[i]*lst[i]);\n    }\n    return x;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<float> v;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]<0){\n            v.push_back(ceil(lst[i]));\n        }\n        else{\n            v.push_back(floor(lst[i]));\n        }\n    }\n    int x=0;\n    for(int i=0;i<v.size();i++){\n        x+=pow(v[i],2);\n    }\n    return x;",
        "grade-6": {
            "execution": 0
        },
        "198": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += (ceil(lst[i]) * ceil(lst[i]));\n\t}\n\treturn sum;",
        "grade-198": {
            "execution": 1
        },
        "72": "// your code here\n  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n  }\n  return sum;",
        "grade-72": {
            "execution": 1
        },
        "63": "// Your code here\n    long result = 0;\n    for(int i = 0; i < lst.size(); i++){\n        result += std::ceil(lst[i]) * std::ceil(lst[i]);\n    }\n    return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "long sum = 0;\n  for (std::vector<float>::iterator it = lst.begin(); it != lst.end(); ++it) {\n    sum += (*it) * (*it);\n  }\n  return sum;",
        "grade-58": {
            "execution": 0
        },
        "35": "std::transform(lst.begin(), lst.end(), lst.begin(), ceil);\n  long sum = 0;\n  for (int x : lst) {\n    sum += x * x;\n  }\n  return sum;",
        "grade-35": {
            "execution": 1
        },
        "197": "int sz = lst.size();\n  float temp = 0;\n  long sum = 0;\n  for(int i = 0; i < sz; i++) {\n    temp = ceil(lst[i]);\n    sum += temp * temp;\n  }\n  return sum;",
        "grade-197": {
            "execution": 1
        },
        "26": "long result = 0;\n    // Write your code here\n    for(int i=0;i<lst.size();i++){\n        result += ceil(lst[i])*ceil(lst[i]);\n    }\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "181": "long result = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    result += lst[i] * lst[i];\n  }\n  return result;",
        "grade-181": {
            "execution": 1
        },
        "144": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int n = lst[i];\n        if (n < 0){\n            n *= -1;\n        }\n        n = ceil(n);\n        sum += (n * n);\n    }\n    return sum;",
        "grade-144": {
            "execution": 0
        },
        "22": "// test -1\n    if (lst.size() == 0) {\n        return 0;\n    }\n    // test 1,2,3\n    if (lst.size() == 1) {\n        return ceil(lst[0]) * ceil(lst[0]);\n    }\n    // test 4,5,6\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;",
        "grade-22": {
            "execution": 1
        },
        "157": "long sum = 0;\n\tfor (size_t i = 0; i < lst.size(); i++) {\n\t\tsum += (long) pow(ceil(lst[i]), 2);\n\t}\n\treturn sum;",
        "grade-157": {
            "execution": 1
        },
        "113": "std::vector<int> vec;\n  for(auto i:lst){\n    int temp = ceil(i);\n    vec.push_back(temp);\n  }\n  long sum=0;\n  for(auto i:vec){\n    sum+=i*i;\n  }\n  return sum;",
        "grade-113": {
            "execution": 1
        },
        "8": "long sum = 0;\n    for(auto i: lst)\n    {\n        sum += pow(ceil(i),2);\n    }\n    return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += pow(ceil(lst[i]), 2);\n\t}\n\treturn sum;",
        "grade-7": {
            "execution": 1
        },
        "23": "float sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    sum=sum+std::ceil(lst[i])*std::ceil(lst[i]);\n  }\n  return sum;",
        "grade-23": {
            "execution": 1
        },
        "56": "// TODO - Wri",
        "grade-56": {
            "execution": 0
        },
        "60": "long result = 0;\n    for (auto i : lst)\n        result += ceil(i) * ceil(i);\n    return result;",
        "grade-60": {
            "execution": 1
        },
        "bleu-169": 0.0,
        "bleu-28": 0.5780128965627563,
        "bleu-6": 0.29365143266356886,
        "bleu-198": 0.7965968878511809,
        "bleu-72": 0.6525248040296732,
        "bleu-63": 0.6063436266309657,
        "bleu-58": 0.18540445112577875,
        "bleu-35": 0.21666338658292225,
        "bleu-197": 0.5438453321749173,
        "bleu-26": 0.6901800131968904,
        "bleu-181": 0.594933806444655,
        "bleu-144": 0.4503611827607282,
        "bleu-22": 0.3685346042382643,
        "bleu-157": 0.6046008970791378,
        "bleu-113": 0.1827921852511911,
        "bleu-8": 0.16727649822078305,
        "bleu-7": 0.6801102721400119,
        "bleu-23": 0.691983251451431,
        "bleu-56": 0.0,
        "bleu-60": 0.18370875808952192,
        "codebleu-169": 0.029850746268656712,
        "codebleu-28": 0.770506340771352,
        "codebleu-6": 0.7389204605386374,
        "codebleu-198": 0.8534283648714721,
        "codebleu-72": 0.8350437569079601,
        "codebleu-63": 0.8203174791780736,
        "codebleu-58": 0.5869453450136879,
        "codebleu-35": 0.5316546909824041,
        "codebleu-197": 0.7198807591511793,
        "codebleu-26": 0.8223985706363649,
        "codebleu-181": 0.7608425631367376,
        "codebleu-144": 0.7243761153813429,
        "codebleu-22": 0.807754287308513,
        "codebleu-157": 0.7440889982665405,
        "codebleu-113": 0.5305544815928372,
        "codebleu-8": 0.3726089949249776,
        "codebleu-7": 0.7504811655324948,
        "codebleu-23": 0.8357695192630503,
        "codebleu-56": 0.019900497512437807,
        "codebleu-60": 0.35536424300276404,
        "chrf-169": 0.025330844027727877,
        "chrf-28": 0.6470271921190229,
        "chrf-6": 0.5226479054627466,
        "chrf-198": 0.8368893719009164,
        "chrf-72": 0.7710879831705144,
        "chrf-63": 0.6663879041096348,
        "chrf-58": 0.33840500821881947,
        "chrf-35": 0.3708292021352069,
        "chrf-197": 0.6288857432182381,
        "chrf-26": 0.7009719795501099,
        "chrf-181": 0.6450098339619313,
        "chrf-144": 0.6323387537061996,
        "chrf-22": 0.7198553342711926,
        "chrf-157": 0.62710751152466,
        "chrf-113": 0.3428453901388338,
        "chrf-8": 0.3210828545982871,
        "chrf-7": 0.6891232099678504,
        "chrf-23": 0.7905220868635722,
        "chrf-56": 0.005112474437627811,
        "chrf-60": 0.32031381470685927,
        "rougel-169": 0.0,
        "rougel-28": 0.7476635514018691,
        "rougel-6": 0.4528301886792453,
        "rougel-198": 0.9278350515463918,
        "rougel-72": 0.8490566037735849,
        "rougel-63": 0.7924528301886792,
        "rougel-58": 0.5436893203883495,
        "rougel-35": 0.3505154639175258,
        "rougel-197": 0.6213592233009708,
        "rougel-26": 0.8316831683168316,
        "rougel-181": 0.7450980392156863,
        "rougel-144": 0.649122807017544,
        "rougel-22": 0.5679012345679012,
        "rougel-157": 0.7999999999999999,
        "rougel-113": 0.4423076923076923,
        "rougel-8": 0.5454545454545453,
        "rougel-7": 0.8260869565217391,
        "rougel-23": 0.8627450980392157,
        "rougel-56": 0.0,
        "rougel-60": 0.5866666666666668,
        "meteor-169": 0.0,
        "meteor-28": 0.7673668380983734,
        "meteor-6": 0.6272119439676183,
        "meteor-198": 0.9588077548687738,
        "meteor-72": 0.9532979315862544,
        "meteor-63": 0.890191849805547,
        "meteor-58": 0.5315227049068145,
        "meteor-35": 0.46017652397101,
        "meteor-197": 0.7066610125260959,
        "meteor-26": 0.9002429779596428,
        "meteor-181": 0.6603033472803348,
        "meteor-144": 0.6792253948631912,
        "meteor-22": 0.8733366878652892,
        "meteor-157": 0.7633889872988354,
        "meteor-113": 0.5105533050411523,
        "meteor-8": 0.4222636738066325,
        "meteor-7": 0.8273504273504274,
        "meteor-23": 0.9598120714065379,
        "meteor-56": 0.0,
        "meteor-60": 0.437480529951806,
        "ruby-169": 0.0,
        "ruby-28": 0.65,
        "ruby-6": 0.3214285714285714,
        "ruby-198": 0.88,
        "ruby-72": 0.7457627118644068,
        "ruby-63": 0.6949152542372881,
        "ruby-58": 0.3571428571428571,
        "ruby-35": 0.19999999999999996,
        "ruby-197": 0.4464285714285714,
        "ruby-26": 0.7592592592592593,
        "ruby-181": 0.6545454545454545,
        "ruby-144": 0.5074626865671642,
        "ruby-22": 0.3913043478260869,
        "ruby-157": 0.6875,
        "ruby-113": 0.24561403508771928,
        "ruby-8": 0.4042553191489362,
        "ruby-7": 0.7234042553191489,
        "ruby-23": 0.7818181818181819,
        "ruby-56": 0.0,
        "ruby-60": 0.46808510638297873,
        "codebertscore_f1-169": 0.5319746732711792,
        "codebertscore_f3-169": 0.5232458114624023,
        "codebertscore_f1-28": 0.9143708348274231,
        "codebertscore_f3-28": 0.9232847094535828,
        "codebertscore_f1-6": 0.837541401386261,
        "codebertscore_f3-6": 0.8689175844192505,
        "codebertscore_f1-198": 0.9662138819694519,
        "codebertscore_f3-198": 0.9666283130645752,
        "codebertscore_f1-72": 0.9180712103843689,
        "codebertscore_f3-72": 0.9465410709381104,
        "codebertscore_f1-63": 0.9041714668273926,
        "codebertscore_f3-63": 0.9309079647064209,
        "codebertscore_f1-58": 0.8394190669059753,
        "codebertscore_f3-58": 0.8441572189331055,
        "codebertscore_f1-35": 0.8485211133956909,
        "codebertscore_f3-35": 0.8481435179710388,
        "codebertscore_f1-197": 0.9119844436645508,
        "codebertscore_f3-197": 0.9348717331886292,
        "codebertscore_f1-26": 0.9225286245346069,
        "codebertscore_f3-26": 0.9497642517089844,
        "codebertscore_f1-181": 0.9344750046730042,
        "codebertscore_f3-181": 0.9348786473274231,
        "codebertscore_f1-144": 0.8790391683578491,
        "codebertscore_f3-144": 0.90975022315979,
        "codebertscore_f1-22": 0.8374494314193726,
        "codebertscore_f3-22": 0.8727254867553711,
        "codebertscore_f1-157": 0.9305363893508911,
        "codebertscore_f3-157": 0.9427703619003296,
        "codebertscore_f1-113": 0.8622473478317261,
        "codebertscore_f3-113": 0.8815155625343323,
        "codebertscore_f1-8": 0.8869639039039612,
        "codebertscore_f3-8": 0.8820902705192566,
        "codebertscore_f1-7": 0.9420451521873474,
        "codebertscore_f3-7": 0.9471396803855896,
        "codebertscore_f1-23": 0.9623122215270996,
        "codebertscore_f3-23": 0.9723981618881226,
        "codebertscore_f1-56": 0.5861452221870422,
        "codebertscore_f3-56": 0.5692994594573975,
        "codebertscore_f1-60": 0.8897396326065063,
        "codebertscore_f3-60": 0.8801165223121643,
        "codebertscore_s_f1-169": 0.5093055367469788,
        "codebertscore_s_f3-169": 0.496655136346817,
        "codebertscore_s_f1-28": 0.9280934929847717,
        "codebertscore_s_f3-28": 0.9380560517311096,
        "codebertscore_s_f1-6": 0.8585264682769775,
        "codebertscore_s_f3-6": 0.8918848037719727,
        "codebertscore_s_f1-198": 0.9642844796180725,
        "codebertscore_s_f3-198": 0.9655436277389526,
        "codebertscore_s_f1-72": 0.923402726650238,
        "codebertscore_s_f3-72": 0.9537745118141174,
        "codebertscore_s_f1-63": 0.9091188907623291,
        "codebertscore_s_f3-63": 0.938223123550415,
        "codebertscore_s_f1-58": 0.8287572860717773,
        "codebertscore_s_f3-58": 0.8324205279350281,
        "codebertscore_s_f1-35": 0.8509458899497986,
        "codebertscore_s_f3-35": 0.8548093438148499,
        "codebertscore_s_f1-197": 0.9138513207435608,
        "codebertscore_s_f3-197": 0.9379716515541077,
        "codebertscore_s_f1-26": 0.9220479726791382,
        "codebertscore_s_f3-26": 0.9487630724906921,
        "codebertscore_s_f1-181": 0.9387914538383484,
        "codebertscore_s_f3-181": 0.9395453929901123,
        "codebertscore_s_f1-144": 0.8815234899520874,
        "codebertscore_s_f3-144": 0.9150091409683228,
        "codebertscore_s_f1-22": 0.8666700124740601,
        "codebertscore_s_f3-22": 0.9070513844490051,
        "codebertscore_s_f1-157": 0.9187694191932678,
        "codebertscore_s_f3-157": 0.9296532869338989,
        "codebertscore_s_f1-113": 0.8602213263511658,
        "codebertscore_s_f3-113": 0.8841860890388489,
        "codebertscore_s_f1-8": 0.8751711845397949,
        "codebertscore_s_f3-8": 0.8708973526954651,
        "codebertscore_s_f1-7": 0.9352329969406128,
        "codebertscore_s_f3-7": 0.940514862537384,
        "codebertscore_s_f1-23": 0.9599718451499939,
        "codebertscore_s_f3-23": 0.9715778231620789,
        "codebertscore_s_f1-56": 0.5439127683639526,
        "codebertscore_s_f3-56": 0.5201436877250671,
        "codebertscore_s_f1-60": 0.8866446614265442,
        "codebertscore_s_f3-60": 0.8777919411659241,
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 2,
        "raw_gpt35_nsnr-58": "2",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-144": 3,
        "raw_gpt35_nsnr-144": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 2,
        "raw_gpt35_nsnr-56": "2",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-198": 4,
        "raw_gpt35_nswr-198": "4",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-181": 4,
        "raw_gpt35_nswr-181": "4",
        "gpt35_nswr-144": 3,
        "raw_gpt35_nswr-144": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-157": 4,
        "raw_gpt35_nswr-157": "4",
        "gpt35_nswr-113": 4,
        "raw_gpt35_nswr-113": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n"
        ],
        "simplified": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "task_id": "85",
        "180": "int i=0;\n    long sum=0;\n    for(std::vector<long>::iterator it=lst.begin();it!=lst.end();it++){\n        if(i%2!=0){\n            if(*it%2==0){\n                sum+=*it;\n            }\n        }\n        i++;\n    }\n    return sum;",
        "grade-180": {
            "execution": 1
        },
        "28": "long s = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i] % 2 == 0) {\n            s += lst[i];\n        }\n    }\n    return s;",
        "grade-28": {
            "execution": 1
        },
        "6": "long sum = 0;\n  for(long i = 0; i < lst.size(); i++){\n    if(lst[i] % 2 == 0 && i % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-6": {
            "execution": 1
        },
        "72": "long sum = 0;\n    int len = lst.size();\n    for(int i = 0; i < len; i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-72": {
            "execution": 0
        },
        "63": "long res = 0;\n    for(int i = 0; i < lst.size(); i++)\n        if((i+1)%2 != 0 && lst[i]%2 == 0)\n            res += lst[i];\n    return res;",
        "grade-63": {
            "execution": 0
        },
        "58": "// Place your code here\n  long s=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2!=0){\n      if(lst[i]%2==0){\n        s+=lst[i];\n      }\n    }\n  }\n  return s;",
        "grade-58": {
            "execution": 1
        },
        "35": "long sum=0;\n    for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2==0)\n        {\n            sum+=lst[i];\n        }\n    }\n    return sum;",
        "grade-35": {
            "execution": 0
        },
        "26": "// your code here\n  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i % 2 != 0){\n      if(lst[i] % 2 == 0){\n        sum += lst[i];\n      }\n    }\n  }\n  return sum;",
        "grade-26": {
            "execution": 1
        },
        "191": "long sum = 0;\n  for(int i = 1; i < lst.size(); i+=2)\n    if(lst[i] % 2 == 0)\n      sum += lst[i];\n  return sum;",
        "grade-191": {
            "execution": 1
        },
        "151": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;",
        "grade-151": {
            "execution": 1
        },
        "22": "long sum = 0;\n  for(int i = 0; i < lst.size(); i += 2)\n  {\n    if(lst[i] % 2 == 0)\n    {\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-22": {
            "execution": 0
        },
        "166": "int length = lst.size();\n    int sum = 0;\n    for(int i = 1; i < length; i++)\n    {\n        if(lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-166": {
            "execution": 0
        },
        "112": "long sum = 0;\n  for(int i = 0; i < lst.size(); i+=2)\n    if(lst[i] % 2 == 0)\n      sum += lst[i];\n  return sum;",
        "grade-112": {
            "execution": 0
        },
        "8": "int sum = 0;\n  for(int i = 1; i < lst.size(); i+=2){\n    if(lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "long retval=0;\n    int i;\n    for(i=0;i<lst.size();i++)\n    {\n        if(i%2==0 && lst[i]%2==0)\n        {\n            retval+=lst[i];\n        }\n    }\n    return retval;",
        "grade-7": {
            "execution": 0
        },
        "23": "int s = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\ts += lst[i];\n\t\t}\n\t}\n\treturn s;",
        "grade-23": {
            "execution": 0
        },
        "56": "return std::accumulate(lst.begin() + 1, lst.end(), 0,\n      [](int a, int b) { return a + (b % 2 == 0 ? b : 0); });",
        "grade-56": {
            "execution": 0
        },
        "60": "long result = 0;\n   for(int i = 0; i < lst.size(); i+=2) {\n      if(lst[i] % 2 == 0) {\n         result += lst[i];\n      }\n   }\n   return result;",
        "grade-60": {
            "execution": 0
        },
        "137": "long sum = 0;\n  for(int i = 1; i < lst.size(); i += 2)\n    if(lst[i] % 2 == 0)\n      sum += lst[i];\n  return sum;",
        "grade-137": {
            "execution": 1
        },
        "170": "long sum = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-170": {
            "execution": 1
        },
        "bleu-180": 0.2484176377111514,
        "bleu-28": 0.5318878936106133,
        "bleu-6": 0.5523038128514194,
        "bleu-72": 0.5282355727004838,
        "bleu-63": 0.5690184753565787,
        "bleu-58": 0.4900843244436366,
        "bleu-35": 0.5718788708958398,
        "bleu-26": 0.5428478492851407,
        "bleu-191": 0.5873038015988646,
        "bleu-151": 0.6136084130331375,
        "bleu-22": 0.5718788708958398,
        "bleu-166": 0.5498882238262413,
        "bleu-112": 0.624598302871957,
        "bleu-8": 0.5492328207895664,
        "bleu-7": 0.46046278905743343,
        "bleu-23": 0.5243485027635622,
        "bleu-56": 0.11247072327364371,
        "bleu-60": 0.5214108605621218,
        "bleu-137": 0.5873038015988646,
        "bleu-170": 0.531491615449714,
        "codebleu-180": 0.5901035199588553,
        "codebleu-28": 0.6194753827275777,
        "codebleu-6": 0.6267020422828465,
        "codebleu-72": 0.6091780373431752,
        "codebleu-63": 0.6619677006546097,
        "codebleu-58": 0.6307096830904793,
        "codebleu-35": 0.6123500800036015,
        "codebleu-26": 0.6431494409551975,
        "codebleu-191": 0.5932966833699204,
        "codebleu-151": 0.6434099454920376,
        "codebleu-22": 0.6123500800036015,
        "codebleu-166": 0.6117504909436603,
        "codebleu-112": 0.6011330790458422,
        "codebleu-8": 0.6057369084585084,
        "codebleu-7": 0.6005896854924545,
        "codebleu-23": 0.5980991712473903,
        "codebleu-56": 0.3880421137096133,
        "codebleu-60": 0.5954712791309119,
        "codebleu-137": 0.5932966833699204,
        "codebleu-170": 0.6002438269779646,
        "chrf-180": 0.3892492472528833,
        "chrf-28": 0.5350506214299704,
        "chrf-6": 0.5812302677760536,
        "chrf-72": 0.5905820553540334,
        "chrf-63": 0.5613279591675134,
        "chrf-58": 0.5320385158508226,
        "chrf-35": 0.6391032338400913,
        "chrf-26": 0.6256733020812879,
        "chrf-191": 0.6721589157057499,
        "chrf-151": 0.6614258616054396,
        "chrf-22": 0.6391032338400913,
        "chrf-166": 0.6223538305827102,
        "chrf-112": 0.7007415759179701,
        "chrf-8": 0.6465172773598584,
        "chrf-7": 0.4499732625228907,
        "chrf-23": 0.5618206875321691,
        "chrf-56": 0.21184610458748115,
        "chrf-60": 0.5288126638775427,
        "chrf-137": 0.6721589157057499,
        "chrf-170": 0.61079805409497,
        "rougel-180": 0.5106382978723405,
        "rougel-28": 0.7226890756302521,
        "rougel-6": 0.7563025210084034,
        "rougel-72": 0.6837606837606838,
        "rougel-63": 0.7226890756302521,
        "rougel-58": 0.671875,
        "rougel-35": 0.8035714285714286,
        "rougel-26": 0.7244094488188977,
        "rougel-191": 0.8148148148148148,
        "rougel-151": 0.7863247863247863,
        "rougel-22": 0.8035714285714286,
        "rougel-166": 0.706896551724138,
        "rougel-112": 0.8333333333333334,
        "rougel-8": 0.8035714285714286,
        "rougel-7": 0.6942148760330578,
        "rougel-23": 0.7678571428571429,
        "rougel-56": 0.3063063063063063,
        "rougel-60": 0.75,
        "rougel-137": 0.8148148148148148,
        "rougel-170": 0.7857142857142856,
        "meteor-180": 0.5144994077800401,
        "meteor-28": 0.713413344862736,
        "meteor-6": 0.7218048599517715,
        "meteor-72": 0.7324709484924623,
        "meteor-63": 0.6826149815106057,
        "meteor-58": 0.671264053328027,
        "meteor-35": 0.7676940464683788,
        "meteor-26": 0.7235761870225683,
        "meteor-191": 0.762569441765364,
        "meteor-151": 0.7725494053636222,
        "meteor-22": 0.7676940464683788,
        "meteor-166": 0.7484758051360927,
        "meteor-112": 0.7687500803724135,
        "meteor-8": 0.7768620671452703,
        "meteor-7": 0.7079004435793971,
        "meteor-23": 0.7315273606940274,
        "meteor-56": 0.2284263959390863,
        "meteor-60": 0.7178007035961581,
        "meteor-137": 0.762569441765364,
        "meteor-170": 0.7585101794868658,
        "ruby-180": 0.37037037037037035,
        "ruby-28": 0.5333333333333333,
        "ruby-6": 0.6,
        "ruby-72": 0.43333333333333335,
        "ruby-63": 0.55,
        "ruby-58": 0.47058823529411764,
        "ruby-35": 0.6666666666666667,
        "ruby-26": 0.5223880597014925,
        "ruby-191": 0.7166666666666667,
        "ruby-151": 0.6166666666666667,
        "ruby-22": 0.6666666666666667,
        "ruby-166": 0.4833333333333333,
        "ruby-112": 0.7333333333333334,
        "ruby-8": 0.6666666666666667,
        "ruby-7": 0.47540983606557374,
        "ruby-23": 0.6333333333333333,
        "ruby-56": 0.19999999999999996,
        "ruby-60": 0.6166666666666667,
        "ruby-137": 0.7166666666666667,
        "ruby-170": 0.65,
        "codebertscore_f1-180": 0.8289823532104492,
        "codebertscore_f3-180": 0.8289008140563965,
        "codebertscore_f1-28": 0.8923665285110474,
        "codebertscore_f3-28": 0.8710561394691467,
        "codebertscore_f1-6": 0.9085599780082703,
        "codebertscore_f3-6": 0.8880996108055115,
        "codebertscore_f1-72": 0.8977258205413818,
        "codebertscore_f3-72": 0.8771163821220398,
        "codebertscore_f1-63": 0.914125382900238,
        "codebertscore_f3-63": 0.9021879434585571,
        "codebertscore_f1-58": 0.866389274597168,
        "codebertscore_f3-58": 0.8654170036315918,
        "codebertscore_f1-35": 0.9191806316375732,
        "codebertscore_f3-35": 0.8928560018539429,
        "codebertscore_f1-26": 0.8816062211990356,
        "codebertscore_f3-26": 0.8765051960945129,
        "codebertscore_f1-191": 0.9121066927909851,
        "codebertscore_f3-191": 0.8894416093826294,
        "codebertscore_f1-151": 0.9137229919433594,
        "codebertscore_f3-151": 0.8915553689002991,
        "codebertscore_f1-22": 0.9137552976608276,
        "codebertscore_f3-22": 0.8887638449668884,
        "codebertscore_f1-166": 0.8944960236549377,
        "codebertscore_f3-166": 0.8737965822219849,
        "codebertscore_f1-112": 0.9161977171897888,
        "codebertscore_f3-112": 0.8919374942779541,
        "codebertscore_f1-8": 0.916327714920044,
        "codebertscore_f3-8": 0.8930865526199341,
        "codebertscore_f1-7": 0.8905630707740784,
        "codebertscore_f3-7": 0.8727034330368042,
        "codebertscore_f1-23": 0.9062697887420654,
        "codebertscore_f3-23": 0.8824528455734253,
        "codebertscore_f1-56": 0.7923921346664429,
        "codebertscore_f3-56": 0.786112368106842,
        "codebertscore_f1-60": 0.9026729464530945,
        "codebertscore_f3-60": 0.8798027634620667,
        "codebertscore_f1-137": 0.9110013246536255,
        "codebertscore_f3-137": 0.8878533840179443,
        "codebertscore_f1-170": 0.9089570045471191,
        "codebertscore_f3-170": 0.8854425549507141,
        "codebertscore_s_f1-180": 0.8327043652534485,
        "codebertscore_s_f3-180": 0.8327522873878479,
        "codebertscore_s_f1-28": 0.8919610977172852,
        "codebertscore_s_f3-28": 0.8706254363059998,
        "codebertscore_s_f1-6": 0.9004207849502563,
        "codebertscore_s_f3-6": 0.87856525182724,
        "codebertscore_s_f1-72": 0.8946831822395325,
        "codebertscore_s_f3-72": 0.8748112320899963,
        "codebertscore_s_f1-63": 0.9051555395126343,
        "codebertscore_s_f3-63": 0.8933942317962646,
        "codebertscore_s_f1-58": 0.8742233514785767,
        "codebertscore_s_f3-58": 0.872551441192627,
        "codebertscore_s_f1-35": 0.9178484082221985,
        "codebertscore_s_f3-35": 0.8921096324920654,
        "codebertscore_s_f1-26": 0.8828733563423157,
        "codebertscore_s_f3-26": 0.8770046830177307,
        "codebertscore_s_f1-191": 0.9085149168968201,
        "codebertscore_s_f3-191": 0.8858545422554016,
        "codebertscore_s_f1-151": 0.9070596694946289,
        "codebertscore_s_f3-151": 0.884252667427063,
        "codebertscore_s_f1-22": 0.9084599018096924,
        "codebertscore_s_f3-22": 0.8828033208847046,
        "codebertscore_s_f1-166": 0.8946743011474609,
        "codebertscore_s_f3-166": 0.8721488118171692,
        "codebertscore_s_f1-112": 0.912582516670227,
        "codebertscore_s_f3-112": 0.887808620929718,
        "codebertscore_s_f1-8": 0.9138549566268921,
        "codebertscore_s_f3-8": 0.8905378580093384,
        "codebertscore_s_f1-7": 0.8839808702468872,
        "codebertscore_s_f3-7": 0.8675961494445801,
        "codebertscore_s_f1-23": 0.9021425843238831,
        "codebertscore_s_f3-23": 0.8776488304138184,
        "codebertscore_s_f1-56": 0.7987820506095886,
        "codebertscore_s_f3-56": 0.7914029359817505,
        "codebertscore_s_f1-60": 0.8936946392059326,
        "codebertscore_s_f3-60": 0.8707430362701416,
        "codebertscore_s_f1-137": 0.9073981046676636,
        "codebertscore_s_f3-137": 0.8841055631637573,
        "codebertscore_s_f1-170": 0.9030699133872986,
        "codebertscore_s_f3-170": 0.8795642256736755,
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-166": 3,
        "raw_gpt35_nsnr-166": "3",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-166": 2,
        "raw_gpt35_nswr-166": "2",
        "gpt35_nswr-112": 2,
        "raw_gpt35_nswr-112": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-56": 2,
        "raw_gpt35_nswr-56": "2",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2",
        "gpt35_nswr-137": 3,
        "raw_gpt35_nswr-137": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nlong sum_to_n(long n) {\n",
        "snippet": [
            "    return n*(n+1)/2;\n}\n"
        ],
        "simplified": "sum_to_n is a function that sums numbers from 1 to n.",
        "task_id": "60",
        "127": "long int sum = 0;\n  while (n != 0) {\n    sum += n;\n    n--;\n  }\n  return sum;",
        "grade-127": {
            "execution": 1
        },
        "14": "return (n*(n+1))/2;",
        "grade-14": {
            "execution": 1
        },
        "3": "assert(n >= 1);\n  return n * (n + 1) / 2;",
        "grade-3": {
            "execution": 1
        },
        "162": "if (n < 0)\n        return 0;\n    else if (n == 0)\n        return 0;\n    else\n        return n + sum_to_n(n - 1);",
        "grade-162": {
            "execution": 1
        },
        "43": "long result=0;\n    for(int i=1;i<=n;i++){\n        result=result+i;\n    }\n    return result;",
        "grade-43": {
            "execution": 1
        },
        "35": "return n*(n+1)/2;",
        "grade-35": {
            "execution": 1
        },
        "30": "assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  return n + sum_to_n(n - 1);",
        "grade-30": {
            "execution": 1
        },
        "17": "long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;",
        "grade-17": {
            "execution": 1
        },
        "13": "assert(n >= 1);\n    return (n*(n+1))/2;",
        "grade-13": {
            "execution": 1
        },
        "136": "assert(n > 0);\n  return n * (n + 1) / 2;",
        "grade-136": {
            "execution": 1
        },
        "198": "// YOUR CODE GOES HERE\n\t//if (n==1)\n\t\t//return 1;\n\t//else\n\t\treturn n + sum_to_n(n-1);",
        "grade-198": {
            "execution": 0
        },
        "105": "// TODO: your code here\n    return (n * (n + 1)) / 2;",
        "grade-105": {
            "execution": 1
        },
        "11": "assert(n > 0);\n    return (long)n*(n+1)/2;",
        "grade-11": {
            "execution": 1
        },
        "113": "// TODO: complete this function.\n    // Be sure to use a loop, not recursion.\n  long sum = 0;\n  for(int i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;",
        "grade-113": {
            "execution": 1
        },
        "75": "if (n < 0) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tif (n == 0) {\n\t\t\treturn n;\n\t\t}\n\t\telse {\n\t\t\treturn n + sum_to_n(n - 1);\n\t\t}\n\t}",
        "grade-75": {
            "execution": 1
        },
        "4": "// write your code here\n    return n*(n+1)/2;",
        "grade-4": {
            "execution": 1
        },
        "29": "return n*(n+1)/2;",
        "grade-29": {
            "execution": 1
        },
        "31": "// n(n+1)/2\n  long tot = n * (n + 1);\n  long answer = tot / 2;\n  return answer;",
        "grade-31": {
            "execution": 1
        },
        "94": "long sum = 0;\n\tlong i = 1;\n\twhile (i <= n) {\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;",
        "grade-94": {
            "execution": 1
        },
        "117": "assert(n >= 1);\n   // Fill in code here\n\n   return (n * (n + 1)) / 2;",
        "grade-117": {
            "execution": 1
        },
        "bleu-127": 0.04668049023095242,
        "bleu-14": 0.6703420896351792,
        "bleu-3": 0.5401725898595141,
        "bleu-162": 0.047973925170118475,
        "bleu-43": 0.03280894525012139,
        "bleu-35": 0.9131007162822629,
        "bleu-30": 0.056047642050745416,
        "bleu-17": 0.03392268780792677,
        "bleu-13": 0.3941004770986059,
        "bleu-136": 0.5730574043798692,
        "bleu-198": 0.06918451692157554,
        "bleu-105": 0.4154794556635242,
        "bleu-11": 0.4432379690995578,
        "bleu-113": 0.02081103866754428,
        "bleu-75": 0.041085873492101,
        "bleu-4": 0.6102169202557914,
        "bleu-29": 0.9131007162822629,
        "bleu-31": 0.28164974576164165,
        "bleu-94": 0.03392268780792677,
        "bleu-117": 0.30116445933796404,
        "codebleu-127": 0.4303728070175438,
        "codebleu-14": 0.7501881885042648,
        "codebleu-3": 0.7944645499381572,
        "codebleu-162": 0.40570175438596484,
        "codebleu-43": 0.44078947368421045,
        "codebleu-35": 0.8682538427069038,
        "codebleu-30": 0.5213815789473684,
        "codebleu-17": 0.44078947368421045,
        "codebleu-13": 0.7043803013926859,
        "codebleu-136": 0.7944645499381572,
        "codebleu-198": 0.40570175438596484,
        "codebleu-105": 0.707033944877224,
        "codebleu-11": 0.6736577032805088,
        "codebleu-113": 0.45120614035087714,
        "codebleu-75": 0.5213815789473684,
        "codebleu-4": 0.8027974578174547,
        "codebleu-29": 0.8682538427069038,
        "codebleu-31": 0.6876087953001427,
        "codebleu-94": 0.47587719298245607,
        "codebleu-117": 0.6908555997844593,
        "chrf-127": 0.2310334098421175,
        "chrf-14": 0.617702027130323,
        "chrf-3": 0.7972284976479803,
        "chrf-162": 0.2480798233372741,
        "chrf-43": 0.19940226204163058,
        "chrf-35": 0.9432494159160918,
        "chrf-30": 0.28224615419315957,
        "chrf-17": 0.22652392104585892,
        "chrf-13": 0.5279830485456296,
        "chrf-136": 0.8067984623083252,
        "chrf-198": 0.2576344083883513,
        "chrf-105": 0.4949012879153239,
        "chrf-11": 0.6022285983770115,
        "chrf-113": 0.15143643563094697,
        "chrf-75": 0.24508435632730122,
        "chrf-4": 0.7443056744156817,
        "chrf-29": 0.9432494159160918,
        "chrf-31": 0.46101952311994504,
        "chrf-94": 0.22052393639029522,
        "chrf-117": 0.44814137962272743,
        "rougel-127": 0.2564102564102564,
        "rougel-14": 0.8799999999999999,
        "rougel-3": 0.7096774193548387,
        "rougel-162": 0.3255813953488372,
        "rougel-43": 0.2727272727272727,
        "rougel-35": 0.9565217391304348,
        "rougel-30": 0.34146341463414637,
        "rougel-17": 0.27906976744186046,
        "rougel-13": 0.6666666666666667,
        "rougel-136": 0.7333333333333334,
        "rougel-198": 0.3111111111111111,
        "rougel-105": 0.6874999999999999,
        "rougel-11": 0.6666666666666667,
        "rougel-113": 0.19047619047619047,
        "rougel-75": 0.31372549019607837,
        "rougel-4": 0.7586206896551724,
        "rougel-29": 0.9565217391304348,
        "rougel-31": 0.4651162790697674,
        "rougel-94": 0.2325581395348837,
        "rougel-117": 0.5641025641025641,
        "meteor-127": 0.2962962962962963,
        "meteor-14": 0.8998702274434806,
        "meteor-3": 0.865816359731893,
        "meteor-162": 0.5052832733812949,
        "meteor-43": 0.28571428571428575,
        "meteor-35": 0.9240225015626085,
        "meteor-30": 0.5596107055961071,
        "meteor-17": 0.2877697841726618,
        "meteor-13": 0.8440643218655904,
        "meteor-136": 0.8726879181424636,
        "meteor-198": 0.5437352245862884,
        "meteor-105": 0.8506585743801652,
        "meteor-11": 0.8501505541674675,
        "meteor-113": 0.2830188679245283,
        "meteor-75": 0.5215419501133787,
        "meteor-4": 0.8796694214876032,
        "meteor-29": 0.9240225015626085,
        "meteor-31": 0.7723408050419168,
        "meteor-94": 0.2877697841726618,
        "meteor-117": 0.8065503520048973,
        "ruby-127": 0.18518518518518523,
        "ruby-14": 0.7692307692307692,
        "ruby-3": 0.5263157894736843,
        "ruby-162": 0.16129032258064513,
        "ruby-43": 0.1875,
        "ruby-35": 0.9166666666666666,
        "ruby-30": 0.24137931034482762,
        "ruby-17": 0.19354838709677424,
        "ruby-13": 0.47619047619047616,
        "ruby-136": 0.5555555555555556,
        "ruby-198": 0.18181818181818177,
        "ruby-105": 0.5,
        "ruby-11": 0.47619047619047616,
        "ruby-113": 0.11764705882352944,
        "ruby-75": 0.15384615384615385,
        "ruby-4": 0.5882352941176471,
        "ruby-29": 0.9166666666666666,
        "ruby-31": 0.32258064516129037,
        "ruby-94": 0.16129032258064513,
        "ruby-117": 0.37037037037037035,
        "codebertscore_f1-127": 0.7280280590057373,
        "codebertscore_f3-127": 0.7225311994552612,
        "codebertscore_f1-14": 0.9701119661331177,
        "codebertscore_f3-14": 0.9701119661331177,
        "codebertscore_f1-3": 0.901297926902771,
        "codebertscore_f3-3": 0.9207497239112854,
        "codebertscore_f1-162": 0.7352311611175537,
        "codebertscore_f3-162": 0.7504420280456543,
        "codebertscore_f1-43": 0.7400731444358826,
        "codebertscore_f3-43": 0.7513918280601501,
        "codebertscore_f1-35": 0.9939975738525391,
        "codebertscore_f3-35": 0.9939975738525391,
        "codebertscore_f1-30": 0.7576001882553101,
        "codebertscore_f3-30": 0.7579184174537659,
        "codebertscore_f1-17": 0.7252647876739502,
        "codebertscore_f3-17": 0.7263997197151184,
        "codebertscore_f1-13": 0.9129219651222229,
        "codebertscore_f3-13": 0.9346907734870911,
        "codebertscore_f1-136": 0.8973152041435242,
        "codebertscore_f3-136": 0.9213650822639465,
        "codebertscore_f1-198": 0.733650267124176,
        "codebertscore_f3-198": 0.7705046534538269,
        "codebertscore_f1-105": 0.8389630317687988,
        "codebertscore_f3-105": 0.9063001275062561,
        "codebertscore_f1-11": 0.9097276329994202,
        "codebertscore_f3-11": 0.9467684626579285,
        "codebertscore_f1-113": 0.6792472004890442,
        "codebertscore_f3-113": 0.710010290145874,
        "codebertscore_f1-75": 0.7417632341384888,
        "codebertscore_f3-75": 0.7510388493537903,
        "codebertscore_f1-4": 0.8827873468399048,
        "codebertscore_f3-4": 0.954099178314209,
        "codebertscore_f1-29": 0.9939975738525391,
        "codebertscore_f3-29": 0.9939975738525391,
        "codebertscore_f1-31": 0.8726996779441833,
        "codebertscore_f3-31": 0.9038178324699402,
        "codebertscore_f1-94": 0.7180399894714355,
        "codebertscore_f3-94": 0.7186517119407654,
        "codebertscore_f1-117": 0.8447257876396179,
        "codebertscore_f3-117": 0.8969237804412842,
        "codebertscore_s_f1-127": 0.7111207842826843,
        "codebertscore_s_f3-127": 0.7009375095367432,
        "codebertscore_s_f1-14": 0.9689643979072571,
        "codebertscore_s_f3-14": 0.9689644575119019,
        "codebertscore_s_f1-3": 0.9170547723770142,
        "codebertscore_s_f3-3": 0.9376789927482605,
        "codebertscore_s_f1-162": 0.7272257208824158,
        "codebertscore_s_f3-162": 0.7382022142410278,
        "codebertscore_s_f1-43": 0.7215209603309631,
        "codebertscore_s_f3-43": 0.7284886240959167,
        "codebertscore_s_f1-35": 0.9977518320083618,
        "codebertscore_s_f3-35": 0.9977517127990723,
        "codebertscore_s_f1-30": 0.764137327671051,
        "codebertscore_s_f3-30": 0.7614122033119202,
        "codebertscore_s_f1-17": 0.7087510228157043,
        "codebertscore_s_f3-17": 0.7030521035194397,
        "codebertscore_s_f1-13": 0.9293457269668579,
        "codebertscore_s_f3-13": 0.9514970183372498,
        "codebertscore_s_f1-136": 0.9102694988250732,
        "codebertscore_s_f3-136": 0.9367262125015259,
        "codebertscore_s_f1-198": 0.7271335124969482,
        "codebertscore_s_f3-198": 0.7616189122200012,
        "codebertscore_s_f1-105": 0.8445687294006348,
        "codebertscore_s_f3-105": 0.9141220450401306,
        "codebertscore_s_f1-11": 0.9284546375274658,
        "codebertscore_s_f3-11": 0.9676122069358826,
        "codebertscore_s_f1-113": 0.6577337980270386,
        "codebertscore_s_f3-113": 0.6831607222557068,
        "codebertscore_s_f1-75": 0.74001544713974,
        "codebertscore_s_f3-75": 0.7477434873580933,
        "codebertscore_s_f1-4": 0.8943702578544617,
        "codebertscore_s_f3-4": 0.9652406573295593,
        "codebertscore_s_f1-29": 0.9977518320083618,
        "codebertscore_s_f3-29": 0.9977517127990723,
        "codebertscore_s_f1-31": 0.879675030708313,
        "codebertscore_s_f3-31": 0.9135885238647461,
        "codebertscore_s_f1-94": 0.6996814608573914,
        "codebertscore_s_f3-94": 0.6967464685440063,
        "codebertscore_s_f1-117": 0.8352504372596741,
        "codebertscore_s_f3-117": 0.8970494270324707,
        "gpt35_nsnr-127": 4,
        "raw_gpt35_nsnr-127": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-198": 3,
        "raw_gpt35_nsnr-198": "3",
        "gpt35_nsnr-105": 4,
        "raw_gpt35_nsnr-105": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-94": 4,
        "raw_gpt35_nsnr-94": "4",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nswr-127": 2,
        "raw_gpt35_nswr-127": "2",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4",
        "gpt35_nswr-43": 4,
        "raw_gpt35_nswr-43": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-136": 4,
        "raw_gpt35_nswr-136": "4",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-105": 4,
        "raw_gpt35_nswr-105": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-113": 4,
        "raw_gpt35_nswr-113": "4",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-94": 3,
        "raw_gpt35_nswr-94": "3",
        "gpt35_nswr-117": 4,
        "raw_gpt35_nswr-117": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n",
        "snippet": [
            "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n"
        ],
        "simplified": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "task_id": "24",
        "173": "// 1. Attempt to divide n by every number\n    // 2. Try to divide n by every smaller number until\n    //      you get a divisor that is < n\n    // 3. Return the result\n\n    //Return the largest divisor of n or 1 if none found\n    // 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n    //  ^\n    //  |\n    //  1\n    for (long i = n-1; i > 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;",
        "grade-173": {
            "execution": 1
        },
        "28": "// your code goes here\n  int j = (n/2);\n  for(int i = j; i > 0; i--){\n    if((n%i) == 0){\n      return i;\n    }\n  }\n  return 1;",
        "grade-28": {
            "execution": 1
        },
        "6": "assert(n >= 0);\n    for (long i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1;",
        "grade-6": {
            "execution": 1
        },
        "75": "for (long i = n/2; i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;",
        "grade-75": {
            "execution": 1
        },
        "67": "assert(n >= 1);\n  long d = 2;\n  long maxDivisor = 1;\n  while (d * d <= n) {\n    if (n % d == 0) {\n      maxDivisor = d;\n    }\n    d += 1;\n  }\n  return maxDivisor;",
        "grade-67": {
            "execution": 0
        },
        "59": "if (n == 1) {\n        return 1;\n    }\n    long divisor = 2;\n    while (n % divisor != 0) {\n        divisor += 1;\n    }\n    return divisor;",
        "grade-59": {
            "execution": 0
        },
        "36": "assert(n>0);\n    while(n%2==0) n = n/2;\n    if(n==1) return 1;\n    long largest = 1;\n    for(long i=3; i<=(sqrt(n)+1); i+=2) {\n        if(n%i==0) {\n            largest = i;\n            while(n%i==0) n = n/i;\n        }\n    }\n    if(n>largest) largest = n;\n    return largest;",
        "grade-36": {
            "execution": 0
        },
        "26": "// The largest divisor of n is n-1 if n is prime\n    long largest_divisor = n - 1;\n    // Check each value up to n-1\n    for (long i = largest_divisor; i > 0; i--) {\n        // Check if n divided by i is even\n        if (n % i == 0) {\n            // This is the largest divisor\n            largest_divisor = i;\n            // Skip to the next value\n            break;\n        }\n    }\n    return largest_divisor;",
        "grade-26": {
            "execution": 1
        },
        "185": "assert(n > 0);\n    for (long i = n-1; i > 0; i--) {\n        if (n % i == 0) return i;\n    }\n    return -1;",
        "grade-185": {
            "execution": 1
        },
        "147": "// Write your code here\n  long i=1;\n  long max=0;\n  long maxi=0;\n  while(i<=n)\n  {\n      if(n%i==0)\n      {\n          max=i;\n          maxi=i;\n      }\n      i++;\n  }\n  return maxi;",
        "grade-147": {
            "execution": 0
        },
        "22": "for (long i = n - 1; i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;",
        "grade-22": {
            "execution": 1
        },
        "159": "// Write your code here\n    long greatest_factor = 1;\n    for(long i = 2; i*i <= n; i++){\n        if(n%i == 0){\n            if(n/i > i){\n                greatest_factor = n/i;\n            }\n            else{\n                greatest_factor = i;\n            }\n        }\n    }\n    return greatest_factor;",
        "grade-159": {
            "execution": 0
        },
        "115": "// Start with the smallest possible divisor and work up to n/2\n  // So that we can skip even numbers\n  for (long i = 3; i <= n/2; i += 2) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;",
        "grade-115": {
            "execution": 0
        },
        "8": "int divisor = 2;\n    while (n % divisor != 0 && divisor <= n) {\n        divisor++;\n    }\n    return divisor;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> divisors;\n    // check all numbers less than or equal to n/2\n    for (long i = 1; i <= n/2; i++) {\n        if (n % i == 0) {\n            divisors.push_back(i);\n        }\n    }\n    // return the largest divisor\n    return divisors.back();",
        "grade-7": {
            "execution": 1
        },
        "23": "// your code goes here\n  return 0;",
        "grade-23": {
            "execution": 0
        },
        "57": "assert(n >= 0);\n\tlong largest = -1;\n\tlong start = n / 2;\n\tfor (long i = start; i > 0; i--) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn largest;",
        "grade-57": {
            "execution": 1
        },
        "62": "long result = n;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            result = i;\n        }\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "136": "for (long i = n-1; i >= 1; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;",
        "grade-136": {
            "execution": 1
        },
        "163": "// Your code here\n    if(n==1) return 1;\n    else {\n        long max=1;\n        for(long i=2;i<n;i++) {\n            if(n%i==0 && i>max) max=i;\n        }\n        return max;\n    }",
        "grade-163": {
            "execution": 1
        },
        "bleu-173": 0.11082148571999281,
        "bleu-28": 0.23168160869455856,
        "bleu-6": 0.26933084400116686,
        "bleu-75": 0.3533235865130884,
        "bleu-67": 0.15050585906075947,
        "bleu-59": 0.1810202216708856,
        "bleu-36": 0.16269701547994134,
        "bleu-26": 0.12913773008082463,
        "bleu-185": 0.3127596667909692,
        "bleu-147": 0.252267885832412,
        "bleu-22": 0.3334224241693867,
        "bleu-159": 0.37774006928552417,
        "bleu-115": 0.2606802197727399,
        "bleu-8": 0.11441128266116556,
        "bleu-7": 0.2387963499831601,
        "bleu-23": 0.0033569209304870145,
        "bleu-57": 0.21541034531036565,
        "bleu-62": 0.509839522852808,
        "bleu-136": 0.3270924070400043,
        "bleu-163": 0.3057689800177743,
        "codebleu-173": 0.5682634787768549,
        "codebleu-28": 0.588348448300316,
        "codebleu-6": 0.573202265823576,
        "codebleu-75": 0.5948809586345324,
        "codebleu-67": 0.6166111324109657,
        "codebleu-59": 0.4761705685618728,
        "codebleu-36": 0.6621371689342324,
        "codebleu-26": 0.5852878042080668,
        "codebleu-185": 0.5773015710968508,
        "codebleu-147": 0.5965513488106182,
        "codebleu-22": 0.5743976385441832,
        "codebleu-159": 0.7328685082914785,
        "codebleu-115": 0.6070505052716403,
        "codebleu-8": 0.39377391947787654,
        "codebleu-7": 0.6771788171599016,
        "codebleu-23": 0.10448564389647362,
        "codebleu-57": 0.58380280277245,
        "codebleu-62": 0.6415805691361123,
        "codebleu-136": 0.5743976385441832,
        "codebleu-163": 0.6539390621352794,
        "chrf-173": 0.261983284935695,
        "chrf-28": 0.41342740868915956,
        "chrf-6": 0.38450184982081886,
        "chrf-75": 0.4064009707229795,
        "chrf-67": 0.24216315813864,
        "chrf-59": 0.3179330196866492,
        "chrf-36": 0.3662138694363805,
        "chrf-26": 0.2054994998790482,
        "chrf-185": 0.4361331927536636,
        "chrf-147": 0.31588641572256126,
        "chrf-22": 0.39643817513391477,
        "chrf-159": 0.4219053180621078,
        "chrf-115": 0.3748163941970525,
        "chrf-8": 0.2130511436443378,
        "chrf-7": 0.33293018736212837,
        "chrf-23": 0.11544238316542216,
        "chrf-57": 0.29862045451343755,
        "chrf-62": 0.4553317616094714,
        "chrf-136": 0.3980873364060537,
        "chrf-163": 0.44414375606626083,
        "rougel-173": 0.31578947368421056,
        "rougel-28": 0.5747126436781609,
        "rougel-6": 0.5925925925925926,
        "rougel-75": 0.6666666666666666,
        "rougel-67": 0.46153846153846156,
        "rougel-59": 0.3888888888888889,
        "rougel-36": 0.39436619718309857,
        "rougel-26": 0.35658914728682173,
        "rougel-185": 0.6153846153846153,
        "rougel-147": 0.45652173913043476,
        "rougel-22": 0.6388888888888888,
        "rougel-159": 0.6153846153846153,
        "rougel-115": 0.5714285714285714,
        "rougel-8": 0.39999999999999997,
        "rougel-7": 0.4954128440366973,
        "rougel-23": 0.13333333333333333,
        "rougel-57": 0.46808510638297873,
        "rougel-62": 0.7272727272727273,
        "rougel-136": 0.6575342465753425,
        "rougel-163": 0.5773195876288659,
        "meteor-173": 0.609947024879387,
        "meteor-28": 0.642251851851852,
        "meteor-6": 0.675396111868372,
        "meteor-75": 0.6193225118122238,
        "meteor-67": 0.4296375922487522,
        "meteor-59": 0.3872444444444445,
        "meteor-36": 0.5453749899412569,
        "meteor-26": 0.49835042786222866,
        "meteor-185": 0.6794182837069255,
        "meteor-147": 0.5017105263157895,
        "meteor-22": 0.5812993096646943,
        "meteor-159": 0.5982429736600523,
        "meteor-115": 0.7278173575129533,
        "meteor-8": 0.37753172255224315,
        "meteor-7": 0.6713574952640672,
        "meteor-23": 0.06006006006006006,
        "meteor-57": 0.515980726011791,
        "meteor-62": 0.7175190258751902,
        "meteor-136": 0.6120152354570638,
        "meteor-163": 0.7278119804071361,
        "ruby-173": 0.1637931034482759,
        "ruby-28": 0.3921568627450981,
        "ruby-6": 0.4444444444444444,
        "ruby-75": 0.5,
        "ruby-67": 0.32727272727272727,
        "ruby-59": 0.25,
        "ruby-36": 0.2547169811320755,
        "ruby-26": 0.23655913978494625,
        "ruby-185": 0.45238095238095233,
        "ruby-147": 0.3571428571428571,
        "ruby-22": 0.5,
        "ruby-159": 0.47058823529411764,
        "ruby-115": 0.3709677419354839,
        "ruby-8": 0.25,
        "ruby-7": 0.3287671232876712,
        "ruby-23": 0.05555555555555558,
        "ruby-57": 0.3448275862068966,
        "ruby-62": 0.6097560975609756,
        "ruby-136": 0.5405405405405406,
        "ruby-163": 0.39344262295081966,
        "codebertscore_f1-173": 0.7020450830459595,
        "codebertscore_f3-173": 0.7630070447921753,
        "codebertscore_f1-28": 0.8491923213005066,
        "codebertscore_f3-28": 0.8780791163444519,
        "codebertscore_f1-6": 0.8330442905426025,
        "codebertscore_f3-6": 0.8397638201713562,
        "codebertscore_f1-75": 0.8882930874824524,
        "codebertscore_f3-75": 0.8852062225341797,
        "codebertscore_f1-67": 0.8016036152839661,
        "codebertscore_f3-67": 0.8276298642158508,
        "codebertscore_f1-59": 0.7803212404251099,
        "codebertscore_f3-59": 0.7852016687393188,
        "codebertscore_f1-36": 0.809175431728363,
        "codebertscore_f3-36": 0.8308306336402893,
        "codebertscore_f1-26": 0.7094243168830872,
        "codebertscore_f3-26": 0.7664045691490173,
        "codebertscore_f1-185": 0.8376660943031311,
        "codebertscore_f3-185": 0.8439253568649292,
        "codebertscore_f1-147": 0.7825639843940735,
        "codebertscore_f3-147": 0.814812183380127,
        "codebertscore_f1-22": 0.8599995970726013,
        "codebertscore_f3-22": 0.858004629611969,
        "codebertscore_f1-159": 0.8221758604049683,
        "codebertscore_f3-159": 0.8744783997535706,
        "codebertscore_f1-115": 0.8014911413192749,
        "codebertscore_f3-115": 0.8597023487091064,
        "codebertscore_f1-8": 0.7819689512252808,
        "codebertscore_f3-8": 0.7933927774429321,
        "codebertscore_f1-7": 0.778999924659729,
        "codebertscore_f3-7": 0.8411368131637573,
        "codebertscore_f1-23": 0.6192018389701843,
        "codebertscore_f3-23": 0.6111040711402893,
        "codebertscore_f1-57": 0.8180802464485168,
        "codebertscore_f3-57": 0.8413923382759094,
        "codebertscore_f1-62": 0.8761777877807617,
        "codebertscore_f3-62": 0.8756676912307739,
        "codebertscore_f1-136": 0.8606541156768799,
        "codebertscore_f3-136": 0.8630647659301758,
        "codebertscore_f1-163": 0.8263841271400452,
        "codebertscore_f3-163": 0.8551189303398132,
        "codebertscore_s_f1-173": 0.6973233819007874,
        "codebertscore_s_f3-173": 0.7605643272399902,
        "codebertscore_s_f1-28": 0.8600044250488281,
        "codebertscore_s_f3-28": 0.8889150023460388,
        "codebertscore_s_f1-6": 0.8412878513336182,
        "codebertscore_s_f3-6": 0.8463748097419739,
        "codebertscore_s_f1-75": 0.8867998719215393,
        "codebertscore_s_f3-75": 0.8845193982124329,
        "codebertscore_s_f1-67": 0.8010078072547913,
        "codebertscore_s_f3-67": 0.8296824097633362,
        "codebertscore_s_f1-59": 0.7856780886650085,
        "codebertscore_s_f3-59": 0.7907499074935913,
        "codebertscore_s_f1-36": 0.8090225458145142,
        "codebertscore_s_f3-36": 0.8307002782821655,
        "codebertscore_s_f1-26": 0.7076703310012817,
        "codebertscore_s_f3-26": 0.7665275931358337,
        "codebertscore_s_f1-185": 0.8466307520866394,
        "codebertscore_s_f3-185": 0.8525823950767517,
        "codebertscore_s_f1-147": 0.7759601473808289,
        "codebertscore_s_f3-147": 0.8089268803596497,
        "codebertscore_s_f1-22": 0.8590419888496399,
        "codebertscore_s_f3-22": 0.8561577200889587,
        "codebertscore_s_f1-159": 0.822167158126831,
        "codebertscore_s_f3-159": 0.8786129355430603,
        "codebertscore_s_f1-115": 0.8043819665908813,
        "codebertscore_s_f3-115": 0.8640702962875366,
        "codebertscore_s_f1-8": 0.7876346707344055,
        "codebertscore_s_f3-8": 0.7993890047073364,
        "codebertscore_s_f1-7": 0.769895613193512,
        "codebertscore_s_f3-7": 0.8359451293945312,
        "codebertscore_s_f1-23": 0.6466035842895508,
        "codebertscore_s_f3-23": 0.6526643633842468,
        "codebertscore_s_f1-57": 0.8255950212478638,
        "codebertscore_s_f3-57": 0.8498485684394836,
        "codebertscore_s_f1-62": 0.8788691163063049,
        "codebertscore_s_f3-62": 0.8771932721138,
        "codebertscore_s_f1-136": 0.8629581332206726,
        "codebertscore_s_f3-136": 0.864276111125946,
        "codebertscore_s_f1-163": 0.8217967748641968,
        "codebertscore_s_f3-163": 0.8514689803123474,
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-115": 3,
        "raw_gpt35_nsnr-115": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "0",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-115": 3,
        "raw_gpt35_nswr-115": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfloat triangle_area(long a, long h) {\n",
        "snippet": [
            "return (a*h)*0.5;\n\n}\n"
        ],
        "simplified": "Given length of a side and high return area for a triangle.",
        "task_id": "45",
        "120": "assert(h >= 0);\n    assert(a >= 0);\n    return h*a/2;",
        "grade-120": {
            "execution": 0
        },
        "17": "return ((a*h)/2);",
        "grade-17": {
            "execution": 0
        },
        "4": "//a=h/2*b\n\t//a*a=h*h/4*b*b\n\t//b=sqrt(a*a/(h*h/4))\n\tassert(a >= 0);\n\tassert(h >= 0);\n\treturn h*h*a/(4*h);",
        "grade-4": {
            "execution": 0
        },
        "150": "float area;\n  area = 1.0/2.0 * a * h;\n  return area;",
        "grade-150": {
            "execution": 1
        },
        "49": "return 1.0 / 2 * a * h;",
        "grade-49": {
            "execution": 1
        },
        "45": "float A;\n\t// Write your code here.\n\tA=(h*a)/2;\n\treturn A;",
        "grade-45": {
            "execution": 0
        },
        "38": "return ((a * h) / 2);",
        "grade-38": {
            "execution": 0
        },
        "23": "float area;\n    area = 0.5 * a * h;\n    return area;",
        "grade-23": {
            "execution": 1
        },
        "16": "assert(a > 0);\n  assert(h > 0);\n  return (1.0/2.0)*a*h;",
        "grade-16": {
            "execution": 1
        },
        "128": "float area = a * h / 2;\n\treturn area;",
        "grade-128": {
            "execution": 0
        },
        "188": "assert(a > 0 && h > 0);\n\treturn (float)0.5 * a * h;",
        "grade-188": {
            "execution": 1
        },
        "99": "float result = 0.5*(a*h);\n    return result;",
        "grade-99": {
            "execution": 1
        },
        "14": "// >>> triangle_area(10, 2)\n    // 10.0\n    return a * h / 2;",
        "grade-14": {
            "execution": 0
        },
        "112": "return (float)(a*h/2);",
        "grade-112": {
            "execution": 0
        },
        "76": "return float(a) * float(h) / 2;",
        "grade-76": {
            "execution": 1
        },
        "6": "float area = h*a/2;\nreturn area;",
        "grade-6": {
            "execution": 0
        },
        "37": "// your code here\n\treturn (float)0.5*a*h;",
        "grade-37": {
            "execution": 1
        },
        "40": "// (1 / 2) base * height\n    return (float) (a * h / 2);",
        "grade-40": {
            "execution": 0
        },
        "90": "// printf(\"%ld\", a);\n    // printf(\"%ld\", h);\n    return a * h / 2;",
        "grade-90": {
            "execution": 0
        },
        "115": "return a * h / 2;",
        "grade-115": {
            "execution": 0
        },
        "bleu-120": 0.046574698071706964,
        "bleu-17": 0.3684615814266882,
        "bleu-4": 0.0352490183759643,
        "bleu-150": 0.09107438368292145,
        "bleu-49": 0.16278331364721527,
        "bleu-45": 0.02769348116298872,
        "bleu-38": 0.3684615814266882,
        "bleu-23": 0.1694357181593088,
        "bleu-16": 0.08137888156806598,
        "bleu-128": 0.14323145079400493,
        "bleu-188": 0.1268354694168578,
        "bleu-99": 0.33157961519920837,
        "bleu-14": 0.0806697434073767,
        "bleu-112": 0.2620251007173262,
        "bleu-76": 0.11121234698968381,
        "bleu-6": 0.05063996506781411,
        "bleu-37": 0.17615445158687268,
        "bleu-40": 0.138177903937343,
        "bleu-90": 0.06106432774355545,
        "bleu-115": 0.13597602315271134,
        "codebleu-120": 0.4583333333333333,
        "codebleu-17": 0.5503547643656077,
        "codebleu-4": 0.5104166666666666,
        "codebleu-150": 0.3958333333333333,
        "codebleu-49": 0.37695112011228976,
        "codebleu-45": 0.5,
        "codebleu-38": 0.5503547643656077,
        "codebleu-23": 0.3958333333333333,
        "codebleu-16": 0.5104166666666666,
        "codebleu-128": 0.34375,
        "codebleu-188": 0.5104166666666666,
        "codebleu-99": 0.6210202745053433,
        "codebleu-14": 0.48958333333333326,
        "codebleu-112": 0.48775181470754686,
        "codebleu-76": 0.40625,
        "codebleu-6": 0.34375,
        "codebleu-37": 0.5,
        "codebleu-40": 0.5200825243079181,
        "codebleu-90": 0.4479166666666667,
        "codebleu-115": 0.3068622493480594,
        "chrf-120": 0.24377078553051118,
        "chrf-17": 0.4674229033314411,
        "chrf-4": 0.1940302821344662,
        "chrf-150": 0.2607035499325346,
        "chrf-49": 0.335514805658385,
        "chrf-45": 0.21995546736920912,
        "chrf-38": 0.4674229033314411,
        "chrf-23": 0.3061061728793332,
        "chrf-16": 0.3195612701526871,
        "chrf-128": 0.26702041167197016,
        "chrf-188": 0.3638968712249822,
        "chrf-99": 0.38305710627087036,
        "chrf-14": 0.2660919414024904,
        "chrf-112": 0.3941018484554865,
        "chrf-76": 0.2873002535506404,
        "chrf-6": 0.23869682221270971,
        "chrf-37": 0.366849766736358,
        "chrf-40": 0.3295702561273004,
        "chrf-90": 0.23709674278718615,
        "chrf-115": 0.3229688088684701,
        "rougel-120": 0.2857142857142857,
        "rougel-17": 0.6086956521739131,
        "rougel-4": 0.1686746987951807,
        "rougel-150": 0.25,
        "rougel-49": 0.43478260869565216,
        "rougel-45": 0.22857142857142854,
        "rougel-38": 0.6086956521739131,
        "rougel-23": 0.28571428571428575,
        "rougel-16": 0.34146341463414637,
        "rougel-128": 0.3333333333333333,
        "rougel-188": 0.4444444444444444,
        "rougel-99": 0.42857142857142855,
        "rougel-14": 0.2857142857142857,
        "rougel-112": 0.5833333333333334,
        "rougel-76": 0.5599999999999999,
        "rougel-6": 0.25,
        "rougel-37": 0.4827586206896552,
        "rougel-40": 0.4117647058823529,
        "rougel-90": 0.27906976744186046,
        "rougel-115": 0.5263157894736842,
        "meteor-120": 0.30534351145038163,
        "meteor-17": 0.40301835019722176,
        "meteor-4": 0.3262293951306987,
        "meteor-150": 0.3125,
        "meteor-49": 0.33613445378151263,
        "meteor-45": 0.30534351145038163,
        "meteor-38": 0.40301835019722176,
        "meteor-23": 0.5550577459179611,
        "meteor-16": 0.46386861313868616,
        "meteor-128": 0.20833333333333337,
        "meteor-188": 0.67305284247433,
        "meteor-99": 0.772793921620901,
        "meteor-14": 0.3435114503816794,
        "meteor-112": 0.3996598639455783,
        "meteor-76": 0.3963568898633834,
        "meteor-6": 0.20833333333333337,
        "meteor-37": 0.7107438016528924,
        "meteor-40": 0.4092548076923077,
        "meteor-90": 0.2517985611510791,
        "meteor-115": 0.21739130434782608,
        "ruby-120": 0.17391304347826086,
        "ruby-17": 0.5,
        "ruby-4": 0.09859154929577463,
        "ruby-150": 0.15000000000000002,
        "ruby-49": 0.25,
        "ruby-45": 0.13043478260869568,
        "ruby-38": 0.5,
        "ruby-23": 0.125,
        "ruby-16": 0.2068965517241379,
        "ruby-128": 0.25,
        "ruby-188": 0.29166666666666663,
        "ruby-99": 0.25,
        "ruby-14": 0.13043478260869568,
        "ruby-112": 0.25,
        "ruby-76": 0.3076923076923077,
        "ruby-6": 0.08333333333333337,
        "ruby-37": 0.17647058823529416,
        "ruby-40": 0.18181818181818177,
        "ruby-90": 0.16129032258064513,
        "ruby-115": 0.41666666666666663,
        "codebertscore_f1-120": 0.7909813523292542,
        "codebertscore_f3-120": 0.8101256489753723,
        "codebertscore_f1-17": 0.8718714714050293,
        "codebertscore_f3-17": 0.8539449572563171,
        "codebertscore_f1-4": 0.7692847847938538,
        "codebertscore_f3-4": 0.7816034555435181,
        "codebertscore_f1-150": 0.7845360040664673,
        "codebertscore_f3-150": 0.7996481657028198,
        "codebertscore_f1-49": 0.8023006916046143,
        "codebertscore_f3-49": 0.8128829002380371,
        "codebertscore_f1-45": 0.7719679474830627,
        "codebertscore_f3-45": 0.8034565448760986,
        "codebertscore_f1-38": 0.8352230191230774,
        "codebertscore_f3-38": 0.8190043568611145,
        "codebertscore_f1-23": 0.8635645508766174,
        "codebertscore_f3-23": 0.884206235408783,
        "codebertscore_f1-16": 0.7950422167778015,
        "codebertscore_f3-16": 0.8243892788887024,
        "codebertscore_f1-128": 0.8099002242088318,
        "codebertscore_f3-128": 0.8079550862312317,
        "codebertscore_f1-188": 0.8455361127853394,
        "codebertscore_f3-188": 0.8799362182617188,
        "codebertscore_f1-99": 0.8868447542190552,
        "codebertscore_f3-99": 0.9104235172271729,
        "codebertscore_f1-14": 0.7680694460868835,
        "codebertscore_f3-14": 0.7984016537666321,
        "codebertscore_f1-112": 0.8605319857597351,
        "codebertscore_f3-112": 0.8601943254470825,
        "codebertscore_f1-76": 0.8179311752319336,
        "codebertscore_f3-76": 0.8201783895492554,
        "codebertscore_f1-6": 0.8299890160560608,
        "codebertscore_f3-6": 0.8339847922325134,
        "codebertscore_f1-37": 0.8573092818260193,
        "codebertscore_f3-37": 0.9115960597991943,
        "codebertscore_f1-40": 0.7711847424507141,
        "codebertscore_f3-40": 0.788834810256958,
        "codebertscore_f1-90": 0.7699111700057983,
        "codebertscore_f3-90": 0.7816864848136902,
        "codebertscore_f1-115": 0.8373661041259766,
        "codebertscore_f3-115": 0.8237370252609253,
        "codebertscore_s_f1-120": 0.7819158434867859,
        "codebertscore_s_f3-120": 0.8051838874816895,
        "codebertscore_s_f1-17": 0.8679394125938416,
        "codebertscore_s_f3-17": 0.8501474857330322,
        "codebertscore_s_f1-4": 0.7580752372741699,
        "codebertscore_s_f3-4": 0.7749103903770447,
        "codebertscore_s_f1-150": 0.774840235710144,
        "codebertscore_s_f3-150": 0.798977792263031,
        "codebertscore_s_f1-49": 0.7914733290672302,
        "codebertscore_s_f3-49": 0.8099102973937988,
        "codebertscore_s_f1-45": 0.765296459197998,
        "codebertscore_s_f3-45": 0.8029277324676514,
        "codebertscore_s_f1-38": 0.8295307159423828,
        "codebertscore_s_f3-38": 0.8149265646934509,
        "codebertscore_s_f1-23": 0.8652307987213135,
        "codebertscore_s_f3-23": 0.8932055830955505,
        "codebertscore_s_f1-16": 0.7966732382774353,
        "codebertscore_s_f3-16": 0.8345045447349548,
        "codebertscore_s_f1-128": 0.8072838187217712,
        "codebertscore_s_f3-128": 0.8117063641548157,
        "codebertscore_s_f1-188": 0.8541955947875977,
        "codebertscore_s_f3-188": 0.8958156704902649,
        "codebertscore_s_f1-99": 0.8911691904067993,
        "codebertscore_s_f3-99": 0.9177230596542358,
        "codebertscore_s_f1-14": 0.767671525478363,
        "codebertscore_s_f3-14": 0.8061532974243164,
        "codebertscore_s_f1-112": 0.8462736010551453,
        "codebertscore_s_f3-112": 0.8479387760162354,
        "codebertscore_s_f1-76": 0.8109849095344543,
        "codebertscore_s_f3-76": 0.8192967176437378,
        "codebertscore_s_f1-6": 0.8040983080863953,
        "codebertscore_s_f3-6": 0.8076441287994385,
        "codebertscore_s_f1-37": 0.8555583357810974,
        "codebertscore_s_f3-37": 0.9191231727600098,
        "codebertscore_s_f1-40": 0.7666711211204529,
        "codebertscore_s_f3-40": 0.7913190722465515,
        "codebertscore_s_f1-90": 0.7788944244384766,
        "codebertscore_s_f3-90": 0.8014233708381653,
        "codebertscore_s_f1-115": 0.8316174745559692,
        "codebertscore_s_f3-115": 0.8222289681434631,
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-150": 4,
        "raw_gpt35_nsnr-150": "4",
        "gpt35_nsnr-49": 4,
        "raw_gpt35_nsnr-49": "4",
        "gpt35_nsnr-45": 4,
        "raw_gpt35_nsnr-45": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-128": 3,
        "raw_gpt35_nsnr-128": "3",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-99": 4,
        "raw_gpt35_nsnr-99": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-90": 4,
        "raw_gpt35_nsnr-90": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-150": 4,
        "raw_gpt35_nswr-150": "4",
        "gpt35_nswr-49": 4,
        "raw_gpt35_nswr-49": "4",
        "gpt35_nswr-45": 4,
        "raw_gpt35_nswr-45": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-128": 4,
        "raw_gpt35_nswr-128": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-99": 4,
        "raw_gpt35_nswr-99": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-112": 4,
        "raw_gpt35_nswr-112": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-90": 4,
        "raw_gpt35_nswr-90": "4",
        "gpt35_nswr-115": 4,
        "raw_gpt35_nswr-115": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nstd::vector<long> get_odd_collatz(long n) {\n",
        "snippet": [
            "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
        "task_id": "123",
        "163": "std::vector<long> collatz = {1};\n    std::set<long> set_collatz;\n    set_collatz.insert(1);\n    // if n is 1, we return [1]\n    if (n == 1) {\n        return collatz;\n    }\n    while (true) {\n        // if n is odd, return 3*n+1\n        if (n % 2 != 0) {\n            n = 3*n + 1;\n            // if n is odd and n exists in set, return\n            if (set_collatz.find(n) != set_collatz.end()) {\n                return collatz;\n            }\n            set_collatz.insert(n);\n            collatz.push_back(n);\n        }\n        // if n is even, return n/2\n        else {\n            n = n/2;\n            // if n is even and n exists in set, return\n            if (set_collatz.find(n) != set_collatz.end()) {\n                return collatz;\n            }\n            set_collatz.insert(n);\n            collatz.push_back(n);\n        }\n    }",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> res;\n\twhile (n > 1) {\n\t\tres.push_back(n);\n\t\tif (n % 2 == 0)\n\t\t\tn /= 2;\n\t\telse\n\t\t\tn = 3 * n + 1;\n\t}\n\tres.push_back(1);\n\treturn res;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> collatz;\n  while (n != 1) {\n    collatz.push_back(n);\n    if (n % 2) {\n      n = 3 * n + 1;\n    } else {\n      n /= 2;\n    }\n  }\n  collatz.push_back(1);\n  std::vector<long> odd_collatz;\n  for (auto v : collatz) {\n    if (v % 2) {\n      odd_collatz.push_back(v);\n    }\n  }\n  return odd_collatz;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<long> collatz_sequence;\n    collatz_sequence.push_back(n);\n    while(n!=1) {\n        if(n%2==0) {\n            n = n/2;\n        } else {\n            n = (3*n) + 1;\n        }\n        collatz_sequence.push_back(n);\n    }\n    std::vector<long> odd_collatz_sequence;\n    for(int i=0; i<collatz_sequence.size(); i++) {\n        if(collatz_sequence[i]%2!=0) {\n            odd_collatz_sequence.push_back(collatz_sequence[i]);\n        }\n    }\n    return odd_collatz_sequence;",
        "grade-189": {
            "execution": 0
        },
        "70": "if (n == 1) return {1};\n\tstd::vector<long> res;\n\tif (n % 2 == 1) {\n\t\tres.push_back(n);\n\t}\n\twhile (n != 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tn /= 2;\n\t\t} else {\n\t\t\tn = n * 3 + 1;\n\t\t\tres.push_back(n);\n\t\t}\n\t}\n\treturn res;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> Collatz;\n    Collatz.push_back(n);\n    while(n!=1){\n        if(n%2==0){\n            n/=2;\n        }\n        else{\n            n=3*n+1;\n        }\n        Collatz.push_back(n);\n    }\n    std::vector<long> oddCollatz;\n    for(int i=0;i<Collatz.size();i++){\n        if(Collatz[i]%2==1){\n            oddCollatz.push_back(Collatz[i]);\n        }\n    }\n    return oddCollatz;",
        "grade-62": {
            "execution": 0
        },
        "57": "// Implement this function.\n    long n2=n;\n    long v_size=0;\n    std::vector<long> collatz_sequence;\n    while(n!=1){\n        if(n%2==0){\n            n=n/2;\n            collatz_sequence.push_back(n);\n            v_size++;\n        }\n        else{\n            n=3*n+1;\n            collatz_sequence.push_back(n);\n            v_size++;\n        }\n    }\n    std::vector<long> odd_collatz_sequence;\n    int count=0;\n    for(int i=0;i<v_size;i++){\n        if(collatz_sequence[i]%2!=0){\n            odd_collatz_sequence.push_back(collatz_sequence[i]);\n            count++;\n        }\n    }\n    odd_collatz_sequence.push_back(1);\n    return odd_collatz_sequence;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> answer;\n\tlong even_val;\n\tanswer.push_back(n);\n\twhile (n != 1) {\n\t\tif (n % 2 == 0) {\n\t\t\teven_val = n / 2;\n\t\t\tif (even_val % 2 != 0) {\n\t\t\t\tanswer.push_back(even_val);\n\t\t\t}\n\t\t\tn = even_val;\n\t\t}\n\t\telse {\n\t\t\tn = 3 * n + 1;\n\t\t\tanswer.push_back(n);\n\t\t}\n\t}\n\treturn answer;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> v;\n    int odd[100000] = {0};\n    int step = 0;\n    long num = n;\n    while(n != 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        }\n        else {\n            n = 3 * n + 1;\n        }\n        odd[step] = n;\n        step++;\n    }\n    v.push_back(1);\n    if(num != 1) {\n        v.push_back(num);\n    }\n    for(int i = 0; i < step; i++) {\n        if(odd[i] % 2 != 0) {\n            v.push_back(odd[i]);\n        }\n    }\n    return v;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n  // Your code goes here.\n  std::vector<long> collatz;\n  // if input n is zero, return empty vector\n  if (n == 0) {\n    return result;\n  }\n  // get collatz sequence\n  while (n != 1) {\n    collatz.push_back(n);\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n  }\n  collatz.push_back(1);\n  // add all odd numbers in collatz sequence to result\n  for (auto n : collatz) {\n    if (n % 2 != 0) {\n      result.push_back(n);\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<long> res;\n    if (n == 1) {\n        res.push_back(1);\n        return res;\n    }\n\n    for (long i = n; i != 1;) {\n        if (i % 2 != 0) {\n            res.push_back(i);\n        }\n        if (i % 2 == 0) {\n            i = i / 2;\n        } else {\n            i = (3 * i) + 1;\n        }\n    }\n    res.push_back(1);\n    std::sort(res.begin(), res.end());\n    return res;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> res;\n    if (n < 1) return res;\n    res.push_back(n);\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = n * 3 + 1;\n        }\n        if (n % 2 != 0) {\n            res.push_back(n);\n        }\n    }\n    return res;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> collatz_seq;\n\tcollatz_seq.push_back(n);\n\twhile (n > 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tn = n / 2;\n\t\t}\n\t\telse {\n\t\t\tn = (3 * n) + 1;\n\t\t}\n\t\tcollatz_seq.push_back(n);\n\t}\n\tstd::vector<long> collatz_odd_seq;\n\tstd::vector<long> collatz_even_seq;\n\tfor (int i = 0; i < collatz_seq.size(); i++) {\n\t\tif (collatz_seq[i] % 2 == 0) {\n\t\t\tcollatz_even_seq.push_back(collatz_seq[i]);\n\t\t}\n\t\telse {\n\t\t\tcollatz_odd_seq.push_back(collatz_seq[i]);\n\t\t}\n\t}\n\tstd::sort(collatz_odd_seq.begin(), collatz_odd_seq.end());\n\treturn collatz_odd_seq;",
        "grade-22": {
            "execution": 1
        },
        "151": "if (n == 1) {\n        return {1};\n    }\n    std::vector<long> sequence;\n    while (n > 1) {\n        sequence.push_back(n);\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    sequence.push_back(1);\n    std::vector<long> result;\n    for (auto &e : sequence) {\n        if (e % 2 == 1) {\n            result.push_back(e);\n        }\n    }\n    return result;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> result;\n    result.push_back(n);\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = (3 * n) + 1;\n        }\n        if (n % 2 != 0) {\n            result.push_back(n);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> odd_numbers;\n    if (n <= 0) {\n        return odd_numbers;\n    }\n    // odd_numbers.push_back(n);\n    // For efficiency we don't push back the very first element as it is already odd\n    while (n != 1) {\n        odd_numbers.push_back(n);\n        if (n % 2) {\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    odd_numbers.push_back(1);\n    return odd_numbers;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> collatz_list;\n    long start_number = n;\n    do{\n        if(start_number % 2 == 0){\n            start_number = start_number / 2;\n        }else{\n            start_number = 3 * start_number + 1;\n        }\n        if(start_number % 2 != 0)\n            collatz_list.push_back(start_number);\n    }while(start_number != 1);\n    std::sort(collatz_list.begin(), collatz_list.end());\n    return collatz_list;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> answer;\n    answer.push_back(n);\n    long current_num = n;\n    while (current_num != 1) {\n        if (current_num % 2 == 0) {\n            current_num = current_num / 2;\n        } else {\n            current_num = current_num * 3 + 1;\n        }\n        if (current_num % 2 != 0) {\n            answer.push_back(current_num);\n        }\n    }\n    answer.push_back(1);\n    return answer;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> collatz;\n  while (n > 1) {\n    collatz.push_back(n);\n    if (n % 2 == 0) {\n      n /= 2;\n    } else {\n      n = 3 * n + 1;\n    }\n  }\n  return collatz;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> seq;\n    while (n > 1) {\n        seq.push_back(n);\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = n * 3 + 1;\n        }\n    }\n    seq.push_back(1);\n    return seq;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.14276822800438796,
        "bleu-28": 0.28989943495430176,
        "bleu-6": 0.29178402047269325,
        "bleu-189": 0.2804745071459931,
        "bleu-70": 0.4369375425338756,
        "bleu-62": 0.273573335801427,
        "bleu-57": 0.21382129427623997,
        "bleu-35": 0.35156066220665133,
        "bleu-188": 0.2282525968731704,
        "bleu-26": 0.2211485790334826,
        "bleu-173": 0.23870854611528902,
        "bleu-139": 0.41923357619774104,
        "bleu-22": 0.2322898239714536,
        "bleu-151": 0.2687503365867713,
        "bleu-108": 0.4342491036260794,
        "bleu-8": 0.2539654805055164,
        "bleu-7": 0.2771382855869765,
        "bleu-23": 0.3017256895859704,
        "bleu-55": 0.2817435382037373,
        "bleu-59": 0.38095403317281773,
        "codebleu-163": 0.7117497013924279,
        "codebleu-28": 0.5180773238996929,
        "codebleu-6": 0.6444422681057518,
        "codebleu-189": 0.6989674125773121,
        "codebleu-70": 0.6703428025150087,
        "codebleu-62": 0.6728687623296615,
        "codebleu-57": 0.6813500221783785,
        "codebleu-35": 0.6891640793860039,
        "codebleu-188": 0.694716691308851,
        "codebleu-26": 0.6880814968177063,
        "codebleu-173": 0.7118537092044553,
        "codebleu-139": 0.6652391554180945,
        "codebleu-22": 0.726326176050348,
        "codebleu-151": 0.6607327719535607,
        "codebleu-108": 0.7531844141378691,
        "codebleu-8": 0.6458182720909265,
        "codebleu-7": 0.6992330741448926,
        "codebleu-23": 0.6831296624766435,
        "codebleu-55": 0.4848432189452939,
        "codebleu-59": 0.5726624536336637,
        "chrf-163": 0.28439494855327774,
        "chrf-28": 0.38200148114530763,
        "chrf-6": 0.38663858929561223,
        "chrf-189": 0.373600705989472,
        "chrf-70": 0.48210609017338646,
        "chrf-62": 0.41495026274716695,
        "chrf-57": 0.34002494327233407,
        "chrf-35": 0.3990767793043114,
        "chrf-188": 0.4128509543241074,
        "chrf-26": 0.360930592527812,
        "chrf-173": 0.4062138027638422,
        "chrf-139": 0.4662285289877037,
        "chrf-22": 0.3727368246671128,
        "chrf-151": 0.39611372521701294,
        "chrf-108": 0.5652510624581629,
        "chrf-8": 0.3718660344517219,
        "chrf-7": 0.38544757449136635,
        "chrf-23": 0.3538233247810298,
        "chrf-55": 0.37072992574866265,
        "chrf-59": 0.4233740046649387,
        "rougel-163": 0.3669064748201439,
        "rougel-28": 0.515625,
        "rougel-6": 0.5030674846625767,
        "rougel-189": 0.4526315789473684,
        "rougel-70": 0.5,
        "rougel-62": 0.4526315789473684,
        "rougel-57": 0.4107142857142857,
        "rougel-35": 0.5157232704402516,
        "rougel-188": 0.4372093023255814,
        "rougel-26": 0.3981481481481481,
        "rougel-173": 0.5052631578947369,
        "rougel-139": 0.5490196078431372,
        "rougel-22": 0.4192139737991266,
        "rougel-151": 0.42622950819672134,
        "rougel-108": 0.6060606060606061,
        "rougel-8": 0.4823529411764706,
        "rougel-7": 0.484472049689441,
        "rougel-23": 0.4840764331210191,
        "rougel-55": 0.49599999999999994,
        "rougel-59": 0.5606060606060606,
        "meteor-163": 0.40668758528715754,
        "meteor-28": 0.4889504975772983,
        "meteor-6": 0.459393059549401,
        "meteor-189": 0.4472858362688382,
        "meteor-70": 0.616574585635359,
        "meteor-62": 0.4472858362688382,
        "meteor-57": 0.46238924100526596,
        "meteor-35": 0.5337483458049138,
        "meteor-188": 0.4506484039746804,
        "meteor-26": 0.43245237741298387,
        "meteor-173": 0.6743846542747324,
        "meteor-139": 0.5540419340019386,
        "meteor-22": 0.6513449102774458,
        "meteor-151": 0.45644141145139827,
        "meteor-108": 0.7410311909110063,
        "meteor-8": 0.534158908771014,
        "meteor-7": 0.6061385459533608,
        "meteor-23": 0.5219196352237104,
        "meteor-55": 0.468875705912743,
        "meteor-59": 0.5809828571428571,
        "ruby-163": 0.24154589371980673,
        "ruby-28": 0.3098591549295775,
        "ruby-6": 0.2934782608695652,
        "ruby-189": 0.32773109243697474,
        "ruby-70": 0.388235294117647,
        "ruby-62": 0.32773109243697474,
        "ruby-57": 0.28104575163398693,
        "ruby-35": 0.3522727272727273,
        "ruby-188": 0.3055555555555556,
        "ruby-26": 0.2689655172413793,
        "ruby-173": 0.39495798319327735,
        "ruby-139": 0.4024390243902439,
        "ruby-22": 0.28481012658227844,
        "ruby-151": 0.3035714285714286,
        "ruby-108": 0.4893617021276596,
        "ruby-8": 0.2828282828282829,
        "ruby-7": 0.34444444444444444,
        "ruby-23": 0.39534883720930236,
        "ruby-55": 0.2816901408450704,
        "ruby-59": 0.3380281690140845,
        "codebertscore_f1-163": 0.7121331095695496,
        "codebertscore_f3-163": 0.764878511428833,
        "codebertscore_f1-28": 0.8836378455162048,
        "codebertscore_f3-28": 0.8756062388420105,
        "codebertscore_f1-6": 0.8226392269134521,
        "codebertscore_f3-6": 0.8448269963264465,
        "codebertscore_f1-189": 0.7755749225616455,
        "codebertscore_f3-189": 0.8252540826797485,
        "codebertscore_f1-70": 0.8799806833267212,
        "codebertscore_f3-70": 0.8734091520309448,
        "codebertscore_f1-62": 0.7926596403121948,
        "codebertscore_f3-62": 0.8309500813484192,
        "codebertscore_f1-57": 0.7259247303009033,
        "codebertscore_f3-57": 0.7944086194038391,
        "codebertscore_f1-35": 0.8402573466300964,
        "codebertscore_f3-35": 0.8477340936660767,
        "codebertscore_f1-188": 0.7743813991546631,
        "codebertscore_f3-188": 0.8094857931137085,
        "codebertscore_f1-26": 0.7728502154350281,
        "codebertscore_f3-26": 0.8148689270019531,
        "codebertscore_f1-173": 0.8259379267692566,
        "codebertscore_f3-173": 0.8332375288009644,
        "codebertscore_f1-139": 0.8639985918998718,
        "codebertscore_f3-139": 0.8561102151870728,
        "codebertscore_f1-22": 0.7755038142204285,
        "codebertscore_f3-22": 0.8407692909240723,
        "codebertscore_f1-151": 0.8065794706344604,
        "codebertscore_f3-151": 0.821459949016571,
        "codebertscore_f1-108": 0.8763360977172852,
        "codebertscore_f3-108": 0.8811878561973572,
        "codebertscore_f1-8": 0.7744854092597961,
        "codebertscore_f3-8": 0.8011156320571899,
        "codebertscore_f1-7": 0.782721221446991,
        "codebertscore_f3-7": 0.8139227628707886,
        "codebertscore_f1-23": 0.8190000653266907,
        "codebertscore_f3-23": 0.8297213912010193,
        "codebertscore_f1-55": 0.8618952631950378,
        "codebertscore_f3-55": 0.8565700650215149,
        "codebertscore_f1-59": 0.8745637536048889,
        "codebertscore_f3-59": 0.8658605217933655,
        "codebertscore_s_f1-163": 0.7608547806739807,
        "codebertscore_s_f3-163": 0.8091049790382385,
        "codebertscore_s_f1-28": 0.8763524889945984,
        "codebertscore_s_f3-28": 0.8690427541732788,
        "codebertscore_s_f1-6": 0.8165295720100403,
        "codebertscore_s_f3-6": 0.8417651057243347,
        "codebertscore_s_f1-189": 0.8011882305145264,
        "codebertscore_s_f3-189": 0.8401464819908142,
        "codebertscore_s_f1-70": 0.8790748119354248,
        "codebertscore_s_f3-70": 0.8710981011390686,
        "codebertscore_s_f1-62": 0.8099457025527954,
        "codebertscore_s_f3-62": 0.8408448100090027,
        "codebertscore_s_f1-57": 0.7811256647109985,
        "codebertscore_s_f3-57": 0.8281371593475342,
        "codebertscore_s_f1-35": 0.836029052734375,
        "codebertscore_s_f3-35": 0.8455348610877991,
        "codebertscore_s_f1-188": 0.8102172017097473,
        "codebertscore_s_f3-188": 0.8386794924736023,
        "codebertscore_s_f1-26": 0.7896188497543335,
        "codebertscore_s_f3-26": 0.8294270634651184,
        "codebertscore_s_f1-173": 0.83875972032547,
        "codebertscore_s_f3-173": 0.8509016633033752,
        "codebertscore_s_f1-139": 0.8631030321121216,
        "codebertscore_s_f3-139": 0.8578102588653564,
        "codebertscore_s_f1-22": 0.7924488186836243,
        "codebertscore_s_f3-22": 0.8528311252593994,
        "codebertscore_s_f1-151": 0.8310206532478333,
        "codebertscore_s_f3-151": 0.8426777720451355,
        "codebertscore_s_f1-108": 0.8737973570823669,
        "codebertscore_s_f3-108": 0.8824761509895325,
        "codebertscore_s_f1-8": 0.782487690448761,
        "codebertscore_s_f3-8": 0.8127644658088684,
        "codebertscore_s_f1-7": 0.7850868105888367,
        "codebertscore_s_f3-7": 0.8230636119842529,
        "codebertscore_s_f1-23": 0.8238635063171387,
        "codebertscore_s_f3-23": 0.8393163681030273,
        "codebertscore_s_f1-55": 0.8543186783790588,
        "codebertscore_s_f3-55": 0.8492205739021301,
        "codebertscore_s_f1-59": 0.876691997051239,
        "codebertscore_s_f3-59": 0.8686416745185852,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 2,
        "raw_gpt35_nsnr-35": "2",
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(', ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nstd::string match_parens(std::vector<std::string> lst) {\n",
        "snippet": [
            "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n"
        ],
        "simplified": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
        "task_id": "119",
        "163": "int open = 0;\n    int close = 0;\n    for (auto &str : lst) {\n        for (auto &ch : str) {\n            if (ch == '(') {\n                open++;\n            } else {\n                close++;\n            }\n        }\n    }\n    std::string ret;\n    if (open == close) {\n        ret = \"Yes\";\n    } else {\n        ret = \"No\";\n    }\n    return ret;",
        "grade-163": {
            "execution": 0
        },
        "28": "int c1 = 0, c2 = 0;\n    for (int i = 0; i < lst[0].size(); i++) {\n        if (lst[0][i] == '(') {\n            c1++;\n        } else {\n            c1--;\n        }\n    }\n    for (int i = 0; i < lst[1].size(); i++) {\n        if (lst[1][i] == '(') {\n            c2++;\n        } else {\n            c2--;\n        }\n    }\n    if (c1 > 0 && c2 > 0 || c1 < 0 && c2 < 0)\n        return \"No\";\n    return \"Yes\";",
        "grade-28": {
            "execution": 0
        },
        "6": "// Your code here\n    int score = 0;\n    for (auto s : lst) {\n        for (auto c : s) {\n            if (c == '(') score++;\n            else score--;\n            if (score < 0) return \"No\";\n        }\n    }\n    return score == 0 ? \"Yes\" : \"No\";",
        "grade-6": {
            "execution": 0
        },
        "190": "std::string S;\n  for (auto p : lst) {\n    S += p;\n  }\n  std::stack<char> st;\n  for (auto p : S) {\n    if (p == '(') {\n      st.push(p);\n    } else {\n      if (st.empty()) return \"No\";\n      st.pop();\n    }\n  }\n  return st.empty() ? \"Yes\" : \"No\";",
        "grade-190": {
            "execution": 0
        },
        "70": "std::string ans = \"\";\n  std::vector<char> stk;\n  for (auto i : lst) {\n    for (auto j : i) {\n      if (j == '(') {\n        stk.push_back(j);\n      } else {\n        if (stk.size() > 0) {\n          stk.pop_back();\n        } else {\n          ans = \"No\";\n          break;\n        }\n      }\n    }\n  }\n  if (stk.size() > 0) {\n    ans = \"No\";\n  } else {\n    ans = \"Yes\";\n  }\n  return ans;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string open = \"(\";\n  std::string close = \")\";\n  if (lst[0][0] == close[0] && lst[1][0] == close[0]) {\n    return \"No\";\n  } else if (lst[0][0] == open[0] && lst[1][0] == open[0]) {\n    return \"Yes\";\n  } else if (lst[0][0] == open[0] && lst[1][0] == close[0]) {\n    return \"Yes\";\n  } else if (lst[0][0] == close[0] && lst[1][0] == open[0]) {\n    return \"Yes\";\n  }\n  return \"\";",
        "grade-62": {
            "execution": 0
        },
        "57": "// Assume that lst[0] and lst[1] are not empty\n  if (lst[0][0] == ')' || lst[1][0] == ')') return \"No\";\n  int opening_parens_left = 0;\n  for (int i = 0; i < lst[0].size(); i++) {\n    if (lst[0][i] == '(') opening_parens_left++;\n    else opening_parens_left--;\n    if (opening_parens_left < 0) return \"No\";\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] == '(') opening_parens_left++;\n    else opening_parens_left--;\n    if (opening_parens_left < 0) return \"No\";\n  }\n  if (opening_parens_left > 0) return \"No\";\n  return \"Yes\";",
        "grade-57": {
            "execution": 0
        },
        "35": "//my solution\n    std::string first = lst[0];\n    std::string second = lst[1];\n    int num_open = 0;\n    int num_close = 0;\n    for(int i = 0; i < first.length(); i++){\n        if(first[i] == '('){\n            num_open++;\n        }\n        else{\n            num_close++;\n        }\n    }\n    for(int i = 0; i < second.length(); i++){\n        if(second[i] == '('){\n            num_open++;\n        }\n        else{\n            num_close++;\n        }\n    }\n    if(num_open == num_close){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n    //end my solution",
        "grade-35": {
            "execution": 0
        },
        "189": "int sum1 = 0;\n  int sum2 = 0;\n  for (int i = 0; i < lst[0].size(); i++) {\n    if (lst[0][i] == '(') {\n      sum1++;\n    } else {\n      sum1--;\n    }\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] == '(') {\n      sum2++;\n    } else {\n      sum2--;\n    }\n  }\n  if (sum1 == 0 && sum2 == 0) {\n    return \"Yes\";\n  } else if (sum1 > 0 && sum2 < 0) {\n    if ((-1 * sum2) % 2 == 0) {\n      return \"Yes\";\n    } else {\n      return \"No\";\n    }\n  } else if (sum1 < 0 && sum2 > 0) {\n    if ((-1 * sum1) % 2 == 0) {\n      return \"Yes\";\n    } else {\n      return \"No\";\n    }\n  } else {\n    return \"No\";\n  }",
        "grade-189": {
            "execution": 0
        },
        "26": "std::string output_string = \"\";\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            output_string += lst[i][j];\n        }\n    }\n    // printf(\"%s\\n\", output_string.c_str());\n    int open_parentheses = 0;\n    int close_parentheses = 0;\n    for (int i = 0; i < output_string.size(); i++) {\n        if (output_string[i] == '(') {\n            open_parentheses++;\n        } else {\n            close_parentheses++;\n        }\n        if (close_parentheses > open_parentheses) {\n            return \"No\";\n        }\n    }\n    if (open_parentheses == close_parentheses) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }",
        "grade-26": {
            "execution": 0
        },
        "174": "std::string str = \"\";\n  for (auto e : lst) {\n    str += e;\n  }\n  std::stack<char> s;\n  for (int i = 0; i < str.length(); i++) {\n    if (str[i] == '(') {\n      s.push(str[i]);\n    } else {\n      if (s.empty()) {\n        return \"No\";\n      }\n      s.pop();\n    }\n  }\n  if (s.empty()) {\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-174": {
            "execution": 0
        },
        "139": "// your code here\n  std::string parens_one;\n  std::string parens_two;\n  int count_one = 0;\n  int count_two = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i == 0){\n      parens_one = lst[i];\n    }\n    else if(i == 1){\n      parens_two = lst[i];\n    }\n  }\n  for(int i = 0; i < parens_one.length(); i++){\n    if(parens_one[i] == '('){\n      count_one++;\n    }\n    else if(parens_one[i] == ')'){\n      count_one--;\n    }\n  }\n  for(int i = 0; i < parens_two.length(); i++){\n    if(parens_two[i] == '('){\n      count_two++;\n    }\n    else if(parens_two[i] == ')'){\n      count_two--;\n    }\n  }\n  if(count_one == 0 && count_two == 0){\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-139": {
            "execution": 0
        },
        "22": "auto openParen = 0;\n  auto closeParen = 0;\n  for (auto item : lst) {\n    for (auto ch : item) {\n      if (ch == '(') {\n        openParen++;\n      } else {\n        closeParen++;\n      }\n    }\n  }\n  if (openParen == closeParen) {\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-22": {
            "execution": 0
        },
        "151": "// your code here\n    if(lst[0].length() != lst[1].length())\n      return \"No\";\n    std::stack<char> s;\n    for(auto a: lst[0]){\n      if(a == '(')\n        s.push(a);\n      else\n        if(s.empty())\n          return \"No\";\n        else\n          s.pop();\n    }\n    for(auto a: lst[1]){\n      if(a == '(')\n        s.push(a);\n      else\n        if(s.empty())\n          return \"No\";\n        else\n          s.pop();\n    }\n    return \"Yes\";",
        "grade-151": {
            "execution": 0
        },
        "108": "int open = 0;\n    for (std::string string : lst) {\n        for (char c : string) {\n            if (c == '(') {\n                open++;\n            } else {\n                open--;\n            }\n            if (open < 0) {\n                return \"No\";\n            }\n        }\n    }\n    return (open == 0) ? \"Yes\" : \"No\";",
        "grade-108": {
            "execution": 0
        },
        "8": "int count1 = 0;\n  int count2 = 0;\n  for (int i = 0; i < lst[0].size(); i++) {\n    if (lst[0][i] == '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] == '(') {\n      count2++;\n    } else {\n      count2--;\n    }\n  }\n  if (count1 < 0 && count2 > 0) {\n    int sum = count1 + count2;\n    if (sum < 0) {\n      return \"No\";\n    } else {\n      return \"Yes\";\n    }\n  } else if (count1 > 0 && count2 < 0) {\n    int sum = count1 + count2;\n    if (sum > 0) {\n      return \"No\";\n    } else {\n      return \"Yes\";\n    }\n  } else if (count1 == 0 && count2 == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = lst.size();\n    std::string left = lst[0];\n    std::string right = lst[1];\n    std::string full = \"\";\n    full = left + right;\n    int count_left = std::count(full.begin(), full.end(), '(');\n    int count_right = std::count(full.begin(), full.end(), ')');\n    int diff = count_left - count_right;\n    if (count_left != count_right) {\n        return \"No\";\n    }\n    else {\n        for (int i = 0; i < left.size(); i++) {\n            if (left[i] == '(') {\n                if (count_left > 0) {\n                    count_left--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n            else {\n                if (count_right > 0) {\n                    count_right--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n        }\n        for (int i = 0; i < right.size(); i++) {\n            if (right[i] == '(') {\n                if (count_left > 0) {\n                    count_left--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n            else {\n                if (count_right > 0) {\n                    count_right--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n        }\n        return \"Yes\";\n    }",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string ans = \"\";\n    int open = 0;\n    int close = 0;\n    for (auto str : lst) {\n        for (auto c : str) {\n            if (c == '(') {\n                open++;\n            } else {\n                close++;\n            }\n        }\n    }\n    if (open == close) {\n        ans = \"Yes\";\n    } else {\n        ans = \"No\";\n    }\n    return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code here\n    std::string str1 = lst[0];\n    std::string str2 = lst[1];\n    int op,cl;\n    op = cl = 0;\n    for(int i=0;i<str1.length();i++){\n        if(str1[i] == '(')\n            op++;\n        else\n            cl++;\n    }\n    for(int i=0;i<str2.length();i++){\n        if(str2[i] == '(')\n            op++;\n        else\n            cl++;\n    }\n    if(op == cl)\n        return \"Yes\";\n    else\n        return \"No\";",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string f1 = lst[0];\n    std::string f2 = lst[1];\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < f1.length(); i++) {\n        if(f1[i] == '(') {\n            count1++;\n        } else {\n            count1--;\n        }\n    }\n    for(int i = 0; i < f2.length(); i++) {\n        if(f2[i] == '(') {\n            count2++;\n        } else {\n            count2--;\n        }\n    }\n    if(count1 < 0 || count2 < 0) {\n        return \"No\";\n    }\n    int min = count1;\n    if(count2 < min) {\n        min = count2;\n    }\n    for(int i = 0; i < min; i++) {\n        f1 += ')';\n        f2 += ')';\n    }\n    std::stack<char> st;\n    for(int i = 0; i < f1.length(); i++) {\n        if(f1[i] == '(') {\n            st.push(f1[i]);\n        } else {\n            if(st.empty()) {\n                return \"No\";\n            }\n            st.pop();\n        }\n    }\n    while(!st.empty()) {\n        if(st.top() == '(') {\n            st.pop();\n        } else {\n            return \"No\";\n        }\n    }\n    for(int i = 0; i < f2.length(); i++) {\n        if(f2[i] == '(') {\n            st.push(f2[i]);\n        } else {\n            if(st.empty()) {\n                return \"No\";\n            }\n            st.pop();\n        }\n    }\n    while(!st.empty()) {\n        if(st.top() == '(') {\n            st.pop();\n        } else {\n            return \"No\";\n        }\n    }\n    return \"Yes\";",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.0560404228956647,
        "bleu-28": 0.3044484291639095,
        "bleu-6": 0.04703644402130335,
        "bleu-190": 0.06849752895908144,
        "bleu-70": 0.0934097781912349,
        "bleu-62": 0.1771331691181043,
        "bleu-57": 0.42421899364741483,
        "bleu-35": 0.3189116222724857,
        "bleu-189": 0.3567269842316947,
        "bleu-26": 0.2851805530498261,
        "bleu-174": 0.1811232128431489,
        "bleu-139": 0.3964107101168059,
        "bleu-22": 0.047199667660897025,
        "bleu-151": 0.21099058456767195,
        "bleu-108": 0.05502153083871866,
        "bleu-8": 0.36037892788861314,
        "bleu-7": 0.2760112291635769,
        "bleu-23": 0.058660308124996466,
        "bleu-55": 0.30660416815824076,
        "bleu-59": 0.23253906141127362,
        "codebleu-163": 0.18638520281454238,
        "codebleu-28": 0.4052774692503476,
        "codebleu-6": 0.1611043327519051,
        "codebleu-190": 0.21958154170388106,
        "codebleu-70": 0.2631795275418688,
        "codebleu-62": 0.3249671371038969,
        "codebleu-57": 0.5501594149739235,
        "codebleu-35": 0.4556791889328414,
        "codebleu-189": 0.576093812694027,
        "codebleu-26": 0.5024183185249327,
        "codebleu-174": 0.3450582168727537,
        "codebleu-139": 0.6206940576458888,
        "codebleu-22": 0.16220081619677845,
        "codebleu-151": 0.382452613764697,
        "codebleu-108": 0.16899129403350227,
        "codebleu-8": 0.5941721681485203,
        "codebleu-7": 0.5947998014189885,
        "codebleu-23": 0.1963074395400476,
        "codebleu-55": 0.44450420840082505,
        "codebleu-59": 0.6753322078927053,
        "chrf-163": 0.16035731213604124,
        "chrf-28": 0.30902530388604854,
        "chrf-6": 0.1604712377280942,
        "chrf-190": 0.1536032065503028,
        "chrf-70": 0.15825515711509425,
        "chrf-62": 0.23982620513577563,
        "chrf-57": 0.39290909668036283,
        "chrf-35": 0.34714693388324724,
        "chrf-189": 0.35953105925785506,
        "chrf-26": 0.3044327874064882,
        "chrf-174": 0.2605962179127496,
        "chrf-139": 0.40707437261670004,
        "chrf-22": 0.16261804483230205,
        "chrf-151": 0.29202698398488636,
        "chrf-108": 0.16638139451695222,
        "chrf-8": 0.42442728210559055,
        "chrf-7": 0.38414772888696885,
        "chrf-23": 0.15831245766335175,
        "chrf-55": 0.35616249050781834,
        "chrf-59": 0.43321172303795225,
        "rougel-163": 0.28378378378378377,
        "rougel-28": 0.4732394366197183,
        "rougel-6": 0.2978723404255319,
        "rougel-190": 0.2894736842105263,
        "rougel-70": 0.3180428134556575,
        "rougel-62": 0.3794871794871796,
        "rougel-57": 0.525,
        "rougel-35": 0.546448087431694,
        "rougel-189": 0.4601366742596811,
        "rougel-26": 0.49870129870129865,
        "rougel-174": 0.42168674698795183,
        "rougel-139": 0.5496535796766744,
        "rougel-22": 0.2867132867132867,
        "rougel-151": 0.3785310734463277,
        "rougel-108": 0.3055555555555555,
        "rougel-8": 0.47139588100686497,
        "rougel-7": 0.4552845528455285,
        "rougel-23": 0.2895622895622896,
        "rougel-55": 0.5527065527065527,
        "rougel-59": 0.4518167456556082,
        "meteor-163": 0.182704237449895,
        "meteor-28": 0.35691742921514513,
        "meteor-6": 0.17859086294416243,
        "meteor-190": 0.17848335490723222,
        "meteor-70": 0.17358671624655148,
        "meteor-62": 0.3283533709687053,
        "meteor-57": 0.4226886083306787,
        "meteor-35": 0.3729337474000795,
        "meteor-189": 0.4618564907175959,
        "meteor-26": 0.39856191050524237,
        "meteor-174": 0.3122171376667352,
        "meteor-139": 0.512354873880245,
        "meteor-22": 0.18459759581668986,
        "meteor-151": 0.28906845140929377,
        "meteor-108": 0.1773129404708352,
        "meteor-8": 0.4421135622857941,
        "meteor-7": 0.414238401204333,
        "meteor-23": 0.19602722901097075,
        "meteor-55": 0.3729857559843398,
        "meteor-59": 0.4537149474323654,
        "ruby-163": 0.1943127962085308,
        "ruby-28": 0.3270142180094787,
        "ruby-6": 0.19905213270142175,
        "ruby-190": 0.18957345971563977,
        "ruby-70": 0.20853080568720384,
        "ruby-62": 0.1943127962085308,
        "ruby-57": 0.31753554502369663,
        "ruby-35": 0.3507109004739336,
        "ruby-189": 0.22807017543859653,
        "ruby-26": 0.35545023696682465,
        "ruby-174": 0.2654028436018957,
        "ruby-139": 0.40990990990990994,
        "ruby-22": 0.17535545023696686,
        "ruby-151": 0.23696682464454977,
        "ruby-108": 0.1943127962085308,
        "ruby-8": 0.24336283185840712,
        "ruby-7": 0.302491103202847,
        "ruby-23": 0.18957345971563977,
        "ruby-55": 0.3744075829383886,
        "ruby-59": 0.3199052132701422,
        "codebertscore_f1-163": 0.7187899351119995,
        "codebertscore_f3-163": 0.7058135867118835,
        "codebertscore_f1-28": 0.8216975331306458,
        "codebertscore_f3-28": 0.8153151869773865,
        "codebertscore_f1-6": 0.7389533519744873,
        "codebertscore_f3-6": 0.7156316637992859,
        "codebertscore_f1-190": 0.6962431073188782,
        "codebertscore_f3-190": 0.6745383739471436,
        "codebertscore_f1-70": 0.7236843109130859,
        "codebertscore_f3-70": 0.7176008224487305,
        "codebertscore_f1-62": 0.7407320737838745,
        "codebertscore_f3-62": 0.7147749066352844,
        "codebertscore_f1-57": 0.8003189563751221,
        "codebertscore_f3-57": 0.8079136610031128,
        "codebertscore_f1-35": 0.7871774435043335,
        "codebertscore_f3-35": 0.7901734113693237,
        "codebertscore_f1-189": 0.8048533201217651,
        "codebertscore_f3-189": 0.8101245164871216,
        "codebertscore_f1-26": 0.7614666819572449,
        "codebertscore_f3-26": 0.7635618448257446,
        "codebertscore_f1-174": 0.7608885765075684,
        "codebertscore_f3-174": 0.7454965710639954,
        "codebertscore_f1-139": 0.7917158007621765,
        "codebertscore_f3-139": 0.8043593764305115,
        "codebertscore_f1-22": 0.6931240558624268,
        "codebertscore_f3-22": 0.6782413125038147,
        "codebertscore_f1-151": 0.7542539238929749,
        "codebertscore_f3-151": 0.7461917400360107,
        "codebertscore_f1-108": 0.7538093328475952,
        "codebertscore_f3-108": 0.7239561080932617,
        "codebertscore_f1-8": 0.8247925043106079,
        "codebertscore_f3-8": 0.8248676657676697,
        "codebertscore_f1-7": 0.7792710661888123,
        "codebertscore_f3-7": 0.7845660448074341,
        "codebertscore_f1-23": 0.7383826375007629,
        "codebertscore_f3-23": 0.7179685235023499,
        "codebertscore_f1-55": 0.802063524723053,
        "codebertscore_f3-55": 0.7996081113815308,
        "codebertscore_f1-59": 0.8096197843551636,
        "codebertscore_f3-59": 0.8211592435836792,
        "codebertscore_s_f1-163": 0.7318477630615234,
        "codebertscore_s_f3-163": 0.7247874140739441,
        "codebertscore_s_f1-28": 0.8207060098648071,
        "codebertscore_s_f3-28": 0.8126182556152344,
        "codebertscore_s_f1-6": 0.769631564617157,
        "codebertscore_s_f3-6": 0.7568414807319641,
        "codebertscore_s_f1-190": 0.7302516102790833,
        "codebertscore_s_f3-190": 0.7183183431625366,
        "codebertscore_s_f1-70": 0.7358605265617371,
        "codebertscore_s_f3-70": 0.7337892055511475,
        "codebertscore_s_f1-62": 0.7486271858215332,
        "codebertscore_s_f3-62": 0.7284749746322632,
        "codebertscore_s_f1-57": 0.7987643480300903,
        "codebertscore_s_f3-57": 0.8032516837120056,
        "codebertscore_s_f1-35": 0.7891342043876648,
        "codebertscore_s_f3-35": 0.7924081087112427,
        "codebertscore_s_f1-189": 0.809079110622406,
        "codebertscore_s_f3-189": 0.8145946264266968,
        "codebertscore_s_f1-26": 0.7657727003097534,
        "codebertscore_s_f3-26": 0.7689407467842102,
        "codebertscore_s_f1-174": 0.781173586845398,
        "codebertscore_s_f3-174": 0.7720938324928284,
        "codebertscore_s_f1-139": 0.7931534647941589,
        "codebertscore_s_f3-139": 0.8050966262817383,
        "codebertscore_s_f1-22": 0.7261937856674194,
        "codebertscore_s_f3-22": 0.7218784689903259,
        "codebertscore_s_f1-151": 0.7534039616584778,
        "codebertscore_s_f3-151": 0.7443227171897888,
        "codebertscore_s_f1-108": 0.780700147151947,
        "codebertscore_s_f3-108": 0.7561414837837219,
        "codebertscore_s_f1-8": 0.82820063829422,
        "codebertscore_s_f3-8": 0.8292356729507446,
        "codebertscore_s_f1-7": 0.791756272315979,
        "codebertscore_s_f3-7": 0.7979398369789124,
        "codebertscore_s_f1-23": 0.749147355556488,
        "codebertscore_s_f3-23": 0.7344483733177185,
        "codebertscore_s_f1-55": 0.8027705550193787,
        "codebertscore_s_f3-55": 0.7979686260223389,
        "codebertscore_s_f1-59": 0.8152188062667847,
        "codebertscore_s_f3-59": 0.8239938616752625,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long> l) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n"
        ],
        "simplified": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "43",
        "168": "int n = l.size();\n    unordered_set<int> s;\n    for(int i=0;i<n;i++){\n        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
        "grade-168": {
            "execution": 0
        },
        "28": "std::sort(l.begin(), l.end());\n    int start = 0;\n    int end = l.size() - 1;\n    while (start < end) {\n        long sum = l[start] + l[end];\n        if (sum == 0) {\n            return true;\n        } else if (sum < 0) {\n            start++;\n        } else {\n            end--;\n        }\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "sort(l.begin(), l.end()); \n    int n = l.size();\n    for(int i = 0; i < n; i++)\n    {\n        int left = i + 1;\n        int right = n - 1;\n        int x = l[i];\n        while(left < right)\n        {\n            if(x + l[left] + l[right] == 0)\n            {\n                return true;\n            }\n            else if(x + l[left] + l[right] < 0)\n            {\n                left++;\n            }\n            else\n            {\n                right--;\n            }\n        }\n    }\n    return false;",
        "grade-6": {
            "execution": 0
        },
        "197": "if (l.size() < 2) {\n    return false;\n  }\n  std::unordered_set<long> s;\n  for (auto elem : l) {\n    if (s.find(-elem) != s.end()) {\n      return true;\n    }\n    s.insert(elem);\n  }\n  return false;",
        "grade-197": {
            "execution": 1
        },
        "70": "// sort the list\n    std::sort(l.begin(), l.end());\n    // get the size of the vector\n    int size = l.size();\n    // get the minimum value\n    int min = l[0];\n    // get the maximum value\n    int max = l[size - 1];\n    // create a set to store the elements in the vector\n    std::set<long> l_set;\n    // create a pair\n    std::pair<std::set<long>::iterator, bool> ret;\n    // iterate through the vector\n    for (int i = 0; i < size; i++) {\n        // insert the elements into the set\n        ret = l_set.insert(l[i]);\n        // if the element has already been inserted, return true\n        if (ret.second == false) {\n            return true;\n        }\n    }\n    // check for zero in the vector\n    for (int i = 0; i < size; i++) {\n        if (l[i] == 0) {\n            return true;\n        }\n    }\n    // check for -ve and +ve element pair\n    if (min < 0 && max > 0) {\n        return true;\n    }\n    // return false if all above cases fail\n    return false;",
        "grade-70": {
            "execution": 0
        },
        "62": "// your code here\n    return false;",
        "grade-62": {
            "execution": 0
        },
        "57": "// make sure not to modify the original list!\n    std::vector<long> l_copy = l;\n    std::sort(l_copy.begin(), l_copy.end());\n    for (auto i = l_copy.begin(); i != l_copy.end(); i++) {\n        if (std::binary_search(i + 1, l_copy.end(), -(*i))) {\n            return true;\n        }\n    }\n    return false;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::sort(l.begin(), l.end());\n  int s = 0;\n  int f = l.size() - 1;\n  while (s < f) {\n    if (l[s] + l[f] > 0) {\n      f--;\n    } else if (l[s] + l[f] < 0) {\n      s++;\n    } else {\n      return true;\n    }\n  }\n  return false;",
        "grade-35": {
            "execution": 1
        },
        "196": "std::sort(l.begin(), l.end());\n  auto it = l.begin();\n  while (it != l.end()) {\n    long x = *it;\n    long to_find = -x;\n    it++;\n    auto it2 = std::lower_bound(it, l.end(), to_find);\n    if (it2 != l.end() && *it2 == to_find) {\n      return true;\n    }\n  }\n  return false;",
        "grade-196": {
            "execution": 1
        },
        "26": "// You may add more variables to this function.\n    // You may add more functions to this file.\n    int n = l.size();\n    int i, j;\n    int flag = 0;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n        {\n            if(l[i] + l[j] == 0)\n            {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1)\n        return true;\n    else\n        return false;",
        "grade-26": {
            "execution": 1
        },
        "181": "// WRITE YOUR CODE HERE\n    long i,j,sum=0;\n    for(i=0;i<l.size();i++)\n    {\n        for(j=i+1;j<l.size();j++)\n        {\n            sum=l[i]+l[j];\n            if(sum==0)\n            {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-181": {
            "execution": 1
        },
        "142": "// Implement your solution here\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++) {\n    int l_idx = i + 1;\n    int r_idx = l.size() - 1;\n    while (l_idx < r_idx) {\n      int sum = l[i] + l[l_idx] + l[r_idx];\n      if (sum == 0) {\n        return true;\n      } else if (sum < 0) {\n        l_idx++;\n      } else {\n        r_idx--;\n      }\n    }\n  }\n  return false;",
        "grade-142": {
            "execution": 0
        },
        "22": "return true;",
        "grade-22": {
            "execution": 0
        },
        "154": "for (int i = 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-154": {
            "execution": 1
        },
        "109": "std::unordered_set<long> s;\n  // start coding here\n  if(l.size()<2)\n    return false;\n  for(auto num:l)\n  {\n    if(s.find(-num)!=s.end())\n      return true;\n    s.insert(num);\n  }\n  return false;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::set<long> st;\n    std::vector<long>::iterator it;\n    it = l.begin();\n    while(it != l.end()){\n        if(st.find(*it) != st.end()){\n            return true;\n        }else{\n            st.insert(*it);\n        }\n        it++;\n    }\n    return false;\n    // TODO: implement this function",
        "grade-8": {
            "execution": 0
        },
        "7": "std::unordered_set<long> s;\n    for (auto &e : l) {\n        if (s.find(-e) != s.end()) {\n            return true;\n        }\n        s.insert(e);\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> elems;\n    long temp;\n    bool flag = false;\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        temp = l[i] + l[j];\n        if (temp < 0) {\n            i++;\n        } else if (temp > 0) {\n            j--;\n        } else {\n            flag = true;\n            break;\n        }\n    }\n    return flag;",
        "grade-23": {
            "execution": 1
        },
        "55": "// TODO: please implement your solution\n\treturn false;",
        "grade-55": {
            "execution": 0
        },
        "59": "int n = l.size();\n    if(n<2)\n        return false;\n    // Initializing a hash table.\n    std::unordered_map<long, bool> umap;\n    for(auto elem: l){\n        if(umap.find(-elem) != umap.end())\n            return true;\n        umap[elem] = true;\n    }\n    return false;",
        "grade-59": {
            "execution": 1
        },
        "bleu-168": 0.35655961307553174,
        "bleu-28": 0.16638564487012364,
        "bleu-6": 0.2564856417467189,
        "bleu-197": 0.1526373276571301,
        "bleu-70": 0.11772625831211407,
        "bleu-62": 0.00024069398672549227,
        "bleu-57": 0.13244391659750396,
        "bleu-35": 0.15849697606928384,
        "bleu-196": 0.05285909189171293,
        "bleu-26": 0.3735710463413725,
        "bleu-181": 0.55491858407376,
        "bleu-142": 0.3072461010419995,
        "bleu-22": 2.876571605486452e-09,
        "bleu-154": 0.8193521940952341,
        "bleu-109": 0.15288451442252554,
        "bleu-8": 0.057565799689090744,
        "bleu-7": 0.06369982380227862,
        "bleu-23": 0.21020159339808464,
        "bleu-55": 0.0013522340730417917,
        "bleu-59": 0.15088666614698526,
        "codebleu-168": 0.6670007980792413,
        "codebleu-28": 0.6501852639595637,
        "codebleu-6": 0.739950853195575,
        "codebleu-197": 0.5160737947543427,
        "codebleu-70": 0.7341696575424783,
        "codebleu-62": 0.04891839464066281,
        "codebleu-57": 0.5685711501811487,
        "codebleu-35": 0.6687508931650036,
        "codebleu-196": 0.5081300813008129,
        "codebleu-26": 0.7620402642050248,
        "codebleu-181": 0.7921962561944811,
        "codebleu-142": 0.7605111557737794,
        "codebleu-22": 0.024390251078117143,
        "codebleu-154": 0.8518288716185736,
        "codebleu-109": 0.5156064364435937,
        "codebleu-8": 0.5101626016260161,
        "codebleu-7": 0.4220647563409801,
        "codebleu-23": 0.6512046468769475,
        "codebleu-55": 0.06550209895582026,
        "codebleu-59": 0.5691441660845799,
        "chrf-168": 0.47503399073382946,
        "chrf-28": 0.3592341626168635,
        "chrf-6": 0.4475194012138083,
        "chrf-197": 0.33046877573151157,
        "chrf-70": 0.2792956625128327,
        "chrf-62": 0.14233463476612526,
        "chrf-57": 0.2932710975361311,
        "chrf-35": 0.3780397984886365,
        "chrf-196": 0.27103788366752474,
        "chrf-26": 0.5304096246943761,
        "chrf-181": 0.6709950859903654,
        "chrf-142": 0.5001568813076099,
        "chrf-22": 0.11310710376862282,
        "chrf-154": 0.8741813745278213,
        "chrf-109": 0.3272448453166501,
        "chrf-8": 0.27838393877146994,
        "chrf-7": 0.2879140883601688,
        "chrf-23": 0.36229339868589244,
        "chrf-55": 0.16110663033283582,
        "chrf-59": 0.34093385741670074,
        "rougel-168": 0.4848484848484849,
        "rougel-28": 0.43421052631578944,
        "rougel-6": 0.4468085106382978,
        "rougel-197": 0.33070866141732286,
        "rougel-70": 0.25766871165644173,
        "rougel-62": 0.0857142857142857,
        "rougel-57": 0.375,
        "rougel-35": 0.44155844155844154,
        "rougel-196": 0.3558282208588957,
        "rougel-26": 0.5632183908045977,
        "rougel-181": 0.7808219178082193,
        "rougel-142": 0.5376344086021505,
        "rougel-22": 0.09230769230769231,
        "rougel-154": 0.9457364341085271,
        "rougel-109": 0.328125,
        "rougel-8": 0.31788079470198677,
        "rougel-7": 0.3008849557522124,
        "rougel-23": 0.39999999999999997,
        "rougel-55": 0.0821917808219178,
        "rougel-59": 0.35036496350364965,
        "meteor-168": 0.5083101114649681,
        "meteor-28": 0.562338972441583,
        "meteor-6": 0.5767045030731591,
        "meteor-197": 0.3248082753700731,
        "meteor-70": 0.5111997777343431,
        "meteor-62": 0.052021986650961916,
        "meteor-57": 0.3975541604528471,
        "meteor-35": 0.5380834666278901,
        "meteor-196": 0.37185417771500284,
        "meteor-26": 0.8140464344941959,
        "meteor-181": 0.9115437867774315,
        "meteor-142": 0.6015002134651853,
        "meteor-22": 0.0267379679144385,
        "meteor-154": 0.9915504682622268,
        "meteor-109": 0.3242877492877493,
        "meteor-8": 0.33697236521460205,
        "meteor-7": 0.29760690238143817,
        "meteor-23": 0.5762012012012011,
        "meteor-55": 0.0517477055262644,
        "meteor-59": 0.36900512940534014,
        "ruby-168": 0.2571428571428571,
        "ruby-28": 0.2777777777777778,
        "ruby-6": 0.2936507936507936,
        "ruby-197": 0.12307692307692308,
        "ruby-70": 0.14015151515151514,
        "ruby-62": 0.048387096774193505,
        "ruby-57": 0.26530612244897955,
        "ruby-35": 0.3152173913043478,
        "ruby-196": 0.24752475247524752,
        "ruby-26": 0.375,
        "ruby-181": 0.6428571428571428,
        "ruby-142": 0.3870967741935484,
        "ruby-22": 0.048387096774193505,
        "ruby-154": 0.8955223880597015,
        "ruby-109": 0.1515151515151515,
        "ruby-8": 0.1685393258426966,
        "ruby-7": 0.16129032258064513,
        "ruby-23": 0.2777777777777778,
        "ruby-55": 0.048387096774193505,
        "ruby-59": 0.18666666666666665,
        "codebertscore_f1-168": 0.8350299000740051,
        "codebertscore_f3-168": 0.8544596433639526,
        "codebertscore_f1-28": 0.7908231019973755,
        "codebertscore_f3-28": 0.8099146485328674,
        "codebertscore_f1-6": 0.7892017364501953,
        "codebertscore_f3-6": 0.8305610418319702,
        "codebertscore_f1-197": 0.7510124444961548,
        "codebertscore_f3-197": 0.7537190914154053,
        "codebertscore_f1-70": 0.6747884154319763,
        "codebertscore_f3-70": 0.7416093349456787,
        "codebertscore_f1-62": 0.6284942626953125,
        "codebertscore_f3-62": 0.6105626225471497,
        "codebertscore_f1-57": 0.76883465051651,
        "codebertscore_f3-57": 0.8045652508735657,
        "codebertscore_f1-35": 0.8160532712936401,
        "codebertscore_f3-35": 0.827688992023468,
        "codebertscore_f1-196": 0.7452341914176941,
        "codebertscore_f3-196": 0.7644366025924683,
        "codebertscore_f1-26": 0.7920618653297424,
        "codebertscore_f3-26": 0.8488894701004028,
        "codebertscore_f1-181": 0.8699164390563965,
        "codebertscore_f3-181": 0.8985213041305542,
        "codebertscore_f1-142": 0.7998784184455872,
        "codebertscore_f3-142": 0.8534559607505798,
        "codebertscore_f1-22": 0.5940707325935364,
        "codebertscore_f3-22": 0.5362499952316284,
        "codebertscore_f1-154": 0.968573272228241,
        "codebertscore_f3-154": 0.9685731530189514,
        "codebertscore_f1-109": 0.7466760873794556,
        "codebertscore_f3-109": 0.7555726766586304,
        "codebertscore_f1-8": 0.7133955359458923,
        "codebertscore_f3-8": 0.7389172911643982,
        "codebertscore_f1-7": 0.7451744675636292,
        "codebertscore_f3-7": 0.7487081289291382,
        "codebertscore_f1-23": 0.7706284523010254,
        "codebertscore_f3-23": 0.8028788566589355,
        "codebertscore_f1-55": 0.6530708074569702,
        "codebertscore_f3-55": 0.6443184614181519,
        "codebertscore_f1-59": 0.7201156616210938,
        "codebertscore_f3-59": 0.739020049571991,
        "codebertscore_s_f1-168": 0.8383872509002686,
        "codebertscore_s_f3-168": 0.8598871827125549,
        "codebertscore_s_f1-28": 0.8063470125198364,
        "codebertscore_s_f3-28": 0.8267994523048401,
        "codebertscore_s_f1-6": 0.8279893398284912,
        "codebertscore_s_f3-6": 0.8653683066368103,
        "codebertscore_s_f1-197": 0.7577545642852783,
        "codebertscore_s_f3-197": 0.7651344537734985,
        "codebertscore_s_f1-70": 0.7274397015571594,
        "codebertscore_s_f3-70": 0.804636538028717,
        "codebertscore_s_f1-62": 0.6226838827133179,
        "codebertscore_s_f3-62": 0.6024930477142334,
        "codebertscore_s_f1-57": 0.7749482989311218,
        "codebertscore_s_f3-57": 0.8117042183876038,
        "codebertscore_s_f1-35": 0.825199544429779,
        "codebertscore_s_f3-35": 0.8377808928489685,
        "codebertscore_s_f1-196": 0.7458789944648743,
        "codebertscore_s_f3-196": 0.7657623291015625,
        "codebertscore_s_f1-26": 0.8212152719497681,
        "codebertscore_s_f3-26": 0.8818759322166443,
        "codebertscore_s_f1-181": 0.8840421438217163,
        "codebertscore_s_f3-181": 0.9118585586547852,
        "codebertscore_s_f1-142": 0.8213227391242981,
        "codebertscore_s_f3-142": 0.8794898986816406,
        "codebertscore_s_f1-22": 0.6897745728492737,
        "codebertscore_s_f3-22": 0.5991120338439941,
        "codebertscore_s_f1-154": 0.9680623412132263,
        "codebertscore_s_f3-154": 0.9680623412132263,
        "codebertscore_s_f1-109": 0.7499518990516663,
        "codebertscore_s_f3-109": 0.7658563852310181,
        "codebertscore_s_f1-8": 0.7200068235397339,
        "codebertscore_s_f3-8": 0.7477239370346069,
        "codebertscore_s_f1-7": 0.7443429231643677,
        "codebertscore_s_f3-7": 0.7505203485488892,
        "codebertscore_s_f1-23": 0.7897248864173889,
        "codebertscore_s_f3-23": 0.825796365737915,
        "codebertscore_s_f1-55": 0.6259834170341492,
        "codebertscore_s_f3-55": 0.6083791851997375,
        "codebertscore_s_f1-59": 0.726523756980896,
        "codebertscore_s_f3-59": 0.7528114914894104,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "0",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 2,
        "raw_gpt35_nsnr-55": "2",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-181": 4,
        "raw_gpt35_nswr-181": "4",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\nlong fruit_distribution(std::string s, long n) {\n",
        "snippet": [
            "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n"
        ],
        "simplified": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "task_id": "67",
        "164": "assert(s.length()>0);\n    assert(n>0);\n    std::vector<long> aux;\n    std::stringstream ss(s);\n    for(long i; ss >> i;){\n        aux.push_back(i);\n        if(ss.peek() == ' ')\n            ss.ignore();\n    }\n    return n - aux[0] - aux[1];",
        "grade-164": {
            "execution": 0
        },
        "29": "// your code\n\tlong mango = 0;\n\tlong apples = 0;\n\tlong oranges = 0;\n\tstd::string apple_string = \"apples\";\n\tstd::string orange_string = \"oranges\";\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] != ' ') {\n\t\t\ttemp += s[i];\n\t\t}\n\t\telse {\n\t\t\tif (temp.find(apple_string) != std::string::npos) {\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\tapples = atoi(temp.c_str());\n\t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t\telse if (temp.find(orange_string) != std::string::npos) {\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\toranges = atoi(temp.c_str());\n\t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t}\n\t}\n\tmango = n - apples - oranges;\n\treturn mango;",
        "grade-29": {
            "execution": 0
        },
        "6": "int i, j, x;\n    std::string a, b;\n    i = 0;\n    while(s[i] != ' ')\n    {\n        a += s[i];\n        i++;\n    }\n    i += 5;\n    while(s[i] != ' ')\n    {\n        b += s[i];\n        i++;\n    }\n    x = std::stoi(a) + std::stoi(b);\n    return n - x;",
        "grade-6": {
            "execution": 0
        },
        "190": "long n1=std::count(s.begin(),s.end(),'a');\n\tlong n2=std::count(s.begin(),s.end(),'o');\n\t//std::cout<<\"n1= \"<<n1<<std::endl;\n\t//std::cout<<\"n2= \"<<n2<<std::endl;\n\treturn n-(n1+n2);",
        "grade-190": {
            "execution": 0
        },
        "71": "// Write your code here\n    // To print results to the standard output you can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    int i = 0;\n    int c = 0;\n    while(i < s.length()){\n        if(s[i] == 'a'){\n            i+=6;\n            c++;\n        }\n        else if(s[i] == 'o'){\n            i+=7;\n            c++;\n        }\n        else{\n            i++;\n        }\n    }\n    return n - c;",
        "grade-71": {
            "execution": 0
        },
        "63": "// your code here\n    std::vector<std::string> result;\n    std::stringstream check1(s);\n    std::string intermediate;\n    while(getline(check1, intermediate, ' ')) {\n        result.push_back(intermediate);\n    }\n    if(result[0] == \"0\") {\n        return n - 1;\n    } else {\n        return n - std::stoi(result[0]) - std::stoi(result[2]);\n    }",
        "grade-63": {
            "execution": 0
        },
        "58": "long apples = 0, oranges = 0;\n    s = s.substr(0, s.find(\" \"));\n    apples = std::stol(s);\n    oranges = std::stol(s.substr(s.find(\" \") + 1, s.length()));\n    return n - apples - oranges;",
        "grade-58": {
            "execution": 0
        },
        "36": "// your code here\n\t//int pos1, pos2;\n\t//int a, b;\n\tstd::string a = \"0\";\n\tstd::string b = \"0\";\n\tint i = 0;\n\t//while (s[i] != ' ')\n\t//{\n\t//\tpos1 = i;\n\t//\ti++;\n\t//}\n\t//pos2 = i;\n\t//while (s[i] != ' ')\n\t//{\n\t//\tpos2 = i;\n\t//\ti++;\n\t//}\n\t//for (int j = 0; j < pos1; j++)\n\t//{\n\t//\ta[j] = s[j];\n\t//}\n\t//for (int j = pos2 + 1; j < s.length(); j++)\n\t//{\n\t//\tb[j] = s[j];\n\t//}\n\t//a = stoi(a);\n\t//b = stoi(b);\n\t//printf(\"%d\", a);\n\tstd::string token;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] == ' ')\n\t\t{\n\t\t\tfor (int j = 0; j < i; j++)\n\t\t\t{\n\t\t\t\ta[j] = s[j];\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\tfor (int j = i + 6; j < s.length(); j++)\n\t\t\t{\n\t\t\t\tb[k] = s[j];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tint a1 = std::stoi(a);\n\tint b1 = std::stoi(b);\n\t//printf(\"%d%d\", a1, b1);\n\treturn n - a1 - b1;",
        "grade-36": {
            "execution": 0
        },
        "189": "std::cout << \"------------------------------------------\" << std::endl;\n    std::cout << \"input string : \" << s << std::endl;\n    std::cout << \"total number of fruits : \" << n << std::endl;\n    long num_apples = 0;\n    long num_oranges = 0;\n    long num_mangoes = 0;\n    long tot = 0;\n    std::vector<std::string> split_str;\n    std::string temp;\n    std::stringstream ss(s);\n    while(std::getline(ss, temp, ' ')){\n        if(temp != \"and\"){\n            split_str.push_back(temp);\n        }\n    }\n    std::cout << \"split string : \";\n    for(int i = 0; i < split_str.size(); i++){\n        std::cout << split_str[i] << \" \";\n    }\n    std::cout << std::endl;\n    num_apples = stoi(split_str[0]);\n    num_oranges = stoi(split_str[2]);\n    std::cout << \"number of apples : \" << num_apples << std::endl;\n    std::cout << \"number of oranges : \" << num_oranges << std::endl;\n    num_mangoes = n - num_apples - num_oranges;\n    std::cout << \"number of mangoes : \" << num_mangoes << std::endl;\n    std::cout << \"------------------------------------------\" << std::endl;\n    return num_mangoes;",
        "grade-189": {
            "execution": 1
        },
        "27": "long x,y;\n    sscanf(s.c_str(),\"%ld apples and %ld oranges\",&x,&y);\n    return n - x - y;",
        "grade-27": {
            "execution": 1
        },
        "174": "int apple = 0, orange = 0;\n    for (auto x : s) {\n        if (x == 'a') {\n            apple++;\n        } else if (x == 'o') {\n            orange++;\n        }\n    }\n    return n - apple - orange;",
        "grade-174": {
            "execution": 0
        },
        "140": "long apples, oranges;\n\tsscanf(s.c_str(), \"%ld apples and %ld oranges\", &apples, &oranges);\n\treturn n - apples - oranges;",
        "grade-140": {
            "execution": 1
        },
        "22": "int i = 0;\n    int j = 0;\n    int index = 0;\n    std::string apple = \"apples\";\n    std::string orange = \"oranges\";\n    int sum = 0;\n    while(s[i] != 'a')\n    {\n        i++;\n    }\n    while(apple[j] != '\\0')\n    {\n        if(s[i] == apple[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            break;\n        }\n    }\n    if(apple[j] == '\\0')\n    {\n        while(s[i] != ' ')\n        {\n            sum = sum * 10 + (s[i] - '0');\n            i++;\n        }\n    }\n    j = 0;\n    while(s[i] != 'o')\n    {\n        i++;\n    }\n    while(orange[j] != '\\0')\n    {\n        if(s[i] == orange[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            break;\n        }\n    }\n    if(orange[j] == '\\0')\n    {\n        while(s[i] != ' ')\n        {\n            sum = sum * 10 + (s[i] - '0');\n            i++;\n        }\n    }\n    sum = n - sum;\n    return sum;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string temp;\n    while(ss >> temp)\n        v.push_back(temp);\n    std::string a = v[0];\n    std::string b = v[2];\n    std::string c = v[3];\n    std::string d = v[4];\n    long e = std::stol(a);\n    long f = std::stol(b);\n    long g = std::stol(c);\n    long h = std::stol(d);\n    long i = n - e - g;\n    long j = n - f - h;\n    if(i > j)\n        return i;\n    else if(j > i)\n        return j;\n    else\n        return i;",
        "grade-152": {
            "execution": 0
        },
        "109": "std::string apples = s.substr(0, s.find(\"apples\"));\n    std::string oranges = s.substr(s.find(\"oranges\"));\n    std::string a = \"\", o = \"\";\n    for (int i = 0; i < apples.size(); i++) {\n        if (apples[i] >= '0' && apples[i] <= '9')\n            a += apples[i];\n    }\n    for (int i = 0; i < oranges.size(); i++) {\n        if (oranges[i] >= '0' && oranges[i] <= '9')\n            o += oranges[i];\n    }\n    long mango = n - atoi(a.c_str()) - atoi(o.c_str());\n    return mango;",
        "grade-109": {
            "execution": 0
        },
        "8": "//std::string::iterator it = find(s.begin(), s.end(), ' ');\n\tstd::string apple = s.substr(0, s.find(\" \"));\n\tstd::string orange = s.substr(s.find(\" and \") + 5, s.find(\" \", s.find(\" and \") + 5) - s.find(\" and \") - 5);\n\treturn n - stoi(apple) - stoi(orange);",
        "grade-8": {
            "execution": 1
        },
        "7": "// Write your code here\n\t// It's main function. Don't erase this function.\n\tint num = 0;\n\tint i = 0;\n\tfor (int j = 0; j < s.length(); j++) {\n\t\tif (s[j] == ' ') {\n\t\t\ti = j + 1;\n\t\t\twhile (s[i] != ' ') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tnum = num + std::stoi(s.substr(j + 1, i - j - 1));\n\t\t}\n\t}\n\tint a = n - num;\n\treturn a;",
        "grade-7": {
            "execution": 0
        },
        "23": "// write your code here\n  return -1;",
        "grade-23": {
            "execution": 0
        },
        "56": "std::stringstream ss(s);\n  std::string temp;\n  long a, o;\n  ss >> a >> temp >> temp >> o >> temp;\n  return n - a - o;",
        "grade-56": {
            "execution": 1
        },
        "60": "int apples=0, oranges=0;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i] == 'a'){\n\t\t\twhile(s[i] != ' '){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(s[i] != ' '){\n\t\t\t\tapples = (apples*10) + (s[i] - '0');\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tif(s[i] == 'o'){\n\t\t\twhile(s[i] != ' '){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(s[i] != ' '){\n\t\t\t\toranges = (oranges*10) + (s[i] - '0');\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - apples - oranges;",
        "grade-60": {
            "execution": 0
        },
        "bleu-164": 0.1130612593812146,
        "bleu-29": 0.21105591930264034,
        "bleu-6": 0.18479492918234874,
        "bleu-190": 0.04315740579029244,
        "bleu-71": 0.21550552880680843,
        "bleu-63": 0.044045933009139386,
        "bleu-58": 0.06463084799845503,
        "bleu-36": 0.12339013932701232,
        "bleu-189": 0.08023669360381623,
        "bleu-27": 0.013684693935523604,
        "bleu-174": 0.06624088761916332,
        "bleu-140": 0.013684693935523604,
        "bleu-22": 0.11976237686532469,
        "bleu-152": 0.03057051957734964,
        "bleu-109": 0.30085451008973335,
        "bleu-8": 0.05658712176011371,
        "bleu-7": 0.22905339073557576,
        "bleu-23": 5.548449478882036e-07,
        "bleu-56": 0.01158971592697568,
        "bleu-60": 0.25763488721464045,
        "codebleu-164": 0.3786359223918062,
        "codebleu-29": 0.5972800216991475,
        "codebleu-6": 0.3675410147333913,
        "codebleu-190": 0.30439052126622224,
        "codebleu-71": 0.44398502634521536,
        "codebleu-63": 0.350333023999026,
        "codebleu-58": 0.2975277554910662,
        "codebleu-36": 0.6032651712890916,
        "codebleu-189": 0.5179551751027173,
        "codebleu-27": 0.10990959406506481,
        "codebleu-174": 0.20483558717922845,
        "codebleu-140": 0.10990959406506481,
        "codebleu-22": 0.5629532288593242,
        "codebleu-152": 0.4167578820852917,
        "codebleu-109": 0.631850586138076,
        "codebleu-8": 0.3722551977724119,
        "codebleu-7": 0.5043486304367851,
        "codebleu-23": 0.03225897687281811,
        "codebleu-56": 0.11394187802224598,
        "codebleu-60": 0.5555300556394408,
        "chrf-164": 0.20247382485172175,
        "chrf-29": 0.29268431538710665,
        "chrf-6": 0.18183523324658035,
        "chrf-190": 0.1315541562409068,
        "chrf-71": 0.23393836927377204,
        "chrf-63": 0.17360846475784936,
        "chrf-58": 0.16642109215665976,
        "chrf-36": 0.27506096363919447,
        "chrf-189": 0.20802197534876618,
        "chrf-27": 0.10307023020024729,
        "chrf-174": 0.1440441176771422,
        "chrf-140": 0.11541768191638824,
        "chrf-22": 0.23468293872358706,
        "chrf-152": 0.1618315364279404,
        "chrf-109": 0.3644623643295961,
        "chrf-8": 0.1716158193456487,
        "chrf-7": 0.26327525981172484,
        "chrf-23": 0.037578847926431326,
        "chrf-56": 0.10793282970988212,
        "chrf-60": 0.2670200183308216,
        "rougel-164": 0.29357798165137616,
        "rougel-29": 0.39572192513368987,
        "rougel-6": 0.35964912280701755,
        "rougel-190": 0.22222222222222224,
        "rougel-71": 0.376,
        "rougel-63": 0.27705627705627706,
        "rougel-58": 0.32512315270935954,
        "rougel-36": 0.27722772277227725,
        "rougel-189": 0.17077798861480076,
        "rougel-27": 0.17857142857142858,
        "rougel-174": 0.3315508021390374,
        "rougel-140": 0.17857142857142858,
        "rougel-22": 0.33663366336633666,
        "rougel-152": 0.24584717607973425,
        "rougel-109": 0.48580441640378547,
        "rougel-8": 0.3089430894308943,
        "rougel-7": 0.4173228346456693,
        "rougel-23": 0.04255319148936171,
        "rougel-56": 0.14857142857142858,
        "rougel-60": 0.47019867549668876,
        "meteor-164": 0.2932631129802573,
        "meteor-29": 0.47554663116424106,
        "meteor-6": 0.32947249490763447,
        "meteor-190": 0.2156206996579183,
        "meteor-71": 0.33659901200163717,
        "meteor-63": 0.27071743321192093,
        "meteor-58": 0.26413417876809664,
        "meteor-36": 0.3932105602060529,
        "meteor-189": 0.28148164682539684,
        "meteor-27": 0.12609649122807018,
        "meteor-174": 0.20582995951417007,
        "meteor-140": 0.12609649122807018,
        "meteor-22": 0.37958785595060457,
        "meteor-152": 0.2661972511692843,
        "meteor-109": 0.5860413811434221,
        "meteor-8": 0.25745519892727226,
        "meteor-7": 0.3837513190871917,
        "meteor-23": 0.01682085786375105,
        "meteor-56": 0.10459253202507494,
        "meteor-60": 0.4426773366163948,
        "ruby-164": 0.17557251908396942,
        "ruby-29": 0.29218106995884774,
        "ruby-6": 0.23664122137404575,
        "ruby-190": 0.1297709923664122,
        "ruby-71": 0.13740458015267176,
        "ruby-63": 0.16030534351145043,
        "ruby-58": 0.22137404580152675,
        "ruby-36": 0.1737967914438503,
        "ruby-189": 0.11111111111111116,
        "ruby-27": 0.1145038167938931,
        "ruby-174": 0.22137404580152675,
        "ruby-140": 0.1145038167938931,
        "ruby-22": 0.22344322344322343,
        "ruby-152": 0.15294117647058825,
        "ruby-109": 0.3655913978494624,
        "ruby-8": 0.16030534351145043,
        "ruby-7": 0.23664122137404575,
        "ruby-23": 0.022900763358778664,
        "ruby-56": 0.0992366412213741,
        "ruby-60": 0.30409356725146197,
        "codebertscore_f1-164": 0.7134620547294617,
        "codebertscore_f3-164": 0.7018809914588928,
        "codebertscore_f1-29": 0.7299014925956726,
        "codebertscore_f3-29": 0.7565354704856873,
        "codebertscore_f1-6": 0.74732506275177,
        "codebertscore_f3-6": 0.7208400368690491,
        "codebertscore_f1-190": 0.7036094665527344,
        "codebertscore_f3-190": 0.6923919320106506,
        "codebertscore_f1-71": 0.7094178795814514,
        "codebertscore_f3-71": 0.723048210144043,
        "codebertscore_f1-63": 0.6903292536735535,
        "codebertscore_f3-63": 0.6904985904693604,
        "codebertscore_f1-58": 0.6856667399406433,
        "codebertscore_f3-58": 0.6588863134384155,
        "codebertscore_f1-36": 0.7468283176422119,
        "codebertscore_f3-36": 0.7692875266075134,
        "codebertscore_f1-189": 0.6639806032180786,
        "codebertscore_f3-189": 0.6966052651405334,
        "codebertscore_f1-27": 0.6567592024803162,
        "codebertscore_f3-27": 0.6377649307250977,
        "codebertscore_f1-174": 0.7058380246162415,
        "codebertscore_f3-174": 0.676598846912384,
        "codebertscore_f1-140": 0.6296180486679077,
        "codebertscore_f3-140": 0.613035261631012,
        "codebertscore_f1-22": 0.6972646713256836,
        "codebertscore_f3-22": 0.6991360783576965,
        "codebertscore_f1-152": 0.6878607273101807,
        "codebertscore_f3-152": 0.6855882406234741,
        "codebertscore_f1-109": 0.7703558206558228,
        "codebertscore_f3-109": 0.7680662870407104,
        "codebertscore_f1-8": 0.6815420389175415,
        "codebertscore_f3-8": 0.6644982099533081,
        "codebertscore_f1-7": 0.7397310733795166,
        "codebertscore_f3-7": 0.7447802424430847,
        "codebertscore_f1-23": 0.5414296388626099,
        "codebertscore_f3-23": 0.5211882591247559,
        "codebertscore_f1-56": 0.6540230512619019,
        "codebertscore_f3-56": 0.6214982271194458,
        "codebertscore_f1-60": 0.7581589221954346,
        "codebertscore_f3-60": 0.7396670579910278,
        "codebertscore_s_f1-164": 0.703082263469696,
        "codebertscore_s_f3-164": 0.6879447102546692,
        "codebertscore_s_f1-29": 0.7225193381309509,
        "codebertscore_s_f3-29": 0.7458431720733643,
        "codebertscore_s_f1-6": 0.7326447367668152,
        "codebertscore_s_f3-6": 0.7035077810287476,
        "codebertscore_s_f1-190": 0.7036321759223938,
        "codebertscore_s_f3-190": 0.6886254549026489,
        "codebertscore_s_f1-71": 0.700600802898407,
        "codebertscore_s_f3-71": 0.708259642124176,
        "codebertscore_s_f1-63": 0.6687811613082886,
        "codebertscore_s_f3-63": 0.6665434837341309,
        "codebertscore_s_f1-58": 0.6790415048599243,
        "codebertscore_s_f3-58": 0.6532362699508667,
        "codebertscore_s_f1-36": 0.765717625617981,
        "codebertscore_s_f3-36": 0.7746356129646301,
        "codebertscore_s_f1-189": 0.6862382292747498,
        "codebertscore_s_f3-189": 0.7140257954597473,
        "codebertscore_s_f1-27": 0.6552755236625671,
        "codebertscore_s_f3-27": 0.6392977237701416,
        "codebertscore_s_f1-174": 0.6974802613258362,
        "codebertscore_s_f3-174": 0.6708971261978149,
        "codebertscore_s_f1-140": 0.631026566028595,
        "codebertscore_s_f3-140": 0.6180850267410278,
        "codebertscore_s_f1-22": 0.7151393294334412,
        "codebertscore_s_f3-22": 0.7084687352180481,
        "codebertscore_s_f1-152": 0.6888589859008789,
        "codebertscore_s_f3-152": 0.6829264760017395,
        "codebertscore_s_f1-109": 0.7596573829650879,
        "codebertscore_s_f3-109": 0.7585435509681702,
        "codebertscore_s_f1-8": 0.6825034618377686,
        "codebertscore_s_f3-8": 0.6612372398376465,
        "codebertscore_s_f1-7": 0.7288775444030762,
        "codebertscore_s_f3-7": 0.7264378666877747,
        "codebertscore_s_f1-23": 0.573219895362854,
        "codebertscore_s_f3-23": 0.5539999604225159,
        "codebertscore_s_f1-56": 0.6559823155403137,
        "codebertscore_s_f3-56": 0.6264952421188354,
        "codebertscore_s_f1-60": 0.7447491884231567,
        "codebertscore_s_f3-60": 0.727182149887085,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 2,
        "raw_gpt35_nsnr-36": "2",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "3 - The code snippet correctly extracts the number of apples and oranges from the input string and subtracts them from the total number of fruits to calculate the number of mangoes. However, it does not handle cases where the input string does not contain the words \"apples\" and \"oranges\" or if they are in a different order.",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-36": 2,
        "raw_gpt35_nswr-36": "2",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-174": 2,
        "raw_gpt35_nswr-174": "2",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n",
        "snippet": [
            "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n"
        ],
        "simplified": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
        "task_id": "15",
        "180": "// write your code here.\n    std::stringstream ss;\n    for(int i=0;i<=n;i++){\n        ss<<i<<\" \";\n    }\n    std::string s;\n    s=ss.str();\n    return s;",
        "grade-180": {
            "execution": 0
        },
        "28": "std::string res=\"\";\n   for(int i=0;i<=n;i++)\n   {\n       res+=std::to_string(i);\n       res+=\" \";\n   }\n   return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();",
        "grade-6": {
            "execution": 0
        },
        "76": "std::string result;\n    for (int i = 0; i <= n; i++) {\n        result += std::to_string(i) + ' ';\n    }\n    return result;",
        "grade-76": {
            "execution": 0
        },
        "65": "// Enter code here.\n  // TEST ::\n  //assert(string_sequence(0) == \"0\");\n  //assert(string_sequence(5) == \"0 1 2 3 4 5\");\n  //assert(string_sequence(9) == \"0 1 2 3 4 5 6 7 8 9\");\n  //assert(string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n  //assert(string_sequence(15) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\");\n  std::stringstream ss;\n  for(long i = 0; i <= n; i++) {\n    ss << i << \" \";\n  }\n  std::string s = ss.str();\n  return s.substr(0, s.size() - 1);",
        "grade-65": {
            "execution": 1
        },
        "59": "std::string ans;\n\tfor(int i=0;i<=n;i++)\n\t{\n\t\tstd::string t=std::to_string(i);\n\t\tans+=t;\n\t\tans+=\" \";\n\t}\n\treturn ans;",
        "grade-59": {
            "execution": 0
        },
        "35": "std::string result = \"\";\n  for (int i = 0; i <= n; i++) {\n    result += std::to_string(i) + \" \";\n  }\n  return result;",
        "grade-35": {
            "execution": 0
        },
        "26": "std::string result;\n\tfor (int i = 0; i <= n; i++) {\n\t\tresult += std::to_string(i);\n\t\tif (i < n) {\n\t\t\tresult += \" \";\n\t\t}\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 1
        },
        "190": "std::stringstream ss;\n\t\tfor (long i = 0; i <= n; i++) {\n\t\t\tss << i << \" \";\n\t\t}\n\t\tstd::string result = ss.str();\n\t\treturn result.substr(0, result.size() - 1);",
        "grade-190": {
            "execution": 1
        },
        "151": "long i;\n\tstd::string ans=\"\";\n\tfor(i=0;i<=n;i++)\n\t{\n\t\tans=ans+std::to_string(i)+\" \";\n\t}\n\treturn ans;",
        "grade-151": {
            "execution": 0
        },
        "22": "std::string sequence;\n  if (n == 0) {\n    sequence = \"0\";\n  } else {\n    for (size_t i = 0; i <= n; i++) {\n      if (i == 0) {\n        sequence = std::to_string(i);\n      } else {\n        sequence = sequence + \" \" + std::to_string(i);\n      }\n    }\n  }\n  return sequence;",
        "grade-22": {
            "execution": 1
        },
        "167": "assert(n >= 0);\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    std::string mystr = ss.str();\n    //  std::cout << mystr;\n    return mystr;",
        "grade-167": {
            "execution": 0
        },
        "117": "return n==0 ? \"0\" : string_sequence(n-1) + \" \" + std::to_string(n);",
        "grade-117": {
            "execution": 1
        },
        "8": "std::stringstream ss;\nfor (int i = 0; i <= n; i++)\n{\nss << i << \" \";",
        "grade-8": {
            "execution": 0
        },
        "7": "std::ostringstream convert;\n  for(int i=0;i<=n;i++)\n    convert<<i<<\" \";\n  return convert.str();",
        "grade-7": {
            "execution": 0
        },
        "23": "std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();",
        "grade-23": {
            "execution": 0
        },
        "57": "std::string r = \"\";\n\tfor (long i = 0; i <= n; i++) {\n\t\tr += std::to_string(i);\n\t\tif (i != n) r += \" \";\n\t}\n\treturn r;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::string s = \"\";\n    for(int i = 0; i < n+1; i++) {\n        s += std::to_string(i);\n        if(i != n)\n            s += \" \";\n    }\n    return s;",
        "grade-61": {
            "execution": 1
        },
        "141": "if (n == 0)\n\t\treturn \"0\";\n\telse {\n\t\treturn string_sequence(n - 1) + \" \" + std::to_string(n);\n\t}",
        "grade-141": {
            "execution": 1
        },
        "170": "std::string res = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t\tres += std::to_string(i);\n\t\tif (i != n) res += \" \";\n\t}\n\treturn res;",
        "grade-170": {
            "execution": 1
        },
        "bleu-180": 0.2922529564123456,
        "bleu-28": 0.4366274275553648,
        "bleu-6": 0.4000177797533498,
        "bleu-76": 0.45850409655272856,
        "bleu-65": 0.08465981873937681,
        "bleu-59": 0.37370283285914463,
        "bleu-35": 0.45820744022652077,
        "bleu-26": 0.37370283285914463,
        "bleu-190": 0.22710985265856123,
        "bleu-151": 0.36648164600693794,
        "bleu-22": 0.24273464336754397,
        "bleu-167": 0.24865016818363794,
        "bleu-117": 0.11243420996405783,
        "bleu-8": 0.37356870057280595,
        "bleu-7": 0.4069871257246095,
        "bleu-23": 0.32739546202728015,
        "bleu-57": 0.3260701435531343,
        "bleu-61": 0.3108645891149948,
        "bleu-141": 0.163718461633393,
        "bleu-170": 0.37838198040344984,
        "codebleu-180": 0.5725877343772068,
        "codebleu-28": 0.640638039239551,
        "codebleu-6": 0.5523319385525292,
        "codebleu-76": 0.6055793002021715,
        "codebleu-65": 0.5914529738555441,
        "codebleu-59": 0.5983785116619391,
        "codebleu-35": 0.6569834090745498,
        "codebleu-26": 0.5866750350063322,
        "codebleu-190": 0.5643045175975514,
        "codebleu-151": 0.6723750658013378,
        "codebleu-22": 0.6655718269991457,
        "codebleu-167": 0.5697854907053224,
        "codebleu-117": 0.3183637043598447,
        "codebleu-8": 0.4668290541459163,
        "codebleu-7": 0.5492815461292976,
        "codebleu-23": 0.5379691309990975,
        "codebleu-57": 0.6256051285853029,
        "codebleu-61": 0.6342031051516906,
        "codebleu-141": 0.4340872497256682,
        "codebleu-170": 0.6367707068766036,
        "chrf-180": 0.4156323988257318,
        "chrf-28": 0.540560048453616,
        "chrf-6": 0.381687234765283,
        "chrf-76": 0.4927544296424162,
        "chrf-65": 0.2401083610193532,
        "chrf-59": 0.49630973519566113,
        "chrf-35": 0.5262468746369244,
        "chrf-26": 0.49704483452292897,
        "chrf-190": 0.3530946934854957,
        "chrf-151": 0.4634117255033548,
        "chrf-22": 0.39540408556145823,
        "chrf-167": 0.3918976504236364,
        "chrf-117": 0.29488817144397084,
        "chrf-8": 0.3331769254692181,
        "chrf-7": 0.3948546403166852,
        "chrf-23": 0.322111250957506,
        "chrf-57": 0.46101708944121567,
        "chrf-61": 0.4728555549752659,
        "chrf-141": 0.30845917274791734,
        "chrf-170": 0.5068641772118895,
        "rougel-180": 0.47916666666666663,
        "rougel-28": 0.6511627906976744,
        "rougel-6": 0.5316455696202531,
        "rougel-76": 0.625,
        "rougel-65": 0.2311111111111111,
        "rougel-59": 0.5494505494505495,
        "rougel-35": 0.674698795180723,
        "rougel-26": 0.5494505494505495,
        "rougel-190": 0.44000000000000006,
        "rougel-151": 0.6511627906976744,
        "rougel-22": 0.5289256198347106,
        "rougel-167": 0.4761904761904762,
        "rougel-117": 0.44776119402985076,
        "rougel-8": 0.5352112676056338,
        "rougel-7": 0.5454545454545455,
        "rougel-23": 0.5063291139240506,
        "rougel-57": 0.5806451612903226,
        "rougel-61": 0.5744680851063829,
        "rougel-141": 0.4657534246575343,
        "rougel-170": 0.6021505376344085,
        "meteor-180": 0.5612244897959183,
        "meteor-28": 0.7220466519448453,
        "meteor-6": 0.5546391440548435,
        "meteor-76": 0.7616561192635223,
        "meteor-65": 0.40698992553148194,
        "meteor-59": 0.6818369067928041,
        "meteor-35": 0.8307126275677805,
        "meteor-26": 0.5409953357167433,
        "meteor-190": 0.4656231424608679,
        "meteor-151": 0.809758133226687,
        "meteor-22": 0.6096518216035226,
        "meteor-167": 0.543631682050317,
        "meteor-117": 0.40457343887423053,
        "meteor-8": 0.3452573370514437,
        "meteor-7": 0.5584370179948586,
        "meteor-23": 0.49904859335038365,
        "meteor-57": 0.579040112777137,
        "meteor-61": 0.6168794611440633,
        "meteor-141": 0.44814935064935074,
        "meteor-170": 0.5920886873267827,
        "ruby-180": 0.368421052631579,
        "ruby-28": 0.5531914893617021,
        "ruby-6": 0.42500000000000004,
        "ruby-76": 0.5121951219512195,
        "ruby-65": 0.12903225806451613,
        "ruby-59": 0.42307692307692313,
        "ruby-35": 0.5681818181818181,
        "ruby-26": 0.42307692307692313,
        "ruby-190": 0.3114754098360656,
        "ruby-151": 0.5319148936170213,
        "ruby-22": 0.3780487804878049,
        "ruby-167": 0.33333333333333337,
        "ruby-117": 0.23076923076923073,
        "ruby-8": 0.46153846153846156,
        "ruby-7": 0.4358974358974359,
        "ruby-23": 0.4,
        "ruby-57": 0.4629629629629629,
        "ruby-61": 0.4363636363636364,
        "ruby-141": 0.23076923076923073,
        "ruby-170": 0.4814814814814815,
        "codebertscore_f1-180": 0.8115642070770264,
        "codebertscore_f3-180": 0.833311140537262,
        "codebertscore_f1-28": 0.9065463542938232,
        "codebertscore_f3-28": 0.9099624752998352,
        "codebertscore_f1-6": 0.854473352432251,
        "codebertscore_f3-6": 0.8417472243309021,
        "codebertscore_f1-76": 0.8945121765136719,
        "codebertscore_f3-76": 0.8951778411865234,
        "codebertscore_f1-65": 0.6752579212188721,
        "codebertscore_f3-65": 0.7276821732521057,
        "codebertscore_f1-59": 0.8960698843002319,
        "codebertscore_f3-59": 0.9061558842658997,
        "codebertscore_f1-35": 0.894792914390564,
        "codebertscore_f3-35": 0.8958224654197693,
        "codebertscore_f1-26": 0.8857945203781128,
        "codebertscore_f3-26": 0.8900770545005798,
        "codebertscore_f1-190": 0.788908064365387,
        "codebertscore_f3-190": 0.8024880886077881,
        "codebertscore_f1-151": 0.889369547367096,
        "codebertscore_f3-151": 0.8927993774414062,
        "codebertscore_f1-22": 0.8281261324882507,
        "codebertscore_f3-22": 0.8505368828773499,
        "codebertscore_f1-167": 0.8037322163581848,
        "codebertscore_f3-167": 0.8225939869880676,
        "codebertscore_f1-117": 0.7918559312820435,
        "codebertscore_f3-117": 0.7809455990791321,
        "codebertscore_f1-8": 0.8296530842781067,
        "codebertscore_f3-8": 0.8067783117294312,
        "codebertscore_f1-7": 0.844841480255127,
        "codebertscore_f3-7": 0.8385370373725891,
        "codebertscore_f1-23": 0.8432874083518982,
        "codebertscore_f3-23": 0.8312677145004272,
        "codebertscore_f1-57": 0.8682014346122742,
        "codebertscore_f3-57": 0.8726142644882202,
        "codebertscore_f1-61": 0.8707879781723022,
        "codebertscore_f3-61": 0.881052553653717,
        "codebertscore_f1-141": 0.7846622467041016,
        "codebertscore_f3-141": 0.7780494689941406,
        "codebertscore_f1-170": 0.8878424763679504,
        "codebertscore_f3-170": 0.8932930827140808,
        "codebertscore_s_f1-180": 0.8054394125938416,
        "codebertscore_s_f3-180": 0.8283641338348389,
        "codebertscore_s_f1-28": 0.905045747756958,
        "codebertscore_s_f3-28": 0.9104663133621216,
        "codebertscore_s_f1-6": 0.8566200733184814,
        "codebertscore_s_f3-6": 0.8446139097213745,
        "codebertscore_s_f1-76": 0.9000687599182129,
        "codebertscore_s_f3-76": 0.9032944440841675,
        "codebertscore_s_f1-65": 0.6818563938140869,
        "codebertscore_s_f3-65": 0.7364510297775269,
        "codebertscore_s_f1-59": 0.8953269720077515,
        "codebertscore_s_f3-59": 0.906989336013794,
        "codebertscore_s_f1-35": 0.902747631072998,
        "codebertscore_s_f3-35": 0.9061775207519531,
        "codebertscore_s_f1-26": 0.8835496306419373,
        "codebertscore_s_f3-26": 0.8903031945228577,
        "codebertscore_s_f1-190": 0.7988810539245605,
        "codebertscore_s_f3-190": 0.8152567744255066,
        "codebertscore_s_f1-151": 0.8977551460266113,
        "codebertscore_s_f3-151": 0.901760458946228,
        "codebertscore_s_f1-22": 0.8236206769943237,
        "codebertscore_s_f3-22": 0.8473429083824158,
        "codebertscore_s_f1-167": 0.804509162902832,
        "codebertscore_s_f3-167": 0.8264155983924866,
        "codebertscore_s_f1-117": 0.7977520823478699,
        "codebertscore_s_f3-117": 0.783602237701416,
        "codebertscore_s_f1-8": 0.8273507952690125,
        "codebertscore_s_f3-8": 0.8045400977134705,
        "codebertscore_s_f1-7": 0.8481845259666443,
        "codebertscore_s_f3-7": 0.8401662707328796,
        "codebertscore_s_f1-23": 0.845539391040802,
        "codebertscore_s_f3-23": 0.8344360589981079,
        "codebertscore_s_f1-57": 0.8716789484024048,
        "codebertscore_s_f3-57": 0.8786410689353943,
        "codebertscore_s_f1-61": 0.8659411668777466,
        "codebertscore_s_f3-61": 0.8788387179374695,
        "codebertscore_s_f1-141": 0.7955901622772217,
        "codebertscore_s_f3-141": 0.7886766195297241,
        "codebertscore_s_f1-170": 0.8916760087013245,
        "codebertscore_s_f3-170": 0.8998217582702637,
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-117": 3,
        "raw_gpt35_nsnr-117": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-180": 4,
        "raw_gpt35_nswr-180": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-117": 3,
        "raw_gpt35_nswr-117": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n"
        ],
        "simplified": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "task_id": "75",
        "168": "long aCpy = a;\n    std::vector<int> primeNumbers;\n    int counter = 0;\n    for (int i = 2; i < aCpy; i++) {\n        for (int j = 2; j <= i; j++) {\n            if (i % j == 0) {\n                counter++;\n            }\n        }\n        if (counter == 1) {\n            primeNumbers.push_back(i);\n        }\n        counter = 0;\n    }\n    for (int k = 0; k < primeNumbers.size(); k++) {\n        for (int l = k + 1; l < primeNumbers.size(); l++) {\n            if (aCpy % (primeNumbers[k] * primeNumbers[l]) == 0) {\n                aCpy = aCpy / (primeNumbers[k] * primeNumbers[l]);\n                k = -1;\n                l = 0;\n            }\n        }\n    }\n    if (aCpy == 1) {\n        return true;\n    }\n    return false;",
        "grade-168": {
            "execution": 0
        },
        "28": "int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            while (a % i == 0) {\n                a /= i;\n            }\n            count++;\n        }\n    }\n    return count == 3;",
        "grade-28": {
            "execution": 0
        },
        "6": "bool res = false;\n    int i,j,k;\n    for(i=2;i<=a/3;i++){\n        for(j=2;j<=a/i;j++){\n            for(k=2;k<=a/i/j;k++){\n                if(i*j*k==a){\n                    return true;\n                }\n            }\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "195": "int k = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            for (int j = 2; j <= i; j++) {\n                if (i % j == 0) {\n                    k++;\n                }\n            }\n            if (k == 1) {\n                a /= i;\n                k = 0;\n            }\n        }\n    }\n    if (a == 1) {\n        return true;\n    }\n    return false;",
        "grade-195": {
            "execution": 0
        },
        "70": "bool f1=false,f2=false,f3=false;\n    int temp;\n    temp=a;\n    for(int i=2;i<=a/2;i++)\n    {\n        if(a%i==0)\n        {\n            if(f1==false)\n            {\n                f1=true;\n                a=a/i;\n                i=2;\n            }\n            else if(f2==false)\n            {\n                f2=true;\n                a=a/i;\n                i=2;\n            }\n            else if(f3==false)\n            {\n                f3=true;\n                a=a/i;\n                i=2;\n            }\n        }\n    }\n    if(f1==true && f2==true && f3==true)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-70": {
            "execution": 0
        },
        "62": "long i;\n\tbool isPrime = true;\n\tfor (i = 2; i <= a / 2; ++i) {\n\t\tif (a % i == 0) {\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (isPrime) {\n\t\treturn true;\n\t}\n\tfor (i = 2; i <= a / 2; ++i) {\n\t\tif (a % i == 0) {\n\t\t\treturn is_multiply_prime(a / i);\n\t\t}\n\t}\n\treturn false;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (a % 3 == 0 && a % 5 == 0 && a % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "bool ans = false;\n  int c = 0;\n  for (int i = 2; i < a; i++) {\n    if (a % i == 0) {\n      c++;\n    }\n  }\n  if (c == 2) {\n    ans = true;\n  }\n  return ans;",
        "grade-35": {
            "execution": 0
        },
        "194": "int flag = 0;\n    for (int i = 2; i <= a / 2; ++i) {\n        if (a % i == 0) {\n            if (i == 2) {\n                continue;\n            }\n            for (int j = 2; j <= i / 2; ++j) {\n                if (i % j == 0) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0) {\n                if (a / i == 2) {\n                    continue;\n                }\n                for (int k = 2; k <= a / i / 2; ++k) {\n                    if (a / i % k == 0) {\n                        flag = 1;\n                        break;\n                    }\n                }\n                if (flag == 0) {\n                    for (int l = 2; l <= a / i / a * i; ++l) {\n                        if (a / i / a * i % l == 0) {\n                            flag = 1;\n                            break;\n                        }\n                    }\n                    if (flag == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;",
        "grade-194": {
            "execution": 0
        },
        "26": "// YOUR CODE HERE\n    return false;",
        "grade-26": {
            "execution": 0
        },
        "179": "int o[100];\n    bool flag=0;\n    for(int i=0;i<100;i++)\n    {\n        o[i]=0;\n    }\n    for(int i=2;i<100;i++)\n    {\n        o[i]=1;\n    }\n    for(int i=2;i<100;i++)\n    {\n        if(o[i]==1)\n        {\n            for(int j=i*i;j<100;j+=i)\n            {\n                o[j]=0;\n            }\n        }\n    }\n    for(int i=2;i<=sqrt(a);i++)\n    {\n        if(o[i]==1 && a%i==0)\n        {\n            for(int j=2;j<=sqrt(a/i);j++)\n            {\n                if(o[j]==1 && (a/i)%j==0)\n                {\n                    for(int k=2;k<=sqrt(a/(i*j));k++)\n                    {\n                        if(o[k]==1 && (a/(i*j))%k==0)\n                        {\n                            flag=1;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(flag==1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-179": {
            "execution": 0
        },
        "142": "assert(a>=1 && a<=1e18);\n    std::vector<long> prime;\n    for(long p=2; p*p<=a; p++) {\n        if(a%p==0) {\n            prime.push_back(p);\n            while(a%p==0) a/=p;\n        }\n    }\n    if(a>1) prime.push_back(a);\n    return prime.size()==3;",
        "grade-142": {
            "execution": 0
        },
        "22": "int c = 0;\n    for (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    c = 1;\n                    break;\n                }\n            }\n            if (c == 0) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-22": {
            "execution": 0
        },
        "155": "return false;",
        "grade-155": {
            "execution": 0
        },
        "109": "bool is_prime = true;\n\t\n\tint a1 = 2;\n\tint a2 = 3;\n\tint a3 = 5;\n\t\n\tif (a1*a2*a3 == a) {\n\t\tis_prime = true;\n\t}\n\telse {\n\t\tis_prime = false;\n\t}\n\treturn is_prime;",
        "grade-109": {
            "execution": 0
        },
        "8": "// Write code here\n    // ...\n    // ...\n    std::map<long,long> prime_factor;\n    for(long x=2;x<=a;x++){\n        if(a%x==0){\n            if(prime_factor.find(x)==prime_factor.end()){\n                prime_factor[x]=1;\n            }\n            else{\n                prime_factor[x]++;\n            }\n            a/=x;\n            x--;\n        }\n    }\n    return prime_factor.size()==3;",
        "grade-8": {
            "execution": 0
        },
        "7": "long divide = a;\n    bool flag = false;\n    while (divide != 1) {\n        flag = false;\n        for (long i = 2; i <= divide; i++) {\n            if (divide % i == 0) {\n                flag = true;\n                divide /= i;\n                break;\n            }\n        }\n        if (!flag)\n            return false;\n    }\n    return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Write your code here.\n\tstd::vector<long> v;\n\tfor (long i = 2; i <= a; i++) {\n\t\twhile (a % i == 0) {\n\t\t\tv.push_back(i);\n\t\t\ta /= i;\n\t\t}\n\t}\n\tif (v.size() != 3)\n\t\treturn false;\n\telse\n\t\treturn true;",
        "grade-23": {
            "execution": 1
        },
        "55": "long int i,j,k,count=0;\n  int flag=0;\n  for(i=2;i<a;i++)\n  {\n    for(j=2;j<=i/2;j++)\n    {\n      if(i%j==0)\n      {\n        flag=1;\n        break;\n      }\n    }\n    if(flag==0)\n    {\n      // cout<<i<<\" \";\n      count++;\n    }\n    flag=0;\n  }\n  // cout<<endl;\n  // cout<<count<<endl;\n  // cout<<\"Total primes: \"<<count<<endl;\n  long int arr[count];\n  long int val=0;\n  for(i=2;i<a;i++)\n  {\n    for(j=2;j<=i/2;j++)\n    {\n      if(i%j==0)\n      {\n        flag=1;\n        break;\n      }\n    }\n    if(flag==0)\n    {\n      arr[val]=i;\n      val++;\n    }\n    flag=0;\n  }\n  long int count1=0;\n  for(i=0;i<count;i++)\n  {\n    for(j=0;j<count;j++)\n    {\n      for(k=0;k<count;k++)\n      {\n        if(arr[i]*arr[j]*arr[k]==a)\n        {\n          count1++;\n        }\n      }\n    }\n  }\n  if(count1==0)\n  {\n    return false;\n  }\n  else\n  {\n    return true;\n  }",
        "grade-55": {
            "execution": 1
        },
        "59": "bool result = true;\n  int x = 2;\n  for (int i = 0; i < 3; i++) {\n    int c = 0;\n    for (int j = 1; j <= x; j++) {\n      if (x % j == 0) {\n        c++;\n      }\n    }\n    if (c == 2) {\n      if (a % x == 0) {\n        a = a / x;\n      } else {\n        result = false;\n        break;\n      }\n    }\n    x++;\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-168": 0.1210093836445518,
        "bleu-28": 0.4715270504714153,
        "bleu-6": 0.2126107516849278,
        "bleu-195": 0.3202584132089359,
        "bleu-70": 0.20410136922570155,
        "bleu-62": 0.22534702578384724,
        "bleu-57": 0.0886028721567322,
        "bleu-35": 0.43068445915837117,
        "bleu-194": 0.14045571634372137,
        "bleu-26": 0.00022825122357617112,
        "bleu-179": 0.11081990475443076,
        "bleu-142": 0.12237026571788202,
        "bleu-22": 0.34661125977554513,
        "bleu-155": 2.0611536224385587e-09,
        "bleu-109": 0.06454674547413194,
        "bleu-8": 0.10379679411898503,
        "bleu-7": 0.2757706424010109,
        "bleu-23": 0.33201824891083775,
        "bleu-55": 0.06988627444984327,
        "bleu-59": 0.2365931928082063,
        "codebleu-168": 0.6769284141548614,
        "codebleu-28": 0.5881419336581946,
        "codebleu-6": 0.5745983179219254,
        "codebleu-195": 0.6508826963954186,
        "codebleu-70": 0.6256791784916393,
        "codebleu-62": 0.6146269510816373,
        "codebleu-57": 0.22353000819004723,
        "codebleu-35": 0.6306548286984697,
        "codebleu-194": 0.671138096483002,
        "codebleu-26": 0.048311456970589,
        "codebleu-179": 0.6651139511754651,
        "codebleu-142": 0.5840999787987259,
        "codebleu-22": 0.6453368064872269,
        "codebleu-155": 0.02409639080941864,
        "codebleu-109": 0.4183007566120762,
        "codebleu-8": 0.5360060933388726,
        "codebleu-7": 0.5981700045699515,
        "codebleu-23": 0.5717002752938258,
        "codebleu-55": 0.6497922063025389,
        "codebleu-59": 0.6575334801044825,
        "chrf-168": 0.3089835951157867,
        "chrf-28": 0.4176672266695944,
        "chrf-6": 0.34366538489764975,
        "chrf-195": 0.4783668063366406,
        "chrf-70": 0.38216621653914484,
        "chrf-62": 0.37204059921409666,
        "chrf-57": 0.27787433342223444,
        "chrf-35": 0.4055480223598639,
        "chrf-194": 0.3555042111188105,
        "chrf-26": 0.11760413119903551,
        "chrf-179": 0.3249468010376382,
        "chrf-142": 0.2540027914982435,
        "chrf-22": 0.4642251739862599,
        "chrf-155": 0.11976471819604517,
        "chrf-109": 0.2349228826375782,
        "chrf-8": 0.2075149115697995,
        "chrf-7": 0.380280443766323,
        "chrf-23": 0.43500674530386063,
        "chrf-55": 0.25089963953617683,
        "chrf-59": 0.34674949833656193,
        "rougel-168": 0.3542435424354244,
        "rougel-28": 0.6666666666666666,
        "rougel-6": 0.5228758169934641,
        "rougel-195": 0.6012269938650306,
        "rougel-70": 0.48372093023255813,
        "rougel-62": 0.5,
        "rougel-57": 0.38383838383838387,
        "rougel-35": 0.6776859504132232,
        "rougel-194": 0.3701067615658363,
        "rougel-26": 0.11267605633802816,
        "rougel-179": 0.3246376811594203,
        "rougel-142": 0.44720496894409945,
        "rougel-22": 0.6482758620689654,
        "rougel-155": 0.0909090909090909,
        "rougel-109": 0.3818181818181818,
        "rougel-8": 0.36046511627906974,
        "rougel-7": 0.5401459854014599,
        "rougel-23": 0.557142857142857,
        "rougel-55": 0.24146981627296588,
        "rougel-59": 0.4352941176470588,
        "meteor-168": 0.49398373671895973,
        "meteor-28": 0.4985761514839312,
        "meteor-6": 0.5096301211862666,
        "meteor-195": 0.5833793846878215,
        "meteor-70": 0.547895549183346,
        "meteor-62": 0.5451461194572529,
        "meteor-57": 0.3494129353233831,
        "meteor-35": 0.49403402646502836,
        "meteor-194": 0.5093071263475484,
        "meteor-26": 0.06521739130434782,
        "meteor-179": 0.45812229621436484,
        "meteor-142": 0.4468318717398411,
        "meteor-22": 0.5663757390928819,
        "meteor-155": 0.05165692007797271,
        "meteor-109": 0.28172409919941754,
        "meteor-8": 0.36507045327344595,
        "meteor-7": 0.48170244390115874,
        "meteor-23": 0.49663389848419026,
        "meteor-55": 0.37371994210206844,
        "meteor-59": 0.42626279604071987,
        "ruby-168": 0.22115384615384615,
        "ruby-28": 0.5079365079365079,
        "ruby-6": 0.3666666666666667,
        "ruby-195": 0.44999999999999996,
        "ruby-70": 0.3223684210526315,
        "ruby-62": 0.35051546391752575,
        "ruby-57": 0.23809523809523814,
        "ruby-35": 0.4920634920634921,
        "ruby-194": 0.22477064220183485,
        "ruby-26": 0.06349206349206349,
        "ruby-179": 0.1985815602836879,
        "ruby-142": 0.30612244897959184,
        "ruby-22": 0.4878048780487805,
        "ruby-155": 0.04761904761904767,
        "ruby-109": 0.2698412698412699,
        "ruby-8": 0.22935779816513757,
        "ruby-7": 0.33783783783783783,
        "ruby-23": 0.4155844155844156,
        "ruby-55": 0.14150943396226412,
        "ruby-59": 0.28971962616822433,
        "codebertscore_f1-168": 0.7581232190132141,
        "codebertscore_f3-168": 0.818272054195404,
        "codebertscore_f1-28": 0.8927252888679504,
        "codebertscore_f3-28": 0.8740677833557129,
        "codebertscore_f1-6": 0.8059275150299072,
        "codebertscore_f3-6": 0.8073640465736389,
        "codebertscore_f1-195": 0.8485946655273438,
        "codebertscore_f3-195": 0.8508171439170837,
        "codebertscore_f1-70": 0.7643235921859741,
        "codebertscore_f3-70": 0.8059543967247009,
        "codebertscore_f1-62": 0.8227634429931641,
        "codebertscore_f3-62": 0.8300556540489197,
        "codebertscore_f1-57": 0.7814735174179077,
        "codebertscore_f3-57": 0.7484403848648071,
        "codebertscore_f1-35": 0.8825703859329224,
        "codebertscore_f3-35": 0.8717595338821411,
        "codebertscore_f1-194": 0.7643706202507019,
        "codebertscore_f3-194": 0.8018071055412292,
        "codebertscore_f1-26": 0.6314522624015808,
        "codebertscore_f3-26": 0.6001616716384888,
        "codebertscore_f1-179": 0.7597237825393677,
        "codebertscore_f3-179": 0.7996876835823059,
        "codebertscore_f1-142": 0.7879688143730164,
        "codebertscore_f3-142": 0.8012664914131165,
        "codebertscore_f1-22": 0.8451434969902039,
        "codebertscore_f3-22": 0.8394914269447327,
        "codebertscore_f1-155": 0.5527409911155701,
        "codebertscore_f3-155": 0.4997851252555847,
        "codebertscore_f1-109": 0.7715601921081543,
        "codebertscore_f3-109": 0.7629421353340149,
        "codebertscore_f1-8": 0.727114737033844,
        "codebertscore_f3-8": 0.7503401041030884,
        "codebertscore_f1-7": 0.8106465339660645,
        "codebertscore_f3-7": 0.8152245283126831,
        "codebertscore_f1-23": 0.8130409717559814,
        "codebertscore_f3-23": 0.840534508228302,
        "codebertscore_f1-55": 0.7385793328285217,
        "codebertscore_f3-55": 0.7867884635925293,
        "codebertscore_f1-59": 0.8176372647285461,
        "codebertscore_f3-59": 0.8253531455993652,
        "codebertscore_s_f1-168": 0.7846116423606873,
        "codebertscore_s_f3-168": 0.836632490158081,
        "codebertscore_s_f1-28": 0.8935759663581848,
        "codebertscore_s_f3-28": 0.8758618235588074,
        "codebertscore_s_f1-6": 0.8110008239746094,
        "codebertscore_s_f3-6": 0.8123376965522766,
        "codebertscore_s_f1-195": 0.8570787906646729,
        "codebertscore_s_f3-195": 0.8587132096290588,
        "codebertscore_s_f1-70": 0.7823977470397949,
        "codebertscore_s_f3-70": 0.8179234266281128,
        "codebertscore_s_f1-62": 0.8206071853637695,
        "codebertscore_s_f3-62": 0.8273407220840454,
        "codebertscore_s_f1-57": 0.7915754914283752,
        "codebertscore_s_f3-57": 0.7558667659759521,
        "codebertscore_s_f1-35": 0.8805086016654968,
        "codebertscore_s_f3-35": 0.8726216554641724,
        "codebertscore_s_f1-194": 0.782002866268158,
        "codebertscore_s_f3-194": 0.8035895228385925,
        "codebertscore_s_f1-26": 0.6123189330101013,
        "codebertscore_s_f3-26": 0.5844184756278992,
        "codebertscore_s_f1-179": 0.7840139269828796,
        "codebertscore_s_f3-179": 0.8182119131088257,
        "codebertscore_s_f1-142": 0.7954163551330566,
        "codebertscore_s_f3-142": 0.8108253479003906,
        "codebertscore_s_f1-22": 0.8534212708473206,
        "codebertscore_s_f3-22": 0.8469977974891663,
        "codebertscore_s_f1-155": 0.659101665019989,
        "codebertscore_s_f3-155": 0.5749752521514893,
        "codebertscore_s_f1-109": 0.7651209831237793,
        "codebertscore_s_f3-109": 0.7595002055168152,
        "codebertscore_s_f1-8": 0.72869873046875,
        "codebertscore_s_f3-8": 0.7525774836540222,
        "codebertscore_s_f1-7": 0.8134172558784485,
        "codebertscore_s_f3-7": 0.8169474601745605,
        "codebertscore_s_f1-23": 0.8141860961914062,
        "codebertscore_s_f3-23": 0.841663122177124,
        "codebertscore_s_f1-55": 0.7634928822517395,
        "codebertscore_s_f3-55": 0.8091184496879578,
        "codebertscore_s_f1-59": 0.8268535137176514,
        "codebertscore_s_f3-59": 0.836113691329956,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "Score: 1",
        "gpt35_nsnr-194": 2,
        "raw_gpt35_nsnr-194": "2",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-179": 3,
        "raw_gpt35_nsnr-179": "3",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-155": 2,
        "raw_gpt35_nsnr-155": "2",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-168": 2,
        "raw_gpt35_nswr-168": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-195": 2,
        "raw_gpt35_nswr-195": "2",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "Score: 1",
        "gpt35_nswr-57": 1,
        "raw_gpt35_nswr-57": "1",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-194": 1,
        "raw_gpt35_nswr-194": "1",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-179": 2,
        "raw_gpt35_nswr-179": "2",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-155": 2,
        "raw_gpt35_nswr-155": "2",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfloat truncate_number(float number) {\n",
        "snippet": [
            "    return number-int(number);\n}\n"
        ],
        "simplified": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
        "task_id": "2",
        "198": "return 0.0;",
        "grade-198": {
            "execution": 0
        },
        "33": "return number - int(number);",
        "grade-33": {
            "execution": 1
        },
        "7": "// Type your code here\n    int ans = number;\n    float result = number - ans;\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "81": "// TODO\n  float f = number - int(number);\n  return f;",
        "grade-81": {
            "execution": 1
        },
        "71": "int integral_part = number;\n  return number - integral_part;",
        "grade-71": {
            "execution": 1
        },
        "65": "float decimal_part = number - (int)number;\n\treturn decimal_part;",
        "grade-65": {
            "execution": 1
        },
        "40": "int r = number;\n    return number - r;",
        "grade-40": {
            "execution": 1
        },
        "31": "//1.to_string()\n\t//2.size\n\t//3.substr(pos,size)\n\t//4.stof\n\t// .5\n\t// .1\n\t// .9\n\t// .11\n\tstd::string str = std::to_string(number);\n\tint pos = str.find(\".\");\n\tint size = str.size();\n\tstr = str.substr(pos+1,size);\n\tfloat ans = std::stof(str);\n\treturn ans;",
        "grade-31": {
            "execution": 0
        },
        "168": "// TODO: Write - Your - Code\n\tint temp = number;\n\tfloat result = number - temp;\n\treturn result;",
        "grade-168": {
            "execution": 1
        },
        "26": "int integer_part = (int)number;\n  return number - integer_part;",
        "grade-26": {
            "execution": 1
        },
        "183": "// write your code here\n  int x = number;\n  float y = number - x;\n  return y;",
        "grade-183": {
            "execution": 1
        },
        "124": "return number - floor(number);",
        "grade-124": {
            "execution": 1
        },
        "10": "// write your code here\n    if(number < 0){\n        number = number * -1;\n    }\n    return number - (int)number;",
        "grade-10": {
            "execution": 1
        },
        "8": "// Write your code here\n  return number-(int)number;",
        "grade-8": {
            "execution": 1
        },
        "27": "assert(number >= 0.0f);\n    // Need to convert to int64_t because we don't\n    // want the compiler to make a mistake here.\n    int64_t t = (int64_t)number;\n    return number - t;",
        "grade-27": {
            "execution": 1
        },
        "63": "// Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return 0.0;",
        "grade-63": {
            "execution": 0
        },
        "68": "// assert(number > 0);\n  float temp = number;\n  while(temp - floor(temp) >= 1) {\n    temp = temp - 1;\n  }\n  return number - temp;",
        "grade-68": {
            "execution": 0
        },
        "154": "float r = number - (int)number;\n  return r < 0 ? 1 + r : r;",
        "grade-154": {
            "execution": 1
        },
        "187": "int number_integer = (int)number;\n  return number - number_integer;",
        "grade-187": {
            "execution": 1
        },
        "172": "// TODO: Write - Your - Code\n\tint int_part = (int)number;\n\treturn (number - int_part);",
        "grade-172": {
            "execution": 1
        },
        "bleu-198": 0.0570796903405875,
        "bleu-33": 0.8824969025845958,
        "bleu-7": 0.04780204393760627,
        "bleu-81": 0.3850322886878711,
        "bleu-71": 0.18575057999133596,
        "bleu-65": 0.0873716785171588,
        "bleu-40": 0.18575057999133596,
        "bleu-31": 0.023667948547682248,
        "bleu-168": 0.04141141330484801,
        "bleu-26": 0.14694106251955755,
        "bleu-183": 0.04780204393760627,
        "bleu-124": 0.44124845129229784,
        "bleu-10": 0.07496263447644966,
        "bleu-8": 0.13508625657351417,
        "bleu-27": 0.04348196273867884,
        "bleu-63": 0.04456882760699063,
        "bleu-68": 0.05641822153183601,
        "bleu-154": 0.05136663909505951,
        "bleu-187": 0.14694106251955755,
        "bleu-172": 0.05856458233275369,
        "codebleu-198": 0.11092771941659581,
        "codebleu-33": 0.8310694907412289,
        "codebleu-7": 0.39487179487179486,
        "codebleu-81": 0.6929739635935129,
        "codebleu-71": 0.39487179487179486,
        "codebleu-65": 0.5094017094017094,
        "codebleu-40": 0.39487179487179486,
        "codebleu-31": 0.5322275228910123,
        "codebleu-168": 0.39487179487179486,
        "codebleu-26": 0.5094017094017094,
        "codebleu-183": 0.39487179487179486,
        "codebleu-124": 0.7463039761398452,
        "codebleu-10": 0.5222222222222221,
        "codebleu-8": 0.5094017094017094,
        "codebleu-27": 0.49658119658119654,
        "codebleu-63": 0.2991452991452991,
        "codebleu-68": 0.6427350427350427,
        "codebleu-154": 0.5094017094017094,
        "codebleu-187": 0.5094017094017094,
        "codebleu-172": 0.5094017094017094,
        "chrf-198": 0.1740257907024978,
        "chrf-33": 0.9654806444497605,
        "chrf-7": 0.38756139425367253,
        "chrf-81": 0.7553029540645702,
        "chrf-71": 0.5969802328189432,
        "chrf-65": 0.428718427426565,
        "chrf-40": 0.6288936199248268,
        "chrf-31": 0.19580774727694947,
        "chrf-168": 0.3738290330328376,
        "chrf-26": 0.5953193708071514,
        "chrf-183": 0.4210816972904571,
        "chrf-124": 0.7105794479532751,
        "chrf-10": 0.49386848140217965,
        "chrf-8": 0.5622642168240749,
        "chrf-27": 0.3794395589462234,
        "chrf-63": 0.2040458790658625,
        "chrf-68": 0.45793592068723155,
        "chrf-154": 0.4723859448644509,
        "chrf-187": 0.5103637982793816,
        "chrf-172": 0.48754480609851236,
        "rougel-198": 0.2857142857142857,
        "rougel-33": 0.9411764705882353,
        "rougel-7": 0.2,
        "rougel-81": 0.56,
        "rougel-71": 0.4210526315789474,
        "rougel-65": 0.4545454545454546,
        "rougel-40": 0.4210526315789474,
        "rougel-31": 0.08771929824561402,
        "rougel-168": 0.24242424242424243,
        "rougel-26": 0.3636363636363637,
        "rougel-183": 0.2,
        "rougel-124": 0.823529411764706,
        "rougel-10": 0.31578947368421056,
        "rougel-8": 0.5217391304347826,
        "rougel-27": 0.14545454545454548,
        "rougel-63": 0.19999999999999998,
        "rougel-68": 0.25,
        "rougel-154": 0.33333333333333326,
        "rougel-187": 0.3636363636363637,
        "rougel-172": 0.36363636363636365,
        "meteor-198": 0.11627906976744186,
        "meteor-33": 0.8979985955056179,
        "meteor-7": 0.29411764705882354,
        "meteor-81": 0.8029961340206185,
        "meteor-71": 0.3296703296703296,
        "meteor-65": 0.5659906914893617,
        "meteor-40": 0.3296703296703296,
        "meteor-31": 0.16129032258064516,
        "meteor-168": 0.28571428571428575,
        "meteor-26": 0.425531914893617,
        "meteor-183": 0.29411764705882354,
        "meteor-124": 0.7773446457234581,
        "meteor-10": 0.6257014590347924,
        "meteor-8": 0.6644736842105263,
        "meteor-27": 0.27559055118110243,
        "meteor-63": 0.10869565217391303,
        "meteor-68": 0.3333333333333333,
        "meteor-154": 0.5215992647058824,
        "meteor-187": 0.425531914893617,
        "meteor-172": 0.6011904761904763,
        "ruby-198": 0.2222222222222222,
        "ruby-33": 0.8888888888888888,
        "ruby-7": 0.1428571428571429,
        "ruby-81": 0.4375,
        "ruby-71": 0.09999999999999998,
        "ruby-65": 0.3076923076923077,
        "ruby-40": 0.09999999999999998,
        "ruby-31": 0.04761904761904767,
        "ruby-168": 0.16666666666666663,
        "ruby-26": 0.15384615384615385,
        "ruby-183": 0.1428571428571429,
        "ruby-124": 0.7777777777777778,
        "ruby-10": 0.1724137931034483,
        "ruby-8": 0.2857142857142857,
        "ruby-27": 0.08695652173913049,
        "ruby-63": 0.0,
        "ruby-68": 0.15384615384615385,
        "ruby-154": 0.19047619047619047,
        "ruby-187": 0.15384615384615385,
        "ruby-172": 0.20833333333333337,
        "codebertscore_f1-198": 0.694663405418396,
        "codebertscore_f3-198": 0.6796449422836304,
        "codebertscore_f1-33": 0.9518081545829773,
        "codebertscore_f3-33": 0.9518080949783325,
        "codebertscore_f1-7": 0.7874544262886047,
        "codebertscore_f3-7": 0.8505904078483582,
        "codebertscore_f1-81": 0.848759114742279,
        "codebertscore_f3-81": 0.9044449329376221,
        "codebertscore_f1-71": 0.852383553981781,
        "codebertscore_f3-71": 0.8679755926132202,
        "codebertscore_f1-65": 0.8724307417869568,
        "codebertscore_f3-65": 0.90025395154953,
        "codebertscore_f1-40": 0.8418183326721191,
        "codebertscore_f3-40": 0.8556150197982788,
        "codebertscore_f1-31": 0.6713240146636963,
        "codebertscore_f3-31": 0.7209277153015137,
        "codebertscore_f1-168": 0.8053730130195618,
        "codebertscore_f3-168": 0.8635571599006653,
        "codebertscore_f1-26": 0.8684147596359253,
        "codebertscore_f3-26": 0.8934928774833679,
        "codebertscore_f1-183": 0.7865251898765564,
        "codebertscore_f3-183": 0.8478273749351501,
        "codebertscore_f1-124": 0.911878228187561,
        "codebertscore_f3-124": 0.9118781685829163,
        "codebertscore_f1-10": 0.8000676035881042,
        "codebertscore_f3-10": 0.8658644556999207,
        "codebertscore_f1-8": 0.8262768983840942,
        "codebertscore_f3-8": 0.8988549113273621,
        "codebertscore_f1-27": 0.7383936643600464,
        "codebertscore_f3-27": 0.8230966329574585,
        "codebertscore_f1-63": 0.6257849931716919,
        "codebertscore_f3-63": 0.6549020409584045,
        "codebertscore_f1-68": 0.7733967900276184,
        "codebertscore_f3-68": 0.8155202269554138,
        "codebertscore_f1-154": 0.8013280630111694,
        "codebertscore_f3-154": 0.8499967455863953,
        "codebertscore_f1-187": 0.8857293128967285,
        "codebertscore_f3-187": 0.900524914264679,
        "codebertscore_f1-172": 0.8172063827514648,
        "codebertscore_f3-172": 0.8768306374549866,
        "codebertscore_s_f1-198": 0.7121680974960327,
        "codebertscore_s_f3-198": 0.6973888874053955,
        "codebertscore_s_f1-33": 0.9720916152000427,
        "codebertscore_s_f3-33": 0.972091555595398,
        "codebertscore_s_f1-7": 0.7902504205703735,
        "codebertscore_s_f3-7": 0.8605086207389832,
        "codebertscore_s_f1-81": 0.8554792404174805,
        "codebertscore_s_f3-81": 0.9205162525177002,
        "codebertscore_s_f1-71": 0.8605770468711853,
        "codebertscore_s_f3-71": 0.8896887898445129,
        "codebertscore_s_f1-65": 0.8713676333427429,
        "codebertscore_s_f3-65": 0.9115296602249146,
        "codebertscore_s_f1-40": 0.874091386795044,
        "codebertscore_s_f3-40": 0.8923553824424744,
        "codebertscore_s_f1-31": 0.6579740047454834,
        "codebertscore_s_f3-31": 0.7156614661216736,
        "codebertscore_s_f1-168": 0.7827188968658447,
        "codebertscore_s_f3-168": 0.8622593879699707,
        "codebertscore_s_f1-26": 0.8662914037704468,
        "codebertscore_s_f3-26": 0.8978895545005798,
        "codebertscore_s_f1-183": 0.784256100654602,
        "codebertscore_s_f3-183": 0.8529988527297974,
        "codebertscore_s_f1-124": 0.9127931594848633,
        "codebertscore_s_f3-124": 0.9127932190895081,
        "codebertscore_s_f1-10": 0.7961853742599487,
        "codebertscore_s_f3-10": 0.8677992820739746,
        "codebertscore_s_f1-8": 0.8273801803588867,
        "codebertscore_s_f3-8": 0.9103467464447021,
        "codebertscore_s_f1-27": 0.7251719236373901,
        "codebertscore_s_f3-27": 0.8239839673042297,
        "codebertscore_s_f1-63": 0.5949750542640686,
        "codebertscore_s_f3-63": 0.6173091530799866,
        "codebertscore_s_f1-68": 0.7800003886222839,
        "codebertscore_s_f3-68": 0.8274696469306946,
        "codebertscore_s_f1-154": 0.8429365754127502,
        "codebertscore_s_f3-154": 0.9007430076599121,
        "codebertscore_s_f1-187": 0.8864718675613403,
        "codebertscore_s_f3-187": 0.9020127058029175,
        "codebertscore_s_f1-172": 0.7979403734207153,
        "codebertscore_s_f3-172": 0.8744090795516968,
        "gpt35_nsnr-198": 3,
        "raw_gpt35_nsnr-198": "3",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-31": 3,
        "raw_gpt35_nsnr-31": "3",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-124": 4,
        "raw_gpt35_nsnr-124": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-63": 0,
        "raw_gpt35_nsnr-63": "3 - The code correctly returns the decimal part of the given floating point number. However, the implementation is incomplete as there is no logic written to extract the decimal part from the given number. The function simply returns 0.0.",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nswr-198": 4,
        "raw_gpt35_nswr-198": "4",
        "gpt35_nswr-33": 4,
        "raw_gpt35_nswr-33": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-40": 2,
        "raw_gpt35_nswr-40": "2",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-124": 4,
        "raw_gpt35_nswr-124": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string word) {\n",
        "snippet": [
            "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n"
        ],
        "simplified": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
        "task_id": "118",
        "163": "std::string vowels = \"AEIOUaeiou\";\n    int cnt = 0;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            cnt++;\n        } else {\n            if (cnt == 1) {\n                return word.substr(i, 1);\n            } else {\n                cnt = 0;\n            }\n        }\n    }\n    return \"\";",
        "grade-163": {
            "execution": 0
        },
        "28": "int len = word.length();\n    int count = 0;\n    int ci = 0;\n    std::string str = \"\";\n    for(int i = len-1; i >= 0; i--) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U') {\n            count++;\n            ci = i;\n        }\n        if(count == 2) {\n            str = word[ci];\n            break;\n        }\n    }\n    return str;",
        "grade-28": {
            "execution": 0
        },
        "6": "//your code here\n  return \"\";",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string vowels = \"aeiou\";\n  std::string::iterator it = word.end() - 1;\n  int ind = -1;\n  while (it >= word.begin()) {\n    if (vowels.find(*it) != std::string::npos) {\n      ind = vowels.find(*it);\n      break;\n    }\n    it--;\n  }\n  if (ind != -1) {\n    it--;\n    while (it >= word.begin()) {\n      if (vowels.find(*it) == std::string::npos) {\n        return vowels[ind];\n      }\n      it--;\n    }\n  }\n  return \"\";",
        "grade-189": {
            "execution": 0
        },
        "70": "// Let's build the vowel string\n    std::string vowel = \"AEIOUaeiou\";\n    // Set a flag\n    bool isVowel = false;\n    // Set distance to maximum value.\n    int distance = INT_MAX;\n    // Loop through the word\n    for (int i = 0; i < word.length(); i++) {\n        // Check if the current character is a vowel\n        if (vowel.find(word[i]) != std::string::npos) {\n            // Loop through the consonants on right side of the vowel\n            for (int j = i + 1; j < word.length(); j++) {\n                // Break if we find a vowel\n                if (vowel.find(word[j]) != std::string::npos) {\n                    break;\n                }\n                // Check if the current distance is better than our initial distance\n                if (j - i < distance) {\n                    // Update our distance\n                    distance = j - i;\n                    // Update our isVowel flag\n                    isVowel = true;\n                }\n            }\n        }\n    }\n    // If no vowels were found, return empty string\n    if (!isVowel) {\n        return \"\";\n    }\n    // Return the closest vowel found.\n    return word[distance - 1];",
        "grade-70": {
            "execution": 0
        },
        "62": "int n = word.size();\n    if(n <= 1) return \"\";\n    std::vector<char> v = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::map<char, bool> map;\n    for(auto i : v) map[i] = true;\n    int cons_ctr = 0;\n    for(int i = n - 1; i >= 0; i--) {\n        if(map[word[i]]) {\n            if(cons_ctr == 0) return \"\";\n            else return std::string(1, word[i]);\n        }\n        cons_ctr++;\n    }\n    return \"\";",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string vowels = \"AEIOUaeiou\";\n  for (int i = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos) {\n      return word[i];\n    }\n  }\n  return \"\";",
        "grade-57": {
            "execution": 0
        },
        "35": "//Your code here\n    int a = 0;\n    int len = word.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n            if(i - 1 < 0 || i == len - 1)\n            {\n                a = 1;\n                break;\n            }\n            else if(!(word[i - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u')\n                && !(word[i + 1] == 'a' || word[i + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u'))\n            {\n                return word.substr(i, 1);\n            }\n        }\n    }\n    if(a == 1)\n    {\n        return \"\";\n    }",
        "grade-35": {
            "execution": 0
        },
        "188": "std::string vowels = \"aeiou\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (i + 1 < word.size() && vowels.find(word[i + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\";",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    bool flag = false;\n    int vowel_index = -1;\n    int vowel_pos = -1;\n    for(int i = 0; i < word.size(); i++) {\n        for(int j = 0; j < vowels.size(); j++) {\n            if(word[i] == vowels[j]) {\n                vowel_index = j;\n                vowel_pos = i;\n                break;\n            }\n        }\n        if(vowel_index != -1) {\n            break;\n        }\n    }\n    if(vowel_index == -1) {\n        return \"\";\n    }\n    for(int i = word.size() - 1; i >= 0; i--) {\n        for(int j = 0; j < vowels.size(); j++) {\n            if(word[i] == vowels[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if(flag) {\n            break;\n        }\n        vowel_pos = i;\n    }\n    return std::string(1, word[vowel_pos]);",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string vowels = \"aeiou\";\n\tstd::string answer = \"\";\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\tif (word[i] == vowels[j]) {\n\t\t\t\tif (i == word.length() - 1) {\n\t\t\t\t\tif (word[i - 1] == vowels[j]) {\n\t\t\t\t\t\tanswer = word[i];\n\t\t\t\t\t\treturn answer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i == 0) {\n\t\t\t\t\tif (word[i + 1] == vowels[j]) {\n\t\t\t\t\t\tanswer = word[i];\n\t\t\t\t\t\treturn answer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (word[i - 1] == vowels[j] || word[i + 1] == vowels[j]) {\n\t\t\t\t\t\tanswer = word[i];\n\t\t\t\t\t\treturn answer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn answer;",
        "grade-173": {
            "execution": 0
        },
        "139": "int len = word.length();\n    if(len == 0) return \"\";\n    char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n    std::string res = \"\";\n    for(int i = len - 1; i >= 0; i--) {\n        for(int j = 0; j < 5; j++) {\n            if(word[i] == vowels[j]) {\n                res = word[i];\n                break;\n            }\n        }\n        if(res.size() > 0) {\n            break;\n        }\n    }\n    return res;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<std::string> all_vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"};\n  std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::string closest_vowel = \"\";\n  int vowel_count = 0;\n  std::size_t found;\n  std::vector<int> all_vowel_pos;\n  for(int i = 0; i < all_vowels.size(); i++) {\n    if(word.find(all_vowels[i]) != std::string::npos) {\n      found = word.find(all_vowels[i]);\n      all_vowel_pos.push_back(found);\n      vowel_count++;\n    }\n  }\n  if(vowel_count == 0) {\n    return \"\";\n  }\n  std::sort(all_vowel_pos.begin(), all_vowel_pos.end());\n  if(all_vowel_pos[0] == 0) {\n    return \"\";\n  }\n  int minimum_right_consonant_distance = 0;\n  int right_consonant_distance = 0;\n  for(int i = 0; i < all_vowel_pos.size(); i++) {\n    for(int j = all_vowel_pos[i]; j < word.length(); j++) {\n      if(std::find(vowels.begin(), vowels.end(), word[j]) == vowels.end()) {\n        right_consonant_distance++;\n      }\n      else {\n        break;\n      }\n    }\n    if(i == 0) {\n      minimum_right_consonant_distance = right_consonant_distance;\n      closest_vowel = all_vowels[i];\n    }\n    else {\n      if(right_consonant_distance < minimum_right_consonant_distance) {",
        "grade-22": {
            "execution": 0
        },
        "151": "std::string vowels = \"aeiou\";\n  std::size_t found = word.find_last_of(vowels);\n  while (found != std::string::npos) {\n    std::string c = word.substr(found, 1);\n    if (found > 0 && vowels.find(word.substr(found - 1, 1)) == std::string::npos &&\n        vowels.find(word.substr(found + 1, 1)) == std::string::npos) {\n      return c;\n    }\n    found = word.find_last_of(vowels, found - 1);\n  }\n  return \"\";",
        "grade-151": {
            "execution": 0
        },
        "108": "std::set<char> vowels {'a', 'e', 'i', 'o', 'u'};\n   auto result = word.rbegin();\n   for (; result != word.rend(); ++result) {\n     if (vowels.count(*result)) {\n        break;\n     }\n   }\n   auto search = result;\n   for (; search != word.rend(); ++search) {\n     if (!vowels.count(*search)) {\n        break;\n     }\n   }\n   if (search == word.rend()) {\n      return \"\";\n   }\n   auto result_distance = std::distance(result, word.rend());\n   auto search_distance = std::distance(search, word.rend());\n   if (result_distance - search_distance == 1) {\n      return \"\";\n   }\n   return std::string(1, *result);",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here\n  return \"\";",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string vowels = \"AEIOUaeiou\";\n    std::vector<std::string> temp;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            std::string s = word.substr(i,1);\n            temp.push_back(s);\n        }\n    }\n    if (temp.size() < 2) {\n        return \"\";\n    }\n    std::reverse(temp.begin(), temp.end());\n    std::string s = temp[0];\n    for (int i = 1; i < temp.size(); i++) {\n        if (vowels.find(temp[i-1]) != std::string::npos) {\n            break;\n        }\n        if (vowels.find(temp[i]) != std::string::npos) {\n            if (vowels.find(temp[i-1]) == std::string::npos) {\n                s = temp[i];\n                break;\n            }\n        }\n    }\n    return s;",
        "grade-7": {
            "execution": 0
        },
        "23": "int count = 0;\n  std::string s;\n  for(int i = word.length()-1; i >= 0; i--) {\n    if(!count && !(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\n       word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' ||\n       word[i] == 'I' || word[i] == 'O' || word[i] == 'U')) {\n      count++;\n    } else if(count && !(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\n       word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' ||\n       word[i] == 'I' || word[i] == 'O' || word[i] == 'U')) {\n      break;\n    } else if(count && (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\n       word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' ||\n       word[i] == 'I' || word[i] == 'O' || word[i] == 'U')) {\n      s = word[i];\n      break;\n    }\n  }\n  return s;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string vowels = \"aeiou\";\n    std::string answer = \"\";\n    std::vector<std::pair<int, int>> v;\n\n    for (auto i = 0; i < word.size(); i++) {\n        for (auto j = 0; j < vowels.size(); j++) {\n            if (word[i] == vowels[j]) {\n                v.push_back(std::make_pair(i, j));\n            }\n        }\n    }\n\n    for (auto i = 0; i < v.size(); i++) {\n        auto left = std::find_if(word.begin(), word.begin() + v[i].first, [](auto &c) {\n            return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        });\n        auto right = std::find_if(word.begin() + v[i].first + 1, word.end(), [](auto &c) {\n            return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        });\n        if (left != word.begin() + v[i].first && right != word.end()) {\n            return vowels.substr(v[i].second, 1);\n        }\n    }\n\n    return answer;",
        "grade-55": {
            "execution": 0
        },
        "59": "// your code here\n  std::string result = \"\";\n  std::string vowels = \"aeiou\";\n  //   result = word.size() == 1 ? \"\" : word[1];\n  //   return result;\n  std::size_t found = word.find_last_of(vowels);\n  if (found == std::string::npos) {\n    return result;\n  }\n  if (word.size() > 1) {\n    result = word[found];\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.20961439040836438,
        "bleu-28": 0.14483650948843185,
        "bleu-6": 1.0167800928532352e-07,
        "bleu-189": 0.1550343677112347,
        "bleu-70": 0.1078934801437315,
        "bleu-62": 0.149236708715881,
        "bleu-57": 0.16504852647957238,
        "bleu-35": 0.11674043202482273,
        "bleu-188": 0.257756846928076,
        "bleu-26": 0.12553200556334912,
        "bleu-173": 0.22432043923224004,
        "bleu-139": 0.21237040628184592,
        "bleu-22": 0.1584884378629966,
        "bleu-151": 0.07560389636730842,
        "bleu-108": 0.05525940988884239,
        "bleu-8": 1.0167800928532352e-07,
        "bleu-7": 0.21811818250701814,
        "bleu-23": 0.07303853252606463,
        "bleu-55": 0.1098879101530661,
        "bleu-59": 0.07757372088646605,
        "codebleu-163": 0.35358694917790456,
        "codebleu-28": 0.40946133888214054,
        "codebleu-6": 0.02601631438814079,
        "codebleu-189": 0.48020053437443516,
        "codebleu-70": 0.51322122909388,
        "codebleu-62": 0.4657266879896723,
        "codebleu-57": 0.24659675394845967,
        "codebleu-35": 0.48520316993663265,
        "codebleu-188": 0.4227600938935112,
        "codebleu-26": 0.5876559809248022,
        "codebleu-173": 0.5510244494765962,
        "codebleu-139": 0.45562859194720107,
        "codebleu-22": 0.6996453247104196,
        "codebleu-151": 0.43320365105491543,
        "codebleu-108": 0.5626465160357125,
        "codebleu-8": 0.02601631438814079,
        "codebleu-7": 0.6638184645786562,
        "codebleu-23": 0.4309865925686488,
        "codebleu-55": 0.6678832455814856,
        "codebleu-59": 0.30886574776066317,
        "chrf-163": 0.3113236682595051,
        "chrf-28": 0.24178873262103276,
        "chrf-6": 0.028894089090516675,
        "chrf-189": 0.35264212351827623,
        "chrf-70": 0.3282545392179637,
        "chrf-62": 0.22183548234003428,
        "chrf-57": 0.30975849080101087,
        "chrf-35": 0.24861945644997246,
        "chrf-188": 0.34381230116293326,
        "chrf-26": 0.34118619895674407,
        "chrf-173": 0.4193638442560237,
        "chrf-139": 0.27087185357582005,
        "chrf-22": 0.3817322434872617,
        "chrf-151": 0.3028490895710449,
        "chrf-108": 0.2736967852873899,
        "chrf-8": 0.028894089090516675,
        "chrf-7": 0.41447452934341134,
        "chrf-23": 0.21998795218272568,
        "chrf-55": 0.35277237699335595,
        "chrf-59": 0.25591488064333295,
        "rougel-163": 0.43697478991596644,
        "rougel-28": 0.29179331306990886,
        "rougel-6": 0.04054054054054055,
        "rougel-189": 0.3873239436619718,
        "rougel-70": 0.3037974683544304,
        "rougel-62": 0.29411764705882354,
        "rougel-57": 0.44660194174757284,
        "rougel-35": 0.2523809523809524,
        "rougel-188": 0.5121951219512194,
        "rougel-26": 0.33333333333333337,
        "rougel-173": 0.4709302325581396,
        "rougel-139": 0.3443223443223443,
        "rougel-22": 0.3508771929824561,
        "rougel-151": 0.3529411764705882,
        "rougel-108": 0.3435582822085889,
        "rougel-8": 0.04054054054054055,
        "rougel-7": 0.4263157894736842,
        "rougel-23": 0.22504537205081665,
        "rougel-55": 0.3458333333333333,
        "rougel-59": 0.371900826446281,
        "meteor-163": 0.24814814814814817,
        "meteor-28": 0.2930550919800504,
        "meteor-6": 0.015873015873015872,
        "meteor-189": 0.34059142567284595,
        "meteor-70": 0.3600263989292043,
        "meteor-62": 0.34764756244616296,
        "meteor-57": 0.2790577760298974,
        "meteor-35": 0.2983355091383813,
        "meteor-188": 0.3755686224956645,
        "meteor-26": 0.39176792618638284,
        "meteor-173": 0.34928845867971775,
        "meteor-139": 0.32503537606128197,
        "meteor-22": 0.47670021367521365,
        "meteor-151": 0.3130718353456237,
        "meteor-108": 0.35017285020941186,
        "meteor-8": 0.015873015873015872,
        "meteor-7": 0.5088041571508954,
        "meteor-23": 0.303569184640008,
        "meteor-55": 0.4660938461630387,
        "meteor-59": 0.2420037889172126,
        "ruby-163": 0.3093525179856115,
        "ruby-28": 0.19999999999999996,
        "ruby-6": 0.021582733812949617,
        "ruby-189": 0.22758620689655173,
        "ruby-70": 0.17578125,
        "ruby-62": 0.15568862275449102,
        "ruby-57": 0.3093525179856115,
        "ruby-35": 0.1708185053380783,
        "ruby-188": 0.38848920863309355,
        "ruby-26": 0.2103004291845494,
        "ruby-173": 0.36585365853658536,
        "ruby-139": 0.1151079136690647,
        "ruby-22": 0.2192513368983957,
        "ruby-151": 0.18705035971223016,
        "ruby-108": 0.22459893048128343,
        "ruby-8": 0.021582733812949617,
        "ruby-7": 0.27385892116182575,
        "ruby-23": 0.13834951456310685,
        "ruby-55": 0.22287390029325516,
        "ruby-59": 0.19424460431654678,
        "codebertscore_f1-163": 0.830359697341919,
        "codebertscore_f3-163": 0.8392541408538818,
        "codebertscore_f1-28": 0.7576443552970886,
        "codebertscore_f3-28": 0.7396368980407715,
        "codebertscore_f1-6": 0.5533528923988342,
        "codebertscore_f3-6": 0.5165337324142456,
        "codebertscore_f1-189": 0.8191227912902832,
        "codebertscore_f3-189": 0.843120276927948,
        "codebertscore_f1-70": 0.7302659153938293,
        "codebertscore_f3-70": 0.7940055727958679,
        "codebertscore_f1-62": 0.7260326743125916,
        "codebertscore_f3-62": 0.7206857204437256,
        "codebertscore_f1-57": 0.8529692888259888,
        "codebertscore_f3-57": 0.8355832099914551,
        "codebertscore_f1-35": 0.722149670124054,
        "codebertscore_f3-35": 0.7137163877487183,
        "codebertscore_f1-188": 0.8506141901016235,
        "codebertscore_f3-188": 0.8507970571517944,
        "codebertscore_f1-26": 0.745905339717865,
        "codebertscore_f3-26": 0.7728907465934753,
        "codebertscore_f1-173": 0.8121334910392761,
        "codebertscore_f3-173": 0.8007376194000244,
        "codebertscore_f1-139": 0.7696389555931091,
        "codebertscore_f3-139": 0.7641109228134155,
        "codebertscore_f1-22": 0.7394298315048218,
        "codebertscore_f3-22": 0.7868040204048157,
        "codebertscore_f1-151": 0.806369960308075,
        "codebertscore_f3-151": 0.8249620795249939,
        "codebertscore_f1-108": 0.7605674266815186,
        "codebertscore_f3-108": 0.7863469123840332,
        "codebertscore_f1-8": 0.5557608604431152,
        "codebertscore_f3-8": 0.5168872475624084,
        "codebertscore_f1-7": 0.8137982487678528,
        "codebertscore_f3-7": 0.8553765416145325,
        "codebertscore_f1-23": 0.7215887904167175,
        "codebertscore_f3-23": 0.7206026911735535,
        "codebertscore_f1-55": 0.7430213093757629,
        "codebertscore_f3-55": 0.7888274788856506,
        "codebertscore_f1-59": 0.7900587320327759,
        "codebertscore_f3-59": 0.7985074520111084,
        "codebertscore_s_f1-163": 0.8303180932998657,
        "codebertscore_s_f3-163": 0.8402380347251892,
        "codebertscore_s_f1-28": 0.7556020021438599,
        "codebertscore_s_f3-28": 0.7337793111801147,
        "codebertscore_s_f1-6": 0.5330272912979126,
        "codebertscore_s_f3-6": 0.4924173355102539,
        "codebertscore_s_f1-189": 0.81199711561203,
        "codebertscore_s_f3-189": 0.8347247242927551,
        "codebertscore_s_f1-70": 0.7502283453941345,
        "codebertscore_s_f3-70": 0.8041133880615234,
        "codebertscore_s_f1-62": 0.724827229976654,
        "codebertscore_s_f3-62": 0.7175582051277161,
        "codebertscore_s_f1-57": 0.8558717370033264,
        "codebertscore_s_f3-57": 0.8359228372573853,
        "codebertscore_s_f1-35": 0.7330613732337952,
        "codebertscore_s_f3-35": 0.7191473245620728,
        "codebertscore_s_f1-188": 0.8478421568870544,
        "codebertscore_s_f3-188": 0.8470344543457031,
        "codebertscore_s_f1-26": 0.7699801325798035,
        "codebertscore_s_f3-26": 0.7827762365341187,
        "codebertscore_s_f1-173": 0.8151722550392151,
        "codebertscore_s_f3-173": 0.8046639561653137,
        "codebertscore_s_f1-139": 0.7658692598342896,
        "codebertscore_s_f3-139": 0.7547109723091125,
        "codebertscore_s_f1-22": 0.7680953741073608,
        "codebertscore_s_f3-22": 0.8128760457038879,
        "codebertscore_s_f1-151": 0.799967885017395,
        "codebertscore_s_f3-151": 0.8162616491317749,
        "codebertscore_s_f1-108": 0.7589209079742432,
        "codebertscore_s_f3-108": 0.7870227098464966,
        "codebertscore_s_f1-8": 0.5335631370544434,
        "codebertscore_s_f3-8": 0.49290981888771057,
        "codebertscore_s_f1-7": 0.829967200756073,
        "codebertscore_s_f3-7": 0.862649142742157,
        "codebertscore_s_f1-23": 0.7385640740394592,
        "codebertscore_s_f3-23": 0.729596734046936,
        "codebertscore_s_f1-55": 0.7741940021514893,
        "codebertscore_s_f3-55": 0.8112317323684692,
        "codebertscore_s_f1-59": 0.7795935869216919,
        "codebertscore_s_f3-59": 0.7871698141098022,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 2,
        "raw_gpt35_nsnr-28": "2",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "3 - The code correctly checks for the closest vowel between two consonants from the right side of the word. It also correctly returns an empty string if no such vowel is found. However, it does not take into account the requirement that the vowel must be between two consonants, and only checks for the closest vowel from the right side of the word.",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 1,
        "raw_gpt35_nswr-28": "1",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n",
        "snippet": [
            "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n"
        ],
        "simplified": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
        "task_id": "79",
        "165": "char* bstr = new char[33];\n  bstr[32] = '\\0';\n  int i = 0;\n  while (decimal != 0) {\n    bstr[i++] = decimal % 2 + '0';\n    decimal = decimal / 2;\n  }\n  for (int j = i; j < 32; j++) {\n    bstr[j] = '0';\n  }\n  std::string s = \"db\";\n  for (int j = i - 1; j >= 0; j--) {\n    s += bstr[j];\n  }\n  s += \"db\";\n  return s;",
        "grade-165": {
            "execution": 0
        },
        "28": "// convert the decimal number to binary format and return the string\n    // example: decimal_to_binary(15) should return \"db1111db\"\n    std::string binary_string = \"db\";\n    while (decimal) {\n        binary_string.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    std::reverse(binary_string.begin() + 2, binary_string.end() - 2);\n    return binary_string;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Given a decimal number, this program returns a string\n    // with the number converted to binary\n    // the string has a couple of extra characters at the beginning and at the end\n    // to help with the formatting\n    std::string final_string = \"db\";\n    long dividend;\n    long remainder;\n    std::string temp;\n    std::string bin_number;\n    dividend = decimal;\n    while (dividend != 0) {\n        remainder = dividend % 2;\n        temp = std::to_string(remainder);\n        bin_number.append(temp);\n        dividend = dividend / 2;\n    }\n    // we now have to reverse the bin_number\n    // otherwise, it would be the binary representation of the decimal\n    // number from the left to the right, not from the right to the left\n    std::reverse(bin_number.begin(), bin_number.end());\n    final_string.append(bin_number);\n    final_string.append(\"db\");\n    return final_string;",
        "grade-6": {
            "execution": 0
        },
        "193": "std::string bin;\n    while(decimal){\n        bin += std::to_string(decimal%2);\n        decimal /= 2;\n    }\n    return \"db\" + std::string(8-bin.size(), '0') + bin + \"db\";",
        "grade-193": {
            "execution": 0
        },
        "70": "// add your code here\n  std::string result = \"db\";\n  if (decimal == 0) {\n    result += \"0\";\n  } else {\n    int divisor = 2;\n    int remainder = decimal;\n    while (divisor <= decimal) {\n      divisor *= 2;\n    }\n    divisor /= 2;\n    while (divisor >= 1) {\n      if (remainder >= divisor) {\n        result += \"1\";\n        remainder -= divisor;\n      } else {\n        result += \"0\";\n      }\n      divisor /= 2;\n    }\n  }\n  result += \"db\";\n  return result;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::string binary = \"db\";\n    std::string add = \"\";\n    if (decimal == 0) {\n        binary += \"0\";\n    }\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n            add += \"0\";\n        } else {\n            add += \"1\";\n        }\n        decimal /= 2;\n    }\n    for (int i = add.length() - 1; i >= 0; i--) {\n        binary += add[i];\n    }\n    binary += \"db\";\n    return binary;",
        "grade-62": {
            "execution": 1
        },
        "57": "if (decimal == 0) {\n        return \"db0db\";\n    }\n    std::string result = \"db\";\n    while (decimal != 0) {\n        if (decimal % 2 == 0) {\n            result = \"0\" + result;\n        } else {\n            result = \"1\" + result;\n        }\n        decimal /= 2;\n    }\n    result += \"db\";\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return binary;",
        "grade-35": {
            "execution": 0
        },
        "192": "std::string result;\n  result.append(\"db\");\n  while (decimal > 0) {\n    long rem = decimal % 2;\n    result.push_back(rem == 0 ? '0' : '1');\n    decimal /= 2;\n  }\n  result.append(\"db\");\n  std::reverse(result.begin() + 2, result.end() - 2);\n  return result;",
        "grade-192": {
            "execution": 0
        },
        "26": "long rem;\n  std::string bin = \"db\";\n  std::string bin2 = \"db\";\n  while (decimal > 0) {\n    rem = decimal % 2;\n    bin += std::to_string(rem);\n    decimal /= 2;\n  }\n  for (int i = bin.length() - 2; i >= 2; i--) {\n    bin2 += bin[i];\n  }\n  return bin2;",
        "grade-26": {
            "execution": 0
        },
        "175": "assert(decimal >= 0);\n    if(decimal == 0) return \"db0db\";\n    std::string bin = \"db\";\n    bool found = false;\n    for(int i = 63; i >= 0; i--) {\n        if(decimal & 1 << i) {\n            bin += \"1\";\n            found = true;\n        } else if(found) {\n            bin += \"0\";\n        }\n    }\n    return bin + \"db\";",
        "grade-175": {
            "execution": 0
        },
        "140": "std::string result = \"db\";\n    while (decimal > 0) {\n        if (decimal%2 == 0) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n        decimal /= 2;\n    }\n    std::reverse(result.begin()+2, result.end());\n    result += \"db\";\n    return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::string binary = \"db\";\n\twhile (decimal != 0) {\n\t\tlong r = decimal % 2;\n\t\tbinary += std::to_string(r);\n\t\tdecimal /= 2;\n\t}\n\tbinary += \"db\";\n\treturn binary;",
        "grade-22": {
            "execution": 0
        },
        "152": "// your code goes here\n  std::string binary;\n  binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return binary;",
        "grade-152": {
            "execution": 1
        },
        "108": "std::string result = \"db\";\n    int num = decimal;\n    int remainder;\n    do {\n        remainder = num % 2;\n        num = num / 2;\n        if (remainder == 0) {\n            result = result + \"0\";\n        } else {\n            result = result + \"1\";\n        }\n    } while (num != 0);\n    std::reverse(result.begin() + 2, result.end());\n    result = result + \"db\";\n    return result;",
        "grade-108": {
            "execution": 1
        },
        "8": "// TODO: Implement me\n    std::bitset<32> binary(decimal);\n    std::string str = binary.to_string();\n    return \"db\" + str + \"db\";",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string str;\n\twhile (decimal > 0) {\n\t\tstr += std::to_string(decimal % 2);\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(str.begin(), str.end());\n\tstd::string s = \"db\";\n\ts += str;\n\ts += \"db\";\n\treturn s;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string res = \"db\";\n\twhile (decimal >= 1) {\n\t\tres.push_back(decimal % 2 ? '1' : '0');\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(res.begin() + 2, res.end());\n\tres.push_back('d');\n\tres.push_back('b');\n\treturn res;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string binary = \"db\";\n\tif (decimal == 0) {\n\t\tbinary += \"0\";\n\t}\n\telse {\n\t\twhile (decimal > 0) {\n\t\t\tbinary += std::to_string(decimal % 2);\n\t\t\tdecimal /= 2;\n\t\t}\n\t}\n\tbinary += \"db\";\n\tstd::reverse(binary.begin() + 2, binary.end() - 2);\n\treturn binary;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string result = \"db\";\n    if (decimal == 0) return result + \"0db\";\n    while (decimal != 0) {\n        result += (decimal % 2 == 0 ? \"0\" : \"1\");\n        decimal /= 2;\n    }\n    reverse(result.begin() + 2, result.end());\n    result += \"db\";\n    return result;",
        "grade-59": {
            "execution": 1
        },
        "bleu-165": 0.16302281456704873,
        "bleu-28": 0.15222296235485946,
        "bleu-6": 0.06268613955547363,
        "bleu-193": 0.2812808726560506,
        "bleu-70": 0.16812895441036052,
        "bleu-62": 0.2321235397467182,
        "bleu-57": 0.32543762378343305,
        "bleu-35": 0.2882384617576717,
        "bleu-192": 0.17758487546878343,
        "bleu-26": 0.2080384658253459,
        "bleu-175": 0.2431024269773766,
        "bleu-140": 0.2882384617576717,
        "bleu-22": 0.26197994764475024,
        "bleu-152": 0.3220228768704418,
        "bleu-108": 0.1601292066044679,
        "bleu-8": 0.1267324332127981,
        "bleu-7": 0.2804284350526631,
        "bleu-23": 0.17797872991184285,
        "bleu-55": 0.3132050083875689,
        "bleu-59": 0.3010881074101366,
        "codebleu-165": 0.5922251151337592,
        "codebleu-28": 0.5242803058207558,
        "codebleu-6": 0.49317073170731696,
        "codebleu-193": 0.48626391051173773,
        "codebleu-70": 0.5441734417344173,
        "codebleu-62": 0.6018318248210015,
        "codebleu-57": 0.6130593508696729,
        "codebleu-35": 0.5717585552591555,
        "codebleu-192": 0.5287418244996659,
        "codebleu-26": 0.5103095213874413,
        "codebleu-175": 0.5707859078590786,
        "codebleu-140": 0.5717585552591555,
        "codebleu-22": 0.40018141887994374,
        "codebleu-152": 0.6033664364050343,
        "codebleu-108": 0.63289972899729,
        "codebleu-8": 0.3127207945097623,
        "codebleu-7": 0.4855993233911233,
        "codebleu-23": 0.49008524400638936,
        "codebleu-55": 0.5868166879974311,
        "codebleu-59": 0.5825614926265497,
        "chrf-165": 0.40892825907907526,
        "chrf-28": 0.3887721872137388,
        "chrf-6": 0.24171731986373185,
        "chrf-193": 0.4261530196491137,
        "chrf-70": 0.3646350203544788,
        "chrf-62": 0.45449794963577633,
        "chrf-57": 0.5268334698429059,
        "chrf-35": 0.4102821509208157,
        "chrf-192": 0.3613154440771854,
        "chrf-26": 0.4185361593996349,
        "chrf-175": 0.4318840314583122,
        "chrf-140": 0.43037915836706625,
        "chrf-22": 0.43115520337013646,
        "chrf-152": 0.506435540579019,
        "chrf-108": 0.307410493942284,
        "chrf-8": 0.2757095238738215,
        "chrf-7": 0.447149976889634,
        "chrf-23": 0.3392587869829577,
        "chrf-55": 0.4951495863682549,
        "chrf-59": 0.5149080335086473,
        "rougel-165": 0.4042553191489362,
        "rougel-28": 0.3780487804878049,
        "rougel-6": 0.2248995983935743,
        "rougel-193": 0.4915254237288136,
        "rougel-70": 0.42696629213483145,
        "rougel-62": 0.4971751412429378,
        "rougel-57": 0.5547445255474452,
        "rougel-35": 0.4714285714285714,
        "rougel-192": 0.4246575342465754,
        "rougel-26": 0.43537414965986393,
        "rougel-175": 0.4516129032258065,
        "rougel-140": 0.4714285714285714,
        "rougel-22": 0.5225225225225225,
        "rougel-152": 0.5890410958904109,
        "rougel-108": 0.389937106918239,
        "rougel-8": 0.36000000000000004,
        "rougel-7": 0.5074626865671641,
        "rougel-23": 0.41134751773049644,
        "rougel-55": 0.5890410958904109,
        "rougel-59": 0.5833333333333334,
        "meteor-165": 0.5468486952861954,
        "meteor-28": 0.35931603773584914,
        "meteor-6": 0.37706505592988043,
        "meteor-193": 0.4242735635314655,
        "meteor-70": 0.5002124177316573,
        "meteor-62": 0.5172793308386529,
        "meteor-57": 0.6108374384236454,
        "meteor-35": 0.5023836067992011,
        "meteor-192": 0.42794032391813264,
        "meteor-26": 0.4648709241370215,
        "meteor-175": 0.46567034871128443,
        "meteor-140": 0.5023836067992011,
        "meteor-22": 0.5589996816542574,
        "meteor-152": 0.5165351941747574,
        "meteor-108": 0.462718397213907,
        "meteor-8": 0.3350575044789921,
        "meteor-7": 0.5157330129205663,
        "meteor-23": 0.364580484419862,
        "meteor-55": 0.4975060960535779,
        "meteor-59": 0.5182122564935066,
        "ruby-165": 0.2558139534883721,
        "ruby-28": 0.23809523809523814,
        "ruby-6": 0.13157894736842102,
        "ruby-193": 0.18644067796610164,
        "ruby-70": 0.2857142857142857,
        "ruby-62": 0.34745762711864403,
        "ruby-57": 0.34615384615384615,
        "ruby-35": 0.2962962962962963,
        "ruby-192": 0.24137931034482762,
        "ruby-26": 0.28409090909090906,
        "ruby-175": 0.29166666666666663,
        "ruby-140": 0.2962962962962963,
        "ruby-22": 0.35593220338983056,
        "ruby-152": 0.4367816091954023,
        "ruby-108": 0.24,
        "ruby-8": 0.23728813559322037,
        "ruby-7": 0.28,
        "ruby-23": 0.2682926829268293,
        "ruby-55": 0.4367816091954023,
        "ruby-59": 0.44705882352941173,
        "codebertscore_f1-165": 0.7716867327690125,
        "codebertscore_f3-165": 0.8216884136199951,
        "codebertscore_f1-28": 0.768275260925293,
        "codebertscore_f3-28": 0.8091408014297485,
        "codebertscore_f1-6": 0.6740006804466248,
        "codebertscore_f3-6": 0.741753876209259,
        "codebertscore_f1-193": 0.8444473147392273,
        "codebertscore_f3-193": 0.8546832203865051,
        "codebertscore_f1-70": 0.7669999599456787,
        "codebertscore_f3-70": 0.8052003383636475,
        "codebertscore_f1-62": 0.7912039756774902,
        "codebertscore_f3-62": 0.8262536525726318,
        "codebertscore_f1-57": 0.8635902404785156,
        "codebertscore_f3-57": 0.8720316290855408,
        "codebertscore_f1-35": 0.8355397582054138,
        "codebertscore_f3-35": 0.8587936758995056,
        "codebertscore_f1-192": 0.813612699508667,
        "codebertscore_f3-192": 0.8418598771095276,
        "codebertscore_f1-26": 0.8167347311973572,
        "codebertscore_f3-26": 0.8478553891181946,
        "codebertscore_f1-175": 0.7849977016448975,
        "codebertscore_f3-175": 0.809329628944397,
        "codebertscore_f1-140": 0.8298015594482422,
        "codebertscore_f3-140": 0.8520200848579407,
        "codebertscore_f1-22": 0.8556323647499084,
        "codebertscore_f3-22": 0.862116813659668,
        "codebertscore_f1-152": 0.8447579741477966,
        "codebertscore_f3-152": 0.8790404200553894,
        "codebertscore_f1-108": 0.7849835157394409,
        "codebertscore_f3-108": 0.8041512370109558,
        "codebertscore_f1-8": 0.7712365984916687,
        "codebertscore_f3-8": 0.7879435420036316,
        "codebertscore_f1-7": 0.8446794152259827,
        "codebertscore_f3-7": 0.8635531663894653,
        "codebertscore_f1-23": 0.8058121800422668,
        "codebertscore_f3-23": 0.8287786841392517,
        "codebertscore_f1-55": 0.8532469272613525,
        "codebertscore_f3-55": 0.8786811232566833,
        "codebertscore_f1-59": 0.8665762543678284,
        "codebertscore_f3-59": 0.8818892240524292,
        "codebertscore_s_f1-165": 0.7871828675270081,
        "codebertscore_s_f3-165": 0.8337720036506653,
        "codebertscore_s_f1-28": 0.7775001525878906,
        "codebertscore_s_f3-28": 0.8187866806983948,
        "codebertscore_s_f1-6": 0.6933190226554871,
        "codebertscore_s_f3-6": 0.7631068825721741,
        "codebertscore_s_f1-193": 0.8437350392341614,
        "codebertscore_s_f3-193": 0.8561704158782959,
        "codebertscore_s_f1-70": 0.7859705686569214,
        "codebertscore_s_f3-70": 0.826079785823822,
        "codebertscore_s_f1-62": 0.8105451464653015,
        "codebertscore_s_f3-62": 0.8430910706520081,
        "codebertscore_s_f1-57": 0.8759050965309143,
        "codebertscore_s_f3-57": 0.8828966021537781,
        "codebertscore_s_f1-35": 0.8387054204940796,
        "codebertscore_s_f3-35": 0.8631113171577454,
        "codebertscore_s_f1-192": 0.8149468302726746,
        "codebertscore_s_f3-192": 0.8442071676254272,
        "codebertscore_s_f1-26": 0.8225691914558411,
        "codebertscore_s_f3-26": 0.8545506596565247,
        "codebertscore_s_f1-175": 0.798426628112793,
        "codebertscore_s_f3-175": 0.8216797709465027,
        "codebertscore_s_f1-140": 0.833747386932373,
        "codebertscore_s_f3-140": 0.8575854301452637,
        "codebertscore_s_f1-22": 0.8595939874649048,
        "codebertscore_s_f3-22": 0.8658214807510376,
        "codebertscore_s_f1-152": 0.8488169312477112,
        "codebertscore_s_f3-152": 0.8822276592254639,
        "codebertscore_s_f1-108": 0.7938669323921204,
        "codebertscore_s_f3-108": 0.8142035603523254,
        "codebertscore_s_f1-8": 0.7602443695068359,
        "codebertscore_s_f3-8": 0.7795499563217163,
        "codebertscore_s_f1-7": 0.8464667797088623,
        "codebertscore_s_f3-7": 0.8654724359512329,
        "codebertscore_s_f1-23": 0.813370943069458,
        "codebertscore_s_f3-23": 0.8377518653869629,
        "codebertscore_s_f1-55": 0.8558725118637085,
        "codebertscore_s_f3-55": 0.8828121423721313,
        "codebertscore_s_f1-59": 0.8668192625045776,
        "codebertscore_s_f3-59": 0.8832909464836121,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) \u279e True\n// is_sorted([1, 2, 3, 4, 5]) \u279e True\n// is_sorted([1, 3, 2, 4, 5]) \u279e False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\nbool is_sorted(std::vector<long> lst) {\n",
        "snippet": [
            "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n"
        ],
        "simplified": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
        "task_id": "126",
        "198": "std::sort(lst.begin(), lst.end());\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] == lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-198": {
            "execution": 0
        },
        "29": "for (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-29": {
            "execution": 0
        },
        "6": "bool result = true;\n\tif (lst.size() < 2) {\n\t\treturn result;\n\t} else {\n\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-6": {
            "execution": 0
        },
        "80": "if (lst.size() > 1) {\n\t\tif ((lst[0] < lst[1]) || (lst[0] == lst[1])) {\n\t\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\t\tif ((lst[i] < lst[i + 1]) || (lst[i] == lst[i + 1])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn true;\n\t}",
        "grade-80": {
            "execution": 0
        },
        "70": "bool result = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
        "grade-70": {
            "execution": 0
        },
        "65": "if (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-65": {
            "execution": 0
        },
        "38": "long temp = 0;\n\tlong count = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] == temp)\n\t\t\tcount++;\n\t\telse {\n\t\t\ttemp = lst[i];\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count > 1)\n\t\t\treturn false;\n\t}\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-38": {
            "execution": 0
        },
        "27": "long temp = lst[0];\n\tfor (auto it = lst.begin() + 1; it != lst.end(); it++) {\n\t\tif (*it == temp) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (temp > *it) {\n\t\t\treturn false;\n\t\t}\n\t\ttemp = *it;\n\t}\n\treturn true;",
        "grade-27": {
            "execution": 0
        },
        "168": "long temp = 0;\n\tbool result = true;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = i + 1; j < lst.size(); j++) {\n\t\t\tif (lst[i] > lst[j]) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-168": {
            "execution": 0
        },
        "22": "// std::sort(lst.begin(), lst.end());\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-22": {
            "execution": 0
        },
        "182": "for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]) return false;\n    }\n    return true;",
        "grade-182": {
            "execution": 0
        },
        "129": "if (lst.size() == 1)\n\t\treturn true;\n\tfor (auto i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-129": {
            "execution": 0
        },
        "8": "std::vector<long> temp = lst;\n\tsort(temp.begin(), temp.end());\n\treturn lst == temp;",
        "grade-8": {
            "execution": 0
        },
        "7": "for (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-7": {
            "execution": 0
        },
        "23": "int len = lst.size();\n\tstd::vector<int> dup;\n\tfor (int i = 0; i < len; i++) {\n\t\tfor (int j = i + 1; j < len; j++) {\n\t\t\tif (lst[i] == lst[j]) {\n\t\t\t\tdup.push_back(i);\n\t\t\t}\n\t\t}\n\t}\n\tif (dup.size() > 1) {\n\t\treturn false;\n\t}\n\telse {\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tif (lst[i] > lst[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "grade-23": {
            "execution": 0
        },
        "61": "std::vector<long> l(lst);\n\tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != l[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-61": {
            "execution": 0
        },
        "67": "if (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-67": {
            "execution": 0
        },
        "157": "for (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-157": {
            "execution": 0
        },
        "185": "if(lst.size() == 1){\n        return true;\n    }\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-185": {
            "execution": 0
        },
        "173": "if(lst.size()==1) return true;\n  if(lst.size()==2){\n    if(lst[0]<=lst[1]){\n      return true;\n    }else{\n      return false;\n    }\n  }\n  for(int i=0;i<lst.size()-1;i++){\n    if(lst[i]>lst[i+1]){\n      return false;\n    }\n  }\n  return true;",
        "grade-173": {
            "execution": 0
        },
        "bleu-198": 0.4335172146268774,
        "bleu-29": 0.33024011447472346,
        "bleu-6": 0.3884996276511172,
        "bleu-80": 0.38110532069667763,
        "bleu-70": 0.32153303022893653,
        "bleu-65": 0.40169333272719315,
        "bleu-38": 0.41765939761618975,
        "bleu-27": 0.2124787643520771,
        "bleu-168": 0.3629563872919963,
        "bleu-22": 0.38197738397057895,
        "bleu-182": 0.33408619229178105,
        "bleu-129": 0.4113724040898921,
        "bleu-8": 0.013497538609282942,
        "bleu-7": 0.33468119464372975,
        "bleu-23": 0.2912298680182936,
        "bleu-61": 0.38647652859131293,
        "bleu-67": 0.4591751694203054,
        "bleu-157": 0.3534810345277571,
        "bleu-185": 0.40169333272719315,
        "bleu-173": 0.38891509373587047,
        "codebleu-198": 0.4816683738446575,
        "codebleu-29": 0.38649144756078485,
        "codebleu-6": 0.5207251799834324,
        "codebleu-80": 0.6399849574039906,
        "codebleu-70": 0.43889434098872687,
        "codebleu-65": 0.5086608880094818,
        "codebleu-38": 0.6375050906994268,
        "codebleu-27": 0.45752935398382627,
        "codebleu-168": 0.5347521027721645,
        "codebleu-22": 0.4970877527757626,
        "codebleu-182": 0.3951214368763536,
        "codebleu-129": 0.5001835416500637,
        "codebleu-8": 0.18553709026156298,
        "codebleu-7": 0.40536516843495257,
        "codebleu-23": 0.6162106225404765,
        "codebleu-61": 0.5270085613566234,
        "codebleu-67": 0.5577107508787004,
        "codebleu-157": 0.39197793358900346,
        "codebleu-185": 0.5086608880094818,
        "codebleu-173": 0.6089576068348249,
        "chrf-198": 0.5061023282296742,
        "chrf-29": 0.4640373858777518,
        "chrf-6": 0.43950472781932926,
        "chrf-80": 0.6030966046106461,
        "chrf-70": 0.3977646765833614,
        "chrf-65": 0.5027370770347188,
        "chrf-38": 0.602835889678051,
        "chrf-27": 0.3922705980217933,
        "chrf-168": 0.4096630749194262,
        "chrf-22": 0.47193698329544115,
        "chrf-182": 0.48994653346326555,
        "chrf-129": 0.5113178627148278,
        "chrf-8": 0.1181329619114282,
        "chrf-7": 0.46726371483355483,
        "chrf-23": 0.5326918058535953,
        "chrf-61": 0.46906088425978715,
        "chrf-67": 0.5365125312673065,
        "chrf-157": 0.4990425302355763,
        "chrf-185": 0.5027370770347188,
        "chrf-173": 0.562310352679086,
        "rougel-198": 0.5571428571428572,
        "rougel-29": 0.639344262295082,
        "rougel-6": 0.5066666666666667,
        "rougel-80": 0.53,
        "rougel-70": 0.564885496183206,
        "rougel-65": 0.5611510791366907,
        "rougel-38": 0.5925925925925926,
        "rougel-27": 0.4189189189189189,
        "rougel-168": 0.5161290322580645,
        "rougel-22": 0.5454545454545454,
        "rougel-182": 0.6446280991735538,
        "rougel-129": 0.5735294117647058,
        "rougel-8": 0.2181818181818182,
        "rougel-7": 0.6451612903225806,
        "rougel-23": 0.47393364928909953,
        "rougel-61": 0.4933333333333333,
        "rougel-67": 0.5063291139240506,
        "rougel-157": 0.6557377049180326,
        "rougel-185": 0.5611510791366907,
        "rougel-173": 0.5517241379310345,
        "meteor-198": 0.518586882292976,
        "meteor-29": 0.47111862114501607,
        "meteor-6": 0.46832714095683686,
        "meteor-80": 0.6923975825416052,
        "meteor-70": 0.4361180285698648,
        "meteor-65": 0.530167094720601,
        "meteor-38": 0.6423724852084787,
        "meteor-27": 0.4048370541837606,
        "meteor-168": 0.4097801668806162,
        "meteor-22": 0.49678835485742506,
        "meteor-182": 0.4626919898270843,
        "meteor-129": 0.5450657894736842,
        "meteor-8": 0.14193746425808187,
        "meteor-7": 0.48669536647935147,
        "meteor-23": 0.6404903801863728,
        "meteor-61": 0.45913682277318635,
        "meteor-67": 0.5702202154792853,
        "meteor-157": 0.47959487637771814,
        "meteor-185": 0.530167094720601,
        "meteor-173": 0.6291616615503256,
        "ruby-198": 0.33333333333333337,
        "ruby-29": 0.47435897435897434,
        "ruby-6": 0.2692307692307693,
        "ruby-80": 0.3688524590163934,
        "ruby-70": 0.3589743589743589,
        "ruby-65": 0.3205128205128205,
        "ruby-38": 0.4504504504504504,
        "ruby-27": 0.15384615384615385,
        "ruby-168": 0.2948717948717948,
        "ruby-22": 0.28205128205128205,
        "ruby-182": 0.47435897435897434,
        "ruby-129": 0.34615384615384615,
        "ruby-8": 0.11538461538461542,
        "ruby-7": 0.46153846153846156,
        "ruby-23": 0.3308270676691729,
        "ruby-61": 0.2692307692307693,
        "ruby-67": 0.30000000000000004,
        "ruby-157": 0.4871794871794872,
        "ruby-185": 0.3205128205128205,
        "ruby-173": 0.41666666666666663,
        "codebertscore_f1-198": 0.8852162957191467,
        "codebertscore_f3-198": 0.8872353434562683,
        "codebertscore_f1-29": 0.8979105949401855,
        "codebertscore_f3-29": 0.8892520666122437,
        "codebertscore_f1-6": 0.8673443794250488,
        "codebertscore_f3-6": 0.879047155380249,
        "codebertscore_f1-80": 0.8604199886322021,
        "codebertscore_f3-80": 0.8707266449928284,
        "codebertscore_f1-70": 0.8729844689369202,
        "codebertscore_f3-70": 0.8780832290649414,
        "codebertscore_f1-65": 0.9004103541374207,
        "codebertscore_f3-65": 0.896199107170105,
        "codebertscore_f1-38": 0.8529132008552551,
        "codebertscore_f3-38": 0.8659629821777344,
        "codebertscore_f1-27": 0.8094102144241333,
        "codebertscore_f3-27": 0.8126720786094666,
        "codebertscore_f1-168": 0.8517447113990784,
        "codebertscore_f3-168": 0.8570077419281006,
        "codebertscore_f1-22": 0.8802289366722107,
        "codebertscore_f3-22": 0.8881183862686157,
        "codebertscore_f1-182": 0.9135569334030151,
        "codebertscore_f3-182": 0.9021309614181519,
        "codebertscore_f1-129": 0.8939369916915894,
        "codebertscore_f3-129": 0.8905326128005981,
        "codebertscore_f1-8": 0.7447740435600281,
        "codebertscore_f3-8": 0.7307354211807251,
        "codebertscore_f1-7": 0.9039579033851624,
        "codebertscore_f3-7": 0.8938726782798767,
        "codebertscore_f1-23": 0.8308520913124084,
        "codebertscore_f3-23": 0.8481711149215698,
        "codebertscore_f1-61": 0.8565401434898376,
        "codebertscore_f3-61": 0.8562753796577454,
        "codebertscore_f1-67": 0.8866145610809326,
        "codebertscore_f3-67": 0.8910154700279236,
        "codebertscore_f1-157": 0.9035512208938599,
        "codebertscore_f3-157": 0.89359450340271,
        "codebertscore_f1-185": 0.8936434984207153,
        "codebertscore_f3-185": 0.8904079794883728,
        "codebertscore_f1-173": 0.8898985981941223,
        "codebertscore_f3-173": 0.8899919390678406,
        "codebertscore_s_f1-198": 0.9702001810073853,
        "codebertscore_s_f3-198": 0.9661868810653687,
        "codebertscore_s_f1-29": 0.9726676940917969,
        "codebertscore_s_f3-29": 0.9648273587226868,
        "codebertscore_s_f1-6": 0.9645624756813049,
        "codebertscore_s_f3-6": 0.9650158882141113,
        "codebertscore_s_f1-80": 0.9551165699958801,
        "codebertscore_s_f3-80": 0.9617698192596436,
        "codebertscore_s_f1-70": 0.9674373865127563,
        "codebertscore_s_f3-70": 0.9636907577514648,
        "codebertscore_s_f1-65": 0.9729472398757935,
        "codebertscore_s_f3-65": 0.968604326248169,
        "codebertscore_s_f1-38": 0.9540992379188538,
        "codebertscore_s_f3-38": 0.9609282612800598,
        "codebertscore_s_f1-27": 0.9489923715591431,
        "codebertscore_s_f3-27": 0.9464998245239258,
        "codebertscore_s_f1-168": 0.9590924978256226,
        "codebertscore_s_f3-168": 0.958139181137085,
        "codebertscore_s_f1-22": 0.9702272415161133,
        "codebertscore_s_f3-22": 0.9678249359130859,
        "codebertscore_s_f1-182": 0.9762795567512512,
        "codebertscore_s_f3-182": 0.96906977891922,
        "codebertscore_s_f1-129": 0.9716827273368835,
        "codebertscore_s_f3-129": 0.9673396944999695,
        "codebertscore_s_f1-8": 0.9439067244529724,
        "codebertscore_s_f3-8": 0.9203958511352539,
        "codebertscore_s_f1-7": 0.9739152193069458,
        "codebertscore_s_f3-7": 0.9664233922958374,
        "codebertscore_s_f1-23": 0.9441314935684204,
        "codebertscore_s_f3-23": 0.9546610116958618,
        "codebertscore_s_f1-61": 0.964768648147583,
        "codebertscore_s_f3-61": 0.9571850299835205,
        "codebertscore_s_f1-67": 0.9691839218139648,
        "codebertscore_s_f3-67": 0.968070387840271,
        "codebertscore_s_f1-157": 0.9738418459892273,
        "codebertscore_s_f3-157": 0.9662793874740601,
        "codebertscore_s_f1-185": 0.9712948203086853,
        "codebertscore_s_f3-185": 0.9672022461891174,
        "codebertscore_s_f1-173": 0.9645130038261414,
        "codebertscore_s_f3-173": 0.9656692147254944,
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-168": 3,
        "raw_gpt35_nsnr-168": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-129": 3,
        "raw_gpt35_nsnr-129": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-157": 3,
        "raw_gpt35_nsnr-157": "3",
        "gpt35_nsnr-185": 3,
        "raw_gpt35_nsnr-185": "3",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-80": 2,
        "raw_gpt35_nswr-80": "2",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-168": 2,
        "raw_gpt35_nswr-168": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-129": 3,
        "raw_gpt35_nswr-129": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nstd::vector<std::string> by_length(std::vector<long> arr) {\n",
        "snippet": [
            "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n"
        ],
        "simplified": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
        "task_id": "105",
        "163": "//sort arr\n    //reverse arr\n    //match each number to its string name\n    std::vector<std::string> result;\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < 1 || arr[i] > 9){\n            continue;\n        }\n        switch(arr[i]){\n            case 1: result.push_back(\"One\"); break;\n            case 2: result.push_back(\"Two\"); break;\n            case 3: result.push_back(\"Three\"); break;\n            case 4: result.push_back(\"Four\"); break;\n            case 5: result.push_back(\"Five\"); break;\n            case 6: result.push_back(\"Six\"); break;\n            case 7: result.push_back(\"Seven\"); break;\n            case 8: result.push_back(\"Eight\"); break;\n            case 9: result.push_back(\"Nine\"); break;\n        }\n    }\n    return result;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::vector<std::string> result;\n\tsort(arr.begin(), arr.end());\n\treverse(arr.begin(), arr.end());\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == 1) {\n\t\t\tresult.push_back(\"One\");\n\t\t}\n\t\telse if (arr[i] == 2) {\n\t\t\tresult.push_back(\"Two\");\n\t\t}\n\t\telse if (arr[i] == 3) {\n\t\t\tresult.push_back(\"Three\");\n\t\t}\n\t\telse if (arr[i] == 4) {\n\t\t\tresult.push_back(\"Four\");\n\t\t}\n\t\telse if (arr[i] == 5) {\n\t\t\tresult.push_back(\"Five\");\n\t\t}\n\t\telse if (arr[i] == 6) {\n\t\t\tresult.push_back(\"Six\");\n\t\t}\n\t\telse if (arr[i] == 7) {\n\t\t\tresult.push_back(\"Seven\");\n\t\t}\n\t\telse if (arr[i] == 8) {\n\t\t\tresult.push_back(\"Eight\");\n\t\t}\n\t\telse if (arr[i] == 9) {\n\t\t\tresult.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::map<int, std::string> map = {\n    {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n  };\n  \n  std::vector<std::string> results;\n  \n  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n  \n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      results.push_back(map[arr[i]]);\n    }\n  }\n  \n  return results;",
        "grade-6": {
            "execution": 1
        },
        "190": "int len = arr.size();\n  std::vector<std::string> names(len);\n  int one = 1;\n  int two = 2;\n  int three = 3;\n  int four = 4;\n  int five = 5;\n  int six = 6;\n  int seven = 7;\n  int eight = 8;\n  int nine = 9;\n  for (int i = 0; i < len; i++) {\n    if (arr[i] == one) {\n      names[i] = \"One\";\n    }\n    else if (arr[i] == two) {\n      names[i] = \"Two\";\n    }\n    else if (arr[i] == three) {\n      names[i] = \"Three\";\n    }\n    else if (arr[i] == four) {\n      names[i] = \"Four\";\n    }\n    else if (arr[i] == five) {\n      names[i] = \"Five\";\n    }\n    else if (arr[i] == six) {\n      names[i] = \"Six\";\n    }\n    else if (arr[i] == seven) {\n      names[i] = \"Seven\";\n    }\n    else if (arr[i] == eight) {\n      names[i] = \"Eight\";\n    }\n    else if (arr[i] == nine) {\n      names[i] = \"Nine\";\n    }\n  }\n  return names;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<std::string> res;\n  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n  for (int i = 0; i < arr.size(); i++) {\n    switch (arr[i]) {\n      case 1:\n        res.push_back(\"One\");\n        break;\n      case 2:\n        res.push_back(\"Two\");\n        break;\n      case 3:\n        res.push_back(\"Three\");\n        break;\n      case 4:\n        res.push_back(\"Four\");\n        break;\n      case 5:\n        res.push_back(\"Five\");\n        break;\n      case 6:\n        res.push_back(\"Six\");\n        break;\n      case 7:\n        res.push_back(\"Seven\");\n        break;\n      case 8:\n        res.push_back(\"Eight\");\n        break;\n      case 9:\n        res.push_back(\"Nine\");\n        break;\n      default:\n        break;\n    }\n  }\n  return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<std::string> result;\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (long i : arr) {\n        switch (i) {\n            case 1:\n                result.push_back(\"One\");\n                break;\n            case 2:\n                result.push_back(\"Two\");\n                break;\n            case 3:\n                result.push_back(\"Three\");\n                break;\n            case 4:\n                result.push_back(\"Four\");\n                break;\n            case 5:\n                result.push_back(\"Five\");\n                break;\n            case 6:\n                result.push_back(\"Six\");\n                break;\n            case 7:\n                result.push_back(\"Seven\");\n                break;\n            case 8:\n                result.push_back(\"Eight\");\n                break;\n            case 9:\n                result.push_back(\"Nine\");\n                break;\n            default:\n                break;\n        }\n    }\n    return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> result;\n  std::sort(arr.begin(), arr.end());\n  for (auto &&val : arr) {\n    switch (val) {\n      case 1:\n        result.push_back(\"One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n        break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n      case 4:\n        result.push_back(\"Four\");\n        break;\n      case 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n        result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n      default:\n        break;\n    }\n  }\n  return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<std::string> names{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<std::string> res{};\n    for (auto i : arr) {\n        res.push_back(names[i-1]);\n    }\n    return res;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<std::string> result;\n    std::map<long, std::string> converter;\n    converter[1] = \"One\";\n    converter[2] = \"Two\";\n    converter[3] = \"Three\";\n    converter[4] = \"Four\";\n    converter[5] = \"Five\";\n    converter[6] = \"Six\";\n    converter[7] = \"Seven\";\n    converter[8] = \"Eight\";\n    converter[9] = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(converter[arr[i]]);\n        }\n    }\n    return result;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::vector<std::string> result;\n\tlong len = arr.size();\n\tlong one[] = {1,1,1,1,1,1,1,1,1,1};\n\tlong two[] = {1,1,1,1,1,1,1,1,1,2};\n\tlong three[] = {1,1,1,1,1,1,1,1,1,3};\n\tlong four[] = {1,1,1,1,1,1,1,1,1,4};\n\tlong five[] = {1,1,1,1,1,1,1,1,1,5};\n\tlong six[] = {1,1,1,1,1,1,1,1,1,6};\n\tlong seven[] = {1,1,1,1,1,1,1,1,1,7};\n\tlong eight[] = {1,1,1,1,1,1,1,1,1,8};\n\tlong nine[] = {1,1,1,1,1,1,1,1,1,9};\n\tif(len==0){\n\t\treturn result;\n\t}\n\tfor(long i=0;i<len;i++){\n\t\tif(arr[i]==1){\n\t\t\tif(std::find(result.begin(), result.end(), \"One\") != result.end()){\n\t\t\t\t// cout<<\"One\"<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// cout<<\"One\"<<endl;\n\t\t\t\tresult.push_back(\"One\");\n\t\t\t}\n\t\t}\n\t\telse if(arr[i]==2){\n\t\t\tif(std::find(result.begin(), result.end(), \"Two\") != result.end()){\n\t\t\t\t// cout<<\"Two\"<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// cout<<\"Two\"<<endl;\n\t\t\t\tresult.push_back(\"Two\");\n\t\t\t}",
        "grade-26": {
            "execution": 0
        },
        "174": "assert(false);",
        "grade-174": {
            "execution": 0
        },
        "139": "std::vector<std::string> result;\n\t\n\tstd::map<long, std::string> m;\n\tm[1] = \"One\";\n\tm[2] = \"Two\";\n\tm[3] = \"Three\";\n\tm[4] = \"Four\";\n\tm[5] = \"Five\";\n\tm[6] = \"Six\";\n\tm[7] = \"Seven\";\n\tm[8] = \"Eight\";\n\tm[9] = \"Nine\";\n\t\n\tstd::sort(arr.begin(), arr.end());\n\t\n\tstd::reverse(arr.begin(), arr.end());\n\t\n\tfor(auto i : arr) {\n\t\tif(i >= 1 && i <= 9) {\n\t\t\tresult.push_back(m[i]);\n\t\t}\n\t}\n\t\n\treturn result;",
        "grade-139": {
            "execution": 1
        },
        "22": "// your code here\n    std::vector<std::string> arr1;\n    for(int i=0;i<arr.size();i++)\n    {\n      if(arr[i]==1)\n        arr1.push_back(\"One\");\n      else if(arr[i]==2)\n        arr1.push_back(\"Two\");\n      else if(arr[i]==3)\n        arr1.push_back(\"Three\");\n      else if(arr[i]==4)\n        arr1.push_back(\"Four\");\n      else if(arr[i]==5)\n        arr1.push_back(\"Five\");\n      else if(arr[i]==6)\n        arr1.push_back(\"Six\");\n      else if(arr[i]==7)\n        arr1.push_back(\"Seven\");\n      else if(arr[i]==8)\n        arr1.push_back(\"Eight\");\n      else if(arr[i]==9)\n        arr1.push_back(\"Nine\");\n      else\n        continue;\n    }\n    return arr1;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<std::string> result;\n    std::string number_string[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (long i = 0; i < arr.size(); i++) {\n        if ((arr[i] > 0) && (arr[i] < 10)) {\n            result.push_back(number_string[arr[i]]);\n        }\n    }\n    return result;",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> res;\n    if(arr.size()==0)return res;\n    for(auto i:arr){\n        switch(i){\n            case 1:res.push_back(\"One\");break;\n            case 2:res.push_back(\"Two\");break;\n            case 3:res.push_back(\"Three\");break;\n            case 4:res.push_back(\"Four\");break;\n            case 5:res.push_back(\"Five\");break;\n            case 6:res.push_back(\"Six\");break;\n            case 7:res.push_back(\"Seven\");break;\n            case 8:res.push_back(\"Eight\");break;\n            case 9:res.push_back(\"Nine\");break;\n        }\n    }\n    return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "//Write your code here\n\t// if arr size =0 return empty vector\n\tif (arr.size() == 0) {\n\t\treturn {};\n\t}\n\t// if arr size =1\n\tif (arr.size() == 1) {\n\t\t// if contains 0 1 2 3 4 5 6 7 8 9 return the word\n\t\tif (arr[0] == 0 || arr[0] == 1 || arr[0] == 2 || arr[0] == 3 || arr[0] == 4 || arr[0] == 5 || arr[0] == 6 || arr[0] == 7 || arr[0] == 8 || arr[0] == 9) {\n\t\t\treturn { getNumberString(arr[0]) };\n\t\t}\n\t\t// if contains 0 1 2 3 4 5 6 7 8 9\n\t\telse {\n\t\t\treturn {};\n\t\t}\n\t}\n\t// sort vector\n\tsort(arr.begin(), arr.end());\n\t// reverse vector\n\treverse(arr.begin(), arr.end());\n\t// init string vector\n\tstd::vector<std::string> words;\n\t// loop until size\n\tfor (size_t i = 0; i < arr.size(); i++) {\n\t\t// if contains 0 1 2 3 4 5 6 7 8 9\n\t\tif (arr[i] == 0 || arr[i] == 1 || arr[i] == 2 || arr[i] == 3 || arr[i] == 4 || arr[i] == 5 || arr[i] == 6 || arr[i] == 7 || arr[i] == 8 || arr[i] == 9) {\n\t\t\t// add string word to the vector\n\t\t\twords.push_back(getNumberString(arr[i]));\n\t\t}\n\t}\n\t// return vector\n\treturn words;",
        "grade-8": {
            "execution": 0
        },
        "7": "int i =0;\n  std::vector<std::string> res ={};\n  for(i =0; i<arr.size();i++){\n    if(arr[i] == 1) res.push_back(\"One\");\n    else if(arr[i] == 2) res.push_back(\"Two\");\n    else if(arr[i] == 3) res.push_back(\"Three\");\n    else if(arr[i] == 4) res.push_back(\"Four\");\n    else if(arr[i] == 5) res.push_back(\"Five\");\n    else if(arr[i] == 6) res.push_back(\"Six\");\n    else if(arr[i] == 7) res.push_back(\"Seven\");\n    else if(arr[i] == 8) res.push_back(\"Eight\");\n    else if(arr[i] == 9) res.push_back(\"Nine\");\n  }\n  std::sort(res.begin(), res.end(), [](std::string &s1, std::string &s2) { return s1.size() < s2.size(); });\n  return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::sort(arr.begin(), arr.end());\n\tstd::reverse(arr.begin(), arr.end());\n\tstd::vector<std::string> res;\n\tstd::map<long, std::string> m{ {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"} };\n\tfor (auto x : arr) {\n\t\tif (x > 0 && x < 10) {\n\t\t\tres.push_back(m[x]);\n\t\t}\n\t}\n\treturn res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<std::string> result;\n    // sort the array\n    std::sort(arr.begin(), arr.end());\n    // reverse the array\n    std::reverse(arr.begin(), arr.end());\n    // replace each digit with its corresponding word\n    for (long i = 0; i < arr.size(); i++) {\n        switch (arr[i]) {\n            case 1: result.push_back(\"One\");\n                    break;\n            case 2: result.push_back(\"Two\");\n                    break;\n            case 3: result.push_back(\"Three\");\n                    break;\n            case 4: result.push_back(\"Four\");\n                    break;\n            case 5: result.push_back(\"Five\");\n                    break;\n            case 6: result.push_back(\"Six\");\n                    break;\n            case 7: result.push_back(\"Seven\");\n                    break;\n            case 8: result.push_back(\"Eight\");\n                    break;\n            case 9: result.push_back(\"Nine\");\n                    break;\n            default: break;\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::sort(arr.begin(), arr.end());\n\tstd::reverse(arr.begin(), arr.end());\n\tstd::vector<std::string> final;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == 1) {\n\t\t\tfinal.push_back(\"One\");\n\t\t}\n\t\telse if (arr[i] == 2) {\n\t\t\tfinal.push_back(\"Two\");\n\t\t}\n\t\telse if (arr[i] == 3) {\n\t\t\tfinal.push_back(\"Three\");\n\t\t}\n\t\telse if (arr[i] == 4) {\n\t\t\tfinal.push_back(\"Four\");\n\t\t}\n\t\telse if (arr[i] == 5) {\n\t\t\tfinal.push_back(\"Five\");\n\t\t}\n\t\telse if (arr[i] == 6) {\n\t\t\tfinal.push_back(\"Six\");\n\t\t}\n\t\telse if (arr[i] == 7) {\n\t\t\tfinal.push_back(\"Seven\");\n\t\t}\n\t\telse if (arr[i] == 8) {\n\t\t\tfinal.push_back(\"Eight\");\n\t\t}\n\t\telse if (arr[i] == 9) {\n\t\t\tfinal.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn final;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.21561430791284827,
        "bleu-28": 0.20811670051680375,
        "bleu-6": 0.6319616753787202,
        "bleu-190": 0.132334404744778,
        "bleu-70": 0.21006192670217455,
        "bleu-62": 0.16514623692326377,
        "bleu-57": 0.17410897458761176,
        "bleu-35": 0.128654880352366,
        "bleu-189": 0.3130674923774943,
        "bleu-26": 0.08651147822474387,
        "bleu-174": 7.383747041457351e-16,
        "bleu-139": 0.2210620545396182,
        "bleu-22": 0.16437204397361665,
        "bleu-151": 0.3684573242009641,
        "bleu-108": 0.10179491142772056,
        "bleu-8": 0.10139972418515991,
        "bleu-7": 0.16227225892341124,
        "bleu-23": 0.5807483306255572,
        "bleu-55": 0.17651874263790124,
        "bleu-59": 0.19937490456834428,
        "codebleu-163": 0.5010526611699108,
        "codebleu-28": 0.5475044798124323,
        "codebleu-6": 0.71389650309877,
        "codebleu-190": 0.5054505776553647,
        "codebleu-70": 0.44772162833701445,
        "codebleu-62": 0.4107423980421787,
        "codebleu-57": 0.4006609811216212,
        "codebleu-35": 0.2608760742686624,
        "codebleu-189": 0.5322443833165429,
        "codebleu-26": 0.6543444339916803,
        "codebleu-174": 0.012121212121214685,
        "codebleu-139": 0.497924482068572,
        "codebleu-22": 0.4419485020964679,
        "codebleu-151": 0.5252859620329909,
        "codebleu-108": 0.3831983027340186,
        "codebleu-8": 0.47956687263411873,
        "codebleu-7": 0.5050231545758698,
        "codebleu-23": 0.6371391373442791,
        "codebleu-55": 0.4442416599287055,
        "codebleu-59": 0.5439296406445735,
        "chrf-163": 0.3798619583818204,
        "chrf-28": 0.38705264864326044,
        "chrf-6": 0.6965066663092682,
        "chrf-190": 0.3077898059896033,
        "chrf-70": 0.35498551478219886,
        "chrf-62": 0.31151690615583144,
        "chrf-57": 0.3047358166974056,
        "chrf-35": 0.3285794952492242,
        "chrf-189": 0.44898867468311027,
        "chrf-26": 0.28384284698939455,
        "chrf-174": 0.013294308404371107,
        "chrf-139": 0.39611384544310213,
        "chrf-22": 0.3235232335248179,
        "chrf-151": 0.48300626841439387,
        "chrf-108": 0.2716405184793505,
        "chrf-8": 0.27629016375302745,
        "chrf-7": 0.36111132114569344,
        "chrf-23": 0.6116437215868807,
        "chrf-55": 0.32795088499116143,
        "chrf-59": 0.38062633289091286,
        "rougel-163": 0.26378896882494,
        "rougel-28": 0.3126436781609195,
        "rougel-6": 0.7472527472527473,
        "rougel-190": 0.27510917030567683,
        "rougel-70": 0.2610966057441253,
        "rougel-62": 0.2717391304347826,
        "rougel-57": 0.2784090909090909,
        "rougel-35": 0.48648648648648646,
        "rougel-189": 0.5415549597855228,
        "rougel-26": 0.2253968253968254,
        "rougel-174": 0.03389830508474576,
        "rougel-139": 0.48863636363636365,
        "rougel-22": 0.3139240506329114,
        "rougel-151": 0.6000000000000001,
        "rougel-108": 0.29239766081871343,
        "rougel-8": 0.25894378194207834,
        "rougel-7": 0.30561797752808983,
        "rougel-23": 0.5672514619883041,
        "rougel-55": 0.24875621890547261,
        "rougel-59": 0.30839002267573695,
        "meteor-163": 0.46563993529171904,
        "meteor-28": 0.5331734331321611,
        "meteor-6": 0.7925058517090718,
        "meteor-190": 0.4679090932180787,
        "meteor-70": 0.4192552638168679,
        "meteor-62": 0.3751378227131832,
        "meteor-57": 0.36195593877405685,
        "meteor-35": 0.351754850286429,
        "meteor-189": 0.6395894655852727,
        "meteor-26": 0.41629081010935454,
        "meteor-174": 0.009658725048293624,
        "meteor-139": 0.5175551395990585,
        "meteor-22": 0.46662876707242285,
        "meteor-151": 0.5911653708776741,
        "meteor-108": 0.3707931068317583,
        "meteor-8": 0.352466784362256,
        "meteor-7": 0.5181420643736194,
        "meteor-23": 0.6056114542122458,
        "meteor-55": 0.4115360970097261,
        "meteor-59": 0.5314128164019504,
        "ruby-163": 0.12653061224489792,
        "ruby-28": 0.2053231939163498,
        "ruby-6": 0.6197916666666667,
        "ruby-190": 0.17132867132867136,
        "ruby-70": 0.14218009478672988,
        "ruby-62": 0.12755102040816324,
        "ruby-57": 0.09999999999999998,
        "ruby-35": 0.32558139534883723,
        "ruby-189": 0.45273631840796025,
        "ruby-26": 0.14628820960698685,
        "ruby-174": 0.01744186046511631,
        "ruby-139": 0.37777777777777777,
        "ruby-22": 0.18385650224215244,
        "ruby-151": 0.40697674418604646,
        "ruby-108": 0.08139534883720934,
        "ruby-8": 0.17590361445783131,
        "ruby-7": 0.17582417582417587,
        "ruby-23": 0.2732558139534884,
        "ruby-55": 0.13478260869565217,
        "ruby-59": 0.19702602230483268,
        "codebertscore_f1-163": 0.7794923186302185,
        "codebertscore_f3-163": 0.8052164912223816,
        "codebertscore_f1-28": 0.8107315897941589,
        "codebertscore_f3-28": 0.8058251142501831,
        "codebertscore_f1-6": 0.8921839594841003,
        "codebertscore_f3-6": 0.8893625736236572,
        "codebertscore_f1-190": 0.7836865186691284,
        "codebertscore_f3-190": 0.7887135148048401,
        "codebertscore_f1-70": 0.7725775837898254,
        "codebertscore_f3-70": 0.7872627377510071,
        "codebertscore_f1-62": 0.7401311993598938,
        "codebertscore_f3-62": 0.7508208155632019,
        "codebertscore_f1-57": 0.7418596744537354,
        "codebertscore_f3-57": 0.7448592185974121,
        "codebertscore_f1-35": 0.8186855912208557,
        "codebertscore_f3-35": 0.7953052520751953,
        "codebertscore_f1-189": 0.8357992768287659,
        "codebertscore_f3-189": 0.8430497646331787,
        "codebertscore_f1-26": 0.7199491858482361,
        "codebertscore_f3-26": 0.743610143661499,
        "codebertscore_f1-174": 0.5279778242111206,
        "codebertscore_f3-174": 0.49625861644744873,
        "codebertscore_f1-139": 0.834804892539978,
        "codebertscore_f3-139": 0.8376235961914062,
        "codebertscore_f1-22": 0.7772606611251831,
        "codebertscore_f3-22": 0.783400297164917,
        "codebertscore_f1-151": 0.8722187280654907,
        "codebertscore_f3-151": 0.8606795072555542,
        "codebertscore_f1-108": 0.7698360085487366,
        "codebertscore_f3-108": 0.7713849544525146,
        "codebertscore_f1-8": 0.7334553003311157,
        "codebertscore_f3-8": 0.7632419466972351,
        "codebertscore_f1-7": 0.8004426956176758,
        "codebertscore_f3-7": 0.8046395182609558,
        "codebertscore_f1-23": 0.8391318321228027,
        "codebertscore_f3-23": 0.8324266672134399,
        "codebertscore_f1-55": 0.7505557537078857,
        "codebertscore_f3-55": 0.7758978605270386,
        "codebertscore_f1-59": 0.8069509863853455,
        "codebertscore_f3-59": 0.8042513728141785,
        "codebertscore_s_f1-163": 0.856488049030304,
        "codebertscore_s_f3-163": 0.8823856711387634,
        "codebertscore_s_f1-28": 0.8658965826034546,
        "codebertscore_s_f3-28": 0.8702062368392944,
        "codebertscore_s_f1-6": 0.9294089674949646,
        "codebertscore_s_f3-6": 0.9241319894790649,
        "codebertscore_s_f1-190": 0.8551750779151917,
        "codebertscore_s_f3-190": 0.8634573221206665,
        "codebertscore_s_f1-70": 0.8456045389175415,
        "codebertscore_s_f3-70": 0.8565561771392822,
        "codebertscore_s_f1-62": 0.8325601816177368,
        "codebertscore_s_f3-62": 0.838502824306488,
        "codebertscore_s_f1-57": 0.8328585624694824,
        "codebertscore_s_f3-57": 0.8374928832054138,
        "codebertscore_s_f1-35": 0.8827534317970276,
        "codebertscore_s_f3-35": 0.85068678855896,
        "codebertscore_s_f1-189": 0.8876495361328125,
        "codebertscore_s_f3-189": 0.8924061059951782,
        "codebertscore_s_f1-26": 0.8194962739944458,
        "codebertscore_s_f3-26": 0.8384858965873718,
        "codebertscore_s_f1-174": 0.8446421027183533,
        "codebertscore_s_f3-174": 0.7695562243461609,
        "codebertscore_s_f1-139": 0.891067624092102,
        "codebertscore_s_f3-139": 0.8880887627601624,
        "codebertscore_s_f1-22": 0.8486428260803223,
        "codebertscore_s_f3-22": 0.8626794219017029,
        "codebertscore_s_f1-151": 0.9225898385047913,
        "codebertscore_s_f3-151": 0.9102184176445007,
        "codebertscore_s_f1-108": 0.8393218517303467,
        "codebertscore_s_f3-108": 0.8427634835243225,
        "codebertscore_s_f1-8": 0.823996901512146,
        "codebertscore_s_f3-8": 0.8568949103355408,
        "codebertscore_s_f1-7": 0.8565453886985779,
        "codebertscore_s_f3-7": 0.8678445816040039,
        "codebertscore_s_f1-23": 0.8943439722061157,
        "codebertscore_s_f3-23": 0.8825230002403259,
        "codebertscore_s_f1-55": 0.8379223942756653,
        "codebertscore_s_f3-55": 0.8608739376068115,
        "codebertscore_s_f1-59": 0.8654488325119019,
        "codebertscore_s_f3-59": 0.8705446720123291,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 2,
        "raw_gpt35_nsnr-190": "2",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "3 - The code correctly replaces each integer in the input array with its corresponding name from \"One\" to \"Nine\". However, the code does not sort or reverse the array as required by the problem statement.",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 2,
        "raw_gpt35_nswr-190": "2",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n"
        ],
        "simplified": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
        "task_id": "68",
        "163": "std::vector<long> v;\n  long min = INT_MAX;\n  int idx = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      idx = i;\n    }\n  }\n  if (idx == -1)\n    return v;\n  v.push_back(min);\n  v.push_back(idx);\n  return v;",
        "grade-163": {
            "execution": 1
        },
        "28": "long size = arr.size();\n    if(!size) return {};\n    long min = 1e9;\n    long index = -1;\n    for(long i = 0; i < size; i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1) return {};\n    return {min, index};",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> empty;\n  if (arr.size() == 0) return empty;\n  long smallest;\n  int index = 0;\n  int i = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n      if (smallest == NULL) {\n        smallest = arr[i];\n        index = i;\n      } else if (arr[i] < smallest) {\n        smallest = arr[i];\n        index = i;\n      }\n    }\n  }\n  if (smallest == NULL) return empty;\n  std::vector<long> answer;\n  answer.push_back(smallest);\n  answer.push_back(index);\n  return answer;",
        "grade-6": {
            "execution": 0
        },
        "189": "if (arr.size() == 0) return {};\n  long min = LONG_MAX;\n  std::vector<long> ret = {};\n  for (size_t i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      ret = { min, i };\n    }\n  }\n  if (min == LONG_MAX) return {};\n  return ret;",
        "grade-189": {
            "execution": 1
        },
        "70": "std::vector<long> ans;\n    if(arr.size()==0)\n        return ans;\n    long min_even = INT_MAX;\n    long min_even_idx = INT_MAX;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<min_even){\n                min_even = arr[i];\n                min_even_idx = i;\n            }\n        }\n    }\n    if(min_even!=INT_MAX){\n        ans.push_back(min_even);\n        ans.push_back(min_even_idx);\n    }\n    return ans;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (arr.size() == 0)\n\t\treturn {};\n\tint n = arr.size();\n\tvector<long> result;\n\tlong minVal = LONG_MAX;\n\tint minValIndex = -1;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] % 2 == 0 && arr[i] < minVal) {\n\t\t\tminVal = arr[i];\n\t\t\tminValIndex = i;\n\t\t}\n\t}\n\tif (minValIndex == -1)\n\t\treturn {};\n\tresult.push_back(minVal);\n\tresult.push_back(minValIndex);\n\treturn result;",
        "grade-62": {
            "execution": 0
        },
        "57": "// use an even_found flag to account for the case when there are no evens\n\tbool even_found = false;\n\t// initialize the smallest even value to be the first value in the array\n\tlong smallest_even = arr[0];\n\t// initialize the smallest index to be 0\n\tlong smallest_index = 0;\n\t// loop over the rest of the array values\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\t// check if the current value is even\n\t\tif (arr[i] % 2 == 0) {\n\t\t\t// if the current value is smaller than the smallest even value\n\t\t\tif (arr[i] < smallest_even) {\n\t\t\t\t// set the smallest even value to be the current value\n\t\t\t\tsmallest_even = arr[i];\n\t\t\t\t// set the smallest index to be the current index\n\t\t\t\tsmallest_index = i;\n\t\t\t}\n\t\t\t// set the even_found flag to true\n\t\t\teven_found = true;\n\t\t}\n\t}\n\t// if an even was found\n\tif (even_found) {\n\t\t// return a vector containing the smallest even value and its index\n\t\treturn { smallest_even, smallest_index };\n\t}\n\t// if an even was not found\n\telse {\n\t\t// return an empty vector\n\t\treturn {};\n\t}",
        "grade-57": {
            "execution": 0
        },
        "35": "int n = arr.size();\n   if(n == 0)\n       return {};\n   int min = INT_MAX;\n   int index = -1;\n   for(int i = 0; i < n; i++)\n   {\n       if(arr[i] % 2 == 0 && arr[i] < min)\n       {\n           min = arr[i];\n           index = i;\n       }\n   }\n   if(index == -1)\n       return {};\n   else\n       return {min, index};",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<long> answer;\n    for(auto index = arr.begin(); index != arr.end(); index++) {\n        if((*index % 2) == 0) {\n            answer.push_back(*index);\n            answer.push_back(index - arr.begin());\n            return answer;\n        }\n    }\n    return answer;",
        "grade-188": {
            "execution": 0
        },
        "26": "// your code here\n  if(arr.size() == 0)\n    return {};\n  std::vector<long> evens;\n  std::vector<long> evensIndex;\n  for(int i = 0; i < arr.size(); i++)\n  {\n    if(arr[i] % 2 == 0)\n    {\n      evens.push_back(arr[i]);\n      evensIndex.push_back(i);\n    }\n  }\n  std::sort(evens.begin(), evens.end());\n  for(int i = 0; i < evens.size(); i++)\n  {\n    if(evens[i] % 2 == 0)\n    {\n      return {evens[i], evensIndex[i]};\n    }\n  }\n  return {};",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<long> v;\n  if(arr.size() == 0) return v;\n  long min = 0;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] < min && arr[i] % 2 == 0) {\n      min = arr[i];\n      v.push_back(arr[i]);\n      v.push_back(i);\n    }\n  }\n  return v;",
        "grade-173": {
            "execution": 0
        },
        "139": "// your code here\n\tstd::vector<long> temp(2);\n\ttemp[0] = -1;\n\ttemp[1] = -1;\n\tif (arr.size() < 1) {\n\t\treturn temp;\n\t}\n\telse {\n\t\tlong minEven = 10001;\n\t\tint minIndex = 0;\n\t\tint index = 0;\n\t\tfor (long i : arr) {\n\t\t\tif (i % 2 == 0 && i < minEven) {\n\t\t\t\tminEven = i;\n\t\t\t\tminIndex = index;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tif (minEven == 10001) {\n\t\t\treturn temp;\n\t\t}\n\t\telse {\n\t\t\ttemp[0] = minEven;\n\t\t\ttemp[1] = minIndex;\n\t\t\treturn temp;\n\t\t}\n\t}",
        "grade-139": {
            "execution": 0
        },
        "22": "if(arr.size() == 0) return {};\n    std::vector<long> ans;\n    long min = arr[0];\n    long min_ind = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]%2 == 0 && arr[i] < min){\n            min = arr[i];\n            min_ind = i;\n        }\n    }\n    if(min == arr[0]) return {};\n    ans.push_back(min);\n    ans.push_back(min_ind);\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> v2;\n    long min = -1;\n    long minIndex = -1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && (min == -1 || arr[i] < min)) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if(minIndex != -1) {\n        v2.push_back(min);\n        v2.push_back(minIndex);\n    }\n    return v2;",
        "grade-151": {
            "execution": 1
        },
        "108": "// your code goes here\n  if(arr.size()==0)\n  {\n    std::vector<long> v;\n    return v;\n  }\n  if(arr.size()==1)\n  {\n    if(arr[0]%2==0)\n    {\n      std::vector<long> v;\n      v.push_back(arr[0]);\n      v.push_back(0);\n      return v;\n    }\n    else\n    {\n      std::vector<long> v;\n      return v;\n    }\n  }\n  long min=arr[0];\n  long index=0;\n  long minIndex=0;\n  int flag=0;\n  for(int i=0;i<arr.size();i++)\n  {\n    if(arr[i]%2==0)\n    {\n      flag=1;\n      if(arr[i]<min)\n      {\n        min=arr[i];\n        minIndex=i;\n      }\n    }\n  }\n  if(flag==0)\n  {\n    std::vector<long> v;\n    return v;\n  }\n  std::vector<long> v;\n  v.push_back(min);\n  v.push_back(minIndex);\n  return v;",
        "grade-108": {
            "execution": 0
        },
        "8": "long min=INT_MAX;\n  int index;\n  for(long i=0;i<arr.size();i++){\n    if(arr[i]%2==0){\n      if(arr[i]<min){\n        min=arr[i];\n        index=i;\n      }\n    }\n  }\n  if(min==INT_MAX){\n    std::vector<long> a{};\n    return a;\n  }\n  std::vector<long> a={min,index};\n  return a;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> ans = {};\n  if (arr.size() == 0) {\n    return ans;\n  }\n  long min_even = 10000, min_even_idx = 10000;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_idx = i;\n    }\n  }\n  if (min_even != 10000) {\n    ans.push_back(min_even);\n    ans.push_back(min_even_idx);\n  }\n  return ans;",
        "grade-7": {
            "execution": 1
        },
        "23": "long sz=arr.size();\n    if(sz==0) return {};\n    std::vector<long> ans;\n    long f=0;\n    long sm=arr[0];\n    long idx=0;\n    for(long i=0;i<sz;i++){\n        if(arr[i]%2==0){\n            f=1;\n            if(arr[i]<sm){\n                sm=arr[i];\n                idx=i;\n            }\n        }\n    }\n    if(f==0) return {};\n    ans.push_back(sm);\n    ans.push_back(idx);\n    return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> a;\n  if(arr.size()==0)\n  {\n    return a;\n  }\n  else\n  {\n    int small =arr[0];\n    int index = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n      if(arr[i]%2==0 && arr[i]<small)\n      {\n        small = arr[i];\n        index = i;\n      }\n    }\n    if(small%2==0)\n    {\n      a.push_back(small);\n      a.push_back(index);\n      return a;\n    }\n    else\n    {\n      return a;\n    }\n  }",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> v;\n    long m = 99999999999;\n    long i = 0;\n    int flag = 0;\n    for(auto c: arr){\n        if(c%2 == 0){\n            if(m > c){\n                m = c;\n                flag = 1;\n            }\n        }\n    }\n    if(flag == 1){\n        v.push_back(m);\n        for(auto c: arr){\n            if(c == m){\n                v.push_back(i);\n                break;\n            }\n            i++;\n        }\n    }\n    return v;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.38419414104043925,
        "bleu-28": 0.34471398312287,
        "bleu-6": 0.29380158731573003,
        "bleu-189": 0.43892665930559394,
        "bleu-70": 0.3479540661374413,
        "bleu-62": 0.315875675309077,
        "bleu-57": 0.1583283824613351,
        "bleu-35": 0.367286651117406,
        "bleu-188": 0.1018623108361133,
        "bleu-26": 0.2733702922713876,
        "bleu-173": 0.44877522760733635,
        "bleu-139": 0.10994041815717415,
        "bleu-22": 0.35819257763258183,
        "bleu-151": 0.3401849789239739,
        "bleu-108": 0.19306087194942903,
        "bleu-8": 0.3570360316264811,
        "bleu-7": 0.38555452516450656,
        "bleu-23": 0.2699533867740396,
        "bleu-55": 0.34825038072537445,
        "bleu-59": 0.10545585188100748,
        "codebleu-163": 0.6784448770746276,
        "codebleu-28": 0.6511266490964179,
        "codebleu-6": 0.7132320504285626,
        "codebleu-189": 0.7206310926284036,
        "codebleu-70": 0.686129543031891,
        "codebleu-62": 0.7041258541912107,
        "codebleu-57": 0.6743494248698707,
        "codebleu-35": 0.647428446035941,
        "codebleu-188": 0.47168284789644005,
        "codebleu-26": 0.7163399658992494,
        "codebleu-173": 0.7092732764521584,
        "codebleu-139": 0.6167371995729151,
        "codebleu-22": 0.7343756342772334,
        "codebleu-151": 0.676410899658931,
        "codebleu-108": 0.7193052312549765,
        "codebleu-8": 0.6751163315774948,
        "codebleu-7": 0.7176450174411471,
        "codebleu-23": 0.7121632207883599,
        "codebleu-55": 0.7131758713098214,
        "codebleu-59": 0.5229060153081058,
        "chrf-163": 0.47159208140341996,
        "chrf-28": 0.3977638775593349,
        "chrf-6": 0.4325492855635882,
        "chrf-189": 0.5280892006577573,
        "chrf-70": 0.4136543973013193,
        "chrf-62": 0.44091420852514374,
        "chrf-57": 0.2519122248814648,
        "chrf-35": 0.4206707907779983,
        "chrf-188": 0.23305166318047787,
        "chrf-26": 0.4397991710818478,
        "chrf-173": 0.5247008355353905,
        "chrf-139": 0.270981433028814,
        "chrf-22": 0.4643329014682497,
        "chrf-151": 0.4455409766253237,
        "chrf-108": 0.38882888370550445,
        "chrf-8": 0.448804725178626,
        "chrf-7": 0.4601334866837829,
        "chrf-23": 0.40020536539988005,
        "chrf-55": 0.49036145264557623,
        "chrf-59": 0.22925996311629132,
        "rougel-163": 0.5730337078651685,
        "rougel-28": 0.5172413793103449,
        "rougel-6": 0.4867256637168142,
        "rougel-189": 0.5888888888888889,
        "rougel-70": 0.53125,
        "rougel-62": 0.4423076923076923,
        "rougel-57": 0.3141025641025641,
        "rougel-35": 0.519774011299435,
        "rougel-188": 0.4342105263157895,
        "rougel-26": 0.46025104602510464,
        "rougel-173": 0.5632183908045977,
        "rougel-139": 0.3287671232876712,
        "rougel-22": 0.5050505050505051,
        "rougel-151": 0.5759162303664922,
        "rougel-108": 0.358974358974359,
        "rougel-8": 0.5384615384615384,
        "rougel-7": 0.5492227979274611,
        "rougel-23": 0.4519230769230769,
        "rougel-55": 0.526829268292683,
        "rougel-59": 0.3333333333333333,
        "meteor-163": 0.5819452277499318,
        "meteor-28": 0.5248771004598584,
        "meteor-6": 0.535294947433057,
        "meteor-189": 0.606691002240641,
        "meteor-70": 0.590662005542958,
        "meteor-62": 0.5926470588235294,
        "meteor-57": 0.5813146385387187,
        "meteor-35": 0.5500045361410619,
        "meteor-188": 0.3113516038617253,
        "meteor-26": 0.5727195605181514,
        "meteor-173": 0.6254638338746686,
        "meteor-139": 0.5146614268440145,
        "meteor-22": 0.6186156626039325,
        "meteor-151": 0.5724767822421107,
        "meteor-108": 0.4977398168346623,
        "meteor-8": 0.6138664234249662,
        "meteor-7": 0.6155013333924312,
        "meteor-23": 0.5552775844065437,
        "meteor-55": 0.5900960069289274,
        "meteor-59": 0.3682040302267003,
        "ruby-163": 0.4117647058823529,
        "ruby-28": 0.326530612244898,
        "ruby-6": 0.33999999999999997,
        "ruby-189": 0.41346153846153844,
        "ruby-70": 0.3706896551724138,
        "ruby-62": 0.26515151515151514,
        "ruby-57": 0.19491525423728817,
        "ruby-35": 0.3267326732673267,
        "ruby-188": 0.26315789473684215,
        "ruby-26": 0.32515337423312884,
        "ruby-173": 0.3979591836734694,
        "ruby-139": 0.21678321678321677,
        "ruby-22": 0.3688524590163934,
        "ruby-151": 0.4173913043478261,
        "ruby-108": 0.2033898305084746,
        "ruby-8": 0.3867924528301887,
        "ruby-7": 0.3846153846153846,
        "ruby-23": 0.25757575757575757,
        "ruby-55": 0.3643410852713178,
        "ruby-59": 0.2272727272727273,
        "codebertscore_f1-163": 0.8372495770454407,
        "codebertscore_f3-163": 0.8718428015708923,
        "codebertscore_f1-28": 0.8078079223632812,
        "codebertscore_f3-28": 0.8302072882652283,
        "codebertscore_f1-6": 0.7991697192192078,
        "codebertscore_f3-6": 0.8358129262924194,
        "codebertscore_f1-189": 0.8573907017707825,
        "codebertscore_f3-189": 0.8765516877174377,
        "codebertscore_f1-70": 0.7788727283477783,
        "codebertscore_f3-70": 0.8253751993179321,
        "codebertscore_f1-62": 0.8085333704948425,
        "codebertscore_f3-62": 0.8535923361778259,
        "codebertscore_f1-57": 0.6752241253852844,
        "codebertscore_f3-57": 0.7680965065956116,
        "codebertscore_f1-35": 0.8215250968933105,
        "codebertscore_f3-35": 0.8432790040969849,
        "codebertscore_f1-188": 0.7868432998657227,
        "codebertscore_f3-188": 0.7898128032684326,
        "codebertscore_f1-26": 0.7863579988479614,
        "codebertscore_f3-26": 0.8268992304801941,
        "codebertscore_f1-173": 0.8658403754234314,
        "codebertscore_f3-173": 0.8783184885978699,
        "codebertscore_f1-139": 0.7581953406333923,
        "codebertscore_f3-139": 0.8104471564292908,
        "codebertscore_f1-22": 0.8270043134689331,
        "codebertscore_f3-22": 0.8554145097732544,
        "codebertscore_f1-151": 0.813010036945343,
        "codebertscore_f3-151": 0.8620135188102722,
        "codebertscore_f1-108": 0.7349408864974976,
        "codebertscore_f3-108": 0.7797701954841614,
        "codebertscore_f1-8": 0.8300437331199646,
        "codebertscore_f3-8": 0.8486431837081909,
        "codebertscore_f1-7": 0.8191683888435364,
        "codebertscore_f3-7": 0.8643578886985779,
        "codebertscore_f1-23": 0.7846983671188354,
        "codebertscore_f3-23": 0.8212796449661255,
        "codebertscore_f1-55": 0.8239191770553589,
        "codebertscore_f3-55": 0.8517888784408569,
        "codebertscore_f1-59": 0.7228829860687256,
        "codebertscore_f3-59": 0.7476404309272766,
        "codebertscore_s_f1-163": 0.8195568323135376,
        "codebertscore_s_f3-163": 0.8541792631149292,
        "codebertscore_s_f1-28": 0.7846317291259766,
        "codebertscore_s_f3-28": 0.7981328964233398,
        "codebertscore_s_f1-6": 0.7896464467048645,
        "codebertscore_s_f3-6": 0.8179143667221069,
        "codebertscore_s_f1-189": 0.8259961009025574,
        "codebertscore_s_f3-189": 0.8392398357391357,
        "codebertscore_s_f1-70": 0.7723290324211121,
        "codebertscore_s_f3-70": 0.8101180791854858,
        "codebertscore_s_f1-62": 0.7937363386154175,
        "codebertscore_s_f3-62": 0.8302252888679504,
        "codebertscore_s_f1-57": 0.7046183347702026,
        "codebertscore_s_f3-57": 0.785715639591217,
        "codebertscore_s_f1-35": 0.7954579591751099,
        "codebertscore_s_f3-35": 0.8072488307952881,
        "codebertscore_s_f1-188": 0.7793903350830078,
        "codebertscore_s_f3-188": 0.783790111541748,
        "codebertscore_s_f1-26": 0.7786784768104553,
        "codebertscore_s_f3-26": 0.8142737746238708,
        "codebertscore_s_f1-173": 0.8436928987503052,
        "codebertscore_s_f3-173": 0.8589428663253784,
        "codebertscore_s_f1-139": 0.7503024339675903,
        "codebertscore_s_f3-139": 0.7980412244796753,
        "codebertscore_s_f1-22": 0.8038932085037231,
        "codebertscore_s_f3-22": 0.8234450221061707,
        "codebertscore_s_f1-151": 0.7841789722442627,
        "codebertscore_s_f3-151": 0.8211866021156311,
        "codebertscore_s_f1-108": 0.7922449707984924,
        "codebertscore_s_f3-108": 0.8348691463470459,
        "codebertscore_s_f1-8": 0.8312790393829346,
        "codebertscore_s_f3-8": 0.8518658876419067,
        "codebertscore_s_f1-7": 0.794165849685669,
        "codebertscore_s_f3-7": 0.831141471862793,
        "codebertscore_s_f1-23": 0.7824556231498718,
        "codebertscore_s_f3-23": 0.8110098838806152,
        "codebertscore_s_f1-55": 0.8103803396224976,
        "codebertscore_s_f3-55": 0.83270263671875,
        "codebertscore_s_f1-59": 0.7427796125411987,
        "codebertscore_s_f3-59": 0.7669331431388855,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3]) = -1\nlong can_arrange(std::vector<long> arr) {\n",
        "snippet": [
            "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n"
        ],
        "simplified": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
        "task_id": "135",
        "169": "if (arr.size() == 1) return -1;\n  //  std::map<long, long> m;\n  //  for (long i = 0; i < arr.size(); i++) {\n  //    m[arr[i]] = i;\n  //  }\n  //  long max = arr[0];\n  //  for (long i = 1; i < arr.size(); i++) {\n  //    if (arr[i] < max) return m[arr[i]];\n  //    if (arr[i] > max) max = arr[i];\n  //  }\n  //  return -1;\n  std::stack<long> s;\n  s.push(arr[0]);\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] < s.top()) return i;\n    while (!s.empty() && arr[i] > s.top()) {\n      s.pop();\n    }\n    s.push(arr[i]);\n  }\n  return -1;",
        "grade-169": {
            "execution": 0
        },
        "28": "// TODO\n  int largestIndex = -1;\n  int counter = 0;\n  for(int i = 0; i < arr.size()-1; i++){\n    if(arr[i] >= arr[i+1]){\n      if(i > largestIndex){\n        largestIndex = i;\n      }\n    }\n  }\n  return largestIndex;",
        "grade-28": {
            "execution": 0
        },
        "6": "long size = arr.size();\n\tif (size == 1)\n\t\treturn -1;\n\tlong next_ele = arr[size - 1];\n\tfor (long i = size - 2; i >= 0; i--) {\n\t\tif (arr[i] <= next_ele) {\n\t\t\tnext_ele = arr[i];\n\t\t}\n\t\telse {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;",
        "grade-6": {
            "execution": 0
        },
        "196": "long index = -1;\n\tfor (int i = arr.size() - 1; i > 0; i--) {\n\t\tif (arr[i] <= arr[i - 1]) {\n\t\t\tindex = i - 1;\n\t\t}\n\t}\n\treturn index;",
        "grade-196": {
            "execution": 0
        },
        "71": "// Your code here\n    int n = arr.size();\n    if(n == 1) return -1;\n    long max = 0;\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] >= arr[i + 1]){\n            if(max < i) max = i;\n        }\n    }\n    if(max == 0) return -1;\n    return max;",
        "grade-71": {
            "execution": 0
        },
        "63": "// Write your code here",
        "grade-63": {
            "execution": 0
        },
        "58": "long max=arr[0];\n    long result=-1;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]<=max){\n            result=i-1;\n        }\n        else{\n            max=arr[i];\n        }\n    }\n    return result;",
        "grade-58": {
            "execution": 0
        },
        "35": "long found_idx = -1;\n  for (long i = arr.size() - 1; i > 0; i--) {\n    if (arr[i - 1] >= arr[i]) {\n      found_idx = i;\n    }\n  }\n  return found_idx;",
        "grade-35": {
            "execution": 0
        },
        "195": "int largest=-1;\n    for(int i=0;i<arr.size()-1;i++){\n      if(arr[i]>=arr[i+1]){\n        largest=i;\n      }\n    }\n    return largest;",
        "grade-195": {
            "execution": 0
        },
        "26": "long ans = -1;\n\tfor (long i = 0; i < arr.size() - 1; i++) {\n\t\tif (arr[i] > arr[i + 1]) {\n\t\t\tans = i;\n\t\t}\n\t}\n\treturn ans;",
        "grade-26": {
            "execution": 0
        },
        "180": "long max_val = -1;\n  for (int i = 0; i < arr.size() - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (i >= max_val) {\n        max_val = i;\n      }\n    }\n  }\n  return max_val;",
        "grade-180": {
            "execution": 0
        },
        "145": "int n = arr.size();\n    int i;\n    for(i=n-1;i>0;i--)\n    {\n        if(arr[i] < arr[i-1])\n            return i-1;\n    }\n    return -1;",
        "grade-145": {
            "execution": 0
        },
        "22": "// Your code here\n    long i=0;\n    long j=1;\n    long max = -1;\n    for(i=0;i<arr.size()-1;i++){\n        if(arr[i]<arr[j]){\n            if(j>max){\n                max = j;\n            }\n        }\n        j++;\n    }\n    return max;",
        "grade-22": {
            "execution": 0
        },
        "157": "int n = arr.size();\n  int largestIndex = -1;\n  for(int i = 0; i < n - 1; i++) {\n    if(arr[i] >= arr[i + 1]) {\n      if(largestIndex == -1) {\n        largestIndex = i;\n      } else {\n        if(arr[i] > arr[largestIndex]) {\n          largestIndex = i;\n        }\n      }\n    }\n  }\n  return largestIndex;",
        "grade-157": {
            "execution": 0
        },
        "111": "// your code here\n  if(arr.size()==1) return -1;\n  int lrgst_idx = 0;\n  for(int i = 1; i < arr.size(); i++){\n      if(arr[i] > arr[i-1]){\n          lrgst_idx = i;\n      }\n  }\n  return lrgst_idx;",
        "grade-111": {
            "execution": 0
        },
        "8": "long currentVal = 0;\n  long beforeVal = 0;\n  long indexVal = 0;\n  int arrSize = arr.size();\n  for(int i = 1; i < arrSize; i++){\n    currentVal = arr[i];\n    beforeVal = arr[i-1];\n    if(currentVal > beforeVal){\n      indexVal = i;\n    }\n  }\n  return indexVal;",
        "grade-8": {
            "execution": 0
        },
        "7": "long len = arr.size();\n    long max_value = 0;\n    long max_index = -1;\n    for(long i = len - 1; i >= 0; i--) {\n        if(arr[i] < max_value) {\n            return max_index;\n        }\n        if(arr[i] > max_value) {\n            max_value = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;",
        "grade-7": {
            "execution": 0
        },
        "23": "long n = arr.size(), i = n - 1;\n  if (n == 1)\n    return 0;\n  while (i--) {\n    if (arr[i] >= arr[i + 1])\n      return i;\n  }\n  return -1;",
        "grade-23": {
            "execution": 0
        },
        "56": "long sz = arr.size();\n    if(sz < 2) return -1;\n    long ans = -1;\n    for(long i = sz - 1; i > 0; i--){\n        if(arr[i] >= arr[i - 1]) ans = i;\n    }\n    return ans;",
        "grade-56": {
            "execution": 0
        },
        "60": "long n = arr.size();\n\tlong i = n - 1;\n\twhile (i >= 1 && arr[i] >= arr[i - 1]) {\n\t\ti--;\n\t}\n\treturn i - 1;",
        "grade-60": {
            "execution": 0
        },
        "bleu-169": 0.10994312979017755,
        "bleu-28": 0.36590032917423604,
        "bleu-6": 0.2302953152675116,
        "bleu-196": 0.3908117282447542,
        "bleu-71": 0.33182358568648596,
        "bleu-63": 0.0,
        "bleu-58": 0.4413325161811265,
        "bleu-35": 0.32061071995491575,
        "bleu-195": 0.5271947929909088,
        "bleu-26": 0.4734961853813618,
        "bleu-180": 0.44583536118733463,
        "bleu-145": 0.3131943675744266,
        "bleu-22": 0.3564002811077715,
        "bleu-157": 0.28217334858312715,
        "bleu-111": 0.37218351373071884,
        "bleu-8": 0.25471302422231523,
        "bleu-7": 0.253041343995029,
        "bleu-23": 0.22365240490104274,
        "bleu-56": 0.27366601211953556,
        "bleu-60": 0.21185902388463884,
        "codebleu-169": 0.7155958286328248,
        "codebleu-28": 0.7925329992769807,
        "codebleu-6": 0.6792303770794995,
        "codebleu-196": 0.6865188026869015,
        "codebleu-71": 0.7514725962492518,
        "codebleu-63": 0.04678362573099415,
        "codebleu-58": 0.7985580934659011,
        "codebleu-35": 0.6675504061190453,
        "codebleu-195": 0.7826476250898508,
        "codebleu-26": 0.7688291982400871,
        "codebleu-180": 0.792576719884776,
        "codebleu-145": 0.663762533076057,
        "codebleu-22": 0.7773227899697901,
        "codebleu-157": 0.7791095641402593,
        "codebleu-111": 0.7297824518600035,
        "codebleu-8": 0.7173430665378654,
        "codebleu-7": 0.7233485646328707,
        "codebleu-23": 0.6133938559394815,
        "codebleu-56": 0.6811501725920844,
        "codebleu-60": 0.5536954882040178,
        "chrf-169": 0.3245081250847724,
        "chrf-28": 0.5002879522681233,
        "chrf-6": 0.36532855472080017,
        "chrf-196": 0.5076563919108885,
        "chrf-71": 0.582447688976854,
        "chrf-63": 0.03160114581735102,
        "chrf-58": 0.5807174138597417,
        "chrf-35": 0.41293145562236355,
        "chrf-195": 0.5726345329897138,
        "chrf-26": 0.49764188843671525,
        "chrf-180": 0.598143170275006,
        "chrf-145": 0.4529745311898393,
        "chrf-22": 0.5699201661710188,
        "chrf-157": 0.46399777878029513,
        "chrf-111": 0.496285843873019,
        "chrf-8": 0.385681114764637,
        "chrf-7": 0.41771710306286847,
        "chrf-23": 0.34309163218274846,
        "chrf-56": 0.40534187392051074,
        "chrf-60": 0.3024514633084842,
        "rougel-169": 0.2657342657342658,
        "rougel-28": 0.6551724137931034,
        "rougel-6": 0.459016393442623,
        "rougel-196": 0.6530612244897959,
        "rougel-71": 0.5263157894736842,
        "rougel-63": 0.0,
        "rougel-58": 0.6972477064220183,
        "rougel-35": 0.625,
        "rougel-195": 0.7916666666666666,
        "rougel-26": 0.736842105263158,
        "rougel-180": 0.7047619047619047,
        "rougel-145": 0.5208333333333334,
        "rougel-22": 0.6218487394957982,
        "rougel-157": 0.4782608695652174,
        "rougel-111": 0.625,
        "rougel-8": 0.46031746031746035,
        "rougel-7": 0.4426229508196721,
        "rougel-23": 0.48979591836734687,
        "rougel-56": 0.4954128440366973,
        "rougel-60": 0.43956043956043955,
        "meteor-169": 0.4116455624486559,
        "meteor-28": 0.6548752251093388,
        "meteor-6": 0.5587982832618026,
        "meteor-196": 0.7336444193061841,
        "meteor-71": 0.6786488928799408,
        "meteor-63": 0.0,
        "meteor-58": 0.7897964189354918,
        "meteor-35": 0.6816903900597672,
        "meteor-195": 0.7954620166158627,
        "meteor-26": 0.6985573272589218,
        "meteor-180": 0.6381062255921129,
        "meteor-145": 0.5918181818181819,
        "meteor-22": 0.6546614878781143,
        "meteor-157": 0.5640329986005058,
        "meteor-111": 0.7975910354452864,
        "meteor-8": 0.6409417096814805,
        "meteor-7": 0.5587982832618026,
        "meteor-23": 0.5185753046715613,
        "meteor-56": 0.6318421408298419,
        "meteor-60": 0.48756744076941133,
        "ruby-169": 0.15637860082304522,
        "ruby-28": 0.5068493150684932,
        "ruby-6": 0.3291139240506329,
        "ruby-196": 0.49090909090909096,
        "ruby-71": 0.3555555555555555,
        "ruby-63": 0.0,
        "ruby-58": 0.5757575757575757,
        "ruby-35": 0.4716981132075472,
        "ruby-195": 0.6981132075471699,
        "ruby-26": 0.6538461538461539,
        "ruby-180": 0.5806451612903225,
        "ruby-145": 0.3584905660377359,
        "ruby-22": 0.4605263157894737,
        "ruby-157": 0.3263157894736842,
        "ruby-111": 0.49275362318840576,
        "ruby-8": 0.3012048192771084,
        "ruby-7": 0.3291139240506329,
        "ruby-23": 0.34545454545454546,
        "ruby-56": 0.33333333333333337,
        "ruby-60": 0.20833333333333337,
        "codebertscore_f1-169": 0.7731443047523499,
        "codebertscore_f3-169": 0.8329152464866638,
        "codebertscore_f1-28": 0.8478526473045349,
        "codebertscore_f3-28": 0.8810840845108032,
        "codebertscore_f1-6": 0.8121122121810913,
        "codebertscore_f3-6": 0.8356909155845642,
        "codebertscore_f1-196": 0.8653857707977295,
        "codebertscore_f3-196": 0.886605978012085,
        "codebertscore_f1-71": 0.8364071249961853,
        "codebertscore_f3-71": 0.8739169836044312,
        "codebertscore_f1-63": 0.5316013693809509,
        "codebertscore_f3-63": 0.5279064178466797,
        "codebertscore_f1-58": 0.8833116888999939,
        "codebertscore_f3-58": 0.903348445892334,
        "codebertscore_f1-35": 0.847438633441925,
        "codebertscore_f3-35": 0.8728581666946411,
        "codebertscore_f1-195": 0.9320946335792542,
        "codebertscore_f3-195": 0.9474882483482361,
        "codebertscore_f1-26": 0.903437077999115,
        "codebertscore_f3-26": 0.9180741310119629,
        "codebertscore_f1-180": 0.8972494602203369,
        "codebertscore_f3-180": 0.9232783913612366,
        "codebertscore_f1-145": 0.8424065113067627,
        "codebertscore_f3-145": 0.8570762872695923,
        "codebertscore_f1-22": 0.8234683871269226,
        "codebertscore_f3-22": 0.8501289486885071,
        "codebertscore_f1-157": 0.8361191153526306,
        "codebertscore_f3-157": 0.8728499412536621,
        "codebertscore_f1-111": 0.8236064314842224,
        "codebertscore_f3-111": 0.8610031008720398,
        "codebertscore_f1-8": 0.817568302154541,
        "codebertscore_f3-8": 0.8441886901855469,
        "codebertscore_f1-7": 0.8162033557891846,
        "codebertscore_f3-7": 0.8415580987930298,
        "codebertscore_f1-23": 0.8187847137451172,
        "codebertscore_f3-23": 0.8267990350723267,
        "codebertscore_f1-56": 0.8227546811103821,
        "codebertscore_f3-56": 0.8530452251434326,
        "codebertscore_f1-60": 0.8087465167045593,
        "codebertscore_f3-60": 0.8158352375030518,
        "codebertscore_s_f1-169": 0.7921691536903381,
        "codebertscore_s_f3-169": 0.8543542623519897,
        "codebertscore_s_f1-28": 0.8586260676383972,
        "codebertscore_s_f3-28": 0.8941097259521484,
        "codebertscore_s_f1-6": 0.8116281032562256,
        "codebertscore_s_f3-6": 0.832459568977356,
        "codebertscore_s_f1-196": 0.8672507405281067,
        "codebertscore_s_f3-196": 0.8903355598449707,
        "codebertscore_s_f1-71": 0.8466774225234985,
        "codebertscore_s_f3-71": 0.8881552219390869,
        "codebertscore_s_f1-63": 0.52247154712677,
        "codebertscore_s_f3-63": 0.5270184874534607,
        "codebertscore_s_f1-58": 0.8810891509056091,
        "codebertscore_s_f3-58": 0.9037068486213684,
        "codebertscore_s_f1-35": 0.8399540781974792,
        "codebertscore_s_f3-35": 0.8678710460662842,
        "codebertscore_s_f1-195": 0.9277100563049316,
        "codebertscore_s_f3-195": 0.9430463314056396,
        "codebertscore_s_f1-26": 0.8976308703422546,
        "codebertscore_s_f3-26": 0.9130132794380188,
        "codebertscore_s_f1-180": 0.898823082447052,
        "codebertscore_s_f3-180": 0.9277455806732178,
        "codebertscore_s_f1-145": 0.8469744324684143,
        "codebertscore_s_f3-145": 0.8600200414657593,
        "codebertscore_s_f1-22": 0.8366807699203491,
        "codebertscore_s_f3-22": 0.8675122857093811,
        "codebertscore_s_f1-157": 0.8455983996391296,
        "codebertscore_s_f3-157": 0.8822191953659058,
        "codebertscore_s_f1-111": 0.8218024969100952,
        "codebertscore_s_f3-111": 0.8687012195587158,
        "codebertscore_s_f1-8": 0.8103299736976624,
        "codebertscore_s_f3-8": 0.8393896222114563,
        "codebertscore_s_f1-7": 0.8200312852859497,
        "codebertscore_s_f3-7": 0.8461110591888428,
        "codebertscore_s_f1-23": 0.8266749978065491,
        "codebertscore_s_f3-23": 0.8357072472572327,
        "codebertscore_s_f1-56": 0.8297627568244934,
        "codebertscore_s_f3-56": 0.8571895360946655,
        "codebertscore_s_f1-60": 0.8043410181999207,
        "codebertscore_s_f3-60": 0.8119418025016785,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 2,
        "raw_gpt35_nsnr-63": "2",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-145": 4,
        "raw_gpt35_nsnr-145": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-169": 2,
        "raw_gpt35_nswr-169": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-145": 3,
        "raw_gpt35_nswr-145": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-111": 2,
        "raw_gpt35_nswr-111": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nstd::vector<long> f(long n) {\n",
        "snippet": [
            "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n"
        ],
        "simplified": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "task_id": "106",
        "169": "std::vector<long> result;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(factorial(i));\n    } else {\n      result.push_back(sum_of_numbers(i));\n    }\n  }\n  return result;",
        "grade-169": {
            "execution": 0
        },
        "28": "std::vector<long> result;\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            long factorial = 1;\n            for (long j = 2; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push_back(factorial);\n        } else {\n            long sum = 0;\n            for (long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> list;\n  for (size_t i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (size_t j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      list.push_back(factorial);\n    } else {\n      long sum = 0;\n      for (size_t j = 1; j <= i; j++) {\n        sum += j;\n      }\n      list.push_back(sum);\n    }\n  }\n  return list;",
        "grade-6": {
            "execution": 1
        },
        "197": "std::vector<long> v(n);\n  long i, s=1;\n  v[0]=1;\n  for(i=1;i<n;i++)\n  {\n    if(i%2==0)\n    {\n      s=1;\n      for(int j=1;j<=i;j++)\n      {\n        s*=j;\n      }\n      v[i]=s;\n    }\n    else{\n      s=0;\n      for(int j=1;j<=i;j++)\n      {\n        s+=j;\n      }\n      v[i]=s;\n    }\n  }\n  return v;",
        "grade-197": {
            "execution": 0
        },
        "70": "std::vector<long> x(n);\n    for(int i=0;i<n;i++){\n      if(i%2==0){\n        long fact=1;\n        for(int j=1;j<=i;j++){\n          fact*=j;\n        }\n        x[i]=fact;\n      }\n      else{\n        long sum=0;\n        for(int j=1;j<=i;j++){\n          sum+=j;\n        }\n        x[i]=sum;\n      }\n    }\n    return x;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> numbers;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (int j = 2; j <= i; j++) {\n        factorial *= j;\n      }\n      numbers.push_back(factorial);\n    } else {\n      long sum = 0;\n      for (int j = 1; j <= i; j++) {\n        sum += j;\n      }\n      numbers.push_back(sum);\n    }\n  }\n  return numbers;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<long> factorials(n);\n    factorials[0] = 1;\n    for (int i = 1; i < n; i++) {\n        if (i % 2 == 0) {\n            int result = 1;\n            for (int j = 1; j <= i; j++) {\n                result *= j;\n            }\n            factorials[i] = result;\n        } else {\n            int result = 0;\n            for (int j = 1; j <= i; j++) {\n                result += j;\n            }\n            factorials[i] = result;\n        }\n    }\n    return factorials;",
        "grade-57": {
            "execution": 0
        },
        "35": "vector<long> vec;\n\tif (n == 0)\n\t\treturn vec;\n\telse {\n\t\tlong fact = 1;\n\t\tlong sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tfact = fact * i;\n\t\t\t\tvec.push_back(fact);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsum = sum + i;\n\t\t\t\tvec.push_back(sum);\n\t\t\t}\n\t\t}\n\t\treturn vec;\n\t}",
        "grade-35": {
            "execution": 0
        },
        "196": "std::vector<long> a;\n    long fact = 1;\n    long sum = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            for(int j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            a.push_back(fact);\n            fact = 1;\n        }\n        else {\n            for(int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            a.push_back(sum);\n            sum = 0;\n        }\n    }\n    return a;",
        "grade-196": {
            "execution": 1
        },
        "26": "std::vector<long> v;\n    for(long i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            long fact = 1;\n            for(long j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            v.push_back(fact);\n        } else {\n            long sum = 0;\n            for(long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            v.push_back(sum);\n        }\n    }\n    return v;",
        "grade-26": {
            "execution": 1
        },
        "181": "std::vector<long> lst(n);\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            long sum = 1;\n            for (long j = 1; j <= i; j++) {\n                sum *= j;\n            }\n            lst[i] = sum;\n        } else {\n            long sum = 0;\n            for (long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            lst[i] = sum;\n        }\n    }\n    return lst;",
        "grade-181": {
            "execution": 0
        },
        "142": "std::vector<long> returned;\n  long i = 1;\n  while (i <= n) {\n    long result = 1;\n    if (i % 2 == 0) {\n      while (i > 0) {\n        result *= i;\n        i--;\n      }\n    } else {\n      while (i > 0) {\n        result += i;\n        i--;\n      }\n    }\n    returned.push_back(result);\n    i++;\n  }\n  return returned;",
        "grade-142": {
            "execution": 0
        },
        "22": "std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[i] = (i + 1) % 2 ? (i + 1) * (i + 2) / 2 : (i + 1);\n    }\n    return result;",
        "grade-22": {
            "execution": 0
        },
        "157": "std::vector<long> v;\n\tfor (long i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tlong temp = 1;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\ttemp *= j;\n\t\t\t}\n\t\t\tv.push_back(temp);\n\t\t}\n\t\telse {\n\t\t\tlong temp = 0;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\ttemp += j;\n\t\t\t}\n\t\t\tv.push_back(temp);\n\t\t}\n\t}\n\treturn v;",
        "grade-157": {
            "execution": 1
        },
        "111": "// write your solution here\n    // int size = n;\n    std::vector<long> l;\n    for(int i = 1; i<=n; i++){\n      if(i%2 == 0){\n        long fact = 1;\n        for(int j = 1; j<=i; j++){\n          fact = fact*j;\n        }\n        l.push_back(fact);\n      }\n      else{\n        long sum = 0;\n        for(int j = 1; j<=i; j++){\n          sum = sum + j;\n        }\n        l.push_back(sum);\n      }\n    }\n    return l;",
        "grade-111": {
            "execution": 1
        },
        "8": "std::vector<long> v;\n\tfor (long i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tlong fact = 1;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\tfact *= j;\n\t\t\t}\n\t\t\tv.push_back(fact);\n\t\t}\n\t\telse {\n\t\t\tlong sum = 0;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\tsum += j;\n\t\t\t}\n\t\t\tv.push_back(sum);\n\t\t}\n\t}\n\treturn v;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> result;\n\tfor (int i = 1; i <= n; i++) {\n\t\tlong sum = 0;\n\t\tfor (int j = 1; j <= i; j++) {\n\t\t\tsum += j;\n\t\t}\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(factorial(i));\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(sum);\n\t\t}\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> result;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(i * i);\n    } else {\n      result.push_back(i * (i + 1) / 2);\n    }\n  }\n  return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> ret;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (int j = 2; j <= i; j++) {\n        factorial *= j;\n      }\n      ret.push_back(factorial);\n    } else {\n      ret.push_back(i * (i + 1) / 2);\n    }\n  }\n  return ret;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> vec;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tint fact = 1;\n\t\t\tfor (int j = 2; j <= i; j++) {\n\t\t\t\tfact *= j;\n\t\t\t}\n\t\t\tvec.push_back(fact);\n\t\t}\n\t\telse {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tsum += j;\n\t\t\t}\n\t\t\tvec.push_back(sum);\n\t\t}\n\t}\n\treturn vec;",
        "grade-59": {
            "execution": 1
        },
        "bleu-169": 0.4257897151877571,
        "bleu-28": 0.34786426967812933,
        "bleu-6": 0.34786426967812933,
        "bleu-197": 0.22554010353885193,
        "bleu-70": 0.2773474027822657,
        "bleu-62": 0.37771920144440607,
        "bleu-57": 0.2518518827302812,
        "bleu-35": 0.44507514757658045,
        "bleu-196": 0.34699610820414234,
        "bleu-26": 0.34786426967812933,
        "bleu-181": 0.2487630551189634,
        "bleu-142": 0.29822854414892536,
        "bleu-22": 0.1853182566224888,
        "bleu-157": 0.28878499800384366,
        "bleu-111": 0.3191758532984,
        "bleu-8": 0.34786426967812933,
        "bleu-7": 0.469200556499456,
        "bleu-23": 0.4347460596446027,
        "bleu-55": 0.3726379967514297,
        "bleu-59": 0.38560915958891195,
        "codebleu-169": 0.5806459943127193,
        "codebleu-28": 0.6593942111631999,
        "codebleu-6": 0.6593942111631999,
        "codebleu-197": 0.6252482231628727,
        "codebleu-70": 0.6191210227560078,
        "codebleu-62": 0.6693340163793897,
        "codebleu-57": 0.6164608471901415,
        "codebleu-35": 0.69318258237583,
        "codebleu-196": 0.6835586392442452,
        "codebleu-26": 0.6593942111631999,
        "codebleu-181": 0.6097469435355408,
        "codebleu-142": 0.5943942072016347,
        "codebleu-22": 0.4349162097210472,
        "codebleu-157": 0.6482670872574041,
        "codebleu-111": 0.6735316953145933,
        "codebleu-8": 0.6591388580066958,
        "codebleu-7": 0.6918431326625576,
        "codebleu-23": 0.5865590103386081,
        "codebleu-55": 0.6457289165235546,
        "codebleu-59": 0.6703909356302662,
        "chrf-169": 0.4945013918405587,
        "chrf-28": 0.4929753329528733,
        "chrf-6": 0.493267776133812,
        "chrf-197": 0.31459534148586416,
        "chrf-70": 0.3701609349734059,
        "chrf-62": 0.5180372303863944,
        "chrf-57": 0.323358475490758,
        "chrf-35": 0.5245383415633598,
        "chrf-196": 0.5263031938398329,
        "chrf-26": 0.4903691958689035,
        "chrf-181": 0.3245189845071038,
        "chrf-142": 0.3410300509320103,
        "chrf-22": 0.222283167160289,
        "chrf-157": 0.4193741700332015,
        "chrf-111": 0.5125862055045445,
        "chrf-8": 0.4903691958689035,
        "chrf-7": 0.5555783534509354,
        "chrf-23": 0.48312577863519235,
        "chrf-55": 0.47338635981282545,
        "chrf-59": 0.5467586235136285,
        "rougel-169": 0.6376811594202898,
        "rougel-28": 0.4680851063829787,
        "rougel-6": 0.4680851063829787,
        "rougel-197": 0.39800995024875624,
        "rougel-70": 0.4,
        "rougel-62": 0.47872340425531923,
        "rougel-57": 0.40609137055837563,
        "rougel-35": 0.5975609756097561,
        "rougel-196": 0.4693877551020408,
        "rougel-26": 0.4680851063829787,
        "rougel-181": 0.38947368421052636,
        "rougel-142": 0.45121951219512196,
        "rougel-22": 0.4748201438848921,
        "rougel-157": 0.45744680851063835,
        "rougel-111": 0.4729064039408867,
        "rougel-8": 0.4680851063829787,
        "rougel-7": 0.6257668711656441,
        "rougel-23": 0.619718309859155,
        "rougel-55": 0.5238095238095238,
        "rougel-59": 0.47872340425531923,
        "meteor-169": 0.5146999252594523,
        "meteor-28": 0.5934502005930578,
        "meteor-6": 0.5934502005930578,
        "meteor-197": 0.47434768385974235,
        "meteor-70": 0.5309234040627969,
        "meteor-62": 0.6144310235219325,
        "meteor-57": 0.4767524883406535,
        "meteor-35": 0.7936507936507937,
        "meteor-196": 0.5533530971925066,
        "meteor-26": 0.5934502005930578,
        "meteor-181": 0.5108238291757005,
        "meteor-142": 0.48571865844593115,
        "meteor-22": 0.30572891511542455,
        "meteor-157": 0.5188603988603989,
        "meteor-111": 0.5899720475192173,
        "meteor-8": 0.5934502005930578,
        "meteor-7": 0.6823895120962291,
        "meteor-23": 0.49384905599535667,
        "meteor-55": 0.5470559210526316,
        "meteor-59": 0.6144310235219325,
        "ruby-169": 0.45945945945945943,
        "ruby-28": 0.2894736842105263,
        "ruby-6": 0.29824561403508776,
        "ruby-197": 0.25984251968503935,
        "ruby-70": 0.26724137931034486,
        "ruby-62": 0.29824561403508776,
        "ruby-57": 0.26016260162601623,
        "ruby-35": 0.38888888888888884,
        "ruby-196": 0.319672131147541,
        "ruby-26": 0.29824561403508776,
        "ruby-181": 0.2586206896551724,
        "ruby-142": 0.24444444444444446,
        "ruby-22": 0.3648648648648649,
        "ruby-157": 0.2894736842105263,
        "ruby-111": 0.31007751937984496,
        "ruby-8": 0.29824561403508776,
        "ruby-7": 0.4719101123595506,
        "ruby-23": 0.4054054054054054,
        "ruby-55": 0.34042553191489366,
        "ruby-59": 0.29824561403508776,
        "codebertscore_f1-169": 0.8613981604576111,
        "codebertscore_f3-169": 0.8530562520027161,
        "codebertscore_f1-28": 0.8339488506317139,
        "codebertscore_f3-28": 0.8454915285110474,
        "codebertscore_f1-6": 0.8463102579116821,
        "codebertscore_f3-6": 0.86006098985672,
        "codebertscore_f1-197": 0.8237189650535583,
        "codebertscore_f3-197": 0.8189540505409241,
        "codebertscore_f1-70": 0.8304648399353027,
        "codebertscore_f3-70": 0.8266245722770691,
        "codebertscore_f1-62": 0.8500381708145142,
        "codebertscore_f3-62": 0.8583739399909973,
        "codebertscore_f1-57": 0.7867744565010071,
        "codebertscore_f3-57": 0.7989631295204163,
        "codebertscore_f1-35": 0.8812465071678162,
        "codebertscore_f3-35": 0.8836426138877869,
        "codebertscore_f1-196": 0.8387898802757263,
        "codebertscore_f3-196": 0.8505852818489075,
        "codebertscore_f1-26": 0.8375145196914673,
        "codebertscore_f3-26": 0.8463735580444336,
        "codebertscore_f1-181": 0.8098012208938599,
        "codebertscore_f3-181": 0.8113933801651001,
        "codebertscore_f1-142": 0.8367210030555725,
        "codebertscore_f3-142": 0.8373152613639832,
        "codebertscore_f1-22": 0.8009970188140869,
        "codebertscore_f3-22": 0.7829036712646484,
        "codebertscore_f1-157": 0.8473876714706421,
        "codebertscore_f3-157": 0.8527114391326904,
        "codebertscore_f1-111": 0.8232009410858154,
        "codebertscore_f3-111": 0.8433687090873718,
        "codebertscore_f1-8": 0.8570804595947266,
        "codebertscore_f3-8": 0.8634213209152222,
        "codebertscore_f1-7": 0.8933178186416626,
        "codebertscore_f3-7": 0.8919960856437683,
        "codebertscore_f1-23": 0.8660231232643127,
        "codebertscore_f3-23": 0.8545982837677002,
        "codebertscore_f1-55": 0.857830286026001,
        "codebertscore_f3-55": 0.8606687784194946,
        "codebertscore_f1-59": 0.8683457970619202,
        "codebertscore_f3-59": 0.8726136684417725,
        "codebertscore_s_f1-169": 0.9112813472747803,
        "codebertscore_s_f3-169": 0.9016481637954712,
        "codebertscore_s_f1-28": 0.890438973903656,
        "codebertscore_s_f3-28": 0.8990632891654968,
        "codebertscore_s_f1-6": 0.8928520679473877,
        "codebertscore_s_f3-6": 0.9043123126029968,
        "codebertscore_s_f1-197": 0.883467435836792,
        "codebertscore_s_f3-197": 0.8810445070266724,
        "codebertscore_s_f1-70": 0.8890374898910522,
        "codebertscore_s_f3-70": 0.8858132362365723,
        "codebertscore_s_f1-62": 0.8993588089942932,
        "codebertscore_s_f3-62": 0.9067839980125427,
        "codebertscore_s_f1-57": 0.8554697632789612,
        "codebertscore_s_f3-57": 0.8689334392547607,
        "codebertscore_s_f1-35": 0.9221875071525574,
        "codebertscore_s_f3-35": 0.9237223267555237,
        "codebertscore_s_f1-196": 0.8946274518966675,
        "codebertscore_s_f3-196": 0.9058483242988586,
        "codebertscore_s_f1-26": 0.8928852677345276,
        "codebertscore_s_f3-26": 0.8985627293586731,
        "codebertscore_s_f1-181": 0.8751616477966309,
        "codebertscore_s_f3-181": 0.876165509223938,
        "codebertscore_s_f1-142": 0.8939439654350281,
        "codebertscore_s_f3-142": 0.8899754881858826,
        "codebertscore_s_f1-22": 0.8701537251472473,
        "codebertscore_s_f3-22": 0.8524758815765381,
        "codebertscore_s_f1-157": 0.8995979428291321,
        "codebertscore_s_f3-157": 0.9022931456565857,
        "codebertscore_s_f1-111": 0.8802587985992432,
        "codebertscore_s_f3-111": 0.8966799378395081,
        "codebertscore_s_f1-8": 0.9072379469871521,
        "codebertscore_s_f3-8": 0.9108888506889343,
        "codebertscore_s_f1-7": 0.9309900999069214,
        "codebertscore_s_f3-7": 0.9284486174583435,
        "codebertscore_s_f1-23": 0.9152342677116394,
        "codebertscore_s_f3-23": 0.9033327698707581,
        "codebertscore_s_f1-55": 0.9032052159309387,
        "codebertscore_s_f3-55": 0.9066848754882812,
        "codebertscore_s_f1-59": 0.9139074683189392,
        "codebertscore_s_f3-59": 0.9188672304153442,
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "3 - The code snippet correctly implements the required functionalities of the problem, except for the calculation of the factorial. The function \"factorial\" is not defined in the code snippet, so it will not compile. However, assuming that the function is defined elsewhere and correctly calculates the factorial, the code snippet should pass all possible tests.",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-169": 2,
        "raw_gpt35_nswr-169": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-142": 2,
        "raw_gpt35_nswr-142": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-111": 4,
        "raw_gpt35_nswr-111": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Return sorted unique elements in a list",
        "task_id": "34",
        "33": "std::vector<long> a;\n  std::sort(l.begin(), l.end());\n  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n  return l;",
        "grade-33": {
            "execution": 1
        },
        "6": "std::vector<long>::iterator p;\n    sort(l.begin(), l.end());\n    p = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), p));\n    return l;",
        "grade-6": {
            "execution": 1
        },
        "86": "std::vector<long> ans;\n  std::sort(l.begin(), l.end());\n  ans.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i - 1] != l[i]) {\n      ans.push_back(l[i]);\n    }\n  }\n  return ans;",
        "grade-86": {
            "execution": 1
        },
        "77": "std::vector<long> uniq;\n    std::sort(l.begin(), l.end());\n    for (std::vector<long>::iterator it = l.begin(); it != l.end(); ++it) {\n        if (it == l.begin() || *it != *(it - 1)) {\n            uniq.push_back(*it);\n        }\n    }\n    return uniq;",
        "grade-77": {
            "execution": 1
        },
        "70": "std::vector<long> v;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;",
        "grade-70": {
            "execution": 1
        },
        "41": "std::vector<long> new_list;\n    std::sort(l.begin(), l.end());\n    new_list.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i-1] != l[i]) {\n            new_list.push_back(l[i]);\n        }\n    }\n    return new_list;",
        "grade-41": {
            "execution": 1
        },
        "30": "// your code here\n    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
        "grade-30": {
            "execution": 1
        },
        "193": "std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
        "grade-193": {
            "execution": 1
        },
        "22": "std::vector<long>::iterator it;\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n    std::sort(l.begin(), l.end());\n    return l;",
        "grade-22": {
            "execution": 0
        },
        "144": "std::vector<long> u;\n  std::sort(l.begin(), l.end());\n  for (std::vector<long>::iterator it = l.begin(); it != l.end(); it++) {\n    if (it == l.begin() || *it != *(it - 1)) {\n      u.push_back(*it);\n    }\n  }\n  return u;",
        "grade-144": {
            "execution": 1
        },
        "8": "std::vector<long> out = {};\n  for (long x : l) {\n    if (std::find(out.begin(), out.end(), x) == out.end()) {\n      out.push_back(x);\n    }\n  }\n  std::sort(out.begin(), out.end());\n  return out;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(l.size() != 0);\n    // std::sort(l.begin(), l.end());\n    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n        int found = 0;\n        for (int j = 0; j < result.size(); j++) {\n            if (l[i] == result[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (found == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "assert(l.size() > 0);\n    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;",
        "grade-23": {
            "execution": 1
        },
        "66": "sort(l.begin(), l.end());\n    auto it = unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;",
        "grade-66": {
            "execution": 1
        },
        "72": "std::sort(l.begin(), l.end());\n    std::vector<long>::iterator pos = std::unique(l.begin(), l.end());\n    l.erase(pos, l.end());\n    return l;",
        "grade-72": {
            "execution": 1
        },
        "176": "std::vector<long>::iterator it;\n  std::sort(l.begin(), l.end());\n  it = std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(), it));\n  return l;",
        "grade-176": {
            "execution": 1
        },
        "59": "std::vector<long> result;\n    for (auto& i : l) {\n        if (std::find(result.begin(), result.end(), i) == result.end()) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
        "grade-59": {
            "execution": 1
        },
        "143": "std::vector<long> res;\n    for (auto i: l) {\n        if (std::find(res.begin(), res.end(), i) == res.end()) {\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;",
        "grade-143": {
            "execution": 1
        },
        "67": "std::vector<long> res;\n  sort(l.begin(), l.end());\n  res.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      res.push_back(l[i]);\n    }\n  }\n  return res;",
        "grade-67": {
            "execution": 1
        },
        "155": "std::vector<long> s;\n  std::sort(l.begin(), l.end());\n  s.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      s.push_back(l[i]);\n    }\n  }\n  return s;",
        "grade-155": {
            "execution": 1
        },
        "bleu-33": 0.2540744409594753,
        "bleu-6": 0.2551577493498447,
        "bleu-86": 0.4520528100256832,
        "bleu-77": 0.2251342876013167,
        "bleu-70": 0.48839385169691374,
        "bleu-41": 0.4520528100256832,
        "bleu-30": 0.39117993108227384,
        "bleu-193": 0.4137951630836755,
        "bleu-22": 0.2511548639106326,
        "bleu-144": 0.23056310581478295,
        "bleu-8": 0.5662576518023694,
        "bleu-7": 0.33586800861201227,
        "bleu-23": 0.29628481292475817,
        "bleu-66": 0.22144933984413495,
        "bleu-72": 0.25261836702467005,
        "bleu-176": 0.2511548639106326,
        "bleu-59": 0.30676900433671406,
        "bleu-143": 0.3064139466299246,
        "bleu-67": 0.4611163950170764,
        "bleu-155": 0.4443759830152445,
        "codebleu-33": 0.5182722895164278,
        "codebleu-6": 0.5345407586017685,
        "codebleu-86": 0.6624460280009536,
        "codebleu-77": 0.6377198997043695,
        "codebleu-70": 0.6486306170013847,
        "codebleu-41": 0.6624460280009536,
        "codebleu-30": 0.6527090365444044,
        "codebleu-193": 0.6556780299855716,
        "codebleu-22": 0.5432220932621394,
        "codebleu-144": 0.6385825962276239,
        "codebleu-8": 0.670933851881665,
        "codebleu-7": 0.7500889141540511,
        "codebleu-23": 0.6269756070091232,
        "codebleu-66": 0.4662878543273691,
        "codebleu-72": 0.4994317438230825,
        "codebleu-176": 0.5432220932621394,
        "codebleu-59": 0.6162616502913483,
        "codebleu-143": 0.6167984311274294,
        "codebleu-67": 0.6633567245371557,
        "codebleu-155": 0.6612971354816561,
        "chrf-33": 0.3324705938863812,
        "chrf-6": 0.335508944850915,
        "chrf-86": 0.4504305258028791,
        "chrf-77": 0.37099233438349716,
        "chrf-70": 0.4772869633249851,
        "chrf-41": 0.45604811910424364,
        "chrf-30": 0.42572265677523646,
        "chrf-193": 0.4281874462403008,
        "chrf-22": 0.34202355105427884,
        "chrf-144": 0.3775734130949043,
        "chrf-8": 0.6755490497128016,
        "chrf-7": 0.47905576953982915,
        "chrf-23": 0.3555820159511543,
        "chrf-66": 0.3081765278370486,
        "chrf-72": 0.33270124906460874,
        "chrf-176": 0.33853026530973823,
        "chrf-59": 0.44736055251506196,
        "chrf-143": 0.4115734199682656,
        "chrf-67": 0.46164779664825495,
        "chrf-155": 0.4485488167653165,
        "rougel-33": 0.4666666666666666,
        "rougel-6": 0.45161290322580644,
        "rougel-86": 0.471264367816092,
        "rougel-77": 0.3804347826086957,
        "rougel-70": 0.4941176470588235,
        "rougel-41": 0.471264367816092,
        "rougel-30": 0.446927374301676,
        "rougel-193": 0.45977011494252873,
        "rougel-22": 0.4683544303797468,
        "rougel-144": 0.3804347826086957,
        "rougel-8": 0.7349397590361445,
        "rougel-7": 0.43317972350230416,
        "rougel-23": 0.43786982248520706,
        "rougel-66": 0.43971631205673756,
        "rougel-72": 0.41333333333333333,
        "rougel-176": 0.44303797468354433,
        "rougel-59": 0.6463414634146342,
        "rougel-143": 0.6503067484662576,
        "rougel-67": 0.4795321637426901,
        "rougel-155": 0.471264367816092,
        "meteor-33": 0.4039280853665753,
        "meteor-6": 0.37308847004378837,
        "meteor-86": 0.5008742005460948,
        "meteor-77": 0.4025506089413302,
        "meteor-70": 0.5088561901061901,
        "meteor-41": 0.5008742005460948,
        "meteor-30": 0.47954152249134946,
        "meteor-193": 0.4823230858468678,
        "meteor-22": 0.4362782009748125,
        "meteor-144": 0.4025506089413302,
        "meteor-8": 0.7171125900762038,
        "meteor-7": 0.48918047882136284,
        "meteor-23": 0.4533000071033555,
        "meteor-66": 0.35355053894767974,
        "meteor-72": 0.3971604337505533,
        "meteor-176": 0.37176546128476795,
        "meteor-59": 0.6243861981412283,
        "meteor-143": 0.6251199069522051,
        "meteor-67": 0.49017641745759766,
        "meteor-155": 0.4884704670488126,
        "ruby-33": 0.33720930232558144,
        "ruby-6": 0.36046511627906974,
        "ruby-86": 0.19318181818181823,
        "ruby-77": 0.23469387755102045,
        "ruby-70": 0.2558139534883721,
        "ruby-41": 0.19318181818181823,
        "ruby-30": 0.20430107526881724,
        "ruby-193": 0.20454545454545459,
        "ruby-22": 0.33720930232558144,
        "ruby-144": 0.23469387755102045,
        "ruby-8": 0.5930232558139534,
        "ruby-7": 0.2748091603053435,
        "ruby-23": 0.2674418604651163,
        "ruby-66": 0.34883720930232553,
        "ruby-72": 0.2906976744186046,
        "ruby-176": 0.32558139534883723,
        "ruby-59": 0.4883720930232558,
        "ruby-143": 0.4883720930232558,
        "ruby-67": 0.19767441860465118,
        "ruby-155": 0.20454545454545459,
        "codebertscore_f1-33": 0.7837990522384644,
        "codebertscore_f3-33": 0.7666188478469849,
        "codebertscore_f1-6": 0.7907574772834778,
        "codebertscore_f3-6": 0.7752078175544739,
        "codebertscore_f1-86": 0.8800535798072815,
        "codebertscore_f3-86": 0.8803319931030273,
        "codebertscore_f1-77": 0.7991403937339783,
        "codebertscore_f3-77": 0.8087224960327148,
        "codebertscore_f1-70": 0.8817956447601318,
        "codebertscore_f3-70": 0.8841149806976318,
        "codebertscore_f1-41": 0.8564226031303406,
        "codebertscore_f3-41": 0.8598841428756714,
        "codebertscore_f1-30": 0.848883330821991,
        "codebertscore_f3-30": 0.8637152910232544,
        "codebertscore_f1-193": 0.8702483773231506,
        "codebertscore_f3-193": 0.8717270493507385,
        "codebertscore_f1-22": 0.7911309599876404,
        "codebertscore_f3-22": 0.7784846425056458,
        "codebertscore_f1-144": 0.8136188983917236,
        "codebertscore_f3-144": 0.8240852355957031,
        "codebertscore_f1-8": 0.8957017064094543,
        "codebertscore_f3-8": 0.887671947479248,
        "codebertscore_f1-7": 0.8229588866233826,
        "codebertscore_f3-7": 0.8399807810783386,
        "codebertscore_f1-23": 0.787017285823822,
        "codebertscore_f3-23": 0.7775425910949707,
        "codebertscore_f1-66": 0.7794085144996643,
        "codebertscore_f3-66": 0.7519956231117249,
        "codebertscore_f1-72": 0.7841466665267944,
        "codebertscore_f3-72": 0.7655483484268188,
        "codebertscore_f1-176": 0.7855048775672913,
        "codebertscore_f3-176": 0.7726245522499084,
        "codebertscore_f1-59": 0.8704906105995178,
        "codebertscore_f3-59": 0.8712451457977295,
        "codebertscore_f1-143": 0.8815100193023682,
        "codebertscore_f3-143": 0.8777966499328613,
        "codebertscore_f1-67": 0.8851707577705383,
        "codebertscore_f3-67": 0.8829706907272339,
        "codebertscore_f1-155": 0.8714057207107544,
        "codebertscore_f3-155": 0.8700273633003235,
        "codebertscore_s_f1-33": 0.7836694717407227,
        "codebertscore_s_f3-33": 0.7635473608970642,
        "codebertscore_s_f1-6": 0.7906612157821655,
        "codebertscore_s_f3-6": 0.7737858891487122,
        "codebertscore_s_f1-86": 0.8825071454048157,
        "codebertscore_s_f3-86": 0.8866114020347595,
        "codebertscore_s_f1-77": 0.8002089858055115,
        "codebertscore_s_f3-77": 0.8109385967254639,
        "codebertscore_s_f1-70": 0.8808687925338745,
        "codebertscore_s_f3-70": 0.8854937553405762,
        "codebertscore_s_f1-41": 0.8564832210540771,
        "codebertscore_s_f3-41": 0.8634162545204163,
        "codebertscore_s_f1-30": 0.8462045788764954,
        "codebertscore_s_f3-30": 0.8636168241500854,
        "codebertscore_s_f1-193": 0.8700646758079529,
        "codebertscore_s_f3-193": 0.8741629719734192,
        "codebertscore_s_f1-22": 0.7905833125114441,
        "codebertscore_s_f3-22": 0.776422381401062,
        "codebertscore_s_f1-144": 0.8176127672195435,
        "codebertscore_s_f3-144": 0.829595685005188,
        "codebertscore_s_f1-8": 0.8976197838783264,
        "codebertscore_s_f3-8": 0.8892457485198975,
        "codebertscore_s_f1-7": 0.8363159894943237,
        "codebertscore_s_f3-7": 0.8571023941040039,
        "codebertscore_s_f1-23": 0.7883902788162231,
        "codebertscore_s_f3-23": 0.7775660157203674,
        "codebertscore_s_f1-66": 0.790220320224762,
        "codebertscore_s_f3-66": 0.7601443529129028,
        "codebertscore_s_f1-72": 0.7879185676574707,
        "codebertscore_s_f3-72": 0.767166793346405,
        "codebertscore_s_f1-176": 0.7873449325561523,
        "codebertscore_s_f3-176": 0.7728703022003174,
        "codebertscore_s_f1-59": 0.8730219006538391,
        "codebertscore_s_f3-59": 0.8748504519462585,
        "codebertscore_s_f1-143": 0.8820558190345764,
        "codebertscore_s_f3-143": 0.8794983625411987,
        "codebertscore_s_f1-67": 0.8867232799530029,
        "codebertscore_s_f3-67": 0.8880070447921753,
        "codebertscore_s_f1-155": 0.873673677444458,
        "codebertscore_s_f3-155": 0.8763413429260254,
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-86": 4,
        "raw_gpt35_nsnr-86": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-86": 3,
        "raw_gpt35_nswr-86": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-41": 3,
        "raw_gpt35_nswr-41": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlong modp(long n, long p) {\n",
        "snippet": [
            "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n"
        ],
        "simplified": "Return 2^n modulo p (be aware of numerics).",
        "task_id": "49",
        "165": "assert(p != 0);\n  assert(n != 0);\n  assert(p != 1);\n  long result = 1;\n  while (n > 0) {\n    if (n & 1) {\n      result = (result * (long)result) % p;\n    }\n    n >>= 1;\n  }\n  return result;",
        "grade-165": {
            "execution": 0
        },
        "28": "long res = 1;\n    for (long i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n <= 1) {\n        return n;\n    }\n    if (n % 2 == 0) {\n        return (long) pow(modp(n / 2, p), 2) % p;\n    }\n    return (long) (modp(n - 1, p) * n) % p;",
        "grade-6": {
            "execution": 0
        },
        "192": "if(n == 0) {\n    return 1;\n  }\n  long r = modp(n/2, p);\n  r = r*r % p;\n  if(n%2) {\n    r = r*2 % p;\n  }\n  return r;",
        "grade-192": {
            "execution": 1
        },
        "71": "if (n < 0) {\n        n += (-n/p + 1) * p;\n    }\n    long c = 1;\n    while (n > 0) {\n        if (n & 1) {\n            c = (c * 2) % p;\n        }\n        n >>= 1;\n        if (n > 0) {\n            c = (c * 2) % p;\n        }\n    }\n    return c;",
        "grade-71": {
            "execution": 0
        },
        "63": "if (n >= p) n %= p;\n\tif (n == 0) return 1;\n\tif (n == 1) return n;\n\tlong w = n, r = 1;\n\twhile (w > 0) {\n\t\tif (w & 1) r = (r * n) % p;\n\t\tw >>= 1;\n\t\tn = (n * n) % p;\n\t}\n\treturn r;",
        "grade-63": {
            "execution": 0
        },
        "58": "if (n == 0) {\n        return 1;\n    } else if (n == 1) {\n        return n;\n    } else if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n        return (n * modp(n - 1, p)) % p;\n    }",
        "grade-58": {
            "execution": 0
        },
        "35": "assert(n >= 0);\n  assert(p > 0);\n  if (n < p) {\n    return n;\n  }\n  long x = 1;\n  while (n > 0) {\n    if (n % 2 == 1) {\n      x = (x * 2) % p;\n    }\n    n /= 2;\n    if (n > 0) {\n      x = (x * x) % p;\n    }\n  }\n  return x;",
        "grade-35": {
            "execution": 0
        },
        "191": "if (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n % 2 == 0) {\n\t\treturn modp(n / 2, p) * modp(n / 2, p) % p;\n\t}\n\treturn modp(n - 1, p) * 2 % p;",
        "grade-191": {
            "execution": 1
        },
        "26": "long result = 1;\n    for (long i = 1; i <= n; i++) {\n        result = result * 2 % p;\n    }\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "175": "long res = 1;\n    while (n > 0) {\n        res = (res * (n % 2 ? p : 1)) % p;\n        n >>= 1;\n        p = (p * p) % MOD;\n    }\n    return res;",
        "grade-175": {
            "execution": 0
        },
        "141": "assert(p > 0);\n    // return (n < p) ? n : (modp(n / 2, p) * 2) % p;\n    if (n < p) return n;\n    else return (modp(n / 2, p) * 2) % p;",
        "grade-141": {
            "execution": 0
        },
        "22": "long r = 1;\n  while (n > 0) {\n    if (n % 2 == 1)\n      r = (r * 2) % p;\n    n = n / 2;\n  }\n  return r;",
        "grade-22": {
            "execution": 0
        },
        "153": "long a = 1;\n  long b = 2;\n  while (n) {\n    if (n % 2) {\n      a = (a * b) % p;\n    }\n    b = (b * b) % p;\n    n /= 2;\n  }\n  return a;",
        "grade-153": {
            "execution": 1
        },
        "109": "long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n * n) % p;\n    }\n    return res % p;",
        "grade-109": {
            "execution": 0
        },
        "8": "if (n == 0) return 1;\n    assert(p > 0);\n    long res = modp(n/2, p);\n    if (n % 2 == 0)\n        return res * res % p;\n    else\n        return (res * res % p) * n % p;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(n >= 0);\n    assert(p > 0);\n    long res = 1;\n    for (int i = 1; i <= n; i++)\n        res = (res * 2) % p;\n    return res;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (n < 0)\n        return modp(-n, p);\n    if (n < p)\n        return n;\n    if (n % 2 == 0)\n        return (modp(n / 2, p) * modp(n / 2, p)) % p;\n    else\n        return (modp(n / 2, p) * modp(n / 2, p) * 2) % p;",
        "grade-23": {
            "execution": 0
        },
        "56": "assert(p >= 2);\n    if (n >= p)\n        n %= p;\n    long c = 1;\n    while (n > 0) {\n        if (n & 1)\n            c = (c * 2) % p;\n        n >>= 1;\n        // cout << c << ' ' << n << endl;\n    }\n    return c;",
        "grade-56": {
            "execution": 0
        },
        "60": "if (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n % 2 == 0) {\n\t\tlong m = modp(n / 2, p);\n\t\treturn (m * m) % p;\n\t}\n\treturn (2 * modp(n - 1, p)) % p;",
        "grade-60": {
            "execution": 1
        },
        "bleu-165": 0.07147140047248485,
        "bleu-28": 0.5844356470407898,
        "bleu-6": 0.0920209286276194,
        "bleu-192": 0.059166715390243055,
        "bleu-71": 0.09611931143621717,
        "bleu-63": 0.058436524375303424,
        "bleu-58": 0.05840817340853526,
        "bleu-35": 0.09186666854805313,
        "bleu-191": 0.07149192938468997,
        "bleu-26": 0.35660874908534756,
        "bleu-175": 0.09451121633240789,
        "bleu-141": 0.10133918279681271,
        "bleu-22": 0.18256517093880106,
        "bleu-153": 0.0927097496488127,
        "bleu-109": 0.08567433294566591,
        "bleu-8": 0.04374508612073215,
        "bleu-7": 0.39052355441618886,
        "bleu-23": 0.07747007214426521,
        "bleu-56": 0.10313151558812103,
        "bleu-60": 0.06993796316788031,
        "codebleu-165": 0.5240993144737174,
        "codebleu-28": 0.7546727903182827,
        "codebleu-6": 0.43707778205667147,
        "codebleu-192": 0.49664224664224654,
        "codebleu-71": 0.5690642535976075,
        "codebleu-63": 0.488379619902123,
        "codebleu-58": 0.4705657808040187,
        "codebleu-35": 0.6027204593444434,
        "codebleu-191": 0.4220346601281473,
        "codebleu-26": 0.6260136765836218,
        "codebleu-175": 0.5352927034665992,
        "codebleu-141": 0.4279918630308121,
        "codebleu-22": 0.555701183870965,
        "codebleu-153": 0.5434059034668773,
        "codebleu-109": 0.5466786333856254,
        "codebleu-8": 0.4206349206349206,
        "codebleu-7": 0.7727763880724632,
        "codebleu-23": 0.4335465993256315,
        "codebleu-56": 0.5205482678976171,
        "codebleu-60": 0.4549591326103264,
        "chrf-165": 0.19397931288050219,
        "chrf-28": 0.4381552436788979,
        "chrf-6": 0.19129552729029853,
        "chrf-192": 0.18344770121566367,
        "chrf-71": 0.20173199215265167,
        "chrf-63": 0.18087761730491084,
        "chrf-58": 0.1996571669719188,
        "chrf-35": 0.20395809860164774,
        "chrf-191": 0.17699247301462165,
        "chrf-26": 0.3430716862378933,
        "chrf-175": 0.17001791151430168,
        "chrf-141": 0.18344425567044703,
        "chrf-22": 0.21463346741750444,
        "chrf-153": 0.17849481676030896,
        "chrf-109": 0.17340442967026581,
        "chrf-8": 0.15947042749206805,
        "chrf-7": 0.4476376882705967,
        "chrf-23": 0.19201488412997741,
        "chrf-56": 0.21468574970472326,
        "chrf-60": 0.19047375993598611,
        "rougel-165": 0.3366336633663366,
        "rougel-28": 0.782608695652174,
        "rougel-6": 0.3125,
        "rougel-192": 0.3764705882352941,
        "rougel-71": 0.3333333333333333,
        "rougel-63": 0.30508474576271183,
        "rougel-58": 0.32432432432432434,
        "rougel-35": 0.3166666666666667,
        "rougel-191": 0.34782608695652173,
        "rougel-26": 0.7058823529411765,
        "rougel-175": 0.38095238095238104,
        "rougel-141": 0.3010752688172043,
        "rougel-22": 0.45333333333333337,
        "rougel-153": 0.372093023255814,
        "rougel-109": 0.38202247191011235,
        "rougel-8": 0.3440860215053763,
        "rougel-7": 0.6506024096385542,
        "rougel-23": 0.27586206896551724,
        "rougel-56": 0.3119266055045871,
        "rougel-60": 0.3404255319148936,
        "meteor-165": 0.38194884373875543,
        "meteor-28": 0.814699413489736,
        "meteor-6": 0.3593303263334319,
        "meteor-192": 0.43220462788289926,
        "meteor-71": 0.5349261178276722,
        "meteor-63": 0.4235131598080559,
        "meteor-58": 0.43125360920402567,
        "meteor-35": 0.4213523783804638,
        "meteor-191": 0.34917582417582416,
        "meteor-26": 0.670729411764706,
        "meteor-175": 0.40018797391729155,
        "meteor-141": 0.3458904109589041,
        "meteor-22": 0.4146327118743752,
        "meteor-153": 0.3550279329608938,
        "meteor-109": 0.3804857947391314,
        "meteor-8": 0.3482191780821917,
        "meteor-7": 0.7756359586087956,
        "meteor-23": 0.3547791778032328,
        "meteor-56": 0.44765237678623504,
        "meteor-60": 0.39310806289729006,
        "ruby-165": 0.25373134328358204,
        "ruby-28": 0.7428571428571429,
        "ruby-6": 0.19354838709677424,
        "ruby-192": 0.23529411764705888,
        "ruby-71": 0.21250000000000002,
        "ruby-63": 0.2142857142857143,
        "ruby-58": 0.23376623376623373,
        "ruby-35": 0.2093023255813954,
        "ruby-191": 0.2586206896551724,
        "ruby-26": 0.6176470588235294,
        "ruby-175": 0.28,
        "ruby-141": 0.1694915254237288,
        "ruby-22": 0.3902439024390244,
        "ruby-153": 0.2692307692307693,
        "ruby-109": 0.2727272727272727,
        "ruby-8": 0.23728813559322037,
        "ruby-7": 0.5306122448979591,
        "ruby-23": 0.1707317073170732,
        "ruby-56": 0.22666666666666668,
        "ruby-60": 0.25,
        "codebertscore_f1-165": 0.7710584402084351,
        "codebertscore_f3-165": 0.7731994986534119,
        "codebertscore_f1-28": 0.9432542324066162,
        "codebertscore_f3-28": 0.9432541728019714,
        "codebertscore_f1-6": 0.741357684135437,
        "codebertscore_f3-6": 0.7247570157051086,
        "codebertscore_f1-192": 0.7860817909240723,
        "codebertscore_f3-192": 0.7717971801757812,
        "codebertscore_f1-71": 0.7562049031257629,
        "codebertscore_f3-71": 0.7586259245872498,
        "codebertscore_f1-63": 0.7493194341659546,
        "codebertscore_f3-63": 0.7396034002304077,
        "codebertscore_f1-58": 0.7453714609146118,
        "codebertscore_f3-58": 0.7431691884994507,
        "codebertscore_f1-35": 0.7732197046279907,
        "codebertscore_f3-35": 0.7708749175071716,
        "codebertscore_f1-191": 0.7547977566719055,
        "codebertscore_f3-191": 0.7394826412200928,
        "codebertscore_f1-26": 0.9182762503623962,
        "codebertscore_f3-26": 0.9149295687675476,
        "codebertscore_f1-175": 0.8184438347816467,
        "codebertscore_f3-175": 0.8073084354400635,
        "codebertscore_f1-141": 0.7582276463508606,
        "codebertscore_f3-141": 0.7403820753097534,
        "codebertscore_f1-22": 0.8377480506896973,
        "codebertscore_f3-22": 0.8285777568817139,
        "codebertscore_f1-153": 0.7861306071281433,
        "codebertscore_f3-153": 0.7787302732467651,
        "codebertscore_f1-109": 0.8054283261299133,
        "codebertscore_f3-109": 0.7951169013977051,
        "codebertscore_f1-8": 0.7640870809555054,
        "codebertscore_f3-8": 0.7565087676048279,
        "codebertscore_f1-7": 0.8932934999465942,
        "codebertscore_f3-7": 0.9095647931098938,
        "codebertscore_f1-23": 0.7321573495864868,
        "codebertscore_f3-23": 0.7210096120834351,
        "codebertscore_f1-56": 0.7668566107749939,
        "codebertscore_f3-56": 0.7695295214653015,
        "codebertscore_f1-60": 0.7538431286811829,
        "codebertscore_f3-60": 0.743455171585083,
        "codebertscore_s_f1-165": 0.7734189033508301,
        "codebertscore_s_f3-165": 0.7750193476676941,
        "codebertscore_s_f1-28": 0.9290060997009277,
        "codebertscore_s_f3-28": 0.929006040096283,
        "codebertscore_s_f1-6": 0.7576978802680969,
        "codebertscore_s_f3-6": 0.7406364679336548,
        "codebertscore_s_f1-192": 0.7999647855758667,
        "codebertscore_s_f3-192": 0.7870407104492188,
        "codebertscore_s_f1-71": 0.7675380110740662,
        "codebertscore_s_f3-71": 0.7721495628356934,
        "codebertscore_s_f1-63": 0.7546897530555725,
        "codebertscore_s_f3-63": 0.746414840221405,
        "codebertscore_s_f1-58": 0.7480831742286682,
        "codebertscore_s_f3-58": 0.7479550838470459,
        "codebertscore_s_f1-35": 0.7743540406227112,
        "codebertscore_s_f3-35": 0.7738028168678284,
        "codebertscore_s_f1-191": 0.7643385529518127,
        "codebertscore_s_f3-191": 0.7491621971130371,
        "codebertscore_s_f1-26": 0.9083995819091797,
        "codebertscore_s_f3-26": 0.9038410186767578,
        "codebertscore_s_f1-175": 0.8101826906204224,
        "codebertscore_s_f3-175": 0.7994444370269775,
        "codebertscore_s_f1-141": 0.7672193646430969,
        "codebertscore_s_f3-141": 0.7482682466506958,
        "codebertscore_s_f1-22": 0.8269044160842896,
        "codebertscore_s_f3-22": 0.8164554834365845,
        "codebertscore_s_f1-153": 0.7738939523696899,
        "codebertscore_s_f3-153": 0.7633195519447327,
        "codebertscore_s_f1-109": 0.7983506917953491,
        "codebertscore_s_f3-109": 0.7893413305282593,
        "codebertscore_s_f1-8": 0.770667314529419,
        "codebertscore_s_f3-8": 0.7647534608840942,
        "codebertscore_s_f1-7": 0.8958714008331299,
        "codebertscore_s_f3-7": 0.9148667454719543,
        "codebertscore_s_f1-23": 0.7334652543067932,
        "codebertscore_s_f3-23": 0.7238152027130127,
        "codebertscore_s_f1-56": 0.7692033648490906,
        "codebertscore_s_f3-56": 0.7756615281105042,
        "codebertscore_s_f1-60": 0.7633873224258423,
        "codebertscore_s_f3-60": 0.7541202902793884,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-191": 3,
        "raw_gpt35_nsnr-191": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 3,
        "raw_gpt35_nsnr-153": "3",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlong minSubArraySum(std::vector<long> nums) {\n",
        "snippet": [
            "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n"
        ],
        "simplified": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
        "task_id": "114",
        "166": "if (nums.size() == 0) {\n    return 0;\n  }\n  long min_sum = nums[0];\n  long sum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    sum = std::min(nums[i], sum + nums[i]);\n    min_sum = std::min(min_sum, sum);\n  }\n  return min_sum;",
        "grade-166": {
            "execution": 1
        },
        "28": "long sum=INT_MAX;\n  long max=0;\n  for(int i=0;i<nums.size();i++){\n    max=max+nums[i];\n    if(max<sum){\n      sum=max;\n    }\n    if(max>0){\n      max=0;\n    }\n  }\n  return sum;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Write your code here\n  long minimum = INT_MAX;\n  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    minimum = std::min(minimum, sum);\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minimum;",
        "grade-6": {
            "execution": 1
        },
        "193": "long i = 0, j = 0, sum = 0, min = INT_MAX;\n    while (j < nums.size()) {\n        sum += nums[j++];\n        while (sum >= 0) {\n            min = std::min(min, sum);\n            sum -= nums[i++];\n        }\n    }\n    return min;",
        "grade-193": {
            "execution": 0
        },
        "71": "// Write your code here\n    int min_sum =0;\n    int curr_sum =0;\n    for(int i=0;i<nums.size();i++){\n        curr_sum += nums[i];\n        if(min_sum > curr_sum){\n            min_sum = curr_sum;\n        }\n        if(curr_sum > 0){\n            curr_sum = 0;\n        }\n    }\n    return min_sum;",
        "grade-71": {
            "execution": 0
        },
        "63": "long min_sum = nums[0];\n    long curr_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum)\n            min_sum = curr_sum;\n        if (curr_sum > 0)\n            curr_sum = 0;\n    }\n    return min_sum;",
        "grade-63": {
            "execution": 1
        },
        "58": "long min = nums[0];\n    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;",
        "grade-58": {
            "execution": 1
        },
        "35": "long currentSum = 0;\n    long minSubArraySum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        if (i == 0) {\n            minSubArraySum = currentSum;\n        } else {\n            minSubArraySum = std::min(minSubArraySum, currentSum);\n        }\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSubArraySum;",
        "grade-35": {
            "execution": 1
        },
        "192": "long minSum = LONG_MAX;\n  long sum = 0;\n  long prev = LONG_MAX;\n  std::sort(nums.begin(), nums.end());\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (prev != LONG_MAX && (sum - prev) < minSum) {\n      minSum = sum - prev;\n    }\n    prev = sum;\n  }\n  return minSum;",
        "grade-192": {
            "execution": 0
        },
        "26": "long minSoFar = LONG_MAX;\n    long curSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curSum += nums[i];\n        minSoFar = std::min(minSoFar, curSum);\n        if (curSum > 0) curSum = 0;\n    }\n    return minSoFar;",
        "grade-26": {
            "execution": 1
        },
        "176": "long m = nums[0];\n  for (auto i = 1; i < nums.size(); i++) {\n    nums[i] = std::min(nums[i], nums[i] + nums[i - 1]);\n    m = std::min(m, nums[i]);\n  }\n  return m;",
        "grade-176": {
            "execution": 1
        },
        "142": "int min = INT_MAX;\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < min) {\n            min = sum;\n        }\n        if(sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;",
        "grade-142": {
            "execution": 0
        },
        "22": "long min = nums[0];\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tlong current = 0;\n\t\tfor (long j = i; j < nums.size(); j++) {\n\t\t\tcurrent += nums[j];\n\t\t\tif (current < min) {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t}\n\t}\n\treturn min;",
        "grade-22": {
            "execution": 1
        },
        "154": "long m = INT_MAX;\n  long sum = 0;\n  for (long n : nums) {\n    sum += n;\n    m = std::min(m, sum);\n    if (sum < 0) sum = 0;\n  }\n  return m;",
        "grade-154": {
            "execution": 0
        },
        "110": "assert(!nums.empty());\n    long min_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        long sub_array_sum = 0;\n        for (int j = i; j < nums.size(); j++) {\n            sub_array_sum += nums[j];\n            if (sub_array_sum < min_sum || i == 0 && j == 0) {\n                min_sum = sub_array_sum;\n            }\n        }\n    }\n    return min_sum;",
        "grade-110": {
            "execution": 1
        },
        "8": "//   int min = INT_MAX;\n    //   int max = INT_MIN;\n    //   for (auto n : nums) {\n    //     if (n < min) {\n    //       min = n;\n    //     }\n    //     if (n > max) {\n    //       max = n;\n    //     }\n    //   }\n    //   return min + max;\n    int min_sum = 0;\n    int sum = 0;\n    int max = INT_MIN;\n    int max_index = 0;\n    int min_index = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (nums[i] < max) {\n            max = nums[i];\n            max_index = i;\n        }\n        if (sum < min_sum) {\n            min_sum = sum;\n            min_index = i;\n        }\n    }\n    return min_sum + max;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Initialize current sum and minimum sum\n    long curr_sum = 0, min_sum = 0;\n\n    // Traverse through the given array\n    for (int i = 0; i < nums.size(); i++) {\n        // Add current element to curr_sum\n        curr_sum = curr_sum + nums[i];\n\n        // If curr_sum is less than 0 then make it equal to 0\n        curr_sum = max(curr_sum, 0);\n\n        // Update minimum sum, if needed\n        min_sum = min(min_sum, curr_sum);\n    }\n    return min_sum;",
        "grade-7": {
            "execution": 0
        },
        "23": "long sum = INT_MAX;\n  int start = 0;\n  int end = 0;\n  long curr_sum = 0;\n  while (end < nums.size()) {\n    curr_sum += nums[end];\n    end++;\n    while (curr_sum >= sum) {\n      sum = curr_sum;\n      curr_sum -= nums[start];\n      start++;\n    }\n  }\n  return sum;",
        "grade-23": {
            "execution": 0
        },
        "56": "if (nums.size() == 0) return 0;\n  long min_sum = nums[0];\n  long curr_sum = 0;\n  for (auto i = 0; i < nums.size(); i++) {\n    curr_sum += nums[i];\n    if (curr_sum < min_sum) min_sum = curr_sum;\n    if (curr_sum > 0) curr_sum = 0;\n  }\n  return min_sum;",
        "grade-56": {
            "execution": 1
        },
        "60": "// Initialize the size of the vector\n  int size = nums.size();\n  // Initialize minimum sum to the first element of the array\n  long min_sum = nums[0];\n  // Initialize the sum of current sub-array to the first element of the array\n  long curr_sum = nums[0];\n  // Check if the number of elements in the array is less than or equal to 1\n  if (size <= 1) {\n    // If the size of the array is less than or equal to 1, then the minimum sum\n    // is the first element in the array\n    return min_sum;\n  }\n  // Loop from the second element in the array to the last element in the array\n  for (int i = 1; i < size; i++) {\n    // Check if the sum of the current sub-array is less than or equal to the\n    // current element in the array\n    if (curr_sum <= nums[i]) {\n      // If the sum of the current sub-array is less than or equal to the current\n      // element in the array, then set the sum of the current sub-array to the\n      // current element in the array\n      curr_sum = nums[i];\n    } else {\n      // If the sum of the current sub-array is greater than the current element\n      // in the array, then add the current element in the array to the sum of\n      // the current sub-array\n      curr_sum += nums[i];\n    }\n    // Check if the sum of the current sub-array is less than the minimum sum\n    if (curr_sum < min_sum) {\n      // If the sum of the current sub-array is less than the minimum sum, then\n      // set the minimum sum to the sum of the current sub-array\n      min_sum = curr_sum;\n    }\n  }\n  // Return the minimum sum\n  return min_sum;",
        "grade-60": {
            "execution": 0
        },
        "bleu-166": 0.4628067114244253,
        "bleu-28": 0.36461689540692893,
        "bleu-6": 0.34703506763881736,
        "bleu-193": 0.20442719936652876,
        "bleu-71": 0.3616372414487667,
        "bleu-63": 0.4128115954184041,
        "bleu-58": 0.17377324835959304,
        "bleu-35": 0.3109683869297181,
        "bleu-192": 0.2795582134305293,
        "bleu-26": 0.3764269462843288,
        "bleu-176": 0.4154005506822422,
        "bleu-142": 0.40212574194197076,
        "bleu-22": 0.48978363074036496,
        "bleu-154": 0.05860576154159155,
        "bleu-110": 0.2633779332529289,
        "bleu-8": 0.20807533238908202,
        "bleu-7": 0.2441313144002505,
        "bleu-23": 0.1362631453063202,
        "bleu-56": 0.3826847622199317,
        "bleu-60": 0.10224189877464555,
        "codebleu-166": 0.713346123880817,
        "codebleu-28": 0.5863192082365872,
        "codebleu-6": 0.5779629730683936,
        "codebleu-193": 0.47886416148471733,
        "codebleu-71": 0.5476822061274575,
        "codebleu-63": 0.5974541028988647,
        "codebleu-58": 0.40680304445976073,
        "codebleu-35": 0.5888662567827557,
        "codebleu-192": 0.6158680128564662,
        "codebleu-26": 0.5357345014362531,
        "codebleu-176": 0.6209185796618659,
        "codebleu-142": 0.5716197762171026,
        "codebleu-22": 0.6603742416585328,
        "codebleu-154": 0.3258252485804766,
        "codebleu-110": 0.5969232851365337,
        "codebleu-8": 0.6619433288308328,
        "codebleu-7": 0.5732101519994657,
        "codebleu-23": 0.48869582012787377,
        "codebleu-56": 0.5972104170983892,
        "codebleu-60": 0.7195368645768481,
        "chrf-166": 0.4441837360812745,
        "chrf-28": 0.3074326638546391,
        "chrf-6": 0.3436310889419574,
        "chrf-193": 0.25891877393141544,
        "chrf-71": 0.39327878286593476,
        "chrf-63": 0.4736635128108368,
        "chrf-58": 0.2539931118005995,
        "chrf-35": 0.49427181987225405,
        "chrf-192": 0.3528989188258216,
        "chrf-26": 0.3869422680427263,
        "chrf-176": 0.35963683339843994,
        "chrf-142": 0.35196059798068235,
        "chrf-22": 0.5376228903793869,
        "chrf-154": 0.1656382299902514,
        "chrf-110": 0.3281384776974182,
        "chrf-8": 0.35703445440822895,
        "chrf-7": 0.4039157519117488,
        "chrf-23": 0.3014291042320417,
        "chrf-56": 0.45017852918726975,
        "chrf-60": 0.30871678686535803,
        "rougel-166": 0.5903614457831325,
        "rougel-28": 0.5793103448275863,
        "rougel-6": 0.5466666666666666,
        "rougel-193": 0.4105960264900662,
        "rougel-71": 0.5466666666666666,
        "rougel-63": 0.6293706293706293,
        "rougel-58": 0.46969696969696967,
        "rougel-35": 0.5303867403314918,
        "rougel-192": 0.5079365079365079,
        "rougel-26": 0.5548387096774194,
        "rougel-176": 0.5620915032679739,
        "rougel-142": 0.611111111111111,
        "rougel-22": 0.6538461538461539,
        "rougel-154": 0.37795275590551186,
        "rougel-110": 0.48000000000000004,
        "rougel-8": 0.40816326530612246,
        "rougel-7": 0.46153846153846156,
        "rougel-23": 0.42666666666666664,
        "rougel-56": 0.5605095541401274,
        "rougel-60": 0.25389755011135856,
        "meteor-166": 0.6539025145220564,
        "meteor-28": 0.5386866059817946,
        "meteor-6": 0.5352067183462533,
        "meteor-193": 0.48870967741935484,
        "meteor-71": 0.5114091635931466,
        "meteor-63": 0.5654860634301011,
        "meteor-58": 0.38768967829051115,
        "meteor-35": 0.5562524262422359,
        "meteor-192": 0.4772878811810239,
        "meteor-26": 0.5646187684825641,
        "meteor-176": 0.5280727155727156,
        "meteor-142": 0.5824511526134122,
        "meteor-22": 0.6429116972171082,
        "meteor-154": 0.26752741136817576,
        "meteor-110": 0.4669588700553332,
        "meteor-8": 0.5091487219275043,
        "meteor-7": 0.4946575682382134,
        "meteor-23": 0.3853812971149123,
        "meteor-56": 0.5535572736070132,
        "meteor-60": 0.4956321263792529,
        "ruby-166": 0.4772727272727273,
        "ruby-28": 0.4358974358974359,
        "ruby-6": 0.39743589743589747,
        "ruby-193": 0.20512820512820518,
        "ruby-71": 0.41025641025641024,
        "ruby-63": 0.5256410256410257,
        "ruby-58": 0.34615384615384615,
        "ruby-35": 0.3495145631067961,
        "ruby-192": 0.3513513513513513,
        "ruby-26": 0.3717948717948718,
        "ruby-176": 0.3846153846153846,
        "ruby-142": 0.4358974358974359,
        "ruby-22": 0.47435897435897434,
        "ruby-154": 0.2692307692307693,
        "ruby-110": 0.3402061855670103,
        "ruby-8": 0.2694610778443114,
        "ruby-7": 0.3557692307692307,
        "ruby-23": 0.23076923076923073,
        "ruby-56": 0.4177215189873418,
        "ruby-60": 0.14016172506738545,
        "codebertscore_f1-166": 0.858698844909668,
        "codebertscore_f3-166": 0.8703184127807617,
        "codebertscore_f1-28": 0.8610344529151917,
        "codebertscore_f3-28": 0.8647817969322205,
        "codebertscore_f1-6": 0.800800621509552,
        "codebertscore_f3-6": 0.8162535429000854,
        "codebertscore_f1-193": 0.7912778258323669,
        "codebertscore_f3-193": 0.7948061227798462,
        "codebertscore_f1-71": 0.8098311424255371,
        "codebertscore_f3-71": 0.8428837060928345,
        "codebertscore_f1-63": 0.8249709606170654,
        "codebertscore_f3-63": 0.8379237055778503,
        "codebertscore_f1-58": 0.811010479927063,
        "codebertscore_f3-58": 0.7947096824645996,
        "codebertscore_f1-35": 0.8145076036453247,
        "codebertscore_f3-35": 0.8406417965888977,
        "codebertscore_f1-192": 0.8191518783569336,
        "codebertscore_f3-192": 0.8477897644042969,
        "codebertscore_f1-26": 0.8101762533187866,
        "codebertscore_f3-26": 0.8253886103630066,
        "codebertscore_f1-176": 0.8293414115905762,
        "codebertscore_f3-176": 0.8333450555801392,
        "codebertscore_f1-142": 0.8354433178901672,
        "codebertscore_f3-142": 0.8300621509552002,
        "codebertscore_f1-22": 0.8676270842552185,
        "codebertscore_f3-22": 0.8628212809562683,
        "codebertscore_f1-154": 0.768846869468689,
        "codebertscore_f3-154": 0.7651774883270264,
        "codebertscore_f1-110": 0.8047301173210144,
        "codebertscore_f3-110": 0.8213731050491333,
        "codebertscore_f1-8": 0.7380304932594299,
        "codebertscore_f3-8": 0.7720812559127808,
        "codebertscore_f1-7": 0.7638102769851685,
        "codebertscore_f3-7": 0.8078463673591614,
        "codebertscore_f1-23": 0.7716122269630432,
        "codebertscore_f3-23": 0.7774276733398438,
        "codebertscore_f1-56": 0.8346645832061768,
        "codebertscore_f3-56": 0.8556925654411316,
        "codebertscore_f1-60": 0.6678154468536377,
        "codebertscore_f3-60": 0.7549902200698853,
        "codebertscore_s_f1-166": 0.862933874130249,
        "codebertscore_s_f3-166": 0.8780359029769897,
        "codebertscore_s_f1-28": 0.8603827953338623,
        "codebertscore_s_f3-28": 0.8634823560714722,
        "codebertscore_s_f1-6": 0.802759051322937,
        "codebertscore_s_f3-6": 0.8172452449798584,
        "codebertscore_s_f1-193": 0.7949544191360474,
        "codebertscore_s_f3-193": 0.7984312176704407,
        "codebertscore_s_f1-71": 0.8143521547317505,
        "codebertscore_s_f3-71": 0.8460903167724609,
        "codebertscore_s_f1-63": 0.8261585831642151,
        "codebertscore_s_f3-63": 0.8371493220329285,
        "codebertscore_s_f1-58": 0.8113721013069153,
        "codebertscore_s_f3-58": 0.7933918237686157,
        "codebertscore_s_f1-35": 0.8184049129486084,
        "codebertscore_s_f3-35": 0.8415253758430481,
        "codebertscore_s_f1-192": 0.8284733295440674,
        "codebertscore_s_f3-192": 0.8570970892906189,
        "codebertscore_s_f1-26": 0.8014782667160034,
        "codebertscore_s_f3-26": 0.8182623386383057,
        "codebertscore_s_f1-176": 0.8313549757003784,
        "codebertscore_s_f3-176": 0.8382361531257629,
        "codebertscore_s_f1-142": 0.8356316089630127,
        "codebertscore_s_f3-142": 0.8263121247291565,
        "codebertscore_s_f1-22": 0.8657262325286865,
        "codebertscore_s_f3-22": 0.8600771427154541,
        "codebertscore_s_f1-154": 0.7644056677818298,
        "codebertscore_s_f3-154": 0.759124755859375,
        "codebertscore_s_f1-110": 0.8162582516670227,
        "codebertscore_s_f3-110": 0.833153486251831,
        "codebertscore_s_f1-8": 0.767784059047699,
        "codebertscore_s_f3-8": 0.7962158918380737,
        "codebertscore_s_f1-7": 0.7682162523269653,
        "codebertscore_s_f3-7": 0.8119990825653076,
        "codebertscore_s_f1-23": 0.7746535539627075,
        "codebertscore_s_f3-23": 0.7795400023460388,
        "codebertscore_s_f1-56": 0.8386538028717041,
        "codebertscore_s_f3-56": 0.8602582216262817,
        "codebertscore_s_f1-60": 0.695734441280365,
        "codebertscore_s_f3-60": 0.7827181220054626,
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-192": 3,
        "raw_gpt35_nsnr-192": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-166": 4,
        "raw_gpt35_nswr-166": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-192": 2,
        "raw_gpt35_nswr-192": "2",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-176": 3,
        "raw_gpt35_nswr-176": "3",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-110": 2,
        "raw_gpt35_nswr-110": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n",
        "snippet": [
            "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n"
        ],
        "simplified": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
        "task_id": "70",
        "164": "std::vector<long> result;\n  long n = lst.size();\n  if (n == 0) {\n    return result;\n  }\n  if (n == 1) {\n    result.push_back(lst[0]);\n    return result;\n  }\n  bool asc = true;\n  while (n > 0) {\n    if (asc) {\n      auto it = std::min_element(lst.begin(), lst.end());\n      result.push_back(*it);\n      lst.erase(it);\n      asc = false;\n    } else {\n      auto it = std::max_element(lst.begin(), lst.end());\n      result.push_back(*it);\n      lst.erase(it);\n      asc = true;\n    }\n    n = lst.size();\n  }\n  return result;",
        "grade-164": {
            "execution": 1
        },
        "28": "if (lst.size() == 0) {\n    return {};\n  }\n  std::vector<long> new_lst;\n  auto x = std::min_element(lst.begin(), lst.end());\n  new_lst.push_back(*x);\n  lst.erase(x);\n  while (!lst.empty()) {\n    auto x = std::max_element(lst.begin(), lst.end());\n    new_lst.push_back(*x);\n    lst.erase(x);\n    if (lst.empty()) {\n      break;\n    }\n    x = std::min_element(lst.begin(), lst.end());\n    new_lst.push_back(*x);\n    lst.erase(x);\n  }\n  return new_lst;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Please do not use any sorting algorithms.\n    std::vector<long>::iterator itr;\n    std::vector<long>::iterator itr1;\n    std::vector<long>::iterator itr2;\n    std::vector<long>::iterator itr3;\n    std::vector<long>::iterator itr4;\n    std::vector<long>::iterator itr5;\n    std::vector<long>::iterator itr6;\n    std::vector<long>::iterator itr7;\n    int i=0;\n    int j=lst.size()-1;\n    std::vector<long>::iterator itr8;\n    for(itr=lst.begin();itr!=lst.end();itr++)\n    {\n        if(i<j)\n        {\n            itr1=itr;\n            itr2=lst.begin()+j;\n            std::iter_swap(itr1,itr2);\n            // i++;\n            j--;\n        }\n        if(i==j)\n        {\n            j--;\n        }\n        i++;\n    }\n    i=0;\n    j=lst.size()-1;\n    for(itr3=lst.begin();itr3!=lst.end();itr3++)\n    {\n        if(i<j)\n        {\n            itr4=itr3;\n            itr5=lst.begin()+j;\n            std::iter_swap(itr4,itr5);\n            i++;\n            j--;\n        }\n        if(i==j)\n        {\n            j--;\n        }\n        i++;\n    }\n    i=0;\n    j=lst.size()-1;\n    for(itr6=lst.begin();itr6!=lst.end();itr6++)\n    {\n        if(i<j)\n        {\n            itr7=itr6;\n            itr8=lst.begin()+j;\n            std::iter_swap(itr7,itr8);",
        "grade-6": {
            "execution": 0
        },
        "190": "std::vector<long> strangesort;\n  bool odd = true;\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i < j) {\n    if (odd) {\n      strangesort.push_back(lst[i]);\n      ++i;\n    } else {\n      strangesort.push_back(lst[j]);\n      --j;\n    }\n    odd = !odd;\n  }\n  if (i == j)\n    strangesort.push_back(lst[i]);\n  return strangesort;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<long> res;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  int count = 0;\n  while (i < j) {\n    if (count % 2 == 0) {\n      res.push_back(lst[i]);\n      i++;\n    } else {\n      res.push_back(lst[j]);\n      j--;\n    }\n    count++;\n  }\n  if (i == j) {\n    res.push_back(lst[i]);\n  }\n  return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<long> v;\n  if (lst.size() == 0)\n    return v;\n  v.push_back(lst[0]);\n  lst.erase(lst.begin());\n  // sort(lst.begin(), lst.end());\n  int i = 0;\n  while (lst.size() > 0) {\n    if (i % 2 == 0) {\n      long min = lst[0];\n      int minPos = 0;\n      for (int j = 0; j < lst.size(); j++) {\n        if (lst[j] < min) {\n          min = lst[j];\n          minPos = j;\n        }\n      }\n      v.push_back(min);\n      lst.erase(lst.begin() + minPos);\n    } else {\n      long max = lst[0];\n      int maxPos = 0;\n      for (int j = 0; j < lst.size(); j++) {\n        if (lst[j] > max) {\n          max = lst[j];\n          maxPos = j;\n        }\n      }\n      v.push_back(max);\n      lst.erase(lst.begin() + maxPos);\n    }\n    i++;\n  }\n  return v;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (lst.size() <= 1) {\n    return lst;\n  }\n  std::vector<long> sorted_list(lst.size());\n  int size = lst.size();\n  int j = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      sorted_list[j] = *std::min_element(lst.begin(), lst.end());\n    } else {\n      sorted_list[j] = *std::max_element(lst.begin(), lst.end());\n    }\n    lst.erase(std::remove(lst.begin(), lst.end(), sorted_list[j]), lst.end());\n    j++;\n  }\n  return sorted_list;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (lst.size() < 2) {\n        return lst;\n    }\n    std::vector<long> res;\n    int n = lst.size();\n    long max = *std::max_element(lst.begin(), lst.end());\n    int start = 0;\n    while (res.size() < n) {\n        long min = *std::min_element(lst.begin() + start, lst.end());\n        res.push_back(min);\n        auto it = std::find(lst.begin(), lst.end(), min);\n        int idx = std::distance(lst.begin(), it);\n        lst.erase(lst.begin() + idx);\n        if (lst.size() > 0) {\n            long max = *std::max_element(lst.begin(), lst.end());\n            res.push_back(max);\n            it = std::find(lst.begin(), lst.end(), max);\n            idx = std::distance(lst.begin(), it);\n            lst.erase(lst.begin() + idx);\n        }\n    }\n    return res;",
        "grade-35": {
            "execution": 1
        },
        "189": "std::vector<long> result;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0)\n\t\t\tresult.push_back(lst[i / 2]);\n\t\telse\n\t\t\tresult.push_back(lst[lst.size() - i / 2 - 1]);\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::vector<long> r;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0)\n\t\t\tr.push_back(lst[i]);\n\t\telse\n\t\t\tr.insert(r.begin(), lst[i]);\n\t}\n\treturn r;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (lst.size() == 0) return lst;\n\tsort(lst.begin(), lst.end());\n\tstd::vector<long> v(lst.size());\n\tint i = 0, j = lst.size() - 1;\n\tfor (int k = 0; k < lst.size(); k += 2) {\n\t\tv[k] = lst[i++];\n\t\tif (k + 1 < lst.size()) v[k + 1] = lst[j--];\n\t}\n\treturn v;",
        "grade-174": {
            "execution": 1
        },
        "140": "std::vector<long> list;\n    std::sort(lst.begin(), lst.end());\n    bool flag = true;\n    while(lst.size()>0){\n        if(flag){\n            list.push_back(lst[0]);\n            lst.erase(lst.begin());\n        }else{\n            list.push_back(lst[lst.size()-1]);\n            lst.erase(lst.end()-1);\n        }\n        flag = !flag;\n    }\n    return list;",
        "grade-140": {
            "execution": 1
        },
        "22": "if (lst.size()==0){\n        return lst;\n    }\n    else{\n        std::vector<long> v;\n        std::sort(lst.begin(),lst.end());\n        std::vector<long>::iterator lst_it;\n        std::cout<<lst.size()<<std::endl;\n        for(int i=0;i<lst.size();i++){\n            if(i%2==0){\n                v.push_back(lst[i/2]);\n            }\n            else{\n                v.push_back(lst[lst.size()-(i/2)-1]);\n            }\n        }\n        return v;\n    }",
        "grade-22": {
            "execution": 1
        },
        "152": "if (lst.size() <= 1) return lst;\n\tstd::vector<long> ret;\n\tstd::sort(lst.begin(), lst.end());\n\tauto size = lst.size();\n\tfor (auto i = 0; i < size; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tret.push_back(lst[i/2]);\n\t\t} else {\n\t\t\tret.push_back(lst[size-1-i/2]);\n\t\t}\n\t}\n\treturn ret;",
        "grade-152": {
            "execution": 1
        },
        "109": "std::vector<long> rst;\n    int n = lst.size();\n    if (n == 0) {\n        return rst;\n    }\n    sort(lst.begin(), lst.end());\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        rst.push_back(lst[l]);\n        if (l != r) {\n            rst.push_back(lst[r]);\n        }\n        l++;\n        r--;\n    }\n    return rst;",
        "grade-109": {
            "execution": 1
        },
        "8": "if (lst.size() < 2) return lst;\n    std::vector<long> res;\n    int i = 0;\n    for (int j = lst.size() - 1; i <= j; ++i, --j) {\n        res.push_back(lst[i]);\n        if (i == j) break;\n        res.push_back(lst[j]);\n    }\n    return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n    // if the list length is less than 2 or\n    // the list is a list of identical elements,\n    // return the same list.\n    if (lst.size() < 2 || std::all_of(lst.begin(), lst.end(), [lst](int i) { return i == lst[0]; }))\n        return lst;\n    // while the list is not empty\n    while (!lst.empty()) {\n        // identify the min and max value of the remaining list\n        long min = *std::min_element(lst.begin(), lst.end());\n        long max = *std::max_element(lst.begin(), lst.end());\n        // add the min value to the result\n        result.push_back(min);\n        // remove the min value from the list\n        lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n        // if the list is empty, exit the loop\n        if (lst.empty())\n            break;\n        // add the max value to the result\n        result.push_back(max);\n        // remove the max value from the list\n        lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "auto list = lst;\n  auto len = list.size();\n  if(len <= 1) {\n    return list;\n  }\n  auto half = len/2;\n  std::sort(list.begin(), list.end());\n  std::vector<long> ret(len);\n  int i, j;\n  j = half;\n  int jump = 1;\n  for(i = 0; i < len; ++i) {\n    if(i % 2 == 0) {\n      ret[i] = list[j++];\n    } else {\n      ret[i] = list[--j];\n    }\n  }\n  return ret;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> even;\n\tstd::vector<long> odd;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven.push_back(lst[i]);\n\t\t}\n\t\telse {\n\t\t\todd.push_back(lst[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < even.size(); i++) {\n\t\tif (i == 0) {\n\t\t\tlst[i] = *std::min_element(even.begin(), even.end());\n\t\t}\n\t\telse {\n\t\t\tlst[i] = *std::max_element(even.begin(), even.end());\n\t\t}\n\t}\n\tfor (int i = 0; i < odd.size(); i++) {\n\t\tif (i == 0) {\n\t\t\tlst[i + even.size()] = *std::min_element(odd.begin(), odd.end());\n\t\t}\n\t\telse {\n\t\t\tlst[i + even.size()] = *std::max_element(odd.begin(), odd.end());\n\t\t}\n\t}\n\treturn lst;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Your code here...\n\tstd::vector<long> l1;\n\tstd::vector<long> l2;\n\tif (lst.size() <= 0)\n\t\treturn lst;\n\tint min = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < lst[min])\n\t\t\tmin = i;\n\t}\n\tl1.push_back(lst[min]);\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i != min)\n\t\t\tl2.push_back(lst[i]);\n\t}\n\tif (l2.size() > 0) {\n\t\tif (l2.size() % 2 == 0) {\n\t\t\t// l2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[0] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t}\n\t\telse {\n\t\t\t// l2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[0] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t}\n\t}\n\tl1.insert(l1.end(), l2.begin(), l2.end());\n\treturn l1;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.20995839637556224,
        "bleu-28": 0.1813567451511108,
        "bleu-6": 0.06411995992122739,
        "bleu-190": 0.31805808369915267,
        "bleu-70": 0.359749566791121,
        "bleu-62": 0.13723830559567576,
        "bleu-57": 0.1673960264246761,
        "bleu-35": 0.11857054821922494,
        "bleu-189": 0.3431073789629787,
        "bleu-26": 0.3037391386437371,
        "bleu-174": 0.2785112761864441,
        "bleu-140": 0.319911721597648,
        "bleu-22": 0.23721155937392793,
        "bleu-152": 0.3133132798779813,
        "bleu-109": 0.5351900230058524,
        "bleu-8": 0.2387857173391132,
        "bleu-7": 0.09052136728951363,
        "bleu-23": 0.14029597418280665,
        "bleu-55": 0.10691089353671644,
        "bleu-59": 0.09811392480398334,
        "codebleu-164": 0.6400513423384506,
        "codebleu-28": 0.6089564788708899,
        "codebleu-6": 0.6132840625842738,
        "codebleu-190": 0.6560851250616986,
        "codebleu-70": 0.755270932304219,
        "codebleu-62": 0.6811609816997207,
        "codebleu-57": 0.6670481188897247,
        "codebleu-35": 0.6252136004127937,
        "codebleu-189": 0.6084630059514071,
        "codebleu-26": 0.6148674269831799,
        "codebleu-174": 0.6859903683779921,
        "codebleu-140": 0.6613091712747929,
        "codebleu-22": 0.6401032020500903,
        "codebleu-152": 0.6525958332332664,
        "codebleu-109": 0.7451560475317311,
        "codebleu-8": 0.587315623613228,
        "codebleu-7": 0.6305280637718929,
        "codebleu-23": 0.6230844235324103,
        "codebleu-55": 0.6685763366465771,
        "codebleu-59": 0.6838703714011136,
        "chrf-164": 0.459615575471808,
        "chrf-28": 0.4292013849637778,
        "chrf-6": 0.20516771348712076,
        "chrf-190": 0.4759447684583707,
        "chrf-70": 0.569569959847073,
        "chrf-62": 0.42926486005933867,
        "chrf-57": 0.3233962214711566,
        "chrf-35": 0.3481349080374535,
        "chrf-189": 0.4858698094449293,
        "chrf-26": 0.40395116324410013,
        "chrf-174": 0.3902444014962371,
        "chrf-140": 0.49034360965802615,
        "chrf-22": 0.45415912296908834,
        "chrf-152": 0.47712683832042013,
        "chrf-109": 0.6055901982833132,
        "chrf-8": 0.37917904777744094,
        "chrf-7": 0.29274428553515575,
        "chrf-23": 0.3231018842843962,
        "chrf-55": 0.3222278188068,
        "chrf-59": 0.34829574303229466,
        "rougel-164": 0.3726235741444867,
        "rougel-28": 0.3891050583657587,
        "rougel-6": 0.23284823284823283,
        "rougel-190": 0.5959595959595959,
        "rougel-70": 0.6486486486486487,
        "rougel-62": 0.34929577464788736,
        "rougel-57": 0.3656716417910448,
        "rougel-35": 0.3151862464183381,
        "rougel-189": 0.5340314136125655,
        "rougel-26": 0.5621621621621623,
        "rougel-174": 0.4705882352941177,
        "rougel-140": 0.5071770334928231,
        "rougel-22": 0.4390243902439024,
        "rougel-152": 0.48571428571428577,
        "rougel-109": 0.6305418719211824,
        "rougel-8": 0.4864864864864865,
        "rougel-7": 0.25125628140703515,
        "rougel-23": 0.353448275862069,
        "rougel-55": 0.29885057471264365,
        "rougel-59": 0.26940639269406397,
        "meteor-164": 0.3835615586445666,
        "meteor-28": 0.33532398234870314,
        "meteor-6": 0.34593565960703265,
        "meteor-190": 0.5852842514746404,
        "meteor-70": 0.6923896341505911,
        "meteor-62": 0.39685100891200814,
        "meteor-57": 0.43535361216730034,
        "meteor-35": 0.36601632156535163,
        "meteor-189": 0.5608398878169427,
        "meteor-26": 0.5596837392912702,
        "meteor-174": 0.46816406854615816,
        "meteor-140": 0.4125080145795656,
        "meteor-22": 0.4749968086690731,
        "meteor-152": 0.5305184456334555,
        "meteor-109": 0.6407294832826747,
        "meteor-8": 0.5004690139377949,
        "meteor-7": 0.36159116425014154,
        "meteor-23": 0.34919339870037863,
        "meteor-55": 0.3531855460403943,
        "meteor-59": 0.36989631681733,
        "ruby-164": 0.23030303030303034,
        "ruby-28": 0.289308176100629,
        "ruby-6": 0.13838120104438645,
        "ruby-190": 0.43999999999999995,
        "ruby-70": 0.5564516129032258,
        "ruby-62": 0.23735408560311289,
        "ruby-57": 0.2647058823529411,
        "ruby-35": 0.2111553784860558,
        "ruby-189": 0.37755102040816324,
        "ruby-26": 0.4285714285714286,
        "ruby-174": 0.34959349593495936,
        "ruby-140": 0.4054054054054054,
        "ruby-22": 0.30405405405405406,
        "ruby-152": 0.2678571428571429,
        "ruby-109": 0.419047619047619,
        "ruby-8": 0.33673469387755106,
        "ruby-7": 0.15666666666666662,
        "ruby-23": 0.19402985074626866,
        "ruby-55": 0.19199999999999995,
        "ruby-59": 0.16470588235294115,
        "codebertscore_f1-164": 0.7929356694221497,
        "codebertscore_f3-164": 0.8140006065368652,
        "codebertscore_f1-28": 0.7954088449478149,
        "codebertscore_f3-28": 0.8021453022956848,
        "codebertscore_f1-6": 0.708851158618927,
        "codebertscore_f3-6": 0.7437045574188232,
        "codebertscore_f1-190": 0.8444054126739502,
        "codebertscore_f3-190": 0.8620668649673462,
        "codebertscore_f1-70": 0.8946250677108765,
        "codebertscore_f3-70": 0.9061406254768372,
        "codebertscore_f1-62": 0.7830369472503662,
        "codebertscore_f3-62": 0.8102916479110718,
        "codebertscore_f1-57": 0.7884228229522705,
        "codebertscore_f3-57": 0.7864914536476135,
        "codebertscore_f1-35": 0.7644032835960388,
        "codebertscore_f3-35": 0.7951630353927612,
        "codebertscore_f1-189": 0.8496878743171692,
        "codebertscore_f3-189": 0.858587920665741,
        "codebertscore_f1-26": 0.840821385383606,
        "codebertscore_f3-26": 0.8411058187484741,
        "codebertscore_f1-174": 0.8501038551330566,
        "codebertscore_f3-174": 0.8420343995094299,
        "codebertscore_f1-140": 0.8476068377494812,
        "codebertscore_f3-140": 0.8521984815597534,
        "codebertscore_f1-22": 0.8011266589164734,
        "codebertscore_f3-22": 0.8230340480804443,
        "codebertscore_f1-152": 0.8425339460372925,
        "codebertscore_f3-152": 0.8565471172332764,
        "codebertscore_f1-109": 0.9000024199485779,
        "codebertscore_f3-109": 0.9091470837593079,
        "codebertscore_f1-8": 0.857093095779419,
        "codebertscore_f3-8": 0.8603410720825195,
        "codebertscore_f1-7": 0.7360357642173767,
        "codebertscore_f3-7": 0.7876551151275635,
        "codebertscore_f1-23": 0.7679436206817627,
        "codebertscore_f3-23": 0.7769351601600647,
        "codebertscore_f1-55": 0.7634984850883484,
        "codebertscore_f3-55": 0.7922484874725342,
        "codebertscore_f1-59": 0.75908362865448,
        "codebertscore_f3-59": 0.8056610822677612,
        "codebertscore_s_f1-164": 0.7989487648010254,
        "codebertscore_s_f3-164": 0.8220658302307129,
        "codebertscore_s_f1-28": 0.8033996820449829,
        "codebertscore_s_f3-28": 0.8115231394767761,
        "codebertscore_s_f1-6": 0.7367758750915527,
        "codebertscore_s_f3-6": 0.7727199792861938,
        "codebertscore_s_f1-190": 0.8473067283630371,
        "codebertscore_s_f3-190": 0.8672550320625305,
        "codebertscore_s_f1-70": 0.8987544178962708,
        "codebertscore_s_f3-70": 0.9114971160888672,
        "codebertscore_s_f1-62": 0.8096227049827576,
        "codebertscore_s_f3-62": 0.8240640163421631,
        "codebertscore_s_f1-57": 0.7985058426856995,
        "codebertscore_s_f3-57": 0.7977737188339233,
        "codebertscore_s_f1-35": 0.797400176525116,
        "codebertscore_s_f3-35": 0.8153653740882874,
        "codebertscore_s_f1-189": 0.8598660230636597,
        "codebertscore_s_f3-189": 0.8701542019844055,
        "codebertscore_s_f1-26": 0.8494864106178284,
        "codebertscore_s_f3-26": 0.8502056002616882,
        "codebertscore_s_f1-174": 0.8559339046478271,
        "codebertscore_s_f3-174": 0.8483752608299255,
        "codebertscore_s_f1-140": 0.8536575436592102,
        "codebertscore_s_f3-140": 0.8599218130111694,
        "codebertscore_s_f1-22": 0.8155395984649658,
        "codebertscore_s_f3-22": 0.8399224281311035,
        "codebertscore_s_f1-152": 0.8498491644859314,
        "codebertscore_s_f3-152": 0.8635357618331909,
        "codebertscore_s_f1-109": 0.9042937159538269,
        "codebertscore_s_f3-109": 0.9157490730285645,
        "codebertscore_s_f1-8": 0.8683333396911621,
        "codebertscore_s_f3-8": 0.8720138669013977,
        "codebertscore_s_f1-7": 0.7648253440856934,
        "codebertscore_s_f3-7": 0.8063102960586548,
        "codebertscore_s_f1-23": 0.7729886770248413,
        "codebertscore_s_f3-23": 0.78302401304245,
        "codebertscore_s_f1-55": 0.7822937965393066,
        "codebertscore_s_f3-55": 0.8094884753227234,
        "codebertscore_s_f1-59": 0.8038106560707092,
        "codebertscore_s_f3-59": 0.8329055309295654,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n",
        "snippet": [
            "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n"
        ],
        "simplified": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
        "task_id": "147",
        "164": "return 0;",
        "grade-164": {
            "execution": 0
        },
        "28": "return (n * (n - 1) * (n - 2)) / 6;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Write your code here\n    long k = n/3;\n    if(n%3==0)\n        return (k*(k-1))/2;\n    return k*(k+1)/2;",
        "grade-6": {
            "execution": 0
        },
        "190": "//1,3,7,13,21,31,43,57,73,91,111,133,157,183,211,241,273,307,343,381,421,463,507,553,601,651,703,757,813,871,931,993,1057,1123,1191,1261,1333,1407,1483,1561,1641,1723,1807,1893,1981,2071,2163,2257,2353,2451,2551,2653,2757,2863,2971,3081,3193,3307,3423,3541,3661,3783,3907,4033,4161,4291,4423,4557,4693,4831,4971,5113,5257,5403,5551,5701,5853,6007,6163,6321,6481,6643,6807,6973,7141,7311,7483,7657,7833,8011,8191,8373,8557,8743,8931,9121,9313,9507,9703,9901,10101,10303,10507,10713,10921,11131,11343,11557,11773,11991,12211,12433,12657,12883,13111,13340,13570,13801,14033,14267,14503,14741,14981,15224,15468,15713,15960,16209,16459,16711,16965,17221,17478,17737,17997,18259,18523,18788,19055,19323,19593,19864,20137,20411,20687,20965,21245,21526,21809,22093,22379,22667,22956,23247,23539,23833,24128,24425,24723,25023,25324,25626,25930,26235,26541,26849,27158,27468,27779,28092,28406,28722,29039,29357,29677,29998,30321,30644,30970,312",
        "grade-190": {
            "execution": 0
        },
        "70": "long ans = 0;\n    long div = n / 3;\n    ans += div * (div - 1) / 2;\n    div = n / 3 + 1;\n    ans += div * (div - 1) / 2;\n    return ans;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your code here\n    return 0;",
        "grade-62": {
            "execution": 0
        },
        "57": "if(n < 3) return 0;\n    long rem1 = 0, rem2 = 0;\n    for(long i = 1; i <= n; i++) {\n        if(i % 3 == 1) rem1++;\n        else if(i % 3 == 2) rem2++;\n    }\n    long k = std::min(rem1, rem2);\n    rem1 -= k;\n    rem2 -= k;\n    return rem1*rem2 + k*(k - 1)/2;",
        "grade-57": {
            "execution": 0
        },
        "35": "if(n==0)\n        return 0;\n    long ans = 0;\n    for(long i=1;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n        {\n            long k = j+1;\n            long sum = (k*k) - k + 1;\n            long maxsum = sum;\n            long times = 1;\n            if(sum%3==0)\n            {\n                ans+=j-i;\n                continue;\n            }\n            while(sum%3!=0)\n            {\n                k++;\n                sum = (k*k) - k + 1;\n                maxsum+=sum;\n                times++;\n            }\n            while(maxsum%3!=0)\n            {\n                maxsum-=sum;\n                k--;\n                sum = (k*k) - k + 1;\n                times--;\n            }\n            if(times>0)\n                ans+=j-i;\n        }\n    }\n    return ans;",
        "grade-35": {
            "execution": 0
        },
        "189": "long int x, y, z, i, j, k, sum, count=0;\n\t// n = 5\n\t// i = 0 to 4\n\t// j = i + 1 to 4\n\t// k = j + 1 to 4\n\tfor(i=0; i<n; i++) {\n\t\tx = i*i - i + 1;\n\t\tfor(j=i+1; j<n; j++) {\n\t\t\ty = j*j - j + 1;\n\t\t\tfor(k=j+1; k<n; k++) {\n\t\t\t\tz = k*k - k + 1;\n\t\t\t\tsum = x + y + z;\n\t\t\t\tif(sum % 3 == 0)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-189": {
            "execution": 0
        },
        "26": "long ans = 0;\n    for(long i = 1; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            if((i * i - i + 1 + j * j - j + 1) % 3 == 0)\n                ans++;\n        }\n    }\n    return ans;",
        "grade-26": {
            "execution": 0
        },
        "174": "long sum = 0;\n    for(long i = 1; i <= n; i++) {\n        sum += i * i - i + 1;\n    }\n    return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "long *a = new long[n];\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;",
        "grade-140": {
            "execution": 0
        },
        "22": "long num = n/3;\n    long ans = (num) * (num - 1) * (num - 2) / 6;\n    long rem = n % 3;\n    if(rem == 1) {\n        ans += ((num) * (num - 1) / 2) * (n - 2*num);\n    } else if(rem == 2) {\n        ans += (num) * ((n - num)*(n - num - 1) / 2);\n    }\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "152": "if (n < 3)\n\t\treturn 0;\n\tif (n % 3 == 0)\n\t\treturn ((n-2) * (n-1) * n) / (6 * 3);\n\telse if (n % 3 == 1)\n\t\treturn ((n-2) * (n-1) * (n-3)) / (6 * 3);\n\telse\n\t\treturn ((n-1) * (n-2) * (n-3)) / (6 * 3);",
        "grade-152": {
            "execution": 0
        },
        "109": "std::vector<long> a(n);\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-109": {
            "execution": 0
        },
        "8": "long result = 0;\n    // Write your code here\n    if(n < 3) return 0;\n    result = (n-2) * (n-1) * n;\n    result = result/6;\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here\n\t// To print results to the standard output you can use printf()\n\t// Example: printf(\"%s\", \"Hello world!\");\n\tassert(n > 0);\n\tif (n <= 2) return 0;\n\tlong count = 0;\n\tfor (long i = 1; i < n - 1; i++) {\n\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\tlong mod = (i * i - i + 1 + j * j - j + 1) % 3;\n\t\t\tif (mod == 0) {\n\t\t\t\tlong k = 1;\n\t\t\t\twhile (true) {\n\t\t\t\t\tlong val = k * k - k + 1;\n\t\t\t\t\tif (val > (i * i - i + 1 + j * j - j + 1) / 3) break;\n\t\t\t\t\tif (val < (i * i - i + 1)) {\n\t\t\t\t\t\tk++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (val == (i * i - i + 1 + j * j - j + 1) / 3) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-7": {
            "execution": 0
        },
        "23": "int count = 0;\n\tfor(int i = 1; i < n; i++) {\n\t\tfor(int j = i + 1; j < n; j++) {\n\t\t\tif((i * i - i + 1 + j * j - j + 1) % 3 == 0) {\n\t\t\t\tfor(int k = j + 1; k < n; k++) {\n\t\t\t\t\tif((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-55": {
            "execution": 0
        },
        "59": "long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n            {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 2.2145446374705637e-35,
        "bleu-28": 6.823042686524317e-07,
        "bleu-6": 0.0013579502327087756,
        "bleu-190": 0.0016539817329819565,
        "bleu-70": 0.0016062619247842966,
        "bleu-62": 6.733110247070741e-13,
        "bleu-57": 0.06485452606119788,
        "bleu-35": 0.1672222600828275,
        "bleu-189": 0.12823814276511808,
        "bleu-26": 0.05010179731526079,
        "bleu-174": 0.0027781192582202745,
        "bleu-140": 0.17151942453667818,
        "bleu-22": 0.018645422701265346,
        "bleu-152": 0.016772867882261407,
        "bleu-109": 0.1724391327002338,
        "bleu-8": 0.0009602073548906155,
        "bleu-7": 0.20275900497893612,
        "bleu-23": 0.1684753246491889,
        "bleu-55": 0.16873698211010088,
        "bleu-59": 0.1593478570905057,
        "codebleu-164": 0.006230529595015575,
        "codebleu-28": 0.03946022060678708,
        "codebleu-6": 0.08576654957996388,
        "codebleu-190": 0.07149042888771331,
        "codebleu-70": 0.0961973995776214,
        "codebleu-62": 0.014537902411063857,
        "codebleu-57": 0.21078198008810642,
        "codebleu-35": 0.4458738052354734,
        "codebleu-189": 0.3675709245595994,
        "codebleu-26": 0.1830138545623501,
        "codebleu-174": 0.08184522825823268,
        "codebleu-140": 0.36946312821165667,
        "codebleu-22": 0.20448785705867406,
        "codebleu-152": 0.18174059729860848,
        "codebleu-109": 0.3639446663445828,
        "codebleu-8": 0.09197870262892276,
        "codebleu-7": 0.5021868611071828,
        "codebleu-23": 0.3245774826458414,
        "codebleu-55": 0.3780355154621158,
        "codebleu-59": 0.3497217140631612,
        "chrf-164": 0.013404452140220537,
        "chrf-28": 0.02095710610666322,
        "chrf-6": 0.04908633418644209,
        "chrf-190": 0.015117590357174235,
        "chrf-70": 0.052044480477250854,
        "chrf-62": 0.020913627981697686,
        "chrf-57": 0.12936787958364554,
        "chrf-35": 0.24233810198051928,
        "chrf-189": 0.15615498388010107,
        "chrf-26": 0.13005496608677677,
        "chrf-174": 0.1105213306724539,
        "chrf-140": 0.18064756427229184,
        "chrf-22": 0.09904860075765845,
        "chrf-152": 0.06976100339085334,
        "chrf-109": 0.1924371908953184,
        "chrf-8": 0.06040375050364235,
        "chrf-7": 0.20417888870118778,
        "chrf-23": 0.1984336080904421,
        "chrf-55": 0.18794415587048596,
        "chrf-59": 0.17480050238385236,
        "rougel-164": 0.02459016393442623,
        "rougel-28": 0.10769230769230768,
        "rougel-6": 0.14634146341463414,
        "rougel-190": 0.019933554817275746,
        "rougel-70": 0.18620689655172415,
        "rougel-62": 0.023999999999999997,
        "rougel-57": 0.304093567251462,
        "rougel-35": 0.3348837209302325,
        "rougel-189": 0.34760705289672544,
        "rougel-26": 0.3248407643312102,
        "rougel-174": 0.2446043165467626,
        "rougel-140": 0.425531914893617,
        "rougel-22": 0.2528735632183908,
        "rougel-152": 0.23054755043227665,
        "rougel-109": 0.43617021276595747,
        "rougel-8": 0.16083916083916083,
        "rougel-7": 0.33472803347280333,
        "rougel-23": 0.3891891891891892,
        "rougel-55": 0.4210526315789474,
        "rougel-59": 0.41621621621621624,
        "meteor-164": 0.006906077348066298,
        "meteor-28": 0.03656307129798903,
        "meteor-6": 0.06973844842677478,
        "meteor-190": 0.0158102766798419,
        "meteor-70": 0.07642981602609995,
        "meteor-62": 0.0068870523415977955,
        "meteor-57": 0.17759957782672536,
        "meteor-35": 0.3126445224005316,
        "meteor-189": 0.24676921722420636,
        "meteor-26": 0.17010857803419388,
        "meteor-174": 0.09216607767313637,
        "meteor-140": 0.2763586643215774,
        "meteor-22": 0.15557398529549402,
        "meteor-152": 0.12527472527472527,
        "meteor-109": 0.2937087284417121,
        "meteor-8": 0.07583927880095127,
        "meteor-7": 0.30508263839456173,
        "meteor-23": 0.2632321777104866,
        "meteor-55": 0.3019852180519647,
        "meteor-59": 0.28218447230433935,
        "ruby-164": 0.012448132780082943,
        "ruby-28": 0.05809128630705396,
        "ruby-6": 0.08713692946058094,
        "ruby-190": 0.0166204986149584,
        "ruby-70": 0.10788381742738584,
        "ruby-62": 0.012448132780082943,
        "ruby-57": 0.20746887966804983,
        "ruby-35": 0.2157676348547718,
        "ruby-189": 0.22406639004149376,
        "ruby-26": 0.20746887966804983,
        "ruby-174": 0.1410788381742739,
        "ruby-140": 0.29875518672199175,
        "ruby-22": 0.15767634854771784,
        "ruby-152": 0.15352697095435686,
        "ruby-109": 0.31950207468879666,
        "ruby-8": 0.0954356846473029,
        "ruby-7": 0.11618257261410792,
        "ruby-23": 0.27800829875518673,
        "ruby-55": 0.29460580912863066,
        "ruby-59": 0.30290456431535273,
        "codebertscore_f1-164": 0.45801258087158203,
        "codebertscore_f3-164": 0.3976869285106659,
        "codebertscore_f1-28": 0.6311952471733093,
        "codebertscore_f3-28": 0.5740785002708435,
        "codebertscore_f1-6": 0.6818276047706604,
        "codebertscore_f3-6": 0.6516151428222656,
        "codebertscore_f1-190": 0.5573363900184631,
        "codebertscore_f3-190": 0.5635414719581604,
        "codebertscore_f1-70": 0.6905749440193176,
        "codebertscore_f3-70": 0.6580483913421631,
        "codebertscore_f1-62": 0.4828197658061981,
        "codebertscore_f3-62": 0.4509340524673462,
        "codebertscore_f1-57": 0.7502582669258118,
        "codebertscore_f3-57": 0.7347820401191711,
        "codebertscore_f1-35": 0.765326738357544,
        "codebertscore_f3-35": 0.7606977224349976,
        "codebertscore_f1-189": 0.7542999982833862,
        "codebertscore_f3-189": 0.7448158264160156,
        "codebertscore_f1-26": 0.7548269033432007,
        "codebertscore_f3-26": 0.7104828953742981,
        "codebertscore_f1-174": 0.7421733736991882,
        "codebertscore_f3-174": 0.6813276410102844,
        "codebertscore_f1-140": 0.7859711647033691,
        "codebertscore_f3-140": 0.7584883570671082,
        "codebertscore_f1-22": 0.7000863552093506,
        "codebertscore_f3-22": 0.6748291254043579,
        "codebertscore_f1-152": 0.6909480094909668,
        "codebertscore_f3-152": 0.6551134586334229,
        "codebertscore_f1-109": 0.7937255501747131,
        "codebertscore_f3-109": 0.7624795436859131,
        "codebertscore_f1-8": 0.6584726572036743,
        "codebertscore_f3-8": 0.6315802931785583,
        "codebertscore_f1-7": 0.7419276237487793,
        "codebertscore_f3-7": 0.747299075126648,
        "codebertscore_f1-23": 0.7546733021736145,
        "codebertscore_f3-23": 0.7224490642547607,
        "codebertscore_f1-55": 0.7989674806594849,
        "codebertscore_f3-55": 0.7725081443786621,
        "codebertscore_f1-59": 0.8010367751121521,
        "codebertscore_f3-59": 0.7659609317779541,
        "codebertscore_s_f1-164": 0.6112696528434753,
        "codebertscore_s_f3-164": 0.5397341847419739,
        "codebertscore_s_f1-28": 0.7020185589790344,
        "codebertscore_s_f3-28": 0.6485358476638794,
        "codebertscore_s_f1-6": 0.7237081527709961,
        "codebertscore_s_f3-6": 0.7017095685005188,
        "codebertscore_s_f1-190": 0.570178210735321,
        "codebertscore_s_f3-190": 0.5698208808898926,
        "codebertscore_s_f1-70": 0.7268427610397339,
        "codebertscore_s_f3-70": 0.7051200866699219,
        "codebertscore_s_f1-62": 0.5579955577850342,
        "codebertscore_s_f3-62": 0.5320627689361572,
        "codebertscore_s_f1-57": 0.7690298557281494,
        "codebertscore_s_f3-57": 0.7631683945655823,
        "codebertscore_s_f1-35": 0.780097484588623,
        "codebertscore_s_f3-35": 0.773453950881958,
        "codebertscore_s_f1-189": 0.7625093460083008,
        "codebertscore_s_f3-189": 0.7519936561584473,
        "codebertscore_s_f1-26": 0.7824442982673645,
        "codebertscore_s_f3-26": 0.7464383244514465,
        "codebertscore_s_f1-174": 0.7842734456062317,
        "codebertscore_s_f3-174": 0.7433967590332031,
        "codebertscore_s_f1-140": 0.7905711531639099,
        "codebertscore_s_f3-140": 0.7663537859916687,
        "codebertscore_s_f1-22": 0.7223250269889832,
        "codebertscore_s_f3-22": 0.7008536458015442,
        "codebertscore_s_f1-152": 0.7290301322937012,
        "codebertscore_s_f3-152": 0.697836697101593,
        "codebertscore_s_f1-109": 0.7950190305709839,
        "codebertscore_s_f3-109": 0.7667444944381714,
        "codebertscore_s_f1-8": 0.7048847675323486,
        "codebertscore_s_f3-8": 0.6854207515716553,
        "codebertscore_s_f1-7": 0.7529801726341248,
        "codebertscore_s_f3-7": 0.7559537887573242,
        "codebertscore_s_f1-23": 0.7758346199989319,
        "codebertscore_s_f3-23": 0.7476117610931396,
        "codebertscore_s_f1-55": 0.7995202541351318,
        "codebertscore_s_f3-55": 0.7764528393745422,
        "codebertscore_s_f1-59": 0.8047460317611694,
        "codebertscore_s_f3-59": 0.7730299830436707,
        "gpt35_nsnr-164": 2,
        "raw_gpt35_nsnr-164": "2",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 0,
        "raw_gpt35_nsnr-190": "0",
        "gpt35_nsnr-70": 0,
        "raw_gpt35_nsnr-70": "Score: 0",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "3 - The code snippet is incomplete and does not provide a solution to the problem. However, the problem statement is clear and the logic to generate the array a is correct. With the correct implementation, the code should be able to handle all cases and pass all possible tests.",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 0,
        "raw_gpt35_nswr-164": "0",
        "gpt35_nswr-28": 0,
        "raw_gpt35_nswr-28": "0",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 0,
        "raw_gpt35_nswr-70": "Functional Correctness: 0",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-174": 2,
        "raw_gpt35_nswr-174": "2",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "Functional Correctness: 2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long b) {\n",
        "snippet": [
            "    return (abs(a)%10)*(abs(b)%10);\n}\n"
        ],
        "simplified": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
        "task_id": "97",
        "195": "return ((a % 10) * (b % 10));",
        "grade-195": {
            "execution": 0
        },
        "30": "// Your code here\n    long c = a % 10;\n    long d = b % 10;\n    return c * d;",
        "grade-30": {
            "execution": 0
        },
        "7": "return std::abs(a % 10 * b % 10);",
        "grade-7": {
            "execution": 0
        },
        "77": "//your code here\n    long result = 1;\n    while(a > 0) {\n        long x = a % 10;\n        if(x > 0) {\n            result *= x;\n        }\n        a /= 10;\n    }\n    while(b > 0) {\n        long x = b % 10;\n        if(x > 0) {\n            result *= x;\n        }\n        b /= 10;\n    }\n    return result;",
        "grade-77": {
            "execution": 0
        },
        "69": "// We can just multiply the last digits of a and b and\n  // return that value.\n  return (a % 10) * (b % 10);",
        "grade-69": {
            "execution": 0
        },
        "63": "// your code here\n    // make it work for negative numbers!\n    a=a<0?-a:a;\n    b=b<0?-b:b;\n    return (a%10)*(b%10);",
        "grade-63": {
            "execution": 1
        },
        "38": "std::ostringstream os;\n    os << a << b;\n    return std::stoi(os.str()) % 10;\n  }\n//   int main()\n//   {\n//      assert(multiply(7, 17) == 9);\n//      assert(multiply(19, 28) == 72);\n//      assert(multiply(2020, 1851) == 0);\n//      assert(multiply(14, -15) == 20);\n//   }",
        "grade-38": {
            "execution": 0
        },
        "28": "long firstNumber = abs(a);\n   long secondNumber = abs(b);\n   long lastDigitA = firstNumber % 10;\n   long lastDigitB = secondNumber % 10;\n   return (lastDigitA * lastDigitB);",
        "grade-28": {
            "execution": 1
        },
        "165": "int rem1,rem2;\n    rem1=a%10;\n    rem2=b%10;\n    return (rem1*rem2);",
        "grade-165": {
            "execution": 0
        },
        "24": "// This is a \"method-only\" submission. \n  // You only need to complete this method. \n  // Checking the lowest significant digit of each.\n  long mul = a*b;\n  int prod = mul%10;\n  return prod;",
        "grade-24": {
            "execution": 0
        },
        "181": "int i=0;\n  std::cout<<\"a: \"<<a<<\" b: \"<<b<<std::endl;\n  while(a<0){\n    a = a * -1;\n    i++;\n  }\n  int j=0;\n  while(b<0){\n    b = b * -1;\n    j++;\n  }\n  if((i+j)%2 != 0){\n    return (a%10)*(b%10)*-1;\n  }\n  return (a%10)*(b%10);",
        "grade-181": {
            "execution": 0
        },
        "122": "return abs(a % 10 * b % 10);",
        "grade-122": {
            "execution": 0
        },
        "9": "if(a<0) a*=-1;\n    if(b<0) b*=-1;\n    return (a%10)*(b%10);",
        "grade-9": {
            "execution": 1
        },
        "8": "if(a<0)a=-a;\n    if(b<0)b=-b;\n    return (a%10)*(b%10);",
        "grade-8": {
            "execution": 1
        },
        "25": "return (a%10) * (b%10);",
        "grade-25": {
            "execution": 0
        },
        "61": "//return a*b;\n//return (a%10)*(b%10);\nreturn (a*b)%10;",
        "grade-61": {
            "execution": 0
        },
        "65": "long ret = 1;\n\twhile (a) {\n\t\tret *= a % 10;\n\t\ta /= 10;\n\t}\n\twhile (b) {\n\t\tret *= b % 10;\n\t\tb /= 10;\n\t}\n\treturn ret % 10;",
        "grade-65": {
            "execution": 0
        },
        "152": "int c = 1;\n\tint n;\n\t// if(a<0&&b<0)\n\t// \tn = -1;\n\t// else if(a<0||b<0)\n\t// \tn = 1;\n\t// else\n\t// \tn = 1;\n\t// std::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\t// std::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\ta = abs(a);\n\tb = abs(b);\n\tstd::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\tif(a==0&&b==0)\n\t\treturn c;\n\tif(a==0)\n\t\treturn (b%10);\n\tif(b==0)\n\t\treturn (a%10);\n\treturn ((a%10)*(b%10));",
        "grade-152": {
            "execution": 0
        },
        "184": "// your code here\n    return a<0?-a:a % 10 * (b<0?-b:b % 10);",
        "grade-184": {
            "execution": 0
        },
        "169": "// Write your code here\n  long unitDigitOfA = a % 10;\n  long unitDigitOfB = b % 10;\n  long result = unitDigitOfA * unitDigitOfB;\n  return result;",
        "grade-169": {
            "execution": 0
        },
        "bleu-195": 0.3134689368328589,
        "bleu-30": 0.054500484890145556,
        "bleu-7": 0.2041797356559255,
        "bleu-77": 0.023633695066734534,
        "bleu-69": 0.2110920784974117,
        "bleu-63": 0.13993791571409536,
        "bleu-38": 0.02305900806017513,
        "bleu-28": 0.12788260528339912,
        "bleu-165": 0.06814679086203991,
        "bleu-24": 0.020367079635817534,
        "bleu-181": 0.06313749633143133,
        "bleu-122": 0.18852965510143346,
        "bleu-9": 0.20027292858993895,
        "bleu-8": 0.21224248663916928,
        "bleu-25": 0.3388663595874813,
        "bleu-61": 0.28582347148150317,
        "bleu-65": 0.07072674144735146,
        "bleu-152": 0.04765348278958208,
        "bleu-184": 0.11902363807507334,
        "bleu-169": 0.03025214638175392,
        "codebleu-195": 0.4681029354562097,
        "codebleu-30": 0.3194444444444444,
        "codebleu-7": 0.39178731191256705,
        "codebleu-77": 0.5208333333333333,
        "codebleu-69": 0.4626748910657296,
        "codebleu-63": 0.45165624351762673,
        "codebleu-38": 0.5069444444444444,
        "codebleu-28": 0.6071562486476155,
        "codebleu-165": 0.37499999999999994,
        "codebleu-24": 0.26388888888888884,
        "codebleu-181": 0.5584940480281373,
        "codebleu-122": 0.34743181659350375,
        "codebleu-9": 0.5724422515224208,
        "codebleu-8": 0.5724422515224208,
        "codebleu-25": 0.405691524999597,
        "codebleu-61": 0.5321843403322785,
        "codebleu-65": 0.4513888888888889,
        "codebleu-152": 0.6478983448646821,
        "codebleu-184": 0.3929454980380442,
        "codebleu-169": 0.3194444444444444,
        "chrf-195": 0.39809436999268466,
        "chrf-30": 0.18813301216021114,
        "chrf-7": 0.34942762005971884,
        "chrf-77": 0.18585504816322496,
        "chrf-69": 0.32366148390198096,
        "chrf-63": 0.3124791137440661,
        "chrf-38": 0.14152829451484872,
        "chrf-28": 0.2787791743550018,
        "chrf-165": 0.22308366050321948,
        "chrf-24": 0.11307978402472148,
        "chrf-181": 0.2611760586345881,
        "chrf-122": 0.35638602107934053,
        "chrf-9": 0.4115410160458493,
        "chrf-8": 0.41669228321208146,
        "chrf-25": 0.43821631755979923,
        "chrf-61": 0.4305575201978851,
        "chrf-65": 0.22782399099893783,
        "chrf-152": 0.23473135034068626,
        "chrf-184": 0.2644751331527526,
        "chrf-169": 0.14055970887634817,
        "rougel-195": 0.8,
        "rougel-30": 0.31818181818181823,
        "rougel-7": 0.6857142857142857,
        "rougel-77": 0.30303030303030304,
        "rougel-69": 0.490566037735849,
        "rougel-63": 0.3768115942028986,
        "rougel-38": 0.2113821138211382,
        "rougel-28": 0.34782608695652173,
        "rougel-165": 0.3636363636363636,
        "rougel-24": 0.17391304347826086,
        "rougel-181": 0.21276595744680848,
        "rougel-122": 0.7499999999999999,
        "rougel-9": 0.456140350877193,
        "rougel-8": 0.4727272727272728,
        "rougel-25": 0.787878787878788,
        "rougel-61": 0.5490196078431372,
        "rougel-65": 0.36363636363636365,
        "rougel-152": 0.12448132780082988,
        "rougel-184": 0.43999999999999995,
        "rougel-169": 0.22580645161290322,
        "meteor-195": 0.6861538461538462,
        "meteor-30": 0.3373880416364077,
        "meteor-7": 0.5543091168091168,
        "meteor-77": 0.3474903474903475,
        "meteor-69": 0.5392116009667471,
        "meteor-63": 0.5015374279734374,
        "meteor-38": 0.3575186493914409,
        "meteor-28": 0.5763738837430682,
        "meteor-165": 0.4355047804245665,
        "meteor-24": 0.20942874966580524,
        "meteor-181": 0.4853677043599525,
        "meteor-122": 0.5629701967592592,
        "meteor-9": 0.6456396600385884,
        "meteor-8": 0.651645610364529,
        "meteor-25": 0.595088450807861,
        "meteor-61": 0.4795155344918378,
        "meteor-65": 0.3714782373126241,
        "meteor-152": 0.39793176338931074,
        "meteor-184": 0.4563164108618655,
        "meteor-169": 0.3100322544766989,
        "ruby-195": 0.65,
        "ruby-30": 0.125,
        "ruby-7": 0.5,
        "ruby-77": 0.189873417721519,
        "ruby-69": 0.24242424242424243,
        "ruby-63": 0.1428571428571429,
        "ruby-38": 0.12621359223300976,
        "ruby-28": 0.22448979591836737,
        "ruby-165": 0.125,
        "ruby-24": 0.08163265306122447,
        "ruby-181": 0.1074380165289256,
        "ruby-122": 0.6,
        "ruby-9": 0.2432432432432432,
        "ruby-8": 0.2571428571428571,
        "ruby-25": 0.65,
        "ruby-61": 0.3548387096774194,
        "ruby-65": 0.26086956521739135,
        "ruby-152": 0.06334841628959276,
        "ruby-184": 0.30000000000000004,
        "ruby-169": 0.11904761904761907,
        "codebertscore_f1-195": 0.9056685566902161,
        "codebertscore_f3-195": 0.8818262815475464,
        "codebertscore_f1-30": 0.7964040637016296,
        "codebertscore_f3-30": 0.8385686874389648,
        "codebertscore_f1-7": 0.8945222496986389,
        "codebertscore_f3-7": 0.9061220288276672,
        "codebertscore_f1-77": 0.6835781335830688,
        "codebertscore_f3-77": 0.7311680316925049,
        "codebertscore_f1-69": 0.7769538164138794,
        "codebertscore_f3-69": 0.8330156207084656,
        "codebertscore_f1-63": 0.7922173738479614,
        "codebertscore_f3-63": 0.8408754467964172,
        "codebertscore_f1-38": 0.6954444646835327,
        "codebertscore_f3-38": 0.775969386100769,
        "codebertscore_f1-28": 0.8094837069511414,
        "codebertscore_f3-28": 0.8765189051628113,
        "codebertscore_f1-165": 0.8175920844078064,
        "codebertscore_f3-165": 0.8586603999137878,
        "codebertscore_f1-24": 0.7115267515182495,
        "codebertscore_f3-24": 0.798578679561615,
        "codebertscore_f1-181": 0.7498602271080017,
        "codebertscore_f3-181": 0.7929929494857788,
        "codebertscore_f1-122": 0.9119616746902466,
        "codebertscore_f3-122": 0.9097728133201599,
        "codebertscore_f1-9": 0.830224871635437,
        "codebertscore_f3-9": 0.8567705154418945,
        "codebertscore_f1-8": 0.8340811729431152,
        "codebertscore_f3-8": 0.8514227867126465,
        "codebertscore_f1-25": 0.916913628578186,
        "codebertscore_f3-25": 0.8953765034675598,
        "codebertscore_f1-61": 0.876945436000824,
        "codebertscore_f3-61": 0.8756582736968994,
        "codebertscore_f1-65": 0.776910662651062,
        "codebertscore_f3-65": 0.7922878861427307,
        "codebertscore_f1-152": 0.7106196284294128,
        "codebertscore_f3-152": 0.7779669165611267,
        "codebertscore_f1-184": 0.8112115859985352,
        "codebertscore_f3-184": 0.8470731377601624,
        "codebertscore_f1-169": 0.7728073596954346,
        "codebertscore_f3-169": 0.8269526362419128,
        "codebertscore_s_f1-195": 0.9086006879806519,
        "codebertscore_s_f3-195": 0.8781985640525818,
        "codebertscore_s_f1-30": 0.7872784733772278,
        "codebertscore_s_f3-30": 0.8310580849647522,
        "codebertscore_s_f1-7": 0.9055277705192566,
        "codebertscore_s_f3-7": 0.9204410910606384,
        "codebertscore_s_f1-77": 0.697431743144989,
        "codebertscore_s_f3-77": 0.7526578903198242,
        "codebertscore_s_f1-69": 0.7830469012260437,
        "codebertscore_s_f3-69": 0.8391185402870178,
        "codebertscore_s_f1-63": 0.797122061252594,
        "codebertscore_s_f3-63": 0.8507649302482605,
        "codebertscore_s_f1-38": 0.68165522813797,
        "codebertscore_s_f3-38": 0.7755829095840454,
        "codebertscore_s_f1-28": 0.8026622533798218,
        "codebertscore_s_f3-28": 0.8875821828842163,
        "codebertscore_s_f1-165": 0.808106005191803,
        "codebertscore_s_f3-165": 0.8530821800231934,
        "codebertscore_s_f1-24": 0.7058666944503784,
        "codebertscore_s_f3-24": 0.7991636991500854,
        "codebertscore_s_f1-181": 0.7496899366378784,
        "codebertscore_s_f3-181": 0.8061680197715759,
        "codebertscore_s_f1-122": 0.9224938750267029,
        "codebertscore_s_f3-122": 0.9202408790588379,
        "codebertscore_s_f1-9": 0.8352675437927246,
        "codebertscore_s_f3-9": 0.8625273704528809,
        "codebertscore_s_f1-8": 0.8471296429634094,
        "codebertscore_s_f3-8": 0.8658519983291626,
        "codebertscore_s_f1-25": 0.9142502546310425,
        "codebertscore_s_f3-25": 0.882770836353302,
        "codebertscore_s_f1-61": 0.8865860104560852,
        "codebertscore_s_f3-61": 0.884506344795227,
        "codebertscore_s_f1-65": 0.7844522595405579,
        "codebertscore_s_f3-65": 0.7996798753738403,
        "codebertscore_s_f1-152": 0.7364717721939087,
        "codebertscore_s_f3-152": 0.8220820426940918,
        "codebertscore_s_f1-184": 0.8123628497123718,
        "codebertscore_s_f3-184": 0.8507956862449646,
        "codebertscore_s_f1-169": 0.7440502643585205,
        "codebertscore_s_f3-169": 0.8109580874443054,
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-38": 3,
        "raw_gpt35_nsnr-38": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-181": 3,
        "raw_gpt35_nsnr-181": "3",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-38": 0,
        "raw_gpt35_nswr-38": "Score: 1",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-181": 4,
        "raw_gpt35_nswr-181": "4",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-184": 4,
        "raw_gpt35_nswr-184": "4",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n"
        ],
        "simplified": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
        "task_id": "122",
        "192": "long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i] < 100)\n      sum += arr[i];\n  }\n  return sum;",
        "grade-192": {
            "execution": 1
        },
        "32": "// Write your code here\n  std::vector<long> input;\n  for(long i = 0; i < arr.size(); i++) {\n    if(arr[i] > 9 && arr[i] < 100) {\n      input.push_back(arr[i]);\n    }\n  }\n  if(input.size() == 0) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n      sum += arr[i];\n    }\n    return sum;\n  }\n  std::vector<long> res;\n  long sum = 0;\n  for(long i = 0; i < k; i++) {\n    if(input[i] > 9 && input[i] < 100) {\n      res.push_back(input[i]);\n    }\n  }\n  for(long i = 0; i < res.size(); i++) {\n    sum += res[i];\n  }\n  return sum;",
        "grade-32": {
            "execution": 0
        },
        "6": "long ans = 0;\n    for(long i = 0; i < k; i++) {\n        if(arr[i] < 100) {\n            ans += arr[i];\n        }\n    }\n    return ans;",
        "grade-6": {
            "execution": 1
        },
        "79": "long sum = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
        "grade-79": {
            "execution": 0
        },
        "71": "int count = 0;\n  long sum = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (count == k) {\n      break;\n    }\n    if (arr[i] < 100) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return sum;",
        "grade-71": {
            "execution": 0
        },
        "66": "long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;",
        "grade-66": {
            "execution": 1
        },
        "40": "long res = 0;\n\tint count = 0;\n\tfor(long i = 0; i < arr.size(); i++) {\n\t\tint digits = 0;\n\t\twhile(arr[i] > 0) {\n\t\t\tdigits++;\n\t\t\tarr[i] /= 10;\n\t\t}\n\t\tif(digits <= 2) {\n\t\t\tres += arr[i];\n\t\t\tcount++;\n\t\t}\n\t\tif(count == k)\n\t\t\tbreak;\n\t}\n\treturn res;",
        "grade-40": {
            "execution": 0
        },
        "30": "long ret = 0;\n  for (long i = 0; i < k; i++) {\n    ret += (arr[i] / 10 == 0) ? arr[i] : arr[i] % 10 + arr[i] / 10;\n  }\n  return ret;",
        "grade-30": {
            "execution": 0
        },
        "161": "long sum = 0;\n\tfor (int i = 0; i < k; i++) {\n\t\tif (arr[i] > 9 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-161": {
            "execution": 0
        },
        "26": "long sum = 0;\n\tlong i = 0;\n\tfor (i = 0; i < k; i++) {\n\t\tif (arr[i] > 9 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-26": {
            "execution": 0
        },
        "177": "long sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tif (arr[i] > 99) {\n\t\t\tarr[i] = 99;\n\t\t}\n\t\tsum += arr[i];\n\t}\n\treturn sum;",
        "grade-177": {
            "execution": 0
        },
        "120": "// std::cout << \"k = \" << k << \"\\n\";\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        // std::cout << \"arr[i] = \" << arr[i] << \"\\n\";\n        sum += arr[i];\n    }\n    return sum;",
        "grade-120": {
            "execution": 0
        },
        "9": "long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;",
        "grade-9": {
            "execution": 1
        },
        "7": "long result = 0;\n    for(long i = 0; i < k; i++) {\n        if(arr[i] < 10 || arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "27": "long sum = 0;\n    for(long i = 0; i < k; i++) {\n        long element = arr[i];\n        if(arr[i] > 9 && arr[i] < 100) {\n            sum += element;\n        }\n    }\n    return sum;",
        "grade-27": {
            "execution": 0
        },
        "64": "std::vector<long> dp(arr.size(), 0);\n    long res = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            res += arr[i];\n        } else if (arr[i] < 100) {\n            res += arr[i] - 10;\n        } else {\n            res += arr[i] - 100;\n        }\n    }\n    dp[k-1] = res;\n    for (int i = k; i < arr.size(); i++) {\n        if (arr[i-k] < 10) {\n            res -= arr[i-k];\n        } else if (arr[i-k] < 100) {\n            res -= arr[i-k] - 10;\n        } else {\n            res -= arr[i-k] - 100;\n        }\n        if (arr[i] < 10) {\n            res += arr[i];\n        } else if (arr[i] < 100) {\n            res += arr[i] - 10;\n        } else {\n            res += arr[i] - 100;\n        }\n        dp[i] = res;\n    }\n    return dp[arr.size()-1];",
        "grade-64": {
            "execution": 0
        },
        "68": "long sum = 0;\n  for (long i = 0; i < k; i++) {\n    long temp = arr[i];\n    if (temp > 9) {\n      sum += (temp % 10) + (temp / 10);\n    } else {\n      sum += temp;\n    }\n  }\n  return sum;",
        "grade-68": {
            "execution": 0
        },
        "146": "// int result = 0;\n    // for(int i = 0; i < k; i++) {\n    //     if(arr[i] > 99)\n    //         result += arr[i];\n    // }\n    // return result;\n    long result = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] >= 10 && arr[i] <= 99)\n            result += arr[i];\n    }\n    return result;",
        "grade-146": {
            "execution": 0
        },
        "180": "// insert your code here\n  long sum = 0;\n  for(long i = 0; i < k; i++) {\n    if(arr[i] >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;",
        "grade-180": {
            "execution": 0
        },
        "167": "// 1. Check validity of input\n    assert(1 <= arr.size() && arr.size() <= 100);\n    assert(1 <= k && k <= arr.size());\n    // 2. Let's define a variable that will hold the response\n    long res = 0;\n    // 3. Loop through first k elements of arr\n    for (long i = 0; i < k; i++) {\n        // 4. Check whether the current element has at most two digits\n        if (arr[i] <= 99) {\n            // 5. If so, add it to res\n            res += arr[i];\n        }\n    }\n    // 6. After the loop is done, return res\n    return res;",
        "grade-167": {
            "execution": 1
        },
        "bleu-192": 0.6404043509511197,
        "bleu-32": 0.16309607613060562,
        "bleu-6": 0.5135656929512421,
        "bleu-79": 0.6866771609139861,
        "bleu-71": 0.39845251621922406,
        "bleu-66": 0.49655663696616104,
        "bleu-40": 0.28061164346027034,
        "bleu-30": 0.41238388383896596,
        "bleu-161": 0.6866771609139861,
        "bleu-26": 0.5883898418361426,
        "bleu-177": 0.6430642449784262,
        "bleu-120": 0.3553927364432721,
        "bleu-9": 0.5730607722185872,
        "bleu-7": 0.5522861792095729,
        "bleu-27": 0.5598585214031767,
        "bleu-64": 0.12179812434395193,
        "bleu-68": 0.37186591063783625,
        "bleu-146": 0.3441691263733673,
        "bleu-180": 0.5723490974078171,
        "bleu-167": 0.17719018547229104,
        "codebleu-192": 0.6676669001884795,
        "codebleu-32": 0.6445271721924554,
        "codebleu-6": 0.6454329948403421,
        "codebleu-79": 0.711477639567744,
        "codebleu-71": 0.6674367939006476,
        "codebleu-66": 0.7031885638077906,
        "codebleu-40": 0.6909802057232827,
        "codebleu-30": 0.6574244729464599,
        "codebleu-161": 0.711477639567744,
        "codebleu-26": 0.6882692357606781,
        "codebleu-177": 0.7062976142882518,
        "codebleu-120": 0.5818815885632702,
        "codebleu-9": 0.659857477509982,
        "codebleu-7": 0.6827862828478928,
        "codebleu-27": 0.7099436878347841,
        "codebleu-64": 0.6709977306555516,
        "codebleu-68": 0.6023307542783165,
        "codebleu-146": 0.6976410995764917,
        "codebleu-180": 0.6995558097263599,
        "codebleu-167": 0.6503703292321288,
        "chrf-192": 0.6525487595661424,
        "chrf-32": 0.3766416799714175,
        "chrf-6": 0.44960160814915523,
        "chrf-79": 0.6816199166665523,
        "chrf-71": 0.49866755834176735,
        "chrf-66": 0.5718267957651775,
        "chrf-40": 0.37781576778072773,
        "chrf-30": 0.39973320404434076,
        "chrf-161": 0.6816199166665523,
        "chrf-26": 0.6118027314483473,
        "chrf-177": 0.6195359352721111,
        "chrf-120": 0.5151901474902939,
        "chrf-9": 0.5640538971069787,
        "chrf-7": 0.4771048848881304,
        "chrf-27": 0.570645372975894,
        "chrf-64": 0.31078628896824706,
        "chrf-68": 0.42535298166730434,
        "chrf-146": 0.5247587987885189,
        "chrf-180": 0.5971132011943444,
        "chrf-167": 0.30466732862924484,
        "rougel-192": 0.8172043010752689,
        "rougel-32": 0.3149606299212599,
        "rougel-6": 0.7157894736842105,
        "rougel-79": 0.8349514563106797,
        "rougel-71": 0.638655462184874,
        "rougel-66": 0.7304347826086957,
        "rougel-40": 0.5454545454545455,
        "rougel-30": 0.6363636363636364,
        "rougel-161": 0.8349514563106797,
        "rougel-26": 0.7850467289719627,
        "rougel-177": 0.8431372549019607,
        "rougel-120": 0.582089552238806,
        "rougel-9": 0.7789473684210527,
        "rougel-7": 0.7378640776699028,
        "rougel-27": 0.7037037037037038,
        "rougel-64": 0.2692307692307692,
        "rougel-68": 0.5565217391304348,
        "rougel-146": 0.5605095541401274,
        "rougel-180": 0.7818181818181819,
        "rougel-167": 0.3478260869565218,
        "meteor-192": 0.7562980547780179,
        "meteor-32": 0.5198426019171235,
        "meteor-6": 0.6625877388728851,
        "meteor-79": 0.8543297455968689,
        "meteor-71": 0.6788952139995784,
        "meteor-66": 0.7413908815369168,
        "meteor-40": 0.6449580777249478,
        "meteor-30": 0.6279842818304358,
        "meteor-161": 0.8543297455968689,
        "meteor-26": 0.8433513199069245,
        "meteor-177": 0.8308012587751149,
        "meteor-120": 0.6805933912997667,
        "meteor-9": 0.7272707246823767,
        "meteor-7": 0.7455569837023999,
        "meteor-27": 0.7835223268627075,
        "meteor-64": 0.31250000000000006,
        "meteor-68": 0.543140535372849,
        "meteor-146": 0.8111104605450256,
        "meteor-180": 0.8384670458534095,
        "meteor-167": 0.6218762544555845,
        "ruby-192": 0.7058823529411764,
        "ruby-32": 0.1921182266009852,
        "ruby-6": 0.5882352941176471,
        "ruby-79": 0.7692307692307692,
        "ruby-71": 0.5147058823529411,
        "ruby-66": 0.625,
        "ruby-40": 0.42391304347826086,
        "ruby-30": 0.5593220338983051,
        "ruby-161": 0.7692307692307692,
        "ruby-26": 0.6785714285714286,
        "ruby-177": 0.7647058823529411,
        "ruby-120": 0.4457831325301205,
        "ruby-9": 0.6470588235294117,
        "ruby-7": 0.6730769230769231,
        "ruby-27": 0.5789473684210527,
        "ruby-64": 0.16091954022988508,
        "ruby-68": 0.453125,
        "ruby-146": 0.4056603773584906,
        "ruby-180": 0.6949152542372881,
        "ruby-167": 0.21153846153846156,
        "codebertscore_f1-192": 0.9315026998519897,
        "codebertscore_f3-192": 0.9170108437538147,
        "codebertscore_f1-32": 0.8014073371887207,
        "codebertscore_f3-32": 0.8454728722572327,
        "codebertscore_f1-6": 0.9174646735191345,
        "codebertscore_f3-6": 0.903762936592102,
        "codebertscore_f1-79": 0.9437876343727112,
        "codebertscore_f3-79": 0.9390619397163391,
        "codebertscore_f1-71": 0.8801315426826477,
        "codebertscore_f3-71": 0.8876548409461975,
        "codebertscore_f1-66": 0.9083746671676636,
        "codebertscore_f3-66": 0.9045893549919128,
        "codebertscore_f1-40": 0.8411744236946106,
        "codebertscore_f3-40": 0.8619424700737,
        "codebertscore_f1-30": 0.8765715956687927,
        "codebertscore_f3-30": 0.8789381980895996,
        "codebertscore_f1-161": 0.9386533498764038,
        "codebertscore_f3-161": 0.9338287711143494,
        "codebertscore_f1-26": 0.9296082258224487,
        "codebertscore_f3-26": 0.9257326126098633,
        "codebertscore_f1-177": 0.9281105399131775,
        "codebertscore_f3-177": 0.9154622554779053,
        "codebertscore_f1-120": 0.8422503471374512,
        "codebertscore_f3-120": 0.8650497794151306,
        "codebertscore_f1-9": 0.9273183941841125,
        "codebertscore_f3-9": 0.9130484461784363,
        "codebertscore_f1-7": 0.9116342663764954,
        "codebertscore_f3-7": 0.9077212810516357,
        "codebertscore_f1-27": 0.9166227579116821,
        "codebertscore_f3-27": 0.9195970296859741,
        "codebertscore_f1-64": 0.7359151244163513,
        "codebertscore_f3-64": 0.8047341704368591,
        "codebertscore_f1-68": 0.872843861579895,
        "codebertscore_f3-68": 0.8913217186927795,
        "codebertscore_f1-146": 0.863984227180481,
        "codebertscore_f3-146": 0.8825547695159912,
        "codebertscore_f1-180": 0.8896028399467468,
        "codebertscore_f3-180": 0.9135058522224426,
        "codebertscore_f1-167": 0.7249858379364014,
        "codebertscore_f3-167": 0.7975248098373413,
        "codebertscore_s_f1-192": 0.9293114542961121,
        "codebertscore_s_f3-192": 0.9144026637077332,
        "codebertscore_s_f1-32": 0.8218963146209717,
        "codebertscore_s_f3-32": 0.8591670989990234,
        "codebertscore_s_f1-6": 0.905831515789032,
        "codebertscore_s_f3-6": 0.8920090198516846,
        "codebertscore_s_f1-79": 0.9385426640510559,
        "codebertscore_s_f3-79": 0.93397057056427,
        "codebertscore_s_f1-71": 0.8818031549453735,
        "codebertscore_s_f3-71": 0.8901259303092957,
        "codebertscore_s_f1-66": 0.900783896446228,
        "codebertscore_s_f3-66": 0.8965438604354858,
        "codebertscore_s_f1-40": 0.8299944996833801,
        "codebertscore_s_f3-40": 0.848368763923645,
        "codebertscore_s_f1-30": 0.8623307347297668,
        "codebertscore_s_f3-30": 0.8645217418670654,
        "codebertscore_s_f1-161": 0.9333806037902832,
        "codebertscore_s_f3-161": 0.928805410861969,
        "codebertscore_s_f1-26": 0.920353889465332,
        "codebertscore_s_f3-26": 0.9157181978225708,
        "codebertscore_s_f1-177": 0.9177283644676208,
        "codebertscore_s_f3-177": 0.9049401879310608,
        "codebertscore_s_f1-120": 0.8471623063087463,
        "codebertscore_s_f3-120": 0.8679680228233337,
        "codebertscore_s_f1-9": 0.9201214909553528,
        "codebertscore_s_f3-9": 0.9055948853492737,
        "codebertscore_s_f1-7": 0.8993664979934692,
        "codebertscore_s_f3-7": 0.8951910734176636,
        "codebertscore_s_f1-27": 0.9120913147926331,
        "codebertscore_s_f3-27": 0.914393961429596,
        "codebertscore_s_f1-64": 0.7683955430984497,
        "codebertscore_s_f3-64": 0.8281394839286804,
        "codebertscore_s_f1-68": 0.8662073612213135,
        "codebertscore_s_f3-68": 0.8857576847076416,
        "codebertscore_s_f1-146": 0.8789923787117004,
        "codebertscore_s_f3-146": 0.8984359502792358,
        "codebertscore_s_f1-180": 0.8885282278060913,
        "codebertscore_s_f3-180": 0.9127950072288513,
        "codebertscore_s_f1-167": 0.7423047423362732,
        "codebertscore_s_f3-167": 0.8190317749977112,
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-40": 3,
        "raw_gpt35_nsnr-40": "3",
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-120": 3,
        "raw_gpt35_nsnr-120": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-79": 4,
        "raw_gpt35_nswr-79": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-40": 2,
        "raw_gpt35_nswr-40": "2",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-120": 2,
        "raw_gpt35_nswr-120": "2",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-146": 4,
        "raw_gpt35_nswr-146": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns True if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\nbool simplify(std::string x, std::string n) {\n",
        "snippet": [
            "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n"
        ],
        "simplified": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
        "task_id": "144",
        "163": "int numeratorX = stoi(x.substr(0, x.find(\"/\")));\n  int denominatorX = stoi(x.substr(x.find(\"/\") + 1));\n  int numeratorN = stoi(n.substr(0, n.find(\"/\")));\n  int denominatorN = stoi(n.substr(n.find(\"/\") + 1));\n  float temp1 = (float)numeratorX / denominatorX;\n  float temp2 = (float)numeratorN / denominatorN;\n  float answer = temp1 * temp2;\n  std::cout << answer << std::endl;\n  return answer - (int)answer == 0;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::stringstream ss(x);\n  std::string token;\n  int numer;\n  int denom;\n  int count = 0;\n  while(std::getline(ss, token, '/')) {\n    if (count == 0)\n      numer = std::stoi(token);\n    else if (count == 1)\n      denom = std::stoi(token);\n    count += 1;\n  }\n  // numer * denom/denom == numer\n  if (numer * denom % denom == 0)\n    return true;\n  else\n    return false;",
        "grade-28": {
            "execution": 0
        },
        "6": "// write your solution here\n    return true;",
        "grade-6": {
            "execution": 0
        },
        "189": "using namespace std;\n  stringstream fx(x), fn(n);\n  int num1, denom1, num2, denom2;\n  getline(fx, x, '/');\n  getline(fn, n, '/');\n  istringstream(x) >> num1;\n  istringstream(n) >> num2;\n  getline(fx, x, '/');\n  getline(fn, n, '/');\n  istringstream(x) >> denom1;\n  istringstream(n) >> denom2;\n  if ((num1 * denom2) % (num2 * denom1) == 0)\n    return true;\n  return false;",
        "grade-189": {
            "execution": 0
        },
        "70": "int i=0;\n    for(;i<x.size();i++){\n        if(x[i]=='/')\n            break;\n    }\n    int p1=std::stoi(x.substr(0,i));\n    int p2=std::stoi(x.substr(i+1,x.size()-i-1));\n    i=0;\n    for(;i<n.size();i++){\n        if(n[i]=='/')\n            break;\n    }\n    int q1=std::stoi(n.substr(0,i));\n    int q2=std::stoi(n.substr(i+1,n.size()-i-1));\n    if((p1*q2)%(p2*q1)==0)\n        return true;\n    return false;",
        "grade-70": {
            "execution": 0
        },
        "62": "unsigned long slash_x = x.find(\"/\");\n  unsigned long slash_n = n.find(\"/\");\n  int x_num = std::stoi(x.substr(0, slash_x));\n  int x_den = std::stoi(x.substr(slash_x + 1));\n  int n_num = std::stoi(n.substr(0, slash_n));\n  int n_den = std::stoi(n.substr(slash_n + 1));\n  return (x_num * n_den) % (x_den * n_num) == 0;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::string>v1,v2;\n  std::string delimiter = \"/\";\n  size_t pos = 0;\n  std::string token;\n  while ((pos = x.find(delimiter)) != std::string::npos) {\n      token = x.substr(0, pos);\n      v1.push_back(token);\n      x.erase(0, pos + delimiter.length());\n  }\n  v1.push_back(x);\n  while ((pos = n.find(delimiter)) != std::string::npos) {\n      token = n.substr(0, pos);\n      v2.push_back(token);\n      n.erase(0, pos + delimiter.length());\n  }\n  v2.push_back(n);\n  std::vector<int> f1,f2;\n  for(int i=0;i<v1.size();i++){\n    int h = std::stoi(v1[i]);\n    f1.push_back(h);\n  }\n  for(int i=0;i<v2.size();i++){\n    int h = std::stoi(v2[i]);\n    f2.push_back(h);\n  }\n  int gcd = __gcd(f1[0]*f2[1],f1[1]*f2[0]);\n  if(gcd == f1[1]*f2[0]){\n    return true;\n  }\n  else{\n    return false;\n  }",
        "grade-57": {
            "execution": 0
        },
        "35": "// <div class=\"hint\" style=\"display: inline-block\">\n  // <span style=\"color: #404040\">\n  //   <em>Hint:</em>\n  // </span>\n  // <span style=\"color: #f4b067\">\n  //   <strong>\n  //     <em>Note</em>\n  //   </strong>\n  // </span>\n  // <span style=\"color: #404040\">\n  //   <em>\n  //     : You can read strings as numbers by using <code>stoi</code>\n  //   </em>\n  // </span>\n  // </div>\n  return false;",
        "grade-35": {
            "execution": 0
        },
        "188": "// your code goes here\n  long long int x_num, x_den, n_num, n_den;\n  int num_slash=0;\n  for(int i=0; i<x.length(); i++){\n    if(x[i]=='/')\n      num_slash++;\n  }\n  if(num_slash==0){\n    x_num = std::stoi(x);\n    x_den = 1;\n  }\n  else{\n    std::vector<std::string> nums;\n    std::string num=\"\";\n    for(int i=0; i<x.length(); i++){\n      if(x[i]=='/'){\n        nums.push_back(num);\n        num=\"\";\n      }\n      else{\n        num+=x[i];\n      }\n    }\n    nums.push_back(num);\n    x_num = std::stoi(nums[0]);\n    x_den = std::stoi(nums[1]);\n  }\n  num_slash=0;\n  for(int i=0; i<n.length(); i++){\n    if(n[i]=='/')\n      num_slash++;\n  }\n  if(num_slash==0){\n    n_num = std::stoi(n);\n    n_den = 1;\n  }\n  else{\n    std::vector<std::string> nums;\n    std::string num=\"\";\n    for(int i=0; i<n.length(); i++){\n      if(n[i]=='/'){\n        nums.push_back(num);\n        num=\"\";\n      }\n      else{\n        num+=n[i];\n      }\n    }\n    nums.push_back(num);\n    n_num = std::stoi(nums[0]);\n    n_den = std::stoi(nums[1]);\n  }\n  //Multiply numerators and denominators\n  long long int x_num_n_num = x_num*n_num;\n  long long int x_den_",
        "grade-188": {
            "execution": 0
        },
        "26": "std::string mul = std::to_string(std::stoi(x.substr(0, x.find('/'))) * std::stoi(n.substr(0, n.find('/')))) + '/' +\n\t\tstd::to_string(std::stoi(x.substr(x.find('/') + 1)) * std::stoi(n.substr(n.find('/') + 1)));\n\tstd::cout << mul << std::endl;\n\tif (mul.substr(mul.find('/') + 1) == \"1\")\n\t\treturn true;\n\treturn false;",
        "grade-26": {
            "execution": 0
        },
        "173": "int gcd(int, int);\n\tint num1, den1, num2, den2;\n\tstd::stringstream ss(x);\n\tstd::string item;\n\tstd::vector<std::string> tokens;\n\twhile (std::getline(ss, item, '/')) {\n\t\ttokens.push_back(item);\n\t}\n\tnum1 = stoi(tokens[0]);\n\tden1 = stoi(tokens[1]);\n\ttokens.clear();\n\tstd::stringstream ss1(n);\n\twhile (std::getline(ss1, item, '/')) {\n\t\ttokens.push_back(item);\n\t}\n\tnum2 = stoi(tokens[0]);\n\tden2 = stoi(tokens[1]);\n\treturn num1 * den2 % (num2 * den1) == 0;",
        "grade-173": {
            "execution": 0
        },
        "139": "size_t slash_x = x.find('/');\n    size_t slash_n = n.find('/');\n    int num_x = std::stoi(x.substr(0, slash_x));\n    int den_x = std::stoi(x.substr(slash_x + 1));\n    int num_n = std::stoi(n.substr(0, slash_n));\n    int den_n = std::stoi(n.substr(slash_n + 1));\n    return (num_x * den_n) % (den_x * num_n) == 0;",
        "grade-139": {
            "execution": 0
        },
        "22": "return true;",
        "grade-22": {
            "execution": 0
        },
        "151": "int n1, n2, d1, d2;\n    sscanf(x.c_str(), \"%d/%d\", &n1, &d1);\n    sscanf(n.c_str(), \"%d/%d\", &n2, &d2);\n    if (n1*d2 == n2*d1) return true;\n    return false;",
        "grade-151": {
            "execution": 0
        },
        "108": "// Write your code here\n    int numerator1,denominator1,numerator2,denominator2;\n    int i = 0;\n    while(x[i] != '/')\n    {\n        i++;\n    }\n    numerator1 = stoi(x.substr(0,i));\n    denominator1 = stoi(x.substr(i+1,x.length()-i));\n    i = 0;\n    while(n[i] != '/')\n    {\n        i++;\n    }\n    numerator2 = stoi(n.substr(0,i));\n    denominator2 = stoi(n.substr(i+1,n.length()-i));\n    int num = numerator1 * denominator2;\n    int den = denominator1 * numerator2;\n    if(num % den == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-108": {
            "execution": 0
        },
        "8": "size_t pos = x.find(\"/\");\n    if (pos == std::string::npos)\n        return false;\n    std::string x1 = x.substr(0, pos);\n    std::string x2 = x.substr(pos + 1);\n    pos = n.find(\"/\");\n    if (pos == std::string::npos)\n        return false;\n    std::string n1 = n.substr(0, pos);\n    std::string n2 = n.substr(pos + 1);\n    std::string s = std::to_string(std::stoi(x1) * std::stoi(n2));\n    s += \"/\";\n    s += std::to_string(std::stoi(x2) * std::stoi(n1));\n    std::string s2 = \"1/1\";\n    return s == s2;",
        "grade-8": {
            "execution": 0
        },
        "7": "int x1 = stoi(x.substr(0, x.find('/')));\n    int x2 = stoi(x.substr(x.find('/') + 1));\n    int n1 = stoi(n.substr(0, n.find('/')));\n    int n2 = stoi(n.substr(n.find('/') + 1));\n    int result = x1 * n1;\n    int denom = x2 * n2;\n    if (result % denom == 0) {\n        return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "// todo\n\treturn true;",
        "grade-23": {
            "execution": 0
        },
        "55": "int n1, d1, n2, d2;\n\tint found1 = x.find(\"/\");\n\tint found2 = n.find(\"/\");\n\tn1 = std::stoi(x.substr(0, found1));\n\td1 = std::stoi(x.substr(found1 + 1, x.length()));\n\tn2 = std::stoi(n.substr(0, found2));\n\td2 = std::stoi(n.substr(found2 + 1, n.length()));\n\treturn (n1*d2) % (d1*n2) == 0;",
        "grade-55": {
            "execution": 0
        },
        "59": "int num1 = atoi(x.substr(0,x.find(\"/\")).c_str());\n    int den1 = atoi(x.substr(x.find(\"/\")+1).c_str());\n    int num2 = atoi(n.substr(0,n.find(\"/\")).c_str());\n    int den2 = atoi(n.substr(n.find(\"/\")+1).c_str());\n    if(num1*den2 % den1 == 0)\n        return true;\n    return false;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.20740296258556093,
        "bleu-28": 0.0892419164280191,
        "bleu-6": 3.071117127936026e-09,
        "bleu-189": 0.13259796161751347,
        "bleu-70": 0.5428168592682904,
        "bleu-62": 0.19334776190996095,
        "bleu-57": 0.20318788318489633,
        "bleu-35": 0.013884559369015247,
        "bleu-188": 0.17100392297244066,
        "bleu-26": 0.2298797345075726,
        "bleu-173": 0.09493221011845529,
        "bleu-139": 0.19164491009569434,
        "bleu-22": 4.780892883885471e-25,
        "bleu-151": 0.056608095081785395,
        "bleu-108": 0.39530200983955566,
        "bleu-8": 0.1661030307924278,
        "bleu-7": 0.20827190407571586,
        "bleu-23": 3.913529605370925e-13,
        "bleu-55": 0.21138838782364786,
        "bleu-59": 0.37965541917281587,
        "codebleu-163": 0.444883561174933,
        "codebleu-28": 0.3014665296186794,
        "codebleu-6": 0.019525812272868454,
        "codebleu-189": 0.34494932333690004,
        "codebleu-70": 0.7271148285951106,
        "codebleu-62": 0.42159796050274095,
        "codebleu-57": 0.6524416430402192,
        "codebleu-35": 0.14615718914462628,
        "codebleu-188": 0.6390873798643129,
        "codebleu-26": 0.45103171639218503,
        "codebleu-173": 0.4594695934343965,
        "codebleu-139": 0.414879538212792,
        "codebleu-22": 0.008368200836820083,
        "codebleu-151": 0.1953441698878208,
        "codebleu-108": 0.5969925834666345,
        "codebleu-8": 0.4899237777465094,
        "codebleu-7": 0.415496616061544,
        "codebleu-23": 0.011157601205048098,
        "codebleu-55": 0.4785457768060769,
        "codebleu-59": 0.4589430443337722,
        "chrf-163": 0.297609120730249,
        "chrf-28": 0.21526331972885904,
        "chrf-6": 0.05905060144560065,
        "chrf-189": 0.2342026581590183,
        "chrf-70": 0.5942919796370092,
        "chrf-62": 0.29706443299850993,
        "chrf-57": 0.3377309143611686,
        "chrf-35": 0.11614591692458177,
        "chrf-188": 0.2659150686381833,
        "chrf-26": 0.36718389063286727,
        "chrf-173": 0.1903839334833513,
        "chrf-139": 0.3179896737064831,
        "chrf-22": 0.04233795235305311,
        "chrf-151": 0.19991457423247522,
        "chrf-108": 0.41997080694807404,
        "chrf-8": 0.29970658146545504,
        "chrf-7": 0.36855278787407675,
        "chrf-23": 0.04861921732239074,
        "chrf-55": 0.30395825190945913,
        "chrf-59": 0.5172167819743133,
        "rougel-163": 0.36990595611285265,
        "rougel-28": 0.3250883392226148,
        "rougel-6": 0.05555555555555555,
        "rougel-189": 0.4013605442176871,
        "rougel-70": 0.7226890756302521,
        "rougel-62": 0.4631578947368421,
        "rougel-57": 0.3825363825363825,
        "rougel-35": 0.0880503144654088,
        "rougel-188": 0.3992932862190813,
        "rougel-26": 0.36419753086419754,
        "rougel-173": 0.3592814371257485,
        "rougel-139": 0.4664310954063604,
        "rougel-22": 0.034482758620689655,
        "rougel-151": 0.32098765432098764,
        "rougel-108": 0.599406528189911,
        "rougel-8": 0.3846153846153846,
        "rougel-7": 0.4344827586206897,
        "rougel-23": 0.05649717514124293,
        "rougel-55": 0.5066666666666667,
        "rougel-59": 0.5410958904109588,
        "meteor-163": 0.36017291012457925,
        "meteor-28": 0.2712193840854028,
        "meteor-6": 0.01614987080103359,
        "meteor-189": 0.331341745545372,
        "meteor-70": 0.6519812896566991,
        "meteor-62": 0.3192595281306715,
        "meteor-57": 0.44426589920891607,
        "meteor-35": 0.06619750684447946,
        "meteor-188": 0.3691830691270376,
        "meteor-26": 0.39322048849755187,
        "meteor-173": 0.3077587202404965,
        "meteor-139": 0.31964627498485765,
        "meteor-22": 0.009727626459143967,
        "meteor-151": 0.21464866795421578,
        "meteor-108": 0.5185154244633573,
        "meteor-8": 0.31423674020003756,
        "meteor-7": 0.379268295342392,
        "meteor-23": 0.016181229773462782,
        "meteor-55": 0.35085993705035967,
        "meteor-59": 0.46673470742474027,
        "ruby-163": 0.19298245614035092,
        "ruby-28": 0.20467836257309946,
        "ruby-6": 0.0292397660818714,
        "ruby-189": 0.2865497076023392,
        "ruby-70": 0.586021505376344,
        "ruby-62": 0.3099415204678363,
        "ruby-57": 0.26774193548387093,
        "ruby-35": 0.052631578947368474,
        "ruby-188": 0.27341772151898736,
        "ruby-26": 0.216374269005848,
        "ruby-173": 0.19298245614035092,
        "ruby-139": 0.3157894736842105,
        "ruby-22": 0.01754385964912286,
        "ruby-151": 0.19883040935672514,
        "ruby-108": 0.39766081871345027,
        "ruby-8": 0.1658031088082902,
        "ruby-7": 0.26900584795321636,
        "ruby-23": 0.0292397660818714,
        "ruby-55": 0.36257309941520466,
        "ruby-59": 0.368421052631579,
        "codebertscore_f1-163": 0.7469976544380188,
        "codebertscore_f3-163": 0.7525378465652466,
        "codebertscore_f1-28": 0.7210107445716858,
        "codebertscore_f3-28": 0.7285276055335999,
        "codebertscore_f1-6": 0.5131457448005676,
        "codebertscore_f3-6": 0.4872872531414032,
        "codebertscore_f1-189": 0.7059159874916077,
        "codebertscore_f3-189": 0.7079606056213379,
        "codebertscore_f1-70": 0.8701494336128235,
        "codebertscore_f3-70": 0.8801006078720093,
        "codebertscore_f1-62": 0.7578833699226379,
        "codebertscore_f3-62": 0.7518554925918579,
        "codebertscore_f1-57": 0.7580986022949219,
        "codebertscore_f3-57": 0.7939357757568359,
        "codebertscore_f1-35": 0.6035590171813965,
        "codebertscore_f3-35": 0.6086837649345398,
        "codebertscore_f1-188": 0.7315024137496948,
        "codebertscore_f3-188": 0.7636567950248718,
        "codebertscore_f1-26": 0.7485544085502625,
        "codebertscore_f3-26": 0.7451263666152954,
        "codebertscore_f1-173": 0.7199403047561646,
        "codebertscore_f3-173": 0.7359405755996704,
        "codebertscore_f1-139": 0.767420768737793,
        "codebertscore_f3-139": 0.7619678974151611,
        "codebertscore_f1-22": 0.5059754252433777,
        "codebertscore_f3-22": 0.45099252462387085,
        "codebertscore_f1-151": 0.7226875424385071,
        "codebertscore_f3-151": 0.7167602181434631,
        "codebertscore_f1-108": 0.8250837326049805,
        "codebertscore_f3-108": 0.8550122380256653,
        "codebertscore_f1-8": 0.771605908870697,
        "codebertscore_f3-8": 0.7837502956390381,
        "codebertscore_f1-7": 0.7963423728942871,
        "codebertscore_f3-7": 0.7841156721115112,
        "codebertscore_f1-23": 0.5252519249916077,
        "codebertscore_f3-23": 0.4781862497329712,
        "codebertscore_f1-55": 0.771426796913147,
        "codebertscore_f3-55": 0.7692674994468689,
        "codebertscore_f1-59": 0.8126780390739441,
        "codebertscore_f3-59": 0.7979332804679871,
        "codebertscore_s_f1-163": 0.7540248036384583,
        "codebertscore_s_f3-163": 0.7550836205482483,
        "codebertscore_s_f1-28": 0.7161267399787903,
        "codebertscore_s_f3-28": 0.7209579348564148,
        "codebertscore_s_f1-6": 0.5748519897460938,
        "codebertscore_s_f3-6": 0.5276740789413452,
        "codebertscore_s_f1-189": 0.7010402679443359,
        "codebertscore_s_f3-189": 0.7001727819442749,
        "codebertscore_s_f1-70": 0.8718746900558472,
        "codebertscore_s_f3-70": 0.8794111013412476,
        "codebertscore_s_f1-62": 0.7697722315788269,
        "codebertscore_s_f3-62": 0.7554728984832764,
        "codebertscore_s_f1-57": 0.7773646116256714,
        "codebertscore_s_f3-57": 0.8120133876800537,
        "codebertscore_s_f1-35": 0.6019273996353149,
        "codebertscore_s_f3-35": 0.6033754348754883,
        "codebertscore_s_f1-188": 0.744540810585022,
        "codebertscore_s_f3-188": 0.7667931318283081,
        "codebertscore_s_f1-26": 0.755646824836731,
        "codebertscore_s_f3-26": 0.75350421667099,
        "codebertscore_s_f1-173": 0.7152224183082581,
        "codebertscore_s_f3-173": 0.7263443470001221,
        "codebertscore_s_f1-139": 0.7747713327407837,
        "codebertscore_s_f3-139": 0.7623155117034912,
        "codebertscore_s_f1-22": 0.6344596743583679,
        "codebertscore_s_f3-22": 0.5215387940406799,
        "codebertscore_s_f1-151": 0.7428987622261047,
        "codebertscore_s_f3-151": 0.7375802993774414,
        "codebertscore_s_f1-108": 0.8224914073944092,
        "codebertscore_s_f3-108": 0.8478416204452515,
        "codebertscore_s_f1-8": 0.7712545990943909,
        "codebertscore_s_f3-8": 0.7824830412864685,
        "codebertscore_s_f1-7": 0.7993848919868469,
        "codebertscore_s_f3-7": 0.7841174602508545,
        "codebertscore_s_f1-23": 0.5892612934112549,
        "codebertscore_s_f3-23": 0.526097297668457,
        "codebertscore_s_f1-55": 0.7771022915840149,
        "codebertscore_s_f3-55": 0.7716494798660278,
        "codebertscore_s_f1-59": 0.8157514333724976,
        "codebertscore_s_f3-59": 0.7996237874031067,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 0,
        "raw_gpt35_nswr-22": "0",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 0,
        "raw_gpt35_nswr-23": "0",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nstd::vector<long> derivative(std::vector<long> xs) {\n",
        "snippet": [
            "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n"
        ],
        "simplified": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
        "task_id": "62",
        "32": "// Implement your solution here\n  std::vector<long> v;\n  for(int i=1;i<xs.size();i++){\n      v.push_back(xs[i]*i);\n  }\n  return v;",
        "grade-32": {
            "execution": 1
        },
        "6": "int sz = xs.size();\n    std::vector<long> vs;\n    for (int i = 1; i < sz; i++) {\n        vs.push_back(xs[i] * i);\n    }\n    return vs;",
        "grade-6": {
            "execution": 1
        },
        "87": "std::vector<long> results;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tresults.push_back(xs[i] * i);\n\t}\n\treturn results;",
        "grade-87": {
            "execution": 1
        },
        "77": "std::vector<long> new_xs;\n  for (int i = 1; i < xs.size(); i++) {\n    new_xs.push_back(xs[i] * i);\n  }\n  return new_xs;",
        "grade-77": {
            "execution": 1
        },
        "68": "int n = xs.size();\n    std::vector<long> ys;\n    for (int i = 1; i < n; i++) {\n        ys.push_back(xs[i] * i);\n    }\n    return ys;",
        "grade-68": {
            "execution": 1
        },
        "41": "std::vector<long> ys(xs.size() - 1);\n    for (int i = 0; i < xs.size() - 1; i++) {\n        ys[i] = xs[i] * (xs.size() - 1 - i);\n    }\n    return ys;",
        "grade-41": {
            "execution": 0
        },
        "30": "int len = xs.size();\n  std::vector<long> result(len - 1);\n  for (int i = 1; i < len; i++) {\n    result[i - 1] = xs[i] * i;\n  }\n  return result;",
        "grade-30": {
            "execution": 1
        },
        "179": "// your code goes here\n\tstd::vector<long> deriv;\n\tlong size = xs.size();\n\tif (size == 1) {\n\t\tderiv.push_back(0);\n\t\treturn deriv;\n\t}\n\tfor (long i = 1; i < size; i++) {\n\t\tderiv.push_back(xs[i] * i);\n\t}\n\treturn deriv;",
        "grade-179": {
            "execution": 0
        },
        "25": "// Fill in the input list with the return value here.\n    int n = xs.size();\n    std::vector<long> ret(n - 1);\n    for (int i = 1; i < n; i++) {\n        ret[i - 1] = xs[i] * i;\n    }\n    return ret;",
        "grade-25": {
            "execution": 1
        },
        "194": "std::vector<long> ans;\n    if (xs.size() == 0) {\n        return ans;\n    }\n    ans.push_back(xs[1]);\n    for (int i = 2; i < xs.size(); i++) {\n        ans.push_back(xs[i] * i);\n    }\n    return ans;",
        "grade-194": {
            "execution": 0
        },
        "141": "std::vector<long> result;\n    result.reserve(xs.size() - 1);\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;",
        "grade-141": {
            "execution": 1
        },
        "9": "if (xs.size() == 0) {\n    return {};\n  }\n  std::vector<long> result;\n  for (int i = 1; i < xs.size(); i++) {\n    result.push_back(xs[i] * i);\n  }\n  return result;",
        "grade-9": {
            "execution": 1
        },
        "7": "std::vector<long> res;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tres.push_back(xs[i] * i);\n\t}\n\treturn res;",
        "grade-7": {
            "execution": 1
        },
        "27": "int size = xs.size();\n\tstd::vector<long> der(size - 1);\n\tint i;\n\tfor (i = 0; i < size - 1; i++) {\n\t\tder[i] = xs[i + 1] * (i + 1);\n\t}\n\treturn der;",
        "grade-27": {
            "execution": 1
        },
        "65": "std::vector<long> ret;\n\tlong n = xs.size();\n\tfor (long i = 1; i < n; i++) {\n\t\tret.push_back(xs[i] * i);\n\t}\n\treturn ret;",
        "grade-65": {
            "execution": 1
        },
        "70": "std::vector<long> ans;\n\tif (xs.size() <= 1) {\n\t\tans.push_back(0);\n\t\treturn ans;\n\t}\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tans.push_back(xs[i] * i);\n\t}\n\treturn ans;",
        "grade-70": {
            "execution": 0
        },
        "168": "int n = xs.size();\n\tstd::vector<long> res;\n\tfor (int i = 1; i < n; i++) {\n\t\tres.push_back(xs[i] * i);\n\t}\n\treturn res;",
        "grade-168": {
            "execution": 1
        },
        "197": "std::vector<long> ret;\n    for (long i = 1; i < xs.size(); i++) {\n        ret.push_back(xs[i] * i);\n    }\n    return ret;",
        "grade-197": {
            "execution": 1
        },
        "183": "xs.erase(xs.begin());\n    for (size_t i = 0; i < xs.size(); i++) {\n        xs[i] *= (i + 1);\n    }\n    return xs;",
        "grade-183": {
            "execution": 1
        },
        "60": "int N = xs.size();\n   if (N == 0) return {};\n   if (N == 1) return {0};\n   std::vector<long> ans(N - 1);\n   for (int i = 1; i < N; i++) {\n       ans[i - 1] = i * xs[i];\n   }\n   return ans;",
        "grade-60": {
            "execution": 0
        },
        "bleu-32": 0.5042726517680285,
        "bleu-6": 0.45518417843702574,
        "bleu-87": 0.5738707059010856,
        "bleu-77": 0.5738707059010856,
        "bleu-68": 0.45518417843702574,
        "bleu-41": 0.310371919858008,
        "bleu-30": 0.3793119078640377,
        "bleu-179": 0.2565460423868201,
        "bleu-25": 0.30935993403755435,
        "bleu-194": 0.33002751243331646,
        "bleu-141": 0.4417701816033365,
        "bleu-9": 0.4303849707532594,
        "bleu-7": 0.5738707059010856,
        "bleu-27": 0.2367629869085395,
        "bleu-65": 0.38632770735630667,
        "bleu-70": 0.37476820705329666,
        "bleu-168": 0.45518417843702574,
        "bleu-197": 0.5052889888870804,
        "bleu-183": 0.400335877974836,
        "bleu-60": 0.3028238796397157,
        "codebleu-32": 0.7281899119598136,
        "codebleu-6": 0.7227330763179117,
        "codebleu-87": 0.7365507061096379,
        "codebleu-77": 0.7365507061096379,
        "codebleu-68": 0.7227330763179117,
        "codebleu-41": 0.6913061563379853,
        "codebleu-30": 0.6755918186027434,
        "codebleu-179": 0.7072423476211085,
        "codebleu-25": 0.680631690380927,
        "codebleu-194": 0.7272483576972548,
        "codebleu-141": 0.7194630914778256,
        "codebleu-9": 0.7516950904287274,
        "codebleu-7": 0.7365507061096379,
        "codebleu-27": 0.646037379718396,
        "codebleu-65": 0.7110057822405098,
        "codebleu-70": 0.7133399805257301,
        "codebleu-168": 0.7227330763179117,
        "codebleu-197": 0.7246784600892449,
        "codebleu-183": 0.6525396412578434,
        "codebleu-60": 0.6910652300233723,
        "chrf-32": 0.5785119510736082,
        "chrf-6": 0.5330042210453511,
        "chrf-87": 0.5852395588922888,
        "chrf-77": 0.5775498382642416,
        "chrf-68": 0.5356611071169743,
        "chrf-41": 0.4045217138568298,
        "chrf-30": 0.4275806882646615,
        "chrf-179": 0.4259524106904248,
        "chrf-25": 0.41179903408345114,
        "chrf-194": 0.5041669603200714,
        "chrf-141": 0.5669249542349872,
        "chrf-9": 0.5757816723740408,
        "chrf-7": 0.5906664629899033,
        "chrf-27": 0.3571274969598338,
        "chrf-65": 0.4828730509420033,
        "chrf-70": 0.5510186644282536,
        "chrf-168": 0.5316856539160576,
        "chrf-197": 0.5420343185724885,
        "chrf-183": 0.3565142316103984,
        "chrf-60": 0.44445747846449657,
        "rougel-32": 0.7157894736842105,
        "rougel-6": 0.6170212765957446,
        "rougel-87": 0.7640449438202247,
        "rougel-77": 0.7640449438202247,
        "rougel-68": 0.6170212765957446,
        "rougel-41": 0.5636363636363637,
        "rougel-30": 0.5148514851485149,
        "rougel-179": 0.5210084033613445,
        "rougel-25": 0.456140350877193,
        "rougel-194": 0.6260869565217392,
        "rougel-141": 0.6666666666666667,
        "rougel-9": 0.6415094339622641,
        "rougel-7": 0.7640449438202247,
        "rougel-27": 0.47706422018348627,
        "rougel-65": 0.6170212765957446,
        "rougel-70": 0.6428571428571428,
        "rougel-168": 0.6170212765957446,
        "rougel-197": 0.7415730337078651,
        "rougel-183": 0.5714285714285714,
        "rougel-60": 0.43548387096774194,
        "meteor-32": 0.8288559618757244,
        "meteor-6": 0.8061798498155863,
        "meteor-87": 0.840132913737979,
        "meteor-77": 0.840132913737979,
        "meteor-68": 0.8061798498155863,
        "meteor-41": 0.5279346692089075,
        "meteor-30": 0.5270358957489798,
        "meteor-179": 0.7189719022154104,
        "meteor-25": 0.5234030411470284,
        "meteor-194": 0.8175053533190579,
        "meteor-141": 0.8160762444018698,
        "meteor-9": 0.8454148471615719,
        "meteor-7": 0.840132913737979,
        "meteor-27": 0.5178899366036612,
        "meteor-65": 0.7801184427909519,
        "meteor-70": 0.8227909482758621,
        "meteor-168": 0.8061798498155863,
        "meteor-197": 0.8110509847961586,
        "meteor-183": 0.6149386457544112,
        "meteor-60": 0.6019111245606276,
        "ruby-32": 0.5490196078431373,
        "ruby-6": 0.38,
        "ruby-87": 0.6222222222222222,
        "ruby-77": 0.6222222222222222,
        "ruby-68": 0.38,
        "ruby-41": 0.43939393939393945,
        "ruby-30": 0.3508771929824561,
        "ruby-179": 0.31999999999999995,
        "ruby-25": 0.2857142857142857,
        "ruby-194": 0.46478873239436624,
        "ruby-141": 0.5344827586206897,
        "ruby-9": 0.5,
        "ruby-7": 0.6222222222222222,
        "ruby-27": 0.32307692307692304,
        "ruby-65": 0.43999999999999995,
        "ruby-70": 0.4852941176470589,
        "ruby-168": 0.38,
        "ruby-197": 0.6,
        "ruby-183": 0.4893617021276596,
        "ruby-60": 0.2875,
        "codebertscore_f1-32": 0.8924338221549988,
        "codebertscore_f3-32": 0.9243785738945007,
        "codebertscore_f1-6": 0.8925549387931824,
        "codebertscore_f3-6": 0.9134242534637451,
        "codebertscore_f1-87": 0.9257356524467468,
        "codebertscore_f3-87": 0.9337457418441772,
        "codebertscore_f1-77": 0.910354733467102,
        "codebertscore_f3-77": 0.9177047610282898,
        "codebertscore_f1-68": 0.8828688263893127,
        "codebertscore_f3-68": 0.9034175872802734,
        "codebertscore_f1-41": 0.8420197367668152,
        "codebertscore_f3-41": 0.8628432750701904,
        "codebertscore_f1-30": 0.8553372621536255,
        "codebertscore_f3-30": 0.8718617558479309,
        "codebertscore_f1-179": 0.8295092582702637,
        "codebertscore_f3-179": 0.8662066459655762,
        "codebertscore_f1-25": 0.810824990272522,
        "codebertscore_f3-25": 0.8472064137458801,
        "codebertscore_f1-194": 0.8817402720451355,
        "codebertscore_f3-194": 0.895877480506897,
        "codebertscore_f1-141": 0.9065396785736084,
        "codebertscore_f3-141": 0.9251580834388733,
        "codebertscore_f1-9": 0.8996435403823853,
        "codebertscore_f3-9": 0.9192637205123901,
        "codebertscore_f1-7": 0.9275441765785217,
        "codebertscore_f3-7": 0.9354840517044067,
        "codebertscore_f1-27": 0.827610969543457,
        "codebertscore_f3-27": 0.8459396362304688,
        "codebertscore_f1-65": 0.9059744477272034,
        "codebertscore_f3-65": 0.9201029539108276,
        "codebertscore_f1-70": 0.9025789499282837,
        "codebertscore_f3-70": 0.916278600692749,
        "codebertscore_f1-168": 0.906984269618988,
        "codebertscore_f3-168": 0.923669695854187,
        "codebertscore_f1-197": 0.9189786314964294,
        "codebertscore_f3-197": 0.9271867275238037,
        "codebertscore_f1-183": 0.8187747001647949,
        "codebertscore_f3-183": 0.8314222097396851,
        "codebertscore_f1-60": 0.8265003561973572,
        "codebertscore_f3-60": 0.8513140082359314,
        "codebertscore_s_f1-32": 0.9629809260368347,
        "codebertscore_s_f3-32": 0.9728891849517822,
        "codebertscore_s_f1-6": 0.9634981155395508,
        "codebertscore_s_f3-6": 0.9694227576255798,
        "codebertscore_s_f1-87": 0.9765418767929077,
        "codebertscore_s_f3-87": 0.975852906703949,
        "codebertscore_s_f1-77": 0.9694594740867615,
        "codebertscore_s_f3-77": 0.970219075679779,
        "codebertscore_s_f1-68": 0.961361289024353,
        "codebertscore_s_f3-68": 0.9661272764205933,
        "codebertscore_s_f1-41": 0.9353557825088501,
        "codebertscore_s_f3-41": 0.9463785886764526,
        "codebertscore_s_f1-30": 0.9505777955055237,
        "codebertscore_s_f3-30": 0.9565743207931519,
        "codebertscore_s_f1-179": 0.9283024072647095,
        "codebertscore_s_f3-179": 0.9484163522720337,
        "codebertscore_s_f1-25": 0.9241818785667419,
        "codebertscore_s_f3-25": 0.9445746541023254,
        "codebertscore_s_f1-194": 0.954170286655426,
        "codebertscore_s_f3-194": 0.9608003497123718,
        "codebertscore_s_f1-141": 0.9647049307823181,
        "codebertscore_s_f3-141": 0.9712125658988953,
        "codebertscore_s_f1-9": 0.967665433883667,
        "codebertscore_s_f3-9": 0.9724920988082886,
        "codebertscore_s_f1-7": 0.9778138995170593,
        "codebertscore_s_f3-7": 0.9770407676696777,
        "codebertscore_s_f1-27": 0.9327993392944336,
        "codebertscore_s_f3-27": 0.9441010355949402,
        "codebertscore_s_f1-65": 0.9680384993553162,
        "codebertscore_s_f3-65": 0.9705401659011841,
        "codebertscore_s_f1-70": 0.961560845375061,
        "codebertscore_s_f3-70": 0.9672658443450928,
        "codebertscore_s_f1-168": 0.9714004993438721,
        "codebertscore_s_f3-168": 0.9741218090057373,
        "codebertscore_s_f1-197": 0.9753358364105225,
        "codebertscore_s_f3-197": 0.9740767478942871,
        "codebertscore_s_f1-183": 0.9427907466888428,
        "codebertscore_s_f3-183": 0.9464697241783142,
        "codebertscore_s_f1-60": 0.9307762980461121,
        "codebertscore_s_f3-60": 0.9467665553092957,
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-87": 4,
        "raw_gpt35_nsnr-87": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-68": 3,
        "raw_gpt35_nsnr-68": "3",
        "gpt35_nsnr-41": 3,
        "raw_gpt35_nsnr-41": "3",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-25": 0,
        "raw_gpt35_nsnr-25": "3 - The code snippet correctly calculates the derivative of the polynomial represented by the input vector by multiplying each coefficient with its corresponding power of x and returning a new vector with the resulting coefficients. However, the function signature and comments do not match the actual implementation, as the input vector is not modified and the output vector is not in the same form as the input.",
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-87": 4,
        "raw_gpt35_nswr-87": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-41": 3,
        "raw_gpt35_nswr-41": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nstd::string remove_vowels(std::string text) {\n",
        "snippet": [
            "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n"
        ],
        "simplified": "remove_vowels is a function that takes string and returns string without vowels.",
        "task_id": "51",
        "164": "return \"\";",
        "grade-164": {
            "execution": 0
        },
        "28": "std::string vowels = \"aeiouAEIOU\";\n    int n = text.length();\n    std::string textCopy = text;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        if (vowels.find(text[i]) != std::string::npos) {\n            // if vowel is found, copy following characters to preceding\n            for (j = i; j < n; j++) {\n                textCopy[j] = textCopy[j + 1];\n            }\n            n -= 1;\n            i -= 1;\n        }\n    }\n    textCopy.resize(n);\n    return textCopy;",
        "grade-28": {
            "execution": 0
        },
        "6": "int i=0;\n  std::string result=\"\";\n  while(i<text.length()){\n    if((text[i]=='a')||(text[i]=='e')||(text[i]=='i')||(text[i]=='o')||(text[i]=='u')||(text[i]=='A')||(text[i]=='E')||(text[i]=='I')||(text[i]=='O')||(text[i]=='U')){\n      i++;\n    }\n    else{\n      result+=text[i];\n      i++;\n    }\n  }\n  return result;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::string result;\n    int length = text.length();\n    for (int i = 0; i < length; i++) {\n        char c = text[i];\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
        "grade-190": {
            "execution": 1
        },
        "70": "// return text;\nstring res;\nfor(int i=0;i<text.length();i++)\n{\nif(text[i]!='a'&&text[i]!='e'&&text[i]!='i'&&text[i]!='o'&&text[i]!='u'&&text[i]!='A'&&text[i]!='E'&&text[i]!='I'&&text[i]!='O'&&text[i]!='U')\nres.push_back(text[i]);",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string vowels = \"aeiouAEIOU\";\n    std::string new_text = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n            new_text += text[i];\n        }\n    }\n    return new_text;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::string result = \"\";\n    int index = 0;\n    while (index < text.length()) {\n        if (text[index] == 'a' || text[index] == 'e' || text[index] == 'i' || text[index] == 'o' || text[index] == 'u' || text[index] == 'A' || text[index] == 'E' || text[index] == 'I' || text[index] == 'O' || text[index] == 'U') {\n            index += 1;\n        } else {\n            result += text[index];\n            index += 1;\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "//text.erase(std::remove(text.begin(), text.end(), 'a'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'e'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'i'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'o'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'u'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'A'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'E'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'I'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'O'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'U'), text.end());\n\tstd::string newtext=\"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\tnewtext += text[i];\n\t\t}\n\t}\n\treturn newtext;",
        "grade-35": {
            "execution": 1
        },
        "189": "const std::set<char> vowels {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::string new_text;\n    for (auto letter : text) {\n        if (vowels.find(letter) == vowels.end())\n            new_text += letter;\n    }\n    return new_text;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::string result = text;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U') {\n            result.erase(i, 1);\n            i--;\n        }\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "174": "int i=0;\n\twhile(text[i]!='\\0')\n\t{\n\t\tif(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\t\t{\n\t\t\tfor(int j=i;text[j]!='\\0';j++)\n\t\t\t{\n\t\t\t\ttext[j]=text[j+1];\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t\ti++;\n\t}\n\treturn text;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::string vowels(\"aeiouAEIOU\");\n    text.erase(std::remove_if(text.begin(), text.end(), [&vowels](const char& c) {\n        return vowels.find(c) != std::string::npos;\n    }), text.end());\n    return text;",
        "grade-140": {
            "execution": 1
        },
        "22": "int i,j=0;\n  for(i=0;i<text.length();i++)\n  {\n    if(text[i]!='a'&&text[i]!='e'&&text[i]!='i'&&text[i]!='o'&&text[i]!='u'&&text[i]!='A'&&text[i]!='E'&&text[i]!='I'&&text[i]!='O'&&text[i]!='U')\n    {\n      text[j]=text[i];\n      j++;\n    }\n  }\n  text[j]='\\0';\n  return text;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::string result;\n    for (char c : text) {\n        if (!std::string(\"aeiou\").find(c))\n            result += c;\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "109": "std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        switch (text[i]) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                break;\n            default:\n                result += text[i];\n        }\n    }\n    return result;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::string output=\"\";\n\tstd::vector<char> vowels {'a','e','i','o','u','A','E','I','O','U'};\n\tstd::map<char,int> count;\n\tfor(int i=0;i<text.length();i++)\n\t{\n\t\tcount[text[i]]++;\n\t}\n\tfor(int i=0;i<text.length();i++)\n\t{\n\t\tif(count[text[i]]==1)\n\t\t{\n\t\t\toutput+=text[i];\n\t\t}\n\t}\n\treturn output;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string new_text;\n  for (int i = 0; i < text.length(); i++) {\n    std::string::size_type found = text.find_first_of(\"aeiouAEIOU\");\n    if (found != std::string::npos) {\n      text.erase(found, 1);\n    }\n  }\n  return text;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string result;\n    int length = text.length();\n    for (int i = 0; i < length; i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string mystring = text;\n\tstd::string result;\n\tfor (int i = 0; i < mystring.length(); i++) {\n\t\tif ((mystring[i] != 'a') && (mystring[i] != 'e') && (mystring[i] != 'i') && (mystring[i] != 'o') && (mystring[i] != 'u') && (mystring[i] != 'A') && (mystring[i] != 'E') && (mystring[i] != 'I') && (mystring[i] != 'O') && (mystring[i] != 'U')) {\n\t\t\tresult += mystring[i];\n\t\t}\n\t}\n\treturn result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string text_new;\n    for(int i=0;i<text.length();i++){\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n            continue;\n        else\n            text_new.push_back(text[i]);\n    }\n    return text_new;",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 1.60438559533083e-08,
        "bleu-28": 0.18249135021985943,
        "bleu-6": 0.1303161428424164,
        "bleu-190": 0.1789381979474538,
        "bleu-70": 0.19240426399973504,
        "bleu-62": 0.5012889722777062,
        "bleu-57": 0.07722462784265172,
        "bleu-35": 0.08254264842686196,
        "bleu-189": 0.14868360260940244,
        "bleu-26": 0.17980991106713615,
        "bleu-174": 0.07813724250739136,
        "bleu-140": 0.21607910212885972,
        "bleu-22": 0.1578935155896265,
        "bleu-152": 0.03298800228659579,
        "bleu-109": 0.2942946790736774,
        "bleu-8": 0.21327208078473614,
        "bleu-7": 0.31633709232312307,
        "bleu-23": 0.16367681504296797,
        "bleu-55": 0.13870744571919677,
        "bleu-59": 0.1895923150637071,
        "codebleu-164": 0.03174603203800839,
        "codebleu-28": 0.636150299977308,
        "codebleu-6": 0.5877548862148744,
        "codebleu-190": 0.5093024828527548,
        "codebleu-70": 0.5527576689538133,
        "codebleu-62": 0.5944465350271743,
        "codebleu-57": 0.47793759332176944,
        "codebleu-35": 0.6744368459529256,
        "codebleu-189": 0.42545115118065147,
        "codebleu-26": 0.5606959036990281,
        "codebleu-174": 0.4872969899893919,
        "codebleu-140": 0.5437475001868842,
        "codebleu-22": 0.5551743748469185,
        "codebleu-152": 0.23691476131464279,
        "codebleu-109": 0.5105154736712494,
        "codebleu-8": 0.6246529144025488,
        "codebleu-7": 0.5402863908765885,
        "codebleu-23": 0.5248912309849716,
        "codebleu-55": 0.5782000518455307,
        "codebleu-59": 0.5457734738152099,
        "chrf-164": 0.03597754682781221,
        "chrf-28": 0.4130811854029925,
        "chrf-6": 0.29220914947360843,
        "chrf-190": 0.3023728403264845,
        "chrf-70": 0.3325605371869768,
        "chrf-62": 0.5380074702311355,
        "chrf-57": 0.25222894264653595,
        "chrf-35": 0.2625157659009664,
        "chrf-189": 0.3104581669910007,
        "chrf-26": 0.33041767213417095,
        "chrf-174": 0.19703132225633568,
        "chrf-140": 0.40038957121573127,
        "chrf-22": 0.2870388633563517,
        "chrf-152": 0.19628549235044382,
        "chrf-109": 0.36485359548706986,
        "chrf-8": 0.43136910007918283,
        "chrf-7": 0.3868955946567457,
        "chrf-23": 0.3122414484157056,
        "chrf-55": 0.2669553421894778,
        "chrf-59": 0.33297804524700214,
        "rougel-164": 0.07692307692307693,
        "rougel-28": 0.38862559241706157,
        "rougel-6": 0.32941176470588235,
        "rougel-190": 0.29268292682926833,
        "rougel-70": 0.33183856502242154,
        "rougel-62": 0.6711409395973154,
        "rougel-57": 0.2784810126582278,
        "rougel-35": 0.15224913494809686,
        "rougel-189": 0.3292682926829268,
        "rougel-26": 0.3275862068965517,
        "rougel-174": 0.2047244094488189,
        "rougel-140": 0.4189189189189189,
        "rougel-22": 0.3070539419087137,
        "rougel-152": 0.3130434782608696,
        "rougel-109": 0.42696629213483145,
        "rougel-8": 0.43243243243243246,
        "rougel-7": 0.4489795918367347,
        "rougel-23": 0.3130434782608696,
        "rougel-55": 0.3715415019762846,
        "rougel-59": 0.3333333333333333,
        "meteor-164": 0.02985074626865672,
        "meteor-28": 0.4268835616438357,
        "meteor-6": 0.3844926740549636,
        "meteor-190": 0.32873469207876654,
        "meteor-70": 0.38527551816745215,
        "meteor-62": 0.6662668066176838,
        "meteor-57": 0.32215520707679934,
        "meteor-35": 0.3781625977393174,
        "meteor-189": 0.390939886265371,
        "meteor-26": 0.33836893203883506,
        "meteor-174": 0.27145847157814523,
        "meteor-140": 0.3959810269977928,
        "meteor-22": 0.2997396332910711,
        "meteor-152": 0.19007592723558067,
        "meteor-109": 0.39459026641287315,
        "meteor-8": 0.5642536601214286,
        "meteor-7": 0.30446549391069017,
        "meteor-23": 0.4322975352985299,
        "meteor-55": 0.45414201183431946,
        "meteor-59": 0.39564561514003316,
        "ruby-164": 0.04054054054054057,
        "ruby-28": 0.22627737226277367,
        "ruby-6": 0.20441988950276246,
        "ruby-190": 0.16793893129770987,
        "ruby-70": 0.20134228187919467,
        "ruby-62": 0.4933333333333333,
        "ruby-57": 0.15337423312883436,
        "ruby-35": 0.08531746031746035,
        "ruby-189": 0.16666666666666663,
        "ruby-26": 0.2088607594936709,
        "ruby-174": 0.1444444444444445,
        "ruby-140": 0.17567567567567566,
        "ruby-22": 0.17365269461077848,
        "ruby-152": 0.21621621621621623,
        "ruby-109": 0.27884615384615385,
        "ruby-8": 0.28378378378378377,
        "ruby-7": 0.28378378378378377,
        "ruby-23": 0.1923076923076923,
        "ruby-55": 0.23463687150837986,
        "ruby-59": 0.19480519480519476,
        "codebertscore_f1-164": 0.48409122228622437,
        "codebertscore_f3-164": 0.4200074076652527,
        "codebertscore_f1-28": 0.800523579120636,
        "codebertscore_f3-28": 0.8363759517669678,
        "codebertscore_f1-6": 0.7686850428581238,
        "codebertscore_f3-6": 0.7598155736923218,
        "codebertscore_f1-190": 0.7605365514755249,
        "codebertscore_f3-190": 0.767695963382721,
        "codebertscore_f1-70": 0.7868980169296265,
        "codebertscore_f3-70": 0.7791281938552856,
        "codebertscore_f1-62": 0.8891077041625977,
        "codebertscore_f3-62": 0.8917806148529053,
        "codebertscore_f1-57": 0.7379003763198853,
        "codebertscore_f3-57": 0.7359023690223694,
        "codebertscore_f1-35": 0.6950167417526245,
        "codebertscore_f3-35": 0.7113081812858582,
        "codebertscore_f1-189": 0.797862708568573,
        "codebertscore_f3-189": 0.8047820925712585,
        "codebertscore_f1-26": 0.7840376496315002,
        "codebertscore_f3-26": 0.7753625512123108,
        "codebertscore_f1-174": 0.7532845139503479,
        "codebertscore_f3-174": 0.7426913976669312,
        "codebertscore_f1-140": 0.8135799169540405,
        "codebertscore_f3-140": 0.8193523287773132,
        "codebertscore_f1-22": 0.7708137631416321,
        "codebertscore_f3-22": 0.756872832775116,
        "codebertscore_f1-152": 0.7859448790550232,
        "codebertscore_f3-152": 0.7555244565010071,
        "codebertscore_f1-109": 0.7301006317138672,
        "codebertscore_f3-109": 0.7334828972816467,
        "codebertscore_f1-8": 0.8215852379798889,
        "codebertscore_f3-8": 0.8193604946136475,
        "codebertscore_f1-7": 0.8138486742973328,
        "codebertscore_f3-7": 0.8084773421287537,
        "codebertscore_f1-23": 0.7962794899940491,
        "codebertscore_f3-23": 0.7849520444869995,
        "codebertscore_f1-55": 0.7651900053024292,
        "codebertscore_f3-55": 0.7745172381401062,
        "codebertscore_f1-59": 0.7798586487770081,
        "codebertscore_f3-59": 0.7733479738235474,
        "codebertscore_s_f1-164": 0.6204348802566528,
        "codebertscore_s_f3-164": 0.5345041751861572,
        "codebertscore_s_f1-28": 0.8148391246795654,
        "codebertscore_s_f3-28": 0.8522476553916931,
        "codebertscore_s_f1-6": 0.7788590788841248,
        "codebertscore_s_f3-6": 0.7708539962768555,
        "codebertscore_s_f1-190": 0.765577495098114,
        "codebertscore_s_f3-190": 0.7743015885353088,
        "codebertscore_s_f1-70": 0.7905102968215942,
        "codebertscore_s_f3-70": 0.7829136252403259,
        "codebertscore_s_f1-62": 0.8897836208343506,
        "codebertscore_s_f3-62": 0.8943525552749634,
        "codebertscore_s_f1-57": 0.7457232475280762,
        "codebertscore_s_f3-57": 0.7449544668197632,
        "codebertscore_s_f1-35": 0.7212719321250916,
        "codebertscore_s_f3-35": 0.7415384650230408,
        "codebertscore_s_f1-189": 0.8018445372581482,
        "codebertscore_s_f3-189": 0.809541642665863,
        "codebertscore_s_f1-26": 0.7847536206245422,
        "codebertscore_s_f3-26": 0.7782835960388184,
        "codebertscore_s_f1-174": 0.7585832476615906,
        "codebertscore_s_f3-174": 0.7453786730766296,
        "codebertscore_s_f1-140": 0.8142642378807068,
        "codebertscore_s_f3-140": 0.8214012384414673,
        "codebertscore_s_f1-22": 0.7773129940032959,
        "codebertscore_s_f3-22": 0.7640553116798401,
        "codebertscore_s_f1-152": 0.790596067905426,
        "codebertscore_s_f3-152": 0.7591588497161865,
        "codebertscore_s_f1-109": 0.7465604543685913,
        "codebertscore_s_f3-109": 0.7534810304641724,
        "codebertscore_s_f1-8": 0.8191382884979248,
        "codebertscore_s_f3-8": 0.8170244693756104,
        "codebertscore_s_f1-7": 0.8110409379005432,
        "codebertscore_s_f3-7": 0.8067408204078674,
        "codebertscore_s_f1-23": 0.7953982353210449,
        "codebertscore_s_f3-23": 0.785020649433136,
        "codebertscore_s_f1-55": 0.7665024399757385,
        "codebertscore_s_f3-55": 0.777916431427002,
        "codebertscore_s_f1-59": 0.7799820899963379,
        "codebertscore_s_f3-59": 0.772459089756012,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 1,
        "raw_gpt35_nswr-8": "1",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n",
        "snippet": [
            "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n"
        ],
        "simplified": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
        "task_id": "101",
        "164": "int len = s.length();\n    std::vector<std::string> res;\n    for(int i = 0; i < len; i++) {\n        if(s[i] == ' ') {\n            continue;\n        }\n        std::string temp = \"\";\n        while(i < len && s[i] != ' ' && s[i] != ',') {\n            temp += s[i];\n            i++;\n        }\n        res.push_back(temp);\n    }\n    return res;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::vector<std::string> result;\n  int pos = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (pos < i) {\n        result.push_back(s.substr(pos, i - pos));\n      }\n      pos = i + 1;\n    }\n  }\n  if (pos < s.size()) {\n    result.push_back(s.substr(pos, s.size() - pos));\n  }\n  return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::stringstream ss(s);\n    std::string word;\n    std::vector<std::string> result;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "191": "stringstream ss(s);\n\tstring word;\n\tvector<string> words;\n\twhile (getline(ss, word, ' '))\n\t\twords.push_back(word);\n\treturn words;",
        "grade-191": {
            "execution": 0
        },
        "70": "// TODO:\n\t// split the string into words\n\t// return an array of the words\n\tstd::istringstream iss(s);\n\tstd::vector<std::string> tokens;\n\tcopy(std::istream_iterator<std::string>(iss),\n\t\tstd::istream_iterator<std::string>(),\n\t\tstd::back_inserter(tokens));\n\treturn tokens;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<std::string> result;\n  std::string word = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      result.push_back(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  result.push_back(word);\n  return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::string> words;\n  std::string temp;\n  for (auto i = 0; i < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      words.push_back(temp);\n      temp.clear();\n    } else {\n      temp += s[i];\n    }\n  }\n  words.push_back(temp);\n  return words;",
        "grade-57": {
            "execution": 0
        },
        "35": "return std::vector<std::string>();",
        "grade-35": {
            "execution": 0
        },
        "190": "std::vector<std::string> res;\n    std::stringstream ss(s);\n    while(ss.good()) {\n        std::string word;\n        getline(ss, word, ' ');\n        res.push_back(word);\n    }\n    return res;",
        "grade-190": {
            "execution": 0
        },
        "26": "int count = 0;\n    for (char c : s) {\n        if (c == ' ') {\n            count++;\n        }\n    }\n    std::vector<std::string> vec;\n    int start = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            vec.push_back(s.substr(start, i - start));\n            start = i + 1;\n        }\n    }\n    vec.push_back(s.substr(start, s.size() - start));\n    return vec;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<std::string> results;\n    std::stringstream ss(s);\n    for (std::string token; std::getline(ss, token, ' '); ) {\n        results.push_back(token);\n    }\n    return results;",
        "grade-174": {
            "execution": 0
        },
        "139": "std::istringstream iss(s);\n  std::vector<std::string> v{ std::istream_iterator<std::string>{iss},\n                              std::istream_iterator<std::string>{} };\n  return v;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<std::string> temp;\n    std::stringstream ss(s);\n    std::string t;\n    while(ss >> t)\n        temp.push_back(t);\n    return temp;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::stringstream ss(s);\n  std::vector<std::string> words;\n  std::string word;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> res;\n  std::stringstream ss(s);\n  while(ss.good()) {\n    std::string substr;\n    getline(ss, substr, ' ');\n    res.push_back(substr);\n  }\n  return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<std::string> ret;\n  std::string temp;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      ret.push_back(temp);\n      temp.clear();\n    } else {\n      temp += s[i];\n    }\n  }\n  if (temp.size() > 0) {\n    ret.push_back(temp);\n  }\n  return ret;",
        "grade-8": {
            "execution": 0
        },
        "7": "//create a stream with s\n\tstd::stringstream ss(s);\n\t//split into words\n\tstd::vector<std::string> words;\n\tstd::string word;\n\twhile (std::getline(ss, word, ' ')) {\n\t\twords.push_back(word);\n\t}\n\treturn words;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> result;\n  while (ss >> word) {\n    result.push_back(word);\n  }\n  return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> v;\n    std::string str;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' ' || s[i]==','){\n            v.push_back(str);\n            str=\"\";\n        }\n        else{\n            str+=s[i];\n        }\n    }\n    v.push_back(str);\n    return v;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::string> v;\n  for (int i = 0; i < s.size(); i++) {\n    std::string str = \"\";\n    while (s[i] != ' ' && s[i] != ',' && i < s.size()) {\n      str += s[i];\n      i++;\n    }\n    v.push_back(str);\n  }\n  return v;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.40893652134023845,
        "bleu-28": 0.3526530847510154,
        "bleu-6": 0.02122295690863859,
        "bleu-191": 0.034736077488820384,
        "bleu-70": 0.020779533002944356,
        "bleu-62": 0.5470725427720761,
        "bleu-57": 0.4344007898111046,
        "bleu-35": 0.0002992386155364079,
        "bleu-190": 0.030831869915585716,
        "bleu-26": 0.30998852878194233,
        "bleu-174": 0.03570657688735567,
        "bleu-139": 0.016209852934077503,
        "bleu-22": 0.01907006449959645,
        "bleu-151": 0.02122295690863859,
        "bleu-108": 0.030831869915585716,
        "bleu-8": 0.4682127806031389,
        "bleu-7": 0.03235526545609653,
        "bleu-23": 0.02122295690863859,
        "bleu-55": 0.5157402880197927,
        "bleu-59": 0.3683272203204909,
        "codebleu-164": 0.5966810119350264,
        "codebleu-28": 0.5916674907406304,
        "codebleu-6": 0.1922209742585823,
        "codebleu-191": 0.1894627780975765,
        "codebleu-70": 0.2511817654260644,
        "codebleu-62": 0.6167294466512899,
        "codebleu-57": 0.5817587850953541,
        "codebleu-35": 0.04571015688115077,
        "codebleu-190": 0.2718743943174713,
        "codebleu-26": 0.5771707035576393,
        "codebleu-174": 0.24346409728159552,
        "codebleu-139": 0.18900248733113245,
        "codebleu-22": 0.1724115898939855,
        "codebleu-151": 0.1922209742585823,
        "codebleu-108": 0.2718743943174713,
        "codebleu-8": 0.6161912529617368,
        "codebleu-7": 0.26919053215446903,
        "codebleu-23": 0.1922209742585823,
        "codebleu-55": 0.5970886503045149,
        "codebleu-59": 0.5584302420444984,
        "chrf-164": 0.41825021201037965,
        "chrf-28": 0.3832538197731436,
        "chrf-6": 0.21973782867812366,
        "chrf-191": 0.22824385556977195,
        "chrf-70": 0.2027588536949157,
        "chrf-62": 0.4819972422224044,
        "chrf-57": 0.38696601503124306,
        "chrf-35": 0.09996191320623372,
        "chrf-190": 0.22597950592805424,
        "chrf-26": 0.3687472172874703,
        "chrf-174": 0.23844859476980027,
        "chrf-139": 0.17706547235381545,
        "chrf-22": 0.20974717121791936,
        "chrf-151": 0.20443615749026356,
        "chrf-108": 0.22538290206951345,
        "chrf-8": 0.431104469810858,
        "chrf-7": 0.22676962110151824,
        "chrf-23": 0.21973782867812366,
        "chrf-55": 0.46333048724341347,
        "chrf-59": 0.3404668460837476,
        "rougel-164": 0.4651162790697674,
        "rougel-28": 0.5502183406113538,
        "rougel-6": 0.25675675675675674,
        "rougel-191": 0.28776978417266186,
        "rougel-70": 0.20765027322404372,
        "rougel-62": 0.6766169154228856,
        "rougel-57": 0.6130653266331658,
        "rougel-35": 0.12068965517241381,
        "rougel-190": 0.3018867924528302,
        "rougel-26": 0.4867256637168142,
        "rougel-174": 0.3057324840764331,
        "rougel-139": 0.1948051948051948,
        "rougel-22": 0.2602739726027397,
        "rougel-151": 0.25675675675675674,
        "rougel-108": 0.3018867924528302,
        "rougel-8": 0.5876777251184834,
        "rougel-7": 0.26190476190476186,
        "rougel-23": 0.25675675675675674,
        "rougel-55": 0.6565656565656566,
        "rougel-59": 0.5226130653266332,
        "meteor-164": 0.5572302986128248,
        "meteor-28": 0.4333970592861062,
        "meteor-6": 0.17097095435684648,
        "meteor-191": 0.19534038595508443,
        "meteor-70": 0.1579093886786194,
        "meteor-62": 0.6933244314115654,
        "meteor-57": 0.5975633628291674,
        "meteor-35": 0.04291845493562232,
        "meteor-190": 0.22894153136367668,
        "meteor-26": 0.506464491362764,
        "meteor-174": 0.21335154263982897,
        "meteor-139": 0.13335801843587397,
        "meteor-22": 0.16048402626852534,
        "meteor-151": 0.17097095435684648,
        "meteor-108": 0.22894153136367668,
        "meteor-8": 0.640831304155322,
        "meteor-7": 0.2109665152322699,
        "meteor-23": 0.17097095435684648,
        "meteor-55": 0.6699478413324568,
        "meteor-59": 0.45631221656252624,
        "ruby-164": 0.2743362831858407,
        "ruby-28": 0.40157480314960625,
        "ruby-6": 0.1568627450980392,
        "ruby-191": 0.16666666666666663,
        "ruby-70": 0.0980392156862745,
        "ruby-62": 0.5098039215686274,
        "ruby-57": 0.47058823529411764,
        "ruby-35": 0.05882352941176472,
        "ruby-190": 0.196078431372549,
        "ruby-26": 0.29032258064516125,
        "ruby-174": 0.20588235294117652,
        "ruby-139": 0.10784313725490191,
        "ruby-22": 0.16666666666666663,
        "ruby-151": 0.1568627450980392,
        "ruby-108": 0.196078431372549,
        "ruby-8": 0.4311926605504587,
        "ruby-7": 0.1470588235294118,
        "ruby-23": 0.1568627450980392,
        "ruby-55": 0.5,
        "ruby-59": 0.3431372549019608,
        "codebertscore_f1-164": 0.8488783240318298,
        "codebertscore_f3-164": 0.8519006371498108,
        "codebertscore_f1-28": 0.8405280709266663,
        "codebertscore_f3-28": 0.8475393652915955,
        "codebertscore_f1-6": 0.7442234754562378,
        "codebertscore_f3-6": 0.7191280126571655,
        "codebertscore_f1-191": 0.7330108880996704,
        "codebertscore_f3-191": 0.7068547010421753,
        "codebertscore_f1-70": 0.6724848747253418,
        "codebertscore_f3-70": 0.6821119785308838,
        "codebertscore_f1-62": 0.8685333132743835,
        "codebertscore_f3-62": 0.8651500344276428,
        "codebertscore_f1-57": 0.8552311658859253,
        "codebertscore_f3-57": 0.8546656966209412,
        "codebertscore_f1-35": 0.6344247460365295,
        "codebertscore_f3-35": 0.5853983759880066,
        "codebertscore_f1-190": 0.7371196746826172,
        "codebertscore_f3-190": 0.7209964394569397,
        "codebertscore_f1-26": 0.8077912926673889,
        "codebertscore_f3-26": 0.8207417726516724,
        "codebertscore_f1-174": 0.7352820634841919,
        "codebertscore_f3-174": 0.7194170355796814,
        "codebertscore_f1-139": 0.6820891499519348,
        "codebertscore_f3-139": 0.6732591986656189,
        "codebertscore_f1-22": 0.7448902726173401,
        "codebertscore_f3-22": 0.7223798036575317,
        "codebertscore_f1-151": 0.7337271571159363,
        "codebertscore_f3-151": 0.710067093372345,
        "codebertscore_f1-108": 0.7286452651023865,
        "codebertscore_f3-108": 0.714118242263794,
        "codebertscore_f1-8": 0.8768950700759888,
        "codebertscore_f3-8": 0.8804852366447449,
        "codebertscore_f1-7": 0.715715229511261,
        "codebertscore_f3-7": 0.7157437205314636,
        "codebertscore_f1-23": 0.7371098399162292,
        "codebertscore_f3-23": 0.7119266986846924,
        "codebertscore_f1-55": 0.8735044002532959,
        "codebertscore_f3-55": 0.8720191717147827,
        "codebertscore_f1-59": 0.8406978249549866,
        "codebertscore_f3-59": 0.8291674852371216,
        "codebertscore_s_f1-164": 0.854640007019043,
        "codebertscore_s_f3-164": 0.8554167151451111,
        "codebertscore_s_f1-28": 0.8445548415184021,
        "codebertscore_s_f3-28": 0.8537694811820984,
        "codebertscore_s_f1-6": 0.7504191994667053,
        "codebertscore_s_f3-6": 0.7263869643211365,
        "codebertscore_s_f1-191": 0.7388814687728882,
        "codebertscore_s_f3-191": 0.7142767310142517,
        "codebertscore_s_f1-70": 0.6797435283660889,
        "codebertscore_s_f3-70": 0.6891781687736511,
        "codebertscore_s_f1-62": 0.8769487738609314,
        "codebertscore_s_f3-62": 0.87599778175354,
        "codebertscore_s_f1-57": 0.8645037412643433,
        "codebertscore_s_f3-57": 0.8662784099578857,
        "codebertscore_s_f1-35": 0.6526316404342651,
        "codebertscore_s_f3-35": 0.5867058038711548,
        "codebertscore_s_f1-190": 0.746573805809021,
        "codebertscore_s_f3-190": 0.7334589958190918,
        "codebertscore_s_f1-26": 0.8135374784469604,
        "codebertscore_s_f3-26": 0.8251659274101257,
        "codebertscore_s_f1-174": 0.7414023876190186,
        "codebertscore_s_f3-174": 0.7281243801116943,
        "codebertscore_s_f1-139": 0.6916735172271729,
        "codebertscore_s_f3-139": 0.6800944805145264,
        "codebertscore_s_f1-22": 0.7583493590354919,
        "codebertscore_s_f3-22": 0.7358205318450928,
        "codebertscore_s_f1-151": 0.7406426668167114,
        "codebertscore_s_f3-151": 0.7189808487892151,
        "codebertscore_s_f1-108": 0.7379443645477295,
        "codebertscore_s_f3-108": 0.7257919311523438,
        "codebertscore_s_f1-8": 0.8857542276382446,
        "codebertscore_s_f3-8": 0.8910830020904541,
        "codebertscore_s_f1-7": 0.717914879322052,
        "codebertscore_s_f3-7": 0.720936119556427,
        "codebertscore_s_f1-23": 0.7464344501495361,
        "codebertscore_s_f3-23": 0.7228289842605591,
        "codebertscore_s_f1-55": 0.8845862150192261,
        "codebertscore_s_f3-55": 0.8840489387512207,
        "codebertscore_s_f1-59": 0.8504642844200134,
        "codebertscore_s_f3-59": 0.8415131568908691,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13, 12) = -1\nlong choose_num(long x, long y) {\n",
        "snippet": [
            "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n"
        ],
        "simplified": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "task_id": "102",
        "169": "// TODO: Write your implementation here\n    // Note: You may not use any conditional statements\n    // (e.g. if or switch) or loops (e.g. for or while)\n    // If a variable is used more than once, you can reuse it",
        "grade-169": {
            "execution": 0
        },
        "28": "if (x == y) {\n       if (x % 2 == 0) {\n           return x;\n       } else {\n           return -1;\n       }\n   }\n   long max = y;\n   if (y % 2 == 1) {\n       max--;\n   }\n   if (max < x) {\n       return -1;\n   }\n   while (max >= x) {\n       if (max % 2 == 0) {\n           return max;\n       }\n       max--;\n   }\n   return -1;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (x%2 == 0)\n        return x;\n    if (x+1 > y)\n        return -1;\n    return x+1;",
        "grade-6": {
            "execution": 0
        },
        "196": "if (x <= y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n    }\n    return -1;",
        "grade-196": {
            "execution": 1
        },
        "71": "long bigEven = -1;\n  for (long i = x; i <= y; i++) {\n    if (i % 2 == 0) {\n      bigEven = i;\n    }\n  }\n  return bigEven;",
        "grade-71": {
            "execution": 1
        },
        "63": "if(x == y) {\n    if(x % 2 == 0) {\n      return x;\n    }\n    else {\n      return -1;\n    }\n  }\n  else if(x > y) {\n    return -1;\n  }\n  else {\n    return choose_num(x+1, y);\n  }",
        "grade-63": {
            "execution": 0
        },
        "58": "// Check input\n  assert(x > 0);\n  assert(y > 0);\n  assert(x <= y);\n  // even number check\n  if (x % 2 == 0)\n  {\n    return x;\n  }\n  else if ((x + 1) % 2 == 0)\n  {\n    if (x + 1 <= y)\n    {\n      return x + 1;\n    }\n    else if (x + 1 > y)\n    {\n      return -1;\n    }\n  }\n  else\n  {\n    if (x + 2 <= y)\n    {\n      return x + 2;\n    }\n    else if (x + 2 > y)\n    {\n      return -1;\n    }\n  }\n  return 0;",
        "grade-58": {
            "execution": 0
        },
        "35": "assert(x > 0 && y > 0);\n\n    // TODO: implement me\n    if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return choose_num(x + 1, y);",
        "grade-35": {
            "execution": 0
        },
        "195": "long count = 0;\n    for (int i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            count = i;\n        }\n    }\n    if (count == 0) {\n        return -1;\n    }\n    return count;",
        "grade-195": {
            "execution": 1
        },
        "26": "// Write code here.\n    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n            if(i > max){\n                max = i;\n            }\n        }\n    }\n    return max;",
        "grade-26": {
            "execution": 1
        },
        "179": "//    return -1;\n    if (x % 2 == 0 && y % 2 == 0)\n    \treturn y;\n    else if (x % 2 == 0 && y % 2 != 0)\n    \treturn y - 1;\n    else if (x % 2 != 0 && y % 2 == 0)\n    \treturn x;\n    else\n    \treturn x + 1;",
        "grade-179": {
            "execution": 0
        },
        "143": "// implement your own solution\n  long res = -1;\n  long even = 0;\n  if (x % 2 == 0) {\n  \teven = x;\n  } else {\n  \teven = x + 1;\n  }\n  for (long i = even; i <= y; i = i + 2) {\n  \tres = i;\n  }\n  return res;",
        "grade-143": {
            "execution": 1
        },
        "22": "// TODO: Write your code here.\n  long num = -1;\n  for(int i=x;i<=y;i++){\n    if(i%2==0){\n      num = i;\n    }\n  }\n  return num;",
        "grade-22": {
            "execution": 1
        },
        "156": "if (x <= y && x % 2 == 0)\n\t\treturn x;\n\telse if (x <= y && x % 2 != 0)\n\t\treturn x + 1;\n\telse\n\t\treturn -1;",
        "grade-156": {
            "execution": 0
        },
        "112": "// your code here\n    if (x % 2 == 0)\n        return x;\n    if (x % 2 != 0)\n        x++;\n    long n = x;\n    if (n <= y && n % 2 == 0)\n        return n;\n    return -1;",
        "grade-112": {
            "execution": 0
        },
        "8": "// Your code here\n    if (x<=y)\n    {\n        if (x%2 == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return x+1;\n        }\n    }\n    else\n    {\n        return -1;\n    }",
        "grade-8": {
            "execution": 0
        },
        "7": "if(x%2==0)\n\t\treturn x;\n\telse\n\t\treturn x+1;",
        "grade-7": {
            "execution": 0
        },
        "23": "long number_to_return;\n    // Checks if x is less than or equal to y\n    if (x <= y) {\n        // Checks if the number is even\n        if (x % 2 == 0) {\n            number_to_return = x;\n        }\n        // Checks if the number is odd\n        else {\n            number_to_return = x + 1;\n        }\n    }\n    // Checks if x is greater than y\n    else {\n        number_to_return = -1;\n    }\n    return number_to_return;",
        "grade-23": {
            "execution": 0
        },
        "56": "if(x%2==0 && y%2==0)\n\t{\n\t\tlong temp=x;\n\t\tif(x<y)\n\t\t{\n\t\t\twhile(temp<=y)\n\t\t\t{\n\t\t\t\tif(temp==y)\n\t\t\t\t{\n\t\t\t\t\treturn temp;\n\t\t\t\t}\n\t\t\t\ttemp=temp+2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\telse if(x%2!=0 && y%2!=0)\n\t{\n\t\tlong temp=x+1;\n\t\tif(x<y)\n\t\t{\n\t\t\twhile(temp<=y)\n\t\t\t{\n\t\t\t\tif(temp==y)\n\t\t\t\t{\n\t\t\t\t\treturn temp;\n\t\t\t\t}\n\t\t\t\ttemp=temp+2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x+1;\n\t\t}\n\t}\n\telse if(x%2==0 && y%2!=0)\n\t{\n\t\tif(x<y)\n\t\t{\n\t\t\treturn y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\telse if(x%2!=0 && y%2==0)\n\t{\n\t\tif(x<y)\n\t\t{\n\t\t\treturn y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x+1;\n\t\t}\n\t}\n\treturn -1;",
        "grade-56": {
            "execution": 0
        },
        "60": "long min = (x < y) ? x : y;\n    long max = (x > y) ? x : y;\n    // TODO: Write your code here\n    long num = -1;\n    for(long i = max; i >= min; i--) {\n        if(i % 2 == 0) {\n            num = i;\n            break;\n        }\n    }\n    return num;",
        "grade-60": {
            "execution": 0
        },
        "bleu-169": 0.009702695924258075,
        "bleu-28": 0.22626990695437457,
        "bleu-6": 0.19370801873815574,
        "bleu-196": 0.1625415395470504,
        "bleu-71": 0.11347417368816652,
        "bleu-63": 0.17656913033809304,
        "bleu-58": 0.10031031112549042,
        "bleu-35": 0.10489140211616448,
        "bleu-195": 0.1371818100288123,
        "bleu-26": 0.0979075466520653,
        "bleu-179": 0.2651092887909295,
        "bleu-143": 0.08829657510638317,
        "bleu-22": 0.10195285150562765,
        "bleu-156": 0.16337593259566907,
        "bleu-112": 0.19541306576847708,
        "bleu-8": 0.15033755587619915,
        "bleu-7": 0.04616097351330831,
        "bleu-23": 0.06639671070426983,
        "bleu-56": 0.08151425369241189,
        "bleu-60": 0.0688216782861967,
        "codebleu-169": 0.17548076923076922,
        "codebleu-28": 0.7079031090804812,
        "codebleu-6": 0.39591000659429393,
        "codebleu-196": 0.46874605763028954,
        "codebleu-71": 0.36191239316239315,
        "codebleu-63": 0.5888804160980824,
        "codebleu-58": 0.6267109442180698,
        "codebleu-35": 0.5812533283654281,
        "codebleu-195": 0.4828852871900389,
        "codebleu-26": 0.4081196581196581,
        "codebleu-179": 0.5885987782813696,
        "codebleu-143": 0.43723290598290593,
        "codebleu-22": 0.36191239316239315,
        "codebleu-156": 0.4918609220504447,
        "codebleu-112": 0.5662401998619481,
        "codebleu-8": 0.4435740518775445,
        "codebleu-7": 0.20691972268505637,
        "codebleu-23": 0.47516025641025633,
        "codebleu-56": 0.660455114662245,
        "codebleu-60": 0.4583333333333333,
        "chrf-169": 0.09719645143965644,
        "chrf-28": 0.43013457776669933,
        "chrf-6": 0.35839452370708097,
        "chrf-196": 0.2675462388978384,
        "chrf-71": 0.1718785603452652,
        "chrf-63": 0.3684986736480289,
        "chrf-58": 0.31380609757900163,
        "chrf-35": 0.28958829769387173,
        "chrf-195": 0.2567955494950951,
        "chrf-26": 0.19188154914204703,
        "chrf-179": 0.48584597625381415,
        "chrf-143": 0.18872959940794715,
        "chrf-22": 0.19332969408746925,
        "chrf-156": 0.31809768385628345,
        "chrf-112": 0.3737695073040582,
        "chrf-8": 0.29132075886982184,
        "chrf-7": 0.19426377310312662,
        "chrf-23": 0.22397886887523166,
        "chrf-56": 0.2742091754183617,
        "chrf-60": 0.18979135601656905,
        "rougel-169": 0.09803921568627451,
        "rougel-28": 0.48920863309352525,
        "rougel-6": 0.5333333333333333,
        "rougel-196": 0.4395604395604396,
        "rougel-71": 0.3956043956043956,
        "rougel-63": 0.5490196078431373,
        "rougel-58": 0.36571428571428566,
        "rougel-35": 0.46774193548387094,
        "rougel-195": 0.44000000000000006,
        "rougel-26": 0.35294117647058826,
        "rougel-179": 0.5081967213114754,
        "rougel-143": 0.3508771929824562,
        "rougel-22": 0.3711340206185567,
        "rougel-156": 0.5333333333333332,
        "rougel-112": 0.5048543689320387,
        "rougel-8": 0.449438202247191,
        "rougel-7": 0.40625,
        "rougel-23": 0.3384615384615384,
        "rougel-56": 0.2681992337164751,
        "rougel-60": 0.3548387096774194,
        "meteor-169": 0.06382978723404256,
        "meteor-28": 0.5978466841963845,
        "meteor-6": 0.4606416979948538,
        "meteor-196": 0.5224311947001024,
        "meteor-71": 0.44096805388822197,
        "meteor-63": 0.5616579547964367,
        "meteor-58": 0.5693946623441852,
        "meteor-35": 0.4602641534085174,
        "meteor-195": 0.5003839476495726,
        "meteor-26": 0.48660526490579403,
        "meteor-179": 0.6780045351473923,
        "meteor-143": 0.34129783310281236,
        "meteor-22": 0.43527814351547073,
        "meteor-156": 0.5293396819132973,
        "meteor-112": 0.5833976081475583,
        "meteor-8": 0.44495404814004375,
        "meteor-7": 0.28102560468631893,
        "meteor-23": 0.38283132530120473,
        "meteor-56": 0.5200638814084192,
        "meteor-60": 0.4499068428184283,
        "ruby-169": 0.0357142857142857,
        "ruby-28": 0.34408602150537637,
        "ruby-6": 0.3695652173913043,
        "ruby-196": 0.30434782608695654,
        "ruby-71": 0.28260869565217395,
        "ruby-63": 0.3035714285714286,
        "ruby-58": 0.2325581395348837,
        "ruby-35": 0.3205128205128205,
        "ruby-195": 0.2962962962962963,
        "ruby-26": 0.2678571428571429,
        "ruby-179": 0.35526315789473684,
        "ruby-143": 0.23529411764705888,
        "ruby-22": 0.2941176470588235,
        "ruby-156": 0.32608695652173914,
        "ruby-112": 0.2807017543859649,
        "ruby-8": 0.21739130434782605,
        "ruby-7": 0.28260869565217395,
        "ruby-23": 0.22619047619047616,
        "ruby-56": 0.16279069767441856,
        "ruby-60": 0.2564102564102564,
        "codebertscore_f1-169": 0.6059500575065613,
        "codebertscore_f3-169": 0.6248813271522522,
        "codebertscore_f1-28": 0.8248868584632874,
        "codebertscore_f3-28": 0.8494850397109985,
        "codebertscore_f1-6": 0.8841980695724487,
        "codebertscore_f3-6": 0.8841760754585266,
        "codebertscore_f1-196": 0.8218338489532471,
        "codebertscore_f3-196": 0.8287596106529236,
        "codebertscore_f1-71": 0.8092228770256042,
        "codebertscore_f3-71": 0.8302671313285828,
        "codebertscore_f1-63": 0.835983157157898,
        "codebertscore_f3-63": 0.8505223393440247,
        "codebertscore_f1-58": 0.755741536617279,
        "codebertscore_f3-58": 0.7956535816192627,
        "codebertscore_f1-35": 0.7868245840072632,
        "codebertscore_f3-35": 0.8205625414848328,
        "codebertscore_f1-195": 0.8100429177284241,
        "codebertscore_f3-195": 0.8306372761726379,
        "codebertscore_f1-26": 0.7719343900680542,
        "codebertscore_f3-26": 0.7995522022247314,
        "codebertscore_f1-179": 0.8416351675987244,
        "codebertscore_f3-179": 0.8599773645401001,
        "codebertscore_f1-143": 0.7641600966453552,
        "codebertscore_f3-143": 0.8068402409553528,
        "codebertscore_f1-22": 0.7750146389007568,
        "codebertscore_f3-22": 0.8159318566322327,
        "codebertscore_f1-156": 0.8601503968238831,
        "codebertscore_f3-156": 0.8725696206092834,
        "codebertscore_f1-112": 0.8047934174537659,
        "codebertscore_f3-112": 0.8226335048675537,
        "codebertscore_f1-8": 0.8039547801017761,
        "codebertscore_f3-8": 0.827705442905426,
        "codebertscore_f1-7": 0.8255552053451538,
        "codebertscore_f3-7": 0.8159765005111694,
        "codebertscore_f1-23": 0.7086347341537476,
        "codebertscore_f3-23": 0.7650111317634583,
        "codebertscore_f1-56": 0.7318845987319946,
        "codebertscore_f3-56": 0.7672449946403503,
        "codebertscore_f1-60": 0.7600691914558411,
        "codebertscore_f3-60": 0.7990465760231018,
        "codebertscore_s_f1-169": 0.5960590243339539,
        "codebertscore_s_f3-169": 0.6110343337059021,
        "codebertscore_s_f1-28": 0.839304506778717,
        "codebertscore_s_f3-28": 0.8676040768623352,
        "codebertscore_s_f1-6": 0.8871216177940369,
        "codebertscore_s_f3-6": 0.8872287273406982,
        "codebertscore_s_f1-196": 0.8330824375152588,
        "codebertscore_s_f3-196": 0.8419212698936462,
        "codebertscore_s_f1-71": 0.8125606775283813,
        "codebertscore_s_f3-71": 0.8394426107406616,
        "codebertscore_s_f1-63": 0.8447105884552002,
        "codebertscore_s_f3-63": 0.8582214117050171,
        "codebertscore_s_f1-58": 0.7772910594940186,
        "codebertscore_s_f3-58": 0.8212167620658875,
        "codebertscore_s_f1-35": 0.8008474111557007,
        "codebertscore_s_f3-35": 0.8367237448692322,
        "codebertscore_s_f1-195": 0.8204360008239746,
        "codebertscore_s_f3-195": 0.8473085761070251,
        "codebertscore_s_f1-26": 0.7787938714027405,
        "codebertscore_s_f3-26": 0.813502848148346,
        "codebertscore_s_f1-179": 0.8510489463806152,
        "codebertscore_s_f3-179": 0.8716574311256409,
        "codebertscore_s_f1-143": 0.7792655229568481,
        "codebertscore_s_f3-143": 0.8260053992271423,
        "codebertscore_s_f1-22": 0.7841270565986633,
        "codebertscore_s_f3-22": 0.8291414380073547,
        "codebertscore_s_f1-156": 0.8639544248580933,
        "codebertscore_s_f3-156": 0.8759723901748657,
        "codebertscore_s_f1-112": 0.8161838054656982,
        "codebertscore_s_f3-112": 0.8379574418067932,
        "codebertscore_s_f1-8": 0.817284345626831,
        "codebertscore_s_f3-8": 0.844577431678772,
        "codebertscore_s_f1-7": 0.8357969522476196,
        "codebertscore_s_f3-7": 0.8282593488693237,
        "codebertscore_s_f1-23": 0.7289506793022156,
        "codebertscore_s_f3-23": 0.78859543800354,
        "codebertscore_s_f1-56": 0.7503139972686768,
        "codebertscore_s_f3-56": 0.7860267758369446,
        "codebertscore_s_f1-60": 0.7686843872070312,
        "codebertscore_s_f3-60": 0.8119316101074219,
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-156": 3,
        "raw_gpt35_nsnr-156": "3",
        "gpt35_nsnr-112": 3,
        "raw_gpt35_nsnr-112": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-195": 2,
        "raw_gpt35_nswr-195": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-156": 2,
        "raw_gpt35_nswr-156": "2",
        "gpt35_nswr-112": 3,
        "raw_gpt35_nswr-112": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n",
        "snippet": [
            "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n"
        ],
        "simplified": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "task_id": "39",
        "164": "assert(n > 0);\n    long i = 1;\n    long sum = 0;\n    while (i < n) {\n        if (is_prime(i) && is_fib(i)) {\n            sum += i;\n        }\n        i++;\n    }\n    return sum;",
        "grade-164": {
            "execution": 0
        },
        "28": "long prev = 2;\n  long curr = 3;\n  long count = 2;\n  while (count < n) {\n    long next = prev + curr;\n    prev = curr;\n    curr = next;\n    if (is_prime(curr)) {\n      count++;\n    }\n  }\n  return curr;",
        "grade-28": {
            "execution": 0
        },
        "6": "// TODO: implement the function\n\tlong f1 = 0, f2 = 1, nfib = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\t// Check if nfib is a prime number\n\t\tbool isPrime = true;\n\t\tfor (int j = 2; j < nfib/2; j++) {\n\t\t\tif (nfib % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If nfib is prime fib number, return\n\t\tif (isPrime) {\n\t\t\treturn nfib;\n\t\t}\n\t\t// Calculate nth fib number\n\t\tnfib = f1 + f2;\n\t\tf1 = f2;\n\t\tf2 = nfib;\n\t}\n\treturn -1;",
        "grade-6": {
            "execution": 0
        },
        "191": "assert(n > 0);\n    // TODO: Implementation here.\n    long long j = 2;\n    long long count = 2;\n    long long i = 2;\n    long long k = 3;\n    long long temp = 0;\n    long long temp2 = 0;\n    std::vector<long long> prime_fib_arr;\n    prime_fib_arr.push_back(2);\n    prime_fib_arr.push_back(3);\n    while(count <= n){\n    \ttemp = j + i;\n    \ttemp2 = j;\n    \tif(temp > k){\n    \t\tif(k % j == 0){\n    \t\t\tj = i;\n    \t\t\ti = temp;\n    \t\t\tcontinue;\n    \t\t}\n    \t\telse{\n    \t\t\tj = i;\n    \t\t\ti = temp;\n    \t\t\tk++;\n    \t\t\tcontinue;\n    \t\t}\n    \t}\n    \tif(temp % k == 0){\n    \t\tj = i;\n    \t\ti = temp;\n    \t\tcontinue;\n    \t}\n    \telse{\n    \t\tj = i;\n    \t\ti = temp;\n    \t\tprime_fib_arr.push_back(temp);\n    \t\tcount++;\n    \t}\n    }\n    return prime_fib_arr[n-1];",
        "grade-191": {
            "execution": 0
        },
        "70": "assert(n >= 1);\n    // TODO: implement this function\n    vector<long> fibs;\n    int i = 1;\n    long a = 1, b = 1;\n    fibs.push_back(1);\n    fibs.push_back(1);\n    for (; i < n; i++) {\n        a = a + b;\n        b = a + b;\n        fibs.push_back(a);\n        fibs.push_back(b);\n    }\n    fibs.erase(fibs.begin() + n);\n    fibs.erase(fibs.begin() + n + 1);\n    fibs.erase(fibs.begin() + n + 2);\n    sort(fibs.begin(), fibs.end());\n    if (n > 2) {\n        fibs.erase(fibs.begin() + n - 2);\n    }\n    int primelist[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683",
        "grade-70": {
            "execution": 0
        },
        "62": "// Insert your code here\n  long fib[100000];\n  long count = 0;\n  fib[0] = 0;\n  fib[1] = 1;\n  int j;\n  for(j = 2; j < 100000; j++){\n    fib[j] = fib[j-1] + fib[j-2];\n    if(fib[j] > 1e9)\n      break;\n  }\n  std::vector<int> prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967",
        "grade-62": {
            "execution": 0
        },
        "57": "long i=1,a=1,b=2,c=2;\n  while(i<n){\n    if(a%2==0)a/=2;\n    else if(b%2==0)b/=2;\n    else if(c%2==0)c/=2;\n    else if(a%3==0)a/=3;\n    else if(b%3==0)b/=3;\n    else if(c%3==0)c/=3;\n    else if(a%5==0)a/=5;\n    else if(b%5==0)b/=5;\n    else if(c%5==0)c/=5;\n    else if(a%7==0)a/=7;\n    else if(b%7==0)b/=7;\n    else if(c%7==0)c/=7;\n    else if(a%11==0)a/=11;\n    else if(b%11==0)b/=11;\n    else if(c%11==0)c/=11;\n    else if(a%13==0)a/=13;\n    else if(b%13==0)b/=13;\n    else if(c%13==0)c/=13;\n    else if(a%17==0)a/=17;\n    else if(b%17==0)b/=17;\n    else if(c%17==0)c/=17;\n    else if(a%19==0)a/=19;\n    else if(b%19==0)b/=19;\n    else if(c%19==0)c/=19;\n    else if(a%23==0)a/=23;\n    else if(b%23==0)b/=23;\n    else if(c%23==0)c/=23;\n    if(a==1){\n      if(b==2){\n        if(c==2){\n          i++;\n          c=b+c;\n          b=c-b;\n        }\n        else{\n          i",
        "grade-57": {
            "execution": 0
        },
        "35": "long long int f1 = 1, f2 = 1,f3 = 2;\n\tlong long int fib[10000];\n\tlong long int temp;\n\t// Write your code here\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (i <= 1) {\n\t\t\tfib[i] = 1;\n\t\t}\n\t\telse {\n\t\t\tfib[i] = fib[i - 1] + fib[i - 2];\n\t\t}\n\t}\n\t//for (int i = 0; i < n; i++) {\n\t//\tcout << fib[i] << endl;\n\t//}\n\tfor (int i = 2; i < n; i++) {\n\t\tfor (int j = 1; j <= fib[i]; j++) {\n\t\t\tif (fib[i] % j == 0)\n\t\t\t\tcnt++;\n\t\t}\n\t\tif (cnt == 2) {\n\t\t\treturn fib[i];\n\t\t}\n\t\tcnt = 0;\n\t}",
        "grade-35": {
            "execution": 0
        },
        "190": "// your code here\n\t//return 0;\n\t\n\tlong int result=0;\n\tlong int f1=0,f2=1,f3=1;\n\tint c=1;\n\tint x=2;\n\t//cout<<x<<endl;\n\twhile(c<n)\n\t{\n\t\t\n\t\tf3=f1+f2;\n\t\tf1=f2;\n\t\tf2=f3;\n\t\t\n\t\tif(f3%x==0)\n\t\t{\n\t\t\tint flag=0;\n\t\t\tfor(int i=2;i<=f3/2;i++)\n\t\t\t{\n\t\t\t\tif(f3%i==0)\n\t\t\t\t{\n\t\t\t\t\tflag=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag==0)\n\t\t\t{\n\t\t\t\tc++;\n\t\t\t\tresult=f3;\n\t\t\t}\n\t\t}\n\t\tx++;\n\t}\n\treturn result;",
        "grade-190": {
            "execution": 0
        },
        "26": "long result;\n    // your code here\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "174": "assert(n > 0);\n  int arr[] = {0, 2, 3, 5, 13, 89};\n  return arr[n];",
        "grade-174": {
            "execution": 0
        },
        "140": "long first = 1;\n    long second = 1;\n    long third = 2;\n    long count = 3;\n    long result = 0;\n    while (count <= n) {\n        result = third;\n        third = first + second;\n        first = second;\n        second = third;\n        if (third % 2 != 0) {\n            if (third % 3 != 0) {\n                if (third % 5 != 0) {\n                    if (third % 7 != 0) {\n                        if (third % 11 != 0) {\n                            if (third % 13 != 0) {\n                                if (third % 17 != 0) {\n                                    if (third % 19 != 0) {\n                                        if (third % 23 != 0) {\n                                            if (third % 29 != 0) {\n                                                if (third % 31 != 0) {\n                                                    if (third % 37 != 0) {\n                                                        if (third % 41 != 0) {\n                                                            if (third % 43 != 0) {\n                                                                if (third % 47 != 0) {\n                                                                    if (third % 53 != 0) {\n                                                                        if (third % 59 != 0) {\n                                                                            if (third % 61 != 0) {\n                                                                                if (third % 67 != 0) {\n                                                                                    if (third % 71 != 0) {\n                                                                                        if (third % 73 != 0) {\n                                                                                            if (third % 79 != 0) {\n                                                                                                if (third % 83 != 0) {\n                                                                                                    if (third % 89 != 0) {\n                                                                                                        if (third % 97 != 0) {\n                                                                                                            count++;\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }",
        "grade-140": {
            "execution": 0
        },
        "22": "long long prev1 = 2, prev2 = 3, res = 0;\n    for (int i = 3; i <= n; i++) {\n        res = prev1 + prev2;\n        prev1 = prev2;\n        prev2 = res;\n    }\n    return res;",
        "grade-22": {
            "execution": 0
        },
        "152": "assert(n > 0);\n    return n;",
        "grade-152": {
            "execution": 0
        },
        "109": "long n1 = 2, n2 = 3, n3 = 5;\n\tfor (int i = 4; i <= n; i++) {\n\t\tn1 = n2;\n\t\tn2 = n3;\n\t\tn3 = n1 + n2;\n\t\twhile (!is_prime(n3)) {\n\t\t\tn3 += n2;\n\t\t}\n\t}\n\treturn n3;",
        "grade-109": {
            "execution": 0
        },
        "8": "assert(n >= 1);\n\tlong a = 2, b = 3, c = 5;\n\tif (n == 1) return a;\n\tif (n == 2) return b;\n\tif (n == 3) return c;\n\t\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong f = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = f;\n\t\t\n\t\twhile (!is_prime(c)) {\n\t\t\tf = a + b + c;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = f;\n\t\t}\n\t}\n\treturn c;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(n > 0);\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    int j = 1;\n    long f1 = 2;\n    long f2 = 3;\n    for (long i = 3; i <= n; i++) {\n        long f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n        if (std::__gcd(f3, n) == 1) {\n            j++;\n        }\n        if (j == n) {\n            return f3;\n        }\n    }\n    return 0;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n == 1) {\n    return 2;\n  }\n  long count = 1;\n  long fib1 = 1;\n  long fib2 = 1;\n  while (count < n) {\n    long fib = fib1 + fib2;\n    fib1 = fib2;\n    fib2 = fib;\n    if (is_prime(fib)) {\n      count++;\n    }\n  }\n  return fib2;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n    long fib = 0;\n    while (count != n) {\n        long pre_fib = fib;\n        fib = fibonacci(count);\n        if (is_prime(fib)) {\n            count++;\n        }\n    }\n    return fib;",
        "grade-55": {
            "execution": 0
        },
        "59": "long *fib = new long[n];\n  fib[0] = 2;\n  fib[1] = 3;\n  int count = 2;\n  long num = 5;\n  while(count < n) {\n    if(isPrime(num)) {\n      fib[count] = num;\n      count++;\n    }\n    num = num + 2;\n  }\n  return fib[n-1];",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.07025578911965717,
        "bleu-28": 0.09958892488492513,
        "bleu-6": 0.2388907641241925,
        "bleu-191": 0.09753283169449349,
        "bleu-70": 0.016460052172149495,
        "bleu-62": 0.021198867521640102,
        "bleu-57": 0.026121702287753297,
        "bleu-35": 0.09006927914492685,
        "bleu-190": 0.22423783185072957,
        "bleu-26": 8.75646777609592e-06,
        "bleu-174": 0.004664268168748447,
        "bleu-140": 0.05832581197299866,
        "bleu-22": 0.04086747236378354,
        "bleu-152": 8.038320896796111e-06,
        "bleu-109": 0.06082102918332621,
        "bleu-8": 0.08095824267619679,
        "bleu-7": 0.2280421861773095,
        "bleu-23": 0.12828051275412575,
        "bleu-55": 0.07688690216356558,
        "bleu-59": 0.13932209297927886,
        "codebleu-164": 0.30558116278604197,
        "codebleu-28": 0.37424161612823054,
        "codebleu-6": 0.6338923779472262,
        "codebleu-191": 0.6554726368159204,
        "codebleu-70": 0.5348258706467661,
        "codebleu-62": 0.41273712468644247,
        "codebleu-57": 0.5740053583414912,
        "codebleu-35": 0.6218905472636815,
        "codebleu-190": 0.7271864834923744,
        "codebleu-26": 0.0447963087435672,
        "codebleu-174": 0.11847420398956521,
        "codebleu-140": 0.5818602721447534,
        "codebleu-22": 0.26823692996622817,
        "codebleu-152": 0.03484676312846959,
        "codebleu-109": 0.34644692350002476,
        "codebleu-8": 0.5970149253731343,
        "codebleu-7": 0.5929680821803286,
        "codebleu-23": 0.4424388564075066,
        "codebleu-55": 0.2871022997130856,
        "codebleu-59": 0.44392561044698375,
        "chrf-164": 0.16916074824202348,
        "chrf-28": 0.23493244116238915,
        "chrf-6": 0.3998262761504277,
        "chrf-191": 0.24945299746261868,
        "chrf-70": 0.12922479298722145,
        "chrf-62": 0.12682672859047037,
        "chrf-57": 0.13028676421815327,
        "chrf-35": 0.26116979812804547,
        "chrf-190": 0.36176119095500586,
        "chrf-26": 0.05405775936682298,
        "chrf-174": 0.0626616571862023,
        "chrf-140": 0.19031456537482053,
        "chrf-22": 0.13767432041453814,
        "chrf-152": 0.039128339600200006,
        "chrf-109": 0.17232261043027586,
        "chrf-8": 0.2230309434173222,
        "chrf-7": 0.25624446300321324,
        "chrf-23": 0.28145694426726364,
        "chrf-55": 0.2585488151971378,
        "chrf-59": 0.27296976184614025,
        "rougel-164": 0.3164556962025316,
        "rougel-28": 0.375,
        "rougel-6": 0.44351464435146437,
        "rougel-191": 0.3445945945945946,
        "rougel-70": 0.14015151515151517,
        "rougel-62": 0.11132437619961612,
        "rougel-57": 0.1764705882352941,
        "rougel-35": 0.36482084690553745,
        "rougel-190": 0.5254901960784314,
        "rougel-26": 0.05128205128205128,
        "rougel-174": 0.15942028985507248,
        "rougel-140": 0.24470588235294116,
        "rougel-22": 0.3096774193548387,
        "rougel-152": 0.1206896551724138,
        "rougel-109": 0.3195266272189349,
        "rougel-8": 0.3755458515283843,
        "rougel-7": 0.4343891402714932,
        "rougel-23": 0.36046511627906974,
        "rougel-55": 0.326797385620915,
        "rougel-59": 0.3060109289617486,
        "meteor-164": 0.193426631568613,
        "meteor-28": 0.2117138857003721,
        "meteor-6": 0.42133578656853726,
        "meteor-191": 0.3869828088578089,
        "meteor-70": 0.20692146577024914,
        "meteor-62": 0.18943513830727043,
        "meteor-57": 0.26585848804643375,
        "meteor-35": 0.35339914979622244,
        "meteor-190": 0.4451232984927126,
        "meteor-26": 0.0155440414507772,
        "meteor-174": 0.08620689655172413,
        "meteor-140": 0.2797241860871083,
        "meteor-22": 0.2054168074289528,
        "meteor-152": 0.04149377593360996,
        "meteor-109": 0.22089055222219994,
        "meteor-8": 0.3154785647179047,
        "meteor-7": 0.4370070101283073,
        "meteor-23": 0.23987870195337116,
        "meteor-55": 0.1893861240800016,
        "meteor-59": 0.23731937535639047,
        "ruby-164": 0.2075471698113207,
        "ruby-28": 0.26415094339622647,
        "ruby-6": 0.30827067669172936,
        "ruby-191": 0.23684210526315785,
        "ruby-70": 0.0781990521327014,
        "ruby-62": 0.04096385542168679,
        "ruby-57": 0.10805084745762716,
        "ruby-35": 0.23880597014925375,
        "ruby-190": 0.40268456375838924,
        "ruby-26": 0.028301886792452824,
        "ruby-174": 0.08490566037735847,
        "ruby-140": 0.15673981191222575,
        "ruby-22": 0.2264150943396226,
        "ruby-152": 0.06603773584905659,
        "ruby-109": 0.21698113207547165,
        "ruby-8": 0.2195121951219512,
        "ruby-7": 0.26956521739130435,
        "ruby-23": 0.21698113207547165,
        "ruby-55": 0.2264150943396226,
        "ruby-59": 0.17924528301886788,
        "codebertscore_f1-164": 0.72765052318573,
        "codebertscore_f3-164": 0.7077955007553101,
        "codebertscore_f1-28": 0.7545416355133057,
        "codebertscore_f3-28": 0.734062910079956,
        "codebertscore_f1-6": 0.7977866530418396,
        "codebertscore_f3-6": 0.823904812335968,
        "codebertscore_f1-191": 0.7079505324363708,
        "codebertscore_f3-191": 0.7265415191650391,
        "codebertscore_f1-70": 0.6370679140090942,
        "codebertscore_f3-70": 0.7017689943313599,
        "codebertscore_f1-62": 0.6249939203262329,
        "codebertscore_f3-62": 0.6933615803718567,
        "codebertscore_f1-57": 0.6756106615066528,
        "codebertscore_f3-57": 0.6956093311309814,
        "codebertscore_f1-35": 0.7717339396476746,
        "codebertscore_f3-35": 0.7907956838607788,
        "codebertscore_f1-190": 0.8269107341766357,
        "codebertscore_f3-190": 0.8453760743141174,
        "codebertscore_f1-26": 0.5695263147354126,
        "codebertscore_f3-26": 0.5423666834831238,
        "codebertscore_f1-174": 0.6497184038162231,
        "codebertscore_f3-174": 0.625746488571167,
        "codebertscore_f1-140": 0.7259110808372498,
        "codebertscore_f3-140": 0.7274953722953796,
        "codebertscore_f1-22": 0.7663764953613281,
        "codebertscore_f3-22": 0.7395156621932983,
        "codebertscore_f1-152": 0.6469781994819641,
        "codebertscore_f3-152": 0.599200963973999,
        "codebertscore_f1-109": 0.7811223864555359,
        "codebertscore_f3-109": 0.7618676424026489,
        "codebertscore_f1-8": 0.7480591535568237,
        "codebertscore_f3-8": 0.7417063117027283,
        "codebertscore_f1-7": 0.8113337755203247,
        "codebertscore_f3-7": 0.80672287940979,
        "codebertscore_f1-23": 0.8076754212379456,
        "codebertscore_f3-23": 0.7866812944412231,
        "codebertscore_f1-55": 0.7447981238365173,
        "codebertscore_f3-55": 0.7205349802970886,
        "codebertscore_f1-59": 0.7445251941680908,
        "codebertscore_f3-59": 0.7332088351249695,
        "codebertscore_s_f1-164": 0.7377985715866089,
        "codebertscore_s_f3-164": 0.7206020355224609,
        "codebertscore_s_f1-28": 0.7596781849861145,
        "codebertscore_s_f3-28": 0.7394963502883911,
        "codebertscore_s_f1-6": 0.8064139485359192,
        "codebertscore_s_f3-6": 0.8362408876419067,
        "codebertscore_s_f1-191": 0.7195539474487305,
        "codebertscore_s_f3-191": 0.7386054396629333,
        "codebertscore_s_f1-70": 0.6643396019935608,
        "codebertscore_s_f3-70": 0.7138805389404297,
        "codebertscore_s_f1-62": 0.6504267454147339,
        "codebertscore_s_f3-62": 0.7106285691261292,
        "codebertscore_s_f1-57": 0.6946401000022888,
        "codebertscore_s_f3-57": 0.7083114981651306,
        "codebertscore_s_f1-35": 0.7743977308273315,
        "codebertscore_s_f3-35": 0.7916724681854248,
        "codebertscore_s_f1-190": 0.8317240476608276,
        "codebertscore_s_f3-190": 0.8500412702560425,
        "codebertscore_s_f1-26": 0.5613800287246704,
        "codebertscore_s_f3-26": 0.5351019501686096,
        "codebertscore_s_f1-174": 0.6531320810317993,
        "codebertscore_s_f3-174": 0.6231781840324402,
        "codebertscore_s_f1-140": 0.7372432947158813,
        "codebertscore_s_f3-140": 0.7354832291603088,
        "codebertscore_s_f1-22": 0.7719364762306213,
        "codebertscore_s_f3-22": 0.7477362155914307,
        "codebertscore_s_f1-152": 0.6379784941673279,
        "codebertscore_s_f3-152": 0.5893193483352661,
        "codebertscore_s_f1-109": 0.7859416604042053,
        "codebertscore_s_f3-109": 0.7676592469215393,
        "codebertscore_s_f1-8": 0.7555967569351196,
        "codebertscore_s_f3-8": 0.7495483160018921,
        "codebertscore_s_f1-7": 0.8197695016860962,
        "codebertscore_s_f3-7": 0.8155887126922607,
        "codebertscore_s_f1-23": 0.813894510269165,
        "codebertscore_s_f3-23": 0.7927199006080627,
        "codebertscore_s_f1-55": 0.752305805683136,
        "codebertscore_s_f3-55": 0.7310215830802917,
        "codebertscore_s_f1-59": 0.7528228163719177,
        "codebertscore_s_f3-59": 0.7403628826141357,
        "gpt35_nsnr-164": 2,
        "raw_gpt35_nsnr-164": "2",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-191": 3,
        "raw_gpt35_nsnr-191": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 2,
        "raw_gpt35_nsnr-57": "2",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-152": 2,
        "raw_gpt35_nsnr-152": "2",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-164": 0,
        "raw_gpt35_nswr-164": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-191": 2,
        "raw_gpt35_nswr-191": "2",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 1,
        "raw_gpt35_nswr-57": "1",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-174": 2,
        "raw_gpt35_nswr-174": "2",
        "gpt35_nswr-140": 2,
        "raw_gpt35_nswr-140": "2",
        "gpt35_nswr-22": 1,
        "raw_gpt35_nswr-22": "1",
        "gpt35_nswr-152": 0,
        "raw_gpt35_nswr-152": "Score: 0",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n// is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nbool is_equal_to_sum_even(long n) {\n",
        "snippet": [
            "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n"
        ],
        "simplified": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "task_id": "138",
        "167": "// Write your code here\n    // Return true if n can be expressed as sum of 4 even numbers\n    // Return false otherwise\n    if(n<4){\n        return false;\n    }\n    if(n%2==1){\n        return false;\n    }\n    if(n%4==0){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-167": {
            "execution": 0
        },
        "28": "std::set<int> answer;\n    answer.insert(n);\n    std::vector<int> v;\n    for(int i = 2; i < n; i++) {\n        if(n % i == 0) {\n            v.push_back(i);\n        }\n    }\n    for(int i = 0; i < v.size(); i++) {\n        for(int j = i; j < v.size(); j++) {\n            for(int k = j; k < v.size(); k++) {\n                if(n % (v[i] + v[j] + v[k]) == 0) {\n                    answer.insert(v[i] + v[j] + v[k]);\n                }\n            }\n        }\n    }\n    return answer.size() == 4;",
        "grade-28": {
            "execution": 0
        },
        "6": "",
        "grade-6": {
            "execution": 0
        },
        "195": "// Write your code here\n  if(n%2==1) return false;\n  int count = 0;\n  while(n>0){\n    n = n-2;\n    count++;\n  }\n  if(count==4) return true;\n  return false;",
        "grade-195": {
            "execution": 0
        },
        "70": "if(n<8) return false;\n    if(n==8) return true;\n    long even=n%2==0?n:n-1;\n    if(even%4==0) return true;\n    else return false;",
        "grade-70": {
            "execution": 0
        },
        "62": "// your code here",
        "grade-62": {
            "execution": 0
        },
        "57": "bool ans = false;\n\tfor (int i = 2; i <= n; i += 2) {\n\t\tfor (int j = 2; j <= n; j += 2) {\n\t\t\tfor (int k = 2; k <= n; k += 2) {\n\t\t\t\tfor (int l = 2; l <= n; l += 2) {\n\t\t\t\t\tif (i + j + k + l == n) {\n\t\t\t\t\t\tans = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;",
        "grade-57": {
            "execution": 1
        },
        "35": "bool found = false;\n    for (long i = 2; i < n; i += 2) {\n        if (n - i == 2) {\n            found = true;\n            break;\n        }\n    }\n    return found;",
        "grade-35": {
            "execution": 0
        },
        "193": "// your code goes here\n  // replace the next line with your own code\n  return true;",
        "grade-193": {
            "execution": 0
        },
        "26": "// TODO: Implement this function\n    // Note: if your function returns True\n    //       the test-suite will expect you to return a solution\n    //       follow the example below.\n    //\n    // n = n - 4\n    // return (n, n, n, n)\n    if (n <= 0) {\n        return false;\n    }\n    if (n % 2 != 0) {\n        return false;\n    }\n    long res = n / 4;\n    return {res, res, res, res};",
        "grade-26": {
            "execution": 0
        },
        "177": "if(n%2!=0){\n        return false;\n    }\n    if(n%4==0){\n        return true;\n    }\n    return false;",
        "grade-177": {
            "execution": 0
        },
        "142": "// we use the fact that if n is odd, then it cannot be written as the sum of 4 positive even numbers\n  // because all positive even numbers are divisible by 2\n  if (n % 2 == 1) return false;\n  return true;",
        "grade-142": {
            "execution": 0
        },
        "22": "return false;",
        "grade-22": {
            "execution": 0
        },
        "154": "// Write your code here\n  if(n%2==1)return false;\n  int count = 0;\n  for(int i=2;i<=n;i+=2){\n    if(count<=4 && n%i==0){\n      count++;\n    }\n  }\n  if(count==4)return true;\n  return false;",
        "grade-154": {
            "execution": 0
        },
        "110": "if(n<8){\n        return false;\n    }\n    if(n%2==1){\n        return false;\n    }\n    if(n%4==0){\n        return true;\n    }\n    long d=n-8;\n    if(d%4==0){\n        return true;\n    }\n    return false;",
        "grade-110": {
            "execution": 0
        },
        "8": "if(n==0 || n==1 || n==2 || n==3 || n==5 || n==7) return false;\n    long f1 = 0, f2 = 2, next;\n    while(f1 <= n){\n        if(f1 == n) return true;\n        next = f1 + f2;\n        f1 = f2;\n        f2 = next;\n    }\n    return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "return n%2 == 0 && n > 4;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Base condition:\n    if (n < 8) return false;\n    if (n == 8) return true;\n    // Recursive condition:\n    long chk = n - 4;\n    if (chk % 2 != 0) {\n        return false;\n    }\n    return is_equal_to_sum_even(chk);",
        "grade-23": {
            "execution": 0
        },
        "55": "// Write your code here\n    long m,i,count=0;\n    for(i=2;i<=n;i+=2)\n    {\n        m=n-i;\n        if(m%2==0)\n        {\n            count++;\n        }\n    }\n    if(count==1)\n    {\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-55": {
            "execution": 0
        },
        "59": "// your code here\n    if(n%2 == 0) {\n        for(int i = 2; i < n; i++) {\n            if(i%2 == 0) {\n                for(int j = 2; j < n; j++) {\n                    if(j%2 == 0) {\n                        for(int k = 2; k < n; k++) {\n                            if(k%2 == 0) {\n                                for(int l = 2; l < n; l++) {\n                                    if(l%2 == 0) {\n                                        if(i+j+k+l == n) {\n                                            return true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;",
        "grade-59": {
            "execution": 1
        },
        "bleu-167": 0.1428854372591969,
        "bleu-28": 0.023209104292172603,
        "bleu-6": 0.0,
        "bleu-195": 0.2341115953456911,
        "bleu-70": 0.22407508680204355,
        "bleu-62": 0.0,
        "bleu-57": 0.01690743826704456,
        "bleu-35": 0.06243278810191723,
        "bleu-193": 0.06782914653146341,
        "bleu-26": 0.06956647718695119,
        "bleu-177": 0.27240268049293653,
        "bleu-142": 0.1702602472176709,
        "bleu-22": 0.0024787521766663594,
        "bleu-154": 0.16381868835556748,
        "bleu-110": 0.16698368301125016,
        "bleu-8": 0.06315761950690366,
        "bleu-7": 0.24459392178667655,
        "bleu-23": 0.16736269464913253,
        "bleu-55": 0.10702907168001116,
        "bleu-59": 0.0653655458241275,
        "codebleu-167": 0.562230301386179,
        "codebleu-28": 0.49194278660406304,
        "codebleu-6": 0.0,
        "codebleu-195": 0.6088049264797093,
        "codebleu-70": 0.5515140369548208,
        "codebleu-62": 0.07142857142857142,
        "codebleu-57": 0.4845559845559845,
        "codebleu-35": 0.46074646074646075,
        "codebleu-193": 0.22200772200772198,
        "codebleu-26": 0.5390501716557943,
        "codebleu-177": 0.6485094108258052,
        "codebleu-142": 0.5597550043138751,
        "codebleu-22": 0.09568786837936998,
        "codebleu-154": 0.598605489704813,
        "codebleu-110": 0.6446237406402974,
        "codebleu-8": 0.5444883136504127,
        "codebleu-7": 0.2673078324999156,
        "codebleu-23": 0.623773002701,
        "codebleu-55": 0.5637065637065637,
        "codebleu-59": 0.593719794613288,
        "chrf-167": 0.39823853185545777,
        "chrf-28": 0.13878204695184232,
        "chrf-6": 0.0,
        "chrf-195": 0.5422116775259037,
        "chrf-70": 0.5227603787896947,
        "chrf-62": 0.04240675200388098,
        "chrf-57": 0.22690152132597813,
        "chrf-35": 0.31966814477653516,
        "chrf-193": 0.2583465675859892,
        "chrf-26": 0.27443400334309737,
        "chrf-177": 0.5718475110319887,
        "chrf-142": 0.43283442913459425,
        "chrf-22": 0.2888699930896321,
        "chrf-154": 0.48952328808131634,
        "chrf-110": 0.49390265498179203,
        "chrf-8": 0.3910895999423422,
        "chrf-7": 0.2204222871724473,
        "chrf-23": 0.43240961648935056,
        "chrf-55": 0.42270851148065974,
        "chrf-59": 0.36859171973985744,
        "rougel-167": 0.3695652173913044,
        "rougel-28": 0.13,
        "rougel-6": 0,
        "rougel-195": 0.48,
        "rougel-70": 0.4722222222222222,
        "rougel-62": 0.0,
        "rougel-57": 0.19047619047619044,
        "rougel-35": 0.3125,
        "rougel-193": 0.15,
        "rougel-26": 0.19672131147540983,
        "rougel-177": 0.6153846153846153,
        "rougel-142": 0.3333333333333333,
        "rougel-22": 0.25,
        "rougel-154": 0.3505154639175258,
        "rougel-110": 0.40476190476190477,
        "rougel-8": 0.2962962962962963,
        "rougel-7": 0.5294117647058824,
        "rougel-23": 0.36363636363636365,
        "rougel-55": 0.34408602150537637,
        "rougel-59": 0.2,
        "meteor-167": 0.5897435897435899,
        "meteor-28": 0.21739130434782614,
        "meteor-6": 0.0,
        "meteor-195": 0.6834011604710281,
        "meteor-70": 0.6388888888888888,
        "meteor-62": 0.0,
        "meteor-57": 0.34414210128495853,
        "meteor-35": 0.43611111111111117,
        "meteor-193": 0.07211538461538461,
        "meteor-26": 0.528735632183908,
        "meteor-177": 0.6640712682379348,
        "meteor-142": 0.5017592592592593,
        "meteor-22": 0.15335648148148148,
        "meteor-154": 0.6017353831819241,
        "meteor-110": 0.6031526183880755,
        "meteor-8": 0.5076224863346874,
        "meteor-7": 0.4101485148514851,
        "meteor-23": 0.4458137825767427,
        "meteor-55": 0.6109573813916087,
        "meteor-59": 0.45364891518737677,
        "ruby-167": 0.23943661971830987,
        "ruby-28": 0.06703910614525144,
        "ruby-6": 0.0,
        "ruby-195": 0.31481481481481477,
        "ruby-70": 0.3137254901960784,
        "ruby-62": 0.0,
        "ruby-57": 0.10476190476190472,
        "ruby-35": 0.2093023255813954,
        "ruby-193": 0.09523809523809523,
        "ruby-26": 0.1188118811881188,
        "ruby-177": 0.4838709677419355,
        "ruby-142": 0.13725490196078427,
        "ruby-22": 0.1428571428571429,
        "ruby-154": 0.21052631578947367,
        "ruby-110": 0.25396825396825395,
        "ruby-8": 0.1724137931034483,
        "ruby-7": 0.38095238095238093,
        "ruby-23": 0.25,
        "ruby-55": 0.2222222222222222,
        "ruby-59": 0.10738255033557043,
        "codebertscore_f1-167": 0.7674750685691833,
        "codebertscore_f3-167": 0.8123975396156311,
        "codebertscore_f1-28": 0.6252027153968811,
        "codebertscore_f3-28": 0.6651835441589355,
        "codebertscore_f1-6": 0.0,
        "codebertscore_f3-6": 0.0,
        "codebertscore_f1-195": 0.8074699640274048,
        "codebertscore_f3-195": 0.8460356593132019,
        "codebertscore_f1-70": 0.8586721420288086,
        "codebertscore_f3-70": 0.8832635879516602,
        "codebertscore_f1-62": 0.553292453289032,
        "codebertscore_f3-62": 0.5514214038848877,
        "codebertscore_f1-57": 0.704878568649292,
        "codebertscore_f3-57": 0.7339638471603394,
        "codebertscore_f1-35": 0.7579092383384705,
        "codebertscore_f3-35": 0.7768912315368652,
        "codebertscore_f1-193": 0.6950539946556091,
        "codebertscore_f3-193": 0.7116569876670837,
        "codebertscore_f1-26": 0.6986412405967712,
        "codebertscore_f3-26": 0.753374457359314,
        "codebertscore_f1-177": 0.8974335789680481,
        "codebertscore_f3-177": 0.8895382285118103,
        "codebertscore_f1-142": 0.751617968082428,
        "codebertscore_f3-142": 0.8198127150535583,
        "codebertscore_f1-22": 0.6168563365936279,
        "codebertscore_f3-22": 0.5862554311752319,
        "codebertscore_f1-154": 0.7966502904891968,
        "codebertscore_f3-154": 0.8504545092582703,
        "codebertscore_f1-110": 0.826524555683136,
        "codebertscore_f3-110": 0.8449181914329529,
        "codebertscore_f1-8": 0.7779488563537598,
        "codebertscore_f3-8": 0.8265452980995178,
        "codebertscore_f1-7": 0.8669615387916565,
        "codebertscore_f3-7": 0.8406606912612915,
        "codebertscore_f1-23": 0.7765828371047974,
        "codebertscore_f3-23": 0.8332496285438538,
        "codebertscore_f1-55": 0.7393935322761536,
        "codebertscore_f3-55": 0.7863775491714478,
        "codebertscore_f1-59": 0.6839258670806885,
        "codebertscore_f3-59": 0.7470772862434387,
        "codebertscore_s_f1-167": 0.7665478587150574,
        "codebertscore_s_f3-167": 0.8160872459411621,
        "codebertscore_s_f1-28": 0.6331698298454285,
        "codebertscore_s_f3-28": 0.6871583461761475,
        "codebertscore_s_f1-6": 0,
        "codebertscore_s_f3-6": 0,
        "codebertscore_s_f1-195": 0.8056780695915222,
        "codebertscore_s_f3-195": 0.8483085632324219,
        "codebertscore_s_f1-70": 0.8629553914070129,
        "codebertscore_s_f3-70": 0.8856375813484192,
        "codebertscore_s_f1-62": 0.5337626338005066,
        "codebertscore_s_f3-62": 0.5358409285545349,
        "codebertscore_s_f1-57": 0.7223680019378662,
        "codebertscore_s_f3-57": 0.7582897543907166,
        "codebertscore_s_f1-35": 0.7631551623344421,
        "codebertscore_s_f3-35": 0.787173867225647,
        "codebertscore_s_f1-193": 0.6453529596328735,
        "codebertscore_s_f3-193": 0.6878370642662048,
        "codebertscore_s_f1-26": 0.6991333961486816,
        "codebertscore_s_f3-26": 0.7630405426025391,
        "codebertscore_s_f1-177": 0.8954358100891113,
        "codebertscore_s_f3-177": 0.8843667507171631,
        "codebertscore_s_f1-142": 0.7516751289367676,
        "codebertscore_s_f3-142": 0.8263145685195923,
        "codebertscore_s_f1-22": 0.7693506479263306,
        "codebertscore_s_f3-22": 0.6981640458106995,
        "codebertscore_s_f1-154": 0.7951731085777283,
        "codebertscore_s_f3-154": 0.855199933052063,
        "codebertscore_s_f1-110": 0.8405080437660217,
        "codebertscore_s_f3-110": 0.8579192161560059,
        "codebertscore_s_f1-8": 0.7735780477523804,
        "codebertscore_s_f3-8": 0.8237178325653076,
        "codebertscore_s_f1-7": 0.8745047450065613,
        "codebertscore_s_f3-7": 0.8466244339942932,
        "codebertscore_s_f1-23": 0.7873222827911377,
        "codebertscore_s_f3-23": 0.8516319990158081,
        "codebertscore_s_f1-55": 0.7439752221107483,
        "codebertscore_s_f3-55": 0.8000374436378479,
        "codebertscore_s_f1-59": 0.717235803604126,
        "codebertscore_s_f3-59": 0.7748591899871826,
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "3 - The code snippet correctly checks if a given number can be written as the sum of exactly 4 positive even numbers. However, it does not return the correct output for all cases. For example, is_equal_to_sum_even(10) should return True but the current implementation returns False.",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "0",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 2,
        "raw_gpt35_nsnr-35": "2",
        "gpt35_nsnr-193": 2,
        "raw_gpt35_nsnr-193": "2",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-177": 3,
        "raw_gpt35_nsnr-177": "3",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-28": 0,
        "raw_gpt35_nswr-28": "Score: 1",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 0,
        "raw_gpt35_nswr-35": "Score: 2",
        "gpt35_nswr-193": 2,
        "raw_gpt35_nswr-193": "2",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-142": 4,
        "raw_gpt35_nswr-142": "4",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string) {\n",
        "snippet": [
            "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n"
        ],
        "simplified": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
        "task_id": "17",
        "163": "std::vector<long> arr;\n    for(long i=0;i<music_string.length();i++)\n    {\n        if(music_string[i]=='o')\n        {\n            if(music_string[i+1]=='|')\n            {\n                if(music_string[i+2]=='|')\n                {\n                    arr.push_back(4);\n                    i+=2;\n                }\n                else\n                {\n                    arr.push_back(2);\n                    i++;\n                }\n            }\n            else\n            {\n                arr.push_back(4);\n            }\n        }\n        else if(music_string[i]=='.')\n        {\n            if(music_string[i+1]=='|')\n            {\n                arr.push_back(1);\n                i++;\n            }\n        }\n    }\n    return arr;",
        "grade-163": {
            "execution": 1
        },
        "28": "// write your code here\n\tstd::vector<long> note_beat;\n\tstd::vector<char> note;\n\tstd::vector<char> beat;\n\tstd::vector<long>::iterator it;\n\tlong counter = 0;\n\t//Parsing string\n\tfor (int i = 0; i < music_string.length(); i++) {\n\t\tif (music_string[i] == 'o' || music_string[i] == '.') {\n\t\t\tnote.push_back(music_string[i]);\n\t\t}\n\t\telse if (music_string[i] == '|') {\n\t\t\tbeat.push_back(music_string[i]);\n\t\t}\n\t\telse {\n\t\t\tcounter++;\n\t\t}\n\t}\n\tcounter = (counter + 1) / 2;\n\t//Parsing note\n\n\tfor (int i = 0; i < note.size(); i++) {\n\t\tif (note[i] == 'o') {\n\t\t\tnote_beat.push_back(4);\n\t\t}\n\t\telse if (note[i] == '.') {\n\t\t\tnote_beat.push_back(1);\n\t\t}\n\t}\n\t//Parsing beat\n\n\tfor (int i = 0; i < beat.size(); i++) {\n\t\tif (beat[i] == '|') {\n\t\t\tit = note_beat.begin();\n\t\t\tnote_beat.insert(it + i, *(it + i) / 2);\n\t\t\tnote_beat.erase(it + i + 1);\n\t\t}\n\t}\n\t//Parsing counter\n\n\tif (counter > 0) {\n\t\tit = note_beat.begin();\n\t\tnote_beat.insert(it, counter);\n\t}\n\treturn note_beat;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n    // Implement your parser here\n\n    std::stringstream ss(music_string);\n    std::string note;\n    while (ss >> note) {\n        if (note.size() == 1)\n            result.push_back(4);\n        else if (note[1] == '|')\n            result.push_back(2);\n        else\n            result.push_back(1);\n    }\n\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "189": "int l = music_string.length();\n\tstd::vector<long> result;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] == '|') {\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(4);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(1);\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 1
        },
        "70": "char note[] = {'.', '|', 'o'};\n    std::vector<long> beats;\n    // YOUR CODE GOES HERE\n    char *token = strtok(const_cast<char *>(music_string.c_str()), \" \");\n    while (token != NULL) {\n        if (strcmp(token, \"o\") == 0) {\n            beats.push_back(4);\n        } else if (strcmp(token, \"o|\") == 0) {\n            beats.push_back(2);\n        } else if (strcmp(token, \".|\") == 0) {\n            beats.push_back(1);\n        }\n        token = strtok(NULL, \" \");\n    }\n    return beats;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (music_string.empty()) {\n        return {};\n    }\n    std::vector<long> res;\n    int i = 0;\n    int beat = 0;\n    while (i < music_string.size()) {\n        if (music_string[i] == 'o') {\n            if (music_string[i + 1] == '|') {\n                res.push_back(2);\n                i += 2;\n            } else {\n                res.push_back(4);\n                i += 1;\n            }\n        } else {\n            res.push_back(1);\n            i += 2;\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> musical_notes;\n\tlong count;\n\tfor (long i = 0; i < music_string.length(); i++) {\n\t\tcount = 0;\n\t\tif (music_string[i] == 'o') {\n\t\t\tcount = 4;\n\t\t\ti++;\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tcount = 1;\n\t\t\ti += 2;\n\t\t}\n\t\telse if (music_string[i] == 'o') {\n\t\t\tcount = 2;\n\t\t\ti += 2;\n\t\t}\n\t\tmusical_notes.push_back(count);\n\t}\n\treturn musical_notes;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> my_vector;\n    char *temp;\n    char *pch = strtok (music_string.c_str(),\" \");\n    while (pch != NULL)\n    {\n        if(strlen(pch) == 1)\n        {\n            my_vector.push_back(4);\n        }\n        else if(strlen(pch) == 2)\n        {\n            if(pch[0] == 'o')\n            {\n                my_vector.push_back(2);\n            }\n            else\n            {\n                my_vector.push_back(1);\n            }\n        }\n        else\n        {\n            my_vector.push_back(1);\n        }\n        pch = strtok (NULL, \" \");\n    }\n    return my_vector;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> result(0);\n    for (char& c : music_string) {\n        if (c == 'o') {\n            result.push_back(4);\n        } else if (c == '|') {\n            result.push_back(2);\n        } else if (c == '.') {\n            result.push_back(1);\n        }\n    }\n    return result;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> duration;\n    int size = music_string.size();\n    int i = 0;\n    while(i < size) {\n        if(music_string[i] == 'o') {\n            if(music_string[i+1] == ' ') {\n                duration.push_back(4);\n                i+=2;\n            }\n            else if(music_string[i+1] == '|') {\n                duration.push_back(2);\n                i+=3;\n            }\n        }\n        else if(music_string[i] == '.') {\n            duration.push_back(1);\n            i+=3;\n        }\n    }\n    return duration;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<long> res;\n    char notes[4] = {'o', '|', '|', '.'};\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == notes[0]) {\n            if (music_string[i + 1] == notes[1]) {\n                res.push_back(2);\n                i++;\n            } else {\n                res.push_back(4);\n            }\n        } else if (music_string[i] == notes[3]) {\n            if (music_string[i + 1] == notes[1]) {\n                res.push_back(1);\n                i++;\n            }\n        }\n    }\n    return res;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> a;\n  int len = music_string.length();\n  int i = 0;\n  long j = 0;\n  while(i<len){\n    if(music_string[i] == 'o'){\n      if(music_string[i+1] == ' ') {\n        a.push_back(4);\n        i++;\n      }\n      else if(music_string[i+1] == '|'){\n        a.push_back(2);\n        i++;\n      }\n    }\n    else if(music_string[i] == '.'){\n      if(music_string[i+1] == '|'){\n        a.push_back(1);\n        i++;\n      }\n    }\n    i++;\n  }\n  return a;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> ans;\n    for(auto c : music_string) {\n        if(c == 'o') {\n            ans.push_back(4);\n        } else if(c == '.') {\n            ans.push_back(1);\n        } else if(c == '|') {\n            ans.push_back(2);\n        }\n    }\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "151": "// your code here\n\tstd::vector<long> beats;\n\tstd::vector<char> note;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i] == ' ' || music_string[i] == 'o' || music_string[i] == '|' || music_string[i] == '.') {\n\t\t\tnote.push_back(music_string[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < note.size(); i++) {\n\t\tif (note[i] == 'o') {\n\t\t\tif (note[i + 1] == ' ') {\n\t\t\t\tbeats.push_back(4);\n\t\t\t}\n\t\t\telse if (note[i + 1] == '|') {\n\t\t\t\tbeats.push_back(2);\n\t\t\t}\n\t\t}\n\t\telse if (note[i] == '.') {\n\t\t\tif (note[i + 1] == '|') {\n\t\t\t\tbeats.push_back(1);\n\t\t\t}\n\t\t}\n\t}\n\treturn beats;",
        "grade-151": {
            "execution": 0
        },
        "108": "long length = music_string.length();\n    std::vector<long> vec;\n    for(long i = 0; i < length; i++){\n        if(music_string[i] == 'o'){\n            vec.push_back(4);\n        }\n        else if(music_string[i] == '.'){\n            vec.push_back(1);\n        }\n        else if(music_string[i] == '|'){\n            vec.back() = vec.back() / 2;\n        }\n    }\n    return vec;",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here\n  int count = 0;\n  std::vector<long> beats;\n  for(int i = 0; i < music_string.length(); i++){\n    if(music_string[i] == 'o'){\n      beats.push_back(4);\n    }\n    else if(music_string[i] == '.'){\n      beats.push_back(1);\n    }\n    else if(music_string[i] == '|'){\n      if(beats[beats.size()-1] == 4){\n        beats[beats.size()-1] = 2;\n      }\n      else{\n        beats[beats.size()-1] = 1;\n      }\n    }\n  }\n  return beats;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> beats;\n    std::string::iterator i;\n    long counter = 0;\n    long division_factor = 2;\n    bool previous_is_divided = false;\n    bool ended_with_dot = false;\n    long division_counter = 0;\n    for (i = music_string.begin(); i != music_string.end(); i++) {\n        //      std::cout << *i << \" \";\n        if (*i == 'o') {\n            if (previous_is_divided) {\n                division_factor = division_factor / division_counter;\n                division_counter = 0;\n                counter = counter / division_factor;\n                previous_is_divided = false;\n            } else {\n                if (ended_with_dot) {\n                    counter = counter / division_factor;\n                    division_factor = 2;\n                    ended_with_dot = false;\n                }\n            }\n            counter += 4;\n        } else if (*i == '|') {\n            if (previous_is_divided) {\n                division_factor = division_factor / division_counter;\n                division_counter = 0;\n                counter = counter / division_factor;\n                previous_is_divided = false;\n            } else {\n                if (ended_with_dot) {\n                    counter = counter / division_factor;\n                    division_factor = 2;\n                    ended_with_dot = false;\n                }\n            }\n            counter += 2;\n        } else if (*i == '.') {\n            if (previous_is_divided) {\n                division_factor = division_factor / division_counter;\n                division_counter = 0;\n                counter = counter / division_factor;\n                previous_is_divided = false;\n            } else {\n                if (ended_with_dot) {\n                    counter = counter / division_factor;\n                    division_factor = 2;\n                    ended_with_dot = false;\n                }\n            }\n            counter += 1;\n            ended_with_dot = true;\n        } else if (*i == ' ') {\n            if (previous_is_divided) {",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> beats;\n    for (char c : music_string) {\n        if (c == 'o') {\n            beats.push_back(4);\n        } else if (c == '|') {\n            beats.push_back(1);\n        }\n    }\n    return beats;",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code goes here\n    \n    std::vector<long> v;\n    long count=0;\n    for(long i=0;i<music_string.length();i++)\n    {\n        count=0;\n        if(music_string[i]=='o')\n        {\n            count+=4;\n            if(music_string[i+1]==' ')\n            {\n                v.push_back(count);\n            }\n        }\n        else if(music_string[i]=='o'&&music_string[i+1]=='|')\n        {\n            count+=2;\n            if(music_string[i+2]==' ')\n            {\n                v.push_back(count);\n            }\n        }\n        else if(music_string[i]=='.'&&music_string[i+1]=='|')\n        {\n            count+=1;\n            if(music_string[i+2]==' ')\n            {\n                v.push_back(count);\n            }\n        }\n        \n    }\n    return v;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> beats_per_note;\n    std::string beat;\n    long count = 0;\n    for (char note : music_string) {\n        if (note == ' ') {\n            beats_per_note.push_back(count);\n            count = 0;\n        } else if (note == 'o') {\n            count += 4;\n        } else if (note == '|') {\n            count += 1;\n        }\n    }\n    beats_per_note.push_back(count);\n    return beats_per_note;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.4132657736613347,
        "bleu-28": 0.20660203906541516,
        "bleu-6": 0.16447798068401748,
        "bleu-189": 0.4144817144917109,
        "bleu-70": 0.24675022668292115,
        "bleu-62": 0.37492949951738064,
        "bleu-57": 0.35345483585147514,
        "bleu-35": 0.25533494385759475,
        "bleu-188": 0.20522163734739252,
        "bleu-26": 0.41311546568864294,
        "bleu-173": 0.3618530267552723,
        "bleu-139": 0.4012271476563359,
        "bleu-22": 0.1936319864088919,
        "bleu-151": 0.31348242237188806,
        "bleu-108": 0.37730747332676207,
        "bleu-8": 0.4130011134839655,
        "bleu-7": 0.1270029061773544,
        "bleu-23": 0.10834104810605796,
        "bleu-55": 0.30030075107302284,
        "bleu-59": 0.1623701844914239,
        "codebleu-163": 0.6343132915384099,
        "codebleu-28": 0.686535040386937,
        "codebleu-6": 0.3583068375735023,
        "codebleu-189": 0.5159263461271971,
        "codebleu-70": 0.5617049355595495,
        "codebleu-62": 0.5337315614269451,
        "codebleu-57": 0.5318266631679601,
        "codebleu-35": 0.5019631085544983,
        "codebleu-188": 0.3581951001155594,
        "codebleu-26": 0.5730552728094277,
        "codebleu-173": 0.5897091779587508,
        "codebleu-139": 0.621133091633389,
        "codebleu-22": 0.34517877041678147,
        "codebleu-151": 0.676364897031208,
        "codebleu-108": 0.548917843430776,
        "codebleu-8": 0.619864663828188,
        "codebleu-7": 0.6193322983914935,
        "codebleu-23": 0.255058356419569,
        "codebleu-55": 0.6407245979568744,
        "codebleu-59": 0.3773796367279964,
        "chrf-163": 0.539740883985176,
        "chrf-28": 0.46781735447720957,
        "chrf-6": 0.3090947269129655,
        "chrf-189": 0.4745508213978609,
        "chrf-70": 0.32147453747077487,
        "chrf-62": 0.45203282771407777,
        "chrf-57": 0.43153288597418327,
        "chrf-35": 0.3092651601119904,
        "chrf-188": 0.29405003260349344,
        "chrf-26": 0.47967726410667105,
        "chrf-173": 0.49656107072116934,
        "chrf-139": 0.5314842907276196,
        "chrf-22": 0.2739576718571056,
        "chrf-151": 0.5070725088951855,
        "chrf-108": 0.44490430307166917,
        "chrf-8": 0.4615068146079788,
        "chrf-7": 0.22084733454496608,
        "chrf-23": 0.22602183487351943,
        "chrf-55": 0.5135594647493643,
        "chrf-59": 0.2685278448610056,
        "rougel-163": 0.5223367697594502,
        "rougel-28": 0.38528138528138534,
        "rougel-6": 0.42342342342342343,
        "rougel-189": 0.54320987654321,
        "rougel-70": 0.4755244755244755,
        "rougel-62": 0.5039370078740157,
        "rougel-57": 0.50199203187251,
        "rougel-35": 0.441860465116279,
        "rougel-188": 0.5395348837209302,
        "rougel-26": 0.5811320754716981,
        "rougel-173": 0.4791666666666667,
        "rougel-139": 0.5574912891986064,
        "rougel-22": 0.4928909952606635,
        "rougel-151": 0.5168539325842696,
        "rougel-108": 0.5737704918032788,
        "rougel-8": 0.5531914893617023,
        "rougel-7": 0.3211009174311927,
        "rougel-23": 0.42708333333333326,
        "rougel-55": 0.5105105105105106,
        "rougel-59": 0.4210526315789473,
        "meteor-163": 0.5709670573540381,
        "meteor-28": 0.41974209582790095,
        "meteor-6": 0.29650190833675044,
        "meteor-189": 0.4580309708316339,
        "meteor-70": 0.4788725740622677,
        "meteor-62": 0.4904290766037402,
        "meteor-57": 0.45092233403921717,
        "meteor-35": 0.339859623421637,
        "meteor-188": 0.4314468600182885,
        "meteor-26": 0.6024618548990277,
        "meteor-173": 0.5499311294765841,
        "meteor-139": 0.622685311878569,
        "meteor-22": 0.3874512860483243,
        "meteor-151": 0.6184171237939621,
        "meteor-108": 0.46573227490772284,
        "meteor-8": 0.46027658788774006,
        "meteor-7": 0.38103597417963553,
        "meteor-23": 0.2858122362869199,
        "meteor-55": 0.5648936504854015,
        "meteor-59": 0.33031684288088836,
        "ruby-163": 0.2993630573248408,
        "ruby-28": 0.25914634146341464,
        "ruby-6": 0.30597014925373134,
        "ruby-189": 0.4253731343283582,
        "ruby-70": 0.3092105263157895,
        "ruby-62": 0.3731343283582089,
        "ruby-57": 0.32835820895522383,
        "ruby-35": 0.26865671641791045,
        "ruby-188": 0.3805970149253731,
        "ruby-26": 0.32089552238805974,
        "ruby-173": 0.35064935064935066,
        "ruby-139": 0.3464052287581699,
        "ruby-22": 0.33582089552238803,
        "ruby-151": 0.36936936936936937,
        "ruby-108": 0.4029850746268657,
        "ruby-8": 0.3716216216216216,
        "ruby-7": 0.20198675496688745,
        "ruby-23": 0.29104477611940294,
        "ruby-55": 0.3266331658291457,
        "ruby-59": 0.30597014925373134,
        "codebertscore_f1-163": 0.8544575572013855,
        "codebertscore_f3-163": 0.8541991710662842,
        "codebertscore_f1-28": 0.7836734056472778,
        "codebertscore_f3-28": 0.8315244913101196,
        "codebertscore_f1-6": 0.7963948249816895,
        "codebertscore_f3-6": 0.8007969856262207,
        "codebertscore_f1-189": 0.8630772233009338,
        "codebertscore_f3-189": 0.8618295788764954,
        "codebertscore_f1-70": 0.7676833868026733,
        "codebertscore_f3-70": 0.8033201098442078,
        "codebertscore_f1-62": 0.8507999777793884,
        "codebertscore_f3-62": 0.8522799015045166,
        "codebertscore_f1-57": 0.8455564975738525,
        "codebertscore_f3-57": 0.8432877659797668,
        "codebertscore_f1-35": 0.7528344988822937,
        "codebertscore_f3-35": 0.771086573600769,
        "codebertscore_f1-188": 0.8220630288124084,
        "codebertscore_f3-188": 0.8095332980155945,
        "codebertscore_f1-26": 0.8495351672172546,
        "codebertscore_f3-26": 0.8508356213569641,
        "codebertscore_f1-173": 0.8492772579193115,
        "codebertscore_f3-173": 0.8548502326011658,
        "codebertscore_f1-139": 0.8560611009597778,
        "codebertscore_f3-139": 0.8571993708610535,
        "codebertscore_f1-22": 0.8168069124221802,
        "codebertscore_f3-22": 0.7991595268249512,
        "codebertscore_f1-151": 0.8332763910293579,
        "codebertscore_f3-151": 0.8453016877174377,
        "codebertscore_f1-108": 0.8656671047210693,
        "codebertscore_f3-108": 0.8591687679290771,
        "codebertscore_f1-8": 0.8326097130775452,
        "codebertscore_f3-8": 0.849380373954773,
        "codebertscore_f1-7": 0.6972799301147461,
        "codebertscore_f3-7": 0.7467120289802551,
        "codebertscore_f1-23": 0.8017248511314392,
        "codebertscore_f3-23": 0.7839393019676208,
        "codebertscore_f1-55": 0.8334870338439941,
        "codebertscore_f3-55": 0.8528475165367126,
        "codebertscore_f1-59": 0.7875734567642212,
        "codebertscore_f3-59": 0.7998545169830322,
        "codebertscore_s_f1-163": 0.903710126876831,
        "codebertscore_s_f3-163": 0.9052315950393677,
        "codebertscore_s_f1-28": 0.8519214987754822,
        "codebertscore_s_f3-28": 0.886916995048523,
        "codebertscore_s_f1-6": 0.8825262784957886,
        "codebertscore_s_f3-6": 0.8755649924278259,
        "codebertscore_s_f1-189": 0.9107279777526855,
        "codebertscore_s_f3-189": 0.9051650762557983,
        "codebertscore_s_f1-70": 0.8480914235115051,
        "codebertscore_s_f3-70": 0.8739868402481079,
        "codebertscore_s_f1-62": 0.9061912298202515,
        "codebertscore_s_f3-62": 0.905558168888092,
        "codebertscore_s_f1-57": 0.8985978364944458,
        "codebertscore_s_f3-57": 0.8951705694198608,
        "codebertscore_s_f1-35": 0.8397620916366577,
        "codebertscore_s_f3-35": 0.8548969626426697,
        "codebertscore_s_f1-188": 0.8984860777854919,
        "codebertscore_s_f3-188": 0.8821706771850586,
        "codebertscore_s_f1-26": 0.9039816856384277,
        "codebertscore_s_f3-26": 0.90482497215271,
        "codebertscore_s_f1-173": 0.9043517112731934,
        "codebertscore_s_f3-173": 0.9089751839637756,
        "codebertscore_s_f1-139": 0.9029406309127808,
        "codebertscore_s_f3-139": 0.9057202339172363,
        "codebertscore_s_f1-22": 0.8953980207443237,
        "codebertscore_s_f3-22": 0.8747565150260925,
        "codebertscore_s_f1-151": 0.8835734128952026,
        "codebertscore_s_f3-151": 0.8978325128555298,
        "codebertscore_s_f1-108": 0.9139426350593567,
        "codebertscore_s_f3-108": 0.9042305946350098,
        "codebertscore_s_f1-8": 0.8876529335975647,
        "codebertscore_s_f3-8": 0.9005816578865051,
        "codebertscore_s_f1-7": 0.7784140110015869,
        "codebertscore_s_f3-7": 0.833164393901825,
        "codebertscore_s_f1-23": 0.8924815654754639,
        "codebertscore_s_f3-23": 0.8670094609260559,
        "codebertscore_s_f1-55": 0.8873143196105957,
        "codebertscore_s_f3-55": 0.904557466506958,
        "codebertscore_s_f1-59": 0.870365560054779,
        "codebertscore_s_f3-59": 0.873773992061615,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 0,
        "raw_gpt35_nsnr-57": "3 - The code snippet correctly handles the 'o', 'o|', and '.|' notes and assigns the correct number of beats to each. However, there is a mistake in the code where the second 'o' case should be 'o|' instead. This will cause the function to incorrectly assign 2 beats instead of 1 to the corresponding note.",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 0,
        "raw_gpt35_nsnr-188": "3 - The code correctly handles the 'o', '|', and '.' characters and returns the corresponding beat values. However, it does not handle the 'o|' combination as a half note, which is required by the problem statement.",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-173": 0,
        "raw_gpt35_nsnr-173": "3 - The code snippet correctly handles the 'o' and '.|' notes, but does not handle the 'o|' notes correctly. It only assigns a duration of 2 beats to 'o|' notes instead of the correct duration of 2 beats.",
        "gpt35_nsnr-139": 0,
        "raw_gpt35_nsnr-139": "3 - The code snippet correctly handles the 'o' and '.|' cases, but does not handle the 'o|' case. It only pushes 2 to the vector instead of 2 and 2.",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "3 - The code snippet correctly handles the 'o', '.', and '|' characters and returns the corresponding number of beats for each note. However, it does not handle the 'o|' character as specified in the problem.",
        "gpt35_nsnr-151": 3,
        "raw_gpt35_nsnr-151": "3",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "3 - The code correctly handles 'o' and '|' characters, but does not handle the '.|' character as required by the problem.",
        "gpt35_nsnr-55": 2,
        "raw_gpt35_nsnr-55": "2",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 2,
        "raw_gpt35_nswr-151": "2",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n// True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd', 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nbool same_chars(std::string s0, std::string s1) {\n",
        "snippet": [
            "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n"
        ],
        "simplified": "Check if two words have the same characters.",
        "task_id": "54",
        "199": "int i;\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0==s1;",
        "grade-199": {
            "execution": 0
        },
        "34": "// find occurences of each character in string 0\n  // find occurences of each character in string 1\n  // compare to see if they have the same occurences\n  std::unordered_map<char, int> occurences;\n  // loop over string 0 and count occurences\n  for (const char &c : s0) {\n    occurences[c]++;\n  }\n  // loop over string 1 and count occurences\n  for (const char &c : s1) {\n    occurences[c]--;\n  }\n  // now just check if each occurence == 0\n  for (const auto &occ : occurences) {\n    if (occ.second != 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-34": {
            "execution": 0
        },
        "9": "// Your code goes here\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0==s1;",
        "grade-9": {
            "execution": 0
        },
        "88": "if (s0.size() == s1.size()) {\n        std::sort(s0.begin(), s0.end());\n        std::sort(s1.begin(), s1.end());\n        if (s0 == s1)\n            return true;\n    }\n    return false;",
        "grade-88": {
            "execution": 0
        },
        "79": "int charset[127];\n    for (int i = 0; i < 127; i++) {\n        charset[i] = 0;\n    }\n    for (char c : s0) {\n        charset[c] += 1;\n    }\n    for (char c : s1) {\n        charset[c] -= 1;\n    }\n    for (int i = 0; i < 127; i++) {\n        if (charset[i] != 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-79": {
            "execution": 0
        },
        "73": "// LAB\n  \n  std::sort(s0.begin(), s0.end());\n  std::sort(s1.begin(), s1.end());\n  return s0 == s1;",
        "grade-73": {
            "execution": 0
        },
        "44": "std::map<char, int> freq1;\n    std::map<char, int> freq2;\n    for (char x : s0)\n        freq1[x]++;\n    for (char x : s1)\n        freq2[x]++;\n    for (auto it : freq1) {\n        if (freq2[it.first] != it.second)\n            return false;\n    }\n    return true;",
        "grade-44": {
            "execution": 0
        },
        "32": "auto len0 = s0.length();\n    auto len1 = s1.length();\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    std::cout << s0 << std::endl;\n    std::cout << s1 << std::endl;\n    return s0 == s1;",
        "grade-32": {
            "execution": 0
        },
        "169": "// put your code here\n    int i, j;\n    for(i = 0; i < s0.length(); i++) {\n        for(j = 0; j < s1.length(); j++) {\n            if(s0[i] == s1[j])\n                break;\n        }\n        if(j == s1.length())\n            return false;\n    }\n    for(i = 0; i < s1.length(); i++) {\n        for(j = 0; j < s0.length(); j++) {\n            if(s1[i] == s0[j])\n                break;\n        }\n        if(j == s0.length())\n            return false;\n    }\n    return true;",
        "grade-169": {
            "execution": 1
        },
        "28": "std::map<char,int> map_s0;\n\tstd::map<char,int> map_s1;\n\tstd::map<char,int>::iterator itr_s0;\n\tstd::map<char,int>::iterator itr_s1;\n\tfor(int i=0;i<s0.length();i++){\n\t\titr_s0 = map_s0.find(s0[i]);\n\t\tif(itr_s0 == map_s0.end()){\n\t\t\tmap_s0.insert(std::pair<char,int>(s0[i],1));\n\t\t}else{\n\t\t\tmap_s0[s0[i]]++;\n\t\t}\n\t}\n\tfor(int i=0;i<s1.length();i++){\n\t\titr_s1 = map_s1.find(s1[i]);\n\t\tif(itr_s1 == map_s1.end()){\n\t\t\tmap_s1.insert(std::pair<char,int>(s1[i],1));\n\t\t}else{\n\t\t\tmap_s1[s1[i]]++;\n\t\t}\n\t}\n\titr_s0 = map_s0.begin();\n\titr_s1 = map_s1.begin();\n\twhile(itr_s0 != map_s0.end()){\n\t\tif(itr_s1 == map_s1.end()){\n\t\t\treturn false;\n\t\t}\n\t\tif(itr_s0->first != itr_s1->first){\n\t\t\treturn false;\n\t\t}\n\t\tif(itr_s0->second != itr_s1->second){\n\t\t\treturn false;\n\t\t}\n\t\titr_s0++;\n\t\titr_s1++;\n\t}\n\tif(itr_s1 != map_s1.end()){\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-28": {
            "execution": 0
        },
        "183": "std::unordered_map<char, int> m;\n    for (auto c : s0) {\n        m[c]++;\n    }\n    for (auto c : s1) {\n        m[c]--;\n    }\n    for (auto& p : m) {\n        if (p.second != 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-183": {
            "execution": 0
        },
        "133": "std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    std::cout << s0 << ' ' << s1 << std::endl;\n    return s0 == s1;",
        "grade-133": {
            "execution": 0
        },
        "12": "std::map<char, int> freq;\n\tfor (auto ch : s0) {\n\t\tfreq[ch]++;\n\t}\n\tfor (auto ch : s1) {\n\t\tfreq[ch]--;\n\t}\n\tfor (auto val : freq) {\n\t\tif (val.second != 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-12": {
            "execution": 0
        },
        "10": "if(s0.length() != s1.length()) return false;\n   std::map<char, int> m;\n   for(int i = 0; i < s0.length(); i++) {\n       m[s0[i]]++;\n   }\n   for(int i = 0; i < s1.length(); i++) {\n       m[s1[i]]--;\n   }\n   for(auto e : m) {\n       if(e.second != 0) return false;\n   }\n   return true;",
        "grade-10": {
            "execution": 0
        },
        "29": "assert(s0.size() > 0);\n  assert(s1.size() > 0);\n  std::sort(s0.begin(), s0.end());\n  std::sort(s1.begin(), s1.end());\n  return s0 == s1;",
        "grade-29": {
            "execution": 0
        },
        "71": "std::map<char, int> map;\n    for (auto c : s0) {\n        ++map[c];\n    }\n    for (auto c : s1) {\n        --map[c];\n    }\n    for (auto kv : map) {\n        if (kv.second != 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-71": {
            "execution": 0
        },
        "75": "// Implement this!\n   return true;",
        "grade-75": {
            "execution": 0
        },
        "156": "int a[256] = {0};\n    for(int i = 0; i < s0.length(); i++) {\n        a[s0[i]]++;\n    }\n    for(int i = 0; i < s1.length(); i++) {\n        a[s1[i]]--;\n    }\n    for(int i = 0; i < 256; i++) {\n        if(a[i] != 0)\n            return false;\n    }\n    return true;",
        "grade-156": {
            "execution": 0
        },
        "187": "std::map<char, int> m;\n  for (int i = 0; i < s0.size(); i++) {\n    m[s0[i]]++;\n  }\n  for (int i = 0; i < s1.size(); i++) {\n    m[s1[i]]--;\n  }\n  for (std::map<char, int>::iterator it = m.begin(); it != m.end(); it++) {\n    if (it->second != 0) return false;\n  }\n  return true;",
        "grade-187": {
            "execution": 0
        },
        "175": "std::sort(s0.begin(), s0.end());\n\tstd::sort(s1.begin(), s1.end());\n\t\n\tif(s0 == s1)\n\t\treturn true;\n\t\n\treturn false;",
        "grade-175": {
            "execution": 0
        },
        "bleu-199": 0.15847624447536213,
        "bleu-34": 0.035279729038901364,
        "bleu-9": 0.16674730653487882,
        "bleu-88": 0.29540730527649306,
        "bleu-79": 0.287422766961524,
        "bleu-73": 0.15385182594318964,
        "bleu-44": 0.06106888785991396,
        "bleu-32": 0.3476742064829215,
        "bleu-169": 0.3783552782326134,
        "bleu-28": 0.21480598677123944,
        "bleu-183": 0.04279606493080923,
        "bleu-133": 0.22442409587567533,
        "bleu-12": 0.04248750839991678,
        "bleu-10": 0.4782307839876968,
        "bleu-29": 0.24504405931962123,
        "bleu-71": 0.04248750839991678,
        "bleu-75": 9.83661310359791e-07,
        "bleu-156": 0.44532515180230375,
        "bleu-187": 0.36721365202628675,
        "bleu-175": 0.19150605993883704,
        "codebleu-199": 0.28174951887378097,
        "codebleu-34": 0.3921829210113814,
        "codebleu-9": 0.2866046576683829,
        "codebleu-88": 0.45007640431411045,
        "codebleu-79": 0.4422659263957093,
        "codebleu-73": 0.2705071825820799,
        "codebleu-44": 0.37240343958924454,
        "codebleu-32": 0.5011453081369194,
        "codebleu-169": 0.739030356931705,
        "codebleu-28": 0.7943563684333732,
        "codebleu-183": 0.2982638411646732,
        "codebleu-133": 0.3146746160887677,
        "codebleu-12": 0.2974839299730552,
        "codebleu-10": 0.6575589259337151,
        "codebleu-29": 0.41305575683357304,
        "codebleu-71": 0.2974839299730552,
        "codebleu-75": 0.022832595898817743,
        "codebleu-156": 0.5250515850722868,
        "codebleu-187": 0.607250403613657,
        "codebleu-175": 0.3203825994954675,
        "chrf-199": 0.30303251361611755,
        "chrf-34": 0.20553091236006402,
        "chrf-9": 0.30018033949983586,
        "chrf-88": 0.41622417304436093,
        "chrf-79": 0.31128713327090474,
        "chrf-73": 0.29173537539338107,
        "chrf-44": 0.2173220829247117,
        "chrf-32": 0.40775533095630734,
        "chrf-169": 0.5252300513745064,
        "chrf-28": 0.4928614649282961,
        "chrf-183": 0.19235766947811442,
        "chrf-133": 0.3066868771047324,
        "chrf-12": 0.19608638244579557,
        "chrf-10": 0.5480587404373264,
        "chrf-29": 0.3188227228879338,
        "chrf-71": 0.18678955981277995,
        "chrf-75": 0.07074188725901688,
        "chrf-156": 0.47151970695774303,
        "chrf-187": 0.42092603301243353,
        "chrf-175": 0.3921477120230786,
        "rougel-199": 0.42384105960264895,
        "rougel-34": 0.22406639004149378,
        "rougel-9": 0.38961038961038963,
        "rougel-88": 0.45348837209302323,
        "rougel-79": 0.47804878048780486,
        "rougel-73": 0.3973509933774834,
        "rougel-44": 0.3135135135135135,
        "rougel-32": 0.39175257731958757,
        "rougel-169": 0.6279069767441862,
        "rougel-28": 0.3691588785046729,
        "rougel-183": 0.29545454545454547,
        "rougel-133": 0.35502958579881655,
        "rougel-12": 0.29714285714285715,
        "rougel-10": 0.5067873303167422,
        "rougel-29": 0.4470588235294118,
        "rougel-71": 0.29714285714285715,
        "rougel-75": 0.052631578947368425,
        "rougel-156": 0.5402843601895735,
        "rougel-187": 0.5086206896551725,
        "rougel-175": 0.42580645161290326,
        "meteor-199": 0.271659533894742,
        "meteor-34": 0.25860155217547415,
        "meteor-9": 0.25435720254991745,
        "meteor-88": 0.38148436233997746,
        "meteor-79": 0.42185648246254315,
        "meteor-73": 0.2551210379930103,
        "meteor-44": 0.28373029698705365,
        "meteor-32": 0.34738677861767353,
        "meteor-169": 0.6406588098257656,
        "meteor-28": 0.584612254456419,
        "meteor-183": 0.23417570153061226,
        "meteor-133": 0.2775628257815687,
        "meteor-12": 0.23440461228479662,
        "meteor-10": 0.552947715653172,
        "meteor-29": 0.3349567779960707,
        "meteor-71": 0.23440461228479662,
        "meteor-75": 0.03060753060753061,
        "meteor-156": 0.5008050022649132,
        "meteor-187": 0.4638019652305366,
        "meteor-175": 0.3022016638958793,
        "ruby-199": 0.2735849056603774,
        "ruby-34": 0.12592592592592589,
        "ruby-9": 0.24528301886792447,
        "ruby-88": 0.3113207547169812,
        "ruby-79": 0.26415094339622647,
        "ruby-73": 0.24528301886792447,
        "ruby-44": 0.21698113207547165,
        "ruby-32": 0.23584905660377353,
        "ruby-169": 0.5,
        "ruby-28": 0.2422360248447205,
        "ruby-183": 0.16981132075471694,
        "ruby-133": 0.2075471698113207,
        "ruby-12": 0.16981132075471694,
        "ruby-10": 0.32173913043478264,
        "ruby-29": 0.2924528301886793,
        "ruby-71": 0.16981132075471694,
        "ruby-75": 0.028301886792452824,
        "ruby-156": 0.30188679245283023,
        "ruby-187": 0.2936507936507936,
        "ruby-175": 0.28301886792452835,
        "codebertscore_f1-199": 0.8175012469291687,
        "codebertscore_f3-199": 0.7977668046951294,
        "codebertscore_f1-34": 0.7193495631217957,
        "codebertscore_f3-34": 0.7701470851898193,
        "codebertscore_f1-9": 0.7816514372825623,
        "codebertscore_f3-9": 0.7734499573707581,
        "codebertscore_f1-88": 0.8422019481658936,
        "codebertscore_f3-88": 0.8243553042411804,
        "codebertscore_f1-79": 0.8122011423110962,
        "codebertscore_f3-79": 0.827278196811676,
        "codebertscore_f1-73": 0.7956885695457458,
        "codebertscore_f3-73": 0.7760676741600037,
        "codebertscore_f1-44": 0.7789680361747742,
        "codebertscore_f3-44": 0.7900970578193665,
        "codebertscore_f1-32": 0.7962325811386108,
        "codebertscore_f3-32": 0.7967112064361572,
        "codebertscore_f1-169": 0.8370306491851807,
        "codebertscore_f3-169": 0.853488564491272,
        "codebertscore_f1-28": 0.7707933783531189,
        "codebertscore_f3-28": 0.8345049619674683,
        "codebertscore_f1-183": 0.771508514881134,
        "codebertscore_f3-183": 0.7857933640480042,
        "codebertscore_f1-133": 0.7925626635551453,
        "codebertscore_f3-133": 0.7810931205749512,
        "codebertscore_f1-12": 0.7746843099594116,
        "codebertscore_f3-12": 0.7855556011199951,
        "codebertscore_f1-10": 0.864250659942627,
        "codebertscore_f3-10": 0.8768273591995239,
        "codebertscore_f1-29": 0.8118826150894165,
        "codebertscore_f3-29": 0.790937602519989,
        "codebertscore_f1-71": 0.7786678671836853,
        "codebertscore_f3-71": 0.7893191576004028,
        "codebertscore_f1-75": 0.6349695920944214,
        "codebertscore_f3-75": 0.5840251445770264,
        "codebertscore_f1-156": 0.8664746284484863,
        "codebertscore_f3-156": 0.8670676350593567,
        "codebertscore_f1-187": 0.8630632758140564,
        "codebertscore_f3-187": 0.8888247609138489,
        "codebertscore_f1-175": 0.8304924368858337,
        "codebertscore_f3-175": 0.8085244297981262,
        "codebertscore_s_f1-199": 0.8263444900512695,
        "codebertscore_s_f3-199": 0.8020318746566772,
        "codebertscore_s_f1-34": 0.7223350405693054,
        "codebertscore_s_f3-34": 0.780129611492157,
        "codebertscore_s_f1-9": 0.7808755040168762,
        "codebertscore_s_f3-9": 0.7686179876327515,
        "codebertscore_s_f1-88": 0.8438603281974792,
        "codebertscore_s_f3-88": 0.8238335847854614,
        "codebertscore_s_f1-79": 0.8230958580970764,
        "codebertscore_s_f3-79": 0.8388786315917969,
        "codebertscore_s_f1-73": 0.7916785478591919,
        "codebertscore_s_f3-73": 0.7698671817779541,
        "codebertscore_s_f1-44": 0.7727894186973572,
        "codebertscore_s_f3-44": 0.7924736738204956,
        "codebertscore_s_f1-32": 0.7934386134147644,
        "codebertscore_s_f3-32": 0.7934591174125671,
        "codebertscore_s_f1-169": 0.8657252192497253,
        "codebertscore_s_f3-169": 0.8767066597938538,
        "codebertscore_s_f1-28": 0.8133373260498047,
        "codebertscore_s_f3-28": 0.8692789673805237,
        "codebertscore_s_f1-183": 0.7715206742286682,
        "codebertscore_s_f3-183": 0.7903543710708618,
        "codebertscore_s_f1-133": 0.7893240451812744,
        "codebertscore_s_f3-133": 0.7738842964172363,
        "codebertscore_s_f1-12": 0.7695423364639282,
        "codebertscore_s_f3-12": 0.784729540348053,
        "codebertscore_s_f1-10": 0.8666651844978333,
        "codebertscore_s_f3-10": 0.8795272707939148,
        "codebertscore_s_f1-29": 0.8092827200889587,
        "codebertscore_s_f3-29": 0.786422848701477,
        "codebertscore_s_f1-71": 0.7785472273826599,
        "codebertscore_s_f3-71": 0.7938447594642639,
        "codebertscore_s_f1-75": 0.6256511211395264,
        "codebertscore_s_f3-75": 0.5722994804382324,
        "codebertscore_s_f1-156": 0.877914309501648,
        "codebertscore_s_f3-156": 0.8783859014511108,
        "codebertscore_s_f1-187": 0.8662679195404053,
        "codebertscore_s_f3-187": 0.8965445756912231,
        "codebertscore_s_f1-175": 0.8262553215026855,
        "codebertscore_s_f3-175": 0.7985156774520874,
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-88": 4,
        "raw_gpt35_nsnr-88": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-133": 4,
        "raw_gpt35_nsnr-133": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-75": 0,
        "raw_gpt35_nsnr-75": "0",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-88": 3,
        "raw_gpt35_nswr-88": "3",
        "gpt35_nswr-79": 4,
        "raw_gpt35_nswr-79": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-44": 4,
        "raw_gpt35_nswr-44": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-133": 4,
        "raw_gpt35_nswr-133": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-75": 0,
        "raw_gpt35_nswr-75": "0",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string> words) {\n",
        "snippet": [
            "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n"
        ],
        "simplified": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
        "task_id": "158",
        "163": "std::string winner;\n\tfor (auto word : words) {\n\t\tif (winner.empty()) {\n\t\t\twinner = word;\n\t\t}\n\t\telse {\n\t\t\tif (winner.length() < word.length()) {\n\t\t\t\twinner = word;\n\t\t\t}\n\t\t\telse if (winner.length() == word.length()) {\n\t\t\t\tif (winner < word) {\n\t\t\t\t\twinner = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn winner;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::string uniqueWord;\n    int uniqueSize = 0;\n    int count;\n    for (int i = 0; i < words.size(); i++) {\n        count = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            if (words[i].find(words[i][j]) == words[i].rfind(words[i][j])) {\n                count++;\n            }\n        }\n        if (count > uniqueSize) {\n            uniqueSize = count;\n            uniqueWord = words[i];\n        }\n    }\n    return uniqueWord;",
        "grade-28": {
            "execution": 0
        },
        "6": "auto it = words.begin();\n\tstd::string max_str = \"\";\n\tint count_max = 0;\n\tfor (; it != words.end(); it++) {\n\t\tint count = 0;\n\t\tstd::string str = *it;\n\t\tstd::set<char> unique_char;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (unique_char.find(str[i]) == unique_char.end()) {\n\t\t\t\tunique_char.insert(str[i]);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > count_max) {\n\t\t\tcount_max = count;\n\t\t\tmax_str = str;\n\t\t}\n\t}\n\treturn max_str;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string r = \"\";\n\tint max_unique = 0;\n\tfor (std::string word : words) {\n\t\tint unique = 0;\n\t\tstd::set<char> seen;\n\t\tfor (char c : word) {\n\t\t\tif (seen.find(c) == seen.end()) {\n\t\t\t\tseen.insert(c);\n\t\t\t\tunique++;\n\t\t\t}\n\t\t}\n\t\tif (unique > max_unique) {\n\t\t\tmax_unique = unique;\n\t\t\tr = word;\n\t\t}\n\t}\n\treturn r;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<int> unique_chars;\n    int count = 0;\n    std::string max_string;\n    for (int i = 0; i < words.size(); i++) {\n        count = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            for (int k = 0; k < words[i].size(); k++) {\n                if (words[i][j] == words[i][k]) {\n                    count++;\n                }\n            }\n        }\n        unique_chars.push_back(count/words[i].size());\n    }\n    int max = unique_chars[0];\n    for (int i = 0; i < unique_chars.size(); i++) {\n        if (unique_chars[i] > max) {\n            max = unique_chars[i];\n        }\n    }\n    for (int i = 0; i < unique_chars.size(); i++) {\n        if (unique_chars[i] == max) {\n            max_string = words[i];\n            break;\n        }\n    }\n    return max_string;",
        "grade-70": {
            "execution": 0
        },
        "62": "int i, j, flag = 0, unique_chars = 0, max_unique_chars = 0;\n    std::vector<std::string>::iterator it;\n    std::string max_word;\n    std::vector<std::string>::iterator it1;\n    for (it = words.begin(); it != words.end(); it++) {\n        flag = 0;\n        for (it1 = it + 1; it1 != words.end(); it1++) {\n            if (*it == *it1) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 1) {\n            continue;\n        }\n        unique_chars = 0;\n        for (i = 0; i < (*it).length(); i++) {\n            flag = 0;\n            for (j = 0; j < (*it).length(); j++) {\n                if (i == j) {\n                    continue;\n                }\n                if ((*it)[i] == (*it)[j]) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0) {\n                unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars = unique_chars;\n            max_word = *it;\n        }\n    }\n    return max_word;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (words.size() == 0) return \"\";\n    std::string ans;\n    int max_unique = 0;\n    int max_length = 0;\n    for (int i = 0; i < words.size(); i++) {\n        int length = words[i].length();\n        if (length > max_length) {\n            max_length = length;\n            ans = words[i];\n        }\n        std::unordered_set<char> count_set;\n        for (char j : words[i]) {\n            count_set.insert(j);\n        }\n        if (count_set.size() > max_unique) {\n            max_unique = count_set.size();\n            ans = words[i];\n        }\n    }\n    return ans;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string ans = \"\";\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        std::set<char> s;\n        int cnt = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            s.insert(words[i][j]);\n        }\n        cnt = s.size();\n        if (count < cnt) {\n            count = cnt;\n            ans = words[i];\n        }\n    }\n    return ans;",
        "grade-35": {
            "execution": 0
        },
        "188": "int  max_unique=0;\n    std::string result;\n    for(auto e:words){\n        int unique_num=0;\n        std::vector<char> unique_chars;\n        for(auto ee:e){\n            bool found=false;\n            for(auto eee:unique_chars){\n                if(ee==eee){\n                    found=true;\n                    break;\n                }\n            }\n            if(!found){\n                unique_chars.push_back(ee);\n                unique_num++;\n            }\n        }\n        if(unique_num>max_unique){\n            max_unique=unique_num;\n            result=e;\n        }\n    }\n    return result;",
        "grade-188": {
            "execution": 0
        },
        "26": "int max_count = 0;\n\tstd::string max_word;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tstd::set<char> chars;\n\t\tfor (int j = 0; j < words[i].size(); j++) {\n\t\t\tchars.insert(words[i][j]);\n\t\t}\n\t\tif (chars.size() > max_count) {\n\t\t\tmax_count = chars.size();\n\t\t\tmax_word = words[i];\n\t\t}\n\t}\n\treturn max_word;",
        "grade-26": {
            "execution": 0
        },
        "173": "int max = 0;\n  std::string m_word;\n  for (auto s : words) {\n    int len = std::unique(s.begin(), s.end()) - s.begin();\n    if (len > max) {\n      max = len;\n      m_word = s;\n    }\n  }\n  return m_word;",
        "grade-173": {
            "execution": 0
        },
        "139": "",
        "grade-139": {
            "execution": 0
        },
        "22": "std::string max = \"\";\n    int max_len = 0;\n    int len = 0;\n    std::string ele;\n    std::set<char> chars;\n    std::set<char>::iterator it;\n    for (int i = 0; i < words.size(); i++) {\n        chars.clear();\n        ele = words[i];\n        for (int j = 0; j < ele.length(); j++) {\n            chars.insert(ele[j]);\n        }\n        len = chars.size();\n        if (len > max_len) {\n            max_len = len;\n            max = ele;\n        } else if (len == max_len) {\n            if (ele < max) {\n                max = ele;\n            }\n        }\n    }\n    return max;",
        "grade-22": {
            "execution": 1
        },
        "151": "int i, j, max_chars = 0, max_chars_index = 0;\n    std::string str;\n    for(i = 0; i < words.size(); i++) {\n        str = words[i];\n        std::sort(str.begin(), str.end());\n        str.erase(std::unique(str.begin(), str.end()), str.end());\n        if(str.size() > max_chars) {\n            max_chars = str.size();\n            max_chars_index = i;\n        }\n    }\n    return words[max_chars_index];",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<int> counts;\n    int max_count = 0;\n    int max_index = 0;\n    for (auto &w : words) {\n        std::vector<bool> unique(256, false);\n        int count = 0;\n        for (auto &c : w) {\n            int code = (int)c;\n            if (!unique[code]) {\n                unique[code] = true;\n                count++;\n            }\n        }\n        counts.push_back(count);\n        if (count > max_count) {\n            max_count = count;\n            max_index = words.size() - 1;\n        }\n    }\n    for (int i = 0; i < words.size(); i++) {\n        if (counts[i] == max_count) {\n            if (words[i] < words[max_index]) {\n                max_index = i;\n            }\n        }\n    }\n    return words[max_index];",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string ans;\n    std::map<std::string, int> map;\n    for (int i = 0; i < words.size(); i++) {\n        int count = 0;\n        std::string t = words[i];\n        std::sort(t.begin(), t.end());\n        auto it = std::unique(t.begin(), t.end());\n        count = std::distance(t.begin(), it);\n        map[words[i]] = count;\n    }\n    int max_count = 0;\n    for (auto i = map.begin(); i != map.end(); i++) {\n        if (i->second > max_count) {\n            max_count = i->second;\n            ans = i->first;\n        }\n    }\n    return ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::map<std::string, int> m;\n  int max = 0;\n  std::string word = \"\";\n  for (auto w : words) {\n    m[w] = std::set<char>(w.begin(), w.end()).size();\n    if (m[w] > max) {\n      max = m[w];\n      word = w;\n    }\n  }\n  return word;",
        "grade-7": {
            "execution": 0
        },
        "23": "//\n    // Write your code here\n    //\n    std::string max_str = \"\";\n    int max_count = 0;\n    int sz = words.size();\n    for(int i = 0; i < sz; i++) {\n        int cnt = 0;\n        std::set<char> mp;\n        for(int j = 0; j < words[i].size(); j++) {\n            mp.insert(words[i][j]);\n        }\n        cnt = mp.size();\n        if(cnt > max_count) {\n            max_count = cnt;\n            max_str = words[i];\n        }\n        else if(cnt == max_count) {\n            if(words[i] < max_str) {\n                max_str = words[i];\n            }\n        }\n    }\n    return max_str;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string result = \"\";\n  int result_chars = 0;\n  for (const auto &word : words) {\n    std::set<char> unique_chars;\n    for (const auto &c : word) {\n      unique_chars.insert(c);\n    }\n    if (unique_chars.size() > result_chars) {\n      result = word;\n      result_chars = unique_chars.size();\n    }\n  }\n  return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (words.size() == 0) return \"\";\n    std::string max_str = words[0];\n    for (std::string s : words) {\n        if (max_str.size() < s.size()) max_str = s;\n    }\n    for (int i = 0; i < max_str.size(); i++) {\n        for (int j = i + 1; j < max_str.size(); j++) {\n            if (max_str[i] > max_str[j]) std::swap(max_str[i], max_str[j]);\n        }\n    }\n    return max_str;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.10146570555795861,
        "bleu-28": 0.4636039645266974,
        "bleu-6": 0.3141937467254227,
        "bleu-189": 0.12862654231178433,
        "bleu-70": 0.32567690933986243,
        "bleu-62": 0.1964674117883986,
        "bleu-57": 0.37191195667749694,
        "bleu-35": 0.39794838517870823,
        "bleu-188": 0.055033628104289065,
        "bleu-26": 0.3662428777455677,
        "bleu-173": 0.07275861248749065,
        "bleu-139": 0.0,
        "bleu-22": 0.39923008682952166,
        "bleu-151": 0.28571700077754786,
        "bleu-108": 0.2525569720201429,
        "bleu-8": 0.29939898543531746,
        "bleu-7": 0.14271364919408078,
        "bleu-23": 0.41957771137083155,
        "bleu-55": 0.09659277067672295,
        "bleu-59": 0.3162093886761445,
        "codebleu-163": 0.31896126399941477,
        "codebleu-28": 0.5808485794929094,
        "codebleu-6": 0.5806992697814672,
        "codebleu-189": 0.35132745761167544,
        "codebleu-70": 0.6820892504137298,
        "codebleu-62": 0.5897925347756454,
        "codebleu-57": 0.6233999085436358,
        "codebleu-35": 0.5313353761852356,
        "codebleu-188": 0.34281915729118295,
        "codebleu-26": 0.5129780669162264,
        "codebleu-173": 0.24999817887467246,
        "codebleu-139": 0.0,
        "codebleu-22": 0.5957455619790265,
        "codebleu-151": 0.5469549850802605,
        "codebleu-108": 0.5927127159255301,
        "codebleu-8": 0.6335649614051658,
        "codebleu-7": 0.34176251119164736,
        "codebleu-23": 0.6267616202802854,
        "codebleu-55": 0.28863624492086926,
        "codebleu-59": 0.5818679523394008,
        "chrf-163": 0.25123806527799547,
        "chrf-28": 0.4720663328938802,
        "chrf-6": 0.39426998161257937,
        "chrf-189": 0.3300608757559466,
        "chrf-70": 0.5008270952853736,
        "chrf-62": 0.41222307743408654,
        "chrf-57": 0.4435479853025816,
        "chrf-35": 0.36261359779426416,
        "chrf-188": 0.28504136533984886,
        "chrf-26": 0.39819500534365965,
        "chrf-173": 0.2205408472036794,
        "chrf-139": 0.0,
        "chrf-22": 0.40158673987932,
        "chrf-151": 0.32935222849006857,
        "chrf-108": 0.3684432312101166,
        "chrf-8": 0.36785476118686655,
        "chrf-7": 0.2421901222494927,
        "chrf-23": 0.42678855326814236,
        "chrf-55": 0.242830613511767,
        "chrf-59": 0.31902720829261155,
        "rougel-163": 0.35294117647058826,
        "rougel-28": 0.6245614035087719,
        "rougel-6": 0.48630136986301375,
        "rougel-189": 0.4079999999999999,
        "rougel-70": 0.5171503957783641,
        "rougel-62": 0.35523114355231145,
        "rougel-57": 0.48979591836734687,
        "rougel-35": 0.6096654275092938,
        "rougel-188": 0.3206106870229008,
        "rougel-26": 0.5823754789272031,
        "rougel-173": 0.3744292237442922,
        "rougel-139": 0,
        "rougel-22": 0.5047923322683706,
        "rougel-151": 0.4855072463768116,
        "rougel-108": 0.3680981595092025,
        "rougel-8": 0.467065868263473,
        "rougel-7": 0.4081632653061225,
        "rougel-23": 0.5705128205128205,
        "rougel-55": 0.3534482758620689,
        "rougel-59": 0.4507042253521127,
        "meteor-163": 0.25024536645812095,
        "meteor-28": 0.5419486106790851,
        "meteor-6": 0.38405285336997663,
        "meteor-189": 0.2402214318402608,
        "meteor-70": 0.4308240521121796,
        "meteor-62": 0.39836733324104495,
        "meteor-57": 0.42202810466152074,
        "meteor-35": 0.3772499535419844,
        "meteor-188": 0.18506056527590847,
        "meteor-26": 0.3875489589775304,
        "meteor-173": 0.18507738507738505,
        "meteor-139": 0.0,
        "meteor-22": 0.38404539868430565,
        "meteor-151": 0.3710107015457788,
        "meteor-108": 0.38700585929779646,
        "meteor-8": 0.427659855470976,
        "meteor-7": 0.2580763811805408,
        "meteor-23": 0.4393512559108618,
        "meteor-55": 0.21565902974345708,
        "meteor-59": 0.38438703407355446,
        "ruby-163": 0.24836601307189543,
        "ruby-28": 0.4836601307189542,
        "ruby-6": 0.24183006535947715,
        "ruby-189": 0.28104575163398693,
        "ruby-70": 0.3893805309734514,
        "ruby-62": 0.22868217054263562,
        "ruby-57": 0.30718954248366015,
        "ruby-35": 0.43790849673202614,
        "ruby-188": 0.21568627450980393,
        "ruby-26": 0.4509803921568627,
        "ruby-173": 0.261437908496732,
        "ruby-139": 0.0,
        "ruby-22": 0.275,
        "ruby-151": 0.30065359477124187,
        "ruby-108": 0.22543352601156075,
        "ruby-8": 0.3370165745856354,
        "ruby-7": 0.2941176470588235,
        "ruby-23": 0.3459119496855346,
        "ruby-55": 0.24183006535947715,
        "ruby-59": 0.2287581699346405,
        "codebertscore_f1-163": 0.7483728528022766,
        "codebertscore_f3-163": 0.7233962416648865,
        "codebertscore_f1-28": 0.8636767268180847,
        "codebertscore_f3-28": 0.8479951620101929,
        "codebertscore_f1-6": 0.8218895792961121,
        "codebertscore_f3-6": 0.8410897254943848,
        "codebertscore_f1-189": 0.7894004583358765,
        "codebertscore_f3-189": 0.7807462215423584,
        "codebertscore_f1-70": 0.8164429664611816,
        "codebertscore_f3-70": 0.8297300338745117,
        "codebertscore_f1-62": 0.7442226409912109,
        "codebertscore_f3-62": 0.7744110822677612,
        "codebertscore_f1-57": 0.8181832432746887,
        "codebertscore_f3-57": 0.8254567384719849,
        "codebertscore_f1-35": 0.841876208782196,
        "codebertscore_f3-35": 0.8344555497169495,
        "codebertscore_f1-188": 0.7303945422172546,
        "codebertscore_f3-188": 0.7349166870117188,
        "codebertscore_f1-26": 0.8401015400886536,
        "codebertscore_f3-26": 0.8327292203903198,
        "codebertscore_f1-173": 0.7546560764312744,
        "codebertscore_f3-173": 0.7466738224029541,
        "codebertscore_f1-139": 0.0,
        "codebertscore_f3-139": 0.0,
        "codebertscore_f1-22": 0.8203662037849426,
        "codebertscore_f3-22": 0.8317840099334717,
        "codebertscore_f1-151": 0.8062052130699158,
        "codebertscore_f3-151": 0.816596508026123,
        "codebertscore_f1-108": 0.7629004716873169,
        "codebertscore_f3-108": 0.7733484506607056,
        "codebertscore_f1-8": 0.8041713833808899,
        "codebertscore_f3-8": 0.8201038241386414,
        "codebertscore_f1-7": 0.7624157071113586,
        "codebertscore_f3-7": 0.7591663599014282,
        "codebertscore_f1-23": 0.8068989515304565,
        "codebertscore_f3-23": 0.8243815898895264,
        "codebertscore_f1-55": 0.7447792887687683,
        "codebertscore_f3-55": 0.7515962719917297,
        "codebertscore_f1-59": 0.8063631653785706,
        "codebertscore_f3-59": 0.8066442012786865,
        "codebertscore_s_f1-163": 0.8050799369812012,
        "codebertscore_s_f3-163": 0.7716856002807617,
        "codebertscore_s_f1-28": 0.88614821434021,
        "codebertscore_s_f3-28": 0.8730114698410034,
        "codebertscore_s_f1-6": 0.8550764918327332,
        "codebertscore_s_f3-6": 0.8657882213592529,
        "codebertscore_s_f1-189": 0.835270345211029,
        "codebertscore_s_f3-189": 0.8173044323921204,
        "codebertscore_s_f1-70": 0.8545675277709961,
        "codebertscore_s_f3-70": 0.8640190362930298,
        "codebertscore_s_f1-62": 0.8169477581977844,
        "codebertscore_s_f3-62": 0.8489943146705627,
        "codebertscore_s_f1-57": 0.852678120136261,
        "codebertscore_s_f3-57": 0.8588010668754578,
        "codebertscore_s_f1-35": 0.8724989295005798,
        "codebertscore_s_f3-35": 0.8624383807182312,
        "codebertscore_s_f1-188": 0.7815531492233276,
        "codebertscore_s_f3-188": 0.7813766598701477,
        "codebertscore_s_f1-26": 0.8734315037727356,
        "codebertscore_s_f3-26": 0.8611481785774231,
        "codebertscore_s_f1-173": 0.8166031241416931,
        "codebertscore_s_f3-173": 0.7942234873771667,
        "codebertscore_s_f1-139": 0,
        "codebertscore_s_f3-139": 0,
        "codebertscore_s_f1-22": 0.8546555638313293,
        "codebertscore_s_f3-22": 0.860569179058075,
        "codebertscore_s_f1-151": 0.8427754640579224,
        "codebertscore_s_f3-151": 0.8496790528297424,
        "codebertscore_s_f1-108": 0.8125056624412537,
        "codebertscore_s_f3-108": 0.8238332867622375,
        "codebertscore_s_f1-8": 0.8419215083122253,
        "codebertscore_s_f3-8": 0.8501202464103699,
        "codebertscore_s_f1-7": 0.8234584331512451,
        "codebertscore_s_f3-7": 0.8022080063819885,
        "codebertscore_s_f1-23": 0.8405535221099854,
        "codebertscore_s_f3-23": 0.8569912910461426,
        "codebertscore_s_f1-55": 0.797943115234375,
        "codebertscore_s_f3-55": 0.7974888682365417,
        "codebertscore_s_f1-59": 0.8428038954734802,
        "codebertscore_s_f3-59": 0.8391903638839722,
        "gpt35_nsnr-163": 2,
        "raw_gpt35_nsnr-163": "2",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 2,
        "raw_gpt35_nsnr-70": "2",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-139": 0,
        "raw_gpt35_nsnr-139": "3 - The code snippet correctly finds the word with the maximum number of unique characters and returns the one that comes first in lexicographical order. However, there is a typo in the third example in the problem statement where the expected output has an extra quotation mark.",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 2,
        "raw_gpt35_nsnr-59": "2",
        "gpt35_nswr-163": 2,
        "raw_gpt35_nswr-163": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nstd::string file_name_check(std::string file_name) {\n",
        "snippet": [
            "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n"
        ],
        "simplified": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
        "task_id": "141",
        "164": "// 1. Check the file name if it has not more than 3 digits\n    int counter = 0;\n    for (auto &c : file_name) {\n        if (c >= '0' && c <= '9') {\n            counter++;\n        }\n    }\n    if (counter > 3) {\n        return \"No\";\n    }\n    // 2. Check file name if it contains exactly one dot '.'\n    int dot_counter = 0;\n    for (auto &c : file_name) {\n        if (c == '.') {\n            dot_counter++;\n        }\n    }\n    if (dot_counter != 1) {\n        return \"No\";\n    }\n    // 3. Check the file name if it starts with a letter from a latin alphapet\n    if (file_name[0] < 'a' || file_name[0] > 'z') {\n        if (file_name[0] < 'A' || file_name[0] > 'Z') {\n            return \"No\";\n        }\n    }\n    // 4. Check the file name if the substring after the dot is one of these ['txt', 'exe', 'dll']\n    std::string file_type = file_name.substr(file_name.length() - 3, 3);\n    if (file_type != \"txt\" && file_type != \"exe\" && file_type != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-164": {
            "execution": 0
        },
        "28": "std::regex r(\"^[a-zA-Z]+(0*[1-9][0-9]{0,2})*(\\\\.txt|\\\\.exe|\\\\.dll)$\");\n    return regex_match(file_name, r) ? \"Yes\" : \"No\";",
        "grade-28": {
            "execution": 0
        },
        "6": "std::regex pattern (\"([a-zA-Z][a-zA-Z0-9]{0,3})\\.(txt|exe|dll)\");\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";",
        "grade-6": {
            "execution": 0
        },
        "190": "int i, j, k, cnt = 0, len = file_name.length();\n\tstd::string ans;\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif (cnt > 3) {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}\n\tint cnt_dot = 0;\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tcnt_dot++;\n\t\t}\n\t}\n\tif (cnt_dot != 1) {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == 0) {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}\n\tfor (j = 0; j < i; j++) {\n\t\tif ((file_name[j] >= 'a' && file_name[j] <= 'z') || (file_name[j] >= 'A' && file_name[j] <= 'Z')) {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tans = \"No\";\n\t\t\treturn ans;\n\t\t}\n\t}\n\tstd::string s;\n\tfor (k = i + 1; k < len; k++) {\n\t\ts.push_back(file_name[k]);\n\t}\n\tif (s == \"txt\" || s == \"exe\" || s == \"dll\") {\n\t\tans = \"Yes\";\n\t\treturn ans;\n\t}\n\telse {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}",
        "grade-190": {
            "execution": 0
        },
        "70": "// your code here\n    bool dot = false;\n    std::string a, b;\n    for (auto i = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') {\n            dot = true;\n            continue;\n        }\n        if (!dot) {\n            if (!isalpha(file_name[i])) return \"No\";\n            a += file_name[i];\n        } else {\n            b += file_name[i];\n        }\n    }\n    if (a.size() == 0 || (b != \"txt\" && b != \"exe\" && b != \"dll\")) return \"No\";\n    for (auto i = 0; i < a.size(); i++) {\n        if (isdigit(a[i])) return \"No\";\n    }\n    return \"Yes\";",
        "grade-70": {
            "execution": 0
        },
        "62": "std::stringstream ss(file_name);\n    std::string beforeDot, afterDot;\n    std::vector<std::string> v = {\"txt\", \"exe\", \"dll\"};\n    bool found = false;\n    int number_of_digits = 0;\n    while(std::getline(ss, beforeDot, '.')){\n        std::getline(ss, afterDot, '.');\n    }\n    for(int i = 0; i < beforeDot.length(); i++){\n        if(beforeDot[i] >= '0' && beforeDot[i] <= '9'){\n            number_of_digits++;\n        }\n    }\n    for(int i = 0; i < v.size(); i++){\n        if(v[i] == afterDot){\n            found = true;\n        }\n    }\n    if(number_of_digits <= 3 && found && afterDot != \"\" && beforeDot != \"\" && \n    (beforeDot[0] >= 'a' && beforeDot[0] <= 'z') || (beforeDot[0] >= 'A' && beforeDot[0] <= 'Z')){\n        return \"Yes\";\n    }\n    return \"No\";",
        "grade-62": {
            "execution": 0
        },
        "57": "int l = file_name.length();\n\tif (l < 5) {\n\t\treturn \"No\";\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string s;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] != '.') {\n\t\t\ts += file_name[i];\n\t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\t}\n\tint count1 = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= '0' && s[i] <= '9') {\n\t\t\tcount1++;\n\t\t}\n\t}\n\tif (count1 > 3) {\n\t\treturn \"No\";\n\t}\n\tstd::string s1;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] < '0' || s[i] > '9') {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t}\n\tstd::string s2;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tfor (int j = i + 1; j < l; j++) {\n\t\t\t\ts2 += file_name[j];\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (s2 == \"txt\")",
        "grade-57": {
            "execution": 0
        },
        "35": "std::regex valid_file_name(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n  return std::regex_match(file_name, valid_file_name) ? \"Yes\" : \"No\";",
        "grade-35": {
            "execution": 0
        },
        "189": "// Your code goes here\n    int count = 0;\n    std::string::iterator it = file_name.begin();\n    for(; it != file_name.end(); it++) {\n        if(isdigit(*it)) {\n            count++;\n        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n    else {\n        count = 0;\n        for(it = file_name.begin(); it != file_name.end(); it++) {\n            if(*it == '.') {\n                count++;\n            }\n        }\n        if(count != 1) {\n            return \"No\";\n        }\n        else {\n            std::string temp1 = file_name.substr(0, file_name.find(\".\"));\n            if(temp1.empty()) {\n                return \"No\";\n            }\n            else {\n                if(isalpha(temp1[0])) {\n                    std::string temp2 = file_name.substr(file_name.find(\".\") + 1);\n                    if(temp2 == \"txt\" || temp2 == \"exe\" || temp2 == \"dll\") {\n                        return \"Yes\";\n                    }\n                    else {\n                        return \"No\";\n                    }\n                }\n                else {\n                    return \"No\";\n                }\n            }\n        }\n    }",
        "grade-189": {
            "execution": 1
        },
        "26": "std::string ans;\n    int n = file_name.size();\n    if(n<4) return \"No\";\n    int digits = 0;\n    for(int i=0;i<n;i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n            digits++;\n        }\n    }\n    if(digits>3) return \"No\";\n    int dot = 0;\n    int last_dot;\n    for(int i=0;i<n;i++){\n        if(file_name[i]=='.'){\n            dot++;\n            last_dot = i;\n        }\n    }\n    if(dot!=1) return \"No\";\n    for(int i=0;i<last_dot;i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n            return \"No\";\n        }\n    }\n    if(file_name[last_dot+1]=='t' && file_name[last_dot+2]=='x' && file_name[last_dot+3]=='t'){\n        return \"Yes\";\n    }\n    if(file_name[last_dot+1]=='e' && file_name[last_dot+2]=='x' && file_name[last_dot+3]=='e'){\n        return \"Yes\";\n    }\n    if(file_name[last_dot+1]=='d' && file_name[last_dot+2]=='l' && file_name[last_dot+3]=='l'){\n        return \"Yes\";\n    }\n    return \"No\";",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<std::string> valid_extensions = {\"txt\", \"exe\", \"dll\"};\n    std::string extension;\n    size_t dot_index;\n    std::regex latin_letter_regex(\"[a-zA-Z]\");\n    std::regex digit_regex(\"[0-9]\");\n    std::regex valid_extension_regex(\"txt|exe|dll\");\n    std::smatch match;\n    dot_index = file_name.find('.');\n    if (dot_index == std::string::npos) {\n        return \"No\";\n    }\n    if (!std::regex_search(file_name.substr(0, dot_index), match, latin_letter_regex)) {\n        return \"No\";\n    }\n    if (std::regex_search(file_name.substr(0, dot_index), match, digit_regex)) {\n        if (match.size() > 3) {\n            return \"No\";\n        }\n    }\n    extension = file_name.substr(dot_index + 1);\n    if (!std::regex_search(extension, match, valid_extension_regex)) {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-174": {
            "execution": 0
        },
        "139": "std::regex patt(R\"(^[a-zA-Z]+\\d{0,3}\\.txt$|^[a-zA-Z]+\\d{0,3}\\.exe$|^[a-zA-Z]+\\d{0,3}\\.dll$)\");\n    if(std::regex_match(file_name, patt))\n        return \"Yes\";\n    return \"No\";",
        "grade-139": {
            "execution": 0
        },
        "22": "// Your code here\n    int num = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n            num++;\n        if(file_name[i] == '.')\n            dot++;\n    }\n    if(dot != 1 || num > 3 || !((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0] >= 'A' && file_name[0] <= 'Z')))\n        return \"No\";\n    std::string sub = file_name.substr(file_name.find(\".\") + 1);\n    if(sub == \"txt\" || sub == \"exe\" || sub == \"dll\")\n        return \"Yes\";\n    return \"No\";",
        "grade-22": {
            "execution": 1
        },
        "151": "int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') dot_count++;\n        if (file_name[i] == '.' && i == 0) return \"No\";\n        if (file_name[i] >= '0' && file_name[i] <= '9') digit_count++;\n        if (digit_count > 3) return \"No\";\n    }\n    if (dot_count != 1) return \"No\";\n    std::string extention = file_name.substr(file_name.find('.')+1);\n    if (extention != \"txt\" && extention != \"exe\" && extention != \"dll\") return \"No\";\n    return \"Yes\";",
        "grade-151": {
            "execution": 0
        },
        "108": "int dot_pos = -1;\n  int digit_cnt = 0;\n  for (int i = 0; i < file_name.size(); i++) {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      digit_cnt++;\n    }\n    if (file_name[i] == '.') {\n      dot_pos = i;\n    }\n  }\n  if (digit_cnt > 3) {\n    return \"No\";\n  }\n  if (dot_pos == -1) {\n    return \"No\";\n  }\n  if (dot_pos == 0) {\n    return \"No\";\n  }\n  if (file_name[dot_pos+1] == 't' &&\n      file_name[dot_pos+2] == 'x' &&\n      file_name[dot_pos+3] == 't') {\n    return \"Yes\";\n  }\n  if (file_name[dot_pos+1] == 'e' &&\n      file_name[dot_pos+2] == 'x' &&\n      file_name[dot_pos+3] == 'e') {\n    return \"Yes\";\n  }\n  if (file_name[dot_pos+1] == 'd' &&\n      file_name[dot_pos+2] == 'l' &&\n      file_name[dot_pos+3] == 'l') {\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-108": {
            "execution": 0
        },
        "8": "int dot_pos = file_name.find('.');\n    int counter = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (isdigit(file_name[i]))\n            counter++;\n    }\n    if (counter > 3) {\n        return \"No\";\n    }\n    if (file_name.substr(dot_pos+1, dot_pos+3) != \"txt\" &&\n        file_name.substr(dot_pos+1, dot_pos+3) != \"exe\" &&\n        file_name.substr(dot_pos+1, dot_pos+3) != \"dll\") {\n        return \"No\";\n    }\n    if (isdigit(file_name[0])) {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n    int  num_of_dots = std::count(file_name.begin(), file_name.end(), '.');\n    if(num_of_dots > 1)\n        return \"No\";\n    std::size_t found = file_name.find_last_of(\".\");\n    std::string name = file_name.substr(0,found);\n    std::string extension = file_name.substr(found+1);\n    if(name.empty())\n        return \"No\";\n    if(std::count_if(name.begin(), name.end(), [](char c){return isdigit(c);}) > 3)\n        return \"No\";\n    if(!isalpha(name[0]))\n        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n    return \"Yes\";",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string before_dot = \"\";\n  \tstd::string after_dot = \"\";\n  \tint count = 0;\n  \tfor(int i = 0; i < file_name.length(); i++) {\n     \tchar c = file_name[i];\n     \tif(c == '.') {\n      \t\tbefore_dot = file_name.substr(0, i);\n      \t\tafter_dot = file_name.substr(i+1, file_name.length()-i-1);\n      \t\tcount++;\n      \t}\n    }\n  \tif(count > 1) {\n    \treturn \"No\";\n    }\n  \tif(!isalpha(before_dot[0])) {\n     \treturn \"No\";\n    }\n  \tif(after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n     \treturn \"No\";\n    }\n  \tfor(int i = 0; i < before_dot.length(); i++) {\n     \tchar c = before_dot[i];\n     \tif(isdigit(c)) {\n      \t\treturn \"No\";\n        }\n    }\n  \treturn \"Yes\";",
        "grade-23": {
            "execution": 0
        },
        "55": "int dot_cnt = 0;\n\tint digit_cnt = 0;\n\tint latin_cnt = 0;\n\tfor (int i = 0; i < file_name.size(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_cnt++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_cnt++;\n\t\t}\n\t\tif ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n\t\t\tlatin_cnt++;\n\t\t}\n\t}\n\tif (dot_cnt == 1 && digit_cnt <= 3 && latin_cnt > 0) {\n\t\tstd::string temp = file_name.substr(file_name.find(\".\") + 1);\n\t\tif (temp == \"txt\" || temp == \"exe\" || temp == \"dll\") {\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";",
        "grade-55": {
            "execution": 0
        },
        "59": "// my code\n    int dot_pos = -1;\n    int num_count = 0;\n    int dot_count = 0;\n    if (file_name.length() == 0) {\n        return \"No\";\n    }\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n            dot_pos = i;\n            dot_count++;\n        }\n        if (isdigit(file_name[i])) {\n            num_count++;\n        }\n    }\n    if (dot_count != 1) {\n        return \"No\";\n    }\n    if (num_count > 3) {\n        return \"No\";\n    }\n    if (dot_pos == 0) {\n        return \"No\";\n    }\n    if (!isalpha(file_name[0])) {\n        return \"No\";\n    }\n    std::string file_type = file_name.substr(dot_pos+1, file_name.length()-dot_pos-1);\n    if (file_type != \"txt\" && file_type != \"exe\" && file_type != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.22181760152275828,
        "bleu-28": 0.0185037575527524,
        "bleu-6": 0.012528671720051777,
        "bleu-190": 0.20113228809211595,
        "bleu-70": 0.3647929408866136,
        "bleu-62": 0.20469342380149363,
        "bleu-57": 0.22265338067884308,
        "bleu-35": 0.011957059464892809,
        "bleu-189": 0.2163793230086652,
        "bleu-26": 0.2353179296268534,
        "bleu-174": 0.1862284789584231,
        "bleu-139": 0.06530619089022205,
        "bleu-22": 0.41061958182645353,
        "bleu-151": 0.49782875897421575,
        "bleu-108": 0.2739944318478378,
        "bleu-8": 0.33352191745759446,
        "bleu-7": 0.26979380625308913,
        "bleu-23": 0.36428655534507365,
        "bleu-55": 0.3328728609697874,
        "bleu-59": 0.41181679530461596,
        "codebleu-164": 0.5530933919686849,
        "codebleu-28": 0.05939470023065048,
        "codebleu-6": 0.06481017062677841,
        "codebleu-190": 0.5744097382630438,
        "codebleu-70": 0.5364437575975748,
        "codebleu-62": 0.527495849167512,
        "codebleu-57": 0.6043495982541884,
        "codebleu-35": 0.06211111529614413,
        "codebleu-189": 0.5290849385883568,
        "codebleu-26": 0.581021549849157,
        "codebleu-174": 0.46452421649410097,
        "codebleu-139": 0.08387147678266875,
        "codebleu-22": 0.5406377326782081,
        "codebleu-151": 0.5356194946012178,
        "codebleu-108": 0.5491881855822807,
        "codebleu-8": 0.486766489736817,
        "codebleu-7": 0.5060449602385405,
        "codebleu-23": 0.5895751561891314,
        "codebleu-55": 0.5333319205670611,
        "codebleu-59": 0.6048972823948275,
        "chrf-164": 0.4374617868009237,
        "chrf-28": 0.09374165424734399,
        "chrf-6": 0.09245984491595563,
        "chrf-190": 0.43937484961379913,
        "chrf-70": 0.4153887363721012,
        "chrf-62": 0.30524748392958007,
        "chrf-57": 0.4546977705554528,
        "chrf-35": 0.12686014643056404,
        "chrf-189": 0.4339297166194058,
        "chrf-26": 0.470188249358797,
        "chrf-174": 0.33442979094765674,
        "chrf-139": 0.13405203345891872,
        "chrf-22": 0.5235125361231545,
        "chrf-151": 0.5450209963699425,
        "chrf-108": 0.44520423396500625,
        "chrf-8": 0.4491348169465806,
        "chrf-7": 0.41781012935104267,
        "chrf-23": 0.48013788793734735,
        "chrf-55": 0.45592092886061747,
        "chrf-59": 0.5504996972558197,
        "rougel-164": 0.32489451476793246,
        "rougel-28": 0.21374045801526717,
        "rougel-6": 0.19047619047619047,
        "rougel-190": 0.3626373626373627,
        "rougel-70": 0.46648793565683644,
        "rougel-62": 0.35729847494553374,
        "rougel-57": 0.37088388214904683,
        "rougel-35": 0.1832669322709163,
        "rougel-189": 0.3803131991051454,
        "rougel-26": 0.4007561436672967,
        "rougel-174": 0.32211538461538464,
        "rougel-139": 0.20069204152249134,
        "rougel-22": 0.38676844783715014,
        "rougel-151": 0.4153005464480874,
        "rougel-108": 0.3640350877192982,
        "rougel-8": 0.4105571847507331,
        "rougel-7": 0.375,
        "rougel-23": 0.4862155388471178,
        "rougel-55": 0.3743842364532019,
        "rougel-59": 0.41277641277641275,
        "meteor-164": 0.4381245905585362,
        "meteor-28": 0.14197420794698937,
        "meteor-6": 0.12259243833587859,
        "meteor-190": 0.44127907040359504,
        "meteor-70": 0.4209025785380465,
        "meteor-62": 0.3921228800155049,
        "meteor-57": 0.41017189109761065,
        "meteor-35": 0.1168650356501643,
        "meteor-189": 0.41170639922501967,
        "meteor-26": 0.44255233580122516,
        "meteor-174": 0.35621206405815986,
        "meteor-139": 0.17724528039977788,
        "meteor-22": 0.41791907193378497,
        "meteor-151": 0.5331030667392299,
        "meteor-108": 0.41456594699766575,
        "meteor-8": 0.41246944131065055,
        "meteor-7": 0.4065791452868159,
        "meteor-23": 0.4579891254870709,
        "meteor-55": 0.44144622668179023,
        "meteor-59": 0.4779696847972501,
        "ruby-164": 0.19649122807017538,
        "ruby-28": 0.13227513227513232,
        "ruby-6": 0.1164021164021164,
        "ruby-190": 0.24649859943977592,
        "ruby-70": 0.2063492063492064,
        "ruby-62": 0.2592592592592593,
        "ruby-57": 0.24226804123711343,
        "ruby-35": 0.11111111111111116,
        "ruby-189": 0.26356589147286824,
        "ruby-26": 0.2705882352941177,
        "ruby-174": 0.19383259911894268,
        "ruby-139": 0.13227513227513232,
        "ruby-22": 0.19117647058823528,
        "ruby-151": 0.21693121693121697,
        "ruby-108": 0.25468164794007486,
        "ruby-8": 0.2328042328042328,
        "ruby-7": 0.19999999999999996,
        "ruby-23": 0.23333333333333328,
        "ruby-55": 0.20276497695852536,
        "ruby-59": 0.2522935779816514,
        "codebertscore_f1-164": 0.7877581119537354,
        "codebertscore_f3-164": 0.8195726275444031,
        "codebertscore_f1-28": 0.6591467261314392,
        "codebertscore_f3-28": 0.6548336148262024,
        "codebertscore_f1-6": 0.6491658091545105,
        "codebertscore_f3-6": 0.6491396427154541,
        "codebertscore_f1-190": 0.8055340647697449,
        "codebertscore_f3-190": 0.8156694769859314,
        "codebertscore_f1-70": 0.7995143532752991,
        "codebertscore_f3-70": 0.7941371202468872,
        "codebertscore_f1-62": 0.7575812339782715,
        "codebertscore_f3-62": 0.7816793918609619,
        "codebertscore_f1-57": 0.8023176193237305,
        "codebertscore_f3-57": 0.8053399324417114,
        "codebertscore_f1-35": 0.6655471920967102,
        "codebertscore_f3-35": 0.6588743925094604,
        "codebertscore_f1-189": 0.7709875702857971,
        "codebertscore_f3-189": 0.7813618779182434,
        "codebertscore_f1-26": 0.8104186654090881,
        "codebertscore_f3-26": 0.8134853839874268,
        "codebertscore_f1-174": 0.7280789613723755,
        "codebertscore_f3-174": 0.7472654581069946,
        "codebertscore_f1-139": 0.6722316145896912,
        "codebertscore_f3-139": 0.6820998191833496,
        "codebertscore_f1-22": 0.8299551010131836,
        "codebertscore_f3-22": 0.830811619758606,
        "codebertscore_f1-151": 0.8424949049949646,
        "codebertscore_f3-151": 0.8353464007377625,
        "codebertscore_f1-108": 0.7860466837882996,
        "codebertscore_f3-108": 0.7934238314628601,
        "codebertscore_f1-8": 0.8226242661476135,
        "codebertscore_f3-8": 0.8195894360542297,
        "codebertscore_f1-7": 0.784379780292511,
        "codebertscore_f3-7": 0.7867597341537476,
        "codebertscore_f1-23": 0.8176918625831604,
        "codebertscore_f3-23": 0.8137608766555786,
        "codebertscore_f1-55": 0.8180828094482422,
        "codebertscore_f3-55": 0.8209370970726013,
        "codebertscore_f1-59": 0.82845139503479,
        "codebertscore_f3-59": 0.8332493901252747,
        "codebertscore_s_f1-164": 0.7996886372566223,
        "codebertscore_s_f3-164": 0.8268985152244568,
        "codebertscore_s_f1-28": 0.6630739569664001,
        "codebertscore_s_f3-28": 0.66813725233078,
        "codebertscore_s_f1-6": 0.6546494960784912,
        "codebertscore_s_f3-6": 0.6632294654846191,
        "codebertscore_s_f1-190": 0.8113373517990112,
        "codebertscore_s_f3-190": 0.8186755776405334,
        "codebertscore_s_f1-70": 0.7978542447090149,
        "codebertscore_s_f3-70": 0.7929771542549133,
        "codebertscore_s_f1-62": 0.7710306644439697,
        "codebertscore_s_f3-62": 0.7936895489692688,
        "codebertscore_s_f1-57": 0.8083784580230713,
        "codebertscore_s_f3-57": 0.8119452595710754,
        "codebertscore_s_f1-35": 0.6695516109466553,
        "codebertscore_s_f3-35": 0.6701443791389465,
        "codebertscore_s_f1-189": 0.7863827347755432,
        "codebertscore_s_f3-189": 0.7920933365821838,
        "codebertscore_s_f1-26": 0.8198481798171997,
        "codebertscore_s_f3-26": 0.8218621015548706,
        "codebertscore_s_f1-174": 0.7336951494216919,
        "codebertscore_s_f3-174": 0.7546507120132446,
        "codebertscore_s_f1-139": 0.6728085279464722,
        "codebertscore_s_f3-139": 0.6838963031768799,
        "codebertscore_s_f1-22": 0.8252195119857788,
        "codebertscore_s_f3-22": 0.8251157402992249,
        "codebertscore_s_f1-151": 0.8321428894996643,
        "codebertscore_s_f3-151": 0.8241363763809204,
        "codebertscore_s_f1-108": 0.7897627353668213,
        "codebertscore_s_f3-108": 0.7919100522994995,
        "codebertscore_s_f1-8": 0.8116728067398071,
        "codebertscore_s_f3-8": 0.8090840578079224,
        "codebertscore_s_f1-7": 0.781213641166687,
        "codebertscore_s_f3-7": 0.7852916121482849,
        "codebertscore_s_f1-23": 0.817319929599762,
        "codebertscore_s_f3-23": 0.8154205083847046,
        "codebertscore_s_f1-55": 0.816604495048523,
        "codebertscore_s_f3-55": 0.8202506303787231,
        "codebertscore_s_f1-59": 0.8343845009803772,
        "codebertscore_s_f3-59": 0.8351487517356873,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long a, long b, long c) {\n",
        "snippet": [
            "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "task_id": "157",
        "167": "long arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n    if (pow(arr[0], 2) + pow(arr[1], 2) == pow(arr[2], 2)) {\n        return true;\n    }\n    return false;",
        "grade-167": {
            "execution": 1
        },
        "28": "std::vector<long> vec = {a, b, c};\n    std::sort(vec.begin(), vec.end());\n    return (vec[0] * vec[0] + vec[1] * vec[1] == vec[2] * vec[2]);",
        "grade-28": {
            "execution": 1
        },
        "6": "if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    long max = std::max(a, std::max(b, c));\n    return max * max == a * a + b * b + c * c - max * max;",
        "grade-6": {
            "execution": 1
        },
        "195": "std::sort(std::begin({a, b, c}), std::end({a, b, c}));\n  return a * a + b * b == c * c;",
        "grade-195": {
            "execution": 0
        },
        "70": "// c^2 = a^2 + b^2\n    // sort a, b, c such that c is largest\n    if (a > b) {\n        std::swap(a, b);\n    }\n    if (b > c) {\n        std::swap(b, c);\n    }\n    if (a > b) {\n        std::swap(a, b);\n    }\n    return std::pow(c, 2) == std::pow(a, 2) + std::pow(b, 2);",
        "grade-70": {
            "execution": 1
        },
        "62": "return (a*a)+(b*b)==(c*c);",
        "grade-62": {
            "execution": 0
        },
        "57": "//return a*a + b*b == c*c;\n  std::vector<long> sides = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2];",
        "grade-57": {
            "execution": 1
        },
        "35": "return (a * a + b * b == c * c || b * b + c * c == a * a || c * c + a * a == b * b);",
        "grade-35": {
            "execution": 1
        },
        "194": "int value = 0;\n    if(a * a + b * b == c * c){\n        value = 1;\n    }\n    else if(a * a + c * c == b * b){\n        value = 1;\n    }\n    else if(b * b + c * c == a * a){\n        value = 1;\n    }\n    if(value == 1){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-194": {
            "execution": 1
        },
        "26": "if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    return false;",
        "grade-26": {
            "execution": 1
        },
        "177": "if (a > b && a > c) {\n        return (a * a == b * b + c * c);\n    } else if (b > a && b > c) {\n        return (b * b == a * a + c * c);\n    } else {\n        return (c * c == a * a + b * b);\n    }",
        "grade-177": {
            "execution": 1
        },
        "141": "bool isRight = false;\n  vector<long> sides = {a, b, c};\n  sort(sides.begin(), sides.end());\n  long hypotenuse = sides[2];\n  long small = sides[0];\n  long big = sides[1];\n  if ((hypotenuse * hypotenuse) == (small * small) + (big * big)) {\n    isRight = true;\n  }\n  return isRight;",
        "grade-141": {
            "execution": 0
        },
        "22": "// double max = a;\n    // double min = b;\n    // double mid = c;\n    // if(b > max)\n    //     max = b;\n    // if(c > max)\n    //     max = c;\n    // if(b < min)\n    //     min = b;\n    // if(c < min)\n    //     min = c;\n    // if(max*max == mid*mid + min*min)\n    //     return true;\n    // return false;\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    long a1 = v[0];\n    long b1 = v[1];\n    long c1 = v[2];\n    if(a1*a1 + b1*b1 == c1*c1)\n        return true;\n    return false;",
        "grade-22": {
            "execution": 1
        },
        "155": "if (a*a + b*b == c*c) {\n    return true;\n  }\n  if (a*a + c*c == b*b) {\n    return true;\n  }\n  if (b*b + c*c == a*a) {\n    return true;\n  }\n  return false;",
        "grade-155": {
            "execution": 1
        },
        "109": "long x, y, z;\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    x = v[0];\n    y = v[1];\n    z = v[2];\n    if ((x*x) + (y*y) == (z*z)) {\n        return true;\n    }\n    return false;",
        "grade-109": {
            "execution": 1
        },
        "8": "// Write your code here.\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);",
        "grade-8": {
            "execution": 1
        },
        "7": "if (a > b && a > c) {\n    if (a * a == b * b + c * c) {\n      return true;\n    }\n  }\n  else if (b > a && b > c) {\n    if (b * b == a * a + c * c) {\n      return true;\n    }\n  }\n  else if (c > a && c > b) {\n    if (c * c == a * a + b * b) {\n      return true;\n    }\n  }\n  return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "if(a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b)\n        return true;\n    return false;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    if (sides[0] <= 0 || sides[2] >= sides[0] + sides[1]) {\n        return false;\n    }\n    long maxSide = sides[2];\n    long minSide = sides[0];\n    long otherSide = sides[1];\n    return pow(maxSide, 2) == pow(minSide, 2) + pow(otherSide, 2);",
        "grade-55": {
            "execution": 1
        },
        "59": "return abs(c*c - (a*a + b*b)) <= 0.000000001;",
        "grade-59": {
            "execution": 0
        },
        "bleu-167": 0.05115812503781382,
        "bleu-28": 0.018631199522585625,
        "bleu-6": 0.2617884118198511,
        "bleu-195": 0.12798792079649327,
        "bleu-70": 0.021691442744291717,
        "bleu-62": 0.05121860328778587,
        "bleu-57": 0.1091682125748588,
        "bleu-35": 0.27551735422072815,
        "bleu-194": 0.351006047457811,
        "bleu-26": 0.4106302293503776,
        "bleu-177": 0.344131329696713,
        "bleu-141": 0.02057715433579061,
        "bleu-22": 0.05063235743656033,
        "bleu-155": 0.4550050710156046,
        "bleu-109": 0.0389480727918939,
        "bleu-8": 0.4054892429787734,
        "bleu-7": 0.27358434820243116,
        "bleu-23": 0.4106302293503776,
        "bleu-55": 0.03250174293870608,
        "bleu-59": 0.08020797767678065,
        "codebleu-167": 0.31303773745634206,
        "codebleu-28": 0.3102478916432404,
        "codebleu-6": 0.4840777483090144,
        "codebleu-195": 0.3281566718757224,
        "codebleu-70": 0.35784564272936364,
        "codebleu-62": 0.16665718959160203,
        "codebleu-57": 0.4330671930158648,
        "codebleu-35": 0.4234509792401515,
        "codebleu-194": 0.6008262443637243,
        "codebleu-26": 0.5192536958679141,
        "codebleu-177": 0.6021473061489762,
        "codebleu-141": 0.38242184172416727,
        "codebleu-22": 0.5037055967288525,
        "codebleu-155": 0.6096515187087368,
        "codebleu-109": 0.41408978618280945,
        "codebleu-8": 0.5298268113513913,
        "codebleu-7": 0.606104227830363,
        "codebleu-23": 0.5192536958679141,
        "codebleu-55": 0.3643197887383934,
        "codebleu-59": 0.18434809265824365,
        "chrf-167": 0.2521977710395457,
        "chrf-28": 0.12431502147703448,
        "chrf-6": 0.3180933062523,
        "chrf-195": 0.1659502927394093,
        "chrf-70": 0.13735435505154997,
        "chrf-62": 0.12960303533833833,
        "chrf-57": 0.18926256009521056,
        "chrf-35": 0.23140747281074792,
        "chrf-194": 0.43078307049868075,
        "chrf-26": 0.4656620701189979,
        "chrf-177": 0.3428721120428204,
        "chrf-141": 0.15336031779010548,
        "chrf-22": 0.23468217337470004,
        "chrf-155": 0.4472897879242298,
        "chrf-109": 0.24702505402236563,
        "chrf-8": 0.30904260061810646,
        "chrf-7": 0.40206887352386717,
        "chrf-23": 0.4617356769949956,
        "chrf-55": 0.1768205515055486,
        "chrf-59": 0.16861959766341467,
        "rougel-167": 0.24060150375939848,
        "rougel-28": 0.1925925925925926,
        "rougel-6": 0.31578947368421056,
        "rougel-195": 0.3157894736842105,
        "rougel-70": 0.23595505617977533,
        "rougel-62": 0.372093023255814,
        "rougel-57": 0.2684563758389261,
        "rougel-35": 0.4545454545454546,
        "rougel-194": 0.5844155844155844,
        "rougel-26": 0.6782608695652174,
        "rougel-177": 0.4444444444444444,
        "rougel-141": 0.21656050955414013,
        "rougel-22": 0.2053231939163498,
        "rougel-155": 0.6666666666666666,
        "rougel-109": 0.23391812865497075,
        "rougel-8": 0.6115702479338843,
        "rougel-7": 0.43529411764705883,
        "rougel-23": 0.5391304347826087,
        "rougel-55": 0.13978494623655913,
        "rougel-59": 0.40449438202247184,
        "meteor-167": 0.2474434049968954,
        "meteor-28": 0.17234162895927607,
        "meteor-6": 0.4022793279916325,
        "meteor-195": 0.2249695846928054,
        "meteor-70": 0.23371104815864024,
        "meteor-62": 0.1465798045602606,
        "meteor-57": 0.23558154198508138,
        "meteor-35": 0.45043035654239566,
        "meteor-194": 0.6649795719251174,
        "meteor-26": 0.6028048993714744,
        "meteor-177": 0.3898832583136561,
        "meteor-141": 0.20798090323292817,
        "meteor-22": 0.3504108723135272,
        "meteor-155": 0.661074474508472,
        "meteor-109": 0.2581689119376888,
        "meteor-8": 0.578414906376313,
        "meteor-7": 0.40821466680388485,
        "meteor-23": 0.5266497137534343,
        "meteor-55": 0.19237447044933678,
        "meteor-59": 0.1539708265802269,
        "ruby-167": 0.10447761194029848,
        "ruby-28": 0.05797101449275366,
        "ruby-6": 0.11940298507462688,
        "ruby-195": 0.16666666666666663,
        "ruby-70": 0.1428571428571429,
        "ruby-62": 0.24242424242424243,
        "ruby-57": 0.1686746987951807,
        "ruby-35": 0.3484848484848485,
        "ruby-194": 0.5,
        "ruby-26": 0.5454545454545454,
        "ruby-177": 0.2692307692307693,
        "ruby-141": 0.10989010989010994,
        "ruby-22": 0.12182741116751272,
        "ruby-155": 0.5909090909090908,
        "ruby-109": 0.1428571428571429,
        "ruby-8": 0.43939393939393945,
        "ruby-7": 0.3173076923076923,
        "ruby-23": 0.43939393939393945,
        "ruby-55": 0.05833333333333335,
        "ruby-59": 0.2727272727272727,
        "codebertscore_f1-167": 0.7344121336936951,
        "codebertscore_f3-167": 0.7253237366676331,
        "codebertscore_f1-28": 0.7276402711868286,
        "codebertscore_f3-28": 0.730387806892395,
        "codebertscore_f1-6": 0.7895146608352661,
        "codebertscore_f3-6": 0.786375105381012,
        "codebertscore_f1-195": 0.7840030789375305,
        "codebertscore_f3-195": 0.7606958150863647,
        "codebertscore_f1-70": 0.7025073766708374,
        "codebertscore_f3-70": 0.6982311606407166,
        "codebertscore_f1-62": 0.8265496492385864,
        "codebertscore_f3-62": 0.7754325866699219,
        "codebertscore_f1-57": 0.7594367861747742,
        "codebertscore_f3-57": 0.7685421109199524,
        "codebertscore_f1-35": 0.8276612758636475,
        "codebertscore_f3-35": 0.7897831797599792,
        "codebertscore_f1-194": 0.802647054195404,
        "codebertscore_f3-194": 0.796676516532898,
        "codebertscore_f1-26": 0.8779765367507935,
        "codebertscore_f3-26": 0.8422918319702148,
        "codebertscore_f1-177": 0.8115876913070679,
        "codebertscore_f3-177": 0.7849746942520142,
        "codebertscore_f1-141": 0.7041739225387573,
        "codebertscore_f3-141": 0.7273319959640503,
        "codebertscore_f1-22": 0.6903283596038818,
        "codebertscore_f3-22": 0.7291593551635742,
        "codebertscore_f1-155": 0.8723928332328796,
        "codebertscore_f3-155": 0.8342650532722473,
        "codebertscore_f1-109": 0.7261366248130798,
        "codebertscore_f3-109": 0.7405529618263245,
        "codebertscore_f1-8": 0.8439640402793884,
        "codebertscore_f3-8": 0.8209765553474426,
        "codebertscore_f1-7": 0.8029218912124634,
        "codebertscore_f3-7": 0.7840545177459717,
        "codebertscore_f1-23": 0.8699172139167786,
        "codebertscore_f3-23": 0.8366535305976868,
        "codebertscore_f1-55": 0.6879149079322815,
        "codebertscore_f3-55": 0.707856297492981,
        "codebertscore_f1-59": 0.8303471207618713,
        "codebertscore_f3-59": 0.8117292523384094,
        "codebertscore_s_f1-167": 0.7414533495903015,
        "codebertscore_s_f3-167": 0.7376131415367126,
        "codebertscore_s_f1-28": 0.7438308596611023,
        "codebertscore_s_f3-28": 0.7528067231178284,
        "codebertscore_s_f1-6": 0.7945714592933655,
        "codebertscore_s_f3-6": 0.7921903133392334,
        "codebertscore_s_f1-195": 0.7920781373977661,
        "codebertscore_s_f3-195": 0.7691165208816528,
        "codebertscore_s_f1-70": 0.7230200171470642,
        "codebertscore_s_f3-70": 0.718288242816925,
        "codebertscore_s_f1-62": 0.8323335647583008,
        "codebertscore_s_f3-62": 0.776166558265686,
        "codebertscore_s_f1-57": 0.7651827335357666,
        "codebertscore_s_f3-57": 0.7743788957595825,
        "codebertscore_s_f1-35": 0.834241509437561,
        "codebertscore_s_f3-35": 0.7972925305366516,
        "codebertscore_s_f1-194": 0.8188875317573547,
        "codebertscore_s_f3-194": 0.8123530149459839,
        "codebertscore_s_f1-26": 0.8828024864196777,
        "codebertscore_s_f3-26": 0.8458131551742554,
        "codebertscore_s_f1-177": 0.8171564340591431,
        "codebertscore_s_f3-177": 0.7877237796783447,
        "codebertscore_s_f1-141": 0.7128807306289673,
        "codebertscore_s_f3-141": 0.7387230396270752,
        "codebertscore_s_f1-22": 0.7111406922340393,
        "codebertscore_s_f3-22": 0.7440677881240845,
        "codebertscore_s_f1-155": 0.8848471641540527,
        "codebertscore_s_f3-155": 0.845187783241272,
        "codebertscore_s_f1-109": 0.7403178811073303,
        "codebertscore_s_f3-109": 0.7609362006187439,
        "codebertscore_s_f1-8": 0.8485707640647888,
        "codebertscore_s_f3-8": 0.8249417543411255,
        "codebertscore_s_f1-7": 0.8196349740028381,
        "codebertscore_s_f3-7": 0.7948882579803467,
        "codebertscore_s_f1-23": 0.8744913339614868,
        "codebertscore_s_f3-23": 0.8397015333175659,
        "codebertscore_s_f1-55": 0.7039141654968262,
        "codebertscore_s_f3-55": 0.7269595861434937,
        "codebertscore_s_f1-59": 0.8216168880462646,
        "codebertscore_s_f3-59": 0.7985250353813171,
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n",
        "snippet": [
            "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n"
        ],
        "simplified": "Filter given list of any python values only for integers",
        "task_id": "22",
        "166": "std::vector<long> ans;\n    for(auto x: values){\n        try{\n            int y = std::any_cast<int>(x);\n            ans.push_back(y);\n        }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n    return ans;",
        "grade-166": {
            "execution": 0
        },
        "28": "std::vector<long> result;\n    for(auto value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n        } catch(std::bad_any_cast) {\n            //\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> list_of_longs;\n    for(int i=0;i<values.size();i++){\n        try{\n            list_of_longs.push_back(std::any_cast<long>(values[i]));\n        }\n        catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n    return list_of_longs;",
        "grade-6": {
            "execution": 0
        },
        "192": "std::vector<long> numbers;\nstd::any val;\n// iterate over the vector of any values\nfor (int i = 0; i < values.size(); i++) {\nval = values[i];\ntry {\n// try to get the integer value from any value\nlong number = std::any_cast<long>(val);\nnumbers.push_back(number);",
        "grade-192": {
            "execution": 0
        },
        "70": "std::vector<long> v;\n    for(auto i:values){\n        try{\n            v.push_back(std::any_cast<long>(i));\n        }catch(const std::bad_any_cast& e){\n            continue;\n        }\n    }\n    return v;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> int_values;\n\tfor (auto x : values) {\n\t\tif (x.type() == typeid(int)) {\n\t\t\tint_values.push_back(std::any_cast<int>(x));\n\t\t}\n\t\telse if (x.type() == typeid(long)) {\n\t\t\tint_values.push_back(std::any_cast<long>(x));\n\t\t}\n\t}\n\treturn int_values;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> ret;\n    for(auto elem : values) {\n        try {\n            ret.push_back(std::any_cast<long>(elem));\n        } catch(std::bad_any_cast) {\n\n        }\n    }\n    return ret;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> vec;\n    for(auto i : values){\n        if(i.type() == typeid(int))\n            vec.push_back(std::any_cast<int>(i));\n        else if(i.type() == typeid(long))\n            vec.push_back(std::any_cast<long>(i));\n    }\n    return vec;",
        "grade-35": {
            "execution": 0
        },
        "191": "std::vector<long> vals;\n    for(auto& val : values) {\n        if(val.type() == typeid(long)) {\n            vals.push_back(std::any_cast<long>(val));\n        }\n    }\n    return vals;",
        "grade-191": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n    for(auto& value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n        } catch(const std::bad_any_cast& e) {\n            continue;\n        }\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "176": "std::vector<long> result;\n    std::any_cast<long>\n    return result;",
        "grade-176": {
            "execution": 0
        },
        "141": "std::vector<long> integers;\n  for (auto value : values) {\n    try {\n      if (std::any_cast<long>(value))\n        integers.push_back(std::any_cast<long>(value));\n    } catch (const std::bad_any_cast& e) {\n      continue;\n    }\n  }\n  return integers;",
        "grade-141": {
            "execution": 0
        },
        "22": "std::vector<long> ans;\n\tfor(auto i:values){\n\t\tif(i.type()==typeid(int)){\n\t\t\tans.push_back(std::any_cast<int>(i));\n\t\t}\n\t\telse if(i.type()==typeid(long)){\n\t\t\tans.push_back(std::any_cast<long>(i));\n\t\t}\n\t}\n\treturn ans;",
        "grade-22": {
            "execution": 0
        },
        "153": "std::vector<long> int_values;\n    for(auto value : values) {\n        try {\n            int_values.push_back(std::any_cast<long>(value));\n        } catch(std::bad_any_cast& e) {\n            // Do nothing.\n        }\n    }\n    return int_values;",
        "grade-153": {
            "execution": 0
        },
        "109": "std::vector<long> v;\n    for(int i=0;i<values.size();i++){\n        if(values[i].type()==typeid(int)){\n            v.push_back(std::any_cast<int>(values[i]));\n        }\n        else if(values[i].type()==typeid(long)){\n            v.push_back(std::any_cast<long>(values[i]));\n        }\n    }\n    return v;",
        "grade-109": {
            "execution": 0
        },
        "8": "std::vector<long> res;\n  for(int i=0;i<values.size();i++){\n    if(values[i].type()==typeid(int))\n      res.push_back(std::any_cast<int>(values[i]));\n    else if(values[i].type()==typeid(long))\n      res.push_back(std::any_cast<long>(values[i]));\n  }\n  return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "long i;\n    std::vector<long> v;\n    for(i=0;i<values.size();i++)\n    {\n        if(std::any_cast<int>(&values[i]))\n        {\n            v.push_back(std::any_cast<int>(values[i]));\n        }\n    }\n    return v;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> result;\n    for(auto&&i:values){\n        if(i.type()==typeid(long))\n            result.push_back(std::any_cast<long>(i));\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> res;\n    // TODO: implement your code here\n        for(auto x:values){\n            if(x.type()==typeid(int))\n                res.push_back(std::any_cast<int>(x));\n            else if(x.type()==typeid(long))\n                res.push_back(std::any_cast<long>(x));\n        }\n    return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n\tfor (auto i : values) {\n\t\tif (i.type() == typeid(long)) {\n\t\t\tresult.push_back(std::any_cast<long>(i));\n\t\t}\n\t}\n\treturn result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-166": 0.13992400625121354,
        "bleu-28": 0.09477043143603942,
        "bleu-6": 0.1532938449357436,
        "bleu-192": 0.12549755293982168,
        "bleu-70": 0.10009261308570366,
        "bleu-62": 0.29564708817347735,
        "bleu-57": 0.09241559997407292,
        "bleu-35": 0.31253820611123306,
        "bleu-191": 0.1876482941444349,
        "bleu-26": 0.1010045058345711,
        "bleu-176": 0.006659634732809779,
        "bleu-141": 0.11525081639788932,
        "bleu-22": 0.29564708817347735,
        "bleu-153": 0.10032651646117408,
        "bleu-109": 0.26088168296091135,
        "bleu-8": 0.2757208930365513,
        "bleu-7": 0.21518337683084743,
        "bleu-23": 0.1947804583048801,
        "bleu-55": 0.28158815527281283,
        "bleu-59": 0.18582567376114267,
        "codebleu-166": 0.3882780035104133,
        "codebleu-28": 0.313577273636994,
        "codebleu-6": 0.4716385788113415,
        "codebleu-192": 0.49914989490222617,
        "codebleu-70": 0.3408797730669895,
        "codebleu-62": 0.5812241205490792,
        "codebleu-57": 0.3124188996792315,
        "codebleu-35": 0.5815608505183039,
        "codebleu-191": 0.3981688938942914,
        "codebleu-26": 0.34198156108208944,
        "codebleu-176": 0.1174004293890505,
        "codebleu-141": 0.4181412624281626,
        "codebleu-22": 0.5812241205490792,
        "codebleu-153": 0.34198156108208944,
        "codebleu-109": 0.6187710550611145,
        "codebleu-8": 0.6078397552030377,
        "codebleu-7": 0.5171476196756851,
        "codebleu-23": 0.3940209863943584,
        "codebleu-55": 0.5835476424510597,
        "codebleu-59": 0.39671881507237916,
        "chrf-166": 0.2993778781556941,
        "chrf-28": 0.2819993595253192,
        "chrf-6": 0.32177142581674056,
        "chrf-192": 0.31798301779765087,
        "chrf-70": 0.26974633159686817,
        "chrf-62": 0.41352711043381013,
        "chrf-57": 0.27203170523218456,
        "chrf-35": 0.3975595926700368,
        "chrf-191": 0.3228636358796336,
        "chrf-26": 0.2909594646946536,
        "chrf-176": 0.1408439199798393,
        "chrf-141": 0.3090204113772001,
        "chrf-22": 0.4010303750183779,
        "chrf-153": 0.2953332015247713,
        "chrf-109": 0.4161114044576317,
        "chrf-8": 0.42380331380257874,
        "chrf-7": 0.33824299401686714,
        "chrf-23": 0.34690045578942197,
        "chrf-55": 0.39374076991548257,
        "chrf-59": 0.3392477165558382,
        "rougel-166": 0.35460992907801414,
        "rougel-28": 0.3880597014925373,
        "rougel-6": 0.45033112582781454,
        "rougel-192": 0.39285714285714285,
        "rougel-70": 0.3795620437956204,
        "rougel-62": 0.5325443786982248,
        "rougel-57": 0.393939393939394,
        "rougel-35": 0.5454545454545454,
        "rougel-191": 0.5547445255474452,
        "rougel-26": 0.3768115942028985,
        "rougel-176": 0.2549019607843137,
        "rougel-141": 0.41333333333333333,
        "rougel-22": 0.5325443786982248,
        "rougel-153": 0.37410071942446044,
        "rougel-109": 0.4974093264248704,
        "rougel-8": 0.5079365079365079,
        "rougel-7": 0.5256410256410257,
        "rougel-23": 0.5588235294117646,
        "rougel-55": 0.5202312138728323,
        "rougel-59": 0.5588235294117646,
        "meteor-166": 0.35287267080745344,
        "meteor-28": 0.2805659167449875,
        "meteor-6": 0.3903530737448353,
        "meteor-192": 0.36518570329076006,
        "meteor-70": 0.2923591604244694,
        "meteor-62": 0.5444759264652608,
        "meteor-57": 0.2745648115708616,
        "meteor-35": 0.531866049478047,
        "meteor-191": 0.46324516229712853,
        "meteor-26": 0.2987881535829846,
        "meteor-176": 0.14993742951164118,
        "meteor-141": 0.340105120229774,
        "meteor-22": 0.5444759264652608,
        "meteor-153": 0.2715082444506196,
        "meteor-109": 0.6035514680963536,
        "meteor-8": 0.5916918395311783,
        "meteor-7": 0.4751285213702799,
        "meteor-23": 0.45462689020381325,
        "meteor-55": 0.526782503007528,
        "meteor-59": 0.46382421875,
        "ruby-166": 0.24096385542168675,
        "ruby-28": 0.2530120481927711,
        "ruby-6": 0.3012048192771084,
        "ruby-192": 0.2705882352941177,
        "ruby-70": 0.24096385542168675,
        "ruby-62": 0.37209302325581395,
        "ruby-57": 0.2650602409638554,
        "ruby-35": 0.3855421686746988,
        "ruby-191": 0.4337349397590361,
        "ruby-26": 0.24096385542168675,
        "ruby-176": 0.15662650602409633,
        "ruby-141": 0.2168674698795181,
        "ruby-22": 0.37209302325581395,
        "ruby-153": 0.24096385542168675,
        "ruby-109": 0.3545454545454545,
        "ruby-8": 0.3679245283018868,
        "ruby-7": 0.42168674698795183,
        "ruby-23": 0.45783132530120485,
        "ruby-55": 0.38888888888888884,
        "ruby-59": 0.4337349397590361,
        "codebertscore_f1-166": 0.784005880355835,
        "codebertscore_f3-166": 0.7783809304237366,
        "codebertscore_f1-28": 0.7790362238883972,
        "codebertscore_f3-28": 0.7618451714515686,
        "codebertscore_f1-6": 0.7675383687019348,
        "codebertscore_f3-6": 0.7731029987335205,
        "codebertscore_f1-192": 0.7505304217338562,
        "codebertscore_f3-192": 0.7591179013252258,
        "codebertscore_f1-70": 0.7664899826049805,
        "codebertscore_f3-70": 0.7618562579154968,
        "codebertscore_f1-62": 0.8148365020751953,
        "codebertscore_f3-62": 0.7955417037010193,
        "codebertscore_f1-57": 0.774689257144928,
        "codebertscore_f3-57": 0.7590985298156738,
        "codebertscore_f1-35": 0.8271089196205139,
        "codebertscore_f3-35": 0.8086305260658264,
        "codebertscore_f1-191": 0.8106920719146729,
        "codebertscore_f3-191": 0.7933396697044373,
        "codebertscore_f1-26": 0.7679538726806641,
        "codebertscore_f3-26": 0.7613522410392761,
        "codebertscore_f1-176": 0.7125037908554077,
        "codebertscore_f3-176": 0.6686026453971863,
        "codebertscore_f1-141": 0.7722861170768738,
        "codebertscore_f3-141": 0.7633070349693298,
        "codebertscore_f1-22": 0.8267796635627747,
        "codebertscore_f3-22": 0.8097736835479736,
        "codebertscore_f1-153": 0.7640383839607239,
        "codebertscore_f3-153": 0.7545230388641357,
        "codebertscore_f1-109": 0.8242150545120239,
        "codebertscore_f3-109": 0.8108741641044617,
        "codebertscore_f1-8": 0.8331200480461121,
        "codebertscore_f3-8": 0.8201661705970764,
        "codebertscore_f1-7": 0.8190609216690063,
        "codebertscore_f3-7": 0.8036870956420898,
        "codebertscore_f1-23": 0.8187937140464783,
        "codebertscore_f3-23": 0.8000262975692749,
        "codebertscore_f1-55": 0.7965403199195862,
        "codebertscore_f3-55": 0.795318067073822,
        "codebertscore_f1-59": 0.815429151058197,
        "codebertscore_f3-59": 0.7931017875671387,
        "codebertscore_s_f1-166": 0.7879726886749268,
        "codebertscore_s_f3-166": 0.7815313935279846,
        "codebertscore_s_f1-28": 0.7818806767463684,
        "codebertscore_s_f3-28": 0.7630459666252136,
        "codebertscore_s_f1-6": 0.7730041742324829,
        "codebertscore_s_f3-6": 0.7792581915855408,
        "codebertscore_s_f1-192": 0.7563445568084717,
        "codebertscore_s_f3-192": 0.7625932693481445,
        "codebertscore_s_f1-70": 0.771942138671875,
        "codebertscore_s_f3-70": 0.7661944031715393,
        "codebertscore_s_f1-62": 0.8217541575431824,
        "codebertscore_s_f3-62": 0.8039273619651794,
        "codebertscore_s_f1-57": 0.7769206166267395,
        "codebertscore_s_f3-57": 0.760606586933136,
        "codebertscore_s_f1-35": 0.8345246315002441,
        "codebertscore_s_f3-35": 0.8154152035713196,
        "codebertscore_s_f1-191": 0.8191772699356079,
        "codebertscore_s_f3-191": 0.8018702864646912,
        "codebertscore_s_f1-26": 0.7714254856109619,
        "codebertscore_s_f3-26": 0.7629845142364502,
        "codebertscore_s_f1-176": 0.7155569195747375,
        "codebertscore_s_f3-176": 0.6628708243370056,
        "codebertscore_s_f1-141": 0.7797802090644836,
        "codebertscore_s_f3-141": 0.7691901922225952,
        "codebertscore_s_f1-22": 0.8322166800498962,
        "codebertscore_s_f3-22": 0.8152598738670349,
        "codebertscore_s_f1-153": 0.768985390663147,
        "codebertscore_s_f3-153": 0.7594451308250427,
        "codebertscore_s_f1-109": 0.8368059396743774,
        "codebertscore_s_f3-109": 0.8243053555488586,
        "codebertscore_s_f1-8": 0.8405432105064392,
        "codebertscore_s_f3-8": 0.8276692032814026,
        "codebertscore_s_f1-7": 0.8236868977546692,
        "codebertscore_s_f3-7": 0.8079348206520081,
        "codebertscore_s_f1-23": 0.8287587761878967,
        "codebertscore_s_f3-23": 0.8095737099647522,
        "codebertscore_s_f1-55": 0.8083379864692688,
        "codebertscore_s_f3-55": 0.8076273202896118,
        "codebertscore_s_f1-59": 0.823065459728241,
        "codebertscore_s_f3-59": 0.8019290566444397,
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-192": 0,
        "raw_gpt35_nsnr-192": "3 - The code snippet correctly filters out only the integers from the given vector of any values and stores them in a vector of long integers. However, it does not handle cases where the given vector does not contain any integers and may throw an exception.",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-176": 2,
        "raw_gpt35_nsnr-176": "2",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "3 - The code snippet correctly filters out integers from the given list of any python values. However, it only checks for int and long types, and not other integer types like short or unsigned int.",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "3 - The code snippet correctly filters out only the integers from the given list of any python values and returns them in a vector. However, it only checks for integers using std::any_cast<int>, which means it will miss any long or other integer types. It should be updated to check for all integer types using std::any_cast<long>, std::any_cast<short>, etc.",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-176": 2,
        "raw_gpt35_nswr-176": "2",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"hello\",\"ell\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n// cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\") => False\n// cycpattern_check(\"himenss\",\"simen\") => True\nbool cycpattern_check(std::string a, std::string b) {\n",
        "snippet": [
            "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n"
        ],
        "simplified": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
        "task_id": "154",
        "166": "int len = a.length();\n    string s = a + a;\n    int len2 = s.length();\n    int i = 0;\n    int j = 0;\n    while(j < len2 && i < len) {\n        if(s[j] == b[i]) {\n            j++;\n            i++;\n        } else {\n            j = j - i + 1;\n            i = 0;\n        }\n    }\n    if(i == len) {\n        return true;\n    }\n    return false;",
        "grade-166": {
            "execution": 0
        },
        "28": "// write your code here\n    std::string temp=b;\n    std::string str=b;\n    std::cout<<str<<std::endl;\n    std::cout<<str.size()<<std::endl;\n    int i=0;\n    while(i<str.size()){\n        char temp=str[0];\n        for(int j=0;j<str.size()-1;j++){\n            str[j]=str[j+1];\n        }\n        str[str.size()-1]=temp;\n        std::cout<<str<<std::endl;\n        i++;\n        if(a.find(str)!=std::string::npos){\n            return true;\n        }\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string x=a+a;\n    if(x.find(b)!=std::string::npos)\n        return true;\n    else\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "193": "if(a.size() != b.size())\n        return false;\n    string d = b+b;\n    size_t pos = d.find(a);\n    if(pos == string::npos)\n        return false;\n    return true;",
        "grade-193": {
            "execution": 0
        },
        "71": "bool res = false;\n\tstd::string str = b + b;\n\tfor (int i = 0; i < a.length(); i++) {\n\t\tstd::string temp = a.substr(i, a.length() - i) + a.substr(0, i);\n\t\tif (temp.find(b) != std::string::npos) {\n\t\t\tres = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;",
        "grade-71": {
            "execution": 0
        },
        "63": "int len = b.length();\n\tif (a.length() < len) return false;\n\tfor (int i = 0; i < len; i++) {\n\t\tstd::string temp = b.substr(i, len - i) + b.substr(0, i);\n\t\tif (a.find(temp) != std::string::npos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-63": {
            "execution": 1
        },
        "58": "// Write your code here\n    if(a.length()<b.length())\n    {\n        return false;\n    }\n    else\n    {\n        std::string c=b;\n        int k=b.length();\n        for(int i=0;i<k;i++)\n        {\n            char t=c[0];\n            for(int j=0;j<k-1;j++)\n            {\n                c[j]=c[j+1];\n            }\n            c[k-1]=t;\n            if(c==a)\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
        "grade-58": {
            "execution": 0
        },
        "35": "std::string c=b;\n    while(1)\n    {\n        if(a.find(b)!=std::string::npos)\n        {\n            return true;\n        }\n        b=b.substr(1,b.length()-1)+b[0];\n        if(b==c)\n        {\n            return false;\n        }\n    }",
        "grade-35": {
            "execution": 1
        },
        "192": "// Write your code here\n  int l=a.length();\n  int r=b.length();\n  if(l<r)\n    return false;\n  int i,j,k;\n  for(i=0;i<l;i++)\n  {\n    j=0;\n    k=i;\n    if(a[k]==b[j])\n    {\n      k++;\n      j++;\n      if(k==l)\n        k=0;\n      while(j<r)\n      {\n        if(a[k]==b[j])\n        {\n          k++;\n          j++;\n          if(k==l)\n            k=0;\n        }\n        else\n          break;\n      }\n      if(j==r)\n        return true;\n    }\n  }\n  return false;",
        "grade-192": {
            "execution": 0
        },
        "26": "int lena = a.length();\n\tint lenb = b.length();\n\tif (lena<lenb)\n\t\treturn false;\n\tfor (int i = 0; i<lena; i++) {\n\t\tif (a[i] == b[0]) {\n\t\t\tbool ans = true;\n\t\t\tfor (int j = 0; j<lenb; j++) {\n\t\t\t\tif (a[(i + j) % lena] != b[j]) {\n\t\t\t\t\tans = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ans)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-26": {
            "execution": 0
        },
        "176": "if (a.size() < b.size())\n\t\treturn false;\n\tstring s = b + b;\n\tif (s.find(a) != string::npos)\n\t\treturn true;\n\treturn false;",
        "grade-176": {
            "execution": 0
        },
        "142": "// Write your code here.\n    int len_a = a.length();\n    int len_b = b.length();\n    int count =0;\n    if(len_a < len_b)\n        return false;\n    else\n    {\n        for(int i=0;i<len_a;i++)\n        {\n            for(int j=0;j<len_b;j++)\n            {\n                if(a[i] == b[j])\n                {\n                    if(i+len_b-1<len_a)\n                    {\n                        for(int k=0;k<len_b;k++)\n                        {\n                            if(a[i+k] == b[j])\n                            {\n                                count++;\n                                j = (j+1)%len_b;\n                            }\n                            else\n                                break;\n                        }\n                    }\n                    else\n                    {\n                        for(int k=0;k<len_b;k++)\n                        {\n                            if(a[i] == b[j])\n                            {\n                                count++;\n                                j = (j+1)%len_b;\n                                i++;\n                            }\n                            else\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(count == len_b)\n        return true;\n    else\n        return false;",
        "grade-142": {
            "execution": 0
        },
        "22": "int n = a.length();\n\tint m = b.length();\n\tint i = 0;\n\tint j = 0;\n\t//Using KMP algorithm\n\tstd::vector<int> temp(m);\n\tint len = 0;\n\t//Calculating the Prefix vector\n\tfor (int i = 1; i < m; i++) {\n\t\tif (b[i] == b[len]) {\n\t\t\tlen++;\n\t\t\ttemp[i] = len;\n\t\t}\n\t\telse {\n\t\t\tif (len != 0) {\n\t\t\t\tlen = temp[len - 1];\n\t\t\t\ti--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttemp[i] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string a\n\twhile (i < n) {\n\t\tif (a[i] == b[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif (j == m) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (i < n && a[i] != b[j]) {\n\t\t\tif (j != 0) {\n\t\t\t\tj = temp[j - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string rotated by 1\n\tlen = 0;\n\tj = 0;\n\ti = 0;\n\twhile (i < n) {\n\t\tif (a[i] == b[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif (j == m) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (i < n && a[i] != b[j]) {\n\t\t\tif (j != 0) {\n\t\t\t\tj = temp[j - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string rotated by 2\n\tlen =",
        "grade-22": {
            "execution": 0
        },
        "154": "std::string temp = b;\n\tint i;\n\tfor (i = 0; i < b.length(); i++) {\n\t\tstd::rotate(temp.begin(), temp.begin() + 1, temp.end());\n\t\tif (a.find(temp) != std::string::npos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-154": {
            "execution": 1
        },
        "109": "//write your code here\n    if(a.length() < b.length())\n        return false;\n    std::string temp = b + b;\n    return temp.find(a) != std::string::npos;",
        "grade-109": {
            "execution": 0
        },
        "8": "if(a.length()!=b.length())return false;\n    else{\n    int n = a.length();\n    int x=0;\n    for(int i=0;i<n;i++){\n        if(a[0]==b[i]){\n            for(int j=0;j<n;j++){\n                if(a[j]==b[(i+j)%n])x++;\n            }\n        }\n    }\n    if(x==n)return true;\n    else return false;\n    }",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(a.length() >= b.length());\n    if(a.find(b) != std::string::npos)\n        return true;\n    int n = b.length();\n    for(int i = 0; i < n; i++) {\n        if(a.find(b.substr(i, n - i) + b.substr(0, i)) != std::string::npos)\n            return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "return false;",
        "grade-23": {
            "execution": 0
        },
        "56": "// Write your code here\n    if(a.length() < b.length())\n        return false;\n    string temp = b + b;\n    if(temp.find(a) != string::npos)\n        return true;\n    return false;",
        "grade-56": {
            "execution": 0
        },
        "60": "if(a.size()<b.size()) return false;\n    std::rotate(a.begin(),a.begin()+1,a.end());\n    for(int i=0;i<a.size();i++){\n        if(a.substr(i,b.size())==b) return true;\n    }\n    return false;",
        "grade-60": {
            "execution": 0
        },
        "bleu-166": 0.168751229060451,
        "bleu-28": 0.16290394727887836,
        "bleu-6": 0.161592212154142,
        "bleu-193": 0.31079222648247634,
        "bleu-71": 0.3776538634729625,
        "bleu-63": 0.4911021360342018,
        "bleu-58": 0.2078891347477727,
        "bleu-35": 0.29880532251181596,
        "bleu-192": 0.14956838646748624,
        "bleu-26": 0.21844018769204443,
        "bleu-176": 0.3354530931479813,
        "bleu-142": 0.10141080190751169,
        "bleu-22": 0.06092951441171251,
        "bleu-154": 0.3911574183419445,
        "bleu-109": 0.1601841851492983,
        "bleu-8": 0.20395447930274938,
        "bleu-7": 0.4347857895712232,
        "bleu-23": 2.876571605486452e-09,
        "bleu-56": 0.2998472698236122,
        "bleu-60": 0.3780228506169454,
        "codebleu-166": 0.5514696640989204,
        "codebleu-28": 0.6996716240715779,
        "codebleu-6": 0.3104566037361552,
        "codebleu-193": 0.5366344885842915,
        "codebleu-71": 0.7309036945832028,
        "codebleu-63": 0.7485883455248784,
        "codebleu-58": 0.6645044840038019,
        "codebleu-35": 0.6086573628368592,
        "codebleu-192": 0.6082494360578382,
        "codebleu-26": 0.6240434436420337,
        "codebleu-176": 0.5111559779295395,
        "codebleu-142": 0.6055086845745806,
        "codebleu-22": 0.6282118082463514,
        "codebleu-154": 0.7214094263342281,
        "codebleu-109": 0.48340988581999406,
        "codebleu-8": 0.64373924634352,
        "codebleu-7": 0.7188186481545653,
        "codebleu-23": 0.022471917656021165,
        "codebleu-56": 0.5438785208030197,
        "codebleu-60": 0.6726120714229957,
        "chrf-166": 0.33825289362530236,
        "chrf-28": 0.4398357908731792,
        "chrf-6": 0.3943986077517426,
        "chrf-193": 0.4656252117965234,
        "chrf-71": 0.5585838101952181,
        "chrf-63": 0.6766016975956629,
        "chrf-58": 0.39390588829671036,
        "chrf-35": 0.47557127143314615,
        "chrf-192": 0.3313350736609332,
        "chrf-26": 0.3755394921802024,
        "chrf-176": 0.47947164703684547,
        "chrf-142": 0.28726136999729684,
        "chrf-22": 0.2815353883425621,
        "chrf-154": 0.5445823253192996,
        "chrf-109": 0.3626073001758865,
        "chrf-8": 0.36575642631886374,
        "chrf-7": 0.6542087858930491,
        "chrf-23": 0.09642040600685474,
        "chrf-56": 0.42862897493573593,
        "chrf-60": 0.5239984940213589,
        "rougel-166": 0.38036809815950917,
        "rougel-28": 0.37768240343347637,
        "rougel-6": 0.4742268041237113,
        "rougel-193": 0.5132743362831858,
        "rougel-71": 0.6624203821656051,
        "rougel-63": 0.7058823529411765,
        "rougel-58": 0.34224598930481287,
        "rougel-35": 0.40601503759398494,
        "rougel-192": 0.3211009174311927,
        "rougel-26": 0.4000000000000001,
        "rougel-176": 0.6168224299065419,
        "rougel-142": 0.26573426573426573,
        "rougel-22": 0.18401937046004843,
        "rougel-154": 0.6620689655172414,
        "rougel-109": 0.42857142857142855,
        "rougel-8": 0.39344262295081966,
        "rougel-7": 0.5389221556886227,
        "rougel-23": 0.09230769230769231,
        "rougel-56": 0.5663716814159292,
        "rougel-60": 0.4933333333333333,
        "meteor-166": 0.42734004600772596,
        "meteor-28": 0.6384396608437615,
        "meteor-6": 0.4080944350758853,
        "meteor-193": 0.5087451108671268,
        "meteor-71": 0.7531893410637448,
        "meteor-63": 0.8821628660804041,
        "meteor-58": 0.5527241183844709,
        "meteor-35": 0.5423070128952482,
        "meteor-192": 0.4627897165810769,
        "meteor-26": 0.48880452313445105,
        "meteor-176": 0.5907960199004976,
        "meteor-142": 0.3931697792341574,
        "meteor-22": 0.3233027111895953,
        "meteor-154": 0.7575854054570345,
        "meteor-109": 0.43836994345367536,
        "meteor-8": 0.47780471931491486,
        "meteor-7": 0.761256620090641,
        "meteor-23": 0.05248564072093483,
        "meteor-56": 0.5725776368833219,
        "meteor-60": 0.5693469795780259,
        "ruby-166": 0.2178217821782178,
        "ruby-28": 0.24561403508771928,
        "ruby-6": 0.32258064516129037,
        "ruby-193": 0.4032258064516129,
        "ruby-71": 0.5368421052631579,
        "ruby-63": 0.5384615384615384,
        "ruby-58": 0.21599999999999997,
        "ruby-35": 0.21126760563380287,
        "ruby-192": 0.21153846153846156,
        "ruby-26": 0.2542372881355932,
        "ruby-176": 0.5161290322580645,
        "ruby-142": 0.1607142857142857,
        "ruby-22": 0.10826210826210825,
        "ruby-154": 0.5421686746987953,
        "ruby-109": 0.22580645161290325,
        "ruby-8": 0.23966942148760328,
        "ruby-7": 0.33333333333333337,
        "ruby-23": 0.048387096774193505,
        "ruby-56": 0.4354838709677419,
        "ruby-60": 0.3295454545454546,
        "codebertscore_f1-166": 0.7634612321853638,
        "codebertscore_f3-166": 0.7701038718223572,
        "codebertscore_f1-28": 0.738409698009491,
        "codebertscore_f3-28": 0.7810847759246826,
        "codebertscore_f1-6": 0.8200927972793579,
        "codebertscore_f3-6": 0.7896407842636108,
        "codebertscore_f1-193": 0.8264392614364624,
        "codebertscore_f3-193": 0.7988422513008118,
        "codebertscore_f1-71": 0.878778338432312,
        "codebertscore_f3-71": 0.9001589417457581,
        "codebertscore_f1-63": 0.9070408344268799,
        "codebertscore_f3-63": 0.9239810109138489,
        "codebertscore_f1-58": 0.7360134124755859,
        "codebertscore_f3-58": 0.7603105902671814,
        "codebertscore_f1-35": 0.8174530863761902,
        "codebertscore_f3-35": 0.8133897185325623,
        "codebertscore_f1-192": 0.7246463894844055,
        "codebertscore_f3-192": 0.7481439113616943,
        "codebertscore_f1-26": 0.7851311564445496,
        "codebertscore_f3-26": 0.7833241820335388,
        "codebertscore_f1-176": 0.8453590273857117,
        "codebertscore_f3-176": 0.8059859871864319,
        "codebertscore_f1-142": 0.7043045163154602,
        "codebertscore_f3-142": 0.7239638566970825,
        "codebertscore_f1-22": 0.6874875426292419,
        "codebertscore_f3-22": 0.7349321842193604,
        "codebertscore_f1-154": 0.8576973676681519,
        "codebertscore_f3-154": 0.8712710738182068,
        "codebertscore_f1-109": 0.7814363241195679,
        "codebertscore_f3-109": 0.7751759886741638,
        "codebertscore_f1-8": 0.7825270891189575,
        "codebertscore_f3-8": 0.7779934406280518,
        "codebertscore_f1-7": 0.8789902329444885,
        "codebertscore_f3-7": 0.8845614194869995,
        "codebertscore_f1-23": 0.5524682998657227,
        "codebertscore_f3-23": 0.5013664960861206,
        "codebertscore_f1-56": 0.8137394189834595,
        "codebertscore_f3-56": 0.8003749251365662,
        "codebertscore_f1-60": 0.8518801331520081,
        "codebertscore_f3-60": 0.8478876352310181,
        "codebertscore_s_f1-166": 0.7818991541862488,
        "codebertscore_s_f3-166": 0.7837609052658081,
        "codebertscore_s_f1-28": 0.7578259110450745,
        "codebertscore_s_f3-28": 0.8045971989631653,
        "codebertscore_s_f1-6": 0.8087584972381592,
        "codebertscore_s_f3-6": 0.7775571942329407,
        "codebertscore_s_f1-193": 0.826454222202301,
        "codebertscore_s_f3-193": 0.7967955470085144,
        "codebertscore_s_f1-71": 0.8785992860794067,
        "codebertscore_s_f3-71": 0.900945782661438,
        "codebertscore_s_f1-63": 0.9099343419075012,
        "codebertscore_s_f3-63": 0.927005410194397,
        "codebertscore_s_f1-58": 0.7676990628242493,
        "codebertscore_s_f3-58": 0.7840607762336731,
        "codebertscore_s_f1-35": 0.8235855102539062,
        "codebertscore_s_f3-35": 0.8214043974876404,
        "codebertscore_s_f1-192": 0.7630599737167358,
        "codebertscore_s_f3-192": 0.7736215591430664,
        "codebertscore_s_f1-26": 0.7985827326774597,
        "codebertscore_s_f3-26": 0.7933103442192078,
        "codebertscore_s_f1-176": 0.8445337414741516,
        "codebertscore_s_f3-176": 0.80280601978302,
        "codebertscore_s_f1-142": 0.7540215849876404,
        "codebertscore_s_f3-142": 0.7647650837898254,
        "codebertscore_s_f1-22": 0.7295073866844177,
        "codebertscore_s_f3-22": 0.7545991539955139,
        "codebertscore_s_f1-154": 0.857057511806488,
        "codebertscore_s_f3-154": 0.8708742260932922,
        "codebertscore_s_f1-109": 0.7792824506759644,
        "codebertscore_s_f3-109": 0.7730016112327576,
        "codebertscore_s_f1-8": 0.8014200925827026,
        "codebertscore_s_f3-8": 0.7920588850975037,
        "codebertscore_s_f1-7": 0.8819567561149597,
        "codebertscore_s_f3-7": 0.8874986171722412,
        "codebertscore_s_f1-23": 0.6602542996406555,
        "codebertscore_s_f3-23": 0.5587575435638428,
        "codebertscore_s_f1-56": 0.8148810267448425,
        "codebertscore_s_f3-56": 0.799278974533081,
        "codebertscore_s_f1-60": 0.8551498651504517,
        "codebertscore_s_f3-60": 0.8489547967910767,
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-192": 3,
        "raw_gpt35_nsnr-192": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-176": 3,
        "raw_gpt35_nswr-176": "3",
        "gpt35_nswr-142": 2,
        "raw_gpt35_nswr-142": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n",
        "snippet": [
            "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n"
        ],
        "simplified": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "task_id": "16",
        "163": "long length = string.length();\n\tlong count = 0;\n\t// convert all characters to lower case\n\tstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\t// make a set from the string, set contains distinct elements\n\tstd::set<char> char_set;\n\tfor (int i = 0; i < length; i++) {\n\t\tchar_set.insert(string[i]);\n\t}\n\treturn char_set.size();",
        "grade-163": {
            "execution": 1
        },
        "28": "std::set<char> chars;\n\tint len = string.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (!chars.count(tolower(string[i])))\n\t\t\tchars.insert(tolower(string[i]));\n\t}\n\treturn chars.size();",
        "grade-28": {
            "execution": 1
        },
        "6": "// Initialize the number of distinct characters\n    long count = 0;\n    // For each character in the string\n    for (int i = 0; i < string.length(); i++) {\n        // For each character up to the current character\n        bool flag = true;\n        for (int j = 0; j < i; j++) {\n            // If they are the same\n            if (string[i] == string[j]) {\n                // Flag that the current character is not distinct\n                flag = false;\n                break;\n            }\n        }\n        // If it is still flagged as a distinct character\n        if (flag) {\n            // Increase the number of distinct characters\n            count++;\n        }\n    }\n    // Return the number of distinct characters\n    return count;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    std::vector<char> char_vector(string.begin(), string.end());\n    std::sort(char_vector.begin(), char_vector.end());\n    std::vector<char>::iterator it;\n    it = std::unique(char_vector.begin(), char_vector.end());\n    char_vector.resize(std::distance(char_vector.begin(), it));\n    return char_vector.size();",
        "grade-190": {
            "execution": 1
        },
        "70": "long res = 0;\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    std::string unique_characters = \"\";\n    for (int i = 0; i < lower_string.length(); i++) {\n        if (unique_characters.find(lower_string[i]) == std::string::npos) {\n            unique_characters += lower_string[i];\n            res++;\n        }\n    }\n    return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Your code here\n    long count = 0;\n    std::string unique;\n    for(int i = 0; i < string.length(); i++){\n        if(unique.find(tolower(string[i])) == std::string::npos){\n            unique += tolower(string[i]);\n            count++;\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n  std::set<char> distinct_chars(string.begin(), string.end());\n  return distinct_chars.size();",
        "grade-57": {
            "execution": 1
        },
        "35": "// Write your code here\n     int count=0;\n     for(int i=0;i<string.length();i++)\n     {\n         for(int j=i+1;j<string.length();j++)\n         {\n             if(string[i]==string[j])\n             {\n                 count++;\n             }\n         }\n     }\n     int a=string.length()-count;\n     return a;",
        "grade-35": {
            "execution": 0
        },
        "189": "long n = string.length();\n\tlong cnt = 0;\n\tstd::map<char, bool> m;\n\tfor (long i = 0; i < n; i++) {\n\t\tchar ch = string[i];\n\t\tm[ch] = true;\n\t}\n\tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\tcnt++;\n\t}\n\treturn cnt;",
        "grade-189": {
            "execution": 0
        },
        "26": "unordered_set<char> char_set;\n    for (auto c : string) {\n        if (c >= 'a' && c <= 'z') {\n            char_set.insert(c);\n        } else if (c >= 'A' && c <= 'Z') {\n            char_set.insert(c);\n        }\n    }\n    return char_set.size();",
        "grade-26": {
            "execution": 0
        },
        "173": "std::unordered_set<char> set;\n    for (auto letter : string)\n        set.insert(letter);\n    return set.size();",
        "grade-173": {
            "execution": 0
        },
        "139": "std::set<char> result;\n    for (const auto& c : string) {\n        result.insert(std::tolower(c));\n    }\n    return result.size();",
        "grade-139": {
            "execution": 1
        },
        "22": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n  std::set<char> s(string.begin(), string.end());\n  return s.size();",
        "grade-22": {
            "execution": 1
        },
        "151": "std::set<char> s;\n    for(auto i = string.begin(); i != string.end(); i++) {\n        s.insert(tolower(*i));\n    }\n    return s.size();",
        "grade-151": {
            "execution": 1
        },
        "108": "long counter = 0;\n  std::string new_string = \"\";\n  for (auto &c : string) {\n    if (new_string.find(std::tolower(c)) == std::string::npos) {\n      new_string += std::tolower(c);\n      counter++;\n    }\n  }\n  return counter;",
        "grade-108": {
            "execution": 1
        },
        "8": "//delete this part and enter your code here\n    std::set<char> s;\n    for(auto i:string)\n        s.insert(tolower(i));\n    return s.size();",
        "grade-8": {
            "execution": 1
        },
        "7": "long size = string.size();\n\tstd::sort(string.begin(), string.end());\n\tint count = 1;\n\tfor (int i = 1; i < size; i++) {\n\t\tif (string[i] != string[i - 1])\n\t\t\tcount++;\n\t}\n\treturn count;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::set<char> set;\n  long len = string.length();\n  for (long i = 0; i < len; i++) {\n    set.insert(tolower(string[i]));\n  }\n  return set.size();",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<char> v(string.begin(), string.end());\n\tstd::sort(v.begin(), v.end());\n\tv.erase(std::unique(v.begin(), v.end()), v.end());\n\treturn v.size();",
        "grade-55": {
            "execution": 0
        },
        "59": "int res = 0;\n    int len = string.length();\n    int freq[256] = {0};\n    for(int i = 0; i < len; i++) {\n        if(!freq[tolower(string[i])]) {\n            res++;\n            freq[tolower(string[i])]++;\n        }\n    }\n    return res;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.347695024909274,
        "bleu-28": 0.20560429418467285,
        "bleu-6": 0.24066440929359637,
        "bleu-190": 0.20768058139128648,
        "bleu-70": 0.2716171107710814,
        "bleu-62": 0.20342256154962424,
        "bleu-57": 0.1314698532805012,
        "bleu-35": 0.26222027454151103,
        "bleu-189": 0.19951554648004824,
        "bleu-26": 0.0712399800526092,
        "bleu-173": 0.011163958406433245,
        "bleu-139": 0.032502279762252215,
        "bleu-22": 0.1314698532805012,
        "bleu-151": 0.11443490857451374,
        "bleu-108": 0.03525909682487013,
        "bleu-8": 0.027502515713937546,
        "bleu-7": 0.17659806732658268,
        "bleu-23": 0.12424460544129058,
        "bleu-55": 0.14291674634800167,
        "bleu-59": 0.18171345949335627,
        "codebleu-163": 0.5805506295693117,
        "codebleu-28": 0.40747440581771205,
        "codebleu-6": 0.5267455263051265,
        "codebleu-190": 0.5320516593028728,
        "codebleu-70": 0.5552905343144441,
        "codebleu-62": 0.4042899667740427,
        "codebleu-57": 0.3285353956329488,
        "codebleu-35": 0.4850354112752726,
        "codebleu-189": 0.48216773279798947,
        "codebleu-26": 0.2581526141568824,
        "codebleu-173": 0.1392736087914829,
        "codebleu-139": 0.1770167763275144,
        "codebleu-22": 0.3285353956329488,
        "codebleu-151": 0.2813181420816448,
        "codebleu-108": 0.24254072528836781,
        "codebleu-8": 0.18663074058581133,
        "codebleu-7": 0.3877575949697704,
        "codebleu-23": 0.30937864496407397,
        "codebleu-55": 0.40288453616049036,
        "codebleu-59": 0.3794715068404756,
        "chrf-163": 0.41251009014725626,
        "chrf-28": 0.25994501391902836,
        "chrf-6": 0.36049860956413793,
        "chrf-190": 0.3543738487602589,
        "chrf-70": 0.29524767834725396,
        "chrf-62": 0.2509894452877117,
        "chrf-57": 0.3669119733182436,
        "chrf-35": 0.25692419118527626,
        "chrf-189": 0.23159250778737225,
        "chrf-26": 0.16079968274223405,
        "chrf-173": 0.13253770854442073,
        "chrf-139": 0.16743328181653452,
        "chrf-22": 0.29981821210475146,
        "chrf-151": 0.21280340773797277,
        "chrf-108": 0.17882458362574613,
        "chrf-8": 0.1518691170042577,
        "chrf-7": 0.2588514256683207,
        "chrf-23": 0.20853259094110005,
        "chrf-55": 0.23433259181313348,
        "chrf-59": 0.2148705443514202,
        "rougel-163": 0.46696035242290745,
        "rougel-28": 0.47916666666666663,
        "rougel-6": 0.4175824175824176,
        "rougel-190": 0.38866396761133604,
        "rougel-70": 0.4680851063829787,
        "rougel-62": 0.42574257425742573,
        "rougel-57": 0.41573033707865165,
        "rougel-35": 0.5071770334928231,
        "rougel-189": 0.3791469194312796,
        "rougel-26": 0.32653061224489793,
        "rougel-173": 0.2251655629139073,
        "rougel-139": 0.27329192546583847,
        "rougel-22": 0.41573033707865165,
        "rougel-151": 0.4022988505747126,
        "rougel-108": 0.25396825396825395,
        "rougel-8": 0.25609756097560976,
        "rougel-7": 0.44791666666666663,
        "rougel-23": 0.4318181818181818,
        "rougel-55": 0.41624365482233505,
        "rougel-59": 0.3838383838383838,
        "meteor-163": 0.3919325313807532,
        "meteor-28": 0.3685693929894557,
        "meteor-6": 0.37321265093550693,
        "meteor-190": 0.33317586293776774,
        "meteor-70": 0.3850015792277341,
        "meteor-62": 0.362745813974009,
        "meteor-57": 0.2678037739965096,
        "meteor-35": 0.36682545528524524,
        "meteor-189": 0.3215557285447111,
        "meteor-26": 0.25879948758616483,
        "meteor-173": 0.14260110555774225,
        "meteor-139": 0.18108453892333432,
        "meteor-22": 0.2678037739965096,
        "meteor-151": 0.2938339667449,
        "meteor-108": 0.20725662780237417,
        "meteor-8": 0.16729240282685512,
        "meteor-7": 0.3261997720148191,
        "meteor-23": 0.2859442145156431,
        "meteor-55": 0.3225158329951934,
        "meteor-59": 0.30145765881433517,
        "ruby-163": 0.2727272727272727,
        "ruby-28": 0.33884297520661155,
        "ruby-6": 0.22368421052631582,
        "ruby-190": 0.2777777777777778,
        "ruby-70": 0.2727272727272727,
        "ruby-62": 0.2892561983471075,
        "ruby-57": 0.30578512396694213,
        "ruby-35": 0.3801652892561983,
        "ruby-189": 0.25619834710743805,
        "ruby-26": 0.23140495867768596,
        "ruby-173": 0.14049586776859502,
        "ruby-139": 0.15702479338842978,
        "ruby-22": 0.30578512396694213,
        "ruby-151": 0.25619834710743805,
        "ruby-108": 0.14876033057851235,
        "ruby-8": 0.15702479338842978,
        "ruby-7": 0.30578512396694213,
        "ruby-23": 0.2892561983471075,
        "ruby-55": 0.28099173553719003,
        "ruby-59": 0.28099173553719003,
        "codebertscore_f1-163": 0.7942330837249756,
        "codebertscore_f3-163": 0.8122037053108215,
        "codebertscore_f1-28": 0.8085739612579346,
        "codebertscore_f3-28": 0.7913424968719482,
        "codebertscore_f1-6": 0.7441384792327881,
        "codebertscore_f3-6": 0.7781607508659363,
        "codebertscore_f1-190": 0.7625138163566589,
        "codebertscore_f3-190": 0.7449228763580322,
        "codebertscore_f1-70": 0.7825055718421936,
        "codebertscore_f3-70": 0.7826020121574402,
        "codebertscore_f1-62": 0.7772629261016846,
        "codebertscore_f3-62": 0.7808370590209961,
        "codebertscore_f1-57": 0.7674599289894104,
        "codebertscore_f3-57": 0.7164369225502014,
        "codebertscore_f1-35": 0.7967944145202637,
        "codebertscore_f3-35": 0.7866487503051758,
        "codebertscore_f1-189": 0.7693526744842529,
        "codebertscore_f3-189": 0.760539710521698,
        "codebertscore_f1-26": 0.7007878422737122,
        "codebertscore_f3-26": 0.6968573927879333,
        "codebertscore_f1-173": 0.6977208852767944,
        "codebertscore_f3-173": 0.6739572882652283,
        "codebertscore_f1-139": 0.7269086241722107,
        "codebertscore_f3-139": 0.6987985372543335,
        "codebertscore_f1-22": 0.7640780806541443,
        "codebertscore_f3-22": 0.7018933296203613,
        "codebertscore_f1-151": 0.7851796746253967,
        "codebertscore_f3-151": 0.7537713646888733,
        "codebertscore_f1-108": 0.7224704623222351,
        "codebertscore_f3-108": 0.7129354476928711,
        "codebertscore_f1-8": 0.7070266008377075,
        "codebertscore_f3-8": 0.7070923447608948,
        "codebertscore_f1-7": 0.7863859534263611,
        "codebertscore_f3-7": 0.7693166136741638,
        "codebertscore_f1-23": 0.7902086973190308,
        "codebertscore_f3-23": 0.7659750580787659,
        "codebertscore_f1-55": 0.7211347818374634,
        "codebertscore_f3-55": 0.6815653443336487,
        "codebertscore_f1-59": 0.7946895956993103,
        "codebertscore_f3-59": 0.783661961555481,
        "codebertscore_s_f1-163": 0.7976493239402771,
        "codebertscore_s_f3-163": 0.8150728344917297,
        "codebertscore_s_f1-28": 0.8109378218650818,
        "codebertscore_s_f3-28": 0.7916950583457947,
        "codebertscore_s_f1-6": 0.7478653192520142,
        "codebertscore_s_f3-6": 0.7805848717689514,
        "codebertscore_s_f1-190": 0.7701441645622253,
        "codebertscore_s_f3-190": 0.7536430954933167,
        "codebertscore_s_f1-70": 0.7892675995826721,
        "codebertscore_s_f3-70": 0.7884063124656677,
        "codebertscore_s_f1-62": 0.778343141078949,
        "codebertscore_s_f3-62": 0.7820432186126709,
        "codebertscore_s_f1-57": 0.7732408046722412,
        "codebertscore_s_f3-57": 0.7212685346603394,
        "codebertscore_s_f1-35": 0.7985501885414124,
        "codebertscore_s_f3-35": 0.7883200645446777,
        "codebertscore_s_f1-189": 0.7732877731323242,
        "codebertscore_s_f3-189": 0.7640929222106934,
        "codebertscore_s_f1-26": 0.7045676708221436,
        "codebertscore_s_f3-26": 0.6997156143188477,
        "codebertscore_s_f1-173": 0.6906945705413818,
        "codebertscore_s_f3-173": 0.6628257036209106,
        "codebertscore_s_f1-139": 0.7217665314674377,
        "codebertscore_s_f3-139": 0.6932958960533142,
        "codebertscore_s_f1-22": 0.7656008005142212,
        "codebertscore_s_f3-22": 0.7041099071502686,
        "codebertscore_s_f1-151": 0.7857659459114075,
        "codebertscore_s_f3-151": 0.7543438673019409,
        "codebertscore_s_f1-108": 0.7274356484413147,
        "codebertscore_s_f3-108": 0.7174093127250671,
        "codebertscore_s_f1-8": 0.706487238407135,
        "codebertscore_s_f3-8": 0.7065103650093079,
        "codebertscore_s_f1-7": 0.791612982749939,
        "codebertscore_s_f3-7": 0.774656355381012,
        "codebertscore_s_f1-23": 0.7917338013648987,
        "codebertscore_s_f3-23": 0.7657465934753418,
        "codebertscore_s_f1-55": 0.7305313348770142,
        "codebertscore_s_f3-55": 0.6883443593978882,
        "codebertscore_s_f1-59": 0.7987321019172668,
        "codebertscore_s_f3-59": 0.7854829430580139,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// total_match([], []) \u279e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n",
        "snippet": [
            "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n"
        ],
        "simplified": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
        "task_id": "74",
        "163": "int sum1 = 0, sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0; i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\treturn sum1 < sum2 ? lst1 : lst2;",
        "grade-163": {
            "execution": 0
        },
        "28": "int sum1 = 0;\n  int sum2 = 0;\n  for(int i = 0; i < lst1.size(); i++){\n      for(int j = 0; j < lst1[i].size(); j++){\n          sum1 += (int)lst1[i][j];\n      }\n  }\n  for(int i = 0; i < lst2.size(); i++){\n      for(int j = 0; j < lst2[i].size(); j++){\n          sum2 += (int)lst2[i][j];\n      }\n  }\n  if(sum1 < sum2){\n      return lst1;\n  }\n  return lst2;",
        "grade-28": {
            "execution": 0
        },
        "6": "int lst1c=0,lst2c=0;\n  for(int i=0;i<lst1.size();i++)\n    lst1c+=lst1[i].size();\n  for(int i=0;i<lst2.size();i++)\n    lst2c+=lst2[i].size();\n  if(lst1c<lst2c)\n    return lst1;\n  return lst2;",
        "grade-6": {
            "execution": 0
        },
        "189": "int count1 = 0, count2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn lst1;\n\t}\n\treturn lst2;",
        "grade-189": {
            "execution": 0
        },
        "70": "int sum1 = 0, sum2 = 0;\n\tfor (auto &elem : lst1) {\n\t\tsum1 += elem.size();\n\t}\n\tfor (auto &elem : lst2) {\n\t\tsum2 += elem.size();\n\t}\n\tif (sum1 <= sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<std::string> result;\n\tint lst1_size = 0;\n\tint lst2_size = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_size += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_size += lst2[i].size();\n\t}\n\tif (lst1_size < lst2_size) {\n\t\tresult = lst1;\n\t}\n\telse if (lst1_size > lst2_size) {\n\t\tresult = lst2;\n\t}\n\telse {\n\t\tresult = lst1;\n\t}\n\treturn result;",
        "grade-62": {
            "execution": 1
        },
        "57": "// your code here\n  std::vector<std::string> :: iterator itr;\n  int sum1=0,sum2=0;\n  for(itr=lst1.begin();itr!=lst1.end();itr++)\n  {\n  \tsum1+=itr->length();\n  }\n  for(itr=lst2.begin();itr!=lst2.end();itr++)\n  {\n  \tsum2+=itr->length();\n  }\n  if(sum1<sum2)\n  {\n  \treturn lst1;\n  }\n  else\n  {\n  \treturn lst2;\n  }",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<std::string> empty;\n\tint sum1 = 0, sum2 = 0;\n\tif (lst1.size() == 0 && lst2.size() == 0) {\n\t\treturn empty;\n\t}\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}",
        "grade-35": {
            "execution": 1
        },
        "188": "int len1 = 0, len2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlen1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlen2 += lst2[i].size();\n\t}\n\tif (len1 == len2) {\n\t\treturn lst1;\n\t}\n\tif (len1 < len2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}",
        "grade-188": {
            "execution": 1
        },
        "26": "if (lst1.size() == 0) return lst1;\n\tif (lst2.size() == 0) return lst2;\n\tlong int count1=0, count2=0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t{\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++)\n\t{\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 == count2) return lst1;\n\tif (count1 < count2) return lst1;\n\telse return lst2;",
        "grade-26": {
            "execution": 1
        },
        "173": "int lst1Len = 0;\n\tint lst2Len = 0;\n\tfor (auto i = lst1.begin(); i != lst1.end(); i++) {\n\t\tlst1Len += (*i).length();\n\t}\n\tfor (auto i = lst2.begin(); i != lst2.end(); i++) {\n\t\tlst2Len += (*i).length();\n\t}\n\treturn lst1Len < lst2Len ? lst1 : lst2;",
        "grade-173": {
            "execution": 0
        },
        "139": "int count1=0,count2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\t{\n\t\tcount1=count1+lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\tcount2=count2+lst2[i].size();\n\t}\n\tstd::vector<std::string> lst3;\n\tif(count1<count2)\n\t{\n\t\tlst3=lst1;\n\t}\n\telse if(count1>count2)\n\t{\n\t\tlst3=lst2;\n\t}\n\telse if(count1==count2)\n\t{\n\t\tlst3=lst1;\n\t}\n\treturn lst3;",
        "grade-139": {
            "execution": 1
        },
        "22": "int a = 0, b = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t\ta += lst1[i].size();\n\tfor (int i = 0; i < lst2.size(); i++)\n\t\tb += lst2[i].size();\n\tif (a == b)\n\t\treturn lst1;\n\telse if (a < b)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;",
        "grade-22": {
            "execution": 1
        },
        "151": "int total1=0,total2=0;\n    for(int i=0;i<lst1.size();i++)\n    {\n        total1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++)\n    {\n        total2+=lst2[i].size();\n    }\n    if(total1>total2)\n    {\n        return lst2;\n    }\n    else if(total1<total2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return lst1;\n    }",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> result;\n\tint lst1Count = 0;\n\tint lst2Count = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1Count += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2Count += lst2[i].size();\n\t}\n\tif (lst1Count == lst2Count) {\n\t\treturn lst1;\n\t}\n\telse if (lst1Count < lst2Count) {\n\t\treturn lst1;\n\t}\n\telse if (lst1Count > lst2Count) {\n\t\treturn lst2;\n\t}\n\treturn result;",
        "grade-108": {
            "execution": 1
        },
        "8": "int count1 = 0, count2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 == count2) return lst1;\n\telse if (count1 < count2) return lst1;\n\telse return lst2;",
        "grade-8": {
            "execution": 1
        },
        "7": "int l1_size{}, l2_size{};\n  for(int i{}; i < lst1.size(); ++i) {\n    l1_size += lst1[i].size();\n  }\n  for(int i{}; i < lst2.size(); ++i) {\n    l2_size += lst2[i].size();\n  }\n  return l1_size > l2_size ? lst2 : lst1;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> ans;\n    int s1 = 0, s2 = 0;\n    for(int i = 0; i < lst1.size(); i++) s1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++) s2 += lst2[i].size();\n    if(s1 == s2)\n        return lst1;\n    if(s1 < s2)\n        return lst1;\n    else\n        return lst2;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<std::string> temp, cmp;\n \tint sum1 = 0, sum2 = 0;\n \tfor(int i = 0; i < lst1.size(); i++)\n \t{\n \t\tsum1 += lst1[i].size();\n \t}\n \tfor(int i = 0; i < lst2.size(); i++)\n \t{\n \t\tsum2 += lst2[i].size();\n \t}\n \tif(sum1 == sum2)\n \t{\n \t\ttemp = lst1;\n \t}\n \telse if(sum1 < sum2)\n \t{\n \t\ttemp = lst1;\n \t}\n \telse if(sum1 > sum2)\n \t{\n \t\ttemp = lst2;\n \t}\n \treturn temp;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> matchLst;\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\tmatchLst = lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\tmatchLst = lst2;\n\t}\n\telse {\n\t\tmatchLst = lst1;\n\t}\n\treturn matchLst;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.5775683027665905,
        "bleu-28": 0.3532377057434659,
        "bleu-6": 0.6258215946301565,
        "bleu-189": 0.5921817331277872,
        "bleu-70": 0.18343898193647643,
        "bleu-62": 0.4208211005998196,
        "bleu-57": 0.16792280581236402,
        "bleu-35": 0.3653574460324284,
        "bleu-188": 0.5072321700310414,
        "bleu-26": 0.42145531282690496,
        "bleu-173": 0.30804221549802496,
        "bleu-139": 0.3724653396481043,
        "bleu-22": 0.5789645687678645,
        "bleu-151": 0.5089371761553673,
        "bleu-108": 0.41968816568127,
        "bleu-8": 0.5789645687678645,
        "bleu-7": 0.3891367956947422,
        "bleu-23": 0.5215256994371419,
        "bleu-55": 0.3934917371727291,
        "bleu-59": 0.40418652931805277,
        "codebleu-163": 0.7115839920771708,
        "codebleu-28": 0.7608919204667105,
        "codebleu-6": 0.7790321795172747,
        "codebleu-189": 0.7193169617234222,
        "codebleu-70": 0.40889204655014744,
        "codebleu-62": 0.7329901629430934,
        "codebleu-57": 0.6204533439585863,
        "codebleu-35": 0.7545987078186625,
        "codebleu-188": 0.7463391703729234,
        "codebleu-26": 0.7079352804887387,
        "codebleu-173": 0.6305002904065888,
        "codebleu-139": 0.7383469669560652,
        "codebleu-22": 0.7737093544343687,
        "codebleu-151": 0.7288402154337286,
        "codebleu-108": 0.7423604936749497,
        "codebleu-8": 0.7797794001539392,
        "codebleu-7": 0.5885518562344806,
        "codebleu-23": 0.7900396387192195,
        "codebleu-55": 0.7587948857138179,
        "codebleu-59": 0.7652482274592223,
        "chrf-163": 0.5746400507347315,
        "chrf-28": 0.5545928220986276,
        "chrf-6": 0.5702859999171769,
        "chrf-189": 0.5646764733516636,
        "chrf-70": 0.3663182789272081,
        "chrf-62": 0.44257962582746335,
        "chrf-57": 0.42143558351629373,
        "chrf-35": 0.5543635286974998,
        "chrf-188": 0.5583896817690438,
        "chrf-26": 0.5249510293595772,
        "chrf-173": 0.3706602967310532,
        "chrf-139": 0.4658017241566776,
        "chrf-22": 0.5608815101843881,
        "chrf-151": 0.5352589962287267,
        "chrf-108": 0.4813306308594797,
        "chrf-8": 0.5766208921409555,
        "chrf-7": 0.3878499627347251,
        "chrf-23": 0.5742651145258171,
        "chrf-55": 0.536730718833487,
        "chrf-59": 0.5384128005607445,
        "rougel-163": 0.7738095238095237,
        "rougel-28": 0.5999999999999999,
        "rougel-6": 0.8070175438596491,
        "rougel-189": 0.7796610169491526,
        "rougel-70": 0.4444444444444444,
        "rougel-62": 0.6824644549763034,
        "rougel-57": 0.4901960784313726,
        "rougel-35": 0.6521739130434783,
        "rougel-188": 0.7395833333333334,
        "rougel-26": 0.6604651162790698,
        "rougel-173": 0.6120218579234973,
        "rougel-139": 0.6301369863013698,
        "rougel-22": 0.7650273224043714,
        "rougel-151": 0.7604166666666667,
        "rougel-108": 0.6697674418604651,
        "rougel-8": 0.7650273224043714,
        "rougel-7": 0.6627906976744187,
        "rougel-23": 0.7216494845360825,
        "rougel-55": 0.6484018264840183,
        "rougel-59": 0.6666666666666666,
        "meteor-163": 0.6737136241291148,
        "meteor-28": 0.5650278372591008,
        "meteor-6": 0.8094455467372135,
        "meteor-189": 0.8052250455765458,
        "meteor-70": 0.32960530106197544,
        "meteor-62": 0.6140416003065539,
        "meteor-57": 0.5181612990681536,
        "meteor-35": 0.7046649133681719,
        "meteor-188": 0.6165999116273609,
        "meteor-26": 0.6174547213154395,
        "meteor-173": 0.4739649419415351,
        "meteor-139": 0.5830475502588178,
        "meteor-22": 0.6166107764136716,
        "meteor-151": 0.7203382936507936,
        "meteor-108": 0.6071817192600653,
        "meteor-8": 0.6166107764136716,
        "meteor-7": 0.5827010463873438,
        "meteor-23": 0.6318940856223706,
        "meteor-55": 0.6105240273947113,
        "meteor-59": 0.6107044176961921,
        "ruby-163": 0.7045454545454546,
        "ruby-28": 0.4295774647887324,
        "ruby-6": 0.7613636363636364,
        "ruby-189": 0.696629213483146,
        "ruby-70": 0.30681818181818177,
        "ruby-62": 0.5853658536585367,
        "ruby-57": 0.39655172413793105,
        "ruby-35": 0.528169014084507,
        "ruby-188": 0.625,
        "ruby-26": 0.5590551181102362,
        "ruby-173": 0.4736842105263158,
        "ruby-139": 0.48091603053435117,
        "ruby-22": 0.6736842105263158,
        "ruby-151": 0.6442307692307692,
        "ruby-108": 0.5669291338582677,
        "ruby-8": 0.6736842105263158,
        "ruby-7": 0.5681818181818181,
        "ruby-23": 0.6603773584905661,
        "ruby-55": 0.5343511450381679,
        "ruby-59": 0.5625,
        "codebertscore_f1-163": 0.9251025915145874,
        "codebertscore_f3-163": 0.9231492280960083,
        "codebertscore_f1-28": 0.886515200138092,
        "codebertscore_f3-28": 0.8953125476837158,
        "codebertscore_f1-6": 0.9200204610824585,
        "codebertscore_f3-6": 0.9238689541816711,
        "codebertscore_f1-189": 0.9318618178367615,
        "codebertscore_f3-189": 0.9312883019447327,
        "codebertscore_f1-70": 0.8625380992889404,
        "codebertscore_f3-70": 0.8692715167999268,
        "codebertscore_f1-62": 0.8771316409111023,
        "codebertscore_f3-62": 0.8922101259231567,
        "codebertscore_f1-57": 0.8583107590675354,
        "codebertscore_f3-57": 0.8876789808273315,
        "codebertscore_f1-35": 0.8946365118026733,
        "codebertscore_f3-35": 0.9112667441368103,
        "codebertscore_f1-188": 0.9251250624656677,
        "codebertscore_f3-188": 0.928464412689209,
        "codebertscore_f1-26": 0.9052965641021729,
        "codebertscore_f3-26": 0.913659930229187,
        "codebertscore_f1-173": 0.8846893906593323,
        "codebertscore_f3-173": 0.8887419700622559,
        "codebertscore_f1-139": 0.8893522620201111,
        "codebertscore_f3-139": 0.9134053587913513,
        "codebertscore_f1-22": 0.8941425681114197,
        "codebertscore_f3-22": 0.8928942680358887,
        "codebertscore_f1-151": 0.9256453514099121,
        "codebertscore_f3-151": 0.9350491166114807,
        "codebertscore_f1-108": 0.8724743723869324,
        "codebertscore_f3-108": 0.8899590373039246,
        "codebertscore_f1-8": 0.9223329424858093,
        "codebertscore_f3-8": 0.927802562713623,
        "codebertscore_f1-7": 0.8857043385505676,
        "codebertscore_f3-7": 0.8792296648025513,
        "codebertscore_f1-23": 0.8992066383361816,
        "codebertscore_f3-23": 0.9100930690765381,
        "codebertscore_f1-55": 0.886390209197998,
        "codebertscore_f3-55": 0.9110926985740662,
        "codebertscore_f1-59": 0.8967746496200562,
        "codebertscore_f3-59": 0.9187214374542236,
        "codebertscore_s_f1-163": 0.9687094688415527,
        "codebertscore_s_f3-163": 0.9666958451271057,
        "codebertscore_s_f1-28": 0.9484705328941345,
        "codebertscore_s_f3-28": 0.9549676775932312,
        "codebertscore_s_f1-6": 0.9639611840248108,
        "codebertscore_s_f3-6": 0.9664787650108337,
        "codebertscore_s_f1-189": 0.9711795449256897,
        "codebertscore_s_f3-189": 0.9702755808830261,
        "codebertscore_s_f1-70": 0.9409229159355164,
        "codebertscore_s_f3-70": 0.941112220287323,
        "codebertscore_s_f1-62": 0.9430529475212097,
        "codebertscore_s_f3-62": 0.9528278112411499,
        "codebertscore_s_f1-57": 0.9379135966300964,
        "codebertscore_s_f3-57": 0.9512773156166077,
        "codebertscore_s_f1-35": 0.9523166418075562,
        "codebertscore_s_f3-35": 0.9612225890159607,
        "codebertscore_s_f1-188": 0.9656681418418884,
        "codebertscore_s_f3-188": 0.9681789875030518,
        "codebertscore_s_f1-26": 0.954816997051239,
        "codebertscore_s_f3-26": 0.9618028998374939,
        "codebertscore_s_f1-173": 0.9448583126068115,
        "codebertscore_s_f3-173": 0.9480175971984863,
        "codebertscore_s_f1-139": 0.9491918683052063,
        "codebertscore_s_f3-139": 0.9624995589256287,
        "codebertscore_s_f1-22": 0.9532902836799622,
        "codebertscore_s_f3-22": 0.9529433846473694,
        "codebertscore_s_f1-151": 0.9674122333526611,
        "codebertscore_s_f3-151": 0.9720878005027771,
        "codebertscore_s_f1-108": 0.9397715926170349,
        "codebertscore_s_f3-108": 0.9520882368087769,
        "codebertscore_s_f1-8": 0.9646528363227844,
        "codebertscore_s_f3-8": 0.9683250188827515,
        "codebertscore_s_f1-7": 0.9509591460227966,
        "codebertscore_s_f3-7": 0.9474736452102661,
        "codebertscore_s_f1-23": 0.9579562544822693,
        "codebertscore_s_f3-23": 0.9619056582450867,
        "codebertscore_s_f1-55": 0.9489587545394897,
        "codebertscore_s_f3-55": 0.9612385034561157,
        "codebertscore_s_f1-59": 0.9542545676231384,
        "codebertscore_s_f3-59": 0.9645379185676575,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n",
        "snippet": [
            "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n"
        ],
        "simplified": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
        "task_id": "127",
        "163": "std::set<long> interval1_set;\n\tstd::set<long> interval2_set;\n\tint count_prime = 0;\n\tint counter_prime = 0;\n\tstd::vector<long> prime_vec;\n\tbool flag = false;\n\tfor (long i = std::get<0>(interval1); i <= std::get<1>(interval1); i++) {\n\t\tinterval1_set.insert(i);\n\t}\n\tfor (long i = std::get<0>(interval2); i <= std::get<1>(interval2); i++) {\n\t\tinterval2_set.insert(i);\n\t}\n\tstd::set<long>::iterator it;\n\tfor (it = interval1_set.begin(); it != interval1_set.end(); it++) {\n\t\tif (interval2_set.find(*it) != interval2_set.end()) {\n\t\t\tflag = true;\n\t\t\tprime_vec.push_back(*it);\n\t\t}\n\t}\n\tif (flag == false)\n\t\treturn \"NO\";\n\tfor (long i = 0; i < prime_vec.size(); i++) {\n\t\tcounter_prime = 0;\n\t\tfor (long j = 1; j <= prime_vec[i]; j++) {\n\t\t\tif (prime_vec[i] % j == 0)\n\t\t\t\tcounter_prime++;\n\t\t}\n\t\tif (counter_prime == 2)\n\t\t\tcount_prime++;\n\t}\n\tif (count_prime == 0)\n\t\treturn \"NO\";\n\treturn \"YES\";",
        "grade-163": {
            "execution": 0
        },
        "28": "long x1 = std::get<0>(interval1);\n    long y1 = std::get<1>(interval1);\n    long x2 = std::get<0>(interval2);\n    long y2 = std::get<1>(interval2);\n    if (x1 > y1 || x2 > y2) {\n        return \"NO\";\n    }\n    // overlap intervals\n    if (x1 <= x2 && x2 <= y1) {\n        if (y1 <= y2) {\n            return (y1 - x2 + 1) > 1 && (y1 - x2 + 1) < 4 ? \"YES\" : \"NO\";\n        } else {\n            return (y2 - x2 + 1) > 1 && (y2 - x2 + 1) < 4 ? \"YES\" : \"NO\";\n        }\n    }\n    // overlap intervals\n    if (x2 <= x1 && x1 <= y2) {\n        if (y2 <= y1) {\n            return (y2 - x1 + 1) > 1 && (y2 - x1 + 1) < 4 ? \"YES\" : \"NO\";\n        } else {\n            return (y1 - x1 + 1) > 1 && (y1 - x1 + 1) < 4 ? \"YES\" : \"NO\";\n        }\n    }\n    return \"NO\";",
        "grade-28": {
            "execution": 0
        },
        "6": "long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    long len = end - start;\n    if (len < 0) {\n        return \"NO\";\n    }\n    if (len <= 2) {\n        return \"NO\";\n    }\n    for (long i = 2; i < len; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
        "grade-6": {
            "execution": 0
        },
        "189": "// Your code here!\n    // todo\n    return \"NO\";",
        "grade-189": {
            "execution": 0
        },
        "70": "auto n1 = std::get<0>(interval1);\n    auto n2 = std::get<1>(interval1);\n    auto m1 = std::get<0>(interval2);\n    auto m2 = std::get<1>(interval2);\n    auto bigger = (n1 > m1) ? n1 : m1;\n    auto smaller = (n2 < m2) ? n2 : m2;\n    if (bigger <= smaller) {\n        auto common = std::abs(bigger - smaller) + 1;\n        if (common <= 1) {\n            return \"NO\";\n        }\n        for (auto i = 2; i < common; ++i) {\n            if (common % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-70": {
            "execution": 0
        },
        "62": "long lower = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  long upper = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  if (lower > upper) return \"NO\";\n  int length = std::abs(upper - lower) + 1;\n  return std::string(\"YES\");",
        "grade-62": {
            "execution": 0
        },
        "57": "int start = max(get<0>(interval1), get<0>(interval2));\n  int end = min(get<1>(interval1), get<1>(interval2));\n  if (start <= end) {\n    for (int i = 2; i < end - start + 1; i++) {\n      if ((end - start + 1) % i == 0) return \"NO\";\n    }\n    return \"YES\";\n  }\n  return \"NO\";",
        "grade-57": {
            "execution": 0
        },
        "35": "//x,y,z\n    //x,y,z\n    //x,y\n    //x,y\n    std::vector<long> points{std::get<0>(interval1),std::get<1>(interval1),std::get<0>(interval2),std::get<1>(interval2)};\n    std::sort(points.begin(),points.end());\n    // x,x,y,z\n\n    long first{0},second{0};\n    //intersects\n    if(points[1] < points[2]){\n        first = points[1];\n        second = points[2];\n    }\n    else if(points[1] == points[2]){\n        return \"YES\";\n    }\n    //not intersects\n    else{\n        return \"NO\";\n    }\n    long diff = second - first;\n    if(diff == 0){\n        return \"YES\";\n    }\n    bool isPrime = true;\n    for(long i = 2; i < sqrt(diff) + 1; ++i){\n        if(diff % i == 0){\n            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-35": {
            "execution": 0
        },
        "188": "long start, end;\n    std::tie(start, end) = interval1;\n    if (start > end)\n        std::swap(start, end);\n    long start2, end2;\n    std::tie(start2, end2) = interval2;\n    if (start2 > end2)\n        std::swap(start2, end2);\n    if (end < start2 || end2 < start)\n        return \"NO\";\n    long intsectStart = std::max(start, start2);\n    long intsectEnd = std::min(end, end2);\n    long length = intsectEnd - intsectStart + 1;\n    long sqrtLength = sqrt(length);\n    for (long i = 2; i <= sqrtLength; i++) {\n        if (length % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";",
        "grade-188": {
            "execution": 0
        },
        "26": "int s1 = std::get<0>(interval1);\n\tint e1 = std::get<1>(interval1);\n\tint s2 = std::get<0>(interval2);\n\tint e2 = std::get<1>(interval2);\n\t// let's calculate the length of the intersection between the two intervals\n\tint length = 0;\n\tif (s1 <= s2 && e1 >= s2) {\n\t\t// intersection starts at s2\n\t\tif (e1 <= e2) {\n\t\t\t// intersection ends at e1\n\t\t\tlength = e1 - s2 + 1;\n\t\t}\n\t\telse {\n\t\t\t// intersection ends at e2\n\t\t\tlength = e2 - s2 + 1;\n\t\t}\n\t}\n\telse if (s2 <= s1 && e2 >= s1) {\n\t\t// intersection starts at s1\n\t\tif (e2 <= e1) {\n\t\t\t// intersection ends at e2\n\t\t\tlength = e2 - s1 + 1;\n\t\t}\n\t\telse {\n\t\t\t// intersection ends at e1\n\t\t\tlength = e1 - s1 + 1;\n\t\t}\n\t}\n\telse {\n\t\t// no intersection\n\t\treturn \"NO\";\n\t}\n\t// now let's check if the length is a prime number\n\tif (length < 2) return \"NO\";\n\tfor (int i = 2; i < length; i++) {\n\t\tif (length % i == 0) return \"NO\";\n\t}\n\treturn \"YES\";",
        "grade-26": {
            "execution": 0
        },
        "173": "//cout << get<0>(interval1) << \" \" << get<1>(interval1) << endl;\n\t//cout << get<0>(interval2) << \" \" << get<1>(interval2) << endl;\n\tif (get<0>(interval1) < get<0>(interval2)) {\n\t\tif (get<1>(interval1) < get<0>(interval2))\n\t\t\treturn \"NO\";\n\t\tif (get<1>(interval1) < get<1>(interval2)) {\n\t\t\tint l1 = get<1>(interval1) - get<0>(interval2) + 1;\n\t\t\tif (l1 == 1)\n\t\t\t\treturn \"NO\";\n\t\t\tif (l1 == 2)\n\t\t\t\treturn \"YES\";\n\t\t\tif (l1 % 2 == 0)\n\t\t\t\treturn \"NO\";\n\t\t\tfor (int i = 3; i <= sqrt(l1); i++) {\n\t\t\t\tif (l1 % i == 0)\n\t\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t\treturn \"YES\";\n\t\t}\n\t\tif (get<1>(interval1) == get<1>(interval2)) {\n\t\t\treturn \"NO\";\n\t\t}\n\t\tint l1 = get<1>(interval2) - get<0>(interval2) + 1;\n\t\tif (l1 == 1)\n\t\t\treturn \"NO\";\n\t\tif (l1 == 2)\n\t\t\treturn \"YES\";\n\t\tif (l1 % 2 == 0)\n\t\t\treturn \"NO\";\n\t\tfor (int i = 3; i <= sqrt(l1); i++) {\n\t\t\tif (l1 % i == 0)\n\t\t\t\treturn \"NO\";\n\t\t}\n\t\treturn \"YES\";\n\t}\n\tif (get<0>(interval1) == get<0>(interval2)) {\n\t\tif (get<1>(interval1) < get<1>(interval2)) {",
        "grade-173": {
            "execution": 0
        },
        "139": "long min = std::get<0>(interval1) > std::get<0>(interval2) ? std::get<0>(interval1) : std::get<0>(interval2);\n    long max = std::get<1>(interval1) < std::get<1>(interval2) ? std::get<1>(interval1) : std::get<1>(interval2);\n    std::string ret = \"NO\";\n    if (min <= max) {\n        if (max - min == 1 || max - min == 2) {\n            ret = \"YES\";\n        }\n    }\n    return ret;",
        "grade-139": {
            "execution": 0
        },
        "22": "bool is_prime = true;\n    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end) {\n        return \"NO\";\n    }\n    long diff = end - start;\n    if (diff == 0) {\n        return \"NO\";\n    }\n    for (long i = 2; i <= sqrt(diff); i++) {\n        if (diff % i == 0) {\n            is_prime = false;\n            break;\n        }\n    }\n    if (is_prime) {\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-22": {
            "execution": 0
        },
        "151": "// TODO: Implement solution\n\tauto start1 = std::get<0>(interval1);\n\tauto end1 = std::get<1>(interval1);\n\tauto start2 = std::get<0>(interval2);\n\tauto end2 = std::get<1>(interval2);\n\tlong new_start = std::max(start1, start2);\n\tlong new_end = std::min(end1, end2);\n\tstd::cout << new_start << \" \" << new_end << std::endl;\n\tif (new_start > new_end)\n\t\treturn \"NO\";\n\tlong length = new_end - new_start + 1;\n\tfor (long i = 2; i < length; i++)\n\t\tif (length % i == 0)\n\t\t\treturn \"NO\";\n\treturn \"YES\";",
        "grade-151": {
            "execution": 0
        },
        "108": "long a = std::get<0>(interval1);\n    long b = std::get<1>(interval1);\n    long c = std::get<0>(interval2);\n    long d = std::get<1>(interval2);\n    long l = 0;\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here",
        "grade-8": {
            "execution": 0
        },
        "7": "long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end) return \"NO\";\n    std::vector<bool> is_prime(end - start + 1, true);\n    for (int i = 2; i * i <= end; ++i) {\n        for (int j = start / i; j * i <= end; ++j) {\n            if (j * i >= start) {\n                is_prime[j * i - start] = false;\n            }\n        }\n    }\n    for (int i = 0; i < is_prime.size(); ++i) {\n        if (is_prime[i]) return \"YES\";\n    }\n    return \"NO\";",
        "grade-7": {
            "execution": 0
        },
        "23": "std::tuple<long, long> x = interval1;\n  std::tuple<long, long> y = interval2;\n  std::tuple<long, long> inx, iny;\n  // Make sure x is the smaller one\n  if (std::get<0>(x) > std::get<0>(y)) {\n    std::tuple<long, long> tmp = x;\n    x = y;\n    y = tmp;\n  }\n  long x_size = std::get<1>(x) - std::get<0>(x) + 1;\n  long y_size = std::get<1>(y) - std::get<0>(y) + 1;\n  // If the two intervals don't intersect, return \"NO\".\n  if (std::get<1>(x) < std::get<0>(y)) {\n    return \"NO\";\n  }\n  if (std::get<0>(x) >= std::get<0>(y)) {\n    inx = y;\n  } else {\n    inx = std::make_tuple(std::get<0>(x), std::get<1>(y));\n  }\n  if (std::get<1>(x) >= std::get<1>(y)) {\n    iny = x;\n  } else {\n    iny = std::make_tuple(std::get<0>(y), std::get<1>(x));\n  }\n  long inx_size = std::get<1>(inx) - std::get<0>(inx) + 1;\n  long iny_size = std::get<1>(iny) - std::get<0>(iny) + 1;\n  if (inx_size == iny_size) {\n    // Do something special\n    return \"NO\";\n  }\n  if (x_size == inx_size || y_size == iny_size) {\n    return \"NO\";\n  }\n  if (inx_size > iny_size) {\n    return \"YES\";\n  }\n  // Calculate the size of the intersection\n  long int_size = std::get<1>(inx) - std::get<0",
        "grade-23": {
            "execution": 0
        },
        "55": "long start1, start2, end1, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) = interval2;\n    if(start1 > end1) {\n        long temp = start1;\n        start1 = end1;\n        end1 = temp;\n    }\n    if(start2 > end2) {\n        long temp = start2;\n        start2 = end2;\n        end2 = temp;\n    }\n    if(start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if(start1 <= start2 && end1 >= end2) {\n        if(start2 == end2) {\n            return \"YES\";\n        }\n        long intervalLength = end2 - start2;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if(start2 <= start1 && end2 >= end1) {\n        if(start1 == end1) {\n            return \"YES\";\n        }\n        long intervalLength = end1 - start1;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if(start1 <= start2 && end1 <= end2) {\n        if(start1 == end1) {\n            return \"YES\";\n        }\n        long intervalLength = end1 - start2;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if(start2 <= start1 && end2 <= end1) {\n        if(start2 == end2) {\n            return \"YES\";\n        }\n        long intervalLength = end2 - start1;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";",
        "grade-55": {
            "execution": 0
        },
        "59": "bool isIntersect = false;\n\tlong start1 = std::get<0>(interval1);\n\tlong end1 = std::get<1>(interval1);\n\tlong start2 = std::get<0>(interval2);\n\tlong end2 = std::get<1>(interval2);\n\tif (end1 >= start2 && end2 >= start1) {\n\t\tisIntersect = true;\n\t}\n\tlong len = 0;\n\tif (isIntersect) {\n\t\tif (start1 >= start2 && end1 <= end2) {\n\t\t\tlen = end1 - start1 + 1;\n\t\t}\n\t\telse if (start1 <= start2 && end1 >= end2) {\n\t\t\tlen = end2 - start2 + 1;\n\t\t}\n\t\telse if (start1 >= start2 && end1 >= end2) {\n\t\t\tlen = end2 - start1 + 1;\n\t\t}\n\t\telse if (start1 <= start2 && end1 <= end2) {\n\t\t\tlen = end1 - start2 + 1;\n\t\t}\n\t}\n\tif (len == 0) {\n\t\treturn \"NO\";\n\t}\n\telse {\n\t\tfor (long j = 2; j < len; j++) {\n\t\t\tif (len % j == 0) {\n\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t}\n\t\treturn \"YES\";\n\t}",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.1083628979392264,
        "bleu-28": 0.05411257898362518,
        "bleu-6": 0.21934366593384538,
        "bleu-189": 0.0009418294416719719,
        "bleu-70": 0.15965323602748624,
        "bleu-62": 0.10882664276530281,
        "bleu-57": 0.3170590564118268,
        "bleu-35": 0.11126896898714847,
        "bleu-188": 0.194653522086998,
        "bleu-26": 0.13029319368338357,
        "bleu-173": 0.08693525929920741,
        "bleu-139": 0.08071806313159044,
        "bleu-22": 0.1931402115332368,
        "bleu-151": 0.2216447056781531,
        "bleu-108": 0.008603647031024243,
        "bleu-8": 0.0,
        "bleu-7": 0.15949548145077522,
        "bleu-23": 0.03738768720152344,
        "bleu-55": 0.04963642483939393,
        "bleu-59": 0.08740669160706589,
        "codebleu-163": 0.5756693677034516,
        "codebleu-28": 0.48319088319088316,
        "codebleu-6": 0.5792341996740198,
        "codebleu-189": 0.04620099627710052,
        "codebleu-70": 0.5433110351977272,
        "codebleu-62": 0.4045584045584045,
        "codebleu-57": 0.5310198465828597,
        "codebleu-35": 0.6474633711964766,
        "codebleu-188": 0.5444128833683451,
        "codebleu-26": 0.5625469799425558,
        "codebleu-173": 0.5632071586011498,
        "codebleu-139": 0.425071225071225,
        "codebleu-22": 0.5677937484075682,
        "codebleu-151": 0.5828141173013306,
        "codebleu-108": 0.4008547008547009,
        "codebleu-8": 0.015384615384615384,
        "codebleu-7": 0.5928267089035542,
        "codebleu-23": 0.5136752136752136,
        "codebleu-55": 0.46495726495726486,
        "codebleu-59": 0.5193732193732193,
        "chrf-163": 0.3499793378393995,
        "chrf-28": 0.3125114837660481,
        "chrf-6": 0.41609786323156245,
        "chrf-189": 0.07027395615060929,
        "chrf-70": 0.37996465736932483,
        "chrf-62": 0.3342703068377126,
        "chrf-57": 0.4760483420833268,
        "chrf-35": 0.3621707224369971,
        "chrf-188": 0.3493609167489635,
        "chrf-26": 0.3801698272030528,
        "chrf-173": 0.3494629688520254,
        "chrf-139": 0.3273681123917234,
        "chrf-22": 0.396229403598432,
        "chrf-151": 0.409374833619463,
        "chrf-108": 0.16594469465288267,
        "chrf-8": 0.011133680895221218,
        "chrf-7": 0.40291335335421885,
        "chrf-23": 0.23342551163679728,
        "chrf-55": 0.27322750084156944,
        "chrf-59": 0.32152708577375777,
        "rougel-163": 0.2813299232736573,
        "rougel-28": 0.25423728813559326,
        "rougel-6": 0.5286343612334802,
        "rougel-189": 0.09345794392523364,
        "rougel-70": 0.4375,
        "rougel-62": 0.34375,
        "rougel-57": 0.5380710659898478,
        "rougel-35": 0.33053221288515405,
        "rougel-188": 0.41379310344827586,
        "rougel-26": 0.3232876712328767,
        "rougel-173": 0.25157232704402516,
        "rougel-139": 0.29914529914529914,
        "rougel-22": 0.467741935483871,
        "rougel-151": 0.421875,
        "rougel-108": 0.10984848484848485,
        "rougel-8": 0.0,
        "rougel-7": 0.38461538461538464,
        "rougel-23": 0.18148820326678763,
        "rougel-55": 0.22222222222222218,
        "rougel-59": 0.32047477744807124,
        "meteor-163": 0.4851894106576285,
        "meteor-28": 0.3121926229508198,
        "meteor-6": 0.6219654911112391,
        "meteor-189": 0.052408930669800236,
        "meteor-70": 0.513262939453125,
        "meteor-62": 0.3242877492877493,
        "meteor-57": 0.5298663380008178,
        "meteor-35": 0.49384905599535656,
        "meteor-188": 0.5970149253731343,
        "meteor-26": 0.550754077375112,
        "meteor-173": 0.4490365647390441,
        "meteor-139": 0.3370470347648262,
        "meteor-22": 0.4831211676886163,
        "meteor-151": 0.6148852157943069,
        "meteor-108": 0.20199172763792086,
        "meteor-8": 0.0,
        "meteor-7": 0.5071734027388711,
        "meteor-23": 0.3734362934362934,
        "meteor-55": 0.28691258750589305,
        "meteor-59": 0.4965341183106942,
        "ruby-163": 0.1778523489932886,
        "ruby-28": 0.15708812260536398,
        "ruby-6": 0.3955223880597015,
        "ruby-189": 0.053763440860215006,
        "ruby-70": 0.31288343558282206,
        "ruby-62": 0.14141414141414144,
        "ruby-57": 0.375,
        "ruby-35": 0.21212121212121215,
        "ruby-188": 0.27976190476190477,
        "ruby-26": 0.20220588235294112,
        "ruby-173": 0.15625,
        "ruby-139": 0.17021276595744683,
        "ruby-22": 0.3419354838709677,
        "ruby-151": 0.3006134969325154,
        "ruby-108": 0.06206896551724139,
        "ruby-8": 0.0,
        "ruby-7": 0.2538860103626943,
        "ruby-23": 0.10917030567685593,
        "ruby-55": 0.14242424242424245,
        "ruby-59": 0.20491803278688525,
        "codebertscore_f1-163": 0.7444132566452026,
        "codebertscore_f3-163": 0.7966518402099609,
        "codebertscore_f1-28": 0.7387369275093079,
        "codebertscore_f3-28": 0.7791834473609924,
        "codebertscore_f1-6": 0.8560615181922913,
        "codebertscore_f3-6": 0.8672114014625549,
        "codebertscore_f1-189": 0.6083501577377319,
        "codebertscore_f3-189": 0.5800162553787231,
        "codebertscore_f1-70": 0.7883369326591492,
        "codebertscore_f3-70": 0.8148287534713745,
        "codebertscore_f1-62": 0.812188446521759,
        "codebertscore_f3-62": 0.8219549655914307,
        "codebertscore_f1-57": 0.8585422039031982,
        "codebertscore_f3-57": 0.867186427116394,
        "codebertscore_f1-35": 0.7361814975738525,
        "codebertscore_f3-35": 0.7795635461807251,
        "codebertscore_f1-188": 0.7552063465118408,
        "codebertscore_f3-188": 0.7862148880958557,
        "codebertscore_f1-26": 0.7324976921081543,
        "codebertscore_f3-26": 0.7860596179962158,
        "codebertscore_f1-173": 0.7949928641319275,
        "codebertscore_f3-173": 0.8249743580818176,
        "codebertscore_f1-139": 0.8015544414520264,
        "codebertscore_f3-139": 0.8076186776161194,
        "codebertscore_f1-22": 0.8134658932685852,
        "codebertscore_f3-22": 0.8406673073768616,
        "codebertscore_f1-151": 0.7962184548377991,
        "codebertscore_f3-151": 0.8370519876480103,
        "codebertscore_f1-108": 0.6651818156242371,
        "codebertscore_f3-108": 0.7278042435646057,
        "codebertscore_f1-8": 0.5096229910850525,
        "codebertscore_f3-8": 0.49937859177589417,
        "codebertscore_f1-7": 0.7992721796035767,
        "codebertscore_f3-7": 0.840069591999054,
        "codebertscore_f1-23": 0.6862590312957764,
        "codebertscore_f3-23": 0.7428664565086365,
        "codebertscore_f1-55": 0.7333623766899109,
        "codebertscore_f3-55": 0.7591434717178345,
        "codebertscore_f1-59": 0.7515021562576294,
        "codebertscore_f3-59": 0.7880818247795105,
        "codebertscore_s_f1-163": 0.7661294341087341,
        "codebertscore_s_f3-163": 0.8084335923194885,
        "codebertscore_s_f1-28": 0.7642645239830017,
        "codebertscore_s_f3-28": 0.7862485647201538,
        "codebertscore_s_f1-6": 0.859146773815155,
        "codebertscore_s_f3-6": 0.8710943460464478,
        "codebertscore_s_f1-189": 0.5587692856788635,
        "codebertscore_s_f3-189": 0.5286704301834106,
        "codebertscore_s_f1-70": 0.7904349565505981,
        "codebertscore_s_f3-70": 0.8207880854606628,
        "codebertscore_s_f1-62": 0.8003649711608887,
        "codebertscore_s_f3-62": 0.8006395697593689,
        "codebertscore_s_f1-57": 0.8496002554893494,
        "codebertscore_s_f3-57": 0.8584508895874023,
        "codebertscore_s_f1-35": 0.7633212804794312,
        "codebertscore_s_f3-35": 0.8023895621299744,
        "codebertscore_s_f1-188": 0.7630552053451538,
        "codebertscore_s_f3-188": 0.7977823615074158,
        "codebertscore_s_f1-26": 0.7783130407333374,
        "codebertscore_s_f3-26": 0.8414671421051025,
        "codebertscore_s_f1-173": 0.820315957069397,
        "codebertscore_s_f3-173": 0.8379545211791992,
        "codebertscore_s_f1-139": 0.7931095957756042,
        "codebertscore_s_f3-139": 0.7999658584594727,
        "codebertscore_s_f1-22": 0.8174123764038086,
        "codebertscore_s_f3-22": 0.8465397953987122,
        "codebertscore_s_f1-151": 0.7919672131538391,
        "codebertscore_s_f3-151": 0.8352185487747192,
        "codebertscore_s_f1-108": 0.7042047381401062,
        "codebertscore_s_f3-108": 0.7407189607620239,
        "codebertscore_s_f1-8": 0.4677046239376068,
        "codebertscore_s_f3-8": 0.44640934467315674,
        "codebertscore_s_f1-7": 0.8114946484565735,
        "codebertscore_s_f3-7": 0.8498552441596985,
        "codebertscore_s_f1-23": 0.7194558382034302,
        "codebertscore_s_f3-23": 0.7573843002319336,
        "codebertscore_s_f1-55": 0.7620294094085693,
        "codebertscore_s_f3-55": 0.7761974930763245,
        "codebertscore_s_f1-59": 0.7754933834075928,
        "codebertscore_s_f3-59": 0.8081697225570679,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 0,
        "raw_gpt35_nsnr-189": "3 - The code snippet correctly identifies whether the two intervals intersect and calculates the length of the intersection. However, it does not check whether the length of the intersection is a prime number or not.",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 0,
        "raw_gpt35_nsnr-108": "4 (The code correctly finds the intersection of the two intervals and checks if its length is a prime number. It also handles cases where the intervals are given in different orders.)",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "3 - The code correctly determines the intersection of the two intervals and calculates its length. It correctly determines whether the length is a prime number or not. However, it does not handle the case where the two intervals do not intersect and always returns \"YES\" in that case.",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 2,
        "raw_gpt35_nswr-163": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nlong fib4(long n) {\n",
        "snippet": [
            "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n"
        ],
        "simplified": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
        "task_id": "46",
        "164": "if (n <= 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long num1 = 0;\n    long num2 = 0;\n    long num3 = 2;\n    long num4 = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp = num1 + num2 + num3 + num4;\n        num1 = num2;\n        num2 = num3;\n        num3 = num4;\n        num4 = temp;\n    }\n    return num1 + num2 + num3 + num4;",
        "grade-164": {
            "execution": 0
        },
        "28": "if (n <= 0) return 0;\n\tlong a = 0, b = 0, c = 2, d = 0, f = 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tif (n == 4) return 2;\n\tfor (int i = 0; i < n - 4; i++) {\n\t\tf = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = f;\n\t}\n\treturn f;",
        "grade-28": {
            "execution": 0
        },
        "6": "long arr[n+1];\n    arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for(int i = 4; i <= n; i++) {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n    return arr[n];",
        "grade-6": {
            "execution": 1
        },
        "190": "assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    vector<long> res;\n    res.push_back(0);\n    res.push_back(0);\n    res.push_back(2);\n    res.push_back(0);\n    for (int i = 4; i <= n; i++) {\n        res.push_back(res[i-1] + res[i-2] + res[i-3] + res[i-4]);\n    }\n    return res[n];",
        "grade-190": {
            "execution": 0
        },
        "71": "if (n==0) return 0;\n    if (n==1) return 0;\n    if (n==2) return 2;\n    if (n==3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i=4; i<=n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-71": {
            "execution": 0
        },
        "62": "// A better way to get the result is to use Array\n// Array is faster than LinkedList\n    long[] fib4 = new long[4];\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    if (n < 4) {\n        return fib4[n];\n    }\n    int i = 3;\n    while (i < n) {\n        fib4[0] = fib4[1];\n        fib4[1] = fib4[2];\n        fib4[2] = fib4[3];\n        fib4[3] = fib4[0] + fib4[1] + fib4[2];\n        i++;\n    }\n    return fib4[3];",
        "grade-62": {
            "execution": 0
        },
        "57": "if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    int fib4a = 0;\n    int fib4b = 0;\n    int fib4c = 2;\n    int fib4d = 0;\n    for (int i = 4; i <= n; i++) {\n        int temp = fib4a + fib4b + fib4c + fib4d;\n        fib4a = fib4b;\n        fib4b = fib4c;\n        fib4c = fib4d;\n        fib4d = temp;\n    }\n    return fib4a + fib4b + fib4c + fib4d;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n==0) return 0;\n\tif (n==1) return 0;\n\tif (n==2) return 2;\n\tif (n==3) return 0;\n\tlong a=0,b=0,c=2,d=0,e;\n\tfor (int i=4;i<=n;i++) {\n\t\te=a+b+c+d;\n\t\ta=b;\n\t\tb=c;\n\t\tc=d;\n\t\td=e;\n\t}\n\treturn e;",
        "grade-35": {
            "execution": 1
        },
        "189": "// your code here\n  long fib1 = 0;\n  long fib2 = 0;\n  long fib3 = 2;\n  long fib4 = 0;\n  long fib5 = 0;\n  if (n == 0) {\n    return fib1;\n  }\n  if (n == 1) {\n    return fib2;\n  }\n  if (n == 2) {\n    return fib3;\n  }\n  if (n == 3) {\n    return fib4;\n  }\n  for (int i = 4; i <= n; i++) {\n    fib5 = fib1 + fib2 + fib3 + fib4;\n    fib1 = fib2;\n    fib2 = fib3;\n    fib3 = fib4;\n    fib4 = fib5;\n  }\n  return fib5;",
        "grade-189": {
            "execution": 1
        },
        "26": "long f0 = 0;\n  long f1 = 0;\n  long f2 = 2;\n  long f3 = 0;\n  long f = 0;\n  if (n < 0) {\n    return -1;\n  }\n  if (n < 3) {\n    return 0;\n  }\n  if (n == 3) {\n    return 2;\n  }\n  while (n >= 3) {\n    f = f3 + f2 + f1 + f0;\n    f0 = f1;\n    f1 = f2;\n    f2 = f3;\n    f3 = f;\n    n--;\n  }\n  return f;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long k = 4;\n    long fib4_k_minus_1 = 0;\n    long fib4_k_minus_2 = 0;\n    long fib4_k_minus_3 = 2;\n    long fib4_k_minus_4 = 0;\n    long result = 0;\n    while (k <= n) {\n        result = fib4_k_minus_1 + fib4_k_minus_2 + fib4_k_minus_3 + fib4_k_minus_4;\n        fib4_k_minus_4 = fib4_k_minus_3;\n        fib4_k_minus_3 = fib4_k_minus_2;\n        fib4_k_minus_2 = fib4_k_minus_1;\n        fib4_k_minus_1 = result;\n        k++;\n    }\n    return result;",
        "grade-174": {
            "execution": 0
        },
        "140": "long i;\n  long f4[4] = {0, 0, 2, 0};\n  for (i = 4; i <= n; i++) {\n    f4[i % 4] = f4[(i - 1) % 4] + f4[(i - 2) % 4] + f4[(i - 3) % 4] + f4[(i - 4) % 4];\n  }\n  return f4[n % 4];",
        "grade-140": {
            "execution": 1
        },
        "22": "if (n <= 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a[4] = {0, 0, 2, 0};\n\tlong temp[4] = {0, 0, 0, 0};\n\tfor (int i = 0; i < n - 3; i++) {\n\t\ttemp[0] = a[0] + a[1] + a[2] + a[3];\n\t\ttemp[1] = a[0];\n\t\ttemp[2] = a[1];\n\t\ttemp[3] = a[2];\n\t\ta[0] = temp[0];\n\t\ta[1] = temp[1];\n\t\ta[2] = temp[2];\n\t\ta[3] = temp[3];\n\t}\n\treturn a[0];",
        "grade-22": {
            "execution": 0
        },
        "152": "if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-152": {
            "execution": 0
        },
        "109": "long f[n+1];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++)\n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n    return f[n];",
        "grade-109": {
            "execution": 1
        },
        "8": "assert(n >= 0);\n    // TODO: your code here\n    long fib[n+1]; \n    fib[0] = 0; \n    fib[1] = 0; \n    fib[2] = 2; \n    fib[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n <= 3) return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-7": {
            "execution": 0
        },
        "23": "long first = 0;\n\tlong second = 0;\n\tlong third = 2;\n\tlong fourth = 0;\n\tlong fifth = 0;\n\tlong sixth = 0;\n\tlong seventh = 0;\n\tlong answer = 0;\n\tif (n <= 4) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if (n == 1) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if (n == 2) {\n\t\t\treturn 2;\n\t\t}\n\t\telse if (n == 3) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if (n == 4) {\n\t\t\treturn 4;\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 5; i <= n; i++) {\n\t\t\tanswer = first + second + third + fourth;\n\t\t\tseventh = sixth;\n\t\t\tsixth = fifth;\n\t\t\tfifth = fourth;\n\t\t\tfourth = third;\n\t\t\tthird = second;\n\t\t\tsecond = first;\n\t\t\tfirst = answer;\n\t\t}\n\t}\n\treturn answer;",
        "grade-23": {
            "execution": 0
        },
        "55": "long a = 0, b = 0, c = 2, d = 0, temp = 0;\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\tn -= 3;\n\twhile (n--) {\n\t\ttemp = d;\n\t\td = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = temp;\n\t}\n\treturn d;",
        "grade-55": {
            "execution": 1
        },
        "59": "if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\tif (n > 3) {\n\t\tlong a = 0;\n\t\tlong b = 0;\n\t\tlong c = 2;\n\t\tlong d = 0;\n\t\tlong temp;\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\ttemp = a + b + c + d;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = temp;\n\t\t}\n\t\treturn temp;\n\t}\n\treturn -1;",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.22950435799100086,
        "bleu-28": 0.17382774935542994,
        "bleu-6": 0.653002382718452,
        "bleu-190": 0.2991995791081167,
        "bleu-71": 0.25800629035662137,
        "bleu-62": 0.22110430394249583,
        "bleu-57": 0.23079739144780687,
        "bleu-35": 0.2245162207468735,
        "bleu-189": 0.19446634778755356,
        "bleu-26": 0.08337358759674503,
        "bleu-174": 0.05894476222313871,
        "bleu-140": 0.29074857976150886,
        "bleu-22": 0.15652019717432608,
        "bleu-152": 0.23579279550011759,
        "bleu-109": 0.8968047402928072,
        "bleu-8": 0.5610192470762062,
        "bleu-7": 0.21578772969363821,
        "bleu-23": 0.12169421480041041,
        "bleu-55": 0.04484093198327398,
        "bleu-59": 0.2002630190090657,
        "codebleu-164": 0.4482773017727315,
        "codebleu-28": 0.46082607407208276,
        "codebleu-6": 0.8669649274471605,
        "codebleu-190": 0.5809742097755023,
        "codebleu-71": 0.4444347756709381,
        "codebleu-62": 0.6524527169839294,
        "codebleu-57": 0.4500870046982233,
        "codebleu-35": 0.44863220433893675,
        "codebleu-189": 0.43973777767745054,
        "codebleu-26": 0.40307692307692305,
        "codebleu-174": 0.40499999999999997,
        "codebleu-140": 0.5672048569110284,
        "codebleu-22": 0.6402564149492811,
        "codebleu-152": 0.45301620985102303,
        "codebleu-109": 0.839849091998734,
        "codebleu-8": 0.8558986886901256,
        "codebleu-7": 0.383455999125343,
        "codebleu-23": 0.4499287005711919,
        "codebleu-55": 0.3982051282051282,
        "codebleu-59": 0.47162875556736217,
        "chrf-164": 0.27267131152900476,
        "chrf-28": 0.25848105815249084,
        "chrf-6": 0.561853663197207,
        "chrf-190": 0.3444664197849277,
        "chrf-71": 0.3040089735460341,
        "chrf-62": 0.3200737029312628,
        "chrf-57": 0.298732009560599,
        "chrf-35": 0.2909192839930927,
        "chrf-189": 0.2830668662175368,
        "chrf-26": 0.18856955289751787,
        "chrf-174": 0.14129250109391484,
        "chrf-140": 0.347949301586836,
        "chrf-22": 0.2791750143988327,
        "chrf-152": 0.29631648974647756,
        "chrf-109": 0.8545882460344254,
        "chrf-8": 0.6183088264887017,
        "chrf-7": 0.25605841879274494,
        "chrf-23": 0.19920701639615665,
        "chrf-55": 0.14481412704182237,
        "chrf-59": 0.28273847039333094,
        "rougel-164": 0.37864077669902907,
        "rougel-28": 0.3791469194312796,
        "rougel-6": 0.8432432432432434,
        "rougel-190": 0.5194805194805194,
        "rougel-71": 0.39378238341968913,
        "rougel-62": 0.4853556485355648,
        "rougel-57": 0.37864077669902907,
        "rougel-35": 0.38383838383838387,
        "rougel-189": 0.3502304147465438,
        "rougel-26": 0.32989690721649484,
        "rougel-174": 0.27358490566037735,
        "rougel-140": 0.6310160427807486,
        "rougel-22": 0.3802816901408451,
        "rougel-152": 0.3725490196078432,
        "rougel-109": 0.9508196721311475,
        "rougel-8": 0.78,
        "rougel-7": 0.4125,
        "rougel-23": 0.28464419475655434,
        "rougel-55": 0.2769230769230769,
        "rougel-59": 0.36036036036036034,
        "meteor-164": 0.27813327981611136,
        "meteor-28": 0.3656257624900178,
        "meteor-6": 0.8444570083257129,
        "meteor-190": 0.5995863495346433,
        "meteor-71": 0.28202534939373186,
        "meteor-62": 0.44359602302459455,
        "meteor-57": 0.26930617808183266,
        "meteor-35": 0.3126073968329501,
        "meteor-189": 0.3009444945496171,
        "meteor-26": 0.26737314493912734,
        "meteor-174": 0.22640097573839668,
        "meteor-140": 0.5984699880593382,
        "meteor-22": 0.47319128540305017,
        "meteor-152": 0.284113475177305,
        "meteor-109": 0.9466351711515573,
        "meteor-8": 0.8309240434486982,
        "meteor-7": 0.24942838945242793,
        "meteor-23": 0.3078477233705311,
        "meteor-55": 0.23053504296455427,
        "meteor-59": 0.3263123663678757,
        "ruby-164": 0.24561403508771928,
        "ruby-28": 0.2100840336134454,
        "ruby-6": 0.8279569892473118,
        "ruby-190": 0.41726618705035967,
        "ruby-71": 0.18811881188118806,
        "ruby-62": 0.36734693877551017,
        "ruby-57": 0.24561403508771928,
        "ruby-35": 0.21698113207547165,
        "ruby-189": 0.19999999999999996,
        "ruby-26": 0.16666666666666663,
        "ruby-174": 0.15833333333333333,
        "ruby-140": 0.41052631578947374,
        "ruby-22": 0.265625,
        "ruby-152": 0.1696428571428571,
        "ruby-109": 0.9239130434782609,
        "ruby-8": 0.712962962962963,
        "ruby-7": 0.32608695652173914,
        "ruby-23": 0.17714285714285716,
        "ruby-55": 0.15533980582524276,
        "ruby-59": 0.2153846153846154,
        "codebertscore_f1-164": 0.7747734189033508,
        "codebertscore_f3-164": 0.7776903510093689,
        "codebertscore_f1-28": 0.8147199749946594,
        "codebertscore_f3-28": 0.8284462690353394,
        "codebertscore_f1-6": 0.920428991317749,
        "codebertscore_f3-6": 0.9220669865608215,
        "codebertscore_f1-190": 0.8184370398521423,
        "codebertscore_f3-190": 0.8336448669433594,
        "codebertscore_f1-71": 0.7943803668022156,
        "codebertscore_f3-71": 0.7931591272354126,
        "codebertscore_f1-62": 0.744478166103363,
        "codebertscore_f3-62": 0.7713984847068787,
        "codebertscore_f1-57": 0.7466018199920654,
        "codebertscore_f3-57": 0.7634359002113342,
        "codebertscore_f1-35": 0.8110791444778442,
        "codebertscore_f3-35": 0.812380850315094,
        "codebertscore_f1-189": 0.7607915997505188,
        "codebertscore_f3-189": 0.770492434501648,
        "codebertscore_f1-26": 0.7852039933204651,
        "codebertscore_f3-26": 0.7760777473449707,
        "codebertscore_f1-174": 0.6924263834953308,
        "codebertscore_f3-174": 0.7178115844726562,
        "codebertscore_f1-140": 0.8756002187728882,
        "codebertscore_f3-140": 0.8847493529319763,
        "codebertscore_f1-22": 0.7927693724632263,
        "codebertscore_f3-22": 0.8004031777381897,
        "codebertscore_f1-152": 0.7580025792121887,
        "codebertscore_f3-152": 0.756815493106842,
        "codebertscore_f1-109": 0.9557955861091614,
        "codebertscore_f3-109": 0.9580330848693848,
        "codebertscore_f1-8": 0.8735769391059875,
        "codebertscore_f3-8": 0.8942215442657471,
        "codebertscore_f1-7": 0.7921459078788757,
        "codebertscore_f3-7": 0.7837823629379272,
        "codebertscore_f1-23": 0.7352475523948669,
        "codebertscore_f3-23": 0.7481180429458618,
        "codebertscore_f1-55": 0.7590416073799133,
        "codebertscore_f3-55": 0.749206006526947,
        "codebertscore_f1-59": 0.7639764547348022,
        "codebertscore_f3-59": 0.7655264735221863,
        "codebertscore_s_f1-164": 0.7898342609405518,
        "codebertscore_s_f3-164": 0.7900571227073669,
        "codebertscore_s_f1-28": 0.815434455871582,
        "codebertscore_s_f3-28": 0.8298452496528625,
        "codebertscore_s_f1-6": 0.915168046951294,
        "codebertscore_s_f3-6": 0.9172886610031128,
        "codebertscore_s_f1-190": 0.8410562872886658,
        "codebertscore_s_f3-190": 0.8577128648757935,
        "codebertscore_s_f1-71": 0.8002177476882935,
        "codebertscore_s_f3-71": 0.7988685369491577,
        "codebertscore_s_f1-62": 0.7702242136001587,
        "codebertscore_s_f3-62": 0.795060932636261,
        "codebertscore_s_f1-57": 0.7672488689422607,
        "codebertscore_s_f3-57": 0.7822197079658508,
        "codebertscore_s_f1-35": 0.8122861385345459,
        "codebertscore_s_f3-35": 0.8124645948410034,
        "codebertscore_s_f1-189": 0.7784883975982666,
        "codebertscore_s_f3-189": 0.7852009534835815,
        "codebertscore_s_f1-26": 0.7914562225341797,
        "codebertscore_s_f3-26": 0.7819412350654602,
        "codebertscore_s_f1-174": 0.7259218096733093,
        "codebertscore_s_f3-174": 0.7461196780204773,
        "codebertscore_s_f1-140": 0.8790087699890137,
        "codebertscore_s_f3-140": 0.8884607553482056,
        "codebertscore_s_f1-22": 0.8080893754959106,
        "codebertscore_s_f3-22": 0.8137052059173584,
        "codebertscore_s_f1-152": 0.7770560383796692,
        "codebertscore_s_f3-152": 0.7758606672286987,
        "codebertscore_s_f1-109": 0.9547880291938782,
        "codebertscore_s_f3-109": 0.9574200510978699,
        "codebertscore_s_f1-8": 0.8805605173110962,
        "codebertscore_s_f3-8": 0.9012345671653748,
        "codebertscore_s_f1-7": 0.7917314767837524,
        "codebertscore_s_f3-7": 0.7833530902862549,
        "codebertscore_s_f1-23": 0.7494171857833862,
        "codebertscore_s_f3-23": 0.7591301798820496,
        "codebertscore_s_f1-55": 0.7595274448394775,
        "codebertscore_s_f3-55": 0.751613199710846,
        "codebertscore_s_f1-59": 0.7775217294692993,
        "codebertscore_s_f3-59": 0.7797985076904297,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\nlong count_upper(std::string s) {\n",
        "snippet": [
            "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n"
        ],
        "simplified": "Given a string s, count the number of uppercase vowels in even indices.",
        "task_id": "98",
        "171": "long count = 0;\n    for(int i = 1; i < s.length(); i+=2){\n        if((s[i] == 'A') || (s[i] == 'E') || (s[i] == 'I') || (s[i] == 'O') || (s[i] == 'U'))\n            count++;\n    }\n    return count;",
        "grade-171": {
            "execution": 0
        },
        "28": "long cnt = 0;\n\tstd::string vowels = \"AEIOU\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (vowels.find(s[i]) != std::string::npos) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;",
        "grade-28": {
            "execution": 1
        },
        "6": "int vowel=0;\n    for(int i=0; i< s.length(); i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i%2==0){\n                vowel++;\n            }\n        }\n    }\n    return vowel;",
        "grade-6": {
            "execution": 1
        },
        "198": "// Write your code here\n  long count = 0;\n  for(long i = 0; i < s.length(); i += 2) {\n    if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n      count++;\n    }\n  }\n  return count;",
        "grade-198": {
            "execution": 1
        },
        "70": "int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if(i % 2 == 0 && c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "int counter = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i % 2 == 0){\n                counter++;\n            }\n        }\n    }\n    return counter;",
        "grade-62": {
            "execution": 1
        },
        "57": "long count=0;\n    for(long i=0;i<s.length();i+=2){\n        if(isupper(s[i]))\n            count++;\n    }\n    return count;",
        "grade-57": {
            "execution": 0
        },
        "35": "long upperCount = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            if(i % 2 == 0)\n                upperCount++;\n        }\n    }\n    return upperCount;",
        "grade-35": {
            "execution": 1
        },
        "197": "int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n      if (i % 2 == 0) {\n        count++;\n      }\n    }\n  }\n  return count;",
        "grade-197": {
            "execution": 1
        },
        "26": "int x=0;\n    for(int i=0;i<s.length();i+=2){\n        if(isupper(s[i])){\n            x++;\n        }\n    }\n    return x;",
        "grade-26": {
            "execution": 0
        },
        "181": "int n = s.length();\n  char vowels[5] = {'A', 'E', 'I', 'O', 'U'};\n  int numberOfUpperCaseVowels = 0;\n  for (int i = 0; i < n; i += 2) {\n    for (int j = 0; j < 5; j++) {\n      if (s[i] == vowels[j]) {\n        numberOfUpperCaseVowels++;\n      }\n    }\n  }\n  return numberOfUpperCaseVowels;",
        "grade-181": {
            "execution": 1
        },
        "147": "// Your code here\n    long count = 0;\n    for(auto it = s.begin(); it != s.end(); it+=2){\n        if(isupper(*it)){\n            count++;\n        }\n    }\n    return count;",
        "grade-147": {
            "execution": 0
        },
        "22": "long num_upper = 0;\n    for (long i = 0; i < s.size(); i+=2) {\n        if (isupper(s[i])) {\n            num_upper++;\n        }\n    }\n    return num_upper;",
        "grade-22": {
            "execution": 0
        },
        "159": "// Write your solution here\n  long count = 0;\n  for(int i = 1; i < s.length(); i += 2){\n    if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n      count++;\n    }\n  }\n  return count;",
        "grade-159": {
            "execution": 0
        },
        "111": "int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n      if (i % 2 == 0) {\n        count += 1;\n      }\n    }\n  }\n  return count;",
        "grade-111": {
            "execution": 1
        },
        "8": "long int upper_count = 0;\n    for(int i = 0; i < s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            upper_count++;\n        }\n    }\n    return upper_count;",
        "grade-8": {
            "execution": 1
        },
        "7": "int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count += 1;\n        }\n    }\n    return count;",
        "grade-7": {
            "execution": 0
        },
        "23": "long count=0;\n    int len=s.length();\n    for(int i=0;i<len;i+=2)\n    {\n        if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U')\n        {\n            count++;\n        }\n    }\n    return count;",
        "grade-23": {
            "execution": 1
        },
        "55": "// your code here\n    int count = 0;\n    int j = 0;\n    std::string vowels = \"AEIOU\";\n    while(s[j] != '\\0'){\n        for(int i = 0; i < 5; i++){\n            if(s[j] == vowels[i]){\n                count++;\n            }\n        }\n        j += 2;\n    }\n    return count;",
        "grade-55": {
            "execution": 1
        },
        "59": "long cnt=0;\n    for(int i=0;i<s.length();i++)\n    {\n        if(i%2==0 && s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U')\n        {\n            cnt++;\n        }\n    }\n    return cnt;",
        "grade-59": {
            "execution": 0
        },
        "bleu-171": 0.2538042876920617,
        "bleu-28": 0.3725416724142211,
        "bleu-6": 0.237920205848529,
        "bleu-198": 0.21904496179690627,
        "bleu-70": 0.298807713767423,
        "bleu-62": 0.237920205848529,
        "bleu-57": 0.2724267945578002,
        "bleu-35": 0.20324203644169156,
        "bleu-197": 0.27055426408632655,
        "bleu-26": 0.27702494678584577,
        "bleu-181": 0.1956228052876843,
        "bleu-147": 0.19286180101638695,
        "bleu-22": 0.18898721773397856,
        "bleu-159": 0.23274265979647224,
        "bleu-111": 0.2923854506609071,
        "bleu-8": 0.24290504569815816,
        "bleu-7": 0.2980340355005636,
        "bleu-23": 0.22385098876607368,
        "bleu-55": 0.2691125033229713,
        "bleu-59": 0.24084760748238232,
        "codebleu-171": 0.5689066686346196,
        "codebleu-28": 0.5959229569698785,
        "codebleu-6": 0.530263503359533,
        "codebleu-198": 0.5019052614584686,
        "codebleu-70": 0.5407134886631205,
        "codebleu-62": 0.530263503359533,
        "codebleu-57": 0.42551474206387613,
        "codebleu-35": 0.5288652178293708,
        "codebleu-197": 0.5418590828232753,
        "codebleu-26": 0.43204875807571674,
        "codebleu-181": 0.5752406635674383,
        "codebleu-147": 0.45765395997989367,
        "codebleu-22": 0.411462743246409,
        "codebleu-159": 0.5053885799957687,
        "codebleu-111": 0.5550604029552886,
        "codebleu-8": 0.4966947226889173,
        "codebleu-7": 0.5265020027020544,
        "codebleu-23": 0.5316127998950557,
        "codebleu-55": 0.5141051636522093,
        "codebleu-59": 0.49839200686978413,
        "chrf-171": 0.3619002625524065,
        "chrf-28": 0.41707741727496045,
        "chrf-6": 0.3232112160058956,
        "chrf-198": 0.32913860361061553,
        "chrf-70": 0.381480549433356,
        "chrf-62": 0.35181495124110884,
        "chrf-57": 0.35310368472332343,
        "chrf-35": 0.2982494541812371,
        "chrf-197": 0.38061677986566606,
        "chrf-26": 0.2721658513565151,
        "chrf-181": 0.307450397027525,
        "chrf-147": 0.32085493442633434,
        "chrf-22": 0.18296499932851734,
        "chrf-159": 0.350440376030553,
        "chrf-111": 0.3994778908365834,
        "chrf-8": 0.3454929012770942,
        "chrf-7": 0.39821918200730005,
        "chrf-23": 0.3455481217546936,
        "chrf-55": 0.4029027711795422,
        "chrf-59": 0.29951952129388987,
        "rougel-171": 0.48554913294797686,
        "rougel-28": 0.5599999999999999,
        "rougel-6": 0.4114285714285714,
        "rougel-198": 0.4093567251461988,
        "rougel-70": 0.4363636363636364,
        "rougel-62": 0.4114285714285714,
        "rougel-57": 0.6153846153846154,
        "rougel-35": 0.38636363636363635,
        "rougel-197": 0.4457142857142857,
        "rougel-26": 0.5882352941176471,
        "rougel-181": 0.3695652173913043,
        "rougel-147": 0.4251968503937008,
        "rougel-22": 0.5378151260504201,
        "rougel-159": 0.4093567251461988,
        "rougel-111": 0.4659090909090909,
        "rougel-8": 0.40963855421686746,
        "rougel-7": 0.4624277456647399,
        "rougel-23": 0.3764705882352941,
        "rougel-55": 0.45859872611464964,
        "rougel-59": 0.3953488372093023,
        "meteor-171": 0.4573944479234437,
        "meteor-28": 0.5007872679445237,
        "meteor-6": 0.32761136336414814,
        "meteor-198": 0.40242980812968526,
        "meteor-70": 0.4122446816296965,
        "meteor-62": 0.32761136336414814,
        "meteor-57": 0.4828682239657631,
        "meteor-35": 0.3514035087719299,
        "meteor-197": 0.39829276686402676,
        "meteor-26": 0.4521151484714238,
        "meteor-181": 0.38066927083333324,
        "meteor-147": 0.3970202444723705,
        "meteor-22": 0.41563493317879285,
        "meteor-159": 0.3730027686345581,
        "meteor-111": 0.46756391317814694,
        "meteor-8": 0.36856764928193503,
        "meteor-7": 0.4662524259177716,
        "meteor-23": 0.42418067721991853,
        "meteor-55": 0.43162244348693457,
        "meteor-59": 0.3264386592762559,
        "ruby-171": 0.28,
        "ruby-28": 0.35064935064935066,
        "ruby-6": 0.2450980392156863,
        "ruby-198": 0.30612244897959184,
        "ruby-70": 0.25,
        "ruby-62": 0.2450980392156863,
        "ruby-57": 0.452054794520548,
        "ruby-35": 0.23300970873786409,
        "ruby-197": 0.27450980392156865,
        "ruby-26": 0.4246575342465754,
        "ruby-181": 0.19819819819819817,
        "ruby-147": 0.3013698630136986,
        "ruby-22": 0.3835616438356164,
        "ruby-159": 0.30612244897959184,
        "ruby-111": 0.30097087378640774,
        "ruby-8": 0.25806451612903225,
        "ruby-7": 0.30000000000000004,
        "ruby-23": 0.23711340206185572,
        "ruby-55": 0.2142857142857143,
        "ruby-59": 0.23232323232323238,
        "codebertscore_f1-171": 0.8143314123153687,
        "codebertscore_f3-171": 0.7906461954116821,
        "codebertscore_f1-28": 0.859693169593811,
        "codebertscore_f3-28": 0.8545784950256348,
        "codebertscore_f1-6": 0.8004671335220337,
        "codebertscore_f3-6": 0.77632737159729,
        "codebertscore_f1-198": 0.7950314283370972,
        "codebertscore_f3-198": 0.781764566898346,
        "codebertscore_f1-70": 0.7972295880317688,
        "codebertscore_f3-70": 0.785836935043335,
        "codebertscore_f1-62": 0.8006088137626648,
        "codebertscore_f3-62": 0.7733171582221985,
        "codebertscore_f1-57": 0.8317064046859741,
        "codebertscore_f3-57": 0.7859241962432861,
        "codebertscore_f1-35": 0.8064393997192383,
        "codebertscore_f3-35": 0.7833172678947449,
        "codebertscore_f1-197": 0.8231843709945679,
        "codebertscore_f3-197": 0.7964316010475159,
        "codebertscore_f1-26": 0.8211856484413147,
        "codebertscore_f3-26": 0.7779577374458313,
        "codebertscore_f1-181": 0.795647919178009,
        "codebertscore_f3-181": 0.8034757971763611,
        "codebertscore_f1-147": 0.7783053517341614,
        "codebertscore_f3-147": 0.7618284821510315,
        "codebertscore_f1-22": 0.810818612575531,
        "codebertscore_f3-22": 0.7788470387458801,
        "codebertscore_f1-159": 0.7969504594802856,
        "codebertscore_f3-159": 0.7848005294799805,
        "codebertscore_f1-111": 0.8275727033615112,
        "codebertscore_f3-111": 0.801821768283844,
        "codebertscore_f1-8": 0.8142016530036926,
        "codebertscore_f3-8": 0.7931166291236877,
        "codebertscore_f1-7": 0.82261061668396,
        "codebertscore_f3-7": 0.7979328036308289,
        "codebertscore_f1-23": 0.81873619556427,
        "codebertscore_f3-23": 0.7946948409080505,
        "codebertscore_f1-55": 0.8002870678901672,
        "codebertscore_f3-55": 0.7917383313179016,
        "codebertscore_f1-59": 0.8179698586463928,
        "codebertscore_f3-59": 0.7959403991699219,
        "codebertscore_s_f1-171": 0.8083482384681702,
        "codebertscore_s_f3-171": 0.7809361219406128,
        "codebertscore_s_f1-28": 0.8654298186302185,
        "codebertscore_s_f3-28": 0.8576099276542664,
        "codebertscore_s_f1-6": 0.8035596013069153,
        "codebertscore_s_f3-6": 0.7763379216194153,
        "codebertscore_s_f1-198": 0.7924481630325317,
        "codebertscore_s_f3-198": 0.7769742608070374,
        "codebertscore_s_f1-70": 0.7949540019035339,
        "codebertscore_s_f3-70": 0.7796100974082947,
        "codebertscore_s_f1-62": 0.8041103482246399,
        "codebertscore_s_f3-62": 0.773555338382721,
        "codebertscore_s_f1-57": 0.827216386795044,
        "codebertscore_s_f3-57": 0.7772664427757263,
        "codebertscore_s_f1-35": 0.801856279373169,
        "codebertscore_s_f3-35": 0.7764892578125,
        "codebertscore_s_f1-197": 0.8186283111572266,
        "codebertscore_s_f3-197": 0.7871755957603455,
        "codebertscore_s_f1-26": 0.8231588006019592,
        "codebertscore_s_f3-26": 0.7739441990852356,
        "codebertscore_s_f1-181": 0.793584406375885,
        "codebertscore_s_f3-181": 0.8006728887557983,
        "codebertscore_s_f1-147": 0.7709460258483887,
        "codebertscore_s_f3-147": 0.751506507396698,
        "codebertscore_s_f1-22": 0.8096286058425903,
        "codebertscore_s_f3-22": 0.7749124765396118,
        "codebertscore_s_f1-159": 0.7939342856407166,
        "codebertscore_s_f3-159": 0.779689371585846,
        "codebertscore_s_f1-111": 0.8222548365592957,
        "codebertscore_s_f3-111": 0.7918639779090881,
        "codebertscore_s_f1-8": 0.8095694184303284,
        "codebertscore_s_f3-8": 0.7874407172203064,
        "codebertscore_s_f1-7": 0.8187683820724487,
        "codebertscore_s_f3-7": 0.7902783751487732,
        "codebertscore_s_f1-23": 0.8106955885887146,
        "codebertscore_s_f3-23": 0.782020092010498,
        "codebertscore_s_f1-55": 0.8066036701202393,
        "codebertscore_s_f3-55": 0.7970468401908875,
        "codebertscore_s_f1-59": 0.8069525361061096,
        "codebertscore_s_f3-59": 0.7808034420013428,
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-171": 3,
        "raw_gpt35_nswr-171": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-198": 4,
        "raw_gpt35_nswr-198": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-159": 3,
        "raw_gpt35_nswr-159": "3",
        "gpt35_nswr-111": 3,
        "raw_gpt35_nswr-111": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n",
        "snippet": [
            "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n"
        ],
        "simplified": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "task_id": "1",
        "163": "std::vector<std::string> result;\n    int nest_counter = 0;\n    int start_idx = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            nest_counter++;\n        } else if (paren_string[i] == ')') {\n            nest_counter--;\n        }\n        if (nest_counter == 0) {\n            result.push_back(paren_string.substr(start_idx, i - start_idx + 1));\n            start_idx = i + 1;\n        }\n    }\n    return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<std::string> result;\n    std::string final_result;\n    std::stack<char> temp_stack;\n    int i = 0;\n    while(i < paren_string.length()) {\n        if(paren_string[i] == '(') {\n            temp_stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == ')') {\n            temp_stack.pop();\n            final_result += paren_string[i];\n            if(temp_stack.empty()) {\n                result.push_back(final_result);\n                final_result.clear();\n            }\n        }\n        else {\n            if(!temp_stack.empty()) {\n                final_result += paren_string[i];\n            }\n        }\n        i++;\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (paren_string.empty()) {\n        return {};\n    }\n    int st = 0;\n    std::vector<std::string> result;\n    std::stack<char> stk;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n        } else if (paren_string[i] == ')') {\n            stk.pop();\n        }\n        if (stk.empty()) {\n            result.push_back(paren_string.substr(st, i - st + 1));\n            st = i + 1;\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "189": "// TODO: Write your code here\n    std::vector<std::string> result;\n    std::stack<char> stack;\n    std::string temp;\n    for(auto c: paren_string){\n        if(c=='('){\n            stack.push(c);\n        }\n        else if(c==')'){\n            if(stack.top()=='('){\n                stack.pop();\n                temp+=c;\n                if(stack.empty()){\n                    result.push_back(temp);\n                    temp=\"\";\n                }\n            }\n        }\n    }\n    return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<std::string> result;\n    int start_position = 0;\n    int counter = 0;\n    int size = paren_string.size();\n    int index = 0;\n    std::string temp;\n    while(index < size){\n        if(paren_string[index] == '('){\n            if(counter == 0){\n                start_position = index;\n            }\n            counter++;\n        }\n        else if(paren_string[index] == ')'){\n            counter--;\n            if(counter == 0){\n                temp = paren_string.substr(start_position,index - start_position + 1);\n                result.push_back(temp);\n            }\n        }\n        index++;\n    }\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<std::string> groups;\n    std::stack<char> parens;\n    std::string group;\n    for (char c : paren_string) {\n        if (c == '(') {\n            parens.push(c);\n            group.push_back(c);\n        } else if (c == ')') {\n            if (parens.size() == 0) {\n                throw std::invalid_argument(\"mis-matched parens\");\n            }\n            parens.pop();\n            group.push_back(c);\n            if (parens.size() == 0) {\n                groups.push_back(group);\n                group.clear();\n            }\n        }\n    }\n    if (parens.size() != 0) {\n        throw std::invalid_argument(\"mis-matched parens\");\n    }\n    return groups;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> vec;\n    std::string str;\n    int i = 0;\n    while(paren_string[i] != '\\0') {\n        if(paren_string[i] == ' ')\n            i++;\n        else if(paren_string[i] == '(') {\n            while(paren_string[i] != ')') {\n                str += paren_string[i];\n                i++;\n            }\n            str += paren_string[i];\n            vec.push_back(str);\n            str.clear();\n            i++;\n        }\n    }\n    return vec;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (paren_string.empty()) {\n    return {};\n  }\n  std::vector<std::string> ret;\n  int stack = 0;\n  int start = 0;\n  for (int i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n      stack++;\n    } else if (paren_string[i] == ')') {\n      stack--;\n    }\n    if (stack == 0) {\n      ret.push_back(paren_string.substr(start, i-start+1));\n      start = i+1;\n    }\n  }\n  return ret;",
        "grade-35": {
            "execution": 0
        },
        "188": "// Your code here\n  std::vector<std::string> result;\n  std::string t;\n  int s = 0;\n  int e = 0;\n  while(e < paren_string.size()){\n    if(paren_string[e] == ' '){\n      if(t.size() != 0){\n        result.push_back(t);\n        t.clear();\n      }\n      e++;\n      s = e;\n    }else if(paren_string[e] == '('){\n      if(t.size() != 0){\n        result.push_back(t);\n        t.clear();\n      }\n      t += '(';\n      s = e + 1;\n      e++;\n    }else if(paren_string[e] == ')'){\n      t += ')';\n      e++;\n      if(s >= e){\n        result.push_back(t);\n        t.clear();\n      }\n    }else{\n      t += paren_string[e];\n      e++;\n    }\n  }\n  if(t.size() != 0){\n    result.push_back(t);\n  }\n  return result;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<std::string> result;\n  // You code here\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<std::string> v;\n    if(paren_string.length() == 0) return v;\n    if(paren_string.length() == 1) {\n        v.push_back(paren_string);\n        return v;\n    }\n    std::stack<int> s;\n    int val = paren_string[0];\n    if(val == '(') s.push(val);\n    if(val == ')') s.pop();\n    int start = 1;\n    int end = 1;\n    while(end < paren_string.length()) {\n        if(s.empty()) {\n            std::string sub = paren_string.substr(start, end - start);\n            v.push_back(sub);\n            start = end;\n        }\n        val = paren_string[end];\n        if(val == '(') s.push(val);\n        if(val == ')') s.pop();\n        end++;\n    }\n    if(!s.empty()) {\n        v.push_back(paren_string.substr(start, end - start));\n    }\n    return v;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<std::string> res;\n\tstd::stack<char> st;\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < paren_string.length(); i++) {\n\t\tif (paren_string[i] == '(') {\n\t\t\tif (st.empty()) {\n\t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t\tst.push(paren_string[i]);\n\t\t\ttemp += paren_string[i];\n\t\t}\n\t\telse if (paren_string[i] == ')') {\n\t\t\tst.pop();\n\t\t\ttemp += paren_string[i];\n\t\t\tif (st.empty()) {\n\t\t\t\tres.push_back(temp);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;",
        "grade-139": {
            "execution": 1
        },
        "22": "// YOUR CODE HERE\n\tstd::vector<std::string> result;\n\tstd::string word = \"\";\n\tint count = 0;\n\tfor (char c : paren_string) {\n\t\tif (c == '(') {\n\t\t\tif (count == 0) {\n\t\t\t\tword += c;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if (c == ')') {\n\t\t\tcount--;\n\t\t\tif (count == 0) {\n\t\t\t\tword += c;\n\t\t\t\tresult.push_back(word);\n\t\t\t\tword = \"\";\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "151": "// Your code goes here.\n\tstd::vector<std::string> v;\n\tfor (int i = 0; i < paren_string.size(); i++) {\n\t\tif (paren_string[i] == '(') {\n\t\t\tint j = i;\n\t\t\tint count = 0;\n\t\t\twhile (j < paren_string.size()) {\n\t\t\t\tif (paren_string[j] == '(') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse if (paren_string[j] == ')') {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t\tif (count == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (count == 0) {\n\t\t\t\tstd::string s;\n\t\t\t\tint c = 0;\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tif (paren_string[k] == '(') {\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t\telse if (paren_string[k] == ')') {\n\t\t\t\t\t\tc--;\n\t\t\t\t\t}\n\t\t\t\t\tif (c == 0) {\n\t\t\t\t\t\ti = k;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ts += paren_string[k];\n\t\t\t\t}\n\t\t\t\tv.push_back(s);\n\t\t\t}\n\t\t}\n\t}\n\treturn v;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> s;\n    int i = 0;\n    while (i < paren_string.size()) {\n        int j = i;\n        int count = 0;\n        while (paren_string[j] != ')' || count != 0) {\n            if (paren_string[j] == '(') {\n                count++;\n            } else if (paren_string[j] == ')') {\n                count--;\n            }\n            j++;\n        }\n        s.push_back(paren_string.substr(i, j - i + 1));\n        i = j + 1;\n    }\n    return s;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<std::string> ret;\n    int pos = -1;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            if (pos == -1) {\n                pos = i;\n            }\n        } else if (paren_string[i] == ')') {\n            if (pos == -1) {\n                continue;\n            }\n            if (i - pos == 1) {\n                pos = -1;\n                continue;\n            }\n            bool ok = true;\n            for (int j = pos + 1; j < i; j++) {\n                if (paren_string[j] == '(') {\n                    ok = false;\n                    break;\n                }\n            }\n            if (ok) {\n                ret.push_back(paren_string.substr(pos, i - pos + 1));\n                pos = -1;\n            }\n        }\n    }\n    return ret;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> ans;\n    int i = 0;\n    int j = 0;\n    int length = paren_string.length();\n    while (j < length) {\n        if (paren_string[j] == ' ') {\n            j++;\n            continue;\n        }\n        if (paren_string[j] == '(') {\n            i = j;\n            int n = 1;\n            j++;\n            while (n != 0) {\n                if (paren_string[j] == ' ') {\n                    j++;\n                    continue;\n                }\n                if (paren_string[j] == '(') {\n                    n++;\n                }\n                if (paren_string[j] == ')') {\n                    n--;\n                }\n                j++;\n            }\n            ans.push_back(paren_string.substr(i, j - i));\n        }\n    }\n    return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> groups;\n    std::string temp = \"\";\n    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == ' ') continue;\n        if (paren_string[i] == '(') {\n            temp = temp + paren_string[i];\n        } else if (paren_string[i] == ')') {\n            temp = temp + paren_string[i];\n            groups.push_back(temp);\n            temp = \"\";\n        }\n    }\n    return groups;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> results;\n    // TODO: implement this function\n    int count = 0;\n    std::string tmp;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            count++;\n            tmp += '(';\n        }\n        else if (paren_string[i] == ')') {\n            count--;\n            tmp += ')';\n        }\n        if (count == 0 && tmp.size() > 0) {\n            results.push_back(tmp);\n            tmp = \"\";\n        }\n    }\n    return results;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> output;\n    int n = paren_string.size();\n    int i = 0;\n    std::string paren;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < n; i++) {\n        if (paren_string[i] == '(') {\n            open++;\n            paren += '(';\n        }\n        else if (paren_string[i] == ')') {\n            close++;\n            paren += ')';\n        }\n        if (open == close) {\n            output.push_back(paren);\n            paren = \"\";\n            open = 0;\n            close = 0;\n        }\n    }\n    return output;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.3731664108375588,
        "bleu-28": 0.25346852211467913,
        "bleu-6": 0.27957884972932756,
        "bleu-189": 0.22593303967370645,
        "bleu-70": 0.21023593690078232,
        "bleu-62": 0.16620389434741673,
        "bleu-57": 0.2711563367249892,
        "bleu-35": 0.3345406578903827,
        "bleu-188": 0.132053963090428,
        "bleu-26": 0.0005664990572382063,
        "bleu-173": 0.1450410072326781,
        "bleu-139": 0.3340768427542787,
        "bleu-22": 0.2903702942454116,
        "bleu-151": 0.19928531347820297,
        "bleu-108": 0.24105985908270566,
        "bleu-8": 0.23151674954078072,
        "bleu-7": 0.21449594587487858,
        "bleu-23": 0.38457269682519607,
        "bleu-55": 0.33524707301157947,
        "bleu-59": 0.2921828880035158,
        "codebleu-163": 0.6249586301133391,
        "codebleu-28": 0.5836681710020927,
        "codebleu-6": 0.612751577433178,
        "codebleu-189": 0.531737010312675,
        "codebleu-70": 0.6115202135020262,
        "codebleu-62": 0.5467859378603671,
        "codebleu-57": 0.5314310776035422,
        "codebleu-35": 0.6367059266053584,
        "codebleu-188": 0.6367664986326644,
        "codebleu-26": 0.06654692576741154,
        "codebleu-173": 0.6470964437605399,
        "codebleu-139": 0.6197453039317936,
        "codebleu-22": 0.5568597410299495,
        "codebleu-151": 0.6604907341448787,
        "codebleu-108": 0.566969273861719,
        "codebleu-8": 0.6562018312351103,
        "codebleu-7": 0.6286895034597755,
        "codebleu-23": 0.5878508777682011,
        "codebleu-55": 0.654711923792646,
        "codebleu-59": 0.6776651728768459,
        "chrf-163": 0.3755106528348104,
        "chrf-28": 0.37701042830540193,
        "chrf-6": 0.36605098082203436,
        "chrf-189": 0.276911962950888,
        "chrf-70": 0.34781911121266257,
        "chrf-62": 0.3561348733315788,
        "chrf-57": 0.34198970850321087,
        "chrf-35": 0.37334388380643596,
        "chrf-188": 0.3317026805225069,
        "chrf-26": 0.07768772663000434,
        "chrf-173": 0.3649672069027607,
        "chrf-139": 0.40946093849671256,
        "chrf-22": 0.2953068478412355,
        "chrf-151": 0.3882846116201698,
        "chrf-108": 0.33320932413039317,
        "chrf-8": 0.3593343120636372,
        "chrf-7": 0.3911536820308202,
        "chrf-23": 0.39890883314925646,
        "chrf-55": 0.3686861842323676,
        "chrf-59": 0.42226283386856767,
        "rougel-163": 0.6347826086956521,
        "rougel-28": 0.49429657794676807,
        "rougel-6": 0.4902723735408561,
        "rougel-189": 0.4686192468619247,
        "rougel-70": 0.5,
        "rougel-62": 0.39575971731448767,
        "rougel-57": 0.4576271186440678,
        "rougel-35": 0.5983606557377049,
        "rougel-188": 0.4114285714285714,
        "rougel-26": 0.1044776119402985,
        "rougel-173": 0.3556851311953353,
        "rougel-139": 0.5440613026819923,
        "rougel-22": 0.5526315789473685,
        "rougel-151": 0.4228571428571428,
        "rougel-108": 0.48132780082987553,
        "rougel-8": 0.4966887417218543,
        "rougel-7": 0.46153846153846156,
        "rougel-23": 0.6060606060606061,
        "rougel-55": 0.6345381526104418,
        "rougel-59": 0.5937499999999999,
        "meteor-163": 0.42775651697620953,
        "meteor-28": 0.38040482885000076,
        "meteor-6": 0.37494676680013744,
        "meteor-189": 0.41053831836174326,
        "meteor-70": 0.47049270239572133,
        "meteor-62": 0.38226624541029813,
        "meteor-57": 0.3921376270425744,
        "meteor-35": 0.43135877817351864,
        "meteor-188": 0.4368977234449769,
        "meteor-26": 0.03346080305927342,
        "meteor-173": 0.38423965039496005,
        "meteor-139": 0.4568546889619922,
        "meteor-22": 0.5351157894736842,
        "meteor-151": 0.5320655523183864,
        "meteor-108": 0.3888585511405209,
        "meteor-8": 0.43324101717931945,
        "meteor-7": 0.42771392323759827,
        "meteor-23": 0.5397644874586158,
        "meteor-55": 0.5528505732738452,
        "meteor-59": 0.5610233981734057,
        "ruby-163": 0.4482758620689655,
        "ruby-28": 0.3489932885906041,
        "ruby-6": 0.3706293706293706,
        "ruby-189": 0.31999999999999995,
        "ruby-70": 0.33333333333333337,
        "ruby-62": 0.26627218934911245,
        "ruby-57": 0.28688524590163933,
        "ruby-35": 0.4,
        "ruby-188": 0.26694915254237284,
        "ruby-26": 0.03508771929824561,
        "ruby-173": 0.24454148471615722,
        "ruby-139": 0.40816326530612246,
        "ruby-22": 0.3421052631578947,
        "ruby-151": 0.26694915254237284,
        "ruby-108": 0.2834645669291339,
        "ruby-8": 0.3351063829787234,
        "ruby-7": 0.3023255813953488,
        "ruby-23": 0.4273504273504274,
        "ruby-55": 0.5259259259259259,
        "ruby-59": 0.4577464788732394,
        "codebertscore_f1-163": 0.7983442544937134,
        "codebertscore_f3-163": 0.7983219623565674,
        "codebertscore_f1-28": 0.7901875376701355,
        "codebertscore_f3-28": 0.7893948554992676,
        "codebertscore_f1-6": 0.793732225894928,
        "codebertscore_f3-6": 0.7928952574729919,
        "codebertscore_f1-189": 0.7438076734542847,
        "codebertscore_f3-189": 0.7528921961784363,
        "codebertscore_f1-70": 0.7865293025970459,
        "codebertscore_f3-70": 0.7841694355010986,
        "codebertscore_f1-62": 0.7564662098884583,
        "codebertscore_f3-62": 0.7677304744720459,
        "codebertscore_f1-57": 0.7950915694236755,
        "codebertscore_f3-57": 0.7795079946517944,
        "codebertscore_f1-35": 0.8079462051391602,
        "codebertscore_f3-35": 0.7970830202102661,
        "codebertscore_f1-188": 0.7630907893180847,
        "codebertscore_f3-188": 0.775722086429596,
        "codebertscore_f1-26": 0.5743077993392944,
        "codebertscore_f3-26": 0.5437796711921692,
        "codebertscore_f1-173": 0.74573814868927,
        "codebertscore_f3-173": 0.747342050075531,
        "codebertscore_f1-139": 0.79860919713974,
        "codebertscore_f3-139": 0.7888514399528503,
        "codebertscore_f1-22": 0.7711846232414246,
        "codebertscore_f3-22": 0.7733407020568848,
        "codebertscore_f1-151": 0.7827153205871582,
        "codebertscore_f3-151": 0.7853907346725464,
        "codebertscore_f1-108": 0.796353280544281,
        "codebertscore_f3-108": 0.7909173369407654,
        "codebertscore_f1-8": 0.7599834203720093,
        "codebertscore_f3-8": 0.7697883248329163,
        "codebertscore_f1-7": 0.7808879017829895,
        "codebertscore_f3-7": 0.7755972146987915,
        "codebertscore_f1-23": 0.8054100871086121,
        "codebertscore_f3-23": 0.7857757210731506,
        "codebertscore_f1-55": 0.8144453763961792,
        "codebertscore_f3-55": 0.8133185505867004,
        "codebertscore_f1-59": 0.8188334703445435,
        "codebertscore_f3-59": 0.809821367263794,
        "codebertscore_s_f1-163": 0.7963811159133911,
        "codebertscore_s_f3-163": 0.7976301312446594,
        "codebertscore_s_f1-28": 0.7954649329185486,
        "codebertscore_s_f3-28": 0.7928826212882996,
        "codebertscore_s_f1-6": 0.7940413355827332,
        "codebertscore_s_f3-6": 0.7901989817619324,
        "codebertscore_s_f1-189": 0.7484868168830872,
        "codebertscore_s_f3-189": 0.7567857503890991,
        "codebertscore_s_f1-70": 0.7903453707695007,
        "codebertscore_s_f3-70": 0.7879021167755127,
        "codebertscore_s_f1-62": 0.7566992044448853,
        "codebertscore_s_f3-62": 0.7671689987182617,
        "codebertscore_s_f1-57": 0.7991995811462402,
        "codebertscore_s_f3-57": 0.7829214334487915,
        "codebertscore_s_f1-35": 0.8148488998413086,
        "codebertscore_s_f3-35": 0.8026571869850159,
        "codebertscore_s_f1-188": 0.772230863571167,
        "codebertscore_s_f3-188": 0.7800922989845276,
        "codebertscore_s_f1-26": 0.6080097556114197,
        "codebertscore_s_f3-26": 0.5832241177558899,
        "codebertscore_s_f1-173": 0.7561467289924622,
        "codebertscore_s_f3-173": 0.75604248046875,
        "codebertscore_s_f1-139": 0.8040362000465393,
        "codebertscore_s_f3-139": 0.7923218011856079,
        "codebertscore_s_f1-22": 0.7800196409225464,
        "codebertscore_s_f3-22": 0.7829809784889221,
        "codebertscore_s_f1-151": 0.7941213250160217,
        "codebertscore_s_f3-151": 0.7929560542106628,
        "codebertscore_s_f1-108": 0.7995261549949646,
        "codebertscore_s_f3-108": 0.7920474410057068,
        "codebertscore_s_f1-8": 0.7742008566856384,
        "codebertscore_s_f3-8": 0.7803846597671509,
        "codebertscore_s_f1-7": 0.7929967641830444,
        "codebertscore_s_f3-7": 0.7834324836730957,
        "codebertscore_s_f1-23": 0.8100974559783936,
        "codebertscore_s_f3-23": 0.788933277130127,
        "codebertscore_s_f1-55": 0.813974142074585,
        "codebertscore_s_f3-55": 0.8127501010894775,
        "codebertscore_s_f1-59": 0.810346245765686,
        "codebertscore_s_f3-59": 0.8009477853775024,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n",
        "snippet": [
            "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n"
        ],
        "simplified": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
        "task_id": "107",
        "166": "// TODO\n    return std::make_tuple(1, 2);",
        "grade-166": {
            "execution": 0
        },
        "28": "std::tuple<long, long> result(0, 0);\n  for (int i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n      if (i % 2 == 0) {\n        std::get<0>(result)++;\n      } else {\n        std::get<1>(result)++;\n      }\n    }\n  }\n  return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Write your code here\n    // Corner cases\n    if (n < 1) {\n        return std::make_tuple(0, 0);\n    }\n    // dp[i][j] indicates whether the number from i to j can be a palindrome\n    // dp[i][j] = (dp[i+1][j-1] && s[i] == s[j])\n    // if (s[i] == s[j]) {\n    //     if (dp[i+1][j-1]) {\n    //         dp[i][j] = true;\n    //     }\n    // }\n    // dp[i][i] = true;\n    // for (int i = 0; i < n; ++i) {\n    //     dp[i][i] = true;\n    // }\n    // for (int j = 1; j < n; ++j) {\n    //     for (int i = 0; i < j; ++i) {\n    //         if (s[i] == s[j]) {\n    //             if (dp[i+1][j-1]) {\n    //                 dp[i][j] = true;\n    //             }\n    //         }\n    //     }\n    // }\n    std::vector<int> dp[n];\n    for (int i = 0; i < n; ++i) {\n        dp[i].resize(n);\n    }\n    for (int i = 0; i < n; ++i) {\n        dp[i][i] = 1;\n    }\n    for (int j = 1; j < n; ++j) {\n        for (int i = 0; i < j; ++i) {\n            if (s[i] == s[j]) {\n                if (dp[i+1][j-1]) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n    }\n    for (int j = 0; j < n; ++j) {\n        for (int i = 0; i < n; ++i) {\n            printf(\"%d \", dp[i][j",
        "grade-6": {
            "execution": 0
        },
        "194": "// TODO: Implement the function here\n    std::tuple<long, long> result;\n    long even = 0, odd = 0;\n    for(long i = 1; i <= n; i++) {\n        long rev = 0, t = i;\n        while(t) {\n            rev = rev * 10 + t % 10;\n            t /= 10;\n        }\n        if(rev == i) {\n            if(i % 2 == 0) even++;\n            else odd++;\n        }\n    }\n    result = std::make_tuple(even, odd);\n    return result;",
        "grade-194": {
            "execution": 1
        },
        "70": "int even = 0, odd = 0;\n    int d = log10(n) + 1;\n    for (int i = 0; i < d; i++) {\n        even += 9 * pow(10, i - 1);\n        odd += 9 * pow(10, i - 1);\n    }\n    if (d % 2 == 0)\n        odd++;\n    return std::make_tuple(even, odd);",
        "grade-70": {
            "execution": 0
        },
        "62": "std::tuple<long, long> ret(0, 0);\n    int last = 0;\n    for (long i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            last = is_even(i) ? 0 : 1;\n            std::get<last>(ret)++;\n        }\n    }\n    return ret;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::tuple<long, long>result(0, 0);\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n        std::string num = std::to_string(i);\n        std::string num_rev = num;\n        std::reverse(num_rev.begin(), num_rev.end());\n        if (num == num_rev) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    std::get<0>(result) = even_count;\n    std::get<1>(result) = odd_count;\n    return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::tuple<long, long> retval{0, 0};\n    if (n > 1000) {\n        n = 1000;\n    }\n    std::vector<int> counts(10, 0);\n    int max_digits = 0;\n    while (n > 0) {\n        int d = n % 10;\n        counts[d]++;\n        n /= 10;\n        max_digits++;\n    }\n    for (int d = 0; d < 10; d++) {\n        for (int i = 0; i < counts[d]; i++) {\n            if (d % 2 == 0) {\n                std::get<0>(retval)++;\n            } else {\n                std::get<1>(retval)++;\n            }\n        }\n    }\n    // Let's also consider a single digit as a palindrome.\n    std::get<0>(retval)++;\n    // If the number has an even number of digits, then we will have a middle digit which\n    // we can choose anything.\n    if (max_digits % 2 == 0) {\n        // From the remaining counts, we have n choices to choose the middle element.\n        long possibilities = 1;\n        for (int d = 0; d < 10; d++) {\n            if (counts[d] > 0) {\n                possibilities *= counts[d];\n            }\n        }\n        std::get<0>(retval) += possibilities;\n        std::get<1>(retval) += possibilities;\n    }\n    return retval;",
        "grade-35": {
            "execution": 0
        },
        "193": "long count_even = 0;\n  long count_odd = 0;\n  // Write your code here\n  for (long i = 1; i <= n; i++) {\n    if (std::to_string(i) == std::string(std::to_string(i).rbegin(), std::to_string(i).rend())) {\n      if (i % 2 == 0) {\n        count_even++;\n      } else {\n        count_odd++;\n      }\n    }\n  }\n  return std::make_tuple(count_even, count_odd);",
        "grade-193": {
            "execution": 0
        },
        "26": "// count the number of even and odd palindromes from 1 to n\n    long even_count = 0;\n    long odd_count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i < 10) {\n            ++odd_count;\n        } else if (i < 100) {\n            if (i % 11 == 0) {\n                ++even_count;\n            } else {\n                ++odd_count;\n            }\n        } else if (i < 1000) {\n            if (i % 11 == 0) {\n                ++even_count;\n            } else if (i % 100 == (i / 10) % 10 * 10 + i / 100) {\n                ++even_count;\n            } else {\n                ++odd_count;\n            }\n        }\n    }\n    return std::make_tuple(even_count, odd_count);",
        "grade-26": {
            "execution": 0
        },
        "177": "// Write your code here\n    int even = 0;\n    int odd = 0;\n    for(int i = 1; i <= n; i++){\n        int num = i;\n        int rev = 0;\n        while(num > 0){\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        if(rev == i){\n            if(i % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n        }\n    }\n    return std::make_tuple(even, odd);",
        "grade-177": {
            "execution": 1
        },
        "142": "int dp[n + 1][2];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    dp[0][1] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j < 10; j++) {\n            if (i - j >= 0) {\n                dp[i][0] += dp[i - j][1];\n                dp[i][1] += dp[i - j][0];\n            }\n        }\n    }\n    return std::make_tuple(dp[n][0], dp[n][1]);",
        "grade-142": {
            "execution": 0
        },
        "22": "if (n <= 0) {\n        return std::make_tuple(0, 0);\n    }\n    long count = 0;\n    long oddCount = 0;\n    long evenCount = 0;\n    long num = 1;\n    while (num <= n) {\n        long temp = num;\n        long rev = 0;\n        while (temp > 0) {\n            rev = (rev * 10) + (temp % 10);\n            temp /= 10;\n        }\n        if (num == rev) {\n            if (num % 2 == 0) {\n                ++evenCount;\n            } else {\n                ++oddCount;\n            }\n        }\n        ++num;\n    }\n    return std::make_tuple(evenCount, oddCount);",
        "grade-22": {
            "execution": 1
        },
        "154": "int num_digits = floor(log10(n)) + 1;\n  long tens = pow(10, num_digits-1);\n  long odd_palindromes_count = 0;\n  long even_palindromes_count = 0;\n  if (num_digits % 2 == 0) {\n    // compute the number of odd palindromes that are smaller than n\n    odd_palindromes_count = 9;\n    for (int i = 1; i < num_digits/2; ++i) {\n      odd_palindromes_count *= 10;\n    }\n    odd_palindromes_count = odd_palindromes_count + tens - 1;\n    // compute the number of even palindromes that are smaller than n\n    even_palindromes_count = 10;\n    for (int i = 1; i < num_digits/2; ++i) {\n      even_palindromes_count *= 10;\n    }\n    even_palindromes_count = even_palindromes_count + tens - 1;\n  } else {\n    // compute the number of odd palindromes that are smaller than n\n    odd_palindromes_count = 9;\n    for (int i = 1; i < (num_digits+1)/2; ++i) {\n      odd_palindromes_count *= 10;\n    }\n    odd_palindromes_count = odd_palindromes_count + tens - 1;\n    // compute the number of even palindromes that are smaller than n\n    even_palindromes_count = 9;\n    for (int i = 1; i < (num_digits+1)/2; ++i) {\n      even_palindromes_count *= 10;\n    }\n    even_palindromes_count = even_palindromes_count + tens - 1;\n  }\n  // compute the number of palindromes less than or equal to n\n  int first_half = n / tens;\n  int mid = (n / 10) % 10;\n  int second_half = n %",
        "grade-154": {
            "execution": 0
        },
        "110": "std::tuple<long, long> result;\n  std::get<0>(result) = 0;\n  std::get<1>(result) = 0;\n  if (n < 1) return result;\n  for (long i = 1; i <= n; i++) {\n    long t = i;\n    long rev = 0;\n    while (t > 0) {\n      rev = rev * 10 + t % 10;\n      t /= 10;\n    }\n    if (rev == i) {\n      if (i % 2 == 0) {\n        std::get<0>(result)++;\n      } else {\n        std::get<1>(result)++;\n      }\n    }\n  }\n  return result;",
        "grade-110": {
            "execution": 1
        },
        "8": "long even = 0, odd = 0;\n  for (long i = 1; i <= n; i++) {\n    std::string s = std::to_string(i);\n    if (s == std::string(s.rbegin(), s.rend())) {\n      s.size() % 2 == 0 ? even++ : odd++;\n    }\n  }\n  return std::make_tuple(even, odd);",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n    long even = 0, odd = 0;\n    for(long i = 1; i <= n; i++) {\n        string s = to_string(i);\n        if(s.length() % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even, odd);",
        "grade-7": {
            "execution": 0
        },
        "23": "// Implement this placeholder.\n    return std::make_tuple(0, 0);",
        "grade-23": {
            "execution": 0
        },
        "55": "std::tuple<long, long> res{0, 0};\n  if (n < 1) {\n    return res;\n  }\n  if (n > 1) {\n    res = even_odd_palindrome(n / 10);\n  }\n  long odd = std::get<1>(res);\n  long even = std::get<0>(res);\n  if (n % 2 == 0) {\n    ++even;\n  } else {\n    ++odd;\n  }\n  return std::make_tuple(even, odd);",
        "grade-55": {
            "execution": 0
        },
        "59": "int even = 0, odd = 0;\n    for (int i = 1; i <= n; i++) {\n        std::string s = std::to_string(i);\n        int len = s.length();\n        bool isPalindrome = true;\n        for (int j = 0; j < len / 2; j++) {\n            if (s[j] != s[len - j - 1]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        if (isPalindrome) {\n            if (len % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return std::make_tuple(even, odd);",
        "grade-59": {
            "execution": 0
        },
        "bleu-166": 0.00020682109181891778,
        "bleu-28": 0.3059517997936003,
        "bleu-6": 0.039268287971508976,
        "bleu-194": 0.25095019455426715,
        "bleu-70": 0.22685865294884347,
        "bleu-62": 0.1820087912818739,
        "bleu-57": 0.2763179979549433,
        "bleu-35": 0.08674205482358471,
        "bleu-193": 0.3150178147505358,
        "bleu-26": 0.17077834352551988,
        "bleu-177": 0.29644987969342557,
        "bleu-142": 0.1928470340484048,
        "bleu-22": 0.09841916808878745,
        "bleu-154": 0.08772470258949307,
        "bleu-110": 0.19420324538108424,
        "bleu-8": 0.376924666692926,
        "bleu-7": 0.3345045151027197,
        "bleu-23": 0.0007697408332035545,
        "bleu-55": 0.12884326509857533,
        "bleu-59": 0.24829410442218058,
        "codebleu-166": 0.0470119989775959,
        "codebleu-28": 0.48525429420078114,
        "codebleu-6": 0.5638794254057198,
        "codebleu-194": 0.5797185445829823,
        "codebleu-70": 0.5385456913147397,
        "codebleu-62": 0.4279979501291493,
        "codebleu-57": 0.6558818504278315,
        "codebleu-35": 0.5977714585326698,
        "codebleu-193": 0.5734977030752352,
        "codebleu-26": 0.5769977694049077,
        "codebleu-177": 0.5501907291560069,
        "codebleu-142": 0.539016421619244,
        "codebleu-22": 0.5294851928374654,
        "codebleu-154": 0.554662893319823,
        "codebleu-110": 0.564474690399306,
        "codebleu-8": 0.613284604993067,
        "codebleu-7": 0.5237302989391139,
        "codebleu-23": 0.07326839784746628,
        "codebleu-55": 0.5020661157024793,
        "codebleu-59": 0.6199683365776787,
        "chrf-166": 0.05048457772812134,
        "chrf-28": 0.28450779964284567,
        "chrf-6": 0.17774336913352193,
        "chrf-194": 0.25706012578782006,
        "chrf-70": 0.2207744024533015,
        "chrf-62": 0.2193955312534081,
        "chrf-57": 0.41326696560593507,
        "chrf-35": 0.20980906917003986,
        "chrf-193": 0.3611736556398594,
        "chrf-26": 0.23468282718844016,
        "chrf-177": 0.32319419985140707,
        "chrf-142": 0.2559392902297419,
        "chrf-22": 0.20641539965520242,
        "chrf-154": 0.16264540519016887,
        "chrf-110": 0.2443930335860385,
        "chrf-8": 0.39793579232793264,
        "chrf-7": 0.3386968078814888,
        "chrf-23": 0.07328476583021167,
        "chrf-55": 0.1887573973294994,
        "chrf-59": 0.35023537275395633,
        "rougel-166": 0.10810810810810811,
        "rougel-28": 0.45901639344262296,
        "rougel-6": 0.19030520646319568,
        "rougel-194": 0.44651162790697674,
        "rougel-70": 0.4864864864864865,
        "rougel-62": 0.41860465116279066,
        "rougel-57": 0.5062240663900415,
        "rougel-35": 0.2561576354679803,
        "rougel-193": 0.5120772946859904,
        "rougel-26": 0.4126984126984127,
        "rougel-177": 0.4854368932038835,
        "rougel-142": 0.3481781376518219,
        "rougel-22": 0.3574468085106383,
        "rougel-154": 0.24352331606217617,
        "rougel-110": 0.3902439024390244,
        "rougel-8": 0.5595854922279793,
        "rougel-7": 0.519774011299435,
        "rougel-23": 0.10526315789473685,
        "rougel-55": 0.3366336633663366,
        "rougel-59": 0.4789915966386555,
        "meteor-166": 0.03945885005636978,
        "meteor-28": 0.33958842015073426,
        "meteor-6": 0.2881941969324904,
        "meteor-194": 0.41895267606166214,
        "meteor-70": 0.32670101966858284,
        "meteor-62": 0.28881030583248546,
        "meteor-57": 0.39147037556539815,
        "meteor-35": 0.35256209396085314,
        "meteor-193": 0.44981730844474405,
        "meteor-26": 0.35303850582137647,
        "meteor-177": 0.38087619614769697,
        "meteor-142": 0.35303183984166375,
        "meteor-22": 0.32046937863336683,
        "meteor-154": 0.30120481927710846,
        "meteor-110": 0.37811849144352255,
        "meteor-8": 0.41650290106732213,
        "meteor-7": 0.30837582840644495,
        "meteor-23": 0.059778792134831456,
        "meteor-55": 0.30925743577643056,
        "meteor-59": 0.3910648840113839,
        "ruby-166": 0.061855670103092786,
        "ruby-28": 0.2680412371134021,
        "ruby-6": 0.11521739130434783,
        "ruby-194": 0.2796610169491526,
        "ruby-70": 0.28865979381443296,
        "ruby-62": 0.22680412371134018,
        "ruby-57": 0.38888888888888884,
        "ruby-35": 0.15210355987055013,
        "ruby-193": 0.3363636363636363,
        "ruby-26": 0.3032258064516129,
        "ruby-177": 0.3302752293577982,
        "ruby-142": 0.22666666666666668,
        "ruby-22": 0.23188405797101452,
        "ruby-154": 0.1557093425605537,
        "ruby-110": 0.24832214765100669,
        "ruby-8": 0.35051546391752575,
        "ruby-7": 0.3402061855670103,
        "ruby-23": 0.05154639175257736,
        "ruby-55": 0.17142857142857137,
        "ruby-59": 0.3900709219858156,
        "codebertscore_f1-166": 0.6418702006340027,
        "codebertscore_f3-166": 0.6279487609863281,
        "codebertscore_f1-28": 0.7840994000434875,
        "codebertscore_f3-28": 0.7769877314567566,
        "codebertscore_f1-6": 0.6891914010047913,
        "codebertscore_f3-6": 0.7130601406097412,
        "codebertscore_f1-194": 0.7341151833534241,
        "codebertscore_f3-194": 0.7482263445854187,
        "codebertscore_f1-70": 0.7712945938110352,
        "codebertscore_f3-70": 0.7777436375617981,
        "codebertscore_f1-62": 0.7650498747825623,
        "codebertscore_f3-62": 0.7593057155609131,
        "codebertscore_f1-57": 0.7814035415649414,
        "codebertscore_f3-57": 0.8044120073318481,
        "codebertscore_f1-35": 0.6776098012924194,
        "codebertscore_f3-35": 0.7147545218467712,
        "codebertscore_f1-193": 0.8310215473175049,
        "codebertscore_f3-193": 0.844313383102417,
        "codebertscore_f1-26": 0.7170913219451904,
        "codebertscore_f3-26": 0.7376946806907654,
        "codebertscore_f1-177": 0.7564650774002075,
        "codebertscore_f3-177": 0.7643433213233948,
        "codebertscore_f1-142": 0.7504875659942627,
        "codebertscore_f3-142": 0.7532921433448792,
        "codebertscore_f1-22": 0.7072131633758545,
        "codebertscore_f3-22": 0.7106829285621643,
        "codebertscore_f1-154": 0.665103018283844,
        "codebertscore_f3-154": 0.7082811594009399,
        "codebertscore_f1-110": 0.7514685988426208,
        "codebertscore_f3-110": 0.7597483396530151,
        "codebertscore_f1-8": 0.8320870399475098,
        "codebertscore_f3-8": 0.8317914009094238,
        "codebertscore_f1-7": 0.7949209809303284,
        "codebertscore_f3-7": 0.8080903887748718,
        "codebertscore_f1-23": 0.629014790058136,
        "codebertscore_f3-23": 0.6050066947937012,
        "codebertscore_f1-55": 0.7340217232704163,
        "codebertscore_f3-55": 0.7340865135192871,
        "codebertscore_f1-59": 0.7642742991447449,
        "codebertscore_f3-59": 0.7858150005340576,
        "codebertscore_s_f1-166": 0.6197389960289001,
        "codebertscore_s_f3-166": 0.5999486446380615,
        "codebertscore_s_f1-28": 0.7702308893203735,
        "codebertscore_s_f3-28": 0.7672736048698425,
        "codebertscore_s_f1-6": 0.7325049042701721,
        "codebertscore_s_f3-6": 0.7411906123161316,
        "codebertscore_s_f1-194": 0.7211833000183105,
        "codebertscore_s_f3-194": 0.7366442680358887,
        "codebertscore_s_f1-70": 0.7609631419181824,
        "codebertscore_s_f3-70": 0.7657217979431152,
        "codebertscore_s_f1-62": 0.7526721358299255,
        "codebertscore_s_f3-62": 0.750654935836792,
        "codebertscore_s_f1-57": 0.7827390432357788,
        "codebertscore_s_f3-57": 0.8069677948951721,
        "codebertscore_s_f1-35": 0.7128075957298279,
        "codebertscore_s_f3-35": 0.7413585782051086,
        "codebertscore_s_f1-193": 0.8157414197921753,
        "codebertscore_s_f3-193": 0.8306007385253906,
        "codebertscore_s_f1-26": 0.7341647148132324,
        "codebertscore_s_f3-26": 0.7466508746147156,
        "codebertscore_s_f1-177": 0.7479116916656494,
        "codebertscore_s_f3-177": 0.7551900148391724,
        "codebertscore_s_f1-142": 0.735075056552887,
        "codebertscore_s_f3-142": 0.7432268857955933,
        "codebertscore_s_f1-22": 0.7137066721916199,
        "codebertscore_s_f3-22": 0.7162085175514221,
        "codebertscore_s_f1-154": 0.7013598084449768,
        "codebertscore_s_f3-154": 0.7329866290092468,
        "codebertscore_s_f1-110": 0.7371909022331238,
        "codebertscore_s_f3-110": 0.7466462254524231,
        "codebertscore_s_f1-8": 0.8191729784011841,
        "codebertscore_s_f3-8": 0.8196698427200317,
        "codebertscore_s_f1-7": 0.7874780297279358,
        "codebertscore_s_f3-7": 0.8003524541854858,
        "codebertscore_s_f1-23": 0.6041232347488403,
        "codebertscore_s_f3-23": 0.5786179304122925,
        "codebertscore_s_f1-55": 0.7151952981948853,
        "codebertscore_s_f3-55": 0.7159017324447632,
        "codebertscore_s_f1-59": 0.7694787383079529,
        "codebertscore_s_f3-59": 0.7881295084953308,
        "gpt35_nsnr-166": 3,
        "raw_gpt35_nsnr-166": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 3,
        "raw_gpt35_nsnr-154": "3",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-166": 2,
        "raw_gpt35_nswr-166": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-70": 0,
        "raw_gpt35_nswr-70": "Score: 1",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-193": 4,
        "raw_gpt35_nswr-193": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-142": 0,
        "raw_gpt35_nswr-142": "0",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-154": 2,
        "raw_gpt35_nswr-154": "2",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\nstd::vector<long> generate_integers(long a, long b) {\n",
        "snippet": [
            "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n"
        ],
        "simplified": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
        "task_id": "163",
        "169": "std::vector<long> output;\n  if (a > b) {\n    std::swap(a, b);\n  }\n  for (long x = a; x <= b; x++) {\n    if (x % 2 == 0) {\n      output.push_back(x);\n    }\n  }\n  return output;",
        "grade-169": {
            "execution": 0
        },
        "28": "std::vector<long> v;\n  if (a % 2 == 0 && b % 2 == 0) {\n    v.push_back(a);\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  } else if (a % 2 != 0 && b % 2 != 0) {\n    a++;\n    v.push_back(a);\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  } else if (a % 2 == 0 && b % 2 != 0) {\n    a++;\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  } else if (a % 2 != 0 && b % 2 == 0) {\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  }\n  return v;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n  if (a > b) {\n    std::swap(a, b);\n  }\n  while (a <= b) {\n    if (a % 2 == 0) {\n      result.push_back(a);\n    }\n    a++;\n  }\n  return result;",
        "grade-6": {
            "execution": 0
        },
        "198": "std::vector<long> v;\n  if (a == b) {\n    if (a % 2 == 0) {\n      v.push_back(a);\n    }\n    return v;\n  }\n  if (a > b) {\n    std::swap(a, b);\n  }\n  for (long i = a; i <= b; i++) {\n    if (i % 2 == 0) {\n      v.push_back(i);\n    }\n  }\n  return v;",
        "grade-198": {
            "execution": 0
        },
        "72": "// TODO: implement\n    std::vector<long> ret;\n    for (long i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            ret.push_back(i);\n        }\n    }\n    return ret;",
        "grade-72": {
            "execution": 0
        },
        "63": "std::vector<long> even_numbers;\n    for (long i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            even_numbers.push_back(i);\n        }\n    }\n    return even_numbers;",
        "grade-63": {
            "execution": 0
        },
        "58": "// Your code here.\n    std::vector<long> result;\n    // assert(a>=0);\n    // assert(b>=0);\n    if(a%2!=0){\n        a=a+1;\n    }\n    if(b%2!=0){\n        b=b-1;\n    }\n    for(int i=a;i<=b;i=i+2){\n        result.push_back(i);\n    }\n    return result;",
        "grade-58": {
            "execution": 0
        },
        "35": "if (a > b) {\n        return generate_integers(b, a);\n    }\n    if (a % 2 == 1) {\n        a++;\n    }\n    std::vector<long> evens;\n    for (long i = a; i <= b; i += 2) {\n        evens.push_back(i);\n    }\n    return evens;",
        "grade-35": {
            "execution": 0
        },
        "197": "std::vector<long> even_digits_between_a_and_b;\n  if (a > b) {\n    std::swap(a, b);\n  }\n  if (a % 2 == 0) {\n    for (long i = a; i <= b; i += 2) {\n      even_digits_between_a_and_b.push_back(i);\n    }\n  } else {\n    for (long i = a + 1; i <= b; i += 2) {\n      even_digits_between_a_and_b.push_back(i);\n    }\n  }\n  return even_digits_between_a_and_b;",
        "grade-197": {
            "execution": 0
        },
        "26": "std::vector<long> out;\n    if (a <= b) {\n        for (long i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                out.push_back(i);\n            }\n        }\n    } else {\n        for (long i = a; i >= b; i--) {\n            if (i % 2 == 0) {\n                out.push_back(i);\n            }\n        }\n    }\n    return out;",
        "grade-26": {
            "execution": 0
        },
        "179": "// initialize an empty vector\n  std::vector<long> even_integers;\n  // get the minimum and maximum values\n  long minimum = std::min(a, b);\n  long maximum = std::max(a, b);\n  // loop from minimum to maximum\n  for (long i = minimum; i <= maximum; i++) {\n    // check if i is an even number\n    if (i % 2 == 0) {\n      // if i is even, add it to our even_integers vector\n      even_integers.push_back(i);\n    }\n  }\n  // return our vector\n  return even_integers;",
        "grade-179": {
            "execution": 0
        },
        "143": "",
        "grade-143": {
            "execution": 0
        },
        "22": "if (a > b) {\n    std::swap(a, b);\n  }\n  std::vector<long> ans;\n  for (int i = a; i <= b; i++) {\n    if (i % 2 == 0) {\n      ans.push_back(i);\n    }\n  }\n  return ans;",
        "grade-22": {
            "execution": 0
        },
        "156": "std::vector<long> result;\n  if (a % 2 != 0) {\n    a++;\n  }\n  while (a <= b) {\n    result.push_back(a);\n    a += 2;\n  }\n  return result;",
        "grade-156": {
            "execution": 0
        },
        "110": "std::vector<long> result;\n  // your code here\n  if(a % 2 != 0) {\n    a++;\n  }\n  while(a <= b) {\n    result.push_back(a);\n    a += 2;\n  }\n  return result;",
        "grade-110": {
            "execution": 0
        },
        "8": "std::vector<long> v;\n  if (a == b)\n    return v;\n  long i = a;\n  while (i <= b) {\n    v.push_back(i);\n    i = i + 2;\n  }\n  return v;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> evenInts;\n  for (long i = a; i <= b; i++) {\n    if (i % 2 == 0) {\n      evenInts.push_back(i);\n    }\n  }\n  return evenInts;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> c;\n    if(a > b) {\n        a = a + b;\n        b = a - b;\n        a = a - b;\n    }\n    for(long i = a; i <= b; i++) {\n        if(i % 2 == 0) {\n            c.push_back(i);\n        }\n    }\n    return c;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> output;\n    if (a < b) {\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                output.push_back(i);\n            }\n        }\n    } else {\n        for (int i = b; i <= a; i++) {\n            if (i % 2 == 0) {\n                output.push_back(i);\n            }\n        }\n    }\n    return output;",
        "grade-55": {
            "execution": 0
        },
        "60": "std::vector<long> V;\n  if(a>b)\n    std::swap(a,b);\n  for(int i=a;i<=b;i++)\n    if(i%2==0)\n      V.push_back(i);\n  return V;",
        "grade-60": {
            "execution": 0
        },
        "bleu-169": 0.20083266695906904,
        "bleu-28": 0.05920623165699762,
        "bleu-6": 0.15969814645113062,
        "bleu-198": 0.3110299534992668,
        "bleu-72": 0.35125125853894185,
        "bleu-63": 0.33770587102258204,
        "bleu-58": 0.26648292878721,
        "bleu-35": 0.3258672784578788,
        "bleu-197": 0.2791827267516766,
        "bleu-26": 0.34451875060106274,
        "bleu-179": 0.17355295350608518,
        "bleu-143": 0.0,
        "bleu-22": 0.4351873729735511,
        "bleu-156": 0.0771739542582559,
        "bleu-110": 0.07357548143623065,
        "bleu-8": 0.18830779880197607,
        "bleu-7": 0.34649079222259,
        "bleu-23": 0.4315286931851361,
        "bleu-55": 0.3586095456181152,
        "bleu-60": 0.45427824064137634,
        "codebleu-169": 0.5225019069412661,
        "codebleu-28": 0.5752479023646071,
        "codebleu-6": 0.4695270785659801,
        "codebleu-198": 0.6026217652806868,
        "codebleu-72": 0.4615944493758783,
        "codebleu-63": 0.43943000667495136,
        "codebleu-58": 0.6272582765061999,
        "codebleu-35": 0.5752206145980646,
        "codebleu-197": 0.620876022260635,
        "codebleu-26": 0.6274356263547558,
        "codebleu-179": 0.6308275161183797,
        "codebleu-143": 0.0,
        "codebleu-22": 0.5738102439229674,
        "codebleu-156": 0.3562092622747156,
        "codebleu-110": 0.39033154670898623,
        "codebleu-8": 0.40877847774932397,
        "codebleu-7": 0.43943000667495136,
        "codebleu-23": 0.6249056921042666,
        "codebleu-55": 0.650952472796015,
        "codebleu-60": 0.5438012350681533,
        "chrf-169": 0.3644638171157065,
        "chrf-28": 0.2274342577669341,
        "chrf-6": 0.2938733285674788,
        "chrf-198": 0.4039529345099894,
        "chrf-72": 0.412181791534565,
        "chrf-63": 0.3973808514191056,
        "chrf-58": 0.41000067885880315,
        "chrf-35": 0.3691414104432692,
        "chrf-197": 0.3364240632962079,
        "chrf-26": 0.47437086557258895,
        "chrf-179": 0.2934645111896433,
        "chrf-143": 0.0,
        "chrf-22": 0.4634229242146118,
        "chrf-156": 0.27090124856799846,
        "chrf-110": 0.2637224416809454,
        "chrf-8": 0.30033889069373904,
        "chrf-7": 0.40183153834287644,
        "chrf-23": 0.432968658519899,
        "chrf-55": 0.5071538575680766,
        "chrf-60": 0.5072122054836238,
        "rougel-169": 0.5362318840579711,
        "rougel-28": 0.3169811320754717,
        "rougel-6": 0.4661654135338346,
        "rougel-198": 0.5476190476190476,
        "rougel-72": 0.5760000000000001,
        "rougel-63": 0.6,
        "rougel-58": 0.4444444444444445,
        "rougel-35": 0.5531914893617021,
        "rougel-197": 0.47058823529411764,
        "rougel-26": 0.5595238095238094,
        "rougel-179": 0.3917525773195876,
        "rougel-143": 0,
        "rougel-22": 0.6666666666666666,
        "rougel-156": 0.3666666666666667,
        "rougel-110": 0.35200000000000004,
        "rougel-8": 0.4132231404958678,
        "rougel-7": 0.5853658536585366,
        "rougel-23": 0.6438356164383562,
        "rougel-55": 0.5628742514970059,
        "rougel-60": 0.6212121212121212,
        "meteor-169": 0.5459107099629974,
        "meteor-28": 0.3716364997577839,
        "meteor-6": 0.4613824843524623,
        "meteor-198": 0.6526284348864994,
        "meteor-72": 0.5349500713266762,
        "meteor-63": 0.5387931034482759,
        "meteor-58": 0.5565763052208834,
        "meteor-35": 0.526514048614496,
        "meteor-197": 0.5573223860589811,
        "meteor-26": 0.7040173237753884,
        "meteor-179": 0.5358803057764997,
        "meteor-143": 0.0,
        "meteor-22": 0.6387899159663866,
        "meteor-156": 0.2993738470271037,
        "meteor-110": 0.29723851288283054,
        "meteor-8": 0.3321963539824415,
        "meteor-7": 0.5680950380323896,
        "meteor-23": 0.6725931369777829,
        "meteor-55": 0.6483026768356513,
        "meteor-60": 0.5984585338634303,
        "ruby-169": 0.375,
        "ruby-28": 0.20725388601036265,
        "ruby-6": 0.25,
        "ruby-198": 0.41666666666666663,
        "ruby-72": 0.4444444444444444,
        "ruby-63": 0.4444444444444444,
        "ruby-58": 0.2525252525252525,
        "ruby-35": 0.3055555555555556,
        "ruby-197": 0.34693877551020413,
        "ruby-26": 0.42708333333333337,
        "ruby-179": 0.2786885245901639,
        "ruby-143": 0.0,
        "ruby-22": 0.5277777777777778,
        "ruby-156": 0.18055555555555558,
        "ruby-110": 0.1527777777777778,
        "ruby-8": 0.23611111111111116,
        "ruby-7": 0.41666666666666663,
        "ruby-23": 0.4864864864864865,
        "ruby-55": 0.43157894736842106,
        "ruby-60": 0.5138888888888888,
        "codebertscore_f1-169": 0.8591342568397522,
        "codebertscore_f3-169": 0.8562152981758118,
        "codebertscore_f1-28": 0.7663500905036926,
        "codebertscore_f3-28": 0.7729736566543579,
        "codebertscore_f1-6": 0.8382408022880554,
        "codebertscore_f3-6": 0.8295722603797913,
        "codebertscore_f1-198": 0.8620646595954895,
        "codebertscore_f3-198": 0.8569992184638977,
        "codebertscore_f1-72": 0.8566422462463379,
        "codebertscore_f3-72": 0.8606025576591492,
        "codebertscore_f1-63": 0.8439322710037231,
        "codebertscore_f3-63": 0.8456456065177917,
        "codebertscore_f1-58": 0.8079653978347778,
        "codebertscore_f3-58": 0.8316165804862976,
        "codebertscore_f1-35": 0.8394111394882202,
        "codebertscore_f3-35": 0.8440043330192566,
        "codebertscore_f1-197": 0.7960565686225891,
        "codebertscore_f3-197": 0.8239059448242188,
        "codebertscore_f1-26": 0.8644112944602966,
        "codebertscore_f3-26": 0.8578777313232422,
        "codebertscore_f1-179": 0.7715818285942078,
        "codebertscore_f3-179": 0.819275975227356,
        "codebertscore_f1-143": 0.0,
        "codebertscore_f3-143": 0.0,
        "codebertscore_f1-22": 0.8848377466201782,
        "codebertscore_f3-22": 0.8866193294525146,
        "codebertscore_f1-156": 0.8298531770706177,
        "codebertscore_f3-156": 0.8111254572868347,
        "codebertscore_f1-110": 0.8023184537887573,
        "codebertscore_f3-110": 0.8036409616470337,
        "codebertscore_f1-8": 0.8320324420928955,
        "codebertscore_f3-8": 0.8198642134666443,
        "codebertscore_f1-7": 0.8479616641998291,
        "codebertscore_f3-7": 0.8474729061126709,
        "codebertscore_f1-23": 0.8708561658859253,
        "codebertscore_f3-23": 0.8711231350898743,
        "codebertscore_f1-55": 0.8672153353691101,
        "codebertscore_f3-55": 0.8598159551620483,
        "codebertscore_f1-60": 0.8800888657569885,
        "codebertscore_f3-60": 0.8803557753562927,
        "codebertscore_s_f1-169": 0.8574814200401306,
        "codebertscore_s_f3-169": 0.8567678928375244,
        "codebertscore_s_f1-28": 0.7824971079826355,
        "codebertscore_s_f3-28": 0.7877237796783447,
        "codebertscore_s_f1-6": 0.8377311825752258,
        "codebertscore_s_f3-6": 0.8301560282707214,
        "codebertscore_s_f1-198": 0.8599818348884583,
        "codebertscore_s_f3-198": 0.8556782007217407,
        "codebertscore_s_f1-72": 0.863298773765564,
        "codebertscore_s_f3-72": 0.8694049119949341,
        "codebertscore_s_f1-63": 0.8434919118881226,
        "codebertscore_s_f3-63": 0.8492618799209595,
        "codebertscore_s_f1-58": 0.820131778717041,
        "codebertscore_s_f3-58": 0.8455232381820679,
        "codebertscore_s_f1-35": 0.8415219187736511,
        "codebertscore_s_f3-35": 0.8459353446960449,
        "codebertscore_s_f1-197": 0.7987847328186035,
        "codebertscore_s_f3-197": 0.8291561007499695,
        "codebertscore_s_f1-26": 0.8715986013412476,
        "codebertscore_s_f3-26": 0.8653604388237,
        "codebertscore_s_f1-179": 0.7775323390960693,
        "codebertscore_s_f3-179": 0.8295727372169495,
        "codebertscore_s_f1-143": 0,
        "codebertscore_s_f3-143": 0,
        "codebertscore_s_f1-22": 0.8910719752311707,
        "codebertscore_s_f3-22": 0.8947955369949341,
        "codebertscore_s_f1-156": 0.8286195397377014,
        "codebertscore_s_f3-156": 0.8109084963798523,
        "codebertscore_s_f1-110": 0.8005177974700928,
        "codebertscore_s_f3-110": 0.8014765381813049,
        "codebertscore_s_f1-8": 0.8345897793769836,
        "codebertscore_s_f3-8": 0.824129045009613,
        "codebertscore_s_f1-7": 0.8478180170059204,
        "codebertscore_s_f3-7": 0.8521011471748352,
        "codebertscore_s_f1-23": 0.8701314926147461,
        "codebertscore_s_f3-23": 0.8705335855484009,
        "codebertscore_s_f1-55": 0.8776068687438965,
        "codebertscore_s_f3-55": 0.8703410625457764,
        "codebertscore_s_f1-60": 0.8826265931129456,
        "codebertscore_s_f3-60": 0.886035144329071,
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-198": 3,
        "raw_gpt35_nsnr-198": "3",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-143": 3,
        "raw_gpt35_nsnr-143": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-156": 3,
        "raw_gpt35_nsnr-156": "3",
        "gpt35_nsnr-110": 3,
        "raw_gpt35_nsnr-110": "3",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-143": 0,
        "raw_gpt35_nswr-143": "Score: 2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-156": 2,
        "raw_gpt35_nswr-156": "2",
        "gpt35_nswr-110": 2,
        "raw_gpt35_nswr-110": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n",
        "snippet": [
            "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n"
        ],
        "simplified": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
        "task_id": "5",
        "169": "if (numbers.size() == 0) {\n    return {};\n  }\n  std::vector<long> result(numbers.size() * 2 - 1);\n  std::copy(numbers.begin(), numbers.end(), result.begin());\n  auto next = numbers.end();\n  auto current = numbers.end() - 1;\n  while (current != numbers.begin()) {\n    result[2 * (current - numbers.begin()) - 1] = delimeter;\n    current--;\n  }\n  return result;",
        "grade-169": {
            "execution": 0
        },
        "28": "",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> res;\n    std::vector<long>::iterator pos;\n    for (pos = numbers.begin(); pos != numbers.end(); pos++) {\n        res.push_back(*pos);\n        if (pos != numbers.end() - 1) {\n            res.push_back(delimeter);\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 1
        },
        "196": "// your code goes here\n\tstd::vector<long> result;\n\tfor (auto i = numbers.begin(); i != numbers.end(); i++) {\n\t\tresult.push_back(*i);\n\t\tif (i != numbers.end() - 1) {\n\t\t\tresult.push_back(delimeter);\n\t\t}\n\t}\n\treturn result;",
        "grade-196": {
            "execution": 1
        },
        "72": "std::vector<long>::iterator itr = numbers.begin();\n\twhile(itr != numbers.end()) {\n\t\titr = numbers.insert(itr, delimeter);\n\t\titr += 2;\n\t}\n\treturn numbers;",
        "grade-72": {
            "execution": 0
        },
        "63": "std::vector<long> interspersed_list;\n    for (auto i = 0; i < numbers.size(); i++) {\n        interspersed_list.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            interspersed_list.push_back(delimeter);\n        }\n    }\n    return interspersed_list;",
        "grade-63": {
            "execution": 1
        },
        "58": "std::vector<long> numbers_with_delimeter;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tnumbers_with_delimeter.push_back(numbers[i]);\n\t\tif (i < numbers.size() - 1) {\n\t\t\tnumbers_with_delimeter.push_back(delimeter);\n\t\t}\n\t}\n\treturn numbers_with_delimeter;",
        "grade-58": {
            "execution": 1
        },
        "35": "std::vector<long> output;\n    int i=0;\n    while(i<numbers.size()){\n        output.push_back(numbers[i]);\n        if(i!=numbers.size()-1){\n            output.push_back(delimeter);\n        }\n        i++;\n    }\n    return output;",
        "grade-35": {
            "execution": 1
        },
        "194": "int i;\n    std::vector<long> newVector;\n    for(i=0;i<numbers.size();i++){\n        newVector.push_back(numbers[i]);\n        if(i<numbers.size()-1){\n            newVector.push_back(delimeter);\n        }\n    }\n    return newVector;",
        "grade-194": {
            "execution": 1
        },
        "26": "if (numbers.size() == 0) {\n        return numbers;\n    }\n    std::vector<long> result = {numbers[0]};\n    for (size_t i = 1; i < numbers.size(); i++) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n    }\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "179": "std::vector<long> interspersed;\n    for (long i = 0; i < numbers.size(); i++) {\n        interspersed.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            interspersed.push_back(delimeter);\n        }\n    }\n    return interspersed;",
        "grade-179": {
            "execution": 1
        },
        "144": "std::vector<long> interspersed;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        interspersed.push_back(*it);\n        if (it != numbers.end() - 1)\n            interspersed.push_back(delimeter);\n    }\n    return interspersed;",
        "grade-144": {
            "execution": 1
        },
        "22": "std::vector<long> result;\n    std::vector<long>::iterator it;\n    it = numbers.begin();\n    result.push_back(*it);\n    while (it != numbers.end()) {\n        it++;\n        if (it != numbers.end()) {\n            result.push_back(delimeter);\n            result.push_back(*it);\n        }\n    }\n    return result;",
        "grade-22": {
            "execution": 0
        },
        "156": "std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    } else {\n        result.push_back(numbers[0]);\n        for (int i = 1; i < numbers.size(); i++) {\n            result.push_back(delimeter);\n            result.push_back(numbers[i]);\n        }\n        return result;\n    }",
        "grade-156": {
            "execution": 1
        },
        "111": "if (numbers.size() <= 1) return numbers;\n    std::vector<long> ret;\n    for (std::vector<long>::size_type i = 0; i < numbers.size() - 1; i++) {\n        ret.push_back(numbers[i]);\n        ret.push_back(delimeter);\n    }\n    ret.push_back(numbers.back());\n    return ret;",
        "grade-111": {
            "execution": 1
        },
        "8": "std::vector<long> result;\n    for (auto x : numbers) {\n        result.push_back(x);\n        result.push_back(delimeter);\n    }\n    result.pop_back();\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i + 1 < numbers.size()) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> ret;\n  if (numbers.size() == 0) {\n    return ret;\n  }\n  for (long i = 0; i < numbers.size() - 1; i++) {\n    ret.push_back(numbers[i]);\n    ret.push_back(delimeter);\n  }\n  ret.push_back(numbers[numbers.size() - 1]);\n  return ret;",
        "grade-23": {
            "execution": 1
        },
        "56": "std::vector<long> x;\n    for(long p = 0; p < numbers.size(); p++){\n        x.push_back(numbers[p]);x.push_back(delimeter);\n    }\n    x.pop_back();\n    return x;",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> output_vector;\n\tint i;\n\tfor(i=0;i<numbers.size();i++)\n\t{\n\t\toutput_vector.push_back(numbers[i]);\n\t\tif(i!=numbers.size()-1)\n\t\t\toutput_vector.push_back(delimeter);\n\t}\n\treturn output_vector;",
        "grade-60": {
            "execution": 1
        },
        "bleu-169": 0.14086036039033056,
        "bleu-28": 0.0,
        "bleu-6": 0.19462942370097647,
        "bleu-196": 0.2745049361458408,
        "bleu-72": 0.06337828866191421,
        "bleu-63": 0.4835316677553883,
        "bleu-58": 0.5176604565637137,
        "bleu-35": 0.40758595294289385,
        "bleu-194": 0.49004148015664123,
        "bleu-26": 0.5818894321747073,
        "bleu-179": 0.480662713428436,
        "bleu-144": 0.2038987554422757,
        "bleu-22": 0.15737497359709585,
        "bleu-156": 0.6529188974104935,
        "bleu-111": 0.4249097786267459,
        "bleu-8": 0.12098098138469725,
        "bleu-7": 0.480662713428436,
        "bleu-23": 0.4673780193448715,
        "bleu-56": 0.2896793691038969,
        "bleu-60": 0.49630914551669286,
        "codebleu-169": 0.593305840772538,
        "codebleu-28": 0.0,
        "codebleu-6": 0.6169407486982471,
        "codebleu-196": 0.6061110332745712,
        "codebleu-72": 0.34885191242645125,
        "codebleu-63": 0.6662549988593238,
        "codebleu-58": 0.673401446451521,
        "codebleu-35": 0.6384354955843878,
        "codebleu-194": 0.68689971094837,
        "codebleu-26": 0.7730548146290513,
        "codebleu-179": 0.6662549988593238,
        "codebleu-144": 0.5642488999686546,
        "codebleu-22": 0.5898450500813887,
        "codebleu-156": 0.8050103159294898,
        "codebleu-111": 0.6954859134355681,
        "codebleu-8": 0.3537753214313063,
        "codebleu-7": 0.6662549988593238,
        "codebleu-23": 0.725884631786886,
        "codebleu-56": 0.5448460730816621,
        "codebleu-60": 0.6576214501173582,
        "chrf-169": 0.37024309091139895,
        "chrf-28": 0.0,
        "chrf-6": 0.4191535450059119,
        "chrf-196": 0.4641328851178862,
        "chrf-72": 0.31330265251559625,
        "chrf-63": 0.5710477180714358,
        "chrf-58": 0.5846655253590793,
        "chrf-35": 0.6139774743394403,
        "chrf-194": 0.5804517137324687,
        "chrf-26": 0.6667254056777219,
        "chrf-179": 0.5673555647004965,
        "chrf-144": 0.4334788290780873,
        "chrf-22": 0.464686750822889,
        "chrf-156": 0.7685542964314994,
        "chrf-111": 0.6470536538347903,
        "chrf-8": 0.38581811228912355,
        "chrf-7": 0.588044171802264,
        "chrf-23": 0.6720249144201701,
        "chrf-56": 0.46446508684114585,
        "chrf-60": 0.6304640570090635,
        "rougel-169": 0.35602094240837695,
        "rougel-28": 0,
        "rougel-6": 0.44,
        "rougel-196": 0.48275862068965514,
        "rougel-72": 0.42975206611570255,
        "rougel-63": 0.5588235294117647,
        "rougel-58": 0.562962962962963,
        "rougel-35": 0.6029411764705882,
        "rougel-194": 0.5390070921985815,
        "rougel-26": 0.7083333333333335,
        "rougel-179": 0.562962962962963,
        "rougel-144": 0.4817518248175182,
        "rougel-22": 0.47435897435897434,
        "rougel-156": 0.8133333333333335,
        "rougel-111": 0.535031847133758,
        "rougel-8": 0.42857142857142855,
        "rougel-7": 0.5777777777777777,
        "rougel-23": 0.6193548387096774,
        "rougel-56": 0.5039370078740156,
        "rougel-60": 0.5441176470588235,
        "meteor-169": 0.39183773951338274,
        "meteor-28": 0.0,
        "meteor-6": 0.4675686430561082,
        "meteor-196": 0.4782412342215988,
        "meteor-72": 0.2314785252886794,
        "meteor-63": 0.5067366662351533,
        "meteor-58": 0.4910324313183544,
        "meteor-35": 0.4732202093918897,
        "meteor-194": 0.49417541660136866,
        "meteor-26": 0.8041063203457615,
        "meteor-179": 0.4836625788042791,
        "meteor-144": 0.42309946661977604,
        "meteor-22": 0.5231353591160219,
        "meteor-156": 0.8884270543175489,
        "meteor-111": 0.5871519947517324,
        "meteor-8": 0.2896594851932543,
        "meteor-7": 0.4665997163466798,
        "meteor-23": 0.6326541480102993,
        "meteor-56": 0.4361270055936214,
        "meteor-60": 0.4903349420693227,
        "ruby-169": 0.2666666666666667,
        "ruby-28": 0.0,
        "ruby-6": 0.25316455696202533,
        "ruby-196": 0.21621621621621623,
        "ruby-72": 0.2535211267605634,
        "ruby-63": 0.3661971830985915,
        "ruby-58": 0.3802816901408451,
        "ruby-35": 0.43661971830985913,
        "ruby-194": 0.295774647887324,
        "ruby-26": 0.589041095890411,
        "ruby-179": 0.3802816901408451,
        "ruby-144": 0.2535211267605634,
        "ruby-22": 0.3058823529411765,
        "ruby-156": 0.7341772151898734,
        "ruby-111": 0.34883720930232553,
        "ruby-8": 0.2676056338028169,
        "ruby-7": 0.3943661971830986,
        "ruby-23": 0.44047619047619047,
        "ruby-56": 0.3098591549295775,
        "ruby-60": 0.3380281690140845,
        "codebertscore_f1-169": 0.7797734141349792,
        "codebertscore_f3-169": 0.7977867126464844,
        "codebertscore_f1-28": 0.0,
        "codebertscore_f3-28": 0.0,
        "codebertscore_f1-6": 0.8300708532333374,
        "codebertscore_f3-6": 0.8395581245422363,
        "codebertscore_f1-196": 0.8336725831031799,
        "codebertscore_f3-196": 0.8534255027770996,
        "codebertscore_f1-72": 0.7458837628364563,
        "codebertscore_f3-72": 0.7411630749702454,
        "codebertscore_f1-63": 0.8607749342918396,
        "codebertscore_f3-63": 0.8898994326591492,
        "codebertscore_f1-58": 0.879000723361969,
        "codebertscore_f3-58": 0.8928236961364746,
        "codebertscore_f1-35": 0.9057362675666809,
        "codebertscore_f3-35": 0.9113960266113281,
        "codebertscore_f1-194": 0.8893832564353943,
        "codebertscore_f3-194": 0.9002728462219238,
        "codebertscore_f1-26": 0.9187012910842896,
        "codebertscore_f3-26": 0.9237921237945557,
        "codebertscore_f1-179": 0.8736490607261658,
        "codebertscore_f3-179": 0.8945213556289673,
        "codebertscore_f1-144": 0.8082682490348816,
        "codebertscore_f3-144": 0.8216080069541931,
        "codebertscore_f1-22": 0.8149951100349426,
        "codebertscore_f3-22": 0.8196946382522583,
        "codebertscore_f1-156": 0.922839879989624,
        "codebertscore_f3-156": 0.930778443813324,
        "codebertscore_f1-111": 0.8872969746589661,
        "codebertscore_f3-111": 0.902272641658783,
        "codebertscore_f1-8": 0.8259409666061401,
        "codebertscore_f3-8": 0.8050656318664551,
        "codebertscore_f1-7": 0.9066644906997681,
        "codebertscore_f3-7": 0.9131141304969788,
        "codebertscore_f1-23": 0.9076589941978455,
        "codebertscore_f3-23": 0.9178043603897095,
        "codebertscore_f1-56": 0.8697395324707031,
        "codebertscore_f3-56": 0.8759845495223999,
        "codebertscore_f1-60": 0.9069063067436218,
        "codebertscore_f3-60": 0.9163219928741455,
        "codebertscore_s_f1-169": 0.7831199169158936,
        "codebertscore_s_f3-169": 0.803295910358429,
        "codebertscore_s_f1-28": 0,
        "codebertscore_s_f3-28": 0,
        "codebertscore_s_f1-6": 0.8285924792289734,
        "codebertscore_s_f3-6": 0.837858259677887,
        "codebertscore_s_f1-196": 0.8321232199668884,
        "codebertscore_s_f3-196": 0.8524528741836548,
        "codebertscore_s_f1-72": 0.7379426956176758,
        "codebertscore_s_f3-72": 0.7338353991508484,
        "codebertscore_s_f1-63": 0.8582961559295654,
        "codebertscore_s_f3-63": 0.8896966576576233,
        "codebertscore_s_f1-58": 0.8832955956459045,
        "codebertscore_s_f3-58": 0.8965969681739807,
        "codebertscore_s_f1-35": 0.9069901704788208,
        "codebertscore_s_f3-35": 0.9142627716064453,
        "codebertscore_s_f1-194": 0.8939774632453918,
        "codebertscore_s_f3-194": 0.9057849049568176,
        "codebertscore_s_f1-26": 0.9245449304580688,
        "codebertscore_s_f3-26": 0.9296755790710449,
        "codebertscore_s_f1-179": 0.8715406656265259,
        "codebertscore_s_f3-179": 0.8939217329025269,
        "codebertscore_s_f1-144": 0.804691731929779,
        "codebertscore_s_f3-144": 0.8190916180610657,
        "codebertscore_s_f1-22": 0.8182896971702576,
        "codebertscore_s_f3-22": 0.8227342963218689,
        "codebertscore_s_f1-156": 0.9274948835372925,
        "codebertscore_s_f3-156": 0.9364011883735657,
        "codebertscore_s_f1-111": 0.8927452564239502,
        "codebertscore_s_f3-111": 0.9079235792160034,
        "codebertscore_s_f1-8": 0.8256893157958984,
        "codebertscore_s_f3-8": 0.8059256672859192,
        "codebertscore_s_f1-7": 0.9074084758758545,
        "codebertscore_s_f3-7": 0.9145523905754089,
        "codebertscore_s_f1-23": 0.9070432186126709,
        "codebertscore_s_f3-23": 0.9185671806335449,
        "codebertscore_s_f1-56": 0.8689954876899719,
        "codebertscore_s_f3-56": 0.8758088946342468,
        "codebertscore_s_f1-60": 0.9087361097335815,
        "codebertscore_s_f3-60": 0.9194267988204956,
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-156": 3,
        "raw_gpt35_nsnr-156": "3",
        "gpt35_nsnr-111": 3,
        "raw_gpt35_nsnr-111": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-144": 3,
        "raw_gpt35_nswr-144": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-111": 3,
        "raw_gpt35_nswr-111": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n",
        "snippet": [
            "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n"
        ],
        "simplified": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "task_id": "9",
        "165": "int max_so_far = 0;\n    std::vector<long> max_vec;\n    for (auto num : numbers) {\n        if (num > max_so_far) {\n            max_so_far = num;\n        }\n        max_vec.push_back(max_so_far);\n    }\n    return max_vec;",
        "grade-165": {
            "execution": 1
        },
        "28": "std::vector<long> result;\n    std::vector<long> max;\n    if (numbers.size() > 0) {\n        max.push_back(numbers[0]);\n        result.push_back(numbers[0]);\n    }\n    for (int i = 1; i < numbers.size(); i++) {\n        max.push_back(numbers[i]);\n        if (numbers[i] < max[i - 1])\n            max[i] = max[i - 1];\n        result.push_back(max[i]);\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result;\n    std::deque<long> dq;\n    // Traverse the list of numbers and add the element to the queue\n    for (auto num : numbers) {\n        // if the queue is empty or the last element of the queue is\n        // less than the current number, push the current number in\n        // the queue.\n        if (dq.empty() || dq.back() < num) {\n            dq.push_back(num);\n        } else {\n            // else if the last element of the queue is greater than\n            // the current number, pop elements from the back until the\n            // current number is the last element of the queue.\n            while (!dq.empty() && dq.back() > num) {\n                dq.pop_back();\n            }\n            // Add the current number to the queue.\n            dq.push_back(num);\n        }\n        // store the first element of the queue.\n        result.push_back(dq.front());\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "192": "std::vector<long> result(numbers.size());\n  result[0] = numbers[0];\n  for (long i = 1; i < numbers.size(); i++) {\n    result[i] = std::max(result[i - 1], numbers[i]);\n  }\n  return result;",
        "grade-192": {
            "execution": 0
        },
        "72": "std::vector<long> ret;\n    std::multiset<long> s;\n    for (auto &n : numbers) {\n        s.insert(n);\n        ret.push_back(*s.rbegin());\n    }\n    return ret;",
        "grade-72": {
            "execution": 1
        },
        "64": "// Maximum value seen thus far.\n  long max_value = numbers[0];\n  std::vector<long> result;\n  result.push_back(max_value);\n  for (auto number : numbers) {\n    max_value = std::max(max_value, number);\n    result.push_back(max_value);\n  }\n  return result;",
        "grade-64": {
            "execution": 0
        },
        "59": "std::vector<long> r;\n  long max = 0;\n  for (long i = 0; i < numbers.size(); i++) {\n    if (max < numbers[i]) {\n      max = numbers[i];\n    }\n    r.push_back(max);\n  }\n  return r;",
        "grade-59": {
            "execution": 1
        },
        "36": "std::vector<long> result;\n  result.push_back(numbers[0]);\n  for (int i = 1; i < numbers.size(); i++) {\n    result.push_back(std::max(result[i - 1], numbers[i]));\n  }\n  return result;",
        "grade-36": {
            "execution": 0
        },
        "191": "std::vector<long> maximums;\n    std::set<long> curr_maximums{numbers[0]};\n    maximums.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] >= *curr_maximums.rbegin()) {\n            curr_maximums.insert(numbers[i]);\n        }\n        maximums.push_back(*curr_maximums.rbegin());\n    }\n    return maximums;",
        "grade-191": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        auto max_it = std::max_element(it, numbers.end());\n        result.push_back(*max_it);\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "176": "std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        int max = numbers[i];\n        for (int j = 0; j <= i; j++) {\n            if (numbers[j] > max) {\n                max = numbers[j];\n            }\n        }\n        result.push_back(max);\n    }\n    return result;",
        "grade-176": {
            "execution": 1
        },
        "141": "std::vector<long> result(numbers.size());\n\tlong max_number = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tmax_number = std::max(max_number, numbers[i]);\n\t\tresult[i] = max_number;\n\t}\n\treturn result;",
        "grade-141": {
            "execution": 0
        },
        "22": "std::vector<long> result;\n    long max = numbers[0];\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;",
        "grade-22": {
            "execution": 0
        },
        "153": "std::vector<long> maxes;\n\tlong max = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tmax = numbers[i] > max ? numbers[i] : max;\n\t\tmaxes.push_back(max);\n\t}\n\treturn maxes;",
        "grade-153": {
            "execution": 0
        },
        "110": "std::vector<long> result;\n  std::vector<long>::iterator it;\n  for (it = numbers.begin(); it != numbers.end(); it++) {\n    result.push_back(*std::max_element(numbers.begin(), it + 1));\n  }\n  return result;",
        "grade-110": {
            "execution": 1
        },
        "8": "std::vector<long> output(numbers.size());\n    std::deque<long> aux;\n    for (int i = 0; i < numbers.size(); i++) {\n        // firstly, remove old elements from the queue\n        while (!aux.empty() && aux.front() <= i - numbers.size()) {\n            aux.pop_front();\n        }\n        // now, we keep only elements which are bigger or equal than numbers[i]\n        while (!aux.empty() && numbers[aux.back()] <= numbers[i]) {\n            aux.pop_back();\n        }\n        // insert the current element\n        aux.push_back(i);\n        // get the maximum element at this moment\n        output[i] = numbers[aux.front()];\n    }\n    return output;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(!numbers.empty());\n    std::vector<long> result;\n    result.push_back(numbers[0]);\n    std::partial_sum(numbers.begin(), numbers.end(), std::back_inserter(result), [](long a, long b) {\n        return std::max(a, b);\n    });\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> result;\n    std::deque<long> deque;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        if (deque.empty()) {\n            deque.push_back(*it);\n            result.push_back(*it);\n        } else {\n            if (*it < deque.back()) {\n                deque.push_back(*it);\n                result.push_back(deque.front());\n            } else {\n                while (!deque.empty() && *it > deque.back()) {\n                    deque.pop_back();\n                }\n                deque.push_back(*it);\n                result.push_back(deque.front());\n            }\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<long> result;\n    long max_element = numbers[0];\n    result.push_back(max_element);\n    for (int i = 1; i < numbers.size(); i++) {\n        max_element = std::max(max_element, numbers[i]);\n        result.push_back(max_element);\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "61": "// Need to return a list of the same size as input:\n    std::vector<long> output_list(numbers.size());\n    // And a stack with at least one element, because we will be using peek() method of it:\n    std::stack<long> s;\n    s.push(numbers[0]);\n    // Iterate over the given list starting from the second element:\n    for (int i = 1; i < numbers.size(); i++) {\n        // While stack has elements, and the last one is <= than the one we are considering right now,\n        // pop them out of the stack:\n        while (!s.empty() && s.top() <= numbers[i]) {\n            s.pop();\n        }\n        // After the loop above, stack is empty or the last element from it is > than the one we are\n        // considering right now. No matter which, we need to add the last element from the stack to the\n        // output list:\n        output_list[i] = s.top();\n        // Now add the current number to the stack:\n        s.push(numbers[i]);\n    }\n    return output_list;",
        "grade-61": {
            "execution": 0
        },
        "bleu-165": 0.14500866449976205,
        "bleu-28": 0.26038680687376276,
        "bleu-6": 0.030077174974701998,
        "bleu-192": 0.33329126363851985,
        "bleu-72": 0.1001860385313263,
        "bleu-64": 0.10982785524946748,
        "bleu-59": 0.6192452696458082,
        "bleu-36": 0.40484119186599643,
        "bleu-191": 0.3394797638395702,
        "bleu-26": 0.11188160128306648,
        "bleu-176": 0.5099831134437447,
        "bleu-141": 0.42341032924449196,
        "bleu-22": 0.6241726677246698,
        "bleu-153": 0.5952165131421784,
        "bleu-110": 0.13343258247486772,
        "bleu-8": 0.17725233189978978,
        "bleu-7": 0.06030235952786746,
        "bleu-23": 0.049710471978125434,
        "bleu-57": 0.38545415005101136,
        "bleu-61": 0.11048593881002261,
        "codebleu-165": 0.46447782258847903,
        "codebleu-28": 0.6944693787544477,
        "codebleu-6": 0.5300577410825104,
        "codebleu-192": 0.6604799310625374,
        "codebleu-72": 0.4629539690248771,
        "codebleu-64": 0.5153526523123415,
        "codebleu-59": 0.778142274515233,
        "codebleu-36": 0.6593356952526132,
        "codebleu-191": 0.6886310427450955,
        "codebleu-26": 0.5053423992229237,
        "codebleu-176": 0.7774273487718443,
        "codebleu-141": 0.6936474578741967,
        "codebleu-22": 0.7991829702858063,
        "codebleu-153": 0.7369084718800383,
        "codebleu-110": 0.552257402039955,
        "codebleu-8": 0.6676955480956855,
        "codebleu-7": 0.5136258161998811,
        "codebleu-23": 0.5447628298526793,
        "codebleu-57": 0.7064027796553434,
        "codebleu-61": 0.6507324817388593,
        "chrf-165": 0.3873489880103213,
        "chrf-28": 0.5287581888786546,
        "chrf-6": 0.22450290721669253,
        "chrf-192": 0.4509685545079752,
        "chrf-72": 0.31168163439091845,
        "chrf-64": 0.36925464433980665,
        "chrf-59": 0.6883091239498695,
        "chrf-36": 0.5349795311404224,
        "chrf-191": 0.5264509363736051,
        "chrf-26": 0.39775733825290793,
        "chrf-176": 0.7269743879469257,
        "chrf-141": 0.5145363058285907,
        "chrf-22": 0.7105144262644891,
        "chrf-153": 0.675385267344843,
        "chrf-110": 0.3944949205023051,
        "chrf-8": 0.42991429946155985,
        "chrf-7": 0.3272079018098182,
        "chrf-23": 0.27632358618667596,
        "chrf-57": 0.5368150074361233,
        "chrf-61": 0.303349365472552,
        "rougel-165": 0.4423076923076923,
        "rougel-28": 0.5474860335195532,
        "rougel-6": 0.19475655430711614,
        "rougel-192": 0.5757575757575757,
        "rougel-72": 0.3853211009174312,
        "rougel-64": 0.3442622950819672,
        "rougel-59": 0.819672131147541,
        "rougel-36": 0.608,
        "rougel-191": 0.5897435897435898,
        "rougel-26": 0.4754098360655738,
        "rougel-176": 0.6573426573426574,
        "rougel-141": 0.6201550387596898,
        "rougel-22": 0.832,
        "rougel-153": 0.7804878048780488,
        "rougel-110": 0.41538461538461535,
        "rougel-8": 0.3781512605042017,
        "rougel-7": 0.32857142857142857,
        "rougel-23": 0.28703703703703703,
        "rougel-57": 0.6356589147286822,
        "rougel-61": 0.2692307692307692,
        "meteor-165": 0.36821499433106575,
        "meteor-28": 0.5812182588443225,
        "meteor-6": 0.2546198410013532,
        "meteor-192": 0.5207178480909166,
        "meteor-72": 0.29261169784802776,
        "meteor-64": 0.38587590010914163,
        "meteor-59": 0.854068918972765,
        "meteor-36": 0.6609839832772678,
        "meteor-191": 0.6715951686797168,
        "meteor-26": 0.3769218881523569,
        "meteor-176": 0.7994156504065041,
        "meteor-141": 0.6340044395601416,
        "meteor-22": 0.8777094204856012,
        "meteor-153": 0.7994386554621847,
        "meteor-110": 0.306583303636092,
        "meteor-8": 0.3975297095070423,
        "meteor-7": 0.30745761846405223,
        "meteor-23": 0.33198267679164695,
        "meteor-57": 0.6803433842343642,
        "meteor-61": 0.4350907029478459,
        "ruby-165": 0.3220338983050848,
        "ruby-28": 0.4,
        "ruby-6": 0.12019230769230771,
        "ruby-192": 0.452054794520548,
        "ruby-72": 0.22033898305084743,
        "ruby-64": 0.23809523809523814,
        "ruby-59": 0.746031746031746,
        "ruby-36": 0.4696969696969697,
        "ruby-191": 0.4639175257731959,
        "ruby-26": 0.31746031746031744,
        "ruby-176": 0.48809523809523814,
        "ruby-141": 0.48571428571428577,
        "ruby-22": 0.7727272727272727,
        "ruby-153": 0.703125,
        "ruby-110": 0.295774647887324,
        "ruby-8": 0.24581005586592175,
        "ruby-7": 0.19753086419753085,
        "ruby-23": 0.1847133757961783,
        "ruby-57": 0.5285714285714286,
        "ruby-61": 0.1620553359683794,
        "codebertscore_f1-165": 0.8100132942199707,
        "codebertscore_f3-165": 0.8188589215278625,
        "codebertscore_f1-28": 0.8586813807487488,
        "codebertscore_f3-28": 0.8781712055206299,
        "codebertscore_f1-6": 0.6347973942756653,
        "codebertscore_f3-6": 0.6848384141921997,
        "codebertscore_f1-192": 0.858793318271637,
        "codebertscore_f3-192": 0.8640604019165039,
        "codebertscore_f1-72": 0.7645200490951538,
        "codebertscore_f3-72": 0.7713878750801086,
        "codebertscore_f1-64": 0.7970395088195801,
        "codebertscore_f3-64": 0.8035499453544617,
        "codebertscore_f1-59": 0.9267281889915466,
        "codebertscore_f3-59": 0.9228105545043945,
        "codebertscore_f1-36": 0.8799342513084412,
        "codebertscore_f3-36": 0.8921555876731873,
        "codebertscore_f1-191": 0.8165547251701355,
        "codebertscore_f3-191": 0.8568432331085205,
        "codebertscore_f1-26": 0.8045961260795593,
        "codebertscore_f3-26": 0.8112320899963379,
        "codebertscore_f1-176": 0.9080461263656616,
        "codebertscore_f3-176": 0.9151977300643921,
        "codebertscore_f1-141": 0.890173614025116,
        "codebertscore_f3-141": 0.8938280344009399,
        "codebertscore_f1-22": 0.9279881119728088,
        "codebertscore_f3-22": 0.9328401684761047,
        "codebertscore_f1-153": 0.904023289680481,
        "codebertscore_f3-153": 0.900386393070221,
        "codebertscore_f1-110": 0.8111074566841125,
        "codebertscore_f3-110": 0.8257133960723877,
        "codebertscore_f1-8": 0.7469889521598816,
        "codebertscore_f3-8": 0.8147764801979065,
        "codebertscore_f1-7": 0.7816492915153503,
        "codebertscore_f3-7": 0.7967547178268433,
        "codebertscore_f1-23": 0.6933906078338623,
        "codebertscore_f3-23": 0.7243853211402893,
        "codebertscore_f1-57": 0.8724853992462158,
        "codebertscore_f3-57": 0.8820810317993164,
        "codebertscore_f1-61": 0.6693173050880432,
        "codebertscore_f3-61": 0.7657890915870667,
        "codebertscore_s_f1-165": 0.8150718808174133,
        "codebertscore_s_f3-165": 0.8296678066253662,
        "codebertscore_s_f1-28": 0.862546980381012,
        "codebertscore_s_f3-28": 0.8837997317314148,
        "codebertscore_s_f1-6": 0.6526510715484619,
        "codebertscore_s_f3-6": 0.7048009037971497,
        "codebertscore_s_f1-192": 0.8505110144615173,
        "codebertscore_s_f3-192": 0.8552067875862122,
        "codebertscore_s_f1-72": 0.7634891867637634,
        "codebertscore_s_f3-72": 0.7707289457321167,
        "codebertscore_s_f1-64": 0.7976683974266052,
        "codebertscore_s_f3-64": 0.8040351271629333,
        "codebertscore_s_f1-59": 0.9223319888114929,
        "codebertscore_s_f3-59": 0.9197601079940796,
        "codebertscore_s_f1-36": 0.8770713210105896,
        "codebertscore_s_f3-36": 0.8904157280921936,
        "codebertscore_s_f1-191": 0.8173547983169556,
        "codebertscore_s_f3-191": 0.8591712117195129,
        "codebertscore_s_f1-26": 0.7980735301971436,
        "codebertscore_s_f3-26": 0.806327223777771,
        "codebertscore_s_f1-176": 0.9150041341781616,
        "codebertscore_s_f3-176": 0.9246447682380676,
        "codebertscore_s_f1-141": 0.8838986754417419,
        "codebertscore_s_f3-141": 0.8875612616539001,
        "codebertscore_s_f1-22": 0.9212493300437927,
        "codebertscore_s_f3-22": 0.9280687570571899,
        "codebertscore_s_f1-153": 0.8997744917869568,
        "codebertscore_s_f3-153": 0.8986103534698486,
        "codebertscore_s_f1-110": 0.8036675453186035,
        "codebertscore_s_f3-110": 0.8193195462226868,
        "codebertscore_s_f1-8": 0.7614414691925049,
        "codebertscore_s_f3-8": 0.8311883211135864,
        "codebertscore_s_f1-7": 0.7820857763290405,
        "codebertscore_s_f3-7": 0.7965013384819031,
        "codebertscore_s_f1-23": 0.7063111066818237,
        "codebertscore_s_f3-23": 0.7373377084732056,
        "codebertscore_s_f1-57": 0.8685028553009033,
        "codebertscore_s_f3-57": 0.8799751400947571,
        "codebertscore_s_f1-61": 0.6858323812484741,
        "codebertscore_s_f3-61": 0.7841230630874634,
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-192": 3,
        "raw_gpt35_nsnr-192": "3",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 3,
        "raw_gpt35_nsnr-153": "3",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n",
        "snippet": [
            "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n"
        ],
        "simplified": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "task_id": "59",
        "164": "if (n == 2) return 2;\n    else if (n % 2 == 0) return largest_prime_factor(n / 2);\n    else {\n        for (long i = 3; i < n; i += 2) {\n            if (n % i == 0) return largest_prime_factor(n / i);\n        }\n        return n;\n    }",
        "grade-164": {
            "execution": 1
        },
        "28": "// YOUR CODE HERE\n    assert(n > 1);\n    int i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            n /= i;\n            i--;\n        }\n    }\n    return i;",
        "grade-28": {
            "execution": 1
        },
        "6": "int lpf;\n    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            lpf = i;\n            n /= i;\n        }\n    }\n    return lpf;",
        "grade-6": {
            "execution": 1
        },
        "192": "long d = 2;\n\twhile (n > 1) {\n\t\twhile (n % d == 0) {\n\t\t\tn /= d;\n\t\t}\n\t\td += 1;\n\t}\n\treturn d - 1;",
        "grade-192": {
            "execution": 1
        },
        "70": "long largest_prime_factor = 2;\n    long max = n;\n    long quotient = 0;\n    long remainder = 0;\n    bool is_prime = true;\n    // while (n % 2 == 0) {\n    //     n = n / 2;\n    // }\n    // if (n == 1) {\n    //     return 2;\n    // }\n    for (long i = 3; i <= n; i += 2) {\n        is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            std::cout << i << std::endl;\n            if (n % i == 0) {\n                quotient = n / i;\n                remainder = n % i;\n                if (remainder == 0) {\n                    if (i > largest_prime_factor) {\n                        largest_prime_factor = i;\n                    }\n                    n = quotient;\n                }\n            }\n        }\n    }\n    return largest_prime_factor;",
        "grade-70": {
            "execution": 1
        },
        "62": "long factor = 2;\n  while (n > 1) {\n    if (n % factor == 0) {\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return factor;",
        "grade-62": {
            "execution": 1
        },
        "57": "long largest = 0;\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        largest = n;\n    }\n    return largest;",
        "grade-57": {
            "execution": 1
        },
        "35": "long copy = n;\n  long big = 0;\n  int i = 2;\n  if (n < 2) {\n    return -1;\n  }\n  for (i = 2; i < copy; i++) {\n    if (copy % i == 0) {\n      big = i;\n      copy = copy / i;\n      i = 2;\n    }\n  }\n  return copy;",
        "grade-35": {
            "execution": 1
        },
        "191": "long i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn n;",
        "grade-191": {
            "execution": 1
        },
        "26": "return -1;",
        "grade-26": {
            "execution": 0
        },
        "176": "int largest = -1;\n  for (int i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      largest = i;\n      n /= i;\n    }\n  }\n  return largest;",
        "grade-176": {
            "execution": 1
        },
        "140": "assert(n > 1);\n    int lpf = 1;\n    for (int i = 2; i * i <= n; i += 1) {\n        if (n % i == 0) {\n            lpf = i;\n            n /= i;\n            // Early exit for a small (2^11) sample set.\n            if (n == 1) {\n                return lpf;\n            }\n        }\n    }\n    return n;",
        "grade-140": {
            "execution": 0
        },
        "22": "long i = 2;\n\twhile (i < n) {\n\t\tif (n % i == 0) {\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\treturn n;",
        "grade-22": {
            "execution": 1
        },
        "152": "assert(n > 1);\n    long largest_prime_factor = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n            i = 2;\n        }\n    }\n    return largest_prime_factor;",
        "grade-152": {
            "execution": 1
        },
        "108": "long largest_prime = 1;\n\tlong i = 2;\n\tlong root = sqrt(n);\n\twhile (i <= root) {\n\t\tif (n % i == 0) {\n\t\t\tlargest_prime = i;\n\t\t\tn /= i;\n\t\t\troot = sqrt(n);\n\t\t}\n\t\ti += 1;\n\t}\n\treturn (n == 1) ? largest_prime : n;",
        "grade-108": {
            "execution": 0
        },
        "8": "long largestPrime = -1;\n    while (n % 2 == 0) {\n        largestPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largestPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        largestPrime = n;\n    return largestPrime;",
        "grade-8": {
            "execution": 1
        },
        "7": "// TODO: your code here\n    long result = 0;\n    for (long i = 2; i <= n; i++) {\n        // Checks if i is a prime number.\n        bool is_prime = true;\n        for (long j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            while (n % i == 0) {\n                result = i;\n                n /= i;\n            }\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "// To be implemented.\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    return largest;",
        "grade-23": {
            "execution": 1
        },
        "55": "assert(n > 1);\n    int i = 2;\n    while (n > 1) {\n        while (n % i == 0)\n            n /= i;\n        i++;\n    }\n    return i - 1;",
        "grade-55": {
            "execution": 1
        },
        "59": "// Check for base cases\n    if (n == 1 || n == 2) {\n        return n;\n    }\n    // Check if n is even\n    if (n % 2 == 0) {\n        return largest_prime_factor(n / 2);\n    }\n    // All other cases are odd\n    for (long i = 3; i <= sqrt(n); i+=2) {\n        if (n % i == 0) {\n            return largest_prime_factor(n / i);\n        }\n    }\n    // Case where n is prime\n    return n;",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.21405618567528517,
        "bleu-28": 0.3712681092022194,
        "bleu-6": 0.5306822447844338,
        "bleu-192": 0.1425247805528419,
        "bleu-70": 0.1111145606334671,
        "bleu-62": 0.12273856837594516,
        "bleu-57": 0.28924194445013035,
        "bleu-35": 0.22352419121046108,
        "bleu-191": 0.4125193245012875,
        "bleu-26": 1.8257265760794283e-05,
        "bleu-176": 0.49567031153555974,
        "bleu-140": 0.3009458775442656,
        "bleu-22": 0.30537452878063187,
        "bleu-152": 0.35161084620338395,
        "bleu-108": 0.18000072540730852,
        "bleu-8": 0.23684942992894237,
        "bleu-7": 0.1834112803835028,
        "bleu-23": 0.39481293859205024,
        "bleu-55": 0.36661156787481114,
        "bleu-59": 0.12961372195314352,
        "codebleu-164": 0.48966283090857377,
        "codebleu-28": 0.5740742811835629,
        "codebleu-6": 0.6139453058512333,
        "codebleu-192": 0.440296831260667,
        "codebleu-70": 0.6574980440564255,
        "codebleu-62": 0.44193817878028396,
        "codebleu-57": 0.6253139206620936,
        "codebleu-35": 0.5740197212974378,
        "codebleu-191": 0.5396103628553157,
        "codebleu-26": 0.0357273837109239,
        "codebleu-176": 0.6142358073654784,
        "codebleu-140": 0.6126295966222168,
        "codebleu-22": 0.4557875428435306,
        "codebleu-152": 0.6031739478102265,
        "codebleu-108": 0.5332081253461545,
        "codebleu-8": 0.5937578855985216,
        "codebleu-7": 0.6145771946947132,
        "codebleu-23": 0.5992787117457514,
        "codebleu-55": 0.5193842580964457,
        "codebleu-59": 0.5160116613658913,
        "chrf-164": 0.28381168395710404,
        "chrf-28": 0.4037586857844154,
        "chrf-6": 0.5587318229603763,
        "chrf-192": 0.26918348516782226,
        "chrf-70": 0.2315266206291085,
        "chrf-62": 0.2487519976625094,
        "chrf-57": 0.39229359531750096,
        "chrf-35": 0.31867953281494044,
        "chrf-191": 0.41018312446030547,
        "chrf-26": 0.08165921509663394,
        "chrf-176": 0.5329414942391009,
        "chrf-140": 0.4514539875682413,
        "chrf-22": 0.3545741987010947,
        "chrf-152": 0.3219472320195751,
        "chrf-108": 0.2786768300781551,
        "chrf-8": 0.3933427473600443,
        "chrf-7": 0.317080366686868,
        "chrf-23": 0.42691667044314213,
        "chrf-55": 0.41281516941889657,
        "chrf-59": 0.2354230501712976,
        "rougel-164": 0.509090909090909,
        "rougel-28": 0.6041666666666666,
        "rougel-6": 0.7529411764705882,
        "rougel-192": 0.45,
        "rougel-70": 0.25531914893617025,
        "rougel-62": 0.42500000000000004,
        "rougel-57": 0.5688073394495413,
        "rougel-35": 0.4642857142857143,
        "rougel-191": 0.6265060240963854,
        "rougel-26": 0.08888888888888888,
        "rougel-176": 0.7272727272727273,
        "rougel-140": 0.532258064516129,
        "rougel-22": 0.5679012345679012,
        "rougel-152": 0.6122448979591836,
        "rougel-108": 0.4464285714285714,
        "rougel-8": 0.4806201550387597,
        "rougel-7": 0.40789473684210525,
        "rougel-23": 0.6666666666666667,
        "rougel-55": 0.5476190476190476,
        "rougel-59": 0.38926174496644295,
        "meteor-164": 0.5233111522028085,
        "meteor-28": 0.6699587264150944,
        "meteor-6": 0.6596073125162328,
        "meteor-192": 0.4420361894757903,
        "meteor-70": 0.3880084430952112,
        "meteor-62": 0.44422206752523496,
        "meteor-57": 0.4682121870978783,
        "meteor-35": 0.4682569496619084,
        "meteor-191": 0.6992081933675144,
        "meteor-26": 0.04021447721179624,
        "meteor-176": 0.668897174254317,
        "meteor-140": 0.6124901943960974,
        "meteor-22": 0.5725664731051345,
        "meteor-152": 0.5361598160390917,
        "meteor-108": 0.49148423005565867,
        "meteor-8": 0.559221891536396,
        "meteor-7": 0.46503748558246827,
        "meteor-23": 0.6134438751584078,
        "meteor-55": 0.5692020526085935,
        "meteor-59": 0.4426544942801391,
        "ruby-164": 0.33333333333333337,
        "ruby-28": 0.4181818181818182,
        "ruby-6": 0.5909090909090908,
        "ruby-192": 0.24390243902439024,
        "ruby-70": 0.15463917525773196,
        "ruby-62": 0.2195121951219512,
        "ruby-57": 0.4117647058823529,
        "ruby-35": 0.352112676056338,
        "ruby-191": 0.40476190476190477,
        "ruby-26": 0.024390243902439046,
        "ruby-176": 0.5531914893617021,
        "ruby-140": 0.3855421686746988,
        "ruby-22": 0.3414634146341463,
        "ruby-152": 0.45614035087719296,
        "ruby-108": 0.323943661971831,
        "ruby-8": 0.34090909090909094,
        "ruby-7": 0.25225225225225223,
        "ruby-23": 0.4807692307692307,
        "ruby-55": 0.32558139534883723,
        "ruby-59": 0.25,
        "codebertscore_f1-164": 0.816012978553772,
        "codebertscore_f3-164": 0.8309803009033203,
        "codebertscore_f1-28": 0.8304126858711243,
        "codebertscore_f3-28": 0.8551362156867981,
        "codebertscore_f1-6": 0.86393803358078,
        "codebertscore_f3-6": 0.8861054182052612,
        "codebertscore_f1-192": 0.8272558450698853,
        "codebertscore_f3-192": 0.8252520561218262,
        "codebertscore_f1-70": 0.7004190683364868,
        "codebertscore_f3-70": 0.769637942314148,
        "codebertscore_f1-62": 0.8146652579307556,
        "codebertscore_f3-62": 0.8079441785812378,
        "codebertscore_f1-57": 0.8366979956626892,
        "codebertscore_f3-57": 0.8512753248214722,
        "codebertscore_f1-35": 0.8244140148162842,
        "codebertscore_f3-35": 0.8406756520271301,
        "codebertscore_f1-191": 0.8872040510177612,
        "codebertscore_f3-191": 0.8869087100028992,
        "codebertscore_f1-26": 0.5162245631217957,
        "codebertscore_f3-26": 0.4833345115184784,
        "codebertscore_f1-176": 0.8800816535949707,
        "codebertscore_f3-176": 0.8929774165153503,
        "codebertscore_f1-140": 0.7849788069725037,
        "codebertscore_f3-140": 0.8428009748458862,
        "codebertscore_f1-22": 0.8692544102668762,
        "codebertscore_f3-22": 0.8674627542495728,
        "codebertscore_f1-152": 0.8181747794151306,
        "codebertscore_f3-152": 0.8448333144187927,
        "codebertscore_f1-108": 0.806439995765686,
        "codebertscore_f3-108": 0.8360461592674255,
        "codebertscore_f1-8": 0.7968724370002747,
        "codebertscore_f3-8": 0.8280735015869141,
        "codebertscore_f1-7": 0.7227832078933716,
        "codebertscore_f3-7": 0.7689478993415833,
        "codebertscore_f1-23": 0.8393831253051758,
        "codebertscore_f3-23": 0.8659482002258301,
        "codebertscore_f1-55": 0.8553071022033691,
        "codebertscore_f3-55": 0.8613691329956055,
        "codebertscore_f1-59": 0.7476518154144287,
        "codebertscore_f3-59": 0.792406439781189,
        "codebertscore_s_f1-164": 0.808914840221405,
        "codebertscore_s_f3-164": 0.8206908702850342,
        "codebertscore_s_f1-28": 0.8286128640174866,
        "codebertscore_s_f3-28": 0.8520764112472534,
        "codebertscore_s_f1-6": 0.8612819314002991,
        "codebertscore_s_f3-6": 0.8823035359382629,
        "codebertscore_s_f1-192": 0.829290509223938,
        "codebertscore_s_f3-192": 0.8300595879554749,
        "codebertscore_s_f1-70": 0.6994351744651794,
        "codebertscore_s_f3-70": 0.7700403332710266,
        "codebertscore_s_f1-62": 0.8228363394737244,
        "codebertscore_s_f3-62": 0.8186370730400085,
        "codebertscore_s_f1-57": 0.8400706052780151,
        "codebertscore_s_f3-57": 0.8558846116065979,
        "codebertscore_s_f1-35": 0.8163079023361206,
        "codebertscore_s_f3-35": 0.8329114317893982,
        "codebertscore_s_f1-191": 0.8935037851333618,
        "codebertscore_s_f3-191": 0.8950568437576294,
        "codebertscore_s_f1-26": 0.6585376262664795,
        "codebertscore_s_f3-26": 0.6304816007614136,
        "codebertscore_s_f1-176": 0.8847689628601074,
        "codebertscore_s_f3-176": 0.8954331278800964,
        "codebertscore_s_f1-140": 0.7855815887451172,
        "codebertscore_s_f3-140": 0.846903920173645,
        "codebertscore_s_f1-22": 0.8701604604721069,
        "codebertscore_s_f3-22": 0.8710914850234985,
        "codebertscore_s_f1-152": 0.8107940554618835,
        "codebertscore_s_f3-152": 0.8387747406959534,
        "codebertscore_s_f1-108": 0.8018271923065186,
        "codebertscore_s_f3-108": 0.8316730856895447,
        "codebertscore_s_f1-8": 0.7918033599853516,
        "codebertscore_s_f3-8": 0.821713924407959,
        "codebertscore_s_f1-7": 0.7266894578933716,
        "codebertscore_s_f3-7": 0.7768437266349792,
        "codebertscore_s_f1-23": 0.8363613486289978,
        "codebertscore_s_f3-23": 0.8611368536949158,
        "codebertscore_s_f1-55": 0.8511534333229065,
        "codebertscore_s_f3-55": 0.8578121066093445,
        "codebertscore_s_f1-59": 0.7417629957199097,
        "codebertscore_s_f3-59": 0.7841954827308655,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-26": 0,
        "raw_gpt35_nsnr-26": "0",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-191": 4,
        "raw_gpt35_nswr-191": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long> lst) {\n",
        "snippet": [
            "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n"
        ],
        "simplified": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
        "task_id": "94",
        "164": "long i, j, max = 0;\n\tstd::vector<long> factors;\n\tfor (i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max)\n\t\t\tmax = lst[i];\n\t}\n\tfor (i = 2; i <= max; i++) {\n\t\tfor (j = 2; j <= i; j++) {\n\t\t\tif (i % j == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (i == j)\n\t\t\tfactors.push_back(i);\n\t}\n\tlong largest = 0;\n\tfor (i = 0; i < lst.size(); i++) {\n\t\tfor (j = 0; j < factors.size(); j++) {\n\t\t\tif (lst[i] == factors[j]) {\n\t\t\t\tif (factors[j] > largest)\n\t\t\t\t\tlargest = factors[j];\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (largest != 0) {\n\t\tsum += largest % 10;\n\t\tlargest /= 10;\n\t}\n\treturn sum;",
        "grade-164": {
            "execution": 1
        },
        "28": "std::vector<long> prime_numbers;\n    // step 1: create an array of all prime numbers in the range of lst\n    for (auto i : lst) {\n        std::vector<long> divisors;\n        for (long j = 1; j <= i; j++) {\n            if (i % j == 0) {\n                divisors.push_back(j);\n            }\n        }\n        if (divisors.size() == 2) {\n            prime_numbers.push_back(i);\n        }\n    }\n    // step 2: sort the array of prime numbers\n    std::sort(prime_numbers.begin(), prime_numbers.end());\n    // step 3: get the last element of the array(the largest prime number)\n    long largest_prime_number = prime_numbers.back();\n    std::vector<long> largest_prime_number_digits;\n    while (largest_prime_number != 0) {\n        int digit = largest_prime_number % 10;\n        largest_prime_number_digits.push_back(digit);\n        largest_prime_number /= 10;\n    }\n    long sum = 0;\n    for (auto i : largest_prime_number_digits) {\n        sum += i;\n    }\n    return sum;",
        "grade-28": {
            "execution": 1
        },
        "6": "//step 1, find the largest prime\n\tlong max = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max) {\n\t\t\tbool prime = true;\n\t\t\tfor (long j = 2; j < lst[i]; j++) {\n\t\t\t\tif (lst[i] % j == 0) {\n\t\t\t\t\tprime = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prime) {\n\t\t\t\tmax = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\t//step 2, sum the digits\n\tlong sum = 0;\n\twhile (max > 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;",
        "grade-6": {
            "execution": 1
        },
        "190": "sort(lst.begin(), lst.end());\n\tlong max = 0;\n\tfor (int i = lst.size() - 1; i >= 0; i--) {\n\t\tif (lst[i] == 2) {\n\t\t\treturn 2;\n\t\t}\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tlst[i] -= 1;\n\t\t}\n\t\tif (lst[i] == 1) {\n\t\t\tcontinue;\n\t\t}\n\t\tbool isPrime = true;\n\t\tfor (int j = 3; j < lst[i]; j += 2) {\n\t\t\tif (lst[i] % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tmax = lst[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (max != 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;",
        "grade-190": {
            "execution": 0
        },
        "71": "// find largest prime number\n    long largestPrime = 0;\n    for (auto number : lst) {\n        long largestNonPrime = number;\n        for (long i = 2; i <= number; i++) {\n            if (number % i == 0) {\n                largestNonPrime = i;\n                break;\n            }\n        }\n        if (largestNonPrime == number) {\n            largestPrime = number;\n        }\n    }\n    long sumOfLargestPrime = 0;\n    while (largestPrime > 0) {\n        sumOfLargestPrime += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sumOfLargestPrime;",
        "grade-71": {
            "execution": 0
        },
        "63": "//    assert( 0 );\n    //    return 0;",
        "grade-63": {
            "execution": 0
        },
        "58": "long i,j,flag,res=0;\n    for(i=0;i<lst.size();i++)\n    {\n        flag=0;\n        for(j=2;j<=lst[i]/2;j++)\n        {\n            if(lst[i]%j==0)\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0)\n        {\n            res=lst[i];\n        }\n    }\n    long r=0;\n    while(res>0)\n    {\n        r=r+res%10;\n        res=res/10;\n    }\n    return r;",
        "grade-58": {
            "execution": 0
        },
        "35": "// your code\n  long largestPrime = 0;\n  for(auto const& x : lst) {\n    bool isPrime = true;\n    for(int j = 2; j <= sqrt(x); j++) {\n      if(x % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime && x > largestPrime) {\n      largestPrime = x;\n    }\n  }\n  std::cout << largestPrime << std::endl;\n  long primeSum = 0;\n  while(largestPrime > 0) {\n    primeSum += largestPrime % 10;\n    largestPrime /= 10;\n  }\n  return primeSum;",
        "grade-35": {
            "execution": 1
        },
        "189": "long max = -1;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  bool isPrime = true;\n  for (int i = 2; i <= max; i++) {\n    isPrime = true;\n    for (int j = 2; j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      return i;\n    }\n  }\n  return -1;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::sort(lst.begin(), lst.end());\n  return lst[lst.size()-1];",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> res;\n    long sum = 0;\n    for(long i = 0; i < lst.size(); i++){\n        long temp = 0;\n        for(long j = 0; j < lst.size(); j++){\n            if(i != j){\n                temp += lst[j];\n            }\n        }\n        res.push_back(temp);\n    }\n    long max = 0;\n    for(long i = 0; i < res.size(); i++){\n        if(res[i] > max){\n            max = res[i];\n        }\n    }\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "int fl=0;\n    long  max=0;\n    long result=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]==1)\n        {\n            fl=1;\n        }\n        if(lst[i]%2==0)\n        {\n            lst[i]=2;\n        }\n        else if(lst[i]%3==0)\n        {\n            lst[i]=3;\n        }\n        else if(lst[i]%5==0)\n        {\n            lst[i]=5;\n        }\n        else if(lst[i]%7==0)\n        {\n            lst[i]=7;\n        }\n        else if(lst[i]%11==0)\n        {\n            lst[i]=11;\n        }\n        else if(lst[i]%13==0)\n        {\n            lst[i]=13;\n        }\n        else if(lst[i]%17==0)\n        {\n            lst[i]=17;\n        }\n        else if(lst[i]%19==0)\n        {\n            lst[i]=19;\n        }\n        else if(lst[i]%23==0)\n        {\n            lst[i]=23;\n        }\n        else if(lst[i]%29==0)\n        {\n            lst[i]=29;\n        }\n        else if(lst[i]%31==0)\n        {\n            lst[i]=31;\n        }\n        else if(lst[i]%37==0)\n        {\n            lst[i]=37;\n        }\n        else if(lst[i]%41==0)\n        {\n            lst[i]=41;\n        }\n        else if(lst[i]%43==0)\n        {\n            lst[i]=43;\n        }\n        else if(lst[i]%47==0)\n        {\n            lst[i]=47",
        "grade-140": {
            "execution": 0
        },
        "22": "if(lst.size()<=2) return lst[0];\n    long max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max) max=lst[i];\n    }\n    std::vector<long> prime;\n    prime.push_back(2);\n    for(int i=3;i<=max;i++){\n        bool flag=true;\n        for(int j=0;j<prime.size();j++){\n            if(i%prime[j]==0){\n                flag=false;\n                break;\n            }\n        }\n        if(flag) prime.push_back(i);\n    }\n    int sum=0;\n    for(int i=0;i<prime.size();i++){\n        sum+=prime[i];\n    }\n    std::cout<<\"Sum of all prime nos in the given range: \"<<sum<<std::endl;\n    // std::vector<long> nlst;\n    // for(int i=0;i<lst.size();i++){\n    //     if(lst[i]%prime[prime.size()-1]==0) nlst.push_back(lst[i]);\n    // }\n    // long sum=0;\n    // for(int i=0;i<nlst.size();i++){\n    //     sum+=nlst[i];\n    // }\n    // return sum;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<long> res;\n    for(int i = 0; i < lst.size(); i++){\n        bool isPrime = true;\n        for(int j = 2; j <= lst[i]/2; j++){\n            if(lst[i] % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            res.push_back(lst[i]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n    int ans = 0;\n    if(res.size() >= 1){\n        ans = res[res.size()-1];\n    }\n    int res1 = 0;\n    while(ans != 0){\n        res1 += ans % 10;\n        ans /= 10;\n    }\n    return res1;",
        "grade-152": {
            "execution": 1
        },
        "109": "long largestPrime = -1;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tlong num = lst[i];\n\t\tif (num == 1) continue;\n\t\tbool isPrime = true;\n\t\tfor (long j = 2; j <= sqrt(num); j++) {\n\t\t\tif (num % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tlargestPrime = std::max(largestPrime, num);\n\t\t}\n\t}\n\tif (largestPrime == -1) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\twhile (largestPrime) {\n\t\tsum += largestPrime % 10;\n\t\tlargestPrime /= 10;\n\t}\n\treturn sum;",
        "grade-109": {
            "execution": 1
        },
        "8": "vector<long> v;\n    vector<long> s;\n    vector<long> m;\n    vector<long> f;\n    vector<long> g;\n    vector<long> j;\n    vector<long> p;\n    vector<long> o;\n    vector<long> e;\n    vector<long> z;\n    vector<long> q;\n    vector<long> m1;\n    vector<long> m2;\n    vector<long> m3;\n    vector<long> m4;\n    vector<long> m5;\n    vector<long> m6;\n    vector<long> m7;\n    vector<long> m8;\n    vector<long> m9;\n    vector<long> m10;\n    vector<long> m11;\n    vector<long> m12;\n    vector<long> m13;\n    vector<long> m14;\n    vector<long> m15;\n    vector<long> m16;\n    vector<long> m17;\n    vector<long> m18;\n    vector<long> m19;\n    vector<long> m20;\n    vector<long> m21;\n    vector<long> m22;\n    vector<long> m23;\n    vector<long> m24;\n    vector<long> m25;\n    vector<long> m26;\n    vector<long> m27;\n    vector<long> m28;\n    vector<long> m29;\n    vector<long> m30;\n    vector<long> m31;\n    vector<long> m32;\n    vector<long> m33;\n    vector<long> m34;\n    vector<long> m35;\n    vector<long> m36;\n    vector<long> m37;\n    vector<long> m38;\n    vector<long> m39;\n    vector<long> m40;\n    vector<long> m41;\n    vector<long> m42;\n    vector<long> m43;\n    vector<long> m44;\n    vector<long> m45;\n    vector<long> m46;\n    vector<long> m47;",
        "grade-8": {
            "execution": 0
        },
        "7": "int len = lst.size();\n    if(len == 0) return 0;\n    long largestPrimeValue = 0;\n    for(int i = 0; i < len; i++){\n        long num = lst[i];\n        bool isPrime = true;\n        if(num == 0) continue;\n        if(num == 1) continue;\n        for(int j = 2; j < num/2; j++){\n            if(num % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime && largestPrimeValue < num){\n            largestPrimeValue = num;\n        }\n    }\n    int sum = 0;\n    while(largestPrimeValue > 0){\n        sum += largestPrimeValue % 10;\n        largestPrimeValue /= 10;\n    }\n    return sum;",
        "grade-7": {
            "execution": 1
        },
        "23": "long prime=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tbool flag=true;\n\t\tfor(int j=2;j<=sqrt(lst[i]);j++){\n\t\t\tif(lst[i]%j==0){\n\t\t\t\tflag=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag==true && lst[i]>prime){\n\t\t\tprime=lst[i];\n\t\t}\n\t}\n\tlong sum=0;\n\twhile(prime>0){\n\t\tsum+=prime%10;\n\t\tprime/=10;\n\t}\n\treturn sum;",
        "grade-23": {
            "execution": 1
        },
        "56": "//max element\n    auto it = max_element(lst.begin(), lst.end());\n    //iterator to position\n    long max = *it;\n    long c = 0;\n    std::vector<long> vec;\n    while(max != 0){\n        c = max % 10;\n        vec.push_back(c);\n        max = max / 10;\n    }\n    long sum = 0;\n    for(int i = 0; i < vec.size(); i++){\n        sum += vec[i];\n    }\n    return sum;",
        "grade-56": {
            "execution": 0
        },
        "60": "for (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tlst[i] = 0;\n\t\t}\n\t}\n\tlst.erase(std::remove(lst.begin(), lst.end(), 0), lst.end());\n\tif (lst.size() == 0) {\n\t\treturn 2;\n\t}\n\tlong top = *std::max_element(lst.begin(), lst.end());\n\tint coeff = 2;\n\tint temp = 2;\n\tbool found = false;\n\tfor (long i = 2; i <= top; i++) {\n\t\tfound = false;\n\t\ttemp = 2;\n\t\tfor (long j = 0; j < lst.size(); j++) {\n\t\t\tif (i % lst[j] == 0) {\n\t\t\t\tcoeff = coeff * temp;\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp++;\n\t\t}\n\t\tif (!found) {\n\t\t\tcoeff = coeff * i;\n\t\t}\n\t}\n\treturn coeff;",
        "grade-60": {
            "execution": 0
        },
        "bleu-164": 0.32748607775215993,
        "bleu-28": 0.12968021388150414,
        "bleu-6": 0.47987726977030465,
        "bleu-190": 0.32054354117281975,
        "bleu-71": 0.126840418368968,
        "bleu-63": 1.7821919962272677e-06,
        "bleu-58": 0.3664927523329283,
        "bleu-35": 0.21785571830892347,
        "bleu-189": 0.42331425209213164,
        "bleu-26": 0.004429566480133967,
        "bleu-174": 0.34901117947577526,
        "bleu-140": 0.12906018701747649,
        "bleu-22": 0.25678946008970566,
        "bleu-152": 0.37826984437110717,
        "bleu-109": 0.32114747586114434,
        "bleu-8": 0.0037580147825000826,
        "bleu-7": 0.33340738920129886,
        "bleu-23": 0.4740404874232362,
        "bleu-56": 0.2208091500020494,
        "bleu-60": 0.23526734150481535,
        "codebleu-164": 0.7159710597854817,
        "codebleu-28": 0.5442875609932936,
        "codebleu-6": 0.65218747293341,
        "codebleu-190": 0.6613993955633226,
        "codebleu-71": 0.3792286447076523,
        "codebleu-63": 0.03296823737102493,
        "codebleu-58": 0.5427700926603671,
        "codebleu-35": 0.45168747969098433,
        "codebleu-189": 0.594473515758886,
        "codebleu-26": 0.1192369791476775,
        "codebleu-174": 0.6569789104460889,
        "codebleu-140": 0.6070864397796958,
        "codebleu-22": 0.7357125259252847,
        "codebleu-152": 0.6715527573212944,
        "codebleu-109": 0.5974838481153176,
        "codebleu-8": 0.2596308186195827,
        "codebleu-7": 0.6153589824622827,
        "codebleu-23": 0.6131497013943292,
        "codebleu-56": 0.49671177133192324,
        "codebleu-60": 0.6710017057165724,
        "chrf-164": 0.440718763445193,
        "chrf-28": 0.2819273525340082,
        "chrf-6": 0.4690183152309862,
        "chrf-190": 0.42250118630066374,
        "chrf-71": 0.26721059045266293,
        "chrf-63": 0.038264111370282156,
        "chrf-58": 0.30580593414574647,
        "chrf-35": 0.35825043384220956,
        "chrf-189": 0.4058786522613482,
        "chrf-26": 0.09669669122195305,
        "chrf-174": 0.31650152537460463,
        "chrf-140": 0.24271086904664516,
        "chrf-22": 0.43970710454950945,
        "chrf-152": 0.4279843353803041,
        "chrf-109": 0.4064574508931023,
        "chrf-8": 0.06106488568099431,
        "chrf-7": 0.4401727796812681,
        "chrf-23": 0.459704652038177,
        "chrf-56": 0.255406870327029,
        "chrf-60": 0.32753524641892334,
        "rougel-164": 0.48901098901098894,
        "rougel-28": 0.3434903047091413,
        "rougel-6": 0.6573426573426574,
        "rougel-190": 0.5029940119760479,
        "rougel-71": 0.3970037453183521,
        "rougel-63": 0.0759493670886076,
        "rougel-58": 0.5724907063197024,
        "rougel-35": 0.41577060931899645,
        "rougel-189": 0.513011152416357,
        "rougel-26": 0.19318181818181815,
        "rougel-174": 0.5033557046979866,
        "rougel-140": 0.3473282442748092,
        "rougel-22": 0.4472573839662447,
        "rougel-152": 0.5420560747663551,
        "rougel-109": 0.52,
        "rougel-8": 0.08906882591093118,
        "rougel-7": 0.4807692307692308,
        "rougel-23": 0.63003663003663,
        "rougel-56": 0.43410852713178294,
        "rougel-60": 0.38904109589041097,
        "meteor-164": 0.4830917727191924,
        "meteor-28": 0.3743971128813393,
        "meteor-6": 0.42862070151306736,
        "meteor-190": 0.5252541679121715,
        "meteor-71": 0.2607239277901826,
        "meteor-63": 0.030165912518853696,
        "meteor-58": 0.34845096730802594,
        "meteor-35": 0.31460627795184737,
        "meteor-189": 0.3678654108471782,
        "meteor-26": 0.10600217166261588,
        "meteor-174": 0.4405011610079657,
        "meteor-140": 0.30878035067118537,
        "meteor-22": 0.5778432155907429,
        "meteor-152": 0.46466910524050264,
        "meteor-109": 0.4293996163990384,
        "meteor-8": 0.06919374247894104,
        "meteor-7": 0.4314509862865033,
        "meteor-23": 0.42730465322248345,
        "meteor-56": 0.3929980539365321,
        "meteor-60": 0.3522504892367906,
        "ruby-164": 0.34403669724770647,
        "ruby-28": 0.1813953488372093,
        "ruby-6": 0.4931506849315068,
        "ruby-190": 0.2712765957446809,
        "ruby-71": 0.23287671232876717,
        "ruby-63": 0.04109589041095896,
        "ruby-58": 0.3904109589041096,
        "ruby-35": 0.2465753424657534,
        "ruby-189": 0.32191780821917804,
        "ruby-26": 0.11643835616438358,
        "ruby-174": 0.3092105263157895,
        "ruby-140": 0.23809523809523814,
        "ruby-22": 0.29268292682926833,
        "ruby-152": 0.4,
        "ruby-109": 0.3571428571428571,
        "ruby-8": 0.06034482758620685,
        "ruby-7": 0.24096385542168675,
        "ruby-23": 0.45890410958904104,
        "ruby-56": 0.3082191780821918,
        "ruby-60": 0.27853881278538817,
        "codebertscore_f1-164": 0.8200559616088867,
        "codebertscore_f3-164": 0.8089118003845215,
        "codebertscore_f1-28": 0.7367769479751587,
        "codebertscore_f3-28": 0.7826041579246521,
        "codebertscore_f1-6": 0.8494166731834412,
        "codebertscore_f3-6": 0.8452690243721008,
        "codebertscore_f1-190": 0.8290690183639526,
        "codebertscore_f3-190": 0.8241772055625916,
        "codebertscore_f1-71": 0.767037570476532,
        "codebertscore_f3-71": 0.7751764059066772,
        "codebertscore_f1-63": 0.5739038586616516,
        "codebertscore_f3-63": 0.5260449051856995,
        "codebertscore_f1-58": 0.8161371946334839,
        "codebertscore_f3-58": 0.8055958151817322,
        "codebertscore_f1-35": 0.7832833528518677,
        "codebertscore_f3-35": 0.7904426455497742,
        "codebertscore_f1-189": 0.8429144024848938,
        "codebertscore_f3-189": 0.8188285231590271,
        "codebertscore_f1-26": 0.6673476696014404,
        "codebertscore_f3-26": 0.5996091365814209,
        "codebertscore_f1-174": 0.8071519732475281,
        "codebertscore_f3-174": 0.7960787415504456,
        "codebertscore_f1-140": 0.7631469368934631,
        "codebertscore_f3-140": 0.7647148966789246,
        "codebertscore_f1-22": 0.8094578385353088,
        "codebertscore_f3-22": 0.8284454941749573,
        "codebertscore_f1-152": 0.8131961226463318,
        "codebertscore_f3-152": 0.8237681984901428,
        "codebertscore_f1-109": 0.8231922388076782,
        "codebertscore_f3-109": 0.8275888562202454,
        "codebertscore_f1-8": 0.6052066087722778,
        "codebertscore_f3-8": 0.6048610210418701,
        "codebertscore_f1-7": 0.7992842793464661,
        "codebertscore_f3-7": 0.8131428956985474,
        "codebertscore_f1-23": 0.8555049300193787,
        "codebertscore_f3-23": 0.8374183177947998,
        "codebertscore_f1-56": 0.7683417201042175,
        "codebertscore_f3-56": 0.7754780650138855,
        "codebertscore_f1-60": 0.7893312573432922,
        "codebertscore_f3-60": 0.7866966724395752,
        "codebertscore_s_f1-164": 0.819729745388031,
        "codebertscore_s_f3-164": 0.8079742193222046,
        "codebertscore_s_f1-28": 0.746174693107605,
        "codebertscore_s_f3-28": 0.7792375087738037,
        "codebertscore_s_f1-6": 0.8425052165985107,
        "codebertscore_s_f3-6": 0.8428328633308411,
        "codebertscore_s_f1-190": 0.8261595964431763,
        "codebertscore_s_f3-190": 0.8211430311203003,
        "codebertscore_s_f1-71": 0.755334734916687,
        "codebertscore_s_f3-71": 0.7601624727249146,
        "codebertscore_s_f1-63": 0.5969351530075073,
        "codebertscore_s_f3-63": 0.5460156202316284,
        "codebertscore_s_f1-58": 0.8091331720352173,
        "codebertscore_s_f3-58": 0.8010757565498352,
        "codebertscore_s_f1-35": 0.7669005393981934,
        "codebertscore_s_f3-35": 0.7738305330276489,
        "codebertscore_s_f1-189": 0.8405658006668091,
        "codebertscore_s_f3-189": 0.8189272284507751,
        "codebertscore_s_f1-26": 0.6841252446174622,
        "codebertscore_s_f3-26": 0.6122381687164307,
        "codebertscore_s_f1-174": 0.8028767704963684,
        "codebertscore_s_f3-174": 0.7953284382820129,
        "codebertscore_s_f1-140": 0.7791383862495422,
        "codebertscore_s_f3-140": 0.7717968225479126,
        "codebertscore_s_f1-22": 0.8190866112709045,
        "codebertscore_s_f3-22": 0.8321214318275452,
        "codebertscore_s_f1-152": 0.8049162030220032,
        "codebertscore_s_f3-152": 0.8159530162811279,
        "codebertscore_s_f1-109": 0.8103616833686829,
        "codebertscore_s_f3-109": 0.81447434425354,
        "codebertscore_s_f1-8": 0.6245759725570679,
        "codebertscore_s_f3-8": 0.6150503158569336,
        "codebertscore_s_f1-7": 0.7972965836524963,
        "codebertscore_s_f3-7": 0.806265115737915,
        "codebertscore_s_f1-23": 0.8381114602088928,
        "codebertscore_s_f3-23": 0.8228694200515747,
        "codebertscore_s_f1-56": 0.7607306838035583,
        "codebertscore_s_f3-56": 0.7678858041763306,
        "codebertscore_s_f1-60": 0.7915847301483154,
        "codebertscore_s_f3-60": 0.7899875640869141,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 0,
        "raw_gpt35_nsnr-63": "0",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-174": 0,
        "raw_gpt35_nsnr-174": "Score: 0",
        "gpt35_nsnr-140": 2,
        "raw_gpt35_nsnr-140": "2",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 1,
        "raw_gpt35_nsnr-60": "1",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 1,
        "raw_gpt35_nswr-174": "1",
        "gpt35_nswr-140": 1,
        "raw_gpt35_nswr-140": "1",
        "gpt35_nswr-22": 1,
        "raw_gpt35_nswr-22": "1",
        "gpt35_nswr-152": 2,
        "raw_gpt35_nswr-152": "2",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "0",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nstd::optional<long> next_smallest(std::vector<long> lst) {\n",
        "snippet": [
            "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n"
        ],
        "simplified": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
        "task_id": "90",
        "163": "long min1, min2;\n  min1 = min2 = std::numeric_limits<long>::max();\n  for (auto x : lst) {\n    if (x <= min1) {\n      min2 = min1;\n      min1 = x;\n    } else if (x < min2) {\n      min2 = x;\n    }\n  }\n  if (min2 == std::numeric_limits<long>::max()) {\n    return std::nullopt;\n  }\n  return min2;",
        "grade-163": {
            "execution": 0
        },
        "28": "if (lst.size() <= 1) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n    }\n    auto min = std::min_element(lst.begin(), lst.end());\n    int min_pos = std::distance(lst.begin(), min);\n    lst.erase(lst.begin() + min_pos);\n    auto temp = std::min_element(lst.begin(), lst.end());\n    return *temp;",
        "grade-28": {
            "execution": 0
        },
        "6": "// sort the list, remove duplicates and check if there is an item at index 1\n  std::sort(lst.begin(), lst.end());\n  lst.erase(std::unique(lst.begin(), lst.end()), lst.end());\n  if (lst.size() > 1) {\n    return lst[1];\n  }\n  return {};",
        "grade-6": {
            "execution": 0
        },
        "190": "if (lst.size() <= 1) {\n    return std::nullopt;\n  }\n  long first = LONG_MAX;\n  long second = LONG_MAX;\n  for (long num : lst) {\n    if (num < first) {\n      second = first;\n      first = num;\n    } else if (num < second && num != first) {\n      second = num;\n    }\n  }\n  if (second == LONG_MAX) {\n    return std::nullopt;\n  }\n  return second;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::sort(lst.begin(), lst.end());\n\tauto last = std::unique(lst.begin(), lst.end());\n\tif (last - lst.begin() > 1) {\n\t\treturn *(++lst.begin());\n\t}\n\treturn {};",
        "grade-70": {
            "execution": 0
        },
        "62": "std::optional<long> first, second;\n  for (auto n : lst) {\n    if (!first || n < *first) {\n      second = first;\n      first = n;\n    } else if (!second || n < *second) {\n      second = n;\n    }\n  }\n  return second;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::sort(lst.begin(), lst.end());\n\tint check = lst[0];\n\tfor (long i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] != check) {\n\t\t\treturn lst[i];\n\t\t}\n\t}\n\treturn {};",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(false);\n    return {};",
        "grade-35": {
            "execution": 0
        },
        "189": "if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
        "grade-189": {
            "execution": 0
        },
        "26": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0] != lst[1]) {\n            return std::make_optional(lst[1]);\n        } else {\n            return std::nullopt;\n        }\n    }\n    std::optional<long> min = std::nullopt;\n    std::optional<long> min2 = std::nullopt;\n    for (long i = 0; i < lst.size(); i++) {\n        if (min.has_value()) {\n            if (lst[i] < min.value()) {\n                min2 = min;\n                min = lst[i];\n            } else if (lst[i] < min2.value() && lst[i] != min.value()) {\n                min2 = lst[i];\n            }\n        } else {\n            min = lst[i];\n        }\n    }\n    return min2;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> v = lst;\n  std::sort(v.begin(), v.end());\n  std::set<long> s(v.begin(), v.end());\n  if (s.size() > 1)\n    return *(++s.begin());\n  else\n    return {};",
        "grade-174": {
            "execution": 0
        },
        "139": "",
        "grade-139": {
            "execution": 0
        },
        "22": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\n    std::sort(lst.begin(), lst.end());\n    if (lst[0] == lst[1]) {\n        return std::nullopt;\n    }\n\n    return lst[1];",
        "grade-22": {
            "execution": 0
        },
        "151": "auto len = lst.size();\n    if (len < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (auto i = 0; i < len; i++) {\n        if (lst[i] != lst[i + 1]) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
        "grade-151": {
            "execution": 0
        },
        "108": "// Write your code here\n  if(lst.size()<2) return {};\n  int small = lst[0];\n  int next_small = lst[1];\n  for(int i=1;i<lst.size();i++){\n    if(lst[i]<small){\n      next_small = small;\n      small = lst[i];\n    }\n    else if(lst[i]<next_small)\n      next_small = lst[i];\n  }\n  return small==next_small?std::optional<long>{}:std::optional<long>{next_small};",
        "grade-108": {
            "execution": 0
        },
        "8": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::vector<long> sorted = lst;\n    std::sort(sorted.begin(), sorted.end());\n    for (size_t i = 1; i < sorted.size(); i++) {\n        if (sorted[i] != sorted[i - 1]) {\n            return sorted[i];\n        }\n    }\n    return std::nullopt;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::sort(lst.begin(), lst.end());\n    auto first = lst.begin();\n    auto last = lst.end();\n    while (first != last) {\n        if ((first + 1) != last && *first == *(first + 1)) {\n            first = first + 2;\n        } else {\n            return std::optional<long>(*(first + 1));\n        }\n    }\n    return std::nullopt;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::optional<long> smallest;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] != lst[i + 1]) {\n            smallest = lst[i + 1];\n            break;\n        }\n    }\n    return smallest;",
        "grade-23": {
            "execution": 0
        },
        "55": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n    }\n    long min = std::numeric_limits<long>::max();\n    long second_min = std::numeric_limits<long>::max();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n        } else if (lst[i] < second_min && lst[i] != min) {\n            second_min = lst[i];\n        }\n    }\n    if (second_min == std::numeric_limits<long>::max()) {\n        return std::nullopt;\n    }\n    return second_min;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (lst.size() < 2) return std::nullopt;\n    long temp = lst[0];\n    std::optional<long> result = std::nullopt;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < temp) {\n            if (result == std::nullopt) {\n                result = temp;\n            } else if (lst[i] < *result) {\n                result = lst[i];\n            }\n        } else {\n            temp = lst[i];\n        }\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.06126604215610122,
        "bleu-28": 0.18872070876602945,
        "bleu-6": 0.26298479829232474,
        "bleu-190": 0.08937061800394014,
        "bleu-70": 0.278315687886826,
        "bleu-62": 0.042085367700476925,
        "bleu-57": 0.6294055695119575,
        "bleu-35": 0.000516268115388129,
        "bleu-189": 0.5930035153958806,
        "bleu-26": 0.16215462779292525,
        "bleu-174": 0.1775491229919922,
        "bleu-139": 0.0,
        "bleu-22": 0.4117910803340179,
        "bleu-151": 0.4530895632208567,
        "bleu-108": 0.2732791840224029,
        "bleu-8": 0.37465120781827393,
        "bleu-7": 0.19406129414789355,
        "bleu-23": 0.4376165301409198,
        "bleu-55": 0.17415394558327374,
        "bleu-59": 0.27926813722293614,
        "codebleu-163": 0.43155314757481933,
        "codebleu-28": 0.6440612128984332,
        "codebleu-6": 0.590746729708164,
        "codebleu-190": 0.4801995137913664,
        "codebleu-70": 0.5898317911830145,
        "codebleu-62": 0.35472136222910217,
        "codebleu-57": 0.7659071199441554,
        "codebleu-35": 0.05549201724361909,
        "codebleu-189": 0.8077032116084845,
        "codebleu-26": 0.6936499312678078,
        "codebleu-174": 0.5829058681488043,
        "codebleu-139": 0.0,
        "codebleu-22": 0.6392126805928301,
        "codebleu-151": 0.7620661630095139,
        "codebleu-108": 0.6651258903903343,
        "codebleu-8": 0.7791614389395016,
        "codebleu-7": 0.6209792310002739,
        "codebleu-23": 0.7774518146074261,
        "codebleu-55": 0.693542918019305,
        "codebleu-59": 0.6627450948691793,
        "chrf-163": 0.2070872721895764,
        "chrf-28": 0.39624609653418724,
        "chrf-6": 0.46732465473835805,
        "chrf-190": 0.24749675262274587,
        "chrf-70": 0.4248525359039531,
        "chrf-62": 0.1748847779494745,
        "chrf-57": 0.721406257049054,
        "chrf-35": 0.09089187474348917,
        "chrf-189": 0.761734166752006,
        "chrf-26": 0.3429600168474573,
        "chrf-174": 0.34708458043336504,
        "chrf-139": 0.0,
        "chrf-22": 0.5464612321128254,
        "chrf-151": 0.6503548867221991,
        "chrf-108": 0.4240671001593251,
        "chrf-8": 0.4916803875506586,
        "chrf-7": 0.37968019479288984,
        "chrf-23": 0.624597339931591,
        "chrf-55": 0.33521450996132884,
        "chrf-59": 0.44436729161664945,
        "rougel-163": 0.2533333333333333,
        "rougel-28": 0.31746031746031744,
        "rougel-6": 0.4489795918367347,
        "rougel-190": 0.2913907284768212,
        "rougel-70": 0.4806201550387597,
        "rougel-62": 0.2459016393442623,
        "rougel-57": 0.7751937984496124,
        "rougel-35": 0.14492753623188404,
        "rougel-189": 0.7777777777777778,
        "rougel-26": 0.3601532567049808,
        "rougel-174": 0.37681159420289856,
        "rougel-139": 0,
        "rougel-22": 0.5040650406504066,
        "rougel-151": 0.6577181208053691,
        "rougel-108": 0.4918032786885247,
        "rougel-8": 0.6369426751592356,
        "rougel-7": 0.4197530864197531,
        "rougel-23": 0.679245283018868,
        "rougel-55": 0.39344262295081966,
        "rougel-59": 0.5027932960893855,
        "meteor-163": 0.2142857142857143,
        "meteor-28": 0.3992027902341805,
        "meteor-6": 0.45020955952130043,
        "meteor-190": 0.31027835175653995,
        "meteor-70": 0.3587007446019769,
        "meteor-62": 0.23899925418672455,
        "meteor-57": 0.8607119108686506,
        "meteor-35": 0.07766646427848613,
        "meteor-189": 0.9101789702551475,
        "meteor-26": 0.5727565483800143,
        "meteor-174": 0.32899412192061295,
        "meteor-139": 0.0,
        "meteor-22": 0.6242818827672337,
        "meteor-151": 0.814787908406606,
        "meteor-108": 0.6312752684141477,
        "meteor-8": 0.8128587579841204,
        "meteor-7": 0.3193146417445483,
        "meteor-23": 0.8922435632018032,
        "meteor-55": 0.5498948722437152,
        "meteor-59": 0.6261423906644987,
        "ruby-163": 0.1444444444444445,
        "ruby-28": 0.2093023255813954,
        "ruby-6": 0.33333333333333337,
        "ruby-190": 0.20879120879120883,
        "ruby-70": 0.3623188405797102,
        "ruby-62": 0.09677419354838712,
        "ruby-57": 0.6376811594202898,
        "ruby-35": 0.08333333333333337,
        "ruby-189": 0.6547619047619048,
        "ruby-26": 0.23383084577114432,
        "ruby-174": 0.2692307692307693,
        "ruby-139": 0.0,
        "ruby-22": 0.3492063492063492,
        "ruby-151": 0.4943820224719101,
        "ruby-108": 0.36585365853658536,
        "ruby-8": 0.5051546391752577,
        "ruby-7": 0.32352941176470584,
        "ruby-23": 0.5252525252525253,
        "ruby-55": 0.26086956521739135,
        "ruby-59": 0.3697478991596639,
        "codebertscore_f1-163": 0.7152557969093323,
        "codebertscore_f3-163": 0.7389035820960999,
        "codebertscore_f1-28": 0.7701127529144287,
        "codebertscore_f3-28": 0.793959379196167,
        "codebertscore_f1-6": 0.8103417158126831,
        "codebertscore_f3-6": 0.825066328048706,
        "codebertscore_f1-190": 0.7304450273513794,
        "codebertscore_f3-190": 0.7590113878250122,
        "codebertscore_f1-70": 0.8388403654098511,
        "codebertscore_f3-70": 0.8322102427482605,
        "codebertscore_f1-62": 0.715986430644989,
        "codebertscore_f3-62": 0.734286367893219,
        "codebertscore_f1-57": 0.9169291257858276,
        "codebertscore_f3-57": 0.9171905517578125,
        "codebertscore_f1-35": 0.6154990792274475,
        "codebertscore_f3-35": 0.5778439044952393,
        "codebertscore_f1-189": 0.8951738476753235,
        "codebertscore_f3-189": 0.917133629322052,
        "codebertscore_f1-26": 0.720515787601471,
        "codebertscore_f3-26": 0.7803980708122253,
        "codebertscore_f1-174": 0.7817405462265015,
        "codebertscore_f3-174": 0.7963765263557434,
        "codebertscore_f1-139": 0.0,
        "codebertscore_f3-139": 0.0,
        "codebertscore_f1-22": 0.8219744563102722,
        "codebertscore_f3-22": 0.8215556740760803,
        "codebertscore_f1-151": 0.8534106016159058,
        "codebertscore_f3-151": 0.879391074180603,
        "codebertscore_f1-108": 0.7983614802360535,
        "codebertscore_f3-108": 0.8386955857276917,
        "codebertscore_f1-8": 0.8348104357719421,
        "codebertscore_f3-8": 0.8736976981163025,
        "codebertscore_f1-7": 0.7760477662086487,
        "codebertscore_f3-7": 0.808833658695221,
        "codebertscore_f1-23": 0.8327072858810425,
        "codebertscore_f3-23": 0.8647297024726868,
        "codebertscore_f1-55": 0.7236329317092896,
        "codebertscore_f3-55": 0.7854355573654175,
        "codebertscore_f1-59": 0.7775682806968689,
        "codebertscore_f3-59": 0.816403865814209,
        "codebertscore_s_f1-163": 0.7277972102165222,
        "codebertscore_s_f3-163": 0.7604244947433472,
        "codebertscore_s_f1-28": 0.7888774871826172,
        "codebertscore_s_f3-28": 0.8148637413978577,
        "codebertscore_s_f1-6": 0.8140106797218323,
        "codebertscore_s_f3-6": 0.8299681544303894,
        "codebertscore_s_f1-190": 0.7566351890563965,
        "codebertscore_s_f3-190": 0.7897307276725769,
        "codebertscore_s_f1-70": 0.8418557643890381,
        "codebertscore_s_f3-70": 0.833598792552948,
        "codebertscore_s_f1-62": 0.7363262176513672,
        "codebertscore_s_f3-62": 0.7578191757202148,
        "codebertscore_s_f1-57": 0.9194801449775696,
        "codebertscore_s_f3-57": 0.9205124974250793,
        "codebertscore_s_f1-35": 0.6080805659294128,
        "codebertscore_s_f3-35": 0.5604047775268555,
        "codebertscore_s_f1-189": 0.9076371192932129,
        "codebertscore_s_f3-189": 0.9289871454238892,
        "codebertscore_s_f1-26": 0.7542396783828735,
        "codebertscore_s_f3-26": 0.8128633499145508,
        "codebertscore_s_f1-174": 0.7892906069755554,
        "codebertscore_s_f3-174": 0.8000739216804504,
        "codebertscore_s_f1-139": 0,
        "codebertscore_s_f3-139": 0,
        "codebertscore_s_f1-22": 0.8348544836044312,
        "codebertscore_s_f3-22": 0.8342099189758301,
        "codebertscore_s_f1-151": 0.862156331539154,
        "codebertscore_s_f3-151": 0.8881837725639343,
        "codebertscore_s_f1-108": 0.8133525848388672,
        "codebertscore_s_f3-108": 0.85235595703125,
        "codebertscore_s_f1-8": 0.8518854975700378,
        "codebertscore_s_f3-8": 0.8931066989898682,
        "codebertscore_s_f1-7": 0.7936583161354065,
        "codebertscore_s_f3-7": 0.8290846943855286,
        "codebertscore_s_f1-23": 0.8544200658798218,
        "codebertscore_s_f3-23": 0.884632408618927,
        "codebertscore_s_f1-55": 0.7568121552467346,
        "codebertscore_s_f3-55": 0.8179595470428467,
        "codebertscore_s_f1-59": 0.7988067269325256,
        "codebertscore_s_f3-59": 0.8380417227745056,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "3 - The code snippet correctly handles the problem by using the assert statement to indicate that the function is not yet implemented. The function takes in a vector of long integers and returns an optional long integer, which is appropriate for the problem requirements. However, the implementation of the function is missing and needs to be completed to pass all possible tests.",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long x, long base) {\n",
        "snippet": [
            "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "task_id": "44",
        "165": "assert(base < 10);\n\tstd::string result;\n\tdo {\n\t\tlong r = x % base;\n\t\tresult += '0' + r;\n\t\tx /= base;\n\t} while (x);\n\tstd::reverse(result.begin(), result.end());\n\treturn result;",
        "grade-165": {
            "execution": 1
        },
        "28": "assert(base > 1 && base < 10);\n  std::string result;\n  while (x != 0) {\n    long remainder = x % base;\n    result.push_back('0' + remainder);\n    x /= base;\n  }\n  if (result.empty())\n    result.push_back('0');\n  std::reverse(result.begin(), result.end());\n  return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "191": "std::stringstream ss;\n    while (x) {\n        ss << x % base;\n        x /= base;\n    }\n    std::string s = ss.str();\n    std::reverse(s.begin(), s.end());\n    return s;",
        "grade-191": {
            "execution": 1
        },
        "71": "std::string result = \"\";\n    do {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    } while (x != 0);\n    return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "assert(base < 10);\n  std::string res;\n  do {\n    auto rem = x % base;\n    res += (char)('0' + rem);\n    x /= base;\n  } while (x);\n  reverse(res.begin(), res.end());\n  return res;",
        "grade-63": {
            "execution": 1
        },
        "58": "std::string str;\n    while (x > 0) {\n        char ch = x % base + '0';\n        str.push_back(ch);\n        x /= base;\n    }\n    reverse(str.begin(), str.end());\n    return str;",
        "grade-58": {
            "execution": 1
        },
        "35": "std::string str;\n    while (x > 0) {\n        str += std::to_string(x % base);\n        x /= base;\n    }\n    std::reverse(str.begin(), str.end());\n    return str;",
        "grade-35": {
            "execution": 1
        },
        "190": "// your code goes here\n    std::string s=\"\";\n    while(x!=0)\n    {\n        int a=x%base;\n        s+=('0'+a);\n        x/=base;\n    }\n    std::reverse(s.begin(),s.end());\n    return s;",
        "grade-190": {
            "execution": 1
        },
        "26": "std::string ans = \"\";\n  while (x > 0) {\n    ans = std::to_string(x % base) + ans;\n    x /= base;\n  }\n  return ans;",
        "grade-26": {
            "execution": 1
        },
        "175": "std::string res = \"\";\n    while (x > 0) {\n        res += ('0' + x % base);\n        x /= base;\n    }\n    std::reverse(res.begin(), res.end());\n    return res;",
        "grade-175": {
            "execution": 1
        },
        "141": "assert(0 < base && base < 10);\n\tstd::string answer;\n\twhile (x != 0) {\n\t\tanswer += (x % base) + '0';\n\t\tx /= base;\n\t}\n\treverse(answer.begin(), answer.end());\n\treturn answer;",
        "grade-141": {
            "execution": 1
        },
        "22": "long q = x, r;\n  std::string s = \"\";\n  do {\n    r = q % base;\n    q = q / base;\n    s += std::to_string(r);\n  } while (q != 0);\n  std::reverse(s.begin(), s.end());\n  return s;",
        "grade-22": {
            "execution": 1
        },
        "153": "if(x < base) {\n        return std::to_string(x);\n    }\n    return change_base(x / base, base) + std::to_string(x % base);",
        "grade-153": {
            "execution": 1
        },
        "109": "std::string ret;\n  while (x > 0) {\n    long mod = x % base;\n    char digit = '0' + mod;\n    ret = digit + ret;\n    x /= base;\n  }\n  return ret;",
        "grade-109": {
            "execution": 1
        },
        "8": "assert(base < 10);\n  std::vector<char> result;\n  do {\n    result.push_back('0' + x % base);\n    x /= base;\n  } while (x);\n  std::reverse(result.begin(), result.end());\n  return std::string(result.begin(), result.end());",
        "grade-8": {
            "execution": 1
        },
        "7": "if(base > 10) {\n        return \"\";\n    }\n    std::string ret = \"\";\n    while(x) {\n        auto rem = x % base;\n        x /= base;\n        ret += (rem + '0');\n    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (x == 0) {\n    return \"0\";\n  }\n  std::string s;\n  while (x > 0) {\n    s += std::to_string(x % base);\n    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return s;",
        "grade-23": {
            "execution": 1
        },
        "56": "std::string rep;\n    while (x) {\n        rep.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(rep.begin(), rep.end());\n    return rep;",
        "grade-56": {
            "execution": 1
        },
        "60": "std::string b;\n    for (; x; x /= base) {\n        long t = x % base;\n        b += t + '0';\n    }\n    reverse(b.begin(), b.end());\n    return b;",
        "grade-60": {
            "execution": 1
        },
        "bleu-165": 0.07295590089656481,
        "bleu-28": 0.0740197297278847,
        "bleu-6": 0.5033059328415197,
        "bleu-191": 0.09815577016627534,
        "bleu-71": 0.29432909534200324,
        "bleu-63": 0.06882052649579741,
        "bleu-58": 0.21092100791366605,
        "bleu-35": 0.26865142731992936,
        "bleu-190": 0.16046894541470827,
        "bleu-26": 0.5033059328415197,
        "bleu-175": 0.27634562320909983,
        "bleu-141": 0.1735193528552565,
        "bleu-22": 0.077883098995181,
        "bleu-153": 0.23443677523946913,
        "bleu-109": 0.2881596731146513,
        "bleu-8": 0.07137768516381826,
        "bleu-7": 0.1454609858437832,
        "bleu-23": 0.23039416427799164,
        "bleu-56": 0.14633182836822056,
        "bleu-60": 0.06688071957304445,
        "codebleu-165": 0.5274974403978353,
        "codebleu-28": 0.5478279947345326,
        "codebleu-6": 0.6671413342134639,
        "codebleu-191": 0.4481497732923797,
        "codebleu-71": 0.5962034082580524,
        "codebleu-63": 0.5274974403978353,
        "codebleu-58": 0.5841559936008093,
        "codebleu-35": 0.5637333965697352,
        "codebleu-190": 0.5352493783823313,
        "codebleu-26": 0.6671413342134639,
        "codebleu-175": 0.5999763652047772,
        "codebleu-141": 0.5471519153984001,
        "codebleu-22": 0.5604066110867338,
        "codebleu-153": 0.4720716335899336,
        "codebleu-109": 0.6020146999611545,
        "codebleu-8": 0.5487737284470704,
        "codebleu-7": 0.5894398127833844,
        "codebleu-23": 0.6161234884129495,
        "codebleu-56": 0.5120616501500229,
        "codebleu-60": 0.47038174637999114,
        "chrf-165": 0.30374883927426916,
        "chrf-28": 0.27149669415727606,
        "chrf-6": 0.6198472514658373,
        "chrf-191": 0.33587109822152145,
        "chrf-71": 0.5001990860377636,
        "chrf-63": 0.29558163835447177,
        "chrf-58": 0.3850570010898683,
        "chrf-35": 0.4786866803497037,
        "chrf-190": 0.35734076141726506,
        "chrf-26": 0.6058713066225965,
        "chrf-175": 0.40685270315433036,
        "chrf-141": 0.3420561970896231,
        "chrf-22": 0.36305025798874724,
        "chrf-153": 0.427746614045721,
        "chrf-109": 0.42687605459603456,
        "chrf-8": 0.2907545127214216,
        "chrf-7": 0.357425484154475,
        "chrf-23": 0.4851921936052909,
        "chrf-56": 0.32136715042413583,
        "chrf-60": 0.2878626591479768,
        "rougel-165": 0.326530612244898,
        "rougel-28": 0.34146341463414637,
        "rougel-6": 0.7567567567567569,
        "rougel-191": 0.3695652173913043,
        "rougel-71": 0.5714285714285715,
        "rougel-63": 0.34,
        "rougel-58": 0.488888888888889,
        "rougel-35": 0.5454545454545454,
        "rougel-190": 0.46601941747572817,
        "rougel-26": 0.7567567567567569,
        "rougel-175": 0.5714285714285714,
        "rougel-141": 0.46938775510204084,
        "rougel-22": 0.32075471698113206,
        "rougel-153": 0.36111111111111116,
        "rougel-109": 0.5822784810126581,
        "rougel-8": 0.2807017543859649,
        "rougel-7": 0.4150943396226415,
        "rougel-23": 0.5098039215686275,
        "rougel-56": 0.46511627906976744,
        "rougel-60": 0.36781609195402304,
        "meteor-165": 0.44420149011985743,
        "meteor-28": 0.42922728761400086,
        "meteor-6": 0.7625271233465675,
        "meteor-191": 0.36923487070114636,
        "meteor-71": 0.5051842165437603,
        "meteor-63": 0.4418635875402792,
        "meteor-58": 0.44008823638453265,
        "meteor-35": 0.46197662078723944,
        "meteor-190": 0.42515051556730316,
        "meteor-26": 0.7625271233465675,
        "meteor-175": 0.45258265031079814,
        "meteor-141": 0.47711842673577365,
        "meteor-22": 0.44043366955881896,
        "meteor-153": 0.31029652480483516,
        "meteor-109": 0.5334303044288046,
        "meteor-8": 0.4132808311225307,
        "meteor-7": 0.4612550374208405,
        "meteor-23": 0.5125278532941798,
        "meteor-56": 0.41711475409836063,
        "meteor-60": 0.3542234332425069,
        "ruby-165": 0.17460317460317465,
        "ruby-28": 0.17045454545454541,
        "ruby-6": 0.641025641025641,
        "ruby-191": 0.17543859649122806,
        "ruby-71": 0.3571428571428571,
        "ruby-63": 0.16923076923076918,
        "ruby-58": 0.3090909090909091,
        "ruby-35": 0.339622641509434,
        "ruby-190": 0.2941176470588235,
        "ruby-26": 0.641025641025641,
        "ruby-175": 0.3571428571428571,
        "ruby-141": 0.3015873015873016,
        "ruby-22": 0.15492957746478875,
        "ruby-153": 0.1351351351351351,
        "ruby-109": 0.43181818181818177,
        "ruby-8": 0.1392405063291139,
        "ruby-7": 0.21126760563380287,
        "ruby-23": 0.31343283582089554,
        "ruby-56": 0.27450980392156865,
        "ruby-60": 0.1923076923076923,
        "codebertscore_f1-165": 0.7981952428817749,
        "codebertscore_f3-165": 0.8279135823249817,
        "codebertscore_f1-28": 0.7958694100379944,
        "codebertscore_f3-28": 0.8447158932685852,
        "codebertscore_f1-6": 0.9122021198272705,
        "codebertscore_f3-6": 0.9213759303092957,
        "codebertscore_f1-191": 0.8162620663642883,
        "codebertscore_f3-191": 0.8370910882949829,
        "codebertscore_f1-71": 0.884570300579071,
        "codebertscore_f3-71": 0.8972629308700562,
        "codebertscore_f1-63": 0.7996814250946045,
        "codebertscore_f3-63": 0.8301549553871155,
        "codebertscore_f1-58": 0.8273358345031738,
        "codebertscore_f3-58": 0.8586423993110657,
        "codebertscore_f1-35": 0.8651821613311768,
        "codebertscore_f3-35": 0.8921144604682922,
        "codebertscore_f1-190": 0.809191107749939,
        "codebertscore_f3-190": 0.8596245646476746,
        "codebertscore_f1-26": 0.918149471282959,
        "codebertscore_f3-26": 0.9274081587791443,
        "codebertscore_f1-175": 0.8478487730026245,
        "codebertscore_f3-175": 0.8728983998298645,
        "codebertscore_f1-141": 0.8334188461303711,
        "codebertscore_f3-141": 0.8627417087554932,
        "codebertscore_f1-22": 0.8141589164733887,
        "codebertscore_f3-22": 0.8420888781547546,
        "codebertscore_f1-153": 0.8393774628639221,
        "codebertscore_f3-153": 0.8300456404685974,
        "codebertscore_f1-109": 0.861208438873291,
        "codebertscore_f3-109": 0.8836761713027954,
        "codebertscore_f1-8": 0.785834014415741,
        "codebertscore_f3-8": 0.8198928833007812,
        "codebertscore_f1-7": 0.7952548265457153,
        "codebertscore_f3-7": 0.82565838098526,
        "codebertscore_f1-23": 0.8521556854248047,
        "codebertscore_f3-23": 0.882786214351654,
        "codebertscore_f1-56": 0.8194872736930847,
        "codebertscore_f3-56": 0.8433445692062378,
        "codebertscore_f1-60": 0.8161474466323853,
        "codebertscore_f3-60": 0.8352457284927368,
        "codebertscore_s_f1-165": 0.8013546466827393,
        "codebertscore_s_f3-165": 0.8318440914154053,
        "codebertscore_s_f1-28": 0.7962576746940613,
        "codebertscore_s_f3-28": 0.8487728834152222,
        "codebertscore_s_f1-6": 0.9125145077705383,
        "codebertscore_s_f3-6": 0.9226317405700684,
        "codebertscore_s_f1-191": 0.8047736287117004,
        "codebertscore_s_f3-191": 0.8287325501441956,
        "codebertscore_s_f1-71": 0.8850144147872925,
        "codebertscore_s_f3-71": 0.8987140655517578,
        "codebertscore_s_f1-63": 0.8018648624420166,
        "codebertscore_s_f3-63": 0.8331100344657898,
        "codebertscore_s_f1-58": 0.8204398155212402,
        "codebertscore_s_f3-58": 0.8528728485107422,
        "codebertscore_s_f1-35": 0.859181821346283,
        "codebertscore_s_f3-35": 0.8897351026535034,
        "codebertscore_s_f1-190": 0.7998067140579224,
        "codebertscore_s_f3-190": 0.8521720767021179,
        "codebertscore_s_f1-26": 0.9170573949813843,
        "codebertscore_s_f3-26": 0.9279373288154602,
        "codebertscore_s_f1-175": 0.8443896770477295,
        "codebertscore_s_f3-175": 0.8713029026985168,
        "codebertscore_s_f1-141": 0.8361672759056091,
        "codebertscore_s_f3-141": 0.8676851987838745,
        "codebertscore_s_f1-22": 0.809762179851532,
        "codebertscore_s_f3-22": 0.8446856737136841,
        "codebertscore_s_f1-153": 0.8338891863822937,
        "codebertscore_s_f3-153": 0.8258057236671448,
        "codebertscore_s_f1-109": 0.857386589050293,
        "codebertscore_s_f3-109": 0.8794763684272766,
        "codebertscore_s_f1-8": 0.7795524597167969,
        "codebertscore_s_f3-8": 0.8179487586021423,
        "codebertscore_s_f1-7": 0.7924736738204956,
        "codebertscore_s_f3-7": 0.8224453330039978,
        "codebertscore_s_f1-23": 0.8512564301490784,
        "codebertscore_s_f3-23": 0.8844450116157532,
        "codebertscore_s_f1-56": 0.8111737370491028,
        "codebertscore_s_f3-56": 0.8372294306755066,
        "codebertscore_s_f1-60": 0.8052449226379395,
        "codebertscore_s_f3-60": 0.82582688331604,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n",
        "snippet": [
            "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n"
        ],
        "simplified": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "task_id": "91",
        "165": "std::stringstream ss(S);\n  std::string item;\n  long line_count = 0;\n  while (std::getline(ss, item, '.')) {\n    if (item.size() > 1 && item[0] == 'I') {\n      line_count++;\n    }\n  }\n  return line_count;",
        "grade-165": {
            "execution": 0
        },
        "28": "// type your solution here\n  long count=0;\n  for(int i=0;i<S.length();i++)\n  {\n    if(S[i]=='I')\n    {\n        count++;\n    }\n  }\n  return count;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::string> v;\n  int n = S.length();\n  std::string temp = \"\";\n  for (int i = 0; i < n; i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      v.push_back(temp);\n      temp = \"\";\n    } else {\n      temp += S[i];\n    }\n  }\n  long ans = 0;\n  for (auto s : v) {\n    if (s[0] == 'I') {\n      ans++;\n    }\n  }\n  return ans;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::regex reg_exp(\"I.+\");\n    std::smatch matches;\n    long count = 0;\n    while (std::regex_search(S, matches, reg_exp)) {\n        count++;\n        S = matches.suffix().str();\n    }\n    return count;",
        "grade-191": {
            "execution": 0
        },
        "70": "stringstream check1(S);\n    string intermediate;\n    long x=0;\n    while(getline(check1, intermediate, '.')) {\n        stringstream check2(intermediate);\n        string intermediate2;\n        getline(check2, intermediate2, ' ');\n        if(intermediate2==\"I\") x++;\n    }\n    return x;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n    std::string delimiter = \"?.!\";\n    size_t pos = 0;\n    std::string token;\n    int ans = 0;\n    while ((pos = S.find(delimiter)) != std::string::npos) {\n        token = S.substr(0, pos);\n        if (token.find(\" i \") != std::string::npos || token.find(\" i\\n\") != std::string::npos) {\n            ans++;\n        }\n        S.erase(0, pos + delimiter.length());\n    }\n    if (S.find(\" i \") != std::string::npos || S.find(\" i\\n\") != std::string::npos) {\n        ans++;\n    }\n    return ans;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string sep = \"!?.\";\n    int count = 0;\n    size_t start = 0;\n    size_t end = 0;\n    while ((end = S.find_first_of(sep, start)) != std::string::npos) {\n        std::string token = S.substr(start, end - start);\n        std::string first = token.substr(0,1);\n        //std::cout << \"Token:\" << token << \";\" << \" first:\" << first << std::endl;\n        if (first == \"I\")\n            count++;\n        start = end + 1;\n    }\n    return count;",
        "grade-57": {
            "execution": 0
        },
        "35": "// TODO: Implement this function\n    if(S.size() == 0)\n        return 0;\n    int isBored = 0;\n    int i = 0;\n    while(i < S.size()){\n        if(S[i] == 'I'){\n            i += 2;\n            if(S[i] == '\\0')\n                return 1;\n            while(S[i] != '.' && S[i] != '?' && S[i] != '!'){\n                i++;\n                if(S[i] == '\\0')\n                    return 1;\n            }\n            isBored++;\n        }\n        i++;\n    }\n    return isBored;",
        "grade-35": {
            "execution": 0
        },
        "190": "long ret = 0;\n  char prev = '0';\n  for (char& c : S) {\n    if (c == 'I' && prev == ' ') {\n      ret++;\n    }\n    prev = c;\n  }\n  return ret;",
        "grade-190": {
            "execution": 0
        },
        "26": "long long boredoms = 0;\n\tfor (int i = 0; i < S.length(); i++) {\n\t\tchar key = S[i];\n\t\tif (key == 'I') {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;",
        "grade-26": {
            "execution": 0
        },
        "175": "std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n    std::vector<std::string> v;\n    std::stringstream ss(S);\n    std::string temp;\n    long count=0;\n    while(getline(ss, temp, '.')) {\n        v.push_back(temp);\n    }\n    for(long i=0; i<v.size(); i++) {\n        std::vector<std::string> v1;\n        std::stringstream ss1(v[i]);\n        std::string temp1;\n        while(getline(ss1, temp1, ' ')) {\n            v1.push_back(temp1);\n        }\n        if(v1[0] == \"i\") {\n            count++;\n        }\n    }\n    return count;",
        "grade-175": {
            "execution": 0
        },
        "140": "int num = 0;\n  std::istringstream iss(S);\n  std::string word;\n  while (iss >> word) {\n    if (word == \"I\") {\n      num++;\n    }\n  }\n  return num;",
        "grade-140": {
            "execution": 0
        },
        "22": "long count=0;\n    string word=\"\";\n    for(int i=0;i<S.length();i++){\n        if(S[i]!='.' and S[i]!='!' and S[i]!='?'){\n            word+=S[i];\n        }\n        else{\n            stringstream ss(word);\n            string word1;\n            vector<string> words;\n            while(ss>>word1){\n                words.push_back(word1);\n            }\n            if(words[0]==\"I\"){\n                count++;\n            }\n            word=\"\";\n        }\n    }\n    return count;",
        "grade-22": {
            "execution": 0
        },
        "153": "// split by '.', '?', '!'\n    std::regex regex(\"[!.?]\");\n    std::sregex_token_iterator\n        first{S.begin(), S.end(), regex, -1},\n        last;\n    std::vector<std::string> splitted_string(first, last);\n    // count I\n    std::string str = \"I\";\n    long count = 0;\n    for (int i = 0; i < splitted_string.size(); i++) {\n        // std::cout << splitted_string[i] << '\\n';\n        if (splitted_string[i].find(str) == 0) {\n            count += 1;\n        }\n    }\n    return count;",
        "grade-153": {
            "execution": 0
        },
        "108": "std::stringstream stream(S);\n  std::string word;\n  long count = 0;\n  while (getline(stream, word, ' ')) {\n    if (word == \"I\") {\n      ++count;\n    }\n  }\n  return count;",
        "grade-108": {
            "execution": 0
        },
        "8": "// Your code here\n    long num = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            if(S[i-1] == 'I'){\n                num++;\n            }\n        }\n    }\n    return num;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string delimiters = \"!?.\";\n    std::vector<std::string> words;\n    std::string word;\n    std::istringstream stream(S);\n    while (std::getline(stream, word, delimiters[0])) {\n        if (std::getline(stream, word, delimiters[1])) {\n            words.push_back(word);\n        }\n        if (std::getline(stream, word, delimiters[2])) {\n            words.push_back(word);\n        }\n    }\n    long boredoms = 0;\n    for (auto word : words) {\n        if (word.find(\"I\") == 0) {\n            boredoms++;\n        }\n    }\n    return boredoms;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::istringstream iss(S);\n  std::string buffer;\n  std::vector<std::string> vec;\n  while (std::getline(iss, buffer, '.')) {\n    vec.push_back(buffer);\n  }\n  long res = 0;\n  std::stringstream ss;\n  for (auto &s : vec) {\n    ss << s;\n    ss >> buffer;\n    if (buffer == \"I\") {\n      res++;\n    }\n    ss.clear();\n  }\n  return res;",
        "grade-23": {
            "execution": 0
        },
        "55": "long ans = 0;\n    long index = 0;\n    while(index < S.length()){\n        if(S[index] == 'I'){\n            if(index == 0 || S[index-1] == '.' || S[index-1] == '?' || S[index-1] == '!'){\n                ans++;\n            }\n        }\n        index++;\n    }\n    return ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "int count = 0;\n    std::vector<std::string> words;\n    std::istringstream buf(S);\n    for(std::string word; buf >> word; )\n        words.push_back(word);\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i] == \"I\") {\n            count++;\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        },
        "bleu-165": 0.06637763359701823,
        "bleu-28": 0.12862928437167984,
        "bleu-6": 0.4555800585482941,
        "bleu-191": 0.02042283904495495,
        "bleu-70": 0.0493602824153594,
        "bleu-62": 0.07972603981655435,
        "bleu-57": 0.0901679500583432,
        "bleu-35": 0.4268145860939408,
        "bleu-190": 0.051462748778580585,
        "bleu-26": 0.11431674194336487,
        "bleu-175": 0.1504299646290778,
        "bleu-140": 0.028685659253310358,
        "bleu-22": 0.4309746877460604,
        "bleu-153": 0.2237431379169365,
        "bleu-108": 0.03774530445588931,
        "bleu-8": 0.3802906877197488,
        "bleu-7": 0.1082299407176102,
        "bleu-23": 0.08462135058970484,
        "bleu-55": 0.23757325781452124,
        "bleu-59": 0.18685308524783964,
        "codebleu-165": 0.22119569077057447,
        "codebleu-28": 0.23049875013330118,
        "codebleu-6": 0.5701749207949334,
        "codebleu-191": 0.19529878548962448,
        "codebleu-70": 0.232923985036707,
        "codebleu-62": 0.42688818830918773,
        "codebleu-57": 0.41123982629256267,
        "codebleu-35": 0.5414545398646168,
        "codebleu-190": 0.18261386120882425,
        "codebleu-26": 0.2266190674258682,
        "codebleu-175": 0.4585365360984028,
        "codebleu-140": 0.1470679930536297,
        "codebleu-22": 0.5957655481381435,
        "codebleu-153": 0.4851273604548908,
        "codebleu-108": 0.16937198202280607,
        "codebleu-8": 0.3723716361995446,
        "codebleu-7": 0.4099392723828625,
        "codebleu-23": 0.3354699741909678,
        "codebleu-55": 0.3326274988260809,
        "codebleu-59": 0.3481961157166511,
        "chrf-165": 0.15139326181582474,
        "chrf-28": 0.2508338285154886,
        "chrf-6": 0.35559113175427615,
        "chrf-191": 0.11401715311530199,
        "chrf-70": 0.1411515864639141,
        "chrf-62": 0.1905616696443287,
        "chrf-57": 0.19523653151661136,
        "chrf-35": 0.33076124625471776,
        "chrf-190": 0.11559001643452829,
        "chrf-26": 0.2239063176484622,
        "chrf-175": 0.19451794573901526,
        "chrf-140": 0.1238879646342558,
        "chrf-22": 0.3290764325976314,
        "chrf-153": 0.22471824942150062,
        "chrf-108": 0.1226896522513102,
        "chrf-8": 0.35136382762761637,
        "chrf-7": 0.1718227109175778,
        "chrf-23": 0.16486929514485568,
        "chrf-55": 0.2300420753068637,
        "chrf-59": 0.20552244042439236,
        "rougel-165": 0.26666666666666666,
        "rougel-28": 0.42051282051282046,
        "rougel-6": 0.47349823321554774,
        "rougel-191": 0.2189054726368159,
        "rougel-70": 0.30097087378640774,
        "rougel-62": 0.28985507246376807,
        "rougel-57": 0.28771929824561404,
        "rougel-35": 0.5724137931034483,
        "rougel-190": 0.31088082901554404,
        "rougel-26": 0.4307692307692308,
        "rougel-175": 0.3280757097791798,
        "rougel-140": 0.26455026455026454,
        "rougel-22": 0.5144927536231884,
        "rougel-153": 0.3076923076923077,
        "rougel-108": 0.25773195876288657,
        "rougel-8": 0.560344827586207,
        "rougel-7": 0.2975778546712803,
        "rougel-23": 0.26506024096385544,
        "rougel-55": 0.49789029535864976,
        "rougel-59": 0.3376623376623377,
        "meteor-165": 0.18334890521014077,
        "meteor-28": 0.19869806174410662,
        "meteor-6": 0.49963907281817294,
        "meteor-191": 0.11967090501121913,
        "meteor-70": 0.19433347932717415,
        "meteor-62": 0.24983119513841998,
        "meteor-57": 0.2775360297148853,
        "meteor-35": 0.5009266583733842,
        "meteor-190": 0.1959367945823928,
        "meteor-26": 0.20639424778486315,
        "meteor-175": 0.307251194878988,
        "meteor-140": 0.14388679245283018,
        "meteor-22": 0.4907489376770538,
        "meteor-153": 0.3471171313572815,
        "meteor-108": 0.147207248089005,
        "meteor-8": 0.36143859649122806,
        "meteor-7": 0.244086432151327,
        "meteor-23": 0.2194384938986186,
        "meteor-55": 0.4169329785810901,
        "meteor-59": 0.24370667696553788,
        "ruby-165": 0.16901408450704225,
        "ruby-28": 0.28873239436619713,
        "ruby-6": 0.2816901408450704,
        "ruby-191": 0.147887323943662,
        "ruby-70": 0.21126760563380287,
        "ruby-62": 0.16748768472906406,
        "ruby-57": 0.11888111888111885,
        "ruby-35": 0.3513513513513513,
        "ruby-190": 0.204225352112676,
        "ruby-26": 0.28873239436619713,
        "ruby-175": 0.17142857142857137,
        "ruby-140": 0.1619718309859155,
        "ruby-22": 0.3661971830985915,
        "ruby-153": 0.15923566878980888,
        "ruby-108": 0.16901408450704225,
        "ruby-8": 0.4295774647887324,
        "ruby-7": 0.11564625850340138,
        "ruby-23": 0.15492957746478875,
        "ruby-55": 0.31690140845070425,
        "ruby-59": 0.204225352112676,
        "codebertscore_f1-165": 0.7198885083198547,
        "codebertscore_f3-165": 0.7123998403549194,
        "codebertscore_f1-28": 0.7917554974555969,
        "codebertscore_f3-28": 0.7593122720718384,
        "codebertscore_f1-6": 0.8060757517814636,
        "codebertscore_f3-6": 0.7967743277549744,
        "codebertscore_f1-191": 0.6856766939163208,
        "codebertscore_f3-191": 0.6831167340278625,
        "codebertscore_f1-70": 0.693816602230072,
        "codebertscore_f3-70": 0.6926916837692261,
        "codebertscore_f1-62": 0.7228301167488098,
        "codebertscore_f3-62": 0.7417812347412109,
        "codebertscore_f1-57": 0.7216666340827942,
        "codebertscore_f3-57": 0.7339895963668823,
        "codebertscore_f1-35": 0.7863474488258362,
        "codebertscore_f3-35": 0.7882174849510193,
        "codebertscore_f1-190": 0.7392581105232239,
        "codebertscore_f3-190": 0.7115724682807922,
        "codebertscore_f1-26": 0.7774617075920105,
        "codebertscore_f3-26": 0.7489566206932068,
        "codebertscore_f1-175": 0.7132490873336792,
        "codebertscore_f3-175": 0.7335617542266846,
        "codebertscore_f1-140": 0.720008373260498,
        "codebertscore_f3-140": 0.6989470720291138,
        "codebertscore_f1-22": 0.7893098592758179,
        "codebertscore_f3-22": 0.7868056893348694,
        "codebertscore_f1-153": 0.7287302613258362,
        "codebertscore_f3-153": 0.7502745389938354,
        "codebertscore_f1-108": 0.7126188278198242,
        "codebertscore_f3-108": 0.6943020820617676,
        "codebertscore_f1-8": 0.8204997181892395,
        "codebertscore_f3-8": 0.7908129692077637,
        "codebertscore_f1-7": 0.6804990172386169,
        "codebertscore_f3-7": 0.6911569237709045,
        "codebertscore_f1-23": 0.7039093375205994,
        "codebertscore_f3-23": 0.7085455656051636,
        "codebertscore_f1-55": 0.7792012691497803,
        "codebertscore_f3-55": 0.7572044730186462,
        "codebertscore_f1-59": 0.7605271339416504,
        "codebertscore_f3-59": 0.7542474865913391,
        "codebertscore_s_f1-165": 0.7259907126426697,
        "codebertscore_s_f3-165": 0.7171292901039124,
        "codebertscore_s_f1-28": 0.7995127439498901,
        "codebertscore_s_f3-28": 0.7664008140563965,
        "codebertscore_s_f1-6": 0.8122987747192383,
        "codebertscore_s_f3-6": 0.8023073673248291,
        "codebertscore_s_f1-191": 0.6892871856689453,
        "codebertscore_s_f3-191": 0.687147855758667,
        "codebertscore_s_f1-70": 0.6974557042121887,
        "codebertscore_s_f3-70": 0.6968380212783813,
        "codebertscore_s_f1-62": 0.7250943183898926,
        "codebertscore_s_f3-62": 0.7445579171180725,
        "codebertscore_s_f1-57": 0.7255017161369324,
        "codebertscore_s_f3-57": 0.7393240928649902,
        "codebertscore_s_f1-35": 0.7904790639877319,
        "codebertscore_s_f3-35": 0.7914402484893799,
        "codebertscore_s_f1-190": 0.7487440705299377,
        "codebertscore_s_f3-190": 0.7196067571640015,
        "codebertscore_s_f1-26": 0.772489607334137,
        "codebertscore_s_f3-26": 0.7450527548789978,
        "codebertscore_s_f1-175": 0.7155554890632629,
        "codebertscore_s_f3-175": 0.7359880805015564,
        "codebertscore_s_f1-140": 0.7280835509300232,
        "codebertscore_s_f3-140": 0.706673264503479,
        "codebertscore_s_f1-22": 0.7932599186897278,
        "codebertscore_s_f3-22": 0.7903609275817871,
        "codebertscore_s_f1-153": 0.7342912554740906,
        "codebertscore_s_f3-153": 0.7566342949867249,
        "codebertscore_s_f1-108": 0.7149550318717957,
        "codebertscore_s_f3-108": 0.6958819031715393,
        "codebertscore_s_f1-8": 0.8257011771202087,
        "codebertscore_s_f3-8": 0.7973702549934387,
        "codebertscore_s_f1-7": 0.6860466599464417,
        "codebertscore_s_f3-7": 0.6975233554840088,
        "codebertscore_s_f1-23": 0.7114309072494507,
        "codebertscore_s_f3-23": 0.7141092419624329,
        "codebertscore_s_f1-55": 0.7859252691268921,
        "codebertscore_s_f3-55": 0.7629367709159851,
        "codebertscore_s_f1-59": 0.7689878940582275,
        "codebertscore_s_f3-59": 0.7602694630622864,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nstd::vector<long> count_up_to(long n) {\n",
        "snippet": [
            "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n"
        ],
        "simplified": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
        "task_id": "96",
        "163": "std::vector<long> res;\n\tif (n < 2) {\n\t\treturn res;\n\t}\n\tfor (long i = 2; i < n; i++) {\n\t\tbool isPrime = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tres.push_back(i);\n\t\t}\n\t}\n\treturn res;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::vector<long> v;\n    if(n < 2) return v;\n    v.push_back(2);\n    for(long i = 3; i < n; i += 2) {\n        bool prime = true;\n        for(long j = 2; j * j <= i; j++) {\n            if(i % j == 0) {\n                prime = false;\n                break;\n            }\n        }\n        if(prime) v.push_back(i);\n    }\n    return v;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> primes;\n  for (int i = 2; i < n; i++) {\n    for (int j = 2; j <= i; j++) {\n      if (i == j) {\n        primes.push_back(i);\n      }\n      if (i % j == 0) {\n        break;\n      }\n    }\n  }\n  return primes;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::vector<long> ans;\n   if(n<2) return ans;\n   ans.push_back(2);\n   for(long i=3;i<n;i+=2){\n      bool isPrime = true;\n      for(int j=0;j<ans.size();j++){\n         if(i%ans[j]==0){\n            isPrime = false;\n            break;\n         }\n      }\n      if(isPrime) ans.push_back(i);\n   }\n   return ans;",
        "grade-190": {
            "execution": 1
        },
        "70": "std::vector<long> out;\n\tfor (long i = 2; i < n; i++) {\n\t\tbool add = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tadd = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (add) out.push_back(i);\n\t}\n\treturn out;",
        "grade-70": {
            "execution": 1
        },
        "62": "int max = std::sqrt(n);\n    std::vector<long> prime;\n    prime.push_back(2);\n    for (int i = 3; i <= n; i += 2) {\n        bool isPrime = true;\n        for (int j = 0; j < prime.size() && prime[j] <= max; j++) {\n            if (i % prime[j] == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            prime.push_back(i);\n        }\n    }\n    return prime;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> primes;\n    for (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime)\n            primes.push_back(i);\n    }\n    return primes;",
        "grade-57": {
            "execution": 1
        },
        "35": "// your code here...\n    std::vector<long> answer;\n    if(n == 0)\n    {\n        return answer;\n    }\n    else if(n == 1)\n    {\n        return answer;\n    }\n    else if(n == 2)\n    {\n        answer.push_back(2);\n        return answer;\n    }\n    else\n    {\n        long k = 2;\n        while(k < n)\n        {\n            bool prime = true;\n            for(long i = 2; i < k; i++)\n            {\n                if(k % i == 0)\n                {\n                    prime = false;\n                    break;\n                }\n            }\n            if(prime)\n            {\n                answer.push_back(k);\n            }\n            k++;\n        }\n        return answer;\n    }",
        "grade-35": {
            "execution": 1
        },
        "189": "// Write your code here\n    std::vector<long> ret;\n    long prime = 2;\n    while(prime < n){\n        ret.push_back(prime);\n        prime = nextPrime(prime);\n    }\n    return ret;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::vector<long> primes;\n\tfor (long i = 2; i < n; i++) {\n\t\tbool prime = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tprime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (prime) {\n\t\t\tprimes.push_back(i);\n\t\t}\n\t}\n\treturn primes;",
        "grade-26": {
            "execution": 1
        },
        "173": "std::vector<long> primes;\n  if (n<2) {\n    return primes;\n  }\n  primes.push_back(2);\n  long i = 3;\n  while (i<n) {\n    if (std::all_of(primes.begin(), primes.end(), [i](long n){return i%n!=0;})) {\n      primes.push_back(i);\n    }\n    i+=2;\n  }\n  return primes;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> v;\n    long start = 2;\n    while(start <= n) {\n        long curr = start;\n        long i = 2;\n        while(i < curr) {\n            if(curr % i == 0) {\n                break;\n            }\n            i++;\n        }\n        if(i == curr) {\n            v.push_back(curr);\n        }\n        start++;\n    }\n    return v;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> res;\n    if(n <= 1) return res;\n    res.push_back(2);\n    for(long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for(long j = 3; j <= std::sqrt(i); j += 2) {\n            if(i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime) res.push_back(i);\n    }\n    return res;",
        "grade-22": {
            "execution": 1
        },
        "151": "std::vector<long> primes;\n    if (n <= 1) {\n        return primes;\n    }\n    std::vector<bool> notPrime(n + 1, false);\n    //for a number i, if the number is not Prime, i*i will not be Prime either\n    //e.g. if 4 is not prime, neither 8,12,16...will be. So we only need to test upto sqrt(n)\n    for (long i = 2; i <= std::sqrt(n); i++) {\n        //if i is Prime\n        if (!notPrime[i]) {\n            for (long j = i * i; j <= n; j += i) {\n                notPrime[j] = true;\n            }\n        }\n    }\n    for (long i = 2; i <= n; i++) {\n        if (!notPrime[i]) {\n            primes.push_back(i);\n        }\n    }\n    return primes;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> res;\n\tif (n <= 1) return res;\n\tlong i = 2;\n\tlong s = 0;\n\tlong e = sqrt(n);\n\twhile (i <= e) {\n\t\tfor (int j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\ts = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (s == 0) {\n\t\t\tres.push_back(i);\n\t\t}\n\t\ti++;\n\t\ts = 0;\n\t}\n\treturn res;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> result;\n    std::vector<bool> is_prime;\n    is_prime.resize(n + 1, true);\n    is_prime[0] = false;\n    is_prime[1] = false;\n    long next_prime = 2;\n    while (next_prime <= n) {\n        result.push_back(next_prime);\n        // When finding the next prime, we can start from next_prime * next_prime because:\n        // 1. if we have a k * next_prime, where k < next_prime, this value would have been set\n        // when k is the next_prime;\n        // 2. next_prime * next_prime is the smallest value that is multiple of next_prime that\n        // hasn't been visited\n        for (long i = next_prime * next_prime; i <= n; i += next_prime) {\n            is_prime[i] = false;\n        }\n        // The next prime must be the smallest number that is prime and greater than next_prime.\n        for (long i = next_prime + 1; i <= n; i++) {\n            if (is_prime[i]) {\n                next_prime = i;\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> results;\n    if (n <= 1) {\n        return results;\n    }\n    results.push_back(2);\n    for (long i = 3; i < n; i+=2) {\n        bool isPrime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            results.push_back(i);\n        }\n    }\n    return results;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> result;\n    int count = 0;\n    for (int i = 2; i < n; i++) {\n        bool flag = true;\n        for (int j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            result.push_back(i);\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long> a;\n  if(n<2)\n      return a;\n  a.push_back(2);\n  for(long i=3;i<n;i++)\n  {\n      bool prime=true;\n      for(long j=0;j<a.size();j++)\n      {\n          if(i%a[j]==0)\n          {\n              prime=false;\n              break;\n          }\n      }\n      if(prime)\n      {\n          a.push_back(i);\n      }\n  }\n  return a;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> res;\n    if(n < 2)\n        return res;\n    res.push_back(2);\n    int upper = sqrt(n);\n    std::vector<bool> is_prime(n+1, true);\n    for(int i = 3; i <= upper; i+=2) {\n        if(is_prime[i]) {\n            for(int j = i*i; j <= n; j+=i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n    for(int i = 3; i <= n; i+=2) {\n        if(is_prime[i])\n            res.push_back(i);\n    }\n    return res;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.33992146512554583,
        "bleu-28": 0.34853903104276823,
        "bleu-6": 0.3066518877020631,
        "bleu-190": 0.37973159914721566,
        "bleu-70": 0.3592317775375761,
        "bleu-62": 0.3469406028628552,
        "bleu-57": 0.3494535456862323,
        "bleu-35": 0.22124391779499472,
        "bleu-189": 0.031875522269020046,
        "bleu-26": 0.3188563703979405,
        "bleu-173": 0.15122784520348515,
        "bleu-139": 0.1295000327506959,
        "bleu-22": 0.3141204877785232,
        "bleu-151": 0.14874219605753003,
        "bleu-108": 0.2766672227839776,
        "bleu-8": 0.07177235388854186,
        "bleu-7": 0.32631058801160945,
        "bleu-23": 0.3425584394599656,
        "bleu-55": 0.3886542179595611,
        "bleu-59": 0.1845368372974302,
        "codebleu-163": 0.5638432879578811,
        "codebleu-28": 0.5914899583668496,
        "codebleu-6": 0.46376215411587673,
        "codebleu-190": 0.6450178344029738,
        "codebleu-70": 0.5007649429674237,
        "codebleu-62": 0.6687145288331415,
        "codebleu-57": 0.5108789455402055,
        "codebleu-35": 0.6032571794210877,
        "codebleu-189": 0.2236997530497711,
        "codebleu-26": 0.5074909152754399,
        "codebleu-173": 0.49808064800955787,
        "codebleu-139": 0.4398671171722645,
        "codebleu-22": 0.5814891964932518,
        "codebleu-151": 0.6601506335606507,
        "codebleu-108": 0.5808726440502444,
        "codebleu-8": 0.6048760660379209,
        "codebleu-7": 0.580430005699789,
        "codebleu-23": 0.552579521354696,
        "codebleu-55": 0.6613611073761142,
        "codebleu-59": 0.6244803916381001,
        "chrf-163": 0.38148844841672364,
        "chrf-28": 0.4087858768524957,
        "chrf-6": 0.33638769156369075,
        "chrf-190": 0.448463289123647,
        "chrf-70": 0.41838985580938437,
        "chrf-62": 0.4341684684954258,
        "chrf-57": 0.4013496304267266,
        "chrf-35": 0.3486305238586972,
        "chrf-189": 0.18036331434169078,
        "chrf-26": 0.3639526157122668,
        "chrf-173": 0.27631245915893965,
        "chrf-139": 0.2298041535151115,
        "chrf-22": 0.4044644043899156,
        "chrf-151": 0.2830080242671353,
        "chrf-108": 0.2943455755966033,
        "chrf-8": 0.22417000691450417,
        "chrf-7": 0.4146543943548803,
        "chrf-23": 0.3927315709477466,
        "chrf-55": 0.4298060204495531,
        "chrf-59": 0.3660386194463914,
        "rougel-163": 0.5951219512195123,
        "rougel-28": 0.6028708133971292,
        "rougel-6": 0.5161290322580645,
        "rougel-190": 0.5740740740740741,
        "rougel-70": 0.6666666666666667,
        "rougel-62": 0.5739130434782609,
        "rougel-57": 0.6461538461538462,
        "rougel-35": 0.4696356275303643,
        "rougel-189": 0.2948717948717948,
        "rougel-26": 0.6282722513089005,
        "rougel-173": 0.3804878048780488,
        "rougel-139": 0.4083769633507853,
        "rougel-22": 0.5674418604651164,
        "rougel-151": 0.37579617834394907,
        "rougel-108": 0.4792626728110599,
        "rougel-8": 0.27878787878787875,
        "rougel-7": 0.5794392523364486,
        "rougel-23": 0.6331658291457287,
        "rougel-55": 0.5794392523364486,
        "rougel-59": 0.43824701195219123,
        "meteor-163": 0.5345161290322581,
        "meteor-28": 0.5985249116702149,
        "meteor-6": 0.43998853450072956,
        "meteor-190": 0.5908473996350364,
        "meteor-70": 0.5611670189453649,
        "meteor-62": 0.6676676676676677,
        "meteor-57": 0.5580349239559025,
        "meteor-35": 0.5372312380920455,
        "meteor-189": 0.1424415486915487,
        "meteor-26": 0.5310350341544638,
        "meteor-173": 0.33285859185071154,
        "meteor-139": 0.36316137206909027,
        "meteor-22": 0.5419732571998115,
        "meteor-151": 0.4558657780026216,
        "meteor-108": 0.46019649412610136,
        "meteor-8": 0.34282089359504136,
        "meteor-7": 0.5824576193055977,
        "meteor-23": 0.5802769482488358,
        "meteor-55": 0.6058500914076782,
        "meteor-59": 0.49482704042091025,
        "ruby-163": 0.3727272727272727,
        "ruby-28": 0.40909090909090906,
        "ruby-6": 0.31818181818181823,
        "ruby-190": 0.36363636363636365,
        "ruby-70": 0.4727272727272728,
        "ruby-62": 0.4,
        "ruby-57": 0.44545454545454544,
        "ruby-35": 0.33576642335766427,
        "ruby-189": 0.1636363636363637,
        "ruby-26": 0.42727272727272725,
        "ruby-173": 0.19090909090909092,
        "ruby-139": 0.2272727272727273,
        "ruby-22": 0.3363636363636363,
        "ruby-151": 0.22058823529411764,
        "ruby-108": 0.2272727272727273,
        "ruby-8": 0.15909090909090906,
        "ruby-7": 0.32727272727272727,
        "ruby-23": 0.4363636363636364,
        "ruby-55": 0.3727272727272727,
        "ruby-59": 0.2695035460992907,
        "codebertscore_f1-163": 0.8479471206665039,
        "codebertscore_f3-163": 0.8394862413406372,
        "codebertscore_f1-28": 0.8520742058753967,
        "codebertscore_f3-28": 0.8461251258850098,
        "codebertscore_f1-6": 0.8200540542602539,
        "codebertscore_f3-6": 0.797905445098877,
        "codebertscore_f1-190": 0.8690103888511658,
        "codebertscore_f3-190": 0.8703552484512329,
        "codebertscore_f1-70": 0.8491854071617126,
        "codebertscore_f3-70": 0.8395010232925415,
        "codebertscore_f1-62": 0.8564274907112122,
        "codebertscore_f3-62": 0.8685111403465271,
        "codebertscore_f1-57": 0.8459307551383972,
        "codebertscore_f3-57": 0.8412339687347412,
        "codebertscore_f1-35": 0.7746594548225403,
        "codebertscore_f3-35": 0.7742043137550354,
        "codebertscore_f1-189": 0.7141323089599609,
        "codebertscore_f3-189": 0.702202320098877,
        "codebertscore_f1-26": 0.8249197602272034,
        "codebertscore_f3-26": 0.8158775568008423,
        "codebertscore_f1-173": 0.7746990323066711,
        "codebertscore_f3-173": 0.7696077227592468,
        "codebertscore_f1-139": 0.7814183235168457,
        "codebertscore_f3-139": 0.7753427624702454,
        "codebertscore_f1-22": 0.8402184844017029,
        "codebertscore_f3-22": 0.843491792678833,
        "codebertscore_f1-151": 0.7461854219436646,
        "codebertscore_f3-151": 0.7765020132064819,
        "codebertscore_f1-108": 0.8124350309371948,
        "codebertscore_f3-108": 0.8148036003112793,
        "codebertscore_f1-8": 0.697295069694519,
        "codebertscore_f3-8": 0.7457208633422852,
        "codebertscore_f1-7": 0.859548032283783,
        "codebertscore_f3-7": 0.8553709983825684,
        "codebertscore_f1-23": 0.8540298938751221,
        "codebertscore_f3-23": 0.846103847026825,
        "codebertscore_f1-55": 0.8623169660568237,
        "codebertscore_f3-55": 0.8581641912460327,
        "codebertscore_f1-59": 0.81492018699646,
        "codebertscore_f3-59": 0.8183327913284302,
        "codebertscore_s_f1-163": 0.8501649498939514,
        "codebertscore_s_f3-163": 0.843723714351654,
        "codebertscore_s_f1-28": 0.8525782227516174,
        "codebertscore_s_f3-28": 0.8463563323020935,
        "codebertscore_s_f1-6": 0.822262167930603,
        "codebertscore_s_f3-6": 0.8006218075752258,
        "codebertscore_s_f1-190": 0.8693955540657043,
        "codebertscore_s_f3-190": 0.8710684776306152,
        "codebertscore_s_f1-70": 0.8570412397384644,
        "codebertscore_s_f3-70": 0.8473865389823914,
        "codebertscore_s_f1-62": 0.8554100394248962,
        "codebertscore_s_f3-62": 0.8677763342857361,
        "codebertscore_s_f1-57": 0.8423245549201965,
        "codebertscore_s_f3-57": 0.8411746025085449,
        "codebertscore_s_f1-35": 0.8086328506469727,
        "codebertscore_s_f3-35": 0.811996579170227,
        "codebertscore_s_f1-189": 0.7197960615158081,
        "codebertscore_s_f3-189": 0.7044300436973572,
        "codebertscore_s_f1-26": 0.8274388909339905,
        "codebertscore_s_f3-26": 0.8185346722602844,
        "codebertscore_s_f1-173": 0.7723731398582458,
        "codebertscore_s_f3-173": 0.7676467299461365,
        "codebertscore_s_f1-139": 0.7799686789512634,
        "codebertscore_s_f3-139": 0.7751957178115845,
        "codebertscore_s_f1-22": 0.8352429270744324,
        "codebertscore_s_f3-22": 0.8389241695404053,
        "codebertscore_s_f1-151": 0.7576818466186523,
        "codebertscore_s_f3-151": 0.7882959246635437,
        "codebertscore_s_f1-108": 0.814251720905304,
        "codebertscore_s_f3-108": 0.8176232576370239,
        "codebertscore_s_f1-8": 0.7273443341255188,
        "codebertscore_s_f3-8": 0.7810282111167908,
        "codebertscore_s_f1-7": 0.8578415513038635,
        "codebertscore_s_f3-7": 0.8542746901512146,
        "codebertscore_s_f1-23": 0.8561641573905945,
        "codebertscore_s_f3-23": 0.849571943283081,
        "codebertscore_s_f1-55": 0.8592948913574219,
        "codebertscore_s_f3-55": 0.8565050363540649,
        "codebertscore_s_f1-59": 0.8183917999267578,
        "codebertscore_s_f3-59": 0.8199127912521362,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 0,
        "raw_gpt35_nsnr-189": "3 - The code snippet correctly generates an array of the first n prime numbers less than n. However, the function nextPrime() is not defined in the code snippet and needs to be implemented for the code to work correctly.",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long> incr_list(std::vector<long> l) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n"
        ],
        "simplified": "Return list with elements incremented by 1.",
        "task_id": "42",
        "32": "int n = l.size();\n  for(int i = 0; i < n; i++) {\n    l[i] += 1;\n  }\n  return l;",
        "grade-32": {
            "execution": 1
        },
        "6": "int i = 0;\n    while(i < l.size()){\n        l[i] = l[i] + 1;\n        i++;\n    }\n    return l;",
        "grade-6": {
            "execution": 1
        },
        "79": "// WRITE YOUR CODE HERE\n    std::vector<long> new_l;\n    for(int i=0;i<l.size();i++){\n        new_l.push_back(l[i]+1);\n    }\n    return new_l;",
        "grade-79": {
            "execution": 1
        },
        "68": "/*if (l.size()==0) {\n        return l;\n    }\n    std::vector<long> m = incr_list(std::vector<long>(l.begin()+1, l.end()));\n    std::vector<long> n(l.size());\n    n[0] = l[0] + 1;\n    for (int i = 1; i < l.size(); i++) {\n        n[i] = m[i-1];\n    }\n    return n;*/\n    std::vector<long> v = l;\n    for (int i = 0; i < v.size(); i++) {\n        v[i]++;\n    }\n    return v;",
        "grade-68": {
            "execution": 1
        },
        "63": "std::vector<long> newList;\n    for(auto i = l.begin(); i != l.end(); i++){\n        newList.push_back(*i + 1);\n    }\n    return newList;",
        "grade-63": {
            "execution": 1
        },
        "39": "// Your code here\n    int n = l.size();\n    std::vector<long> res;\n    for(int i=0;i<n;i++){\n        res.push_back(l[i]+1);\n    }\n    return res;",
        "grade-39": {
            "execution": 1
        },
        "30": "std::vector<long> inc_list;\n    for(auto& i : l)\n        inc_list.push_back(i+1);\n    return inc_list;",
        "grade-30": {
            "execution": 1
        },
        "174": "std::vector<long> tmp;\n    long size = l.size();\n    for(int i = 0; i < size; i++) {\n        tmp.push_back(l[i] + 1);\n    }\n    return tmp;",
        "grade-174": {
            "execution": 1
        },
        "26": "std::vector<long>::iterator it;\n  for(it = l.begin(); it != l.end(); it++)\n  {\n      (*it)++;\n  }\n  return l;",
        "grade-26": {
            "execution": 1
        },
        "188": "std::vector<long> m;\n\tstd::vector<long>::iterator it;\n\tfor (it = l.begin(); it != l.end(); it++) {\n\t\tm.push_back((*it) + 1);\n\t}\n\treturn m;",
        "grade-188": {
            "execution": 1
        },
        "132": "std::vector<long> ret_list;\n  for(int i=0;i<l.size();i++){\n    ret_list.push_back(l[i]+1);\n  }\n  return ret_list;",
        "grade-132": {
            "execution": 1
        },
        "9": "std::vector<long> ret;\n    for (int i = 0; i < l.size(); i++) {\n        ret.push_back(l[i] + 1);\n    }\n    return ret;",
        "grade-9": {
            "execution": 1
        },
        "8": "std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        res.push_back(l[i]+1);\n    }\n    return res;",
        "grade-8": {
            "execution": 1
        },
        "27": "std::vector<long> l1;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tl1.push_back(l[i] + 1);\n\t}\n\treturn l1;",
        "grade-27": {
            "execution": 1
        },
        "60": "std::vector<long> newList;\n    for(auto element : l){\n        newList.push_back(element+1);\n    }\n    return newList;",
        "grade-60": {
            "execution": 1
        },
        "65": "std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;",
        "grade-65": {
            "execution": 1
        },
        "162": "std::vector<long> temp;\n    for(int i=0;i<l.size();i++){\n        temp.push_back(l[i]+1);\n    }\n    return temp;",
        "grade-162": {
            "execution": 1
        },
        "191": "int size = l.size();\n    std::vector<long> ret;\n    for(int i = 0; i < size; i++) {\n        ret.push_back(l[i] + 1);\n    }\n    return ret;",
        "grade-191": {
            "execution": 1
        },
        "179": "for(auto &i:l)\n    {\n        i++;\n    }\n    return l;",
        "grade-179": {
            "execution": 1
        },
        "55": "std::vector<long> result;\n    for (long x : l) {\n        result.push_back(x + 1);\n    }\n    return result;",
        "grade-55": {
            "execution": 1
        },
        "bleu-32": 0.6490129870026796,
        "bleu-6": 0.48678470398442397,
        "bleu-79": 0.44731422485464767,
        "bleu-68": 0.15043716603039395,
        "bleu-63": 0.17401885144684484,
        "bleu-39": 0.36536348126069995,
        "bleu-30": 0.05712784843202108,
        "bleu-174": 0.40304891593718006,
        "bleu-26": 0.09021069855589242,
        "bleu-188": 0.058531420081557435,
        "bleu-132": 0.5090510640958157,
        "bleu-9": 0.5090510640958157,
        "bleu-8": 0.5090510640958157,
        "bleu-27": 0.5090510640958157,
        "bleu-60": 0.04892084106836151,
        "bleu-65": 0.4525156905692751,
        "bleu-162": 0.5090510640958157,
        "bleu-191": 0.40304891593718006,
        "bleu-179": 0.08436694471886132,
        "bleu-55": 0.05230508195774472,
        "codebleu-32": 0.7798933617800538,
        "codebleu-6": 0.7144477461168481,
        "codebleu-79": 0.762392326970784,
        "codebleu-68": 0.7442175914298158,
        "codebleu-63": 0.6234996645324257,
        "codebleu-39": 0.7385601527981602,
        "codebleu-30": 0.4517704517704518,
        "codebleu-174": 0.7590683144173117,
        "codebleu-26": 0.5641025641025641,
        "codebleu-188": 0.5799755799755799,
        "codebleu-132": 0.7700699660990761,
        "codebleu-9": 0.7700699660990761,
        "codebleu-8": 0.7700699660990761,
        "codebleu-27": 0.7700699660990761,
        "codebleu-60": 0.46336996336996333,
        "codebleu-65": 0.7577007416433387,
        "codebleu-162": 0.7700699660990761,
        "codebleu-191": 0.7590683144173117,
        "codebleu-179": 0.2892622543013636,
        "codebleu-55": 0.46336996336996333,
        "chrf-32": 0.7212379918325081,
        "chrf-6": 0.5439272972156212,
        "chrf-79": 0.574204065250025,
        "chrf-68": 0.3943761947120126,
        "chrf-63": 0.2695169627035617,
        "chrf-39": 0.5042199224389421,
        "chrf-30": 0.21794352835436467,
        "chrf-174": 0.5179343277525674,
        "chrf-26": 0.29257251327787775,
        "chrf-188": 0.2312375392930091,
        "chrf-132": 0.5933815903383679,
        "chrf-9": 0.6301765303273533,
        "chrf-8": 0.6301765303273533,
        "chrf-27": 0.6592402091159201,
        "chrf-60": 0.18268120654327064,
        "chrf-65": 0.5039108490834543,
        "chrf-162": 0.6224565147802296,
        "chrf-191": 0.5199547178698333,
        "chrf-179": 0.24364448764102112,
        "chrf-55": 0.18040383595690873,
        "rougel-32": 0.7352941176470588,
        "rougel-6": 0.6865671641791045,
        "rougel-79": 0.6829268292682927,
        "rougel-68": 0.2916666666666667,
        "rougel-63": 0.5121951219512195,
        "rougel-39": 0.5348837209302325,
        "rougel-30": 0.39999999999999997,
        "rougel-174": 0.5925925925925926,
        "rougel-26": 0.43589743589743596,
        "rougel-188": 0.3695652173913043,
        "rougel-132": 0.7368421052631579,
        "rougel-9": 0.7368421052631579,
        "rougel-8": 0.7368421052631579,
        "rougel-27": 0.7368421052631579,
        "rougel-60": 0.3125,
        "rougel-65": 0.7105263157894737,
        "rougel-162": 0.7368421052631579,
        "rougel-191": 0.5925925925925926,
        "rougel-179": 0.5,
        "rougel-55": 0.32786885245901637,
        "meteor-32": 0.9645477416720453,
        "meteor-6": 0.7645855379188714,
        "meteor-79": 0.7552156523619068,
        "meteor-68": 0.6355831993188914,
        "meteor-63": 0.5636363636363636,
        "meteor-39": 0.8011976047904191,
        "meteor-30": 0.3454748376623376,
        "meteor-174": 0.8133738601823709,
        "meteor-26": 0.405624417456144,
        "meteor-188": 0.35087368280645603,
        "meteor-132": 0.7692011274056457,
        "meteor-9": 0.7692011274056457,
        "meteor-8": 0.7692011274056457,
        "meteor-27": 0.7692011274056457,
        "meteor-60": 0.28532763532763533,
        "meteor-65": 0.7291863504661122,
        "meteor-162": 0.7692011274056457,
        "meteor-191": 0.8133738601823709,
        "meteor-179": 0.3061530465376619,
        "meteor-55": 0.2880978065444085,
        "ruby-32": 0.5405405405405406,
        "ruby-6": 0.5,
        "ruby-79": 0.5098039215686274,
        "ruby-68": 0.16770186335403725,
        "ruby-63": 0.3529411764705882,
        "ruby-39": 0.3090909090909091,
        "ruby-30": 0.19354838709677424,
        "ruby-174": 0.36,
        "ruby-26": 0.2978723404255319,
        "ruby-188": 0.2295081967213115,
        "ruby-132": 0.5777777777777777,
        "ruby-9": 0.5777777777777777,
        "ruby-8": 0.5777777777777777,
        "ruby-27": 0.5777777777777777,
        "ruby-60": 0.09090909090909094,
        "ruby-65": 0.5555555555555556,
        "ruby-162": 0.5777777777777777,
        "ruby-191": 0.36,
        "ruby-179": 0.3548387096774194,
        "ruby-55": 0.09677419354838712,
        "codebertscore_f1-32": 0.9394076466560364,
        "codebertscore_f3-32": 0.9512073993682861,
        "codebertscore_f1-6": 0.9015579223632812,
        "codebertscore_f3-6": 0.9013365507125854,
        "codebertscore_f1-79": 0.8519709706306458,
        "codebertscore_f3-79": 0.9072899222373962,
        "codebertscore_f1-68": 0.7889131903648376,
        "codebertscore_f3-68": 0.8381924033164978,
        "codebertscore_f1-63": 0.8090654611587524,
        "codebertscore_f3-63": 0.8297597765922546,
        "codebertscore_f1-39": 0.8519121408462524,
        "codebertscore_f3-39": 0.9013800024986267,
        "codebertscore_f1-30": 0.8021894693374634,
        "codebertscore_f3-30": 0.8209481835365295,
        "codebertscore_f1-174": 0.8733231425285339,
        "codebertscore_f3-174": 0.9036916494369507,
        "codebertscore_f1-26": 0.8117210865020752,
        "codebertscore_f3-26": 0.8222113251686096,
        "codebertscore_f1-188": 0.78622967004776,
        "codebertscore_f3-188": 0.8072375655174255,
        "codebertscore_f1-132": 0.890012800693512,
        "codebertscore_f3-132": 0.9245375394821167,
        "codebertscore_f1-9": 0.8909130692481995,
        "codebertscore_f3-9": 0.9188292026519775,
        "codebertscore_f1-8": 0.8974254131317139,
        "codebertscore_f3-8": 0.9265846014022827,
        "codebertscore_f1-27": 0.8914126753807068,
        "codebertscore_f3-27": 0.9199984073638916,
        "codebertscore_f1-60": 0.7845482230186462,
        "codebertscore_f3-60": 0.7902714610099792,
        "codebertscore_f1-65": 0.8799861073493958,
        "codebertscore_f3-65": 0.9073050618171692,
        "codebertscore_f1-162": 0.8976244926452637,
        "codebertscore_f3-162": 0.9252768754959106,
        "codebertscore_f1-191": 0.8742197155952454,
        "codebertscore_f3-191": 0.904685914516449,
        "codebertscore_f1-179": 0.8324786424636841,
        "codebertscore_f3-179": 0.8208354115486145,
        "codebertscore_f1-55": 0.7867916822433472,
        "codebertscore_f3-55": 0.7878497242927551,
        "codebertscore_s_f1-32": 0.9473932385444641,
        "codebertscore_s_f3-32": 0.9576108455657959,
        "codebertscore_s_f1-6": 0.9144579768180847,
        "codebertscore_s_f3-6": 0.914505124092102,
        "codebertscore_s_f1-79": 0.8539682626724243,
        "codebertscore_s_f3-79": 0.9147050380706787,
        "codebertscore_s_f1-68": 0.792419970035553,
        "codebertscore_s_f3-68": 0.84444659948349,
        "codebertscore_s_f1-63": 0.8033758997917175,
        "codebertscore_s_f3-63": 0.8312352895736694,
        "codebertscore_s_f1-39": 0.8493241667747498,
        "codebertscore_s_f3-39": 0.9036666750907898,
        "codebertscore_s_f1-30": 0.7976569533348083,
        "codebertscore_s_f3-30": 0.8189219236373901,
        "codebertscore_s_f1-174": 0.874285101890564,
        "codebertscore_s_f3-174": 0.912165641784668,
        "codebertscore_s_f1-26": 0.8116943836212158,
        "codebertscore_s_f3-26": 0.8219960927963257,
        "codebertscore_s_f1-188": 0.7861326336860657,
        "codebertscore_s_f3-188": 0.8109889626502991,
        "codebertscore_s_f1-132": 0.8934852480888367,
        "codebertscore_s_f3-132": 0.9337691068649292,
        "codebertscore_s_f1-9": 0.8974398374557495,
        "codebertscore_s_f3-9": 0.9326193928718567,
        "codebertscore_s_f1-8": 0.8991851806640625,
        "codebertscore_s_f3-8": 0.934171199798584,
        "codebertscore_s_f1-27": 0.8975179195404053,
        "codebertscore_s_f3-27": 0.9333750009536743,
        "codebertscore_s_f1-60": 0.775784432888031,
        "codebertscore_s_f3-60": 0.7847841382026672,
        "codebertscore_s_f1-65": 0.8827549815177917,
        "codebertscore_s_f3-65": 0.9171779155731201,
        "codebertscore_s_f1-162": 0.8991889953613281,
        "codebertscore_s_f3-162": 0.9335187077522278,
        "codebertscore_s_f1-191": 0.8808441758155823,
        "codebertscore_s_f3-191": 0.914108157157898,
        "codebertscore_s_f1-179": 0.8307627439498901,
        "codebertscore_s_f3-179": 0.816947877407074,
        "codebertscore_s_f1-55": 0.7810034155845642,
        "codebertscore_s_f3-55": 0.7868768572807312,
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-79": 4,
        "raw_gpt35_nswr-79": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-132": 4,
        "raw_gpt35_nswr-132": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4",
        "gpt35_nswr-191": 4,
        "raw_gpt35_nswr-191": "4",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n"
        ],
        "simplified": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "task_id": "108",
        "164": "long pos_sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum = 0;\n    if (num < 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    while (num > 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    if (sum > 0) {\n      pos_sum++;\n    }\n  }\n  return pos_sum;",
        "grade-164": {
            "execution": 0
        },
        "28": "int len = arr.size();\n    long res = 0;\n    for (int i = 0; i < len; i++) {\n        int sum = 0;\n        if (arr[i] >= 0) {\n            int num = arr[i];\n            while (num) {\n                sum += num % 10;\n                num /= 10;\n            }\n        } else {\n            int num = -arr[i];\n            while (num) {\n                sum += num % 10;\n                num /= 10;\n            }\n            sum = -sum;\n        }\n        if (sum) res++;\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "// YOUR CODE HERE\n    long ans = 0;\n    for(int i = 0; i < arr.size(); i++){\n        long temp = arr[i];\n        int sum = 0;\n        while(temp != 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(sum > 0){\n            ans++;\n        }\n    }\n    return ans;",
        "grade-6": {
            "execution": 0
        },
        "191": "int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            arr[i] = -1 * arr[i];\n        }\n        int sum = 0;\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;",
        "grade-191": {
            "execution": 0
        },
        "70": "long count = 0;\n    if (arr.size() == 0) {\n        return 0;\n    } else {\n        for (long i = 0; i < arr.size(); i++) {\n            if (arr[i] > 0) {\n                while (arr[i] > 0) {\n                    count += arr[i] % 10;\n                    arr[i] /= 10;\n                }\n            } else {\n                while (arr[i] < 0) {\n                    count += arr[i] % 10;\n                    arr[i] /= 10;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "long size=arr.size();\n    if(size==0)\n        return 0;\n    long count=0;\n    for(long i=0;i<size;i++)\n    {\n        long num=arr[i];\n        if(num<0)\n            num*=-1;\n        long num_digits=log10(num)+1;\n        int sum=0;\n        while(num!=0)\n        {\n            int digit=num%10;\n            sum+=digit;\n            num/=10;\n        }\n        if(sum>0)\n            count++;\n    }\n    return count;",
        "grade-62": {
            "execution": 0
        },
        "57": "long total=0;\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i]>0){\n\t\t\tif(arr[i]>=100000){\n\t\t\t\ttotal=total+1;\n\t\t\t}\n\t\t\telse if(arr[i]>=10000){\n\t\t\t\tlong x=arr[i]/10000;\n\t\t\t\tlong y=arr[i]%10000;\n\t\t\t\ty=y/1000;\n\t\t\t\tlong z=arr[i]%1000;\n\t\t\t\tz=z/100;\n\t\t\t\tlong m=arr[i]%100;\n\t\t\t\tm=m/10;\n\t\t\t\tlong n=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z+m+n;\n\t\t\t}\n\t\t\telse if(arr[i]>=1000){\n\t\t\t\tlong x=arr[i]/1000;\n\t\t\t\tlong y=arr[i]%1000;\n\t\t\t\ty=y/100;\n\t\t\t\tlong z=arr[i]%100;\n\t\t\t\tz=z/10;\n\t\t\t\tlong m=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z+m;\n\t\t\t}\n\t\t\telse if(arr[i]>=100){\n\t\t\t\tlong x=arr[i]/100;\n\t\t\t\tlong y=arr[i]%100;\n\t\t\t\ty=y/10;\n\t\t\t\tlong z=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z;\n\t\t\t}\n\t\t\telse if(arr[i]>=10){\n\t\t\t\tlong x=arr[i]/10;\n\t\t\t\tlong y=arr[i]%10;\n\t\t\t\ttotal=total+x+y;\n\t\t\t}\n\t\t\telse if(arr[i]>=1){\n\t\t\t\ttotal=total+",
        "grade-57": {
            "execution": 0
        },
        "35": "if (arr.size() == 0) {\n    return 0;\n  }\n  long count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum = 0;\n    long dig = 0;\n    if (num < 0) {\n      dig = -1;\n    }\n    while (num != 0) {\n      if (dig == -1) {\n        sum += -(num % 10);\n      } else {\n        sum += num % 10;\n      }\n      num /= 10;\n      dig = 1;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;",
        "grade-35": {
            "execution": 0
        },
        "190": "if (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tlong count = 0;\n\tfor (auto it = arr.begin(); it != arr.end(); it++) {\n\t\tif (*it < 0) {\n\t\t\tsum += (*it) * -1;\n\t\t}\n\t\telse {\n\t\t\tsum += *it;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-190": {
            "execution": 0
        },
        "26": "// Your code here\n    long count=0;\n    for(long i=0;i<arr.size();i++)\n    {\n        long sum=0;\n        if(arr[i]<0)\n        {\n            sum=arr[i]%10;\n            arr[i]=arr[i]/10;\n        }\n        while(arr[i]!=0)\n        {\n            sum+=arr[i]%10;\n            arr[i]=arr[i]/10;\n        }\n        if(sum>0)\n        {\n            count++;\n        }\n    }\n    return count;",
        "grade-26": {
            "execution": 0
        },
        "174": "// YOUR CODE HERE\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num = arr[i];\n        long sum = 0;\n        if (num < 0) {\n            num = num * -1;\n        }\n        while (num != 0) {\n            sum += num % 10;\n            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;",
        "grade-174": {
            "execution": 0
        },
        "140": "long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long x = 0;\n        if (arr[i] < 0) {\n            x = arr[i] * -1;\n        } else {\n            x = arr[i];\n        }\n        while (x > 0) {\n            count = count + x % 10;\n            x = x / 10;\n        }\n        if (count > 0) {\n            count = count + 1;\n        }\n    }\n    return count;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (arr.size() == 0) {\n    return 0;\n  }\n  int count = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    int sum = 0;\n    int num = arr[i];\n    if (num < 0) {\n      sum += num * -1;\n    } else {\n      sum += num;\n    }\n    while (sum > 0) {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n    if (sum < 0) {\n      count++;\n    }\n  }\n  return count;",
        "grade-22": {
            "execution": 0
        },
        "152": "long count = 0;\n  for (auto num : arr) {\n    long total = 0;\n    if (num == 0)\n      total = 0;\n    else if (num < 0) {\n      num = -num;\n      total += -(num % 10);\n      num /= 10;\n    }\n    else {\n      total += num % 10;\n      num /= 10;\n    }\n    while (num > 0) {\n      total += num % 10;\n      num /= 10;\n    }\n    if (total > 0)\n      count++;\n  }\n  return count;",
        "grade-152": {
            "execution": 0
        },
        "108": "long count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tstd::string str = std::to_string(arr[i]);\n\t\tif (arr[i] < 0) {\n\t\t\tsum += str[0] - '0';\n\t\t}\n\t\tfor (long j = 0; j < str.size(); j++) {\n\t\t\tsum += str[j] - '0';\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-108": {
            "execution": 0
        },
        "8": "long count = 0;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        long a = *i;\n        long sum = 0;\n        while (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        if (sum > 0)\n            count++;\n    }\n    return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        int l = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n            l = 1;\n        }\n        while (arr[i] != 0) {\n            sum = sum + arr[i] % 10;\n            arr[i] = arr[i] / 10;\n        }\n        if (l == 1) {\n            sum = sum * -1;\n        }\n        if (sum > 0) {\n            sum = 0;\n            continue;\n        }\n        else if (sum < 0) {\n            sum = 0;\n            arr[i] = arr[i] * -1;\n            continue;\n        }\n        else if (sum == 0) {\n            sum = 0;\n            arr[i] = arr[i] * -1;\n            continue;\n        }\n    }\n    return arr.size();",
        "grade-7": {
            "execution": 0
        },
        "23": "// write your code here\n\n  long count=0;\n  long len = arr.size();\n  for(long i=0;i<len;i++)\n  {\n    long temp = arr[i];\n    long sum = 0;\n    if(temp>0)\n    {\n      while(temp>0)\n      {\n        sum += temp%10;\n        temp /= 10;\n      }\n    }\n    else\n    {\n      while(temp!=0)\n      {\n        sum += temp%10;\n        temp /= 10;\n      }\n    }\n    if(sum>0)\n    {\n      count++;\n    }\n  }\n  return count;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        std::string s = std::to_string(arr[i]);\n        long sum = 0;\n        for (char x : s) {\n            int digit = x - '0';\n            if (digit < 0)\n                digit = -digit;\n            sum += digit;\n        }\n        if (sum > 0)\n            count++;\n    }\n    return count;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tint sum = 0;\n\t\tif (arr[i] < 0) {\n\t\t\tarr[i] = arr[i] * -1;\n\t\t}\n\t\tif (arr[i] == 0) {\n\t\t\tcount += 1;\n\t\t}\n\t\twhile (arr[i] != 0) {\n\t\t\tsum += arr[i] % 10;\n\t\t\tarr[i] = arr[i] / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.39134735466209164,
        "bleu-28": 0.357296417973986,
        "bleu-6": 0.3639311597648275,
        "bleu-191": 0.4219970511826633,
        "bleu-70": 0.24725521376264578,
        "bleu-62": 0.3092448815250858,
        "bleu-57": 0.10705549043417291,
        "bleu-35": 0.2849207936756958,
        "bleu-190": 0.23644747222459128,
        "bleu-26": 0.31005135133923967,
        "bleu-174": 0.36100600577829317,
        "bleu-140": 0.343283487881955,
        "bleu-22": 0.36557707901573233,
        "bleu-152": 0.14339098205178133,
        "bleu-108": 0.2994646181606283,
        "bleu-8": 0.259075943526319,
        "bleu-7": 0.19966725597489546,
        "bleu-23": 0.2854699476492283,
        "bleu-55": 0.35561145398535066,
        "bleu-59": 0.33883358855972573,
        "codebleu-164": 0.6274816403805596,
        "codebleu-28": 0.6865859558317339,
        "codebleu-6": 0.5486836803769003,
        "codebleu-191": 0.6447790013551902,
        "codebleu-70": 0.6249440608931438,
        "codebleu-62": 0.6492684301478243,
        "codebleu-57": 0.6635861714826186,
        "codebleu-35": 0.6579920949303901,
        "codebleu-190": 0.5272169254869395,
        "codebleu-26": 0.6486366103341685,
        "codebleu-174": 0.632255500040842,
        "codebleu-140": 0.6688792683994886,
        "codebleu-22": 0.6665989329864399,
        "codebleu-152": 0.5759999999999998,
        "codebleu-108": 0.6481865782687091,
        "codebleu-8": 0.4915787499494943,
        "codebleu-7": 0.6832618473557835,
        "codebleu-23": 0.6630289380624738,
        "codebleu-55": 0.606868895610265,
        "codebleu-59": 0.6758514659347258,
        "chrf-164": 0.4517795948257215,
        "chrf-28": 0.4947894080785437,
        "chrf-6": 0.4162673006139397,
        "chrf-191": 0.43813458832115537,
        "chrf-70": 0.30903711636896325,
        "chrf-62": 0.40517349478545617,
        "chrf-57": 0.22298092311651524,
        "chrf-35": 0.40569340629775247,
        "chrf-190": 0.3176296100235009,
        "chrf-26": 0.37344320066592035,
        "chrf-174": 0.3953212625701298,
        "chrf-140": 0.35797979725539525,
        "chrf-22": 0.4801750216233679,
        "chrf-152": 0.2947800039763859,
        "chrf-108": 0.3408694595511076,
        "chrf-8": 0.32256659672169974,
        "chrf-7": 0.3716466337392573,
        "chrf-23": 0.367009065605425,
        "chrf-55": 0.3611910469042378,
        "chrf-59": 0.4337774562687657,
        "rougel-164": 0.5948717948717949,
        "rougel-28": 0.588235294117647,
        "rougel-6": 0.6187845303867403,
        "rougel-191": 0.65,
        "rougel-70": 0.4886877828054299,
        "rougel-62": 0.5185185185185186,
        "rougel-57": 0.2986425339366516,
        "rougel-35": 0.5063291139240507,
        "rougel-190": 0.416243654822335,
        "rougel-26": 0.5779816513761468,
        "rougel-174": 0.5888324873096447,
        "rougel-140": 0.6237623762376238,
        "rougel-22": 0.5488372093023255,
        "rougel-152": 0.47115384615384615,
        "rougel-108": 0.5,
        "rougel-8": 0.5536723163841807,
        "rougel-7": 0.4429065743944637,
        "rougel-23": 0.5045871559633027,
        "rougel-55": 0.5306122448979593,
        "rougel-59": 0.5606694560669456,
        "meteor-164": 0.5208261264417121,
        "meteor-28": 0.629184687859537,
        "meteor-6": 0.4624964095161238,
        "meteor-191": 0.5275925313541054,
        "meteor-70": 0.4551863310922037,
        "meteor-62": 0.5566241950909309,
        "meteor-57": 0.40672,
        "meteor-35": 0.5981515901050014,
        "meteor-190": 0.40841183339264603,
        "meteor-26": 0.5276610217673815,
        "meteor-174": 0.5139053788782728,
        "meteor-140": 0.5113612928442219,
        "meteor-22": 0.5522419218184028,
        "meteor-152": 0.5136916207956644,
        "meteor-108": 0.4403479148770927,
        "meteor-8": 0.40589451186073655,
        "meteor-7": 0.4649245117129557,
        "meteor-23": 0.5297724873510338,
        "meteor-55": 0.4719264952026216,
        "meteor-59": 0.6128289875912242,
        "ruby-164": 0.4752475247524752,
        "ruby-28": 0.3916666666666667,
        "ruby-6": 0.4554455445544554,
        "ruby-191": 0.4752475247524752,
        "ruby-70": 0.29166666666666663,
        "ruby-62": 0.33043478260869563,
        "ruby-57": 0.19354838709677424,
        "ruby-35": 0.3897058823529411,
        "ruby-190": 0.2376237623762376,
        "ruby-26": 0.4358974358974359,
        "ruby-174": 0.4455445544554455,
        "ruby-140": 0.4752475247524752,
        "ruby-22": 0.3421052631578947,
        "ruby-152": 0.2990654205607477,
        "ruby-108": 0.33613445378151263,
        "ruby-8": 0.4257425742574258,
        "ruby-7": 0.31382978723404253,
        "ruby-23": 0.3162393162393162,
        "ruby-55": 0.39603960396039606,
        "ruby-59": 0.42028985507246375,
        "codebertscore_f1-164": 0.8438460826873779,
        "codebertscore_f3-164": 0.8318994045257568,
        "codebertscore_f1-28": 0.847606897354126,
        "codebertscore_f3-28": 0.8439394235610962,
        "codebertscore_f1-6": 0.8317881226539612,
        "codebertscore_f3-6": 0.8284676671028137,
        "codebertscore_f1-191": 0.8668244481086731,
        "codebertscore_f3-191": 0.8581024408340454,
        "codebertscore_f1-70": 0.8231271505355835,
        "codebertscore_f3-70": 0.8109457492828369,
        "codebertscore_f1-62": 0.8454142212867737,
        "codebertscore_f3-62": 0.8554024696350098,
        "codebertscore_f1-57": 0.7495993971824646,
        "codebertscore_f3-57": 0.7833177447319031,
        "codebertscore_f1-35": 0.8396475315093994,
        "codebertscore_f3-35": 0.8441317081451416,
        "codebertscore_f1-190": 0.7703732252120972,
        "codebertscore_f3-190": 0.7653142213821411,
        "codebertscore_f1-26": 0.8460367918014526,
        "codebertscore_f3-26": 0.8411040306091309,
        "codebertscore_f1-174": 0.8412874341011047,
        "codebertscore_f3-174": 0.8453839421272278,
        "codebertscore_f1-140": 0.8449947237968445,
        "codebertscore_f3-140": 0.8439071178436279,
        "codebertscore_f1-22": 0.8465907573699951,
        "codebertscore_f3-22": 0.8480843305587769,
        "codebertscore_f1-152": 0.8057429194450378,
        "codebertscore_f3-152": 0.7908849120140076,
        "codebertscore_f1-108": 0.7973539233207703,
        "codebertscore_f3-108": 0.7942583560943604,
        "codebertscore_f1-8": 0.8226695656776428,
        "codebertscore_f3-8": 0.8128776550292969,
        "codebertscore_f1-7": 0.8134256601333618,
        "codebertscore_f3-7": 0.8317663073539734,
        "codebertscore_f1-23": 0.8397611975669861,
        "codebertscore_f3-23": 0.8458113670349121,
        "codebertscore_f1-55": 0.8140136003494263,
        "codebertscore_f3-55": 0.8149045705795288,
        "codebertscore_f1-59": 0.8542700409889221,
        "codebertscore_f3-59": 0.8533839583396912,
        "codebertscore_s_f1-164": 0.8493752479553223,
        "codebertscore_s_f3-164": 0.8378903269767761,
        "codebertscore_s_f1-28": 0.8498108386993408,
        "codebertscore_s_f3-28": 0.848362922668457,
        "codebertscore_s_f1-6": 0.8388653993606567,
        "codebertscore_s_f3-6": 0.8385346531867981,
        "codebertscore_s_f1-191": 0.862614095211029,
        "codebertscore_s_f3-191": 0.8549484014511108,
        "codebertscore_s_f1-70": 0.8262947797775269,
        "codebertscore_s_f3-70": 0.8152272701263428,
        "codebertscore_s_f1-62": 0.8461276292800903,
        "codebertscore_s_f3-62": 0.8566062450408936,
        "codebertscore_s_f1-57": 0.7672786116600037,
        "codebertscore_s_f3-57": 0.801694393157959,
        "codebertscore_s_f1-35": 0.8399080634117126,
        "codebertscore_s_f3-35": 0.8440067172050476,
        "codebertscore_s_f1-190": 0.7816287279129028,
        "codebertscore_s_f3-190": 0.7753596901893616,
        "codebertscore_s_f1-26": 0.841618537902832,
        "codebertscore_s_f3-26": 0.8401901125907898,
        "codebertscore_s_f1-174": 0.8380035161972046,
        "codebertscore_s_f3-174": 0.8436269164085388,
        "codebertscore_s_f1-140": 0.8389304876327515,
        "codebertscore_s_f3-140": 0.837512195110321,
        "codebertscore_s_f1-22": 0.8517681956291199,
        "codebertscore_s_f3-22": 0.8518773913383484,
        "codebertscore_s_f1-152": 0.8090501427650452,
        "codebertscore_s_f3-152": 0.7928867340087891,
        "codebertscore_s_f1-108": 0.8018852472305298,
        "codebertscore_s_f3-108": 0.8005537390708923,
        "codebertscore_s_f1-8": 0.8306757211685181,
        "codebertscore_s_f3-8": 0.8210235238075256,
        "codebertscore_s_f1-7": 0.8179219961166382,
        "codebertscore_s_f3-7": 0.8330707550048828,
        "codebertscore_s_f1-23": 0.8404659628868103,
        "codebertscore_s_f3-23": 0.8456507921218872,
        "codebertscore_s_f1-55": 0.8114882111549377,
        "codebertscore_s_f3-55": 0.8134254217147827,
        "codebertscore_s_f1-59": 0.8549247980117798,
        "codebertscore_s_f3-59": 0.8547098636627197,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 2,
        "raw_gpt35_nsnr-57": "2",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-191": 4,
        "raw_gpt35_nswr-191": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long> nums) {\n",
        "snippet": [
            "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n"
        ],
        "simplified": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
        "task_id": "145",
        "163": "std::vector<long> nums_with_indices;\n    for (auto &n : nums) {\n        nums_with_indices.push_back(n);\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        nums_with_indices[i] = std::abs(nums[i]) * 10000 + i;\n    }\n    sort(nums_with_indices.begin(), nums_with_indices.end());\n    std::vector<long> result;\n    for (auto &n : nums_with_indices) {\n        result.push_back(nums[n % 10000]);\n    }\n    return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> res;\n    std::map<long, std::vector<long>> m;\n    long n;\n    for (long i = 0; i < nums.size(); i++) {\n        long value = nums[i];\n        long sum = 0;\n        while (value != 0) {\n            n = value % 10;\n            sum += n;\n            value /= 10;\n        }\n        m[sum].push_back(nums[i]);\n    }\n    for (auto& x : m) {\n        for (auto& y : x.second) {\n            res.push_back(y);\n        }\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "int n = nums.size();\n  std::vector<long> res;\n  std::vector<int> sums;\n  for (int i = 0; i < n; i++) {\n    int temp = nums[i];\n    int sum = 0;\n    while (temp != 0) {\n      sum += temp % 10;\n      temp /= 10;\n    }\n    sums.push_back(sum);\n  }\n  std::vector<std::pair<int, int>> temp;\n  for (int i = 0; i < n; i++) {\n    temp.push_back(std::make_pair(sums[i], nums[i]));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i < n; i++) {\n    res.push_back(temp[i].second);\n  }\n  return res;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<long> result;\n   long temp1;\n   long temp2;\n   long sum_digits;\n   for(auto num : nums){\n      temp1 = num;\n      sum_digits = 0;\n      if(num < 0){\n         temp1 = temp1 * -1;\n      }\n      while(temp1){\n         temp2 = temp1 % 10;\n         sum_digits += temp2;\n         temp1 = temp1 / 10;\n      }\n      result.push_back(sum_digits);\n   }\n   std::vector<long>::iterator it;\n   int len = result.size();\n   for(int i = 0; i < len - 1; i++){\n      for(int j = 0; j < len - i - 1; j++){\n         if(result[j] > result[j + 1]){\n            it = nums.begin() + j;\n            std::iter_swap(it, it + 1);\n            it = result.begin() + j;\n            std::iter_swap(it, it + 1);\n         }\n      }\n   }\n   return nums;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<std::pair<long, int>> sums;\n    for (auto it = nums.begin(); it != nums.end(); ++it) {\n        sums.push_back(std::make_pair(std::abs(*it), *it));\n    }\n    // Sort vector of pairs by the first field\n    // in ascending order\n    std::sort(sums.begin(), sums.end());\n    // Extract values from pairs\n    for (auto it = sums.begin(); it != sums.end(); ++it) {\n        it->first = it->second;\n    }\n    std::vector<long> res;\n    for (auto it = sums.begin(); it != sums.end(); ++it) {\n        res.push_back(it->first);\n    }\n    return res;",
        "grade-70": {
            "execution": 0
        },
        "62": "//TODO: Write your code here\n    std::vector<long> result(nums.size());\n    std::vector<long> digits;\n    long sum = 0;\n    long min = 0;\n    long max = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] < 0){\n            nums[i] = std::abs(nums[i]);\n        }\n        if(nums[i] < 10){\n            digits.push_back(nums[i]);\n        }else{\n            sum = 0;\n            int count = 0;\n            long rem = 0;\n            while(nums[i] != 0){\n                rem = nums[i] % 10;\n                sum += rem;\n                nums[i] = nums[i] / 10;\n                count++;\n            }\n            digits.push_back(sum);\n        }\n    }\n    std::sort(digits.begin(), digits.end());\n    int j = 0;\n    for(int i = 0; i < digits.size(); i++){\n        j = 0;\n        for(j = 0; j < nums.size(); j++){\n            if(digits[i] == nums[j]){\n                result[i] = nums[j];\n                nums[j] = 0;\n                break;\n            }\n        }\n        if(j == nums.size()){\n            for(j = 0; j < nums.size(); j++){\n                if(digits[i] == std::abs(nums[j])){\n                    result[i] = nums[j];\n                    nums[j] = 0;\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "// Write your code here\n    std::vector<std::pair<long, int>> myVec;\n    for (int i = 0; i < nums.size(); i++) {\n        std::pair<long, int> p(nums[i], i);\n        myVec.push_back(p);\n    }\n    std::vector<long> result;\n    auto compSum = [](std::pair<long, int> a, std::pair<long, int> b) {\n                                                                    int i = std::to_string(a.first).size();\n                                                                    int sum1 = 0;\n                                                                    int sum2 = 0;\n                                                                    for (int j = 0; j < i; j++) {\n                                                                        sum1 += std::to_string(a.first)[j] - '0';\n                                                                        sum2 += std::to_string(b.first)[j] - '0';\n                                                                    }\n                                                                    if (sum1 == sum2)\n                                                                        return a.second < b.second;\n                                                                    return sum1 < sum2;\n                                                                };\n    std::sort(myVec.begin(), myVec.end(), compSum);\n    for (int i = 0; i < myVec.size(); i++) {\n        result.push_back(myVec[i].first);\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "// map to hold number and its index\n    std::map<int, int> nums_map;\n    // vector to hold number in sorted order\n    std::vector<long> output;\n    // loop through input vector to find sum of digits for each number\n    for (int i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        // store sum of digits and index\n        nums_map[sum] = i;\n    }\n    // sort map in ascending order by sum of digits\n    std::map<int, int>::iterator it;\n    for (it = nums_map.begin(); it != nums_map.end(); it++) {\n        // loop through map and insert number into output\n        // in ascending order of sum of digits\n        output.push_back(nums[it->second]);\n    }\n    return output;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> ordered_nums;\n  std::vector<int>  nums_to_sort;\n  std::vector<int>  ordered_nums_to_sort;\n  for (long num : nums) {\n    int sum = 0;\n    int test = num;\n    while (test != 0) {\n      sum += test % 10;\n      test /= 10;\n    }\n    nums_to_sort.push_back(sum);\n  }\n  ordered_nums_to_sort = nums_to_sort;\n  std::sort(ordered_nums_to_sort.begin(), ordered_nums_to_sort.end());\n  for (int i = 0; i < ordered_nums_to_sort.size(); i++) {\n    for (int j = 0; j < nums_to_sort.size(); j++) {\n      if (ordered_nums_to_sort[i] == nums_to_sort[j]) {\n        ordered_nums.push_back(nums[j]);\n        nums_to_sort[j] = INT_MAX;\n        break;\n      }\n    }\n  }\n  return ordered_nums;",
        "grade-188": {
            "execution": 0
        },
        "26": "int len = nums.size();\n\tstd::vector<long> result(len);\n\tint sum = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tsum = 0;\n\t\tif (nums[i] > 0) {\n\t\t\twhile (nums[i] > 0) {\n\t\t\t\tsum += nums[i] % 10;\n\t\t\t\tnums[i] /= 10;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (nums[i] < 0) {\n\t\t\t\tsum += -(nums[i] % 10);\n\t\t\t\tnums[i] /= 10;\n\t\t\t}\n\t\t}\n\t\tnums[i] = sum;\n\t}\n\tfor (int i = 0; i < len; i++) {\n\t\tif (i != len - 1) {\n\t\t\tfor (int j = i + 1; j < len; j++) {\n\t\t\t\tif (nums[i] > nums[j]) {\n\t\t\t\t\tswap(nums[i], nums[j]);\n\t\t\t\t\tswap(result[i], result[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<std::pair<int, long>> sums;\n\tstd::vector<long> result;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = nums[i]; j > 0; j /= 10)\n\t\t\tsum += j % 10;\n\t\tsums.push_back(std::make_pair(sum, nums[i]));\n\t}\n\tstd::sort(sums.begin(), sums.end());\n\tfor (int i = 0; i < sums.size(); i++)\n\t\tresult.push_back(sums[i].second);\n\treturn result;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<long> myvec(nums.size());\n    std::vector<long> copy_nums(nums.size());\n    std::copy(nums.begin(), nums.end(), copy_nums.begin());\n    std::sort(copy_nums.begin(), copy_nums.end());\n    std::sort(nums.begin(), nums.end(), [](long a, long b) {\n        return (std::abs(a) % 10 + std::abs(a) / 10) < (std::abs(b) % 10 + std::abs(b) / 10);\n    });\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[i] == copy_nums[j]) {\n                myvec[j] = nums[i];\n            }\n        }\n    }\n    return myvec;",
        "grade-139": {
            "execution": 0
        },
        "22": "int len = nums.size();\n    for(int i = 0; i < len; i++) {\n        for(int j = 0; j < len - i - 1; j++) {\n            if(sum(nums[j]) > sum(nums[j + 1])) {\n                std::swap(nums[j], nums[j + 1]);\n            }\n        }\n    }\n    return nums;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> order_num;\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        order_num.push_back(sum);\n        sum = 0;\n    }\n    for (long i = 0; i < nums.size(); i++) {\n        for (long j = i + 1; j < nums.size(); j++) {\n            if (order_num[i] > order_num[j]) {\n                std::swap(order_num[i], order_num[j]);\n                std::swap(nums[i], nums[j]);\n            }\n        }\n    }\n    return nums;",
        "grade-151": {
            "execution": 0
        },
        "108": "int n = nums.size();\n    std::vector<std::pair<int, int>> v(n);\n    std::vector<long> ans(n);\n    for (int i = 0; i < n; i++) {\n        int num = nums[i];\n        int sum = 0;\n        while (num) {\n            sum += num % 10;\n            num /= 10;\n        }\n        v[i] = {sum, i};\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < n; i++) {\n        ans[i] = nums[v[i].second];\n    }\n    return ans;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long>::iterator it;\n  std::vector<long>result;\n  std::map<long,long> nums_map;\n  long sum=0;\n  if(nums.size() == 0) return nums;\n  for(it=nums.begin();it!=nums.end();it++){\n    sum=0;\n    long num=*it;\n    while(num!=0){\n      sum+=num%10;\n      num/=10;\n    }\n    nums_map[sum]=*it;\n  }\n  for(std::map<long,long>::iterator i=nums_map.begin();i!=nums_map.end();i++){\n    result.push_back(i->second);\n  }\n  return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> nums2;\n    nums2 = nums;\n    int i;\n    long temp=0;\n    int sum=0;\n    long temp2=0;\n    int sum2=0;\n    for(i=0;i<nums.size();i++)\n    {\n        while(nums[i]>0)\n        {\n            temp = nums[i]%10;\n            sum = sum + temp;\n            nums[i] = nums[i]/10;\n        }\n    }\n    for(i=0;i<nums2.size();i++)\n    {\n        while(nums2[i]>0)\n        {\n            temp2 = nums2[i]%10;\n            sum2 = sum2 + temp2;\n            nums2[i] = nums2[i]/10;\n        }\n    }\n    std::vector<long> nums3;\n    long temp3=0;\n    long temp4=0;\n    long temp5=0;\n    long temp6=0;\n    long temp7=0;\n    long temp8=0;\n    long temp9=0;\n    int sum3=0;\n    int sum4=0;\n    int sum5=0;\n    int sum6=0;\n    int sum7=0;\n    int sum8=0;\n    int sum9=0;\n    while(nums3.size() < nums.size())\n    {\n        for(i=0;i<nums.size();i++)\n        {\n            temp3 = nums[i]%10;\n            sum3 = sum3 + temp3;\n            nums[i] = nums[i]/10;\n        }\n        for(i=0;i<nums2.size();i++)\n        {\n            temp4 = nums2[i]%10;\n            sum4 = sum4 + temp4;\n            nums2[i] = nums2[i]/10;\n        }\n        if(sum3 < sum4)\n        {\n            nums3.push",
        "grade-7": {
            "execution": 0
        },
        "23": "for(auto &num : nums) {\n        num = abs(num);\n    }\n    std::vector<long> sums(nums.size());\n    std::vector<long> answers(nums.size());\n    std::iota(answers.begin(), answers.end(), 0);\n    std::sort(answers.begin(), answers.end(),\n              [&nums](const int &first, const int &second) {\n                  long firstSum = 0;\n                  long secondSum = 0;\n                  while(nums[first] != 0) {\n                      firstSum += nums[first] % 10;\n                      nums[first] /= 10;\n                  }\n                  while(nums[second] != 0) {\n                      secondSum += nums[second] % 10;\n                      nums[second] /= 10;\n                  }\n                  return firstSum < secondSum;\n              });\n    std::transform(answers.begin(), answers.end(), sums.begin(),\n                   [&nums](const int &index) { return nums[index]; });\n    return sums;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> result;\n    std::map<long,std::vector<long>> indices;\n    for(int i=0;i<nums.size();i++){\n        int total=0;\n        int num=nums[i];\n        if(num<0){\n            num=num*-1;\n        }\n        while(num>0){\n            total+=num%10;\n            num=num/10;\n        }\n        indices[total].push_back(nums[i]);\n    }\n    for(auto it=indices.begin();it!=indices.end();it++){\n        for(int i=0;i<it->second.size();i++){\n            result.push_back(it->second[i]);\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result, values;\n    int sum{}, temp{};\n    for(int i=0; i<nums.size(); i++){\n        temp = nums[i];\n        sum = 0;\n        if(temp<0){\n            temp = temp*(-1);\n        }\n        while(temp!=0){\n            sum = sum + temp%10;\n            temp = temp/10;\n        }\n        values.push_back(sum);\n    }\n    std::vector<long> original = nums;\n    int minIndex{}, minValue{};\n    while(values.size()!=0){\n        minValue = values[0];\n        minIndex = 0;\n        for(int i=0; i<values.size(); i++){\n            if(values[i]<minValue){\n                minValue = values[i];\n                minIndex = i;\n            }\n        }\n        for(int i=0; i<original.size(); i++){\n            if(original[i]==nums[minIndex]){\n                result.push_back(original[i]);\n                original.erase(original.begin()+i);\n                nums.erase(nums.begin()+minIndex);\n                values.erase(values.begin()+minIndex);\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.12678515391883755,
        "bleu-28": 0.13866314987528638,
        "bleu-6": 0.27025003403781905,
        "bleu-189": 0.20389725144616985,
        "bleu-70": 0.04615985151429023,
        "bleu-62": 0.32091055989372813,
        "bleu-57": 0.26454497886682016,
        "bleu-35": 0.19039083477860314,
        "bleu-188": 0.26004146265158345,
        "bleu-26": 0.3525942923778771,
        "bleu-173": 0.25158525865585535,
        "bleu-139": 0.27837299870166693,
        "bleu-22": 0.10383964763864581,
        "bleu-151": 0.3347594616141125,
        "bleu-108": 0.20678908046163877,
        "bleu-8": 0.13624688498612347,
        "bleu-7": 0.21971778285305277,
        "bleu-23": 0.1064394107024624,
        "bleu-55": 0.2540481577348187,
        "bleu-59": 0.2731254870798385,
        "codebleu-163": 0.31720072754108275,
        "codebleu-28": 0.33221964553393113,
        "codebleu-6": 0.5086210574439093,
        "codebleu-189": 0.5500643495090612,
        "codebleu-70": 0.39261740442598614,
        "codebleu-62": 0.7172694392120921,
        "codebleu-57": 0.5654263985538095,
        "codebleu-35": 0.4384533185171514,
        "codebleu-188": 0.48882635818851355,
        "codebleu-26": 0.6240967949270607,
        "codebleu-173": 0.4054955584681411,
        "codebleu-139": 0.5042973162886983,
        "codebleu-22": 0.24486998683074904,
        "codebleu-151": 0.5118167823444766,
        "codebleu-108": 0.4066443720221045,
        "codebleu-8": 0.39466885506600846,
        "codebleu-7": 0.6694858324311677,
        "codebleu-23": 0.48231534724842856,
        "codebleu-55": 0.49012247311521756,
        "codebleu-59": 0.6294442693161029,
        "chrf-163": 0.2810161985118101,
        "chrf-28": 0.22881367348792914,
        "chrf-6": 0.3437907378847163,
        "chrf-189": 0.31862930678032986,
        "chrf-70": 0.224366224668043,
        "chrf-62": 0.48168159723267207,
        "chrf-57": 0.36915239033306996,
        "chrf-35": 0.3215178866445022,
        "chrf-188": 0.33717709053515255,
        "chrf-26": 0.37693173994817875,
        "chrf-173": 0.36482770074632337,
        "chrf-139": 0.3244521968555714,
        "chrf-22": 0.22626437912019157,
        "chrf-151": 0.3864808349808411,
        "chrf-108": 0.2856568882981914,
        "chrf-8": 0.28083525124546094,
        "chrf-7": 0.3577913055219494,
        "chrf-23": 0.26965461215312886,
        "chrf-55": 0.3359696516012001,
        "chrf-59": 0.37531286980632267,
        "rougel-163": 0.3275862068965517,
        "rougel-28": 0.3506849315068493,
        "rougel-6": 0.39336492890995256,
        "rougel-189": 0.3990825688073394,
        "rougel-70": 0.3135391923990499,
        "rougel-62": 0.5025295109612141,
        "rougel-57": 0.37573385518590996,
        "rougel-35": 0.34624145785877,
        "rougel-188": 0.46683046683046686,
        "rougel-26": 0.4789356984478936,
        "rougel-173": 0.43157894736842106,
        "rougel-139": 0.40798226164079826,
        "rougel-22": 0.3726708074534162,
        "rougel-151": 0.57356608478803,
        "rougel-108": 0.3844155844155845,
        "rougel-8": 0.33753148614609574,
        "rougel-7": 0.3883161512027491,
        "rougel-23": 0.2974137931034483,
        "rougel-55": 0.42751842751842756,
        "rougel-59": 0.42471042471042475,
        "meteor-163": 0.1791304433892545,
        "meteor-28": 0.1980298160528083,
        "meteor-6": 0.3042713240825955,
        "meteor-189": 0.3093335926124014,
        "meteor-70": 0.21619835618008953,
        "meteor-62": 0.47688021178925066,
        "meteor-57": 0.3478523006153093,
        "meteor-35": 0.2347059423708265,
        "meteor-188": 0.3191794716376686,
        "meteor-26": 0.3934880369688972,
        "meteor-173": 0.28095647232795684,
        "meteor-139": 0.33032839538304687,
        "meteor-22": 0.273806763213772,
        "meteor-151": 0.3686372260924491,
        "meteor-108": 0.26943570056871474,
        "meteor-8": 0.25196529792477984,
        "meteor-7": 0.41826539380827765,
        "meteor-23": 0.27498052400672435,
        "meteor-55": 0.3395537688406404,
        "meteor-59": 0.36714588235849005,
        "ruby-163": 0.2112068965517241,
        "ruby-28": 0.18534482758620685,
        "ruby-6": 0.23275862068965514,
        "ruby-189": 0.26724137931034486,
        "ruby-70": 0.1594827586206896,
        "ruby-62": 0.3656509695290858,
        "ruby-57": 0.21863799283154117,
        "ruby-35": 0.15517241379310343,
        "ruby-188": 0.3318965517241379,
        "ruby-26": 0.27155172413793105,
        "ruby-173": 0.25,
        "ruby-139": 0.21982758620689657,
        "ruby-22": 0.24137931034482762,
        "ruby-151": 0.44396551724137934,
        "ruby-108": 0.22413793103448276,
        "ruby-8": 0.17672413793103448,
        "ruby-7": 0.26857142857142857,
        "ruby-23": 0.09913793103448276,
        "ruby-55": 0.22413793103448276,
        "ruby-59": 0.2902097902097902,
        "codebertscore_f1-163": 0.7431080341339111,
        "codebertscore_f3-163": 0.7366625666618347,
        "codebertscore_f1-28": 0.7636690139770508,
        "codebertscore_f3-28": 0.7481623291969299,
        "codebertscore_f1-6": 0.7763386368751526,
        "codebertscore_f3-6": 0.7585415840148926,
        "codebertscore_f1-189": 0.7651099562644958,
        "codebertscore_f3-189": 0.7720921635627747,
        "codebertscore_f1-70": 0.7055211663246155,
        "codebertscore_f3-70": 0.7035422921180725,
        "codebertscore_f1-62": 0.8028147220611572,
        "codebertscore_f3-62": 0.8063346743583679,
        "codebertscore_f1-57": 0.7456567287445068,
        "codebertscore_f3-57": 0.7666445374488831,
        "codebertscore_f1-35": 0.7310506701469421,
        "codebertscore_f3-35": 0.7597959041595459,
        "codebertscore_f1-188": 0.7859542369842529,
        "codebertscore_f3-188": 0.7891401648521423,
        "codebertscore_f1-26": 0.8235435485839844,
        "codebertscore_f3-26": 0.8143623471260071,
        "codebertscore_f1-173": 0.7683489322662354,
        "codebertscore_f3-173": 0.7422010898590088,
        "codebertscore_f1-139": 0.7773738503456116,
        "codebertscore_f3-139": 0.7730557322502136,
        "codebertscore_f1-22": 0.7745041847229004,
        "codebertscore_f3-22": 0.7407609820365906,
        "codebertscore_f1-151": 0.8229715824127197,
        "codebertscore_f3-151": 0.8129652738571167,
        "codebertscore_f1-108": 0.7671110033988953,
        "codebertscore_f3-108": 0.7467862963676453,
        "codebertscore_f1-8": 0.7562357783317566,
        "codebertscore_f3-8": 0.7447393536567688,
        "codebertscore_f1-7": 0.7766925692558289,
        "codebertscore_f3-7": 0.7826501131057739,
        "codebertscore_f1-23": 0.7194701433181763,
        "codebertscore_f3-23": 0.7181986570358276,
        "codebertscore_f1-55": 0.7860648036003113,
        "codebertscore_f3-55": 0.7784302234649658,
        "codebertscore_f1-59": 0.7818883061408997,
        "codebertscore_f3-59": 0.7888860106468201,
        "codebertscore_s_f1-163": 0.7592304944992065,
        "codebertscore_s_f3-163": 0.75755375623703,
        "codebertscore_s_f1-28": 0.7760079503059387,
        "codebertscore_s_f3-28": 0.7677554488182068,
        "codebertscore_s_f1-6": 0.7857758402824402,
        "codebertscore_s_f3-6": 0.7707570791244507,
        "codebertscore_s_f1-189": 0.7698788642883301,
        "codebertscore_s_f3-189": 0.7808860540390015,
        "codebertscore_s_f1-70": 0.7179122567176819,
        "codebertscore_s_f3-70": 0.7194436192512512,
        "codebertscore_s_f1-62": 0.8110219836235046,
        "codebertscore_s_f3-62": 0.8118922114372253,
        "codebertscore_s_f1-57": 0.7643526792526245,
        "codebertscore_s_f3-57": 0.7915250062942505,
        "codebertscore_s_f1-35": 0.741998553276062,
        "codebertscore_s_f3-35": 0.7708385586738586,
        "codebertscore_s_f1-188": 0.7913439869880676,
        "codebertscore_s_f3-188": 0.7987415790557861,
        "codebertscore_s_f1-26": 0.8224624395370483,
        "codebertscore_s_f3-26": 0.8128905892372131,
        "codebertscore_s_f1-173": 0.7868365049362183,
        "codebertscore_s_f3-173": 0.7707065939903259,
        "codebertscore_s_f1-139": 0.7820262312889099,
        "codebertscore_s_f3-139": 0.7792977094650269,
        "codebertscore_s_f1-22": 0.8076856136322021,
        "codebertscore_s_f3-22": 0.7792800664901733,
        "codebertscore_s_f1-151": 0.8242989182472229,
        "codebertscore_s_f3-151": 0.8154416084289551,
        "codebertscore_s_f1-108": 0.7766984105110168,
        "codebertscore_s_f3-108": 0.7560185194015503,
        "codebertscore_s_f1-8": 0.7654052376747131,
        "codebertscore_s_f3-8": 0.7573983073234558,
        "codebertscore_s_f1-7": 0.7852305769920349,
        "codebertscore_s_f3-7": 0.7885891199111938,
        "codebertscore_s_f1-23": 0.7327479720115662,
        "codebertscore_s_f3-23": 0.7361584901809692,
        "codebertscore_s_f1-55": 0.7920349836349487,
        "codebertscore_s_f3-55": 0.7869328260421753,
        "codebertscore_s_f1-59": 0.7890105843544006,
        "codebertscore_s_f3-59": 0.7989330291748047,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-151": 3,
        "raw_gpt35_nsnr-151": "3",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nlong sum_squares(std::vector<long> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n"
        ],
        "simplified": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
        "task_id": "142",
        "188": "long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;",
        "grade-188": {
            "execution": 1
        },
        "30": "long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%3==0){\n      sum+=lst[i]*lst[i];\n    }\n    else if(i%4==0){\n      sum+=lst[i]*lst[i]*lst[i];\n    }\n    else{\n      sum+=lst[i];\n    }\n  }\n  return sum;",
        "grade-30": {
            "execution": 1
        },
        "7": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-7": {
            "execution": 1
        },
        "79": "int len = lst.size();\n\tlong sum = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tlst[i] = lst[i] * lst[i];\n\t\t}\n\t\tif (i % 4 == 0 && i % 3 != 0) {\n\t\t\tlst[i] = lst[i] * lst[i] * lst[i];\n\t\t}\n\t\tsum += lst[i];\n\t}\n\treturn sum;",
        "grade-79": {
            "execution": 1
        },
        "67": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += pow(lst[i], 2);\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += pow(lst[i], 3);\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-67": {
            "execution": 1
        },
        "61": "// This will be used to sum the values in the vector.\n  long result = 0;\n  // This is to get the lenght of the vector.\n  int n = lst.size();\n  // This will iterate through all of the elements in the vector.\n  for (int i = 0; i < n; i++) {\n    //This is to check if the current index is a multiple of 3.\n    if (i % 3 == 0) {\n      // This is to set the current element to its square.\n      lst[i] = lst[i] * lst[i];\n    }\n    // This is to check if the current index is a multiple of 4 and not a multiple of 3.\n    else if (i % 4 == 0 && i % 3 != 0) {\n      // This is to set the current element to its cube.\n      lst[i] = lst[i] * lst[i] * lst[i];\n    }\n    // This is to sum the values in the vector.\n    result += lst[i];\n  }\n  // This will return the sum of the elements in the vector.\n  return result;",
        "grade-61": {
            "execution": 1
        },
        "38": "// write your code here\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0 && i % 4 != 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-38": {
            "execution": 0
        },
        "28": "int sz = lst.size();\n  long sum = 0;\n  for(int i = 0; i < sz; i++) {\n    if(i % 3 == 0)\n      lst[i] = lst[i] * lst[i];\n    else if(i % 4 == 0 && i % 3 != 0)\n      lst[i] = lst[i] * lst[i] * lst[i];\n    sum += lst[i];\n  }\n  return sum;",
        "grade-28": {
            "execution": 1
        },
        "160": "assert(true);\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-160": {
            "execution": 1
        },
        "24": "long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0 && i%4!=0){\n            sum+=lst[i]*lst[i];\n        }\n        else if(i%4==0 && i%3!=0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum+=lst[i];\n        }\n    }\n    return sum;",
        "grade-24": {
            "execution": 0
        },
        "173": "int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i % 3 == 0){\n      lst[i] = lst[i] * lst[i];\n    }\n    if(i % 4 == 0 && i % 3 != 0){\n      lst[i] = lst[i] * lst[i] * lst[i];\n    }\n    sum += lst[i];\n  }\n  return sum;",
        "grade-173": {
            "execution": 1
        },
        "122": "long sum = 0;\n    int lst_len = lst.size();\n    for (int i = 0; i < lst_len; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-122": {
            "execution": 1
        },
        "9": "// Put your code here\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if(i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;",
        "grade-9": {
            "execution": 1
        },
        "8": "long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-8": {
            "execution": 1
        },
        "25": "long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 3 == 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 == 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-25": {
            "execution": 1
        },
        "58": "// write your code here and below\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-58": {
            "execution": 1
        },
        "63": "if (lst.size() == 0) return 0;\n\tstd::vector<long>::iterator it;\n\tint num = 0;\n\tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\tif (num % 3 == 0) {\n\t\t\t*it = pow(*it, 2);\n\t\t}\n\t\telse if (num % 4 == 0 && num % 3 != 0) {\n\t\t\t*it = pow(*it, 3);\n\t\t}\n\t\tnum++;\n\t}\n\tlong sum = 0;\n\tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\tsum += *it;\n\t}\n\treturn sum;",
        "grade-63": {
            "execution": 1
        },
        "149": "int l = lst.size();\n\tlong sum = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-149": {
            "execution": 1
        },
        "176": "long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += (lst[i] * lst[i]);\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += (lst[i] * lst[i] * lst[i]);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-176": {
            "execution": 1
        },
        "165": "long sum = 0;\n   for(int i = 0; i < lst.size(); i++){\n       if(i % 3 == 0){\n           lst[i] = lst[i] * lst[i];\n       }\n       if(i % 4 == 0 && i % 3 != 0){\n           lst[i] = lst[i] * lst[i] * lst[i];\n       }\n       sum += lst[i];\n   }\n   return sum;",
        "grade-165": {
            "execution": 1
        },
        "bleu-188": 0.9058007645020044,
        "bleu-30": 0.7973479929823689,
        "bleu-7": 0.730939632989089,
        "bleu-79": 0.6242018719823483,
        "bleu-67": 0.5589689605181173,
        "bleu-61": 0.26541270422273494,
        "bleu-38": 0.6389552621421583,
        "bleu-28": 0.6688653704440546,
        "bleu-160": 0.696293956194317,
        "bleu-24": 0.6742928478262464,
        "bleu-173": 0.6887045970753046,
        "bleu-122": 0.723534802296838,
        "bleu-9": 0.640434310210595,
        "bleu-8": 0.7973479929823689,
        "bleu-25": 0.7973479929823689,
        "bleu-58": 0.6770395150552114,
        "bleu-63": 0.173881143973363,
        "bleu-149": 0.6741582269502514,
        "bleu-176": 0.6290300358750195,
        "bleu-165": 0.6786737939296921,
        "codebleu-188": 0.8698254265910912,
        "codebleu-30": 0.8201431335458087,
        "codebleu-7": 0.8024731979266749,
        "codebleu-79": 0.7717607247628472,
        "codebleu-67": 0.6934578461193971,
        "codebleu-61": 0.7253852664766355,
        "codebleu-38": 0.77565190837183,
        "codebleu-28": 0.7844008438701363,
        "codebleu-160": 0.7980077619736435,
        "codebleu-24": 0.7796091321751437,
        "codebleu-173": 0.7794010355047822,
        "codebleu-122": 0.8162687697939326,
        "codebleu-9": 0.7718478363816352,
        "codebleu-8": 0.821970658862262,
        "codebleu-25": 0.821970658862262,
        "codebleu-58": 0.79662064073054,
        "codebleu-63": 0.5754588920160609,
        "codebleu-149": 0.7978496593268544,
        "codebleu-176": 0.7931768303052477,
        "codebleu-165": 0.7763491389606209,
        "chrf-188": 0.8892913872181828,
        "chrf-30": 0.828942983123199,
        "chrf-7": 0.8164775473312822,
        "chrf-79": 0.6986903384642907,
        "chrf-67": 0.6168054708130928,
        "chrf-61": 0.4167541881439767,
        "chrf-38": 0.782368248658899,
        "chrf-28": 0.7431519289025046,
        "chrf-160": 0.8021254558057322,
        "chrf-24": 0.8030988149887555,
        "chrf-173": 0.7495735731650541,
        "chrf-122": 0.783309434978451,
        "chrf-9": 0.7185152134509988,
        "chrf-8": 0.828942983123199,
        "chrf-25": 0.828942983123199,
        "chrf-58": 0.7860021065311673,
        "chrf-63": 0.35681717269219493,
        "chrf-149": 0.787957655871025,
        "chrf-176": 0.7207728219674477,
        "chrf-165": 0.729502278229178,
        "rougel-188": 0.96,
        "rougel-30": 0.9392265193370166,
        "rougel-7": 0.8994708994708996,
        "rougel-79": 0.7731958762886598,
        "rougel-67": 0.7608695652173912,
        "rougel-61": 0.4615384615384615,
        "rougel-38": 0.8374384236453203,
        "rougel-28": 0.7958115183246074,
        "rougel-160": 0.8762886597938144,
        "rougel-24": 0.8629441624365481,
        "rougel-173": 0.8465608465608465,
        "rougel-122": 0.8602150537634408,
        "rougel-9": 0.8102564102564103,
        "rougel-8": 0.9392265193370166,
        "rougel-25": 0.9392265193370166,
        "rougel-58": 0.8629441624365481,
        "rougel-63": 0.401673640167364,
        "rougel-149": 0.8350515463917525,
        "rougel-176": 0.8704663212435234,
        "rougel-165": 0.835978835978836,
        "meteor-188": 0.9757904647642809,
        "meteor-30": 0.980053781112537,
        "meteor-7": 0.9361114421293538,
        "meteor-79": 0.8154159152910714,
        "meteor-67": 0.6811781004489338,
        "meteor-61": 0.6819615265620658,
        "meteor-38": 0.9185277975468206,
        "meteor-28": 0.8258349669728721,
        "meteor-160": 0.9308523890836832,
        "meteor-24": 0.9246993169032381,
        "meteor-173": 0.8467902698448373,
        "meteor-122": 0.9812573904358062,
        "meteor-9": 0.8329054433221099,
        "meteor-8": 0.980053781112537,
        "meteor-25": 0.980053781112537,
        "meteor-58": 0.927725225402551,
        "meteor-63": 0.39680288935377417,
        "meteor-149": 0.9185152032017053,
        "meteor-176": 0.8753095309453102,
        "meteor-165": 0.8385522598870055,
        "ruby-188": 0.9431818181818182,
        "ruby-30": 0.8936170212765957,
        "ruby-7": 0.8235294117647058,
        "ruby-79": 0.6542056074766356,
        "ruby-67": 0.6494845360824743,
        "ruby-61": 0.2941176470588235,
        "ruby-38": 0.7241379310344828,
        "ruby-28": 0.6730769230769231,
        "ruby-160": 0.7850467289719626,
        "ruby-24": 0.7636363636363637,
        "ruby-173": 0.7745098039215687,
        "ruby-122": 0.7575757575757576,
        "ruby-9": 0.7222222222222222,
        "ruby-8": 0.8936170212765957,
        "ruby-25": 0.8936170212765957,
        "ruby-58": 0.7636363636363637,
        "ruby-63": 0.2763157894736842,
        "ruby-149": 0.7102803738317758,
        "ruby-176": 0.7830188679245282,
        "ruby-165": 0.7647058823529411,
        "codebertscore_f1-188": 0.9645189046859741,
        "codebertscore_f3-188": 0.9645189642906189,
        "codebertscore_f1-30": 0.9776012301445007,
        "codebertscore_f3-30": 0.9776012897491455,
        "codebertscore_f1-7": 0.9495499134063721,
        "codebertscore_f3-7": 0.9526323080062866,
        "codebertscore_f1-79": 0.9204042553901672,
        "codebertscore_f3-79": 0.9202083945274353,
        "codebertscore_f1-67": 0.9215125441551208,
        "codebertscore_f3-67": 0.923408567905426,
        "codebertscore_f1-61": 0.7384375929832458,
        "codebertscore_f3-61": 0.8182608485221863,
        "codebertscore_f1-38": 0.894202709197998,
        "codebertscore_f3-38": 0.9134466052055359,
        "codebertscore_f1-28": 0.9207528233528137,
        "codebertscore_f3-28": 0.9288429021835327,
        "codebertscore_f1-160": 0.9361706972122192,
        "codebertscore_f3-160": 0.9439175128936768,
        "codebertscore_f1-24": 0.9409604072570801,
        "codebertscore_f3-24": 0.9478842616081238,
        "codebertscore_f1-173": 0.9304041862487793,
        "codebertscore_f3-173": 0.9270908832550049,
        "codebertscore_f1-122": 0.9290210008621216,
        "codebertscore_f3-122": 0.9334051609039307,
        "codebertscore_f1-9": 0.8875349164009094,
        "codebertscore_f3-9": 0.8986515402793884,
        "codebertscore_f1-8": 0.9420592784881592,
        "codebertscore_f3-8": 0.9420512318611145,
        "codebertscore_f1-25": 0.9578606486320496,
        "codebertscore_f3-25": 0.9578605890274048,
        "codebertscore_f1-58": 0.8918813467025757,
        "codebertscore_f3-58": 0.914304256439209,
        "codebertscore_f1-63": 0.8134838938713074,
        "codebertscore_f3-63": 0.8326496481895447,
        "codebertscore_f1-149": 0.9378136396408081,
        "codebertscore_f3-149": 0.9447029829025269,
        "codebertscore_f1-176": 0.9297417402267456,
        "codebertscore_f3-176": 0.9327448606491089,
        "codebertscore_f1-165": 0.9149385690689087,
        "codebertscore_f3-165": 0.9117916822433472,
        "codebertscore_s_f1-188": 0.96436607837677,
        "codebertscore_s_f3-188": 0.96436607837677,
        "codebertscore_s_f1-30": 0.9788886308670044,
        "codebertscore_s_f3-30": 0.9792587161064148,
        "codebertscore_s_f1-7": 0.9500139951705933,
        "codebertscore_s_f3-7": 0.9533326029777527,
        "codebertscore_s_f1-79": 0.925648033618927,
        "codebertscore_s_f3-79": 0.9249880909919739,
        "codebertscore_s_f1-67": 0.9179436564445496,
        "codebertscore_s_f3-67": 0.9199403524398804,
        "codebertscore_s_f1-61": 0.7722876667976379,
        "codebertscore_s_f3-61": 0.8556745648384094,
        "codebertscore_s_f1-38": 0.908917248249054,
        "codebertscore_s_f3-38": 0.9276098608970642,
        "codebertscore_s_f1-28": 0.9261040687561035,
        "codebertscore_s_f3-28": 0.933443009853363,
        "codebertscore_s_f1-160": 0.9398760795593262,
        "codebertscore_s_f3-160": 0.948576807975769,
        "codebertscore_s_f1-24": 0.9493688344955444,
        "codebertscore_s_f3-24": 0.9565625786781311,
        "codebertscore_s_f1-173": 0.9316583275794983,
        "codebertscore_s_f3-173": 0.928901195526123,
        "codebertscore_s_f1-122": 0.9379603266716003,
        "codebertscore_s_f3-122": 0.9428026080131531,
        "codebertscore_s_f1-9": 0.9011959433555603,
        "codebertscore_s_f3-9": 0.9126697778701782,
        "codebertscore_s_f1-8": 0.9543207883834839,
        "codebertscore_s_f3-8": 0.9547499418258667,
        "codebertscore_s_f1-25": 0.960982620716095,
        "codebertscore_s_f3-25": 0.961333692073822,
        "codebertscore_s_f1-58": 0.9078642725944519,
        "codebertscore_s_f3-58": 0.9308517575263977,
        "codebertscore_s_f1-63": 0.8272547125816345,
        "codebertscore_s_f3-63": 0.8454169034957886,
        "codebertscore_s_f1-149": 0.9406708478927612,
        "codebertscore_s_f3-149": 0.9468272924423218,
        "codebertscore_s_f1-176": 0.9385303854942322,
        "codebertscore_s_f3-176": 0.9415202140808105,
        "codebertscore_s_f1-165": 0.9230343103408813,
        "codebertscore_s_f3-165": 0.9201594591140747,
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-149": 4,
        "raw_gpt35_nsnr-149": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-79": 3,
        "raw_gpt35_nswr-79": "3",
        "gpt35_nswr-67": 4,
        "raw_gpt35_nswr-67": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-160": 4,
        "raw_gpt35_nswr-160": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-149": 4,
        "raw_gpt35_nswr-149": "4",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n",
        "snippet": [
            "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
        "task_id": "93",
        "163": "/*\n        Complete this function\n    */",
        "grade-163": {
            "execution": 0
        },
        "28": "std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n            if (c == 'a') {\n                c = 'c';\n            } else if (c == 'e') {\n                c = 'g';\n            } else if (c == 'i') {\n                c = 'k';\n            } else if (c == 'o') {\n                c = 'q';\n            } else if (c == 'u') {\n                c = 'y';\n            }\n        }\n        result += c;\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string ret;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                ret += tolower(c);\n            } else {\n                ret += toupper(c);\n            }\n        }\n        if (c == 'A' || c == 'a') {\n            ret += 'C';\n        } else if (c == 'E' || c == 'e') {\n            ret += 'G';\n        } else if (c == 'I' || c == 'i') {\n            ret += 'K';\n        } else if (c == 'O' || c == 'o') {\n            ret += 'M';\n        } else if (c == 'U' || c == 'u') {\n            ret += 'Q';\n        } else {\n            ret += c;\n        }\n    }\n    return ret;",
        "grade-6": {
            "execution": 0
        },
        "189": "// Notes:\n    // 1) Make it so it only uses alphabets, not numbers or special characters.\n    // 2) convert to all lowercase / uppercase, to make it easier to do string\n    //    searches.\n    // 3) could use a map for vowels.\n    // 4) could use an array for the alphabet.\n    // Approach:\n    // 1) convert string to all lowercase / uppercase\n    // 2) iterate through the string, swap case of the letters\n    // 3) iterate through the string, search for vowels, if vowel is found,\n    //    replace with the letter 2 ahead of it in the alphabet.\n    // 4) return new string.\n    // Notes:\n    // 1) if we are swapping case anyways, don't bother doing it twice.\n    // 2) we can do a search for both vowel lower and upper case by making\n    //    the string to lowercase / uppercase beforehand.\n    // 3) Start out with a naive approach and get it working, then think\n    //    about how we can make it more efficient.  One way to make it\n    //    more efficient is by using the alphabet string to search for\n    //    vowels and their replacements.\n    // 4) We can increase performance by using an array for the alphabet.\n    //    This will make the search for vowels, and the letters 2 ahead\n    //    of them, much easier and faster.  We can use the index as the\n    //    offset to move ahead.\n    // 5) Another way to improve performance is to make use of our knowledge\n    //    of the english alphabet, and hard code it in our solution.  This\n    //    approach would be to hard code the 26 letters of the alphabet, and\n    //    use the index of the letter we are on to get the letter that\n    //    is 2 indexes ahead of it.  This way we don't have to search the\n    //    alphabet string.\n    // 6) This solution can be done in one pass through the string.\n    // 7) We can hard code the english alphabet in the solution, or we can\n    //    use a function to create it and pass it in.  I'll use a function\n    //    so I can easily",
        "grade-189": {
            "execution": 0
        },
        "70": "std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tstd::string newMessage = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar current = message[i];\n\t\tint position = alphabet.find(tolower(current));\n\t\tif (islower(current)) {\n\t\t\t//if current letter is a vowel, we change it to the letter \n\t\t\t//in position position + 2 in the alphabet\n\t\t\tif (current == 'a' || current == 'e' || current == 'i' || current == 'o' || current == 'u') {\n\t\t\t\tif (position + 2 > 25) {\n\t\t\t\t\tnewMessage += alphabet[position + 2 - 26];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewMessage += alphabet[position + 2];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if current letter is not a vowel, we upper it and add it to newMessage\n\t\t\telse {\n\t\t\t\tnewMessage += toupper(current);\n\t\t\t}\n\t\t}\n\t\t//if current letter is not a lowercase letter, we change it to lowercase\n\t\t//and add it to newMessage\n\t\telse {\n\t\t\tnewMessage += tolower(current);\n\t\t}\n\t}\n\treturn newMessage;",
        "grade-70": {
            "execution": 0
        },
        "62": "// check message is valid\n    if (message.empty()) {\n        return message;\n    }\n    std::string encoded;\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    for (char c : message) {\n        // convert capital letters to lowercase\n        char lower = std::tolower(c);\n        // if it's a vowel, replace with it's replacement\n        auto it = std::find(vowels.begin(), vowels.end(), lower);\n        if (it != vowels.end()) {\n            int index = std::distance(vowels.begin(), it);\n            char next_vowel = vowels[(index + 2) % vowels.size()];\n            encoded += next_vowel;\n        } else {\n            // otherwise just swap case\n            encoded += std::isupper(c) ? std::tolower(c) : std::toupper(c);\n        }\n    }\n    return encoded;",
        "grade-62": {
            "execution": 0
        },
        "57": "// TODO: Finish this function\n\t//std::string encoded = message;\n\tstd::string vowels = \"aeiou\";\n\tstd::string encoded;\n\t// upper case letters\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t// convert to lower case letter and push to encoded\n\t\t\tchar c = message[i] + 32;\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// lower case letters\n\t\telse if (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\t// convert to upper case letter and push to encoded\n\t\t\tchar c = message[i] - 32;\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// vowels\n\t\telse if (vowels.find(message[i]) != std::string::npos) {\n\t\t\t// convert to letter 2 ahead in alphabet and push to encoded\n\t\t\tint position = vowels.find(message[i]);\n\t\t\tchar c = vowels[(position + 2) % 5];\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// everything else\n\t\telse {\n\t\t\tencoded.push_back(message[i]);\n\t\t}\n\t}\n\treturn encoded;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string encoded = \"\";\n  for (auto c : message) {\n    if (c == ' ') {\n      encoded += ' ';\n      continue;\n    }\n    if (c >= 'a' && c <= 'z') {\n      c = (c - 'a' + 2) % 26 + 'A';\n    } else if (c >= 'A' && c <= 'Z') {\n      c = (c - 'A' + 2) % 26 + 'a';\n    }\n    if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n      c += 2;\n    } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      c -= 2;\n    }\n    encoded += c;\n  }\n  return encoded;",
        "grade-35": {
            "execution": 0
        },
        "188": "// this is a place holder function\n  return \"TGST\";",
        "grade-188": {
            "execution": 0
        },
        "26": "int len = message.length();\n    char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n    std::string encoded_string = \"\";\n    for (int i = 0; i < len; i++) {\n        char curr_char = message[i];\n        if(std::isupper(curr_char)) {\n            curr_char = tolower(curr_char);\n        }\n        else if(std::islower(curr_char)) {\n            curr_char = toupper(curr_char);\n        }\n        encoded_string += curr_char;\n    }\n    len = encoded_string.length();\n    std::string final_string = \"\";\n    for (int i = 0; i < len; i++) {\n        char curr_char = encoded_string[i];\n        bool is_vowel = false;\n        for (int j = 0; j < 5; j++) {\n            if(curr_char == vowels[j]) {\n                is_vowel = true;\n                break;\n            }\n        }\n        if(is_vowel) {\n            if(i >= len - 2) {\n                final_string += encoded_string[i];\n            }\n            else {\n                final_string += encoded_string[i + 2];\n            }\n        }\n        else {\n            final_string += encoded_string[i];\n        }\n    }\n    return final_string;",
        "grade-26": {
            "execution": 0
        },
        "173": "for (int i = 0; i < message.length(); i++) {\n    if (message[i] >= 'a' && message[i] <= 'z') {\n      message[i] = toupper(message[i]);\n    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      message[i] = tolower(message[i]);\n    }\n  }\n  std::map<char, char> vowels = {{'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'}};\n  for (int i = 0; i < message.length(); i++) {\n    if (vowels.find(message[i]) != vowels.end()) {\n      message[i] = vowels[message[i]];\n    }\n  }\n  return message;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::string rstr = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            rstr += std::toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            rstr += std::tolower(message[i]);\n        } else {\n            rstr += message[i];\n        }\n    }\n    std::cout << rstr << std::endl;\n    // encode vowels\n    std::string vowels = \"aeiou\";\n    std::string cvowels = \"eioua\";\n    std::string output = \"\";\n    for (int i = 0; i < rstr.length(); i++) {\n        int j = 0;\n        for (; j < vowels.length(); j++) {\n            if (vowels[j] == rstr[i]) {\n                output += cvowels[j];\n                break;\n            }\n        }\n        if (j == vowels.length()) {\n            output += rstr[i];\n        }\n    }\n    return output;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::string aa = \"AEIOU\";\n    std::string aacap = \"AEIOU\";\n    for (int i = 0; i < aa.length(); i++) {\n        aa[i] = aa[i] + 2;\n        aacap[i] = aacap[i] + 2;\n    }\n    for (int i = 0; i < message.length(); i++) {\n        int j = 0;\n        if (isupper(message[i])) {\n            while (j < aacap.length()) {\n                if (message[i] == aacap[j]) {\n                    message[i] = aa[j];\n                    break;\n                }\n                j++;\n            }\n            if (j == aacap.length()) {\n                message[i] = message[i] + 32;\n            }\n        } else if (islower(message[i])) {\n            while (j < aa.length()) {\n                if (message[i] == aa[j]) {\n                    message[i] = aacap[j];\n                    break;\n                }\n                j++;\n            }\n            if (j == aa.length()) {\n                message[i] = message[i] - 32;\n            }\n        }\n    }\n    return message;",
        "grade-22": {
            "execution": 0
        },
        "151": "for (size_t i = 0; i < message.size(); i++) {\n        message[i] = std::toupper(message[i]);\n    }\n    for (size_t i = 0; i < message.size(); i++) {\n        switch (message[i]) {\n            case 'A': message[i] = 'C'; break;\n            case 'E': message[i] = 'G'; break;\n            case 'I': message[i] = 'K'; break;\n            case 'O': message[i] = 'Q'; break;\n            case 'U': message[i] = 'S'; break;\n            case 'Y': message[i] = 'A'; break;\n            default: message[i] = std::tolower(message[i]); break;\n        }\n    }\n    return message;",
        "grade-151": {
            "execution": 0
        },
        "108": "char vowels[5] = {'a', 'e', 'i', 'o', 'u'};\n\tchar replaced_vowels[5] = {'c', 'g', 'k', 'o', 's'};\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar ch = message[i];\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\tch = ch - 'a' + 'A';\n\t\t} else if (ch >= 'A' && ch <= 'Z') {\n\t\t\tch = ch - 'A' + 'a';\n\t\t}\n\t\tfor (int j = 0; j < 5; j++) {\n\t\t\tif (ch == vowels[j]) {\n\t\t\t\tch = replaced_vowels[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult += ch;\n\t}\n\treturn result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (std::islower(message[i])) {\n            encoded_message += std::toupper(message[i]);\n        } else if (std::isupper(message[i])) {\n            encoded_message += std::tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"a\"), \"c\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"e\"), \"g\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"i\"), \"k\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"o\"), \"q\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"u\"), \"w\");\n    return encoded_message;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            if (message[i] == 'z') {\n                encoded += 'A';\n            } else {\n                encoded += (char)(message[i] - 'a' + 'A' + 1);\n            }\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            if (message[i] == 'Z') {\n                encoded += 'a';\n            } else {\n                encoded += (char)(message[i] - 'A' + 'a' + 1);\n            }\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;",
        "grade-7": {
            "execution": 0
        },
        "23": "//@TODO: YOUR CODE HERE\n    for(int i=0;i<message.length();i++){\n        if((message[i]>='a' && message[i]<='z') || (message[i]>='A' && message[i]<='Z')){\n            if(message[i]=='z'){\n                message[i]='b';\n            }\n            else if(message[i]=='Z'){\n                message[i]='B';\n            }\n            else{\n                message[i]+=2;\n            }\n        }\n        if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u' || message[i]=='A' || message[i]=='E' || message[i]=='I' || message[i]=='O' || message[i]=='U'){\n            message[i]='0';\n        }\n    }\n    return message;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i] - 32);\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += (char)(message[i] + 32);\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'a') {\n\t\t\tresult[i] = 'c';\n\t\t} else if (result[i] == 'e') {\n\t\t\tresult[i] = 'g';\n\t\t} else if (result[i] == 'i') {\n\t\t\tresult[i] = 'k';\n\t\t} else if (result[i] == 'o') {\n\t\t\tresult[i] = 'q';\n\t\t} else if (result[i] == 'u') {\n\t\t\tresult[i] = 'w';\n\t\t} else if (result[i] == 'A') {\n\t\t\tresult[i] = 'C';\n\t\t} else if (result[i] == 'E') {\n\t\t\tresult[i] = 'G';\n\t\t} else if (result[i] == 'I') {\n\t\t\tresult[i] = 'K';\n\t\t} else if (result[i] == 'O') {\n\t\t\tresult[i] = 'Q';\n\t\t} else if (result[i] == 'U') {\n\t\t\tresult[i] = 'W';\n\t\t}\n\t}\n\treturn result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string encoded = \"\";\n    std::string vowels = \"aeiou\";\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string new_alphabet = \"cdefghijklmnopqrstuvwxyzab\";\n    std::string new_vowels = \"\";\n    for (auto i = 0; i < vowels.size(); i++) {\n        new_vowels += new_alphabet[alphabet.find(vowels[i])];\n    }\n    for (auto i = 0; i < message.size(); i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n            encoded += new_vowels[vowels.find(message[i])];\n        } else if (alphabet.find(message[i]) != std::string::npos) {\n            encoded += new_alphabet[alphabet.find(message[i])];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.0,
        "bleu-28": 0.07131332529167145,
        "bleu-6": 0.050800294592609034,
        "bleu-189": 0.0032104838083083097,
        "bleu-70": 0.16577738732377617,
        "bleu-62": 0.15031381991927528,
        "bleu-57": 0.16165159752977853,
        "bleu-35": 0.07424464106056029,
        "bleu-188": 1.4384886849455536e-05,
        "bleu-26": 0.16573305068626357,
        "bleu-173": 0.20599873226828208,
        "bleu-139": 0.17992745531194992,
        "bleu-22": 0.1672102401689552,
        "bleu-151": 0.12213233134404149,
        "bleu-108": 0.21547200687774434,
        "bleu-8": 0.17339985107903055,
        "bleu-7": 0.2030019555219542,
        "bleu-23": 0.13133097874197427,
        "bleu-55": 0.1027700810540766,
        "bleu-59": 0.19590978895675795,
        "codebleu-163": 0.011363636363636362,
        "codebleu-28": 0.41399048342977757,
        "codebleu-6": 0.3776153230802646,
        "codebleu-189": 0.3439199689199689,
        "codebleu-70": 0.5821835048371292,
        "codebleu-62": 0.5444327514915073,
        "codebleu-57": 0.611464664652207,
        "codebleu-35": 0.4409024389434529,
        "codebleu-188": 0.03409338971875937,
        "codebleu-26": 0.6051447961257216,
        "codebleu-173": 0.5956433030896028,
        "codebleu-139": 0.5976568050296902,
        "codebleu-22": 0.6087907774011849,
        "codebleu-151": 0.4837564978780101,
        "codebleu-108": 0.5672515809815449,
        "codebleu-8": 0.5064253172406058,
        "codebleu-7": 0.516709725026959,
        "codebleu-23": 0.48262237191997376,
        "codebleu-55": 0.5730159493296587,
        "codebleu-59": 0.5517461779662768,
        "chrf-163": 0.020589333895629832,
        "chrf-28": 0.20878651354822722,
        "chrf-6": 0.19296542022014948,
        "chrf-189": 0.12646234254873587,
        "chrf-70": 0.3221033959076828,
        "chrf-62": 0.33755633444049016,
        "chrf-57": 0.35354105552308324,
        "chrf-35": 0.21024066416519588,
        "chrf-188": 0.04672930446831357,
        "chrf-26": 0.3236971348532489,
        "chrf-173": 0.38612285817177694,
        "chrf-139": 0.42254115658286806,
        "chrf-22": 0.33253409357153013,
        "chrf-151": 0.20351625639195572,
        "chrf-108": 0.4001890112426645,
        "chrf-8": 0.2621053573426222,
        "chrf-7": 0.3190311879254372,
        "chrf-23": 0.2518802762544884,
        "chrf-55": 0.26742116197040483,
        "chrf-59": 0.36182082978519525,
        "rougel-163": 0.0,
        "rougel-28": 0.3173431734317343,
        "rougel-6": 0.2741433021806854,
        "rougel-189": 0.07420494699646643,
        "rougel-70": 0.33962264150943394,
        "rougel-62": 0.31454005934718104,
        "rougel-57": 0.3856041131105398,
        "rougel-35": 0.29411764705882354,
        "rougel-188": 0.043795620437956206,
        "rougel-26": 0.3548387096774193,
        "rougel-173": 0.37900874635568516,
        "rougel-139": 0.3655352480417755,
        "rougel-22": 0.3799472295514512,
        "rougel-151": 0.27741935483870966,
        "rougel-108": 0.44648318042813456,
        "rougel-8": 0.3515850144092219,
        "rougel-7": 0.3741935483870968,
        "rougel-23": 0.2739018087855297,
        "rougel-55": 0.2727272727272727,
        "rougel-59": 0.39009287925696595,
        "meteor-163": 0.0,
        "meteor-28": 0.2414885193982581,
        "meteor-6": 0.26967737283514426,
        "meteor-189": 0.12195121951219512,
        "meteor-70": 0.3443311424119135,
        "meteor-62": 0.35395798062452977,
        "meteor-57": 0.44526975722101525,
        "meteor-35": 0.2875704965345969,
        "meteor-188": 0.017714791851195746,
        "meteor-26": 0.4080029709081146,
        "meteor-173": 0.4115516761073451,
        "meteor-139": 0.3995792637114951,
        "meteor-22": 0.39701220928893527,
        "meteor-151": 0.2710120586115014,
        "meteor-108": 0.3216428472770312,
        "meteor-8": 0.3085887443667554,
        "meteor-7": 0.3904761904761905,
        "meteor-23": 0.3021960805378741,
        "meteor-55": 0.33426170895970186,
        "meteor-59": 0.42041937180448863,
        "ruby-163": 0.0,
        "ruby-28": 0.19727891156462585,
        "ruby-6": 0.19796954314720816,
        "ruby-189": 0.04524886877828049,
        "ruby-70": 0.22672064777327938,
        "ruby-62": 0.18309859154929575,
        "ruby-57": 0.2603773584905661,
        "ruby-35": 0.18981481481481477,
        "ruby-188": 0.016129032258064502,
        "ruby-26": 0.2338709677419355,
        "ruby-173": 0.21461187214611877,
        "ruby-139": 0.2355212355212355,
        "ruby-22": 0.2588235294117647,
        "ruby-151": 0.19892473118279574,
        "ruby-108": 0.3497536945812808,
        "ruby-8": 0.23318385650224216,
        "ruby-7": 0.24193548387096775,
        "ruby-23": 0.16730038022813687,
        "ruby-55": 0.17015706806282727,
        "ruby-59": 0.2864321608040201,
        "codebertscore_f1-163": 0.5469738245010376,
        "codebertscore_f3-163": 0.5228831171989441,
        "codebertscore_f1-28": 0.7044677734375,
        "codebertscore_f3-28": 0.6896677613258362,
        "codebertscore_f1-6": 0.6915699243545532,
        "codebertscore_f3-6": 0.6880246996879578,
        "codebertscore_f1-189": 0.5858604311943054,
        "codebertscore_f3-189": 0.6256542801856995,
        "codebertscore_f1-70": 0.7067532539367676,
        "codebertscore_f3-70": 0.7377142310142517,
        "codebertscore_f1-62": 0.7233892679214478,
        "codebertscore_f3-62": 0.739234209060669,
        "codebertscore_f1-57": 0.7618071436882019,
        "codebertscore_f3-57": 0.8006113171577454,
        "codebertscore_f1-35": 0.7303003072738647,
        "codebertscore_f3-35": 0.7254953980445862,
        "codebertscore_f1-188": 0.5941939949989319,
        "codebertscore_f3-188": 0.5682279467582703,
        "codebertscore_f1-26": 0.732083261013031,
        "codebertscore_f3-26": 0.7508053183555603,
        "codebertscore_f1-173": 0.7875064611434937,
        "codebertscore_f3-173": 0.7750211358070374,
        "codebertscore_f1-139": 0.7602420449256897,
        "codebertscore_f3-139": 0.7713554501533508,
        "codebertscore_f1-22": 0.7404186725616455,
        "codebertscore_f3-22": 0.7421405911445618,
        "codebertscore_f1-151": 0.7057873010635376,
        "codebertscore_f3-151": 0.687075674533844,
        "codebertscore_f1-108": 0.7917587757110596,
        "codebertscore_f3-108": 0.8049563765525818,
        "codebertscore_f1-8": 0.7000105977058411,
        "codebertscore_f3-8": 0.7180586457252502,
        "codebertscore_f1-7": 0.7473657727241516,
        "codebertscore_f3-7": 0.729710578918457,
        "codebertscore_f1-23": 0.717156708240509,
        "codebertscore_f3-23": 0.7197830080986023,
        "codebertscore_f1-55": 0.7451677918434143,
        "codebertscore_f3-55": 0.7482840418815613,
        "codebertscore_f1-59": 0.7461882829666138,
        "codebertscore_f3-59": 0.7594282031059265,
        "codebertscore_s_f1-163": 0.5606204271316528,
        "codebertscore_s_f3-163": 0.5379089713096619,
        "codebertscore_s_f1-28": 0.7217369675636292,
        "codebertscore_s_f3-28": 0.7009619474411011,
        "codebertscore_s_f1-6": 0.7147446870803833,
        "codebertscore_s_f3-6": 0.7028955817222595,
        "codebertscore_s_f1-189": 0.6109379529953003,
        "codebertscore_s_f3-189": 0.6357893943786621,
        "codebertscore_s_f1-70": 0.722111701965332,
        "codebertscore_s_f3-70": 0.7456209659576416,
        "codebertscore_s_f1-62": 0.7419348359107971,
        "codebertscore_s_f3-62": 0.7575971484184265,
        "codebertscore_s_f1-57": 0.7770828008651733,
        "codebertscore_s_f3-57": 0.8128154277801514,
        "codebertscore_s_f1-35": 0.7318314909934998,
        "codebertscore_s_f3-35": 0.7255338430404663,
        "codebertscore_s_f1-188": 0.5787999629974365,
        "codebertscore_s_f3-188": 0.5471917390823364,
        "codebertscore_s_f1-26": 0.7647419571876526,
        "codebertscore_s_f3-26": 0.7694683074951172,
        "codebertscore_s_f1-173": 0.7971252799034119,
        "codebertscore_s_f3-173": 0.783537745475769,
        "codebertscore_s_f1-139": 0.7965041995048523,
        "codebertscore_s_f3-139": 0.8010326623916626,
        "codebertscore_s_f1-22": 0.7600672841072083,
        "codebertscore_s_f3-22": 0.7571113705635071,
        "codebertscore_s_f1-151": 0.7145729660987854,
        "codebertscore_s_f3-151": 0.6939454078674316,
        "codebertscore_s_f1-108": 0.7935359477996826,
        "codebertscore_s_f3-108": 0.8050649762153625,
        "codebertscore_s_f1-8": 0.7218068838119507,
        "codebertscore_s_f3-8": 0.7342867851257324,
        "codebertscore_s_f1-7": 0.7616708874702454,
        "codebertscore_s_f3-7": 0.7427624464035034,
        "codebertscore_s_f1-23": 0.7542187571525574,
        "codebertscore_s_f3-23": 0.7354240417480469,
        "codebertscore_s_f1-55": 0.7784857153892517,
        "codebertscore_s_f3-55": 0.7657354474067688,
        "codebertscore_s_f1-59": 0.7559998035430908,
        "codebertscore_s_f3-59": 0.7690098285675049,
        "gpt35_nsnr-163": 0,
        "raw_gpt35_nsnr-163": "3 - The code correctly swaps the case of all letters and replaces all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet. However, it does not handle spaces or non-letter characters in the message.",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 3,
        "raw_gpt35_nsnr-151": "3",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-189": 0,
        "raw_gpt35_nswr-189": "Score: 3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n",
        "snippet": [
            "    return n*n;\n}\n"
        ],
        "simplified": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
        "task_id": "41",
        "189": "assert(n > 0);\n  return n*(n-1);",
        "grade-189": {
            "execution": 0
        },
        "29": "if (n <= 1) {\n\t\treturn 0;\n\t}\n\tlong long res = n;\n\tlong long offset = 2;\n\twhile (n >= 2) {\n\t\tres += n * offset;\n\t\toffset *= 2;\n\t\tn /= 2;\n\t}\n\treturn res;",
        "grade-29": {
            "execution": 0
        },
        "6": "return n * (n - 1) / 2;",
        "grade-6": {
            "execution": 0
        },
        "77": "assert(n >= 1);\n    // pre: n >= 1\n    // post: We return the number of collisions.\n    if (n==1) return 0;\n    return n*n-n;\n    // We'll develop a formal inductive proof for this in the future.\n    // But for now, we'll do a heuristic argument.\n    // Think of the number of cars as n.  Each car on the left moves\n    // forward, one-by-one, colliding with all n cars on the right.\n    // In total, there are n collisions, the first car on the left\n    // collides with n cars on the right, then the second car on the left\n    // collides with n-1 cars on the right, etc.\n    // This is a geometric series with sum n(n+1)/2, or (n^2+n)/2.\n    // But we counted each collision twice, so the answer is (n^2+n)/2 - n = (n^2-n)/2.",
        "grade-77": {
            "execution": 0
        },
        "69": "assert(n > 0);\n    // your solution here\n    long numberOfPairs = (n*(n-1))/2;\n    return numberOfPairs;",
        "grade-69": {
            "execution": 0
        },
        "62": "// Write your code here\n    return n*(n-1);",
        "grade-62": {
            "execution": 0
        },
        "36": "// Write your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n    long num=0;\n    if(n<2) return 0;\n    long* a=new long[n];\n    long* b=new long[n];\n    for(long i=0;i<n;i++)\n    {\n        cin>>a[i];\n    }\n    for(long i=0;i<n;i++)\n    {\n        cin>>b[i];\n    }\n    sort(a,a+n);\n    sort(b,b+n);\n    for(long i=0;i<n;i++)\n    {\n        for(long j=0;j<n;j++)\n        {\n            if(a[i]>b[j]) num++;\n            else break;\n        }\n    }\n    return num;",
        "grade-36": {
            "execution": 0
        },
        "27": "long count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tfor (long j = 0; j < n; j++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-27": {
            "execution": 1
        },
        "159": "// Implement me\n    return 0;",
        "grade-159": {
            "execution": 0
        },
        "23": "// Create a vector of the positions of the cars\n  std::vector<long> right_to_left;\n  std::vector<long> left_to_right;\n  for (long i = 0; i < n; i++) {\n    right_to_left.push_back(i);\n    left_to_right.push_back(i);\n  }\n  // Now sort the two vectors.\n  std::sort(right_to_left.begin(), right_to_left.end());\n  std::sort(left_to_right.begin(), left_to_right.end());\n  // Now traverse the two vectors and see how many collisions there are.\n  long i = 0;\n  long j = 0;\n  long retval = 0;\n  while (i < n && j < n) {\n    if (right_to_left[i] == left_to_right[j]) {\n      retval++;\n      i++;\n      j++;\n    } else if (right_to_left[i] < left_to_right[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return retval;",
        "grade-23": {
            "execution": 0
        },
        "175": "long tp = 2*n;\n\tlong ar[tp];\n\tfor(long i=0;i<tp;i++)\n\t\tar[i] = 0;\n\tlong carpos = 0;\n\tlong collision = 0;\n\tlong nv;\n\tfor(long i=0;i<n;i++) {\n\t\tscanf(\"%ld\",&nv);\n\t\tif(ar[nv-1] == 0) {\n\t\t\tar[nv-1] = 1;\n\t\t\tcarpos++;\n\t\t}\n\t\telse\n\t\t\tcollision++;\n\t}\n\t\n\tfor(long i=0;i<n;i++) {\n\t\tscanf(\"%ld\",&nv);\n\t\tif(ar[nv-1] == 0) {\n\t\t\tar[nv-1] = 1;\n\t\t\tcarpos++;\n\t\t}\n\t\telse\n\t\t\tcollision++;\n\t}\n\t\n\tassert(carpos == tp);\n\t\n\treturn collision;",
        "grade-175": {
            "execution": 0
        },
        "123": "return n * (n-1) / 2;",
        "grade-123": {
            "execution": 0
        },
        "8": "return n*(n-1)/2;",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "24": "return n*(n-1);",
        "grade-24": {
            "execution": 0
        },
        "60": "int *a,*b;\n    long i,count=0;\n    a=(int *)malloc(n*sizeof(int));\n    b=(int *)malloc(n*sizeof(int));\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&b[i]);\n    }\n    for(i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(a[i]==b[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-60": {
            "execution": 0
        },
        "64": "// \tassert(n>=1);\n\treturn n*(n-1)/2;",
        "grade-64": {
            "execution": 0
        },
        "147": "long cars[n];\n\tlong cars1[n];\n\tfor (long i = 0; i < n; i++) {\n\t\tcars[i] = i;\n\t\tcars1[i] = n - i - 1;\n\t}\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < n && j < n) {\n\t\tif (cars[i] < cars1[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse if (cars[i] > cars1[j]) {\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\tresult++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;",
        "grade-147": {
            "execution": 0
        },
        "179": "long int count = 0;\n   long int i;\n   long int* a = new long int[n];\n   long int* b = new long int[n];\n   long int* c = new long int[n];\n   for(i=0;i<n;i++)\n   {\n      std::cin>>a[i];\n   }\n   for(i=0;i<n;i++)\n   {\n      std::cin>>b[i];\n   }\n   for(i=0;i<n;i++)\n   {\n      c[i] = a[i] - b[i];\n   }\n   for(i=0;i<n;i++)\n   {\n      for(long int j=i+1;j<n;j++)\n      {\n         if(c[i]>0&&c[j]<0)\n         {\n            count++;\n         }\n      }\n   }\n   return count;",
        "grade-179": {
            "execution": 0
        },
        "165": "int nb_collision = 0;\n    std::vector<bool> visited(n);\n    for (long i = 0; i < n; i++) {\n        long actual_car = i;\n        while (actual_car < n) {\n            long next_car = (actual_car + n) / 2;\n            if (next_car == actual_car) break;\n            if (visited[next_car]) break;\n            actual_car = next_car;\n            visited[actual_car] = true;\n            nb_collision++;\n        }\n    }\n    return nb_collision;",
        "grade-165": {
            "execution": 0
        },
        "bleu-189": 0.10343603005129705,
        "bleu-29": 0.023787060716545856,
        "bleu-6": 0.15851165692617147,
        "bleu-77": 0.011457400835658396,
        "bleu-69": 0.027374353552268277,
        "bleu-62": 0.11114924776032012,
        "bleu-36": 0.00609753673378402,
        "bleu-27": 0.02376865647368116,
        "bleu-159": 0.07809849842300637,
        "bleu-23": 0.005247580845368365,
        "bleu-175": 0.00975822630026877,
        "bleu-123": 0.15851165692617147,
        "bleu-8": 0.15851165692617147,
        "bleu-7": 0.12753667906901528,
        "bleu-24": 0.20164945583740657,
        "bleu-60": 0.007678839885469138,
        "bleu-64": 0.07681104116622756,
        "bleu-147": 0.008228881625766807,
        "bleu-179": 0.005779116352023946,
        "bleu-165": 0.011431875808409056,
        "codebleu-189": 0.48333333333333334,
        "codebleu-29": 0.5666666666666665,
        "codebleu-6": 0.48333333333333334,
        "codebleu-77": 0.5519095668059429,
        "codebleu-69": 0.48333333333333334,
        "codebleu-62": 0.48333333333333334,
        "codebleu-36": 0.6333333333333332,
        "codebleu-27": 0.48333333333333334,
        "codebleu-159": 0.36666666666666664,
        "codebleu-23": 0.4166666666666667,
        "codebleu-175": 0.5666666666666665,
        "codebleu-123": 0.48333333333333334,
        "codebleu-8": 0.48333333333333334,
        "codebleu-7": 0.19398639930459669,
        "codebleu-24": 0.48333333333333334,
        "codebleu-60": 0.6333333333333332,
        "codebleu-64": 0.48333333333333334,
        "codebleu-147": 0.4166666666666667,
        "codebleu-179": 0.5666666666666665,
        "codebleu-165": 0.48333333333333334,
        "chrf-189": 0.4920793600446891,
        "chrf-29": 0.1758447964755382,
        "chrf-6": 0.5930085993379205,
        "chrf-77": 0.05933967136563489,
        "chrf-69": 0.22559763010253453,
        "chrf-62": 0.4399257427658,
        "chrf-36": 0.0841221584126643,
        "chrf-27": 0.20073287104146365,
        "chrf-159": 0.3412334182725243,
        "chrf-23": 0.03932784050310238,
        "chrf-175": 0.07302228165399935,
        "chrf-123": 0.5930085993379205,
        "chrf-8": 0.5930085993379205,
        "chrf-7": 0.4313198182537462,
        "chrf-24": 0.6186285310106571,
        "chrf-60": 0.0907009434146712,
        "chrf-64": 0.45365388310548355,
        "chrf-147": 0.09142340903383692,
        "chrf-179": 0.07375601867148497,
        "chrf-165": 0.08695781925445718,
        "rougel-189": 0.45454545454545453,
        "rougel-29": 0.2033898305084746,
        "rougel-6": 0.5882352941176471,
        "rougel-77": 0.04405286343612334,
        "rougel-69": 0.2,
        "rougel-62": 0.47619047619047616,
        "rougel-36": 0.06349206349206349,
        "rougel-27": 0.15384615384615383,
        "rougel-159": 0.30769230769230765,
        "rougel-23": 0.038277511961722493,
        "rougel-175": 0.043243243243243246,
        "rougel-123": 0.5882352941176471,
        "rougel-8": 0.5882352941176471,
        "rougel-7": 0.4444444444444444,
        "rougel-24": 0.6666666666666667,
        "rougel-60": 0.05988023952095809,
        "rougel-64": 0.37037037037037035,
        "rougel-147": 0.05882352941176471,
        "rougel-179": 0.05025125628140703,
        "rougel-165": 0.08,
        "meteor-189": 0.6371428571428572,
        "meteor-29": 0.28037383177570097,
        "meteor-6": 0.6861538461538462,
        "meteor-77": 0.09090909090909093,
        "meteor-69": 0.4227272727272728,
        "meteor-62": 0.646376811594203,
        "meteor-36": 0.1265822784810127,
        "meteor-27": 0.25000000000000006,
        "meteor-159": 0.1639344262295082,
        "meteor-23": 0.09727626459143972,
        "meteor-175": 0.12875536480686697,
        "meteor-123": 0.6861538461538462,
        "meteor-8": 0.6861538461538462,
        "meteor-7": 0.17543859649122806,
        "meteor-24": 0.7079365079365081,
        "meteor-60": 0.13953488372093026,
        "meteor-64": 0.5946666666666668,
        "meteor-147": 0.13586956521739135,
        "meteor-179": 0.12145748987854253,
        "meteor-165": 0.16891891891891897,
        "ruby-189": 0.25,
        "ruby-29": 0.1132075471698113,
        "ruby-6": 0.36363636363636365,
        "ruby-77": 0.022624434389140302,
        "ruby-69": 0.11764705882352944,
        "ruby-62": 0.2666666666666667,
        "ruby-36": 0.032786885245901676,
        "ruby-27": 0.08695652173913049,
        "ruby-159": 0.0,
        "ruby-23": 0.019704433497536922,
        "ruby-175": 0.022346368715083775,
        "ruby-123": 0.36363636363636365,
        "ruby-8": 0.36363636363636365,
        "ruby-7": 0.33333333333333337,
        "ruby-24": 0.4444444444444444,
        "ruby-60": 0.03105590062111796,
        "ruby-64": 0.19047619047619047,
        "ruby-147": 0.03076923076923077,
        "ruby-179": 0.025906735751295318,
        "ruby-165": 0.04255319148936165,
        "codebertscore_f1-189": 0.8488266468048096,
        "codebertscore_f3-189": 0.902509868144989,
        "codebertscore_f1-29": 0.7440682053565979,
        "codebertscore_f3-29": 0.807000994682312,
        "codebertscore_f1-6": 0.8467795252799988,
        "codebertscore_f3-6": 0.9084171056747437,
        "codebertscore_f1-77": 0.6029682755470276,
        "codebertscore_f3-77": 0.7520965337753296,
        "codebertscore_f1-69": 0.7527859210968018,
        "codebertscore_f3-69": 0.8351068496704102,
        "codebertscore_f1-62": 0.8075658679008484,
        "codebertscore_f3-62": 0.9051308631896973,
        "codebertscore_f1-36": 0.5763793587684631,
        "codebertscore_f3-36": 0.6527175307273865,
        "codebertscore_f1-27": 0.7340370416641235,
        "codebertscore_f3-27": 0.7833121418952942,
        "codebertscore_f1-159": 0.6981737017631531,
        "codebertscore_f3-159": 0.6923928260803223,
        "codebertscore_f1-23": 0.5549489855766296,
        "codebertscore_f3-23": 0.6424714922904968,
        "codebertscore_f1-175": 0.6090718507766724,
        "codebertscore_f3-175": 0.7090571522712708,
        "codebertscore_f1-123": 0.848945677280426,
        "codebertscore_f3-123": 0.9105252623558044,
        "codebertscore_f1-8": 0.8628796935081482,
        "codebertscore_f3-8": 0.9265739917755127,
        "codebertscore_f1-7": 0.5815324187278748,
        "codebertscore_f3-7": 0.5524232387542725,
        "codebertscore_f1-24": 0.9026333689689636,
        "codebertscore_f3-24": 0.9482103586196899,
        "codebertscore_f1-60": 0.6023968458175659,
        "codebertscore_f3-60": 0.6885340809822083,
        "codebertscore_f1-64": 0.8033415675163269,
        "codebertscore_f3-64": 0.8813420534133911,
        "codebertscore_f1-147": 0.6464522480964661,
        "codebertscore_f3-147": 0.7136296629905701,
        "codebertscore_f1-179": 0.5905651450157166,
        "codebertscore_f3-179": 0.6647240519523621,
        "codebertscore_f1-165": 0.5996056795120239,
        "codebertscore_f3-165": 0.6666117906570435,
        "codebertscore_s_f1-189": 0.8577268123626709,
        "codebertscore_s_f3-189": 0.9287973642349243,
        "codebertscore_s_f1-29": 0.7561483979225159,
        "codebertscore_s_f3-29": 0.8379430174827576,
        "codebertscore_s_f1-6": 0.8421757817268372,
        "codebertscore_s_f3-6": 0.920242965221405,
        "codebertscore_s_f1-77": 0.6475194692611694,
        "codebertscore_s_f3-77": 0.813194215297699,
        "codebertscore_s_f1-69": 0.7612869143486023,
        "codebertscore_s_f3-69": 0.8638843894004822,
        "codebertscore_s_f1-62": 0.806275486946106,
        "codebertscore_s_f3-62": 0.920729398727417,
        "codebertscore_s_f1-36": 0.6186532974243164,
        "codebertscore_s_f3-36": 0.6977257132530212,
        "codebertscore_s_f1-27": 0.7227595448493958,
        "codebertscore_s_f3-27": 0.7712911367416382,
        "codebertscore_s_f1-159": 0.6687091588973999,
        "codebertscore_s_f3-159": 0.675468385219574,
        "codebertscore_s_f1-23": 0.5927226543426514,
        "codebertscore_s_f3-23": 0.6796692609786987,
        "codebertscore_s_f1-175": 0.6501348614692688,
        "codebertscore_s_f3-175": 0.7609961032867432,
        "codebertscore_s_f1-123": 0.839830219745636,
        "codebertscore_s_f3-123": 0.9194287657737732,
        "codebertscore_s_f1-8": 0.8523712158203125,
        "codebertscore_s_f3-8": 0.9339701533317566,
        "codebertscore_s_f1-7": 0.7149482369422913,
        "codebertscore_s_f3-7": 0.6829842329025269,
        "codebertscore_s_f1-24": 0.8972316980361938,
        "codebertscore_s_f3-24": 0.9529067873954773,
        "codebertscore_s_f1-60": 0.6383888721466064,
        "codebertscore_s_f3-60": 0.7271193861961365,
        "codebertscore_s_f1-64": 0.8211097121238708,
        "codebertscore_s_f3-64": 0.9154531359672546,
        "codebertscore_s_f1-147": 0.6658200621604919,
        "codebertscore_s_f3-147": 0.7342438101768494,
        "codebertscore_s_f1-179": 0.624832808971405,
        "codebertscore_s_f3-179": 0.7002632021903992,
        "codebertscore_s_f1-165": 0.6415377259254456,
        "codebertscore_s_f3-165": 0.7051582336425781,
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-69": 3,
        "raw_gpt35_nsnr-69": "3",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "3 - The code snippet only calculates the total number of collisions based on the number of cars, but it does not take into account the fact that the cars are moving in opposite directions. Therefore, it will overestimate the number of collisions. However, the code snippet is correct in terms of calculating the number of collisions between cars moving in the same direction.",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-27": 2,
        "raw_gpt35_nsnr-27": "2",
        "gpt35_nsnr-159": 0,
        "raw_gpt35_nsnr-159": "Score: 0",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-175": 3,
        "raw_gpt35_nsnr-175": "3",
        "gpt35_nsnr-123": 4,
        "raw_gpt35_nsnr-123": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-60": 2,
        "raw_gpt35_nsnr-60": "2",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-179": 3,
        "raw_gpt35_nsnr-179": "3",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-123": 4,
        "raw_gpt35_nswr-123": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-147": 4,
        "raw_gpt35_nswr-147": "4",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n// False\nbool is_palindrome(std::string text) {\n",
        "snippet": [
            "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n"
        ],
        "simplified": "Checks if given string is a palindrome",
        "task_id": "48",
        "186": "// Implement this function\n    int n = text.length();\n    int i=0;\n    int j=n-1;\n    while(i<j){\n        if(text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;",
        "grade-186": {
            "execution": 1
        },
        "28": "std::string a = text;\n    std::reverse(a.begin(), a.end());\n    return a == text;",
        "grade-28": {
            "execution": 1
        },
        "6": "int start = 0;\n  int end = text.length() - 1;\n  while (start < end) {\n    if (text[start] != text[end]) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;",
        "grade-6": {
            "execution": 1
        },
        "77": "int length = text.length();\n    for (int i = 0; i < length/2; i++) {\n        if (text[i] != text[length-i-1]) {\n            return false;\n        }\n    }\n    return true;",
        "grade-77": {
            "execution": 1
        },
        "65": "for (int i = 0; i < text.size() / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;",
        "grade-65": {
            "execution": 1
        },
        "58": "bool isPalindrome = true;\n  for (int i = 0; i < text.length() / 2; i++) {\n    if (text[i] != text[text.length() - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;",
        "grade-58": {
            "execution": 1
        },
        "36": "int i = 0;\n  int j = text.length() - 1;\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;",
        "grade-36": {
            "execution": 1
        },
        "26": "int count = 0;\n\tint text_length = text.length();\n\tfor (int i = 0; i < text_length; i++) {\n\t\tif (text[i] == text[text_length - i - 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == text_length) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-26": {
            "execution": 1
        },
        "157": "// Implement this function\n  // return true;\n  int start = 0;\n  int end = text.length() - 1;\n  while (start < end) {\n    if (text[start] != text[end]) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;",
        "grade-157": {
            "execution": 1
        },
        "22": "//!TODO\n  // return false;\n  string::iterator itr, itr2;\n  int x;\n  if(text.size() % 2 == 0)\n  {\n    x = text.size()/2;\n    itr = text.begin() + x;\n    itr2 = text.end() - x;\n  }\n  else\n  {\n    x = text.size()/2;\n    itr = text.begin() + x;\n    itr2 = text.end() - x;\n  }\n  for(int i = 0; i < x; i++)\n  {\n    if(*itr != *itr2)\n    {\n      return false;\n    }\n    else\n    {\n      itr++;\n      itr2--;\n    }\n  }\n  return true;",
        "grade-22": {
            "execution": 0
        },
        "171": "int i = 0;\n   int len = text.length();\n   int j = len - 1;\n   while (i < j) {\n       if (text[i] != text[j]) {\n           return false;\n       }\n       i++;\n       j--;\n   }\n   return true;",
        "grade-171": {
            "execution": 1
        },
        "122": "std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n  std::regex non_alnum(\"[^a-z0-9]\");\n  text = std::regex_replace(text, non_alnum, \"\");\n  std::string reversed(text.rbegin(), text.rend());\n  return text == reversed;",
        "grade-122": {
            "execution": 1
        },
        "8": "// YOUR CODE HERE\n    int n = text.length();\n    for(int i=0;i<n/2;i++){\n        if(text[i]!=text[n-i-1])\n            return false;\n    }\n    return true;",
        "grade-8": {
            "execution": 1
        },
        "7": "// WIP\n    int N = text.length();\n    int mid = floor(N/2);\n    for(int i=0; i<mid; i++){\n        if(text[i]!=text[N-i-1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-7": {
            "execution": 1
        },
        "23": "auto head = text.begin();\n    auto tail = text.end() - 1;\n    while (head < tail) {\n        if (*head != *tail) {\n            return false;\n        }\n        head++;\n        tail--;\n    }\n    return true;",
        "grade-23": {
            "execution": 1
        },
        "56": "// assert(false);\n\tint i=0,j=text.length()-1;\n\twhile(i<j){\n\t\tif(text[i]!=text[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;",
        "grade-56": {
            "execution": 1
        },
        "61": "int n = text.length();\n    std::string text2 = text;\n    std::reverse(text2.begin(), text2.end());\n    // Check if text is palindrome\n    if (text == text2) {\n        return true;\n    }\n    else {\n        return false;\n    }",
        "grade-61": {
            "execution": 1
        },
        "146": "return std::equal(text.begin(), text.begin() + text.size()/2, text.rbegin());",
        "grade-146": {
            "execution": 1
        },
        "175": "for (int i = 0; i < text.size() / 2; i++) {\n    if (text[i] != text[text.size() - i - 1])\n      return false;\n  }\n  return true;",
        "grade-175": {
            "execution": 1
        },
        "162": "// your code here\n    return text == std::string(text.rbegin(), text.rend());",
        "grade-162": {
            "execution": 1
        },
        "bleu-186": 0.03026857534381489,
        "bleu-28": 0.23767486329551546,
        "bleu-6": 0.03453783827607845,
        "bleu-77": 0.036148515178385375,
        "bleu-65": 0.03889818545474848,
        "bleu-58": 0.031938235031437105,
        "bleu-36": 0.03453783827607845,
        "bleu-26": 0.03880721822253889,
        "bleu-157": 0.02891989214254276,
        "bleu-22": 0.020867023998948343,
        "bleu-171": 0.03294821718612274,
        "bleu-122": 0.17407755348730775,
        "bleu-8": 0.03415782624590782,
        "bleu-7": 0.02978412182027359,
        "bleu-23": 0.03756878591608447,
        "bleu-56": 0.03286940361054149,
        "bleu-61": 0.09193376399006851,
        "bleu-146": 0.29487462243304613,
        "bleu-175": 0.04050307057077382,
        "bleu-162": 0.5373308818174939,
        "codebleu-186": 0.5493827160493826,
        "codebleu-28": 0.719767925975416,
        "codebleu-6": 0.5493827160493826,
        "codebleu-77": 0.5308641975308641,
        "codebleu-65": 0.5864197530864197,
        "codebleu-58": 0.611111111111111,
        "codebleu-36": 0.5493827160493826,
        "codebleu-26": 0.5679012345679011,
        "codebleu-157": 0.5493827160493826,
        "codebleu-22": 0.6790123456790123,
        "codebleu-171": 0.5493827160493826,
        "codebleu-122": 0.7438729290404227,
        "codebleu-8": 0.5308641975308641,
        "codebleu-7": 0.5308641975308641,
        "codebleu-23": 0.6234567901234568,
        "codebleu-56": 0.574074074074074,
        "codebleu-61": 0.728493957546567,
        "codebleu-146": 0.6278786848546236,
        "codebleu-175": 0.5864197530864197,
        "codebleu-162": 0.7274196370813598,
        "chrf-186": 0.2508542455016101,
        "chrf-28": 0.51744688106173,
        "chrf-6": 0.26594297419649926,
        "chrf-77": 0.2700279291503876,
        "chrf-65": 0.2804309949975981,
        "chrf-58": 0.26595268898189345,
        "chrf-36": 0.2707371157179188,
        "chrf-26": 0.2364007704913768,
        "chrf-157": 0.2413272869972732,
        "chrf-22": 0.26853247010717757,
        "chrf-171": 0.2637331054473408,
        "chrf-122": 0.46856714624169626,
        "chrf-8": 0.2699994415022953,
        "chrf-7": 0.2657921311547724,
        "chrf-23": 0.3091422386324115,
        "chrf-56": 0.26463418471681144,
        "chrf-61": 0.4323513187800252,
        "chrf-146": 0.48138768600943543,
        "chrf-175": 0.2823509176026315,
        "chrf-162": 0.6676734653373368,
        "rougel-186": 0.23255813953488372,
        "rougel-28": 0.5818181818181818,
        "rougel-6": 0.26315789473684215,
        "rougel-77": 0.26315789473684215,
        "rougel-65": 0.3466666666666667,
        "rougel-58": 0.3023255813953488,
        "rougel-36": 0.26315789473684215,
        "rougel-26": 0.25263157894736843,
        "rougel-157": 0.23255813953488372,
        "rougel-22": 0.20481927710843373,
        "rougel-171": 0.24691358024691357,
        "rougel-122": 0.3486238532110092,
        "rougel-8": 0.25316455696202533,
        "rougel-7": 0.27586206896551724,
        "rougel-23": 0.3157894736842105,
        "rougel-56": 0.29268292682926833,
        "rougel-61": 0.3614457831325301,
        "rougel-146": 0.4642857142857143,
        "rougel-175": 0.3561643835616438,
        "rougel-162": 0.6,
        "meteor-186": 0.3484519675925925,
        "meteor-28": 0.6742337594648984,
        "meteor-6": 0.36185396634615385,
        "meteor-77": 0.36185396634615385,
        "meteor-65": 0.3827604173624935,
        "meteor-58": 0.36716647443291045,
        "meteor-36": 0.36185396634615385,
        "meteor-26": 0.3813844086021505,
        "meteor-157": 0.3484519675925925,
        "meteor-22": 0.27142857142857146,
        "meteor-171": 0.3550265330188679,
        "meteor-122": 0.6772610921501707,
        "meteor-8": 0.35772635456273766,
        "meteor-7": 0.34716616697416974,
        "meteor-23": 0.3076923076923077,
        "meteor-56": 0.3726877748003226,
        "meteor-61": 0.49913370060277856,
        "meteor-146": 0.4650000000000001,
        "meteor-175": 0.3857390976532522,
        "meteor-162": 0.7527760020834814,
        "ruby-186": 0.15873015873015872,
        "ruby-28": 0.46875,
        "ruby-6": 0.18867924528301883,
        "ruby-77": 0.16981132075471694,
        "ruby-65": 0.1923076923076923,
        "ruby-58": 0.2063492063492064,
        "ruby-36": 0.18867924528301883,
        "ruby-26": 0.1527777777777778,
        "ruby-157": 0.15873015873015872,
        "ruby-22": 0.11888111888111885,
        "ruby-171": 0.1724137931034483,
        "ruby-122": 0.2093023255813954,
        "ruby-8": 0.1607142857142857,
        "ruby-7": 0.1875,
        "ruby-23": 0.2264150943396226,
        "ruby-56": 0.18644067796610164,
        "ruby-61": 0.25,
        "ruby-146": 0.33333333333333337,
        "ruby-175": 0.19999999999999996,
        "ruby-162": 0.2592592592592593,
        "codebertscore_f1-186": 0.6844640374183655,
        "codebertscore_f3-186": 0.720485270023346,
        "codebertscore_f1-28": 0.8363988995552063,
        "codebertscore_f3-28": 0.8543356657028198,
        "codebertscore_f1-6": 0.7394165396690369,
        "codebertscore_f3-6": 0.7738701105117798,
        "codebertscore_f1-77": 0.7245661616325378,
        "codebertscore_f3-77": 0.7652826309204102,
        "codebertscore_f1-65": 0.7356724143028259,
        "codebertscore_f3-65": 0.7697126865386963,
        "codebertscore_f1-58": 0.7197936773300171,
        "codebertscore_f3-58": 0.7650482654571533,
        "codebertscore_f1-36": 0.7381851673126221,
        "codebertscore_f3-36": 0.7723897099494934,
        "codebertscore_f1-26": 0.7201966643333435,
        "codebertscore_f3-26": 0.7592777013778687,
        "codebertscore_f1-157": 0.7119289040565491,
        "codebertscore_f3-157": 0.746874213218689,
        "codebertscore_f1-22": 0.6695145964622498,
        "codebertscore_f3-22": 0.7409930229187012,
        "codebertscore_f1-171": 0.7183018922805786,
        "codebertscore_f3-171": 0.7555624842643738,
        "codebertscore_f1-122": 0.7853450775146484,
        "codebertscore_f3-122": 0.8560707569122314,
        "codebertscore_f1-8": 0.6995444297790527,
        "codebertscore_f3-8": 0.7436664700508118,
        "codebertscore_f1-7": 0.702659010887146,
        "codebertscore_f3-7": 0.7444230318069458,
        "codebertscore_f1-23": 0.7428019046783447,
        "codebertscore_f3-23": 0.7888167500495911,
        "codebertscore_f1-56": 0.7257086634635925,
        "codebertscore_f3-56": 0.7658368945121765,
        "codebertscore_f1-61": 0.7621395587921143,
        "codebertscore_f3-61": 0.7981963157653809,
        "codebertscore_f1-146": 0.8221420645713806,
        "codebertscore_f3-146": 0.8351978063583374,
        "codebertscore_f1-175": 0.7353566884994507,
        "codebertscore_f3-175": 0.7694112658500671,
        "codebertscore_f1-162": 0.8593816757202148,
        "codebertscore_f3-162": 0.9026700258255005,
        "codebertscore_s_f1-186": 0.6816060543060303,
        "codebertscore_s_f3-186": 0.7280772924423218,
        "codebertscore_s_f1-28": 0.8376720547676086,
        "codebertscore_s_f3-28": 0.8589500188827515,
        "codebertscore_s_f1-6": 0.7206462025642395,
        "codebertscore_s_f3-6": 0.7595095634460449,
        "codebertscore_s_f1-77": 0.708418607711792,
        "codebertscore_s_f3-77": 0.7525045871734619,
        "codebertscore_s_f1-65": 0.719063937664032,
        "codebertscore_s_f3-65": 0.7571820020675659,
        "codebertscore_s_f1-58": 0.7045924663543701,
        "codebertscore_s_f3-58": 0.7566204071044922,
        "codebertscore_s_f1-36": 0.7200201153755188,
        "codebertscore_s_f3-36": 0.7587785124778748,
        "codebertscore_s_f1-26": 0.7037798762321472,
        "codebertscore_s_f3-26": 0.7419641613960266,
        "codebertscore_s_f1-157": 0.7042436599731445,
        "codebertscore_s_f3-157": 0.7495913505554199,
        "codebertscore_s_f1-22": 0.6648369431495667,
        "codebertscore_s_f3-22": 0.742088794708252,
        "codebertscore_s_f1-171": 0.7005118727684021,
        "codebertscore_s_f3-171": 0.7418798804283142,
        "codebertscore_s_f1-122": 0.7700363993644714,
        "codebertscore_s_f3-122": 0.8447679281234741,
        "codebertscore_s_f1-8": 0.6895005702972412,
        "codebertscore_s_f3-8": 0.744526743888855,
        "codebertscore_s_f1-7": 0.6899075508117676,
        "codebertscore_s_f3-7": 0.7400520443916321,
        "codebertscore_s_f1-23": 0.728622555732727,
        "codebertscore_s_f3-23": 0.7775954008102417,
        "codebertscore_s_f1-56": 0.7121260762214661,
        "codebertscore_s_f3-56": 0.7585321664810181,
        "codebertscore_s_f1-61": 0.7624812722206116,
        "codebertscore_s_f3-61": 0.8080111742019653,
        "codebertscore_s_f1-146": 0.8207890391349792,
        "codebertscore_s_f3-146": 0.8452848196029663,
        "codebertscore_s_f1-175": 0.7282660603523254,
        "codebertscore_s_f3-175": 0.7655295133590698,
        "codebertscore_s_f1-162": 0.8612680435180664,
        "codebertscore_s_f3-162": 0.906304657459259,
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-157": 4,
        "raw_gpt35_nswr-157": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-146": 4,
        "raw_gpt35_nswr-146": "4",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n"
        ],
        "simplified": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
        "task_id": "81",
        "168": "std::vector<std::string> letter_grades(grades.size());\n  for (size_t i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades[i] = \"A+\";\n    } else if (grades[i] >= 3.7) {\n      letter_grades[i] = \"A\";\n    } else if (grades[i] >= 3.3) {\n      letter_grades[i] = \"A-\";\n    } else if (grades[i] >= 3.0) {\n      letter_grades[i] = \"B+\";\n    } else if (grades[i] >= 2.7) {\n      letter_grades[i] = \"B\";\n    } else if (grades[i] >= 2.3) {\n      letter_grades[i] = \"B-\";\n    } else if (grades[i] >= 2.0) {\n      letter_grades[i] = \"C+\";\n    } else if (grades[i] >= 1.7) {\n      letter_grades[i] = \"C\";\n    } else if (grades[i] >= 1.3) {\n      letter_grades[i] = \"C-\";\n    } else if (grades[i] >= 1.0) {\n      letter_grades[i] = \"D+\";\n    } else if (grades[i] >= 0.7) {\n      letter_grades[i] = \"D\";\n    } else if (grades[i] >= 0.0) {\n      letter_grades[i] = \"D-\";\n    } else {\n      letter_grades[i] = \"E\";\n    }\n  }\n  return letter_grades;",
        "grade-168": {
            "execution": 0
        },
        "29": "std::vector<std::string> v;\n  for(int i = 0; i < grades.size(); i++){\n    if(grades[i] >= 4.0){\n      v.push_back(\"A+\");\n    }\n    else if(grades[i] >= 3.7){\n      v.push_back(\"A\");\n    }\n    else if(grades[i] >= 3.3){\n      v.push_back(\"A-\");\n    }\n    else if(grades[i] >= 3.0){\n      v.push_back(\"B+\");\n    }\n    else if(grades[i] >= 2.7){\n      v.push_back(\"B\");\n    }\n    else if(grades[i] >= 2.3){\n      v.push_back(\"B-\");\n    }\n    else if(grades[i] >= 2.0){\n      v.push_back(\"C+\");\n    }\n    else if(grades[i] >= 1.7){\n      v.push_back(\"C\");\n    }\n    else if(grades[i] >= 1.3){\n      v.push_back(\"C-\");\n    }\n    else if(grades[i] >= 1.0){\n      v.push_back(\"D+\");\n    }\n    else if(grades[i] >= 0.7){\n      v.push_back(\"D\");\n    }\n    else if(grades[i] >= 0.0){\n      v.push_back(\"D-\");\n    }\n    else if(grades[i] == 0.0){\n      v.push_back(\"E\");\n    }\n  }\n  return v;",
        "grade-29": {
            "execution": 0
        },
        "6": "std::vector<std::string> res(grades.size());\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      res[i] = \"A+\";\n    } else if (grades[i] >= 3.7) {\n      res[i] = \"A\";\n    } else if (grades[i] >= 3.3) {\n      res[i] = \"A-\";\n    } else if (grades[i] >= 3.0) {\n      res[i] = \"B+\";\n    } else if (grades[i] >= 2.7) {\n      res[i] = \"B\";\n    } else if (grades[i] >= 2.3) {\n      res[i] = \"B-\";\n    } else if (grades[i] >= 2.0) {\n      res[i] = \"C+\";\n    } else if (grades[i] >= 1.7) {\n      res[i] = \"C\";\n    } else if (grades[i] >= 1.3) {\n      res[i] = \"C-\";\n    } else if (grades[i] >= 1.0) {\n      res[i] = \"D+\";\n    } else if (grades[i] >= 0.7) {\n      res[i] = \"D\";\n    } else if (grades[i] >= 0.0) {\n      res[i] = \"D-\";\n    } else {\n      res[i] = \"E\";\n    }\n  }\n  return res;",
        "grade-6": {
            "execution": 0
        },
        "198": "std::vector<std::string> res(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] == 4.0) {\n            res[i] = \"A+\";\n        } else if (grades[i] > 3.7) {\n            res[i] = \"A\";\n        } else if (grades[i] > 3.3) {\n            res[i] = \"A-\";\n        } else if (grades[i] > 3.0) {\n            res[i] = \"B+\";\n        } else if (grades[i] > 2.7) {\n            res[i] = \"B\";\n        } else if (grades[i] > 2.3) {\n            res[i] = \"B-\";\n        } else if (grades[i] > 2.0) {\n            res[i] = \"C+\";\n        } else if (grades[i] > 1.7) {\n            res[i] = \"C\";\n        } else if (grades[i] > 1.3) {\n            res[i] = \"C-\";\n        } else if (grades[i] > 1.0) {\n            res[i] = \"D+\";\n        } else if (grades[i] > 0.7) {\n            res[i] = \"D\";\n        } else if (grades[i] > 0.0) {\n            res[i] = \"D-\";\n        } else {\n            res[i] = \"E\";\n        }\n    }\n    return res;",
        "grade-198": {
            "execution": 0
        },
        "71": "std::vector<std::string> letter_grades;\n\tfor (float grade : grades) {\n\t\tif (grade >= 4.0)\n\t\t\tletter_grades.push_back(\"A+\");\n\t\telse if (grade >= 3.7)\n\t\t\tletter_grades.push_back(\"A\");\n\t\telse if (grade >= 3.3)\n\t\t\tletter_grades.push_back(\"A-\");\n\t\telse if (grade >= 3.0)\n\t\t\tletter_grades.push_back(\"B+\");\n\t\telse if (grade >= 2.7)\n\t\t\tletter_grades.push_back(\"B\");\n\t\telse if (grade >= 2.3)\n\t\t\tletter_grades.push_back(\"B-\");\n\t\telse if (grade >= 2.0)\n\t\t\tletter_grades.push_back(\"C+\");\n\t\telse if (grade >= 1.7)\n\t\t\tletter_grades.push_back(\"C\");\n\t\telse if (grade >= 1.3)\n\t\t\tletter_grades.push_back(\"C-\");\n\t\telse if (grade >= 1.0)\n\t\t\tletter_grades.push_back(\"D+\");\n\t\telse if (grade >= 0.7)\n\t\t\tletter_grades.push_back(\"D\");\n\t\telse if (grade >= 0.0)\n\t\t\tletter_grades.push_back(\"D-\");\n\t\telse\n\t\t\tletter_grades.push_back(\"E\");\n\t}\n\treturn letter_grades;",
        "grade-71": {
            "execution": 0
        },
        "63": "for (auto &x : grades) {\n    if (x > 4.0 || x < 0.0) {\n      throw std::runtime_error(\"Invalid grade\");\n    }\n  }\n  std::vector<std::string> new_grades(grades.size());\n  for (auto i = 0; i < grades.size(); i++) {\n    float grade = grades[i];\n    if (grade == 4.0) {\n      new_grades[i] = \"A+\";\n    } else if (grade >= 3.7) {\n      new_grades[i] = \"A\";\n    } else if (grade >= 3.3) {\n      new_grades[i] = \"A-\";\n    } else if (grade >= 3.0) {\n      new_grades[i] = \"B+\";\n    } else if (grade >= 2.7) {\n      new_grades[i] = \"B\";\n    } else if (grade >= 2.3) {\n      new_grades[i] = \"B-\";\n    } else if (grade >= 2.0) {\n      new_grades[i] = \"C+\";\n    } else if (grade >= 1.7) {\n      new_grades[i] = \"C\";\n    } else if (grade >= 1.3) {\n      new_grades[i] = \"C-\";\n    } else if (grade >= 1.0) {\n      new_grades[i] = \"D+\";\n    } else if (grade >= 0.7) {\n      new_grades[i] = \"D\";\n    } else if (grade >= 0.0) {\n      new_grades[i] = \"D-\";\n    } else {\n      new_grades[i] = \"E\";\n    }\n  }\n  return new_grades;",
        "grade-63": {
            "execution": 0
        },
        "58": "std::vector<std::string> output;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      output.push_back(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      output.push_back(\"A\");\n    } else if (grades[i] >= 3.3) {\n      output.push_back(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      output.push_back(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      output.push_back(\"B\");\n    } else if (grades[i] >= 2.3) {\n      output.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      output.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      output.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n      output.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      output.push_back(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      output.push_back(\"D\");\n    } else if (grades[i] >= 0.0) {\n      output.push_back(\"D-\");\n    } else {\n      output.push_back(\"E\");\n    }\n  }\n  return output;",
        "grade-58": {
            "execution": 0
        },
        "36": "std::vector<std::string> results;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n            results.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            results.push_back(\"A\");\n        } else if (grade > 3.3) {\n            results.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            results.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            results.push_back(\"B\");\n        } else if (grade > 2.3) {\n            results.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            results.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            results.push_back(\"C\");\n        } else if (grade > 1.3) {\n            results.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            results.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            results.push_back(\"D\");\n        } else if (grade > 0.0) {\n            results.push_back(\"D-\");\n        } else {\n            results.push_back(\"E\");\n        }\n    }\n    return results;",
        "grade-36": {
            "execution": 0
        },
        "197": "std::vector<std::string> result;\n  std::string grade;\n  for (auto& x : grades) {\n    if (x == 4.0) {\n      grade = \"A+\";\n    } else if (x > 3.7) {\n      grade = \"A\";\n    } else if (x > 3.3) {\n      grade = \"A-\";\n    } else if (x > 3.0) {\n      grade = \"B+\";\n    } else if (x > 2.7) {\n      grade = \"B\";\n    } else if (x > 2.3) {\n      grade = \"B-\";\n    } else if (x > 2.0) {\n      grade = \"C+\";\n    } else if (x > 1.7) {\n      grade = \"C\";\n    } else if (x > 1.3) {\n      grade = \"C-\";\n    } else if (x > 1.0) {\n      grade = \"D+\";\n    } else if (x > 0.7) {\n      grade = \"D\";\n    } else if (x > 0.0) {\n      grade = \"D-\";\n    } else {\n      grade = \"E\";\n    }\n    result.push_back(grade);\n  }\n  return result;",
        "grade-197": {
            "execution": 0
        },
        "27": "std::vector<std::string> res;\n  for (int i = 0; i < grades.size(); i++) {\n    float grade = grades[i];\n    if (grade >= 4.0) {\n      res.push_back(\"A+\");\n    } else if (grade >= 3.7) {\n      res.push_back(\"A\");\n    } else if (grade >= 3.3) {\n      res.push_back(\"A-\");\n    } else if (grade >= 3.0) {\n      res.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n      res.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      res.push_back(\"B-\");\n    } else if (grade >= 2.0) {\n      res.push_back(\"C+\");\n    } else if (grade >= 1.7) {\n      res.push_back(\"C\");\n    } else if (grade >= 1.3) {\n      res.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n      res.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      res.push_back(\"D\");\n    } else if (grade >= 0.0) {\n      res.push_back(\"D-\");\n    } else {\n      res.push_back(\"E\");\n    }\n  }\n  return res;",
        "grade-27": {
            "execution": 0
        },
        "180": "std::vector<std::string> letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i] > 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i] > 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i] > 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i] > 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] > 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;",
        "grade-180": {
            "execution": 0
        },
        "143": "std::vector<std::string> results;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tresults.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tresults.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tresults.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresults.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresults.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresults.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresults.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresults.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i] >= 1.3) {\n\t\t\tresults.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i] >= 1.0) {\n\t\t\tresults.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] >= 0.7) {\n\t\t\tresults.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] >= 0.0) {\n\t\t\tresults.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresults.push_back(\"E\");\n\t\t}\n\t}\n\treturn results;",
        "grade-143": {
            "execution": 0
        },
        "22": "std::vector<std::string> output;\n\tfor (float grade : grades) {\n\t\tif (grade == 4.0) {\n\t\t\toutput.push_back(\"A+\");\n\t\t}\n\t\telse if (grade > 3.7) {\n\t\t\toutput.push_back(\"A\");\n\t\t}\n\t\telse if (grade > 3.3) {\n\t\t\toutput.push_back(\"A-\");\n\t\t}\n\t\telse if (grade > 3.0) {\n\t\t\toutput.push_back(\"B+\");\n\t\t}\n\t\telse if (grade > 2.7) {\n\t\t\toutput.push_back(\"B\");\n\t\t}\n\t\telse if (grade > 2.3) {\n\t\t\toutput.push_back(\"B-\");\n\t\t}\n\t\telse if (grade > 2.0) {\n\t\t\toutput.push_back(\"C+\");\n\t\t}\n\t\telse if (grade > 1.7) {\n\t\t\toutput.push_back(\"C\");\n\t\t}\n\t\telse if (grade > 1.3) {\n\t\t\toutput.push_back(\"C-\");\n\t\t}\n\t\telse if (grade > 1.0) {\n\t\t\toutput.push_back(\"D+\");\n\t\t}\n\t\telse if (grade > 0.7) {\n\t\t\toutput.push_back(\"D\");\n\t\t}\n\t\telse if (grade > 0.0) {\n\t\t\toutput.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\toutput.push_back(\"E\");\n\t\t}\n\t}\n\treturn output;",
        "grade-22": {
            "execution": 0
        },
        "155": "std::vector<std::string> letter_grades;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grade >= 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grade >= 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grade >= 3.0) {\n      letter_grades.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n      letter_grades.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      letter_grades.push_back(\"B-\");\n    } else if (grade >= 2.0) {\n      letter_grades.push_back(\"C+\");\n    } else if (grade >= 1.7) {\n      letter_grades.push_back(\"C\");\n    } else if (grade >= 1.3) {\n      letter_grades.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n      letter_grades.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      letter_grades.push_back(\"D\");\n    } else if (grade >= 0.0) {\n      letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;",
        "grade-155": {
            "execution": 0
        },
        "111": "std::vector<std::string> letter_grades = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n  std::vector<float> numerical_grades = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0};\n  std::vector<std::string> result;\n  for (float grade : grades) {\n    for (int i = 0; i < numerical_grades.size(); i++) {\n      if (grade >= numerical_grades[i]) {\n        result.push_back(letter_grades[i]);\n        break;\n      }\n    }\n  }\n  return result;",
        "grade-111": {
            "execution": 0
        },
        "8": "std::vector<std::string> results;\n    for (float grade : grades) {\n        std::string letter;\n        if (grade == 4.0) {\n            letter = \"A+\";\n        } else if (grade > 3.7) {\n            letter = \"A\";\n        } else if (grade > 3.3) {\n            letter = \"A-\";\n        } else if (grade > 3.0) {\n            letter = \"B+\";\n        } else if (grade > 2.7) {\n            letter = \"B\";\n        } else if (grade > 2.3) {\n            letter = \"B-\";\n        } else if (grade > 2.0) {\n            letter = \"C+\";\n        } else if (grade > 1.7) {\n            letter = \"C\";\n        } else if (grade > 1.3) {\n            letter = \"C-\";\n        } else if (grade > 1.0) {\n            letter = \"D+\";\n        } else if (grade > 0.7) {\n            letter = \"D\";\n        } else if (grade > 0.0) {\n            letter = \"D-\";\n        } else {\n            letter = \"E\";\n        }\n        results.push_back(letter);\n    }\n    return results;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\n\t\t\tletter_grades.push_back(\"A+\");\n\t\telse if (grades[i] >= 3.7)\n\t\t\tletter_grades.push_back(\"A\");\n\t\telse if (grades[i] >= 3.3)\n\t\t\tletter_grades.push_back(\"A-\");\n\t\telse if (grades[i] >= 3.0)\n\t\t\tletter_grades.push_back(\"B+\");\n\t\telse if (grades[i] >= 2.7)\n\t\t\tletter_grades.push_back(\"B\");\n\t\telse if (grades[i] >= 2.3)\n\t\t\tletter_grades.push_back(\"B-\");\n\t\telse if (grades[i] >= 2.0)\n\t\t\tletter_grades.push_back(\"C+\");\n\t\telse if (grades[i] >= 1.7)\n\t\t\tletter_grades.push_back(\"C\");\n\t\telse if (grades[i] >= 1.3)\n\t\t\tletter_grades.push_back(\"C-\");\n\t\telse if (grades[i] >= 1.0)\n\t\t\tletter_grades.push_back(\"D+\");\n\t\telse if (grades[i] >= 0.7)\n\t\t\tletter_grades.push_back(\"D\");\n\t\telse if (grades[i] >= 0.0)\n\t\t\tletter_grades.push_back(\"D-\");\n\t\telse\n\t\t\tletter_grades.push_back(\"E\");\n\t}\n\treturn letter_grades;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string>result;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0){\n            result.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7){\n            result.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3){\n            result.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0){\n            result.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7){\n            result.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3){\n            result.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0){\n            result.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7){\n            result.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3){\n            result.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0){\n            result.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7){\n            result.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0){\n            result.push_back(\"D-\");\n        }\n        else{\n            result.push_back(\"E\");\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "56": "std::vector<std::string> result;\n    float grade;\n    for (int i = 0; i < grades.size(); i++) {\n        grade = grades[i];\n        if (grade > 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;",
        "grade-56": {
            "execution": 0
        },
        "60": "// your code here!\n  std::vector<std::string> retval;\n  float grade;\n  for(int i = 0; i < grades.size(); i++){\n    grade = grades[i];\n    if(grade >= 4.0){\n      retval.push_back(\"A+\");\n    }\n    else if(grade >= 3.7){\n      retval.push_back(\"A\");\n    }\n    else if(grade >= 3.3){\n      retval.push_back(\"A-\");\n    }\n    else if(grade >= 3.0){\n      retval.push_back(\"B+\");\n    }\n    else if(grade >= 2.7){\n      retval.push_back(\"B\");\n    }\n    else if(grade >= 2.3){\n      retval.push_back(\"B-\");\n    }\n    else if(grade >= 2.0){\n      retval.push_back(\"C+\");\n    }\n    else if(grade >= 1.7){\n      retval.push_back(\"C\");\n    }\n    else if(grade >= 1.3){\n      retval.push_back(\"C-\");\n    }\n    else if(grade >= 1.0){\n      retval.push_back(\"D+\");\n    }\n    else if(grade >= 0.7){\n      retval.push_back(\"D\");\n    }\n    else if(grade >= 0.0){\n      retval.push_back(\"D-\");\n    }\n    else{\n      retval.push_back(\"E\");\n    }\n  }\n  return retval;",
        "grade-60": {
            "execution": 0
        },
        "bleu-168": 0.3498135218255786,
        "bleu-29": 0.4944499418521168,
        "bleu-6": 0.35777538479886917,
        "bleu-198": 0.37841483114957414,
        "bleu-71": 0.27271105626025494,
        "bleu-63": 0.20810689745070232,
        "bleu-58": 0.4791755734189856,
        "bleu-36": 0.27422177369195166,
        "bleu-197": 0.10247034928279591,
        "bleu-27": 0.3379905716356668,
        "bleu-180": 0.4890439239813959,
        "bleu-143": 0.47714711130562143,
        "bleu-22": 0.27422177369195166,
        "bleu-155": 0.28443277377088555,
        "bleu-111": 0.09905173883149039,
        "bleu-8": 0.09891657525438066,
        "bleu-7": 0.4695344756705724,
        "bleu-23": 0.4791755734189856,
        "bleu-56": 0.3379577058914447,
        "bleu-60": 0.34045836586399536,
        "codebleu-168": 0.4877212035651605,
        "codebleu-29": 0.520601326587673,
        "codebleu-6": 0.48906157005697803,
        "codebleu-198": 0.5206458733192403,
        "codebleu-71": 0.32783240146359743,
        "codebleu-63": 0.43721150588701985,
        "codebleu-58": 0.4982883132180049,
        "codebleu-36": 0.3597765388513142,
        "codebleu-197": 0.27975375009049647,
        "codebleu-27": 0.40583972451461936,
        "codebleu-180": 0.5332326301988825,
        "codebleu-143": 0.5015553477940211,
        "codebleu-22": 0.3621751020116509,
        "codebleu-155": 0.34430925590979955,
        "codebleu-111": 0.19205947870917908,
        "codebleu-8": 0.27958297809142424,
        "codebleu-7": 0.481463538207981,
        "codebleu-23": 0.5015553477940211,
        "codebleu-56": 0.410836252986243,
        "codebleu-60": 0.4173783274411398,
        "chrf-168": 0.3908179058760416,
        "chrf-29": 0.5232028557865639,
        "chrf-6": 0.3470698772899463,
        "chrf-198": 0.3663435492695324,
        "chrf-71": 0.4528885830144534,
        "chrf-63": 0.3417660542236379,
        "chrf-58": 0.5517976033306263,
        "chrf-36": 0.4136971510734399,
        "chrf-197": 0.19131389362530812,
        "chrf-27": 0.45095014486922236,
        "chrf-180": 0.5570330482047522,
        "chrf-143": 0.5099934460741652,
        "chrf-22": 0.4513664789937377,
        "chrf-155": 0.4489113928432833,
        "chrf-111": 0.1918900275724927,
        "chrf-8": 0.2152949252329779,
        "chrf-7": 0.545345481208971,
        "chrf-23": 0.527345670142121,
        "chrf-56": 0.46789714645989183,
        "chrf-60": 0.44796978234874874,
        "rougel-168": 0.636959370904325,
        "rougel-29": 0.7213541666666666,
        "rougel-6": 0.6395806028833553,
        "rougel-198": 0.6462765957446809,
        "rougel-71": 0.5982404692082111,
        "rougel-63": 0.5064599483204135,
        "rougel-58": 0.7063492063492063,
        "rougel-36": 0.5681492109038737,
        "rougel-197": 0.4404761904761905,
        "rougel-27": 0.6071428571428571,
        "rougel-180": 0.7006711409395973,
        "rougel-143": 0.7037037037037036,
        "rougel-22": 0.5681492109038737,
        "rougel-155": 0.576271186440678,
        "rougel-111": 0.24390243902439024,
        "rougel-8": 0.4411326378539493,
        "rougel-7": 0.7315068493150685,
        "rougel-23": 0.7063492063492063,
        "rougel-56": 0.6035665294924555,
        "rougel-60": 0.6005434782608697,
        "meteor-168": 0.5765614401841851,
        "meteor-29": 0.670030500375949,
        "meteor-6": 0.5781517381279185,
        "meteor-198": 0.579634635000257,
        "meteor-71": 0.42987565193658406,
        "meteor-63": 0.49108172403201844,
        "meteor-58": 0.5752124309481945,
        "meteor-36": 0.41009779456055484,
        "meteor-197": 0.3560887113409387,
        "meteor-27": 0.4669615943854465,
        "meteor-180": 0.5530319517906096,
        "meteor-143": 0.5716764874311491,
        "meteor-22": 0.41009779456055484,
        "meteor-155": 0.43358249919428865,
        "meteor-111": 0.2701860829954731,
        "meteor-8": 0.3556657891956209,
        "meteor-7": 0.5725812061455783,
        "meteor-23": 0.5752124309481945,
        "meteor-56": 0.46452953277554654,
        "meteor-60": 0.46741835643564356,
        "ruby-168": 0.44794188861985473,
        "ruby-29": 0.5665859564164648,
        "ruby-6": 0.450363196125908,
        "ruby-198": 0.47457627118644063,
        "ruby-71": 0.4552058111380145,
        "ruby-63": 0.23970944309927356,
        "ruby-58": 0.549636803874092,
        "ruby-36": 0.38256658595641646,
        "ruby-197": 0.288135593220339,
        "ruby-27": 0.4261501210653753,
        "ruby-180": 0.5351089588377724,
        "ruby-143": 0.5472154963680387,
        "ruby-22": 0.38256658595641646,
        "ruby-155": 0.3970944309927361,
        "ruby-111": 0.14769975786924938,
        "ruby-8": 0.2857142857142857,
        "ruby-7": 0.6077481840193705,
        "ruby-23": 0.549636803874092,
        "ruby-56": 0.423728813559322,
        "ruby-60": 0.41162227602905566,
        "codebertscore_f1-168": 0.8416488766670227,
        "codebertscore_f3-168": 0.8195295929908752,
        "codebertscore_f1-29": 0.8754462003707886,
        "codebertscore_f3-29": 0.8656670451164246,
        "codebertscore_f1-6": 0.8502453565597534,
        "codebertscore_f3-6": 0.8278107047080994,
        "codebertscore_f1-198": 0.8500072360038757,
        "codebertscore_f3-198": 0.828549325466156,
        "codebertscore_f1-71": 0.8245222568511963,
        "codebertscore_f3-71": 0.8056384325027466,
        "codebertscore_f1-63": 0.8080283403396606,
        "codebertscore_f3-63": 0.7998257279396057,
        "codebertscore_f1-58": 0.883547842502594,
        "codebertscore_f3-58": 0.8729546070098877,
        "codebertscore_f1-36": 0.8391442894935608,
        "codebertscore_f3-36": 0.8154309391975403,
        "codebertscore_f1-197": 0.7954902648925781,
        "codebertscore_f3-197": 0.782069206237793,
        "codebertscore_f1-27": 0.851601243019104,
        "codebertscore_f3-27": 0.8384812474250793,
        "codebertscore_f1-180": 0.8710874319076538,
        "codebertscore_f3-180": 0.8611825704574585,
        "codebertscore_f1-143": 0.8769598603248596,
        "codebertscore_f3-143": 0.8674523830413818,
        "codebertscore_f1-22": 0.8360223770141602,
        "codebertscore_f3-22": 0.8138557076454163,
        "codebertscore_f1-155": 0.8265477418899536,
        "codebertscore_f3-155": 0.808192253112793,
        "codebertscore_f1-111": 0.7678295373916626,
        "codebertscore_f3-111": 0.7607695460319519,
        "codebertscore_f1-8": 0.8082122802734375,
        "codebertscore_f3-8": 0.7911322116851807,
        "codebertscore_f1-7": 0.8644722104072571,
        "codebertscore_f3-7": 0.8552648425102234,
        "codebertscore_f1-23": 0.8756858706474304,
        "codebertscore_f3-23": 0.8665251731872559,
        "codebertscore_f1-56": 0.8537746667861938,
        "codebertscore_f3-56": 0.8412321209907532,
        "codebertscore_f1-60": 0.8401093482971191,
        "codebertscore_f3-60": 0.8341113328933716,
        "codebertscore_s_f1-168": 0.8431520462036133,
        "codebertscore_s_f3-168": 0.8223351240158081,
        "codebertscore_s_f1-29": 0.8767583966255188,
        "codebertscore_s_f3-29": 0.8657175898551941,
        "codebertscore_s_f1-6": 0.8520404100418091,
        "codebertscore_s_f3-6": 0.8296324610710144,
        "codebertscore_s_f1-198": 0.8504395484924316,
        "codebertscore_s_f3-198": 0.8299835324287415,
        "codebertscore_s_f1-71": 0.8230479955673218,
        "codebertscore_s_f3-71": 0.8036625981330872,
        "codebertscore_s_f1-63": 0.8152596950531006,
        "codebertscore_s_f3-63": 0.8073861002922058,
        "codebertscore_s_f1-58": 0.8849499225616455,
        "codebertscore_s_f3-58": 0.8735549449920654,
        "codebertscore_s_f1-36": 0.8381158709526062,
        "codebertscore_s_f3-36": 0.8163356184959412,
        "codebertscore_s_f1-197": 0.7994903326034546,
        "codebertscore_s_f3-197": 0.7875479459762573,
        "codebertscore_s_f1-27": 0.8592784404754639,
        "codebertscore_s_f3-27": 0.8480532765388489,
        "codebertscore_s_f1-180": 0.8695915937423706,
        "codebertscore_s_f3-180": 0.8595497608184814,
        "codebertscore_s_f1-143": 0.8787796497344971,
        "codebertscore_s_f3-143": 0.8686407208442688,
        "codebertscore_s_f1-22": 0.8386339545249939,
        "codebertscore_s_f3-22": 0.8164792656898499,
        "codebertscore_s_f1-155": 0.825803279876709,
        "codebertscore_s_f3-155": 0.8065782785415649,
        "codebertscore_s_f1-111": 0.7779511213302612,
        "codebertscore_s_f3-111": 0.7686352133750916,
        "codebertscore_s_f1-8": 0.8118994235992432,
        "codebertscore_s_f3-8": 0.7954632043838501,
        "codebertscore_s_f1-7": 0.8652856945991516,
        "codebertscore_s_f3-7": 0.8559833765029907,
        "codebertscore_s_f1-23": 0.8749924302101135,
        "codebertscore_s_f3-23": 0.8651763200759888,
        "codebertscore_s_f1-56": 0.8593959808349609,
        "codebertscore_s_f3-56": 0.849920928478241,
        "codebertscore_s_f1-60": 0.8463669419288635,
        "codebertscore_s_f3-60": 0.8426445722579956,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-198": 4,
        "raw_gpt35_nswr-198": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-155": 4,
        "raw_gpt35_nswr-155": "4",
        "gpt35_nswr-111": 3,
        "raw_gpt35_nswr-111": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n",
        "snippet": [
            "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n"
        ],
        "simplified": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
        "task_id": "136",
        "167": "if (lst.size() == 0) {\n\t\treturn std::make_tuple(std::nullopt, std::nullopt);\n\t}\n\tlong positive = INT_MAX;\n\tlong negative = INT_MIN;\n\tfor (long num : lst) {\n\t\tif (num > 0) {\n\t\t\tpositive = std::min(positive, num);\n\t\t}\n\t\telse if (num < 0) {\n\t\t\tnegative = std::max(negative, num);\n\t\t}\n\t}\n\tif (positive == INT_MAX) {\n\t\tpositive = std::nullopt;\n\t}\n\tif (negative == INT_MIN) {\n\t\tnegative = std::nullopt;\n\t}\n\treturn std::make_tuple(negative, positive);",
        "grade-167": {
            "execution": 0
        },
        "28": "return {};",
        "grade-28": {
            "execution": 0
        },
        "6": "std::sort(lst.begin(), lst.end());\n\treturn std::make_tuple(std::optional<long>{}, std::optional<long>{});",
        "grade-6": {
            "execution": 0
        },
        "193": "int min = 0;\n  int max = 0;\n  bool minSet = false;\n  bool maxSet = false;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > 0) {\n      if (!minSet) {\n        min = lst[i];\n        minSet = true;\n      } else if (lst[i] < min) {\n        min = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (!maxSet) {\n        max = lst[i];\n        maxSet = true;\n      } else if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n  }\n  std::optional<long> newMax;\n  std::optional<long> newMin;\n  if (maxSet) {\n    newMax = max;\n  }\n  if (minSet) {\n    newMin = min;\n  }\n  return std::make_tuple(newMax, newMin);",
        "grade-193": {
            "execution": 0
        },
        "71": "std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i < lst.size() && lst[i] < 0)\n        i++;\n    std::optional<long> max;\n    std::optional<long> min;\n    if (i > 0)\n        max = lst[i - 1];\n    if (i < lst.size())\n        min = lst[i];\n    return std::make_tuple(max, min);",
        "grade-71": {
            "execution": 0
        },
        "62": "long min=0,max=0;\n    bool maxFound=false,minFound=false;\n    for(long a:lst){\n        if(a>0 && !minFound){\n            min=a;\n            minFound=true;\n        }\n        if(a<0 && !maxFound){\n            max=a;\n            maxFound=true;\n        }\n        if(a>0 && minFound && a<min){\n            min=a;\n        }\n        if(a<0 && maxFound && a>max){\n            max=a;\n        }\n    }\n    if(minFound){\n        return std::make_tuple(std::make_optional(max),std::make_optional(min));\n    }\n    else{\n        return std::make_tuple(std::nullopt,std::nullopt);\n    }",
        "grade-62": {
            "execution": 0
        },
        "57": "std::optional<long> a, b;\n  bool pos=false, neg=false;\n  for(auto x: lst)\n  {\n    if(x<0)\n    {\n      if(!neg)\n      {\n        a=x;\n        neg=true;\n      }\n      else\n      {\n        if(x>*a)\n          a=x;\n      }\n    }\n    else if(x>0)\n    {\n      if(!pos)\n      {\n        b=x;\n        pos=true;\n      }\n      else\n      {\n        if(x<*b)\n          b=x;\n      }\n    }\n  }\n  return {a, b};",
        "grade-57": {
            "execution": 0
        },
        "35": "int maxNeg = -1;\n    int minPos = 1;\n    bool negFlag = false;\n    bool posFlag = false;\n    std::tuple<std::optional<long>, std::optional<long>> result;\n    std::optional<long> neg;\n    std::optional<long> pos;\n    for(auto i : lst){\n        if(i < 0 && i > maxNeg){\n            maxNeg = i;\n            negFlag = true;\n        }\n        if(i > 0 && i < minPos){\n            minPos = i;\n            posFlag = true;\n        }\n    }\n    if(negFlag){\n        neg = maxNeg;\n    }\n    if(posFlag){\n        pos = minPos;\n    }\n    result = std::make_tuple(neg, pos);\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "192": "std::tuple<std::optional<long>, std::optional<long>> ret;\n    std::optional<long> largest;\n    std::optional<long> smallest;\n    if (lst.size() == 0) {\n        return {largest, smallest};\n    }\n    if (lst.size() == 1) {\n        return {largest, smallest};\n    }\n    int i = 0;\n    while (i < lst.size()) {\n        if (lst[i] < 0) {\n            largest = lst[i];\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < lst.size()) {\n        if (lst[i] > 0) {\n            smallest = lst[i];\n            break;\n        }\n        i++;\n    }\n    for (i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n        if (lst[i] > 0) {\n            if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return {largest, smallest};",
        "grade-192": {
            "execution": 0
        },
        "26": "long smallest_positive=INT_MAX;\n    long largest_negative=INT_MIN;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>0){\n            if(lst[i]<smallest_positive){\n                smallest_positive=lst[i];\n            }\n        }\n        else{\n            if(lst[i]>largest_negative){\n                largest_negative=lst[i];\n            }\n        }\n    }\n    if(smallest_positive!=INT_MAX && largest_negative!=INT_MIN){\n        return std::make_tuple(largest_negative,smallest_positive);\n    }\n    else if(smallest_positive==INT_MAX && largest_negative!=INT_MIN){\n        return std::make_tuple(largest_negative,std::nullopt);\n    }\n    else if(smallest_positive!=INT_MAX && largest_negative==INT_MIN){\n        return std::make_tuple(std::nullopt,smallest_positive);\n    }\n    else{\n        return std::make_tuple(std::nullopt,std::nullopt);\n    }",
        "grade-26": {
            "execution": 0
        },
        "177": "std::tuple<std::optional<long>, std::optional<long>> result = {};\n    auto& a = std::get<0>(result);\n    auto& b = std::get<1>(result);\n    for (auto e : lst) {\n        if (e < 0) {\n            if (!a || e > *a) {\n                a = e;\n            }\n        } else if (e > 0) {\n            if (!b || e < *b) {\n                b = e;\n            }\n        }\n    }\n    return result;",
        "grade-177": {
            "execution": 0
        },
        "143": "long min = lst[0];\n\t\t\t\tlong max = lst[0];\n\t\t\t\tfor (long i = 0; i < lst.size(); i++) {\n\t\t\t\t\t\t\t\tif (lst[i] > max) {\n\t\t\t\t\t\t\t\t\t\t\t\tmax = lst[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (lst[i] < min) {\n\t\t\t\t\t\t\t\t\t\t\t\tmin = lst[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (max > 0) {\n\t\t\t\t\t\t\t\tif (min < 0) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn std::make_tuple(max, min);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn std::make_tuple(max, std::nullopt);\n\t\t\t\t}\n\t\t\t\tif (min < 0) {\n\t\t\t\t\t\t\t\treturn std::make_tuple(std::nullopt, min);\n\t\t\t\t}\n\t\t\t\treturn std::make_tuple(std::nullopt, std::nullopt);",
        "grade-143": {
            "execution": 0
        },
        "22": "std::optional<long> largest_negative = std::nullopt;\n  std::optional<long> smallest_positive = std::nullopt;\n  for (const auto& element : lst) {\n    if (element < 0 && largest_negative == std::nullopt) {\n      largest_negative = element;\n    }\n    if (element > 0 && smallest_positive == std::nullopt) {\n      smallest_positive = element;\n    }\n    if (element < 0 && largest_negative != std::nullopt) {\n      if (element > *largest_negative) {\n        largest_negative = element;\n      }\n    }\n    if (element > 0 && smallest_positive != std::nullopt) {\n      if (element < *smallest_positive) {\n        smallest_positive = element;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative, smallest_positive);",
        "grade-22": {
            "execution": 0
        },
        "155": "std::optional<long> b{},a{};\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(lst[i]<0)\n\t\t{\n\t\t\tif(!a)\n\t\t\t\ta=lst[i];\n\t\t\telse\n\t\t\t\ta=lst[i]>*a?lst[i]:*a;\n\t\t}\n\t\telse if(lst[i]>0)\n\t\t{\n\t\t\tif(!b)\n\t\t\t\tb=lst[i];\n\t\t\telse\n\t\t\t\tb=lst[i]<*b?lst[i]:*b;\n\t\t}\n\t}\n\treturn std::make_tuple(a,b);",
        "grade-155": {
            "execution": 0
        },
        "110": "auto largest = *std::max_element(lst.begin(), lst.end());\n  auto smallest = *std::min_element(lst.begin(), lst.end());\n  std::tuple<std::optional<long>, std::optional<long>> res;\n  if (largest < 0) {\n    res = std::make_tuple(largest, std::nullopt);\n  } else if (smallest > 0) {\n    res = std::make_tuple(std::nullopt, smallest);\n  } else {\n    res = std::make_tuple(std::nullopt, std::nullopt);\n  }\n  return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "std::tuple<std::optional<long>, std::optional<long>> tup;\n\tlong x = 0;\n\tstd::optional<long> myMax = std::nullopt;\n\tstd::optional<long> myMin = std::nullopt;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > 0) {\n\t\t\tif (myMin == std::nullopt) {\n\t\t\t\tmyMin = lst[i];\n\t\t\t}\n\t\t\telse if (lst[i] < myMin) {\n\t\t\t\tmyMin = lst[i];\n\t\t\t}\n\t\t}\n\t\telse if (lst[i] < 0) {\n\t\t\tif (myMax == std::nullopt) {\n\t\t\t\tmyMax = lst[i];\n\t\t\t}\n\t\t\telse if (lst[i] > myMax) {\n\t\t\t\tmyMax = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tstd::get<0>(tup) = myMax;\n\tstd::get<1>(tup) = myMin;\n\treturn tup;",
        "grade-8": {
            "execution": 0
        },
        "7": "if(lst.size()==0) return {std::nullopt, std::nullopt};\n    std::sort(lst.begin(), lst.end());\n    if(lst[0]>=0) return {std::nullopt, (long)lst[0]};\n    else if(lst[lst.size()-1]<=0) return {(long)lst[lst.size()-1], std::nullopt};\n    else return {(long)lst[lst.size()-1], (long)lst[0]};",
        "grade-7": {
            "execution": 0
        },
        "23": "std::optional<long> a = std::nullopt;\n\tstd::optional<long> b = std::nullopt;\n\tbool contains_negative = false;\n\tbool contains_positive = false;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < 0) {\n\t\t\tcontains_negative = true;\n\t\t\tif (!a.has_value())\n\t\t\t\ta = lst[i];\n\t\t\telse\n\t\t\t\ta = lst[i] > a.value() ? lst[i] : a.value();\n\t\t}\n\t\telse if (lst[i] > 0) {\n\t\t\tcontains_positive = true;\n\t\t\tif (!b.has_value())\n\t\t\t\tb = lst[i];\n\t\t\telse\n\t\t\t\tb = lst[i] < b.value() ? lst[i] : b.value();\n\t\t}\n\t}\n\tif (!contains_negative)\n\t\ta = std::nullopt;\n\tif (!contains_positive)\n\t\tb = std::nullopt;\n\treturn std::make_tuple(a, b);",
        "grade-23": {
            "execution": 0
        },
        "55": "int min, max, flag=0;\n    if(lst.size() == 0)\n        return std::make_tuple(std::nullopt, std::nullopt);\n    for(int i=0; i<lst.size(); i++)\n    {\n        if(lst[i]<0)\n        {\n            if(flag==0)\n            {\n                max = lst[i];\n                flag = 1;\n            }\n            else\n            {\n                if(lst[i]>max)\n                    max = lst[i];\n            }\n        }\n        else if(lst[i]>0)\n        {\n            if(flag==0)\n            {\n                min = lst[i];\n                flag = 1;\n            }\n            else\n            {\n                if(lst[i]<min)\n                    min = lst[i];\n            }\n        }\n    }\n    if(flag == 0)\n        return std::make_tuple(std::nullopt, std::nullopt);\n    else\n        return std::make_tuple(max, min);",
        "grade-55": {
            "execution": 0
        },
        "59": "std::optional<long> largestNegative;\n  std::optional<long> smallestPositive;\n  if (lst.size() > 0) {\n    largestNegative = std::nullopt;\n    smallestPositive = std::nullopt;\n    for (auto i : lst) {\n      if (i < 0) {\n        if (!largestNegative.has_value() || i > largestNegative.value()) {\n          largestNegative = i;\n        }\n      } else if (i > 0) {\n        if (!smallestPositive.has_value() || i < smallestPositive.value()) {\n          smallestPositive = i;\n        }\n      }\n    }\n  }\n  return std::make_tuple(largestNegative, smallestPositive);",
        "grade-59": {
            "execution": 0
        },
        "bleu-167": 0.09598709527208923,
        "bleu-28": 2.812074776008459e-11,
        "bleu-6": 0.013937173000025626,
        "bleu-193": 0.2847264766704618,
        "bleu-71": 0.2663194850306844,
        "bleu-62": 0.04864154881510013,
        "bleu-57": 0.06352029187612916,
        "bleu-35": 0.041562512970431474,
        "bleu-192": 0.2334577891364784,
        "bleu-26": 0.2723484113280137,
        "bleu-177": 0.054145238299963754,
        "bleu-143": 0.30193135265210247,
        "bleu-22": 0.04429067217758534,
        "bleu-155": 0.41054416699730994,
        "bleu-110": 0.03795028498101905,
        "bleu-8": 0.24579294561319312,
        "bleu-7": 0.1225789475355179,
        "bleu-23": 0.265816248227475,
        "bleu-55": 0.30310924928487515,
        "bleu-59": 0.09753817008807561,
        "codebleu-167": 0.4481699386714208,
        "codebleu-28": 0.014492753708915482,
        "codebleu-6": 0.1967808078844895,
        "codebleu-193": 0.6520895075074437,
        "codebleu-71": 0.5144705944645009,
        "codebleu-62": 0.4662578966926792,
        "codebleu-57": 0.42603121516165,
        "codebleu-35": 0.44368264585655887,
        "codebleu-192": 0.6618959453334757,
        "codebleu-26": 0.6093544712828445,
        "codebleu-177": 0.41735414344109995,
        "codebleu-143": 0.6445018516579849,
        "codebleu-22": 0.4344109996283909,
        "codebleu-155": 0.6540270446509455,
        "codebleu-110": 0.4305648457822371,
        "codebleu-8": 0.6600904569319613,
        "codebleu-7": 0.4917187584155845,
        "codebleu-23": 0.6343672442520025,
        "codebleu-55": 0.6948226254803969,
        "codebleu-59": 0.44854884842850246,
        "chrf-167": 0.2368745057649459,
        "chrf-28": 0.03396589161901117,
        "chrf-6": 0.1270363829746511,
        "chrf-193": 0.4604546976768306,
        "chrf-71": 0.33201892451180776,
        "chrf-62": 0.21478435875746965,
        "chrf-57": 0.2031241959288635,
        "chrf-35": 0.24974989875805392,
        "chrf-192": 0.3653425598609208,
        "chrf-26": 0.3249214391075508,
        "chrf-177": 0.1568988031222797,
        "chrf-143": 0.42824787021142396,
        "chrf-22": 0.17022275687641797,
        "chrf-155": 0.4338012419258317,
        "chrf-110": 0.18793240914034268,
        "chrf-8": 0.38378923670098375,
        "chrf-7": 0.23647480070688118,
        "chrf-23": 0.37207208224612304,
        "chrf-55": 0.47178027424361557,
        "chrf-59": 0.19987765270302701,
        "rougel-167": 0.27705627705627706,
        "rougel-28": 0.07843137254901959,
        "rougel-6": 0.22377622377622375,
        "rougel-193": 0.48829431438127097,
        "rougel-71": 0.44117647058823534,
        "rougel-62": 0.2661596958174905,
        "rougel-57": 0.3540669856459329,
        "rougel-35": 0.2923076923076923,
        "rougel-192": 0.4231884057971015,
        "rougel-26": 0.44912280701754387,
        "rougel-177": 0.30414746543778803,
        "rougel-143": 0.4701195219123506,
        "rougel-22": 0.264,
        "rougel-155": 0.5913043478260871,
        "rougel-110": 0.23728813559322035,
        "rougel-8": 0.43174603174603177,
        "rougel-7": 0.354978354978355,
        "rougel-23": 0.4655737704918033,
        "rougel-55": 0.5324232081911263,
        "rougel-59": 0.3430962343096234,
        "meteor-167": 0.30935915990785573,
        "meteor-28": 0.03562358916478555,
        "meteor-6": 0.12944983818770225,
        "meteor-193": 0.595928851802454,
        "meteor-71": 0.4369975312456818,
        "meteor-62": 0.26629990448901625,
        "meteor-57": 0.2413586463267564,
        "meteor-35": 0.3007276627409082,
        "meteor-192": 0.6875352691888497,
        "meteor-26": 0.5594694192305337,
        "meteor-177": 0.24338290157651973,
        "meteor-143": 0.5391304347826088,
        "meteor-22": 0.268074248743272,
        "meteor-155": 0.6233609467455621,
        "meteor-110": 0.22058823529411764,
        "meteor-8": 0.5838325295796285,
        "meteor-7": 0.3526021245936799,
        "meteor-23": 0.583722588384593,
        "meteor-55": 0.6306011649475637,
        "meteor-59": 0.2636439928548423,
        "ruby-167": 0.1578947368421053,
        "ruby-28": 0.04081632653061229,
        "ruby-6": 0.1428571428571429,
        "ruby-193": 0.36318407960199006,
        "ruby-71": 0.26415094339622647,
        "ruby-62": 0.17575757575757578,
        "ruby-57": 0.2072072072072072,
        "ruby-35": 0.16049382716049387,
        "ruby-192": 0.27125506072874495,
        "ruby-26": 0.3048128342245989,
        "ruby-177": 0.12605042016806722,
        "ruby-143": 0.33986928104575165,
        "ruby-22": 0.14473684210526316,
        "ruby-155": 0.46212121212121215,
        "ruby-110": 0.14492753623188404,
        "ruby-8": 0.3087557603686636,
        "ruby-7": 0.21052631578947367,
        "ruby-23": 0.3188405797101449,
        "ruby-55": 0.3897435897435897,
        "ruby-59": 0.1985815602836879,
        "codebertscore_f1-167": 0.7533092498779297,
        "codebertscore_f3-167": 0.7783570885658264,
        "codebertscore_f1-28": 0.47954264283180237,
        "codebertscore_f3-28": 0.4094208776950836,
        "codebertscore_f1-6": 0.6937617063522339,
        "codebertscore_f3-6": 0.682643473148346,
        "codebertscore_f1-193": 0.8091464638710022,
        "codebertscore_f3-193": 0.8426870703697205,
        "codebertscore_f1-71": 0.8301504850387573,
        "codebertscore_f3-71": 0.8408275842666626,
        "codebertscore_f1-62": 0.7482083439826965,
        "codebertscore_f3-62": 0.7839494347572327,
        "codebertscore_f1-57": 0.714280366897583,
        "codebertscore_f3-57": 0.7318634986877441,
        "codebertscore_f1-35": 0.7785739302635193,
        "codebertscore_f3-35": 0.8171653747558594,
        "codebertscore_f1-192": 0.7735463976860046,
        "codebertscore_f3-192": 0.7837151885032654,
        "codebertscore_f1-26": 0.7604367136955261,
        "codebertscore_f3-26": 0.8284769058227539,
        "codebertscore_f1-177": 0.7050864696502686,
        "codebertscore_f3-177": 0.7231839895248413,
        "codebertscore_f1-143": 0.8057667016983032,
        "codebertscore_f3-143": 0.8402203917503357,
        "codebertscore_f1-22": 0.7526770234107971,
        "codebertscore_f3-22": 0.7813588976860046,
        "codebertscore_f1-155": 0.8167434930801392,
        "codebertscore_f3-155": 0.8195976614952087,
        "codebertscore_f1-110": 0.7313852906227112,
        "codebertscore_f3-110": 0.7562406063079834,
        "codebertscore_f1-8": 0.7810568809509277,
        "codebertscore_f3-8": 0.823022186756134,
        "codebertscore_f1-7": 0.7734426259994507,
        "codebertscore_f3-7": 0.759031355381012,
        "codebertscore_f1-23": 0.7672435641288757,
        "codebertscore_f3-23": 0.8050446510314941,
        "codebertscore_f1-55": 0.772266149520874,
        "codebertscore_f3-55": 0.8005934953689575,
        "codebertscore_f1-59": 0.7845258712768555,
        "codebertscore_f3-59": 0.8147651553153992,
        "codebertscore_s_f1-167": 0.7569934725761414,
        "codebertscore_s_f3-167": 0.7808650135993958,
        "codebertscore_s_f1-28": 0.5912700295448303,
        "codebertscore_s_f3-28": 0.48139914870262146,
        "codebertscore_s_f1-6": 0.677604079246521,
        "codebertscore_s_f3-6": 0.65805584192276,
        "codebertscore_s_f1-193": 0.8362144827842712,
        "codebertscore_s_f3-193": 0.860586941242218,
        "codebertscore_s_f1-71": 0.8299957513809204,
        "codebertscore_s_f3-71": 0.8386231064796448,
        "codebertscore_s_f1-62": 0.7751601934432983,
        "codebertscore_s_f3-62": 0.8001512289047241,
        "codebertscore_s_f1-57": 0.7385503053665161,
        "codebertscore_s_f3-57": 0.7538318634033203,
        "codebertscore_s_f1-35": 0.7978726625442505,
        "codebertscore_s_f3-35": 0.8356113433837891,
        "codebertscore_s_f1-192": 0.8238245248794556,
        "codebertscore_s_f3-192": 0.8219557404518127,
        "codebertscore_s_f1-26": 0.8050109148025513,
        "codebertscore_s_f3-26": 0.8525768518447876,
        "codebertscore_s_f1-177": 0.7118958830833435,
        "codebertscore_s_f3-177": 0.7322955131530762,
        "codebertscore_s_f1-143": 0.8208298683166504,
        "codebertscore_s_f3-143": 0.8450474739074707,
        "codebertscore_s_f1-22": 0.7639004588127136,
        "codebertscore_s_f3-22": 0.7948158383369446,
        "codebertscore_s_f1-155": 0.818336009979248,
        "codebertscore_s_f3-155": 0.8204338550567627,
        "codebertscore_s_f1-110": 0.7287793159484863,
        "codebertscore_s_f3-110": 0.7552066445350647,
        "codebertscore_s_f1-8": 0.796659529209137,
        "codebertscore_s_f3-8": 0.832186758518219,
        "codebertscore_s_f1-7": 0.7688059210777283,
        "codebertscore_s_f3-7": 0.754183828830719,
        "codebertscore_s_f1-23": 0.7808815836906433,
        "codebertscore_s_f3-23": 0.8164050579071045,
        "codebertscore_s_f1-55": 0.7978426814079285,
        "codebertscore_s_f3-55": 0.827567994594574,
        "codebertscore_s_f1-59": 0.7856236696243286,
        "codebertscore_s_f3-59": 0.8167324066162109,
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "3 - The code snippet correctly sorts the input list, but it does not yet identify the largest negative integer or the smallest positive integer. The function returns the correct tuple structure with empty optionals, but the required functionality is not yet implemented.",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-143": 3,
        "raw_gpt35_nsnr-143": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-143": 2,
        "raw_gpt35_nswr-143": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nlong fib(long n) {\n",
        "snippet": [
            "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n"
        ],
        "simplified": "Return n-th Fibonacci number.",
        "task_id": "55",
        "182": "long a = 0, b = 1, c;\n    while (n--) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return a;",
        "grade-182": {
            "execution": 1
        },
        "28": "assert(n >= 0);\n  long rv=0;\n  long first=0;\n  long second=1;\n  if(n==0) return 0;\n  else if(n==1) return 1;\n  else{\n    for(int i=2;i<=n;i++){\n      rv=first+second;\n      first=second;\n      second=rv;\n    }\n  }\n  return rv;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n < 0) {\n    assert(false);\n  }\n  // Base case.\n  if (n == 0 || n == 1) {\n    return n;\n  }\n  // Recursive case.\n  return fib(n - 1) + fib(n - 2);",
        "grade-6": {
            "execution": 1
        },
        "72": "if (n <= 1) return n;\n  long previous = 0;\n  long current = 1;\n  for (long i = 0; i < n - 1; ++i) {\n    long tmp_previous = previous;\n    previous = current;\n    current = tmp_previous + current;\n  }\n  return current;",
        "grade-72": {
            "execution": 1
        },
        "64": "if (n == 0) {\n        return 0;\n    }\n    long sum = 1;\n    long fib1 = 0;\n    long fib2 = 1;\n    for (long i = 2; i <= n; i++) {\n        sum = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = sum;\n    }\n    return sum;",
        "grade-64": {
            "execution": 1
        },
        "59": "//assert(n >= 0);\n    if (n < 2) {\n        return n;\n    }\n    long a = 0;\n    long b = 1;\n    for (long i = 2; i <= n; i++) {\n        long c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;",
        "grade-59": {
            "execution": 1
        },
        "35": "// Return the nth Fibonacci number\n    int fib[n+1];\n    fib[0]=0;\n    fib[1]=1;\n    for(int i=2;i<=n;i++)\n    {\n        fib[i]=fib[i-1]+fib[i-2];\n    }\n    return fib[n];",
        "grade-35": {
            "execution": 1
        },
        "26": "if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\tlong n0 = 0;\n\tlong n1 = 1;\n\tlong n2 = 0;\n\tfor (int i = 2; i <= n; i++) {\n\t\tn2 = n0 + n1;\n\t\tn0 = n1;\n\t\tn1 = n2;\n\t}\n\treturn n2;",
        "grade-26": {
            "execution": 1
        },
        "193": "assert(n >= 0);\n  // C++11 allows such a declaration.\n  long memo[n + 1];\n  return fib_helper(n, memo);",
        "grade-193": {
            "execution": 0
        },
        "153": "if (n == 0) return 0;\n\tif (n == 1) return 1;\n\tlong a = 0, b = 1, c;\n\tfor (int i = 2; i <= n; i++) {\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;",
        "grade-153": {
            "execution": 1
        },
        "22": "long* tab=new long[n+1];\n    tab[0]=0;\n    tab[1]=1;\n    for(int i=2;i<=n;i++){\n        tab[i]=tab[i-1]+tab[i-2];\n    }\n    return tab[n];",
        "grade-22": {
            "execution": 1
        },
        "167": "long curr = 1;\n\tlong prev = 0;\n\twhile (n-- > 0) {\n\t\tlong next = curr + prev;\n\t\tprev = curr;\n\t\tcurr = next;\n\t}\n\treturn prev;",
        "grade-167": {
            "execution": 1
        },
        "115": "if (n==0) return 0;\n    if (n==1) return 1;\n    long n1=0, n2=1, nt;\n    int i;\n    for (i=2; i<=n; i++) {\n        nt = n1 + n2;\n        n1 = n2;\n        n2 = nt;\n    }\n    return n2;",
        "grade-115": {
            "execution": 1
        },
        "8": "assert(n >= 0);\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);",
        "grade-8": {
            "execution": 1
        },
        "7": "long result = 0;\n\tlong first = 0;\n\tlong second = 1;\n\tfor (int i = 0; i < n; i++) {\n\t\tresult = first + second;\n\t\tfirst = second;\n\t\tsecond = result;\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n < 2) {\n        return n;\n    }\n    long f1 = 0;\n    long f2 = 1;\n    long f3 = 0;\n    for (int i = 1; i < n; i++) {\n        f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n    }\n    return f3;",
        "grade-23": {
            "execution": 1
        },
        "56": "assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n - 1) + fib(n - 2);",
        "grade-56": {
            "execution": 1
        },
        "61": "assert(n >= 0);\n    // compute bottom-up\n    long memo[n+1];\n    memo[0] = 0;\n    memo[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        memo[i] = memo[i-1] + memo[i-2];\n    }\n    return memo[n];",
        "grade-61": {
            "execution": 1
        },
        "140": "if (n < 2) {\n        return n;\n    }\n    long prev = 0;\n    long curr = 1;\n    for (long i = 2; i <= n; i++) {\n        long next = prev + curr;\n        prev = curr;\n        curr = next;\n    }\n    return curr;",
        "grade-140": {
            "execution": 1
        },
        "170": "assert(n >= 0);\n    int f[] = {0, 1};\n    if (n <= 1) return f[n];\n    long F = 0, F1 = 1, F2 = 1;\n    for (int i = 2; i <= n; i++) {\n        F = F1 + F2;\n        F2 = F1;\n        F1 = F;\n    }\n    return F;",
        "grade-170": {
            "execution": 0
        },
        "bleu-182": 0.02330866174933007,
        "bleu-28": 0.23913758013108832,
        "bleu-6": 0.03323030657070761,
        "bleu-72": 0.13505748660412176,
        "bleu-64": 0.29830858587181563,
        "bleu-59": 0.2755300257242771,
        "bleu-35": 0.5716863986947064,
        "bleu-26": 0.2779976928609862,
        "bleu-193": 0.0363479914892801,
        "bleu-153": 0.30286122764917905,
        "bleu-22": 0.5943177426491999,
        "bleu-167": 0.047202820869158384,
        "bleu-115": 0.2541922397337318,
        "bleu-8": 0.030584716413966602,
        "bleu-7": 0.2382238841262491,
        "bleu-23": 0.22763167718012653,
        "bleu-56": 0.03282056189408238,
        "bleu-61": 0.5176144339511035,
        "bleu-140": 0.2954513644748423,
        "bleu-170": 0.3332521612018236,
        "codebleu-182": 0.28437545888540505,
        "codebleu-28": 0.47455872488748796,
        "codebleu-6": 0.32058018609742744,
        "codebleu-72": 0.4324028461959496,
        "codebleu-64": 0.4699240020977782,
        "codebleu-59": 0.4634425585893967,
        "codebleu-35": 0.7812214027751708,
        "codebleu-26": 0.4917457511960331,
        "codebleu-193": 0.2319796929742214,
        "codebleu-153": 0.47277356028759543,
        "codebleu-22": 0.7773376245759149,
        "codebleu-167": 0.31444317421188284,
        "codebleu-115": 0.46011278057287824,
        "codebleu-8": 0.23350285602664514,
        "codebleu-7": 0.4405165862870685,
        "codebleu-23": 0.4610192597724624,
        "codebleu-56": 0.25155195151449367,
        "codebleu-61": 0.7735139206006021,
        "codebleu-140": 0.45659570448294673,
        "codebleu-170": 0.5330175590536566,
        "chrf-182": 0.11023515326518785,
        "chrf-28": 0.30286097377275156,
        "chrf-6": 0.14456101242811528,
        "chrf-72": 0.17998804913248026,
        "chrf-64": 0.30337571565697186,
        "chrf-59": 0.28261202472142455,
        "chrf-35": 0.5850731065628821,
        "chrf-26": 0.33979343098909015,
        "chrf-193": 0.1493150849599368,
        "chrf-153": 0.3447206189167463,
        "chrf-22": 0.5413750653859087,
        "chrf-167": 0.12520810183229816,
        "chrf-115": 0.3007622737730249,
        "chrf-8": 0.15257509204344927,
        "chrf-7": 0.2650379964368783,
        "chrf-23": 0.3000158585455391,
        "chrf-56": 0.17210538803107828,
        "chrf-61": 0.5042345484155853,
        "chrf-140": 0.27019492726470695,
        "chrf-170": 0.4293071338176669,
        "rougel-182": 0.2857142857142857,
        "rougel-28": 0.4166666666666667,
        "rougel-6": 0.23728813559322032,
        "rougel-72": 0.4033613445378151,
        "rougel-64": 0.43548387096774194,
        "rougel-59": 0.41860465116279066,
        "rougel-35": 0.791044776119403,
        "rougel-26": 0.411764705882353,
        "rougel-193": 0.24742268041237114,
        "rougel-153": 0.4375,
        "rougel-22": 0.7938931297709925,
        "rougel-167": 0.26000000000000006,
        "rougel-115": 0.4153846153846154,
        "rougel-8": 0.27184466019417475,
        "rougel-7": 0.46846846846846857,
        "rougel-23": 0.4262295081967213,
        "rougel-56": 0.28571428571428575,
        "rougel-61": 0.7375886524822695,
        "rougel-140": 0.45378151260504196,
        "rougel-170": 0.4929577464788733,
        "meteor-182": 0.19236111111111115,
        "meteor-28": 0.3406580004591368,
        "meteor-6": 0.2237058174280561,
        "meteor-72": 0.3266879446138211,
        "meteor-64": 0.31578329025544627,
        "meteor-59": 0.3132570239334027,
        "meteor-35": 0.8535202604132645,
        "meteor-26": 0.3449701270472272,
        "meteor-193": 0.17943718381112983,
        "meteor-153": 0.3493928209837301,
        "meteor-22": 0.8424561517064937,
        "meteor-167": 0.18456375838926173,
        "meteor-115": 0.3372942392517992,
        "meteor-8": 0.229307799500545,
        "meteor-7": 0.34235935489052605,
        "meteor-23": 0.36228414492313915,
        "meteor-56": 0.2568812533615996,
        "meteor-61": 0.8292307804081187,
        "meteor-140": 0.31,
        "meteor-170": 0.4576415495955726,
        "ruby-182": 0.16129032258064513,
        "ruby-28": 0.2682926829268293,
        "ruby-6": 0.11290322580645162,
        "ruby-72": 0.25806451612903225,
        "ruby-64": 0.27419354838709675,
        "ruby-59": 0.25373134328358204,
        "ruby-35": 0.7222222222222222,
        "ruby-26": 0.2567567567567568,
        "ruby-193": 0.14516129032258063,
        "ruby-153": 0.2727272727272727,
        "ruby-22": 0.7391304347826086,
        "ruby-167": 0.16129032258064513,
        "ruby-115": 0.23529411764705888,
        "ruby-8": 0.19354838709677424,
        "ruby-7": 0.3870967741935484,
        "ruby-23": 0.27419354838709675,
        "ruby-56": 0.19354838709677424,
        "ruby-61": 0.6455696202531646,
        "ruby-140": 0.33870967741935487,
        "ruby-170": 0.3125,
        "codebertscore_f1-182": 0.7515335083007812,
        "codebertscore_f3-182": 0.7400623559951782,
        "codebertscore_f1-28": 0.789014995098114,
        "codebertscore_f3-28": 0.800046980381012,
        "codebertscore_f1-6": 0.7546612024307251,
        "codebertscore_f3-6": 0.7663200497627258,
        "codebertscore_f1-72": 0.7870708703994751,
        "codebertscore_f3-72": 0.7917278409004211,
        "codebertscore_f1-64": 0.7854746580123901,
        "codebertscore_f3-64": 0.7871607542037964,
        "codebertscore_f1-59": 0.7865352630615234,
        "codebertscore_f3-59": 0.7862585186958313,
        "codebertscore_f1-35": 0.8848108053207397,
        "codebertscore_f3-35": 0.910751223564148,
        "codebertscore_f1-26": 0.803948700428009,
        "codebertscore_f3-26": 0.8019347786903381,
        "codebertscore_f1-193": 0.7101929187774658,
        "codebertscore_f3-193": 0.7202057242393494,
        "codebertscore_f1-153": 0.8166229128837585,
        "codebertscore_f3-153": 0.8176263570785522,
        "codebertscore_f1-22": 0.9094266891479492,
        "codebertscore_f3-22": 0.9202997088432312,
        "codebertscore_f1-167": 0.7429997324943542,
        "codebertscore_f3-167": 0.7349024415016174,
        "codebertscore_f1-115": 0.801185667514801,
        "codebertscore_f3-115": 0.8002203702926636,
        "codebertscore_f1-8": 0.8064855933189392,
        "codebertscore_f3-8": 0.7899267673492432,
        "codebertscore_f1-7": 0.8155034780502319,
        "codebertscore_f3-7": 0.8097512722015381,
        "codebertscore_f1-23": 0.8215110898017883,
        "codebertscore_f3-23": 0.8270365595817566,
        "codebertscore_f1-56": 0.8100948333740234,
        "codebertscore_f3-56": 0.7895835041999817,
        "codebertscore_f1-61": 0.8681970238685608,
        "codebertscore_f3-61": 0.8880302309989929,
        "codebertscore_f1-140": 0.7850663065910339,
        "codebertscore_f3-140": 0.7869569659233093,
        "codebertscore_f1-170": 0.8312404751777649,
        "codebertscore_f3-170": 0.8354644179344177,
        "codebertscore_s_f1-182": 0.7639565467834473,
        "codebertscore_s_f3-182": 0.7536417841911316,
        "codebertscore_s_f1-28": 0.7869397401809692,
        "codebertscore_s_f3-28": 0.7982592582702637,
        "codebertscore_s_f1-6": 0.7641357779502869,
        "codebertscore_s_f3-6": 0.7770553827285767,
        "codebertscore_s_f1-72": 0.7809106707572937,
        "codebertscore_s_f3-72": 0.7868286371231079,
        "codebertscore_s_f1-64": 0.7771692872047424,
        "codebertscore_s_f3-64": 0.7791138291358948,
        "codebertscore_s_f1-59": 0.781391978263855,
        "codebertscore_s_f3-59": 0.7826486229896545,
        "codebertscore_s_f1-35": 0.8860273957252502,
        "codebertscore_s_f3-35": 0.9128337502479553,
        "codebertscore_s_f1-26": 0.7988485097885132,
        "codebertscore_s_f3-26": 0.8002598285675049,
        "codebertscore_s_f1-193": 0.7004488706588745,
        "codebertscore_s_f3-193": 0.7145051956176758,
        "codebertscore_s_f1-153": 0.8208484649658203,
        "codebertscore_s_f3-153": 0.8206769227981567,
        "codebertscore_s_f1-22": 0.9051136374473572,
        "codebertscore_s_f3-22": 0.916519820690155,
        "codebertscore_s_f1-167": 0.740135133266449,
        "codebertscore_s_f3-167": 0.7330794334411621,
        "codebertscore_s_f1-115": 0.7965805530548096,
        "codebertscore_s_f3-115": 0.7982566356658936,
        "codebertscore_s_f1-8": 0.8052331805229187,
        "codebertscore_s_f3-8": 0.7892279624938965,
        "codebertscore_s_f1-7": 0.8160226345062256,
        "codebertscore_s_f3-7": 0.8112586140632629,
        "codebertscore_s_f1-23": 0.8107820153236389,
        "codebertscore_s_f3-23": 0.8172632455825806,
        "codebertscore_s_f1-56": 0.8153656721115112,
        "codebertscore_s_f3-56": 0.7952213883399963,
        "codebertscore_s_f1-61": 0.8652353882789612,
        "codebertscore_s_f3-61": 0.8861187696456909,
        "codebertscore_s_f1-140": 0.7759188413619995,
        "codebertscore_s_f3-140": 0.7798725366592407,
        "codebertscore_s_f1-170": 0.8341023325920105,
        "codebertscore_s_f3-170": 0.8395687937736511,
        "gpt35_nsnr-182": 3,
        "raw_gpt35_nsnr-182": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-193": 3,
        "raw_gpt35_nsnr-193": "3",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-167": 3,
        "raw_gpt35_nsnr-167": "3",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-115": 4,
        "raw_gpt35_nswr-115": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-170": 4,
        "raw_gpt35_nswr-170": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nstd::string circular_shift(long x, long shift) {\n",
        "snippet": [
            "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n"
        ],
        "simplified": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
        "task_id": "65",
        "163": "std::string s = std::to_string(x);\n\tstd::string answer = \"\";\n\tif (shift > s.length()) {\n\t\t// reverse digits\n\t\tstd::string temp = \"\";\n\t\tfor (int i = s.length() - 1; i >= 0; i--) {\n\t\t\ttemp += s[i];\n\t\t}\n\t\tanswer = temp;\n\t}\n\telse {\n\t\tanswer = s.substr(shift) + s.substr(0, shift);\n\t}\n\treturn answer;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::string result = std::to_string(x);\n    shift = shift % result.size();\n    // Rotate left by one\n    return result.substr(shift) + result.substr(0, shift);",
        "grade-28": {
            "execution": 0
        },
        "6": "std::stringstream ss;\n  ss << x;\n  std::string digits = ss.str();\n  if (shift >= digits.size()) {\n    std::reverse(digits.begin(), digits.end());\n    return digits;\n  } else {\n    return digits.substr(shift) + digits.substr(0, shift);\n  }",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string s = std::to_string(x);\n    long n = s.size();\n    if (shift > n) {\n        shift = shift % n;\n    }\n    std::string xs = s;\n    for (long i = 0; i < n; i++) {\n        xs[i] = s[(i + shift) % n];\n    }\n    return xs;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<int> a;\n    std::vector<int> b;\n    int temp;\n    int length = 0;\n    while (x != 0) {\n        temp = x % 10;\n        a.push_back(temp);\n        x = x / 10;\n        length++;\n    }\n    for (int i = 0; i < shift; i++) {\n        b.push_back(a[i]);\n    }\n    for (int i = shift; i < length; i++) {\n        a[i - shift] = a[i];\n    }\n    for (int i = 0; i < shift; i++) {\n        a[length - shift + i] = b[i];\n    }\n    std::stringstream ss;\n    for (int i = 0; i < length; i++) {\n        ss << a[i];\n    }\n    return ss.str();",
        "grade-70": {
            "execution": 0
        },
        "62": "// TODO",
        "grade-62": {
            "execution": 0
        },
        "57": "std::stringstream stream;\n    stream << x;\n    std::string digit = stream.str();\n    if (shift < digit.length()) {\n        std::string first_half = digit.substr(0, shift);\n        std::string second_half = digit.substr(shift, digit.length() - shift);\n        return second_half + first_half;\n    } else {\n        std::reverse(digit.begin(), digit.end());\n        return digit;\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "if (x == 0) return \"0\";\n  std::string digits = std::to_string(x);\n  std::reverse(digits.begin(), digits.end());\n  long num_digits = digits.size();\n  // Even if shift is greater than num_digits, its ok to take modulo\n  shift = shift % num_digits;\n  // std::cout << digits << \", \" << shift << std::endl;\n  std::string shifted_digits = digits.substr(shift) + digits.substr(0, shift);\n  std::reverse(shifted_digits.begin(), shifted_digits.end());\n  return shifted_digits;",
        "grade-35": {
            "execution": 0
        },
        "188": "int num_digits = std::floor(std::log10(x)) + 1;\n    if (shift > num_digits) {\n        std::string s = std::to_string(x);\n        std::reverse(s.begin(), s.end());\n        return s;\n    } else {\n        long power = static_cast<long>(std::pow(10, shift));\n        long div = x / power;\n        long rem = x % power;\n        return std::to_string(rem) + std::to_string(div);\n    }",
        "grade-188": {
            "execution": 0
        },
        "26": "std::string num = std::to_string(x);\n    std::string rev_num;\n    int len = num.length();\n    shift = shift % len;\n    if (shift == 0) {\n        return num;\n    }\n    else {\n        rev_num = num.substr(len - shift, shift);\n        rev_num += num.substr(0, len - shift);\n        return rev_num;\n    }",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string str = std::to_string(x);\n   std::reverse(str.begin(), str.end());\n   std::string str2 = str.substr(0, shift);\n   std::reverse(str2.begin(), str2.end());\n   str = str.substr(shift, str.size() - shift);\n   str = str + str2;\n   std::reverse(str.begin(), str.end());\n   return str;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::stringstream ss;\n\tlong digits = 0;\n\tlong d = x;\n\twhile (d) {\n\t\td /= 10;\n\t\tdigits++;\n\t}\n\tss << x;\n\tstd::string s = ss.str();\n\tif (shift > digits) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\tshift = shift % digits;\n\tfor (int i = 0; i < shift; i++) {\n\t\tchar c = s[s.size() - 1];\n\t\ts.erase(s.end() - 1);\n\t\ts.insert(s.begin(), c);\n\t}\n\treturn s;",
        "grade-139": {
            "execution": 1
        },
        "22": "long tmp = x;\n  int count = 0;\n  while (tmp > 0) {\n    tmp /= 10;\n    count++;\n  }\n  int digits[count];\n  int i = 0;\n  tmp = x;\n  while (tmp > 0) {\n    digits[i] = tmp % 10;\n    tmp /= 10;\n    i++;\n  }\n  std::string result = \"\";\n  if (shift > count) {\n    for (int i = count - 1; i >= 0; i--) {\n      result += std::to_string(digits[i]);\n    }\n  } else {\n    for (int i = shift; i < count; i++) {\n      result += std::to_string(digits[i]);\n    }\n    for (int i = 0; i < shift; i++) {\n      result += std::to_string(digits[i]);\n    }\n  }\n  return result;",
        "grade-22": {
            "execution": 0
        },
        "151": "// Compute the length of the string needed to store the integer digits.\n\tlong len = log10(x) + 1;\n\t// Extract each digit of the integer x by repeatedly dividing by 10 and\n\t// using the remainder as the next digit.\n\tstd::string s;\n\tfor (long i = 0; i < len; i++) {\n\t\tlong x_digit = x % 10;\n\t\ts += std::to_string(x_digit);\n\t\tx /= 10;\n\t}\n\t// If the shift is greater than the number of digits, reverse the digits.\n\tif (shift > len) {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\t// Otherwise, circular shift the digits right.\n\telse {\n\t\t// Insert the digits at the end of the string into the beginning.\n\t\tstd::rotate(s.begin(), s.begin() + len - shift, s.end());\n\t}\n\treturn s;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::string str = std::to_string(x);\n    long N = str.size();\n    shift = shift % N;\n    std::string right = str.substr(N - shift, shift);\n    std::string left = str.substr(0, N - shift);\n    return right + left;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> digits;\n\tint n = x;\n\tint d;\n\t// create array with digits\n\twhile (n >= 1) {\n\t\td = n % 10;\n\t\tdigits.push_back(d);\n\t\tn = n / 10;\n\t}\n\t// reverse the digits in the array\n\tint start = 0;\n\tint end = digits.size() - 1;\n\tint temp;\n\twhile (start < end) {\n\t\ttemp = digits[start];\n\t\tdigits[start] = digits[end];\n\t\tdigits[end] = temp;\n\t\tstart++;\n\t\tend--;\n\t}\n\t// if shift is more than number of digits, return reversed digits\n\tif (shift > digits.size()) {\n\t\tstd::string s = \"\";\n\t\tint i;\n\t\tfor (i = 0; i < digits.size(); i++) {\n\t\t\ts += std::to_string(digits[i]);\n\t\t}\n\t\treturn s;\n\t}\n\t// shift the digits\n\tint shiftValue = shift % digits.size();\n\tstd::vector<long> finalDigits;\n\tfor (int i = 0; i < digits.size(); i++) {\n\t\tfinalDigits.push_back(digits[(i + shiftValue) % digits.size()]);\n\t}\n\t// if shift is 0, return reversed digits\n\tif (shift == 0) {\n\t\tstd::string s = \"\";\n\t\tint i;\n\t\tfor (i = 0; i < digits.size(); i++) {\n\t\t\ts += std::to_string(digits[i]);\n\t\t}\n\t\treturn s;\n\t}\n\t// return shifted digits\n\tstd::string s = \"\";\n\tint i;\n\tfor (i = 0; i < finalDigits.size(); i++) {\n\t\ts += std::to_string(finalDigits[i]);\n\t}\n\treturn s;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::stringstream ss;\n    std::string str;\n    ss << x;\n    ss >> str;\n    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n    char c = str[0];\n    for (int i = 0; i < str.length() - 1; i++) {\n        str[i] = str[i + 1];\n    }\n    str[str.length() - 1] = c;\n    return str;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string str = std::to_string(x);\n    std::reverse(str.begin(), str.end());\n    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string answer;\n  std::string num = std::to_string(x);\n  int digits = num.length();\n  if (shift >= digits) {\n    for (int i = digits - 1; i >= 0; i--) {\n      answer += num[i];\n    }\n  } else {\n    for (int i = shift; i < digits; i++) {\n      answer += num[i];\n    }\n    for (int i = 0; i < shift; i++) {\n      answer += num[i];\n    }\n  }\n  return answer;",
        "grade-55": {
            "execution": 0
        },
        "59": "int i = 0;\n    string s;\n    string res;\n    if (x == 0) {\n        return \"0\";\n    }\n    while (x != 0) {\n        int remainder = x % 10;\n        s.push_back(remainder + '0');\n        x = x / 10;\n        i++;\n    }\n    if (shift > i) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    reverse(s.begin(), s.end());\n    res = s.substr(shift, i - shift);\n    res = res + s.substr(0, shift);\n    return res;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.1859162535173284,
        "bleu-28": 0.13654829483667727,
        "bleu-6": 0.21478384227705008,
        "bleu-189": 0.13337616606470776,
        "bleu-70": 0.015278277680898065,
        "bleu-62": 0.0,
        "bleu-57": 0.2535166903036365,
        "bleu-35": 0.12792317503585585,
        "bleu-188": 0.14800555865245635,
        "bleu-26": 0.22531331773973878,
        "bleu-173": 0.1866352958616825,
        "bleu-139": 0.11880629264574319,
        "bleu-22": 0.020521958174312696,
        "bleu-151": 0.04508578682376922,
        "bleu-108": 0.1891933700133759,
        "bleu-8": 0.021045030335280136,
        "bleu-7": 0.157429348251547,
        "bleu-23": 0.1460722220570557,
        "bleu-55": 0.09228249257189704,
        "bleu-59": 0.1658194139820262,
        "codebleu-163": 0.5360588587605417,
        "codebleu-28": 0.3415548374066504,
        "codebleu-6": 0.6112372682002843,
        "codebleu-189": 0.44713411772646566,
        "codebleu-70": 0.5016325170747958,
        "codebleu-62": 0.011594202898550723,
        "codebleu-57": 0.6875061224022108,
        "codebleu-35": 0.6617506260747533,
        "codebleu-188": 0.5801964316716669,
        "codebleu-26": 0.5146649022647779,
        "codebleu-173": 0.6462628938812007,
        "codebleu-139": 0.6823401318742904,
        "codebleu-22": 0.4725970348159253,
        "codebleu-151": 0.6627880539890484,
        "codebleu-108": 0.4569561043304547,
        "codebleu-8": 0.6771114442778611,
        "codebleu-7": 0.6260341146268491,
        "codebleu-23": 0.4921294883431135,
        "codebleu-55": 0.4780319177704378,
        "codebleu-59": 0.6867222515764945,
        "chrf-163": 0.43858612888961884,
        "chrf-28": 0.32759192473930265,
        "chrf-6": 0.412841159275518,
        "chrf-189": 0.3168584998159083,
        "chrf-70": 0.2655193190356444,
        "chrf-62": 0.0,
        "chrf-57": 0.4651188697156063,
        "chrf-35": 0.3853139198545219,
        "chrf-188": 0.36059892105619823,
        "chrf-26": 0.4176629842444522,
        "chrf-173": 0.40711666551492315,
        "chrf-139": 0.3507836815681564,
        "chrf-22": 0.23598383594402247,
        "chrf-151": 0.2972335327123689,
        "chrf-108": 0.3750361919330687,
        "chrf-8": 0.20152589466774765,
        "chrf-7": 0.4021458053848746,
        "chrf-23": 0.3076194358719043,
        "chrf-55": 0.2937631128940171,
        "chrf-59": 0.42500356404298073,
        "rougel-163": 0.44808743169398907,
        "rougel-28": 0.4426229508196721,
        "rougel-6": 0.5263157894736841,
        "rougel-189": 0.358974358974359,
        "rougel-70": 0.24806201550387594,
        "rougel-62": 0.0,
        "rougel-57": 0.48000000000000004,
        "rougel-35": 0.35185185185185186,
        "rougel-188": 0.37894736842105264,
        "rougel-26": 0.47741935483870973,
        "rougel-173": 0.4782608695652174,
        "rougel-139": 0.3853211009174312,
        "rougel-22": 0.21374045801526717,
        "rougel-151": 0.27838827838827834,
        "rougel-108": 0.4195804195804196,
        "rougel-8": 0.19913419913419916,
        "rougel-7": 0.4444444444444444,
        "rougel-23": 0.45588235294117646,
        "rougel-55": 0.30456852791878175,
        "rougel-59": 0.4444444444444444,
        "meteor-163": 0.4287538770297391,
        "meteor-28": 0.23255978291593643,
        "meteor-6": 0.4225398936170212,
        "meteor-189": 0.3129989668451207,
        "meteor-70": 0.2793346571124349,
        "meteor-62": 0.0,
        "meteor-57": 0.47381071714209544,
        "meteor-35": 0.4442220675252349,
        "meteor-188": 0.42497894115557194,
        "meteor-26": 0.40242980812968515,
        "meteor-173": 0.4052933673469387,
        "meteor-139": 0.4043302552082281,
        "meteor-22": 0.2606098510556582,
        "meteor-151": 0.4518509508614443,
        "meteor-108": 0.3227401323921224,
        "meteor-8": 0.3085434370940734,
        "meteor-7": 0.38052638608015565,
        "meteor-23": 0.358667443959681,
        "meteor-55": 0.2630096260054759,
        "meteor-59": 0.46148931226765805,
        "ruby-163": 0.2685185185185185,
        "ruby-28": 0.28,
        "ruby-6": 0.2857142857142857,
        "ruby-189": 0.2098765432098766,
        "ruby-70": 0.15300546448087426,
        "ruby-62": 0.0,
        "ruby-57": 0.32999999999999996,
        "ruby-35": 0.23404255319148937,
        "ruby-188": 0.26956521739130435,
        "ruby-26": 0.30000000000000004,
        "ruby-173": 0.3302752293577982,
        "ruby-139": 0.2727272727272727,
        "ruby-22": 0.1336898395721925,
        "ruby-151": 0.1717171717171717,
        "ruby-108": 0.21333333333333337,
        "ruby-8": 0.11886304909560719,
        "ruby-7": 0.33333333333333337,
        "ruby-23": 0.31999999999999995,
        "ruby-55": 0.20491803278688525,
        "ruby-59": 0.31060606060606055,
        "codebertscore_f1-163": 0.8231186866760254,
        "codebertscore_f3-163": 0.8428842425346375,
        "codebertscore_f1-28": 0.7964755296707153,
        "codebertscore_f3-28": 0.7891814112663269,
        "codebertscore_f1-6": 0.8198680281639099,
        "codebertscore_f3-6": 0.8181923627853394,
        "codebertscore_f1-189": 0.8002344965934753,
        "codebertscore_f3-189": 0.8056003451347351,
        "codebertscore_f1-70": 0.6681926250457764,
        "codebertscore_f3-70": 0.6916580200195312,
        "codebertscore_f1-62": 0.48158758878707886,
        "codebertscore_f3-62": 0.4529128074645996,
        "codebertscore_f1-57": 0.7946828007698059,
        "codebertscore_f3-57": 0.8109442591667175,
        "codebertscore_f1-35": 0.7574591040611267,
        "codebertscore_f3-35": 0.7907611131668091,
        "codebertscore_f1-188": 0.7479075193405151,
        "codebertscore_f3-188": 0.7767342329025269,
        "codebertscore_f1-26": 0.8198196887969971,
        "codebertscore_f3-26": 0.8241234421730042,
        "codebertscore_f1-173": 0.8128165602684021,
        "codebertscore_f3-173": 0.8281106948852539,
        "codebertscore_f1-139": 0.7567358613014221,
        "codebertscore_f3-139": 0.7806188464164734,
        "codebertscore_f1-22": 0.6813408732414246,
        "codebertscore_f3-22": 0.7072810530662537,
        "codebertscore_f1-151": 0.7074880003929138,
        "codebertscore_f3-151": 0.7666561603546143,
        "codebertscore_f1-108": 0.813782274723053,
        "codebertscore_f3-108": 0.8148162364959717,
        "codebertscore_f1-8": 0.6597360968589783,
        "codebertscore_f3-8": 0.7052860260009766,
        "codebertscore_f1-7": 0.7638758420944214,
        "codebertscore_f3-7": 0.7773072719573975,
        "codebertscore_f1-23": 0.7809056639671326,
        "codebertscore_f3-23": 0.7701000571250916,
        "codebertscore_f1-55": 0.7386765480041504,
        "codebertscore_f3-55": 0.7546941041946411,
        "codebertscore_f1-59": 0.7650670409202576,
        "codebertscore_f3-59": 0.7857167720794678,
        "codebertscore_s_f1-163": 0.8204330801963806,
        "codebertscore_s_f3-163": 0.8413864374160767,
        "codebertscore_s_f1-28": 0.7876710295677185,
        "codebertscore_s_f3-28": 0.7828960418701172,
        "codebertscore_s_f1-6": 0.8133389353752136,
        "codebertscore_s_f3-6": 0.8143126368522644,
        "codebertscore_s_f1-189": 0.8015948534011841,
        "codebertscore_s_f3-189": 0.8084601759910583,
        "codebertscore_s_f1-70": 0.6776551604270935,
        "codebertscore_s_f3-70": 0.7020561695098877,
        "codebertscore_s_f1-62": 0.5102155804634094,
        "codebertscore_s_f3-62": 0.4874041676521301,
        "codebertscore_s_f1-57": 0.8000415563583374,
        "codebertscore_s_f3-57": 0.8177261352539062,
        "codebertscore_s_f1-35": 0.767132043838501,
        "codebertscore_s_f3-35": 0.8027997016906738,
        "codebertscore_s_f1-188": 0.7488881349563599,
        "codebertscore_s_f3-188": 0.7796728014945984,
        "codebertscore_s_f1-26": 0.8137213587760925,
        "codebertscore_s_f3-26": 0.8205522894859314,
        "codebertscore_s_f1-173": 0.8078861832618713,
        "codebertscore_s_f3-173": 0.8249041438102722,
        "codebertscore_s_f1-139": 0.7622128129005432,
        "codebertscore_s_f3-139": 0.7882576584815979,
        "codebertscore_s_f1-22": 0.6883478760719299,
        "codebertscore_s_f3-22": 0.7148473262786865,
        "codebertscore_s_f1-151": 0.7152694463729858,
        "codebertscore_s_f3-151": 0.7777248024940491,
        "codebertscore_s_f1-108": 0.8089682459831238,
        "codebertscore_s_f3-108": 0.8100259304046631,
        "codebertscore_s_f1-8": 0.6749337911605835,
        "codebertscore_s_f3-8": 0.7180616855621338,
        "codebertscore_s_f1-7": 0.7676951289176941,
        "codebertscore_s_f3-7": 0.7848197221755981,
        "codebertscore_s_f1-23": 0.7701212763786316,
        "codebertscore_s_f3-23": 0.7611207365989685,
        "codebertscore_s_f1-55": 0.7430297136306763,
        "codebertscore_s_f3-55": 0.7611252069473267,
        "codebertscore_s_f1-59": 0.7732446789741516,
        "codebertscore_s_f3-59": 0.7946687340736389,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0-4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long> l) {\n",
        "snippet": [
            "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n"
        ],
        "simplified": "Return maximum element in the list.",
        "task_id": "35",
        "28": "long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-28": {
            "execution": 1
        },
        "6": "assert(l.size() > 0);\n  long max_ = l[0];\n  for (auto i : l) {\n    if (i > max_)\n      max_ = i;\n  }\n  return max_;",
        "grade-6": {
            "execution": 1
        },
        "83": "long maximum = -1000000000;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;",
        "grade-83": {
            "execution": 1
        },
        "69": "long maximum = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;",
        "grade-69": {
            "execution": 1
        },
        "62": "// YOUR CODE HERE\n  return *max_element(l.begin(), l.end());",
        "grade-62": {
            "execution": 1
        },
        "36": "// TODO: Replace the following line with your implementation.\n  int max = l[0];\n  for(int i=0;i<l.size();i++){\n    if(l[i]>max){\n      max = l[i];\n    }\n  }\n  return max;",
        "grade-36": {
            "execution": 1
        },
        "26": "long maximum = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;",
        "grade-26": {
            "execution": 1
        },
        "178": "assert(l.size() > 0);\n    auto iter = std::max_element(l.begin(), l.end());\n    long res = *iter;\n    return res;",
        "grade-178": {
            "execution": 1
        },
        "22": "// REPLACE WITH YOUR CODE.\n\treturn *std::max_element(l.begin(), l.end());",
        "grade-22": {
            "execution": 1
        },
        "199": "// YOUR CODE HERE\n    long max = *std::max_element(l.begin(), l.end());\n    return max;",
        "grade-199": {
            "execution": 1
        },
        "136": "assert(l.size() != 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-136": {
            "execution": 1
        },
        "8": "long result = 0;\n    for (long i=0; i<l.size(); i++) {\n        if (l[i] > result) {\n            result = l[i];\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(l.size() > 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-7": {
            "execution": 1
        },
        "23": "long max;\n\tmax = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;",
        "grade-23": {
            "execution": 1
        },
        "60": "int max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-60": {
            "execution": 1
        },
        "64": "return *max_element(l.begin(), l.end());",
        "grade-64": {
            "execution": 1
        },
        "164": "assert(!l.empty());\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-164": {
            "execution": 1
        },
        "187": "// Your code here\n    long maximum = l[0];\n    for(int i=1;i<l.size();i++){\n      if(l[i]>maximum){\n        maximum = l[i];\n      }\n    }\n    return maximum;",
        "grade-187": {
            "execution": 1
        },
        "53": "// ------------WRITE YOUR CODE BELOW THIS LINE------------\n    return *std::max_element(l.begin(), l.end());\n    // ------------WRITE YOUR CODE ABOVE THIS LINE------------",
        "grade-53": {
            "execution": 1
        },
        "135": "assert(l.size() > 0);\n    long mx = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > mx)\n            mx = l[i];\n    }\n    return mx;",
        "grade-135": {
            "execution": 1
        },
        "bleu-28": 0.5009201662735476,
        "bleu-6": 0.17331775153919846,
        "bleu-83": 0.5922519328636675,
        "bleu-69": 0.5592825505545735,
        "bleu-62": 0.02447453532468331,
        "bleu-36": 0.49033428364923837,
        "bleu-26": 0.5961799202874157,
        "bleu-178": 0.1174818614593876,
        "bleu-22": 0.02872130989943178,
        "bleu-199": 0.08107693467616901,
        "bleu-136": 0.4487994824304195,
        "bleu-8": 0.533584739508379,
        "bleu-7": 0.452737220524017,
        "bleu-23": 0.5874738710135075,
        "bleu-60": 0.5554694495160871,
        "bleu-64": 0.017756214390331933,
        "bleu-164": 0.4152582631630124,
        "bleu-187": 0.45687722617572196,
        "bleu-53": 0.017655867705458086,
        "bleu-135": 0.4250819890939235,
        "codebleu-28": 0.7257088930860718,
        "codebleu-6": 0.5460706699105512,
        "codebleu-83": 0.7740313318510608,
        "codebleu-69": 0.724133277618637,
        "codebleu-62": 0.23476117414775585,
        "codebleu-36": 0.7181426650588,
        "codebleu-26": 0.7282899585845489,
        "codebleu-178": 0.43999364293116555,
        "codebleu-22": 0.263161361702167,
        "codebleu-199": 0.3305220626190899,
        "codebleu-136": 0.7222817298037338,
        "codebleu-8": 0.7176678153403392,
        "codebleu-7": 0.7222817298037338,
        "codebleu-23": 0.7390958720225742,
        "codebleu-60": 0.7352116842113247,
        "codebleu-64": 0.19258210945755702,
        "codebleu-164": 0.7147400935055531,
        "codebleu-187": 0.7108613359818052,
        "codebleu-53": 0.3371062063761554,
        "codebleu-135": 0.7178709688748953,
        "chrf-28": 0.5161695579705406,
        "chrf-6": 0.3318801232362067,
        "chrf-83": 0.6295467843891012,
        "chrf-69": 0.5541539398691574,
        "chrf-62": 0.11651751061574173,
        "chrf-36": 0.5627918054688491,
        "chrf-26": 0.5699399638318794,
        "chrf-178": 0.20978816638061115,
        "chrf-22": 0.11688088754431597,
        "chrf-199": 0.2142977677010185,
        "chrf-136": 0.5566538625037454,
        "chrf-8": 0.4250675605829979,
        "chrf-7": 0.5559519946883645,
        "chrf-23": 0.6211678403583942,
        "chrf-60": 0.5872067187812317,
        "chrf-64": 0.12147595896960839,
        "chrf-164": 0.49680469707585984,
        "chrf-187": 0.49066591958358735,
        "chrf-53": 0.09690150915370839,
        "chrf-135": 0.4861800108001125,
        "rougel-28": 0.7789473684210526,
        "rougel-6": 0.4186046511627907,
        "rougel-83": 0.7956989247311829,
        "rougel-69": 0.7578947368421052,
        "rougel-62": 0.2388059701492537,
        "rougel-36": 0.7289719626168225,
        "rougel-26": 0.7826086956521738,
        "rougel-178": 0.3255813953488372,
        "rougel-22": 0.2222222222222222,
        "rougel-199": 0.3466666666666666,
        "rougel-136": 0.7102803738317757,
        "rougel-8": 0.7608695652173912,
        "rougel-7": 0.7169811320754719,
        "rougel-23": 0.8041237113402062,
        "rougel-60": 0.8,
        "rougel-64": 0.25806451612903225,
        "rougel-164": 0.7047619047619048,
        "rougel-187": 0.7000000000000001,
        "rougel-53": 0.13953488372093023,
        "rougel-135": 0.673076923076923,
        "meteor-28": 0.8602747252747251,
        "meteor-6": 0.39279189503404754,
        "meteor-83": 0.8286783095766603,
        "meteor-69": 0.8025028295298566,
        "meteor-62": 0.16083767201501925,
        "meteor-36": 0.8694669100553232,
        "meteor-26": 0.8078291757435504,
        "meteor-178": 0.2734370147696359,
        "meteor-22": 0.15897612488521579,
        "meteor-199": 0.2937420178799489,
        "meteor-136": 0.8639511762015831,
        "meteor-8": 0.7817109144542773,
        "meteor-7": 0.865805148682702,
        "meteor-23": 0.8884924441922011,
        "meteor-60": 0.8867367017277784,
        "meteor-64": 0.1627433316360503,
        "meteor-164": 0.8417741935483871,
        "meteor-187": 0.7869041191602884,
        "meteor-53": 0.15088900249943196,
        "meteor-135": 0.7801204629606308,
        "ruby-28": 0.6799999999999999,
        "ruby-6": 0.1777777777777778,
        "ruby-83": 0.7083333333333333,
        "ruby-69": 0.6599999999999999,
        "ruby-62": 0.15555555555555556,
        "ruby-36": 0.5806451612903225,
        "ruby-26": 0.6808510638297872,
        "ruby-178": 0.15555555555555556,
        "ruby-22": 0.15555555555555556,
        "ruby-199": 0.2222222222222222,
        "ruby-136": 0.564516129032258,
        "ruby-8": 0.6595744680851063,
        "ruby-7": 0.5737704918032787,
        "ruby-23": 0.6923076923076923,
        "ruby-60": 0.7,
        "ruby-64": 0.1777777777777778,
        "ruby-164": 0.5666666666666667,
        "ruby-187": 0.5818181818181818,
        "ruby-53": 0.0714285714285714,
        "ruby-135": 0.5423728813559322,
        "codebertscore_f1-28": 0.9106323719024658,
        "codebertscore_f3-28": 0.9051702618598938,
        "codebertscore_f1-6": 0.8542959690093994,
        "codebertscore_f3-6": 0.846501886844635,
        "codebertscore_f1-83": 0.9224353432655334,
        "codebertscore_f3-83": 0.929806649684906,
        "codebertscore_f1-69": 0.9234225153923035,
        "codebertscore_f3-69": 0.9146136045455933,
        "codebertscore_f1-62": 0.720881998538971,
        "codebertscore_f3-62": 0.7208571434020996,
        "codebertscore_f1-36": 0.8636574149131775,
        "codebertscore_f3-36": 0.9031716585159302,
        "codebertscore_f1-26": 0.929751455783844,
        "codebertscore_f3-26": 0.922187089920044,
        "codebertscore_f1-178": 0.7650659084320068,
        "codebertscore_f3-178": 0.7606271505355835,
        "codebertscore_f1-22": 0.7085429430007935,
        "codebertscore_f3-22": 0.7164565324783325,
        "codebertscore_f1-199": 0.7565699815750122,
        "codebertscore_f3-199": 0.7679689526557922,
        "codebertscore_f1-136": 0.8891655206680298,
        "codebertscore_f3-136": 0.890830397605896,
        "codebertscore_f1-8": 0.9039393067359924,
        "codebertscore_f3-8": 0.8966525793075562,
        "codebertscore_f1-7": 0.8892138004302979,
        "codebertscore_f3-7": 0.8907687067985535,
        "codebertscore_f1-23": 0.9321913123130798,
        "codebertscore_f3-23": 0.9237684607505798,
        "codebertscore_f1-60": 0.9191031455993652,
        "codebertscore_f3-60": 0.9136861562728882,
        "codebertscore_f1-64": 0.7508816719055176,
        "codebertscore_f3-64": 0.7259318828582764,
        "codebertscore_f1-164": 0.8818504810333252,
        "codebertscore_f3-164": 0.8835000991821289,
        "codebertscore_f1-187": 0.8672446608543396,
        "codebertscore_f3-187": 0.8840355277061462,
        "codebertscore_f1-53": 0.6858721375465393,
        "codebertscore_f3-53": 0.7121860980987549,
        "codebertscore_f1-135": 0.8377818465232849,
        "codebertscore_f3-135": 0.843859851360321,
        "codebertscore_s_f1-28": 0.8972783088684082,
        "codebertscore_s_f3-28": 0.8910701274871826,
        "codebertscore_s_f1-6": 0.8488075137138367,
        "codebertscore_s_f3-6": 0.8408255577087402,
        "codebertscore_s_f1-83": 0.9074885249137878,
        "codebertscore_s_f3-83": 0.9151189923286438,
        "codebertscore_s_f1-69": 0.9098805785179138,
        "codebertscore_s_f3-69": 0.9009556174278259,
        "codebertscore_s_f1-62": 0.6984853744506836,
        "codebertscore_s_f3-62": 0.7004650235176086,
        "codebertscore_s_f1-36": 0.8549168705940247,
        "codebertscore_s_f3-36": 0.895538866519928,
        "codebertscore_s_f1-26": 0.9163536429405212,
        "codebertscore_s_f3-26": 0.907471776008606,
        "codebertscore_s_f1-178": 0.7642519474029541,
        "codebertscore_s_f3-178": 0.7577393054962158,
        "codebertscore_s_f1-22": 0.6822104454040527,
        "codebertscore_s_f3-22": 0.6976441144943237,
        "codebertscore_s_f1-199": 0.7400016784667969,
        "codebertscore_s_f3-199": 0.7488248944282532,
        "codebertscore_s_f1-136": 0.8841536045074463,
        "codebertscore_s_f3-136": 0.8845524191856384,
        "codebertscore_s_f1-8": 0.8939552903175354,
        "codebertscore_s_f3-8": 0.8857554793357849,
        "codebertscore_s_f1-7": 0.8850993514060974,
        "codebertscore_s_f3-7": 0.8852387070655823,
        "codebertscore_s_f1-23": 0.9188355803489685,
        "codebertscore_s_f3-23": 0.9105218648910522,
        "codebertscore_s_f1-60": 0.9078440070152283,
        "codebertscore_s_f3-60": 0.9004708528518677,
        "codebertscore_s_f1-64": 0.7306774258613586,
        "codebertscore_s_f3-64": 0.7054667472839355,
        "codebertscore_s_f1-164": 0.8773454427719116,
        "codebertscore_s_f3-164": 0.8784488439559937,
        "codebertscore_s_f1-187": 0.8609998226165771,
        "codebertscore_s_f3-187": 0.8788806796073914,
        "codebertscore_s_f1-53": 0.6675140857696533,
        "codebertscore_s_f3-53": 0.6997695565223694,
        "codebertscore_s_f1-135": 0.8410348892211914,
        "codebertscore_s_f3-135": 0.8468424081802368,
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-83": 4,
        "raw_gpt35_nsnr-83": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-53": 4,
        "raw_gpt35_nsnr-53": "4",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-83": 4,
        "raw_gpt35_nswr-83": "4",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-136": 4,
        "raw_gpt35_nswr-136": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-53": 4,
        "raw_gpt35_nswr-53": "4",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n"
        ],
        "simplified": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
        "task_id": "121",
        "32": "int n = lst.size();\n    long ans = 0;\n    for(int i = 0; i < n; i++)\n    {\n        if(i%2==0 && lst[i]%2==1)\n        {\n            ans += lst[i];\n        }\n    }\n    return ans;",
        "grade-32": {
            "execution": 1
        },
        "7": "long sum = 0;\n    //loop over vector and check for odd number in even position\n    for(int i = 1; i < lst.size(); i+=2){\n      if(lst[i] % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return sum;",
        "grade-7": {
            "execution": 0
        },
        "86": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;",
        "grade-86": {
            "execution": 1
        },
        "74": "long sum = 0;\n    int size = lst.size();\n    // this will only access the even indices in the list\n    for (int i = 0; i < size; i += 2) {\n        // this will only add odd numbers\n        if (lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-74": {
            "execution": 1
        },
        "68": "long sum=0;\n    for(int i=0;i<lst.size();i++){\n      if(i%2==0 && lst[i]%2!=0){\n        sum+=lst[i];\n      }\n    }\n    return sum;",
        "grade-68": {
            "execution": 1
        },
        "43": "long sum = 0;\n\tint cnt = 0;\n\tfor (auto const& element : lst) {\n\t\tif (cnt % 2 == 0) {\n\t\t\tif (element % 2 != 0) {\n\t\t\t\tsum += element;\n\t\t\t}\n\t\t}\n\t\tcnt++;\n\t}\n\treturn sum;",
        "grade-43": {
            "execution": 1
        },
        "28": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-28": {
            "execution": 1
        },
        "179": "long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n      if(lst[i] % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return sum;",
        "grade-179": {
            "execution": 1
        },
        "23": "long output = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            output += lst[i];\n        }\n    }\n    return output;",
        "grade-23": {
            "execution": 1
        },
        "134": "long res = 0;\n  for (unsigned int i = 0; i < lst.size(); i++) {\n    if ((i + 1) % 2 == 0 && lst[i] % 2 != 0) {\n      res += lst[i];\n    }\n  }\n  return res;",
        "grade-134": {
            "execution": 0
        },
        "9": "int n = lst.size();\n    int sum = 0;\n    for(int i = 1; i < n; i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-9": {
            "execution": 0
        },
        "8": "long sum = 0;\n    for(int i = 1; i < lst.size(); i+=2)\n        if(lst[i] % 2 == 0)\n            sum += lst[i];\n    return sum;",
        "grade-8": {
            "execution": 0
        },
        "24": "if (lst.size() == 0)\n\t\treturn 0;\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;",
        "grade-24": {
            "execution": 1
        },
        "65": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if((i + 1) % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-65": {
            "execution": 0
        },
        "70": "long sum = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i] % 2 != 0)\n      sum += lst[i];\n  }\n  return sum;",
        "grade-70": {
            "execution": 1
        },
        "163": "int i = 0;\n  int even = 0;\n  int odd = 0;\n  for (auto num : lst) {\n    if (i % 2 == 0) {\n      even += num;\n    } else {\n      odd += num;\n    }\n    i++;\n  }\n  return even - odd;",
        "grade-163": {
            "execution": 0
        },
        "185": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 1 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-185": {
            "execution": 1
        },
        "60": "long sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==0 && lst[i]%2!=0)\n    {\n      sum+=lst[i];\n    }\n  }\n  return sum;",
        "grade-60": {
            "execution": 1
        },
        "132": "std::vector<long> oddEven;\n\tstd::vector<long> odd;\n\tlong i = 0;\n\tif (lst.size() % 2 == 0) {\n\t\toddEven.resize(lst.size() / 2);\n\t}\n\telse {\n\t\toddEven.resize(lst.size() / 2 + 1);\n\t}\n\twhile (i < lst.size()) {\n\t\toddEven[i / 2] = lst[i];\n\t\ti = i + 2;\n\t}\n\ti = 0;\n\twhile (i < oddEven.size()) {\n\t\tif (oddEven[i] % 2 != 0) {\n\t\t\todd.push_back(oddEven[i]);\n\t\t}\n\t\ti++;\n\t}\n\tlong res = 0;\n\tfor (long j = 0; j < odd.size(); j++) {\n\t\tres = res + odd[j];\n\t}\n\treturn res;",
        "grade-132": {
            "execution": 1
        },
        "66": "long sum=0;\n    for(int i=0;i<lst.size();i++)\n        if(lst[i]%2!=0&&i%2==0)\n            sum+=lst[i];\n    return sum;",
        "grade-66": {
            "execution": 1
        },
        "bleu-32": 0.469809806378637,
        "bleu-7": 0.4092921259376199,
        "bleu-86": 0.5884809115289004,
        "bleu-74": 0.3972355175879062,
        "bleu-68": 0.55313801271058,
        "bleu-43": 0.2228729825024993,
        "bleu-28": 0.55313801271058,
        "bleu-179": 0.5723629167202886,
        "bleu-23": 0.5012787961161898,
        "bleu-134": 0.43509396166515907,
        "bleu-9": 0.5222111522575519,
        "bleu-8": 0.6238104491254368,
        "bleu-24": 0.4981387605761287,
        "bleu-65": 0.5233560017370923,
        "bleu-70": 0.5884809115289004,
        "bleu-163": 0.22027677757389647,
        "bleu-185": 0.6036930342610295,
        "bleu-60": 0.55313801271058,
        "bleu-132": 0.11755405183362341,
        "bleu-66": 0.6911336694304434,
        "codebleu-32": 0.6792162677979198,
        "codebleu-7": 0.649582336240961,
        "codebleu-86": 0.6696327442415032,
        "codebleu-74": 0.6681920193682727,
        "codebleu-68": 0.6947739589718085,
        "codebleu-43": 0.535891372890099,
        "codebleu-28": 0.6947739589718085,
        "codebleu-179": 0.6657640326239598,
        "codebleu-23": 0.6817124001811404,
        "codebleu-134": 0.6793235156885472,
        "codebleu-9": 0.6683734325146476,
        "codebleu-8": 0.6790276932946899,
        "codebleu-24": 0.710969254708816,
        "codebleu-65": 0.7064329083767031,
        "codebleu-70": 0.6696327442415032,
        "codebleu-163": 0.4993132500249977,
        "codebleu-185": 0.7020276431336488,
        "codebleu-60": 0.6927842301776378,
        "codebleu-132": 0.6609745506408207,
        "codebleu-66": 0.7261937447912864,
        "chrf-32": 0.5179474265729034,
        "chrf-7": 0.5233547517689875,
        "chrf-86": 0.6538122819458349,
        "chrf-74": 0.5258251197370647,
        "chrf-68": 0.6386595029115499,
        "chrf-43": 0.31786887130723523,
        "chrf-28": 0.6386595029115499,
        "chrf-179": 0.6397710961110382,
        "chrf-23": 0.5117878842798897,
        "chrf-134": 0.48512598343909924,
        "chrf-9": 0.6401007744344802,
        "chrf-8": 0.6742975944512228,
        "chrf-24": 0.620412488585377,
        "chrf-65": 0.6363833789521655,
        "chrf-70": 0.6538122819458349,
        "chrf-163": 0.2935225733171085,
        "chrf-185": 0.6808405009809506,
        "chrf-60": 0.6386595029115499,
        "chrf-132": 0.27299432727060047,
        "chrf-66": 0.7286311667848082,
        "rougel-32": 0.6610169491525424,
        "rougel-7": 0.7058823529411764,
        "rougel-86": 0.826923076923077,
        "rougel-74": 0.6259541984732824,
        "rougel-68": 0.7787610619469028,
        "rougel-43": 0.4403669724770642,
        "rougel-28": 0.7787610619469028,
        "rougel-179": 0.8113207547169811,
        "rougel-23": 0.7256637168141593,
        "rougel-134": 0.6949152542372882,
        "rougel-9": 0.7027027027027027,
        "rougel-8": 0.8431372549019608,
        "rougel-24": 0.728813559322034,
        "rougel-65": 0.7521367521367521,
        "rougel-70": 0.826923076923077,
        "rougel-163": 0.43243243243243246,
        "rougel-185": 0.8141592920353983,
        "rougel-60": 0.7787610619469028,
        "rougel-132": 0.2892561983471074,
        "rougel-66": 0.8256880733944955,
        "meteor-32": 0.74205189895171,
        "meteor-7": 0.8248182858607626,
        "meteor-86": 0.8324986598199927,
        "meteor-74": 0.776705428507993,
        "meteor-68": 0.8185166602956165,
        "meteor-43": 0.40299652549694565,
        "meteor-28": 0.8185166602956165,
        "meteor-179": 0.8248931841659581,
        "meteor-23": 0.7548986295163665,
        "meteor-134": 0.6568484848484849,
        "meteor-9": 0.8137341416001636,
        "meteor-8": 0.8432984289486914,
        "meteor-24": 0.8113077848427566,
        "meteor-65": 0.7322617827868853,
        "meteor-70": 0.8324986598199927,
        "meteor-163": 0.3823039613048869,
        "meteor-185": 0.8185166602956165,
        "meteor-60": 0.8185166602956165,
        "meteor-132": 0.47452853208281687,
        "meteor-66": 0.8300148359634465,
        "ruby-32": 0.4375,
        "ruby-7": 0.5384615384615384,
        "ruby-86": 0.7407407407407407,
        "ruby-74": 0.4025974025974026,
        "ruby-68": 0.6271186440677966,
        "ruby-43": 0.3090909090909091,
        "ruby-28": 0.6271186440677966,
        "ruby-179": 0.7037037037037037,
        "ruby-23": 0.576271186440678,
        "ruby-134": 0.53125,
        "ruby-9": 0.49122807017543857,
        "ruby-8": 0.7777777777777778,
        "ruby-24": 0.5625,
        "ruby-65": 0.5873015873015873,
        "ruby-70": 0.7407407407407407,
        "ruby-163": 0.24561403508771928,
        "ruby-185": 0.6779661016949152,
        "ruby-60": 0.6271186440677966,
        "ruby-132": 0.17021276595744683,
        "ruby-66": 0.7272727272727273,
        "codebertscore_f1-32": 0.9002864360809326,
        "codebertscore_f3-32": 0.9003098607063293,
        "codebertscore_f1-7": 0.8656328916549683,
        "codebertscore_f3-7": 0.8943074345588684,
        "codebertscore_f1-86": 0.9296063780784607,
        "codebertscore_f3-86": 0.9184197187423706,
        "codebertscore_f1-74": 0.8462250232696533,
        "codebertscore_f3-74": 0.8849673271179199,
        "codebertscore_f1-68": 0.9337447881698608,
        "codebertscore_f3-68": 0.9264684915542603,
        "codebertscore_f1-43": 0.8318072557449341,
        "codebertscore_f3-43": 0.8386908173561096,
        "codebertscore_f1-28": 0.9194279313087463,
        "codebertscore_f3-28": 0.9117237329483032,
        "codebertscore_f1-179": 0.9297792911529541,
        "codebertscore_f3-179": 0.9186273217201233,
        "codebertscore_f1-23": 0.9036790728569031,
        "codebertscore_f3-23": 0.8966184258460999,
        "codebertscore_f1-134": 0.9028550982475281,
        "codebertscore_f3-134": 0.9029151201248169,
        "codebertscore_f1-9": 0.9031423330307007,
        "codebertscore_f3-9": 0.8985916972160339,
        "codebertscore_f1-8": 0.9250667095184326,
        "codebertscore_f3-8": 0.9151675701141357,
        "codebertscore_f1-24": 0.9085807800292969,
        "codebertscore_f3-24": 0.9029106497764587,
        "codebertscore_f1-65": 0.9092673659324646,
        "codebertscore_f3-65": 0.9071913957595825,
        "codebertscore_f1-70": 0.9307682514190674,
        "codebertscore_f3-70": 0.919319212436676,
        "codebertscore_f1-163": 0.8145891427993774,
        "codebertscore_f3-163": 0.8221030235290527,
        "codebertscore_f1-185": 0.9257879853248596,
        "codebertscore_f3-185": 0.9205971360206604,
        "codebertscore_f1-60": 0.9368548393249512,
        "codebertscore_f3-60": 0.9292622208595276,
        "codebertscore_f1-132": 0.778511106967926,
        "codebertscore_f3-132": 0.8099515438079834,
        "codebertscore_f1-66": 0.940777063369751,
        "codebertscore_f3-66": 0.93503338098526,
        "codebertscore_s_f1-32": 0.9005782604217529,
        "codebertscore_s_f3-32": 0.8994314670562744,
        "codebertscore_s_f1-7": 0.8636249899864197,
        "codebertscore_s_f3-7": 0.8955676555633545,
        "codebertscore_s_f1-86": 0.9264395833015442,
        "codebertscore_s_f3-86": 0.9155672192573547,
        "codebertscore_s_f1-74": 0.8444469571113586,
        "codebertscore_s_f3-74": 0.8839108943939209,
        "codebertscore_s_f1-68": 0.9334021210670471,
        "codebertscore_s_f3-68": 0.926895260810852,
        "codebertscore_s_f1-43": 0.8298247456550598,
        "codebertscore_s_f3-43": 0.8393315672874451,
        "codebertscore_s_f1-28": 0.9185506105422974,
        "codebertscore_s_f3-28": 0.9120319485664368,
        "codebertscore_s_f1-179": 0.927258312702179,
        "codebertscore_s_f3-179": 0.9170415997505188,
        "codebertscore_s_f1-23": 0.9031204581260681,
        "codebertscore_s_f3-23": 0.8970311880111694,
        "codebertscore_s_f1-134": 0.8995146155357361,
        "codebertscore_s_f3-134": 0.8999276757240295,
        "codebertscore_s_f1-9": 0.9080047011375427,
        "codebertscore_s_f3-9": 0.9035292863845825,
        "codebertscore_s_f1-8": 0.9214673042297363,
        "codebertscore_s_f3-8": 0.9128445982933044,
        "codebertscore_s_f1-24": 0.9138683080673218,
        "codebertscore_s_f3-24": 0.9089425802230835,
        "codebertscore_s_f1-65": 0.9055981040000916,
        "codebertscore_s_f3-65": 0.9046316146850586,
        "codebertscore_s_f1-70": 0.9292827248573303,
        "codebertscore_s_f3-70": 0.9180694222450256,
        "codebertscore_s_f1-163": 0.8260096907615662,
        "codebertscore_s_f3-163": 0.8355106711387634,
        "codebertscore_s_f1-185": 0.9224636554718018,
        "codebertscore_s_f3-185": 0.9183504581451416,
        "codebertscore_s_f1-60": 0.9372683167457581,
        "codebertscore_s_f3-60": 0.9302761554718018,
        "codebertscore_s_f1-132": 0.786727249622345,
        "codebertscore_s_f3-132": 0.8190241456031799,
        "codebertscore_s_f1-66": 0.9391056299209595,
        "codebertscore_s_f3-66": 0.9339877963066101,
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-86": 4,
        "raw_gpt35_nsnr-86": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-134": 4,
        "raw_gpt35_nsnr-134": "4",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "Score: 0\n\nExplanation:\nThe code snippet is incorrect as it is checking for even elements in odd positions instead of odd elements in even positions. It also does not handle the case where the list has only odd elements in even positions.",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-86": 3,
        "raw_gpt35_nswr-86": "3",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-43": 3,
        "raw_gpt35_nswr-43": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-134": 3,
        "raw_gpt35_nswr-134": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-163": 2,
        "raw_gpt35_nswr-163": "2",
        "gpt35_nswr-185": 4,
        "raw_gpt35_nswr-185": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-132": 3,
        "raw_gpt35_nswr-132": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n",
        "snippet": [
            "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n"
        ],
        "simplified": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
        "task_id": "148",
        "189": "// your code here\n  std::tuple<std::string, > no_planet;\n  if(planet1 == \"Mercury\"){\n    if(planet2 == \"Mercury\"){\n      return no_planet;\n    }else if(planet2 == \"Venus\"){\n      return no_planet;\n    }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else if(planet2 == \"Mars\"){\n      return no_planet;\n    }else if(planet2 == \"Jupiter\"){\n      return no_planet;\n    }else if(planet2 == \"Saturn\"){\n      return no_planet;\n    }else if(planet2 == \"Uranus\"){\n      return no_planet;\n    }else if(planet2 == \"Neptune\"){\n      return no_planet;\n    }else{\n      return no_planet;\n    }\n  }else if(planet1 == \"Venus\"){\n    if(planet2 == \"Mercury\"){\n      return std::make_tuple(\"Venus\");\n    }else if(planet2 == \"Venus\"){\n      return no_planet;\n    }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else if(planet2 == \"Mars\"){\n      return no_planet;\n    }else if(planet2 == \"Jupiter\"){\n      return no_planet;\n    }else if(planet2 == \"Saturn\"){\n      return no_planet;\n    }else if(planet2 == \"Uranus\"){\n      return no_planet;\n    }else if(planet2 == \"Neptune\"){\n      return no_planet;\n    }else{\n      return no_planet;\n    }\n  }else if(planet1 == \"Earth\"){\n    if(planet2 == \"Mercury\"){\n      return std::make_tuple(\"Venus\", \"Earth\");\n    }else if(planet2 == \"Venus\"){\n      return std::make_tuple(\"Venus\");\n    }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else if(planet2",
        "grade-189": {
            "execution": 0
        },
        "28": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    // place your code here\n    std::tuple<std::string, > sol;\n    return sol;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Your code here",
        "grade-6": {
            "execution": 0
        },
        "73": "return std::make_tuple<std::string, >(\"\");",
        "grade-73": {
            "execution": 0
        },
        "65": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  auto pl1 = std::find(planets.begin(), planets.end(), planet1);\n  auto pl2 = std::find(planets.begin(), planets.end(), planet2);\n  if(pl1 == planets.end() || pl2 == planets.end())\n    return std::make_tuple<std::string>();\n  if(pl1 > pl2)\n    std::swap(pl1, pl2);\n  std::vector<std::string> res(pl1, pl2);\n  return std::make_tuple(res.begin(), res.end());",
        "grade-65": {
            "execution": 0
        },
        "58": "std::map<std::string, int> mapping = {{\"Mercury\", 1}, {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4}, {\"Jupiter\", 5}, {\"Saturn\", 6}, {\"Uranus\", 7}, {\"Neptune\", 8}};\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto first = mapping.find(planet1);\n    auto second = mapping.find(planet2);\n    if (first == mapping.end() || second == mapping.end()) {\n        return std::make_tuple();\n    }\n    std::tuple<std::string, > ans;\n    if (first->second > second->second) {\n        for (int i = second->second; i < first->second; i++) {\n            std::get<0>(ans) = planets[i - 1];\n        }\n    } else {\n        for (int i = first->second; i < second->second; i++) {\n            std::get<0>(ans) = planets[i - 1];\n        }\n    }\n    return ans;",
        "grade-58": {
            "execution": 0
        },
        "35": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n    if(it1 == planets.end() || it2 == planets.end())\n        return std::make_tuple();\n    std::vector<std::string> planets_bf(it1, it2);\n    return std::make_tuple(planets_bf.begin(), planets_bf.end());",
        "grade-35": {
            "execution": 0
        },
        "26": "// your code here",
        "grade-26": {
            "execution": 0
        },
        "161": "std::tuple<std::string, > ans;\n    return ans;",
        "grade-161": {
            "execution": 0
        },
        "22": "std::string planets[8] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \n        \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::map<std::string, int> m;\n    for (int i = 0; i < 8; i++)\n        m[planets[i]] = i;\n    int index1 = m[planet1];\n    int index2 = m[planet2];\n    if (index1 > index2)\n        std::swap(index1, index2);\n    std::vector<std::string> v;\n    for (int i = index1+1; i < index2; i++)\n        v.push_back(planets[i]);\n    return std::make_tuple(v.begin(), v.end());",
        "grade-22": {
            "execution": 0
        },
        "174": "// Write your code here\n  int position_of_planet1 = 0;\n  int position_of_planet2 = 0;\n  std::string array_of_planets[8] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  for(int i = 0; i < 8; i++) {\n    if(array_of_planets[i] == planet1) {\n      position_of_planet1 = i;\n    }\n    if(array_of_planets[i] == planet2) {\n      position_of_planet2 = i;\n    }\n  }\n  std::tuple<std::string, > list_of_planets_between;\n  if(position_of_planet1 > position_of_planet2) {\n    for(int i = position_of_planet2 + 1; i < position_of_planet1; i++) {\n      list_of_planets_between.push_back(array_of_planets[i]);\n    }\n  } else {\n    for(int i = position_of_planet1 + 1; i < position_of_planet2; i++) {\n      list_of_planets_between.push_back(array_of_planets[i]);\n    }\n  }\n  return list_of_planets_between;",
        "grade-174": {
            "execution": 0
        },
        "118": "std::vector<std::string> planets;\n    planets.push_back(\"Mercury\");\n    planets.push_back(\"Venus\");\n    planets.push_back(\"Earth\");\n    planets.push_back(\"Mars\");\n    planets.push_back(\"Jupiter\");\n    planets.push_back(\"Saturn\");\n    planets.push_back(\"Uranus\");\n    planets.push_back(\"Neptune\");\n    std::vector<std::string>::iterator it1, it2;\n    it1 = std::find(planets.begin(), planets.end(), planet1);\n    it2 = std::find(planets.begin(), planets.end(), planet2);\n    std::vector<std::string>::iterator it3, it4;\n    if (it1 == planets.end() || it2 == planets.end())\n        return std::make_tuple();\n    it3 = std::min_element(it1, it2);\n    it4 = std::max_element(it1, it2);\n    if (it3 == it1)\n        it3 = it3 + 1;\n    else\n        it4 = it4 - 1;\n    std::vector<std::string> ret(it3, it4);\n    return std::make_tuple(ret.begin(), ret.end());",
        "grade-118": {
            "execution": 0
        },
        "8": "std::tuple<std::string, > answer = std::make_tuple();\n    // Write your code here\n    return answer;",
        "grade-8": {
            "execution": 0
        },
        "7": "return std::make_tuple(\"\");",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Implement this function\n    return std::make_tuple<std::string, >();",
        "grade-23": {
            "execution": 0
        },
        "56": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  std::vector<std::string>::iterator planet1_it = std::find(planets.begin(), planets.end(), planet1);\n  std::vector<std::string>::iterator planet2_it = std::find(planets.begin(), planets.end(), planet2);\n  if (planet1_it == planets.end() || planet2_it == planets.end())\n    return std::make_tuple();\n  if (planet1_it > planet2_it)\n    std::swap(planet1_it, planet2_it);\n  std::vector<std::string>::iterator p1 = planet1_it;\n  std::vector<std::string>::iterator p2 = planet2_it;\n  p1++;\n  p2--;\n  if (p1 > p2)\n    return std::make_tuple();\n  else\n    return std::make_tuple(std::string(\"\"));",
        "grade-56": {
            "execution": 0
        },
        "61": "// your code here\n  std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  if(planet1 > planet2)\n      std::swap(planet1, planet2);\n  \n  auto p1 = std::find(planets.begin(), planets.end(), planet1);\n  auto p2 = std::find(planets.begin(), planets.end(), planet2);\n  if(p1 != planets.end() && p2 != planets.end())\n      return std::make_tuple(p1 + 1, p2);\n  return std::make_tuple();",
        "grade-61": {
            "execution": 0
        },
        "143": "// Good luck!",
        "grade-143": {
            "execution": 0
        },
        "178": "// your code here\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int p1 = std::find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(), planets.end(), planet2) - planets.begin();\n    std::cout << p1 << \" \" << p2 << std::endl;\n    if (p1 == 8 || p2 == 8) {\n        return std::make_tuple();\n    }\n    std::vector<std::string> res;\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return std::make_tuple(res);",
        "grade-178": {
            "execution": 0
        },
        "165": "//write your code here",
        "grade-165": {
            "execution": 0
        },
        "bleu-189": 0.05879426619312806,
        "bleu-28": 0.11630216767286783,
        "bleu-6": 0.0,
        "bleu-73": 5.272374399339605e-06,
        "bleu-65": 0.28874198770698833,
        "bleu-58": 0.20457780503963835,
        "bleu-35": 0.2806350504770327,
        "bleu-26": 0.0,
        "bleu-161": 2.680400723940135e-06,
        "bleu-22": 0.3347858560521752,
        "bleu-174": 0.3413291479425653,
        "bleu-118": 0.05033553885926357,
        "bleu-8": 0.00037988453857062775,
        "bleu-7": 5.584835502089184e-09,
        "bleu-23": 6.841060226730434e-05,
        "bleu-56": 0.2271610884523447,
        "bleu-61": 0.28397684880957974,
        "bleu-143": 0.0,
        "bleu-178": 0.2798768518675332,
        "bleu-165": 0.0,
        "codebleu-189": 0.4650983086327712,
        "codebleu-28": 0.17465825814096161,
        "codebleu-6": 0.008510638297872339,
        "codebleu-73": 0.03971703248710588,
        "codebleu-65": 0.43358315870009584,
        "codebleu-58": 0.5900090667492413,
        "codebleu-35": 0.39874043736286785,
        "codebleu-26": 0.008510638297872339,
        "codebleu-161": 0.03404572934331572,
        "codebleu-22": 0.540679175236061,
        "codebleu-174": 0.6133237966254852,
        "codebleu-118": 0.4708722741433021,
        "codebleu-8": 0.06254602636152078,
        "codebleu-7": 0.0255319152086657,
        "codebleu-23": 0.04257373780677331,
        "codebleu-56": 0.48172779793159065,
        "codebleu-61": 0.4078761128667816,
        "codebleu-143": 0.0056737588652482265,
        "codebleu-178": 0.5341276145849371,
        "codebleu-165": 0.011347517730496453,
        "chrf-189": 0.25935721725952393,
        "chrf-28": 0.33926013921769643,
        "chrf-6": 0.008630723996511741,
        "chrf-73": 0.04023752683747381,
        "chrf-65": 0.4675751208271482,
        "chrf-58": 0.4114170698072304,
        "chrf-35": 0.45721090027400835,
        "chrf-26": 0.009205439636561499,
        "chrf-161": 0.04258509410845141,
        "chrf-22": 0.44389278879336636,
        "chrf-174": 0.44825825318350804,
        "chrf-118": 0.3610849353136608,
        "chrf-8": 0.06720491958080989,
        "chrf-7": 0.02516153705234681,
        "chrf-23": 0.05397983432909907,
        "chrf-56": 0.4360949688769822,
        "chrf-61": 0.45104922062822594,
        "chrf-143": 0.004033357644466384,
        "chrf-178": 0.49625114455989944,
        "chrf-165": 0.01376562080500812,
        "rougel-189": 0.29856115107913667,
        "rougel-28": 0.37398373983739847,
        "rougel-6": 0.0,
        "rougel-73": 0.0717948717948718,
        "rougel-65": 0.4481792717086835,
        "rougel-58": 0.3829787234042553,
        "rougel-35": 0.45970149253731346,
        "rougel-26": 0.0,
        "rougel-161": 0.07216494845360825,
        "rougel-22": 0.5314285714285714,
        "rougel-174": 0.5444743935309972,
        "rougel-118": 0.32962138084632525,
        "rougel-8": 0.0966183574879227,
        "rougel-7": 0.0425531914893617,
        "rougel-23": 0.06999999999999999,
        "rougel-56": 0.4174757281553398,
        "rougel-61": 0.4144144144144144,
        "rougel-143": 0.0,
        "rougel-178": 0.4761904761904762,
        "rougel-165": 0.0,
        "meteor-189": 0.28345381133282005,
        "meteor-28": 0.24838101072639693,
        "meteor-6": 0.0,
        "meteor-73": 0.030883261272390366,
        "meteor-65": 0.3750109483250658,
        "meteor-58": 0.48642632660133317,
        "meteor-35": 0.3669108111313503,
        "meteor-26": 0.0,
        "meteor-161": 0.02964102822834944,
        "meteor-22": 0.49482227295329445,
        "meteor-174": 0.5171975974124847,
        "meteor-118": 0.4011527942730748,
        "meteor-8": 0.038963825873697115,
        "meteor-7": 0.018610421836228283,
        "meteor-23": 0.02463054187192118,
        "meteor-56": 0.2883464052287582,
        "meteor-61": 0.3557589138643861,
        "meteor-143": 0.0,
        "meteor-178": 0.36957672753215326,
        "meteor-165": 0.0,
        "ruby-189": 0.20105820105820105,
        "ruby-28": 0.2191011235955056,
        "ruby-6": 0.0,
        "ruby-73": 0.028089887640449396,
        "ruby-65": 0.3016759776536313,
        "ruby-58": 0.26712328767123283,
        "ruby-35": 0.3314606741573034,
        "ruby-26": 0.0,
        "ruby-161": 0.028089887640449396,
        "ruby-22": 0.3595505617977528,
        "ruby-174": 0.3937823834196891,
        "ruby-118": 0.2324723247232472,
        "ruby-8": 0.0393258426966292,
        "ruby-7": 0.022471910112359605,
        "ruby-23": 0.028089887640449396,
        "ruby-56": 0.31196581196581197,
        "ruby-61": 0.2808988764044944,
        "ruby-143": 0.0,
        "ruby-178": 0.37104072398190047,
        "ruby-165": 0.0,
        "codebertscore_f1-189": 0.7111889719963074,
        "codebertscore_f3-189": 0.7156798839569092,
        "codebertscore_f1-28": 0.7243906855583191,
        "codebertscore_f3-28": 0.6671421527862549,
        "codebertscore_f1-6": 0.48287832736968994,
        "codebertscore_f3-6": 0.4629937410354614,
        "codebertscore_f1-73": 0.5569497346878052,
        "codebertscore_f3-73": 0.5203008055686951,
        "codebertscore_f1-65": 0.81838059425354,
        "codebertscore_f3-65": 0.8153836727142334,
        "codebertscore_f1-58": 0.7688841223716736,
        "codebertscore_f3-58": 0.7692806124687195,
        "codebertscore_f1-35": 0.8081423044204712,
        "codebertscore_f3-35": 0.7998855710029602,
        "codebertscore_f1-26": 0.47478213906288147,
        "codebertscore_f3-26": 0.457263320684433,
        "codebertscore_f1-161": 0.6111669540405273,
        "codebertscore_f3-161": 0.5609601140022278,
        "codebertscore_f1-22": 0.8651754260063171,
        "codebertscore_f3-22": 0.8714733719825745,
        "codebertscore_f1-174": 0.8146747350692749,
        "codebertscore_f3-174": 0.8324432969093323,
        "codebertscore_f1-118": 0.7761843204498291,
        "codebertscore_f3-118": 0.7869789004325867,
        "codebertscore_f1-8": 0.5908405184745789,
        "codebertscore_f3-8": 0.570681095123291,
        "codebertscore_f1-7": 0.5271569490432739,
        "codebertscore_f3-7": 0.5000860095024109,
        "codebertscore_f1-23": 0.5656713843345642,
        "codebertscore_f3-23": 0.5356489419937134,
        "codebertscore_f1-56": 0.8092986941337585,
        "codebertscore_f3-56": 0.8186346888542175,
        "codebertscore_f1-61": 0.8097402453422546,
        "codebertscore_f3-61": 0.8110384941101074,
        "codebertscore_f1-143": 0.5159837603569031,
        "codebertscore_f3-143": 0.47943219542503357,
        "codebertscore_f1-178": 0.8300949931144714,
        "codebertscore_f3-178": 0.8478860855102539,
        "codebertscore_f1-165": 0.47600215673446655,
        "codebertscore_f3-165": 0.46094003319740295,
        "codebertscore_s_f1-189": 0.7357820868492126,
        "codebertscore_s_f3-189": 0.7351983189582825,
        "codebertscore_s_f1-28": 0.731035053730011,
        "codebertscore_s_f3-28": 0.6712773442268372,
        "codebertscore_s_f1-6": 0.4822860062122345,
        "codebertscore_s_f3-6": 0.45829346776008606,
        "codebertscore_s_f1-73": 0.6101124882698059,
        "codebertscore_s_f3-73": 0.5686202049255371,
        "codebertscore_s_f1-65": 0.810148298740387,
        "codebertscore_s_f3-65": 0.8086821436882019,
        "codebertscore_s_f1-58": 0.7872297167778015,
        "codebertscore_s_f3-58": 0.7911403775215149,
        "codebertscore_s_f1-35": 0.8019330501556396,
        "codebertscore_s_f3-35": 0.7957834601402283,
        "codebertscore_s_f1-26": 0.47776874899864197,
        "codebertscore_s_f3-26": 0.4556189477443695,
        "codebertscore_s_f1-161": 0.6447614431381226,
        "codebertscore_s_f3-161": 0.584632396697998,
        "codebertscore_s_f1-22": 0.8592519164085388,
        "codebertscore_s_f3-22": 0.8644790649414062,
        "codebertscore_s_f1-174": 0.8164442777633667,
        "codebertscore_s_f3-174": 0.8341119885444641,
        "codebertscore_s_f1-118": 0.7786127328872681,
        "codebertscore_s_f3-118": 0.7874990701675415,
        "codebertscore_s_f1-8": 0.6093695759773254,
        "codebertscore_s_f3-8": 0.5875648856163025,
        "codebertscore_s_f1-7": 0.5959911346435547,
        "codebertscore_s_f3-7": 0.5604866743087769,
        "codebertscore_s_f1-23": 0.591706395149231,
        "codebertscore_s_f3-23": 0.5687738656997681,
        "codebertscore_s_f1-56": 0.8070986866950989,
        "codebertscore_s_f3-56": 0.8171389698982239,
        "codebertscore_s_f1-61": 0.8062827587127686,
        "codebertscore_s_f3-61": 0.8077658414840698,
        "codebertscore_s_f1-143": 0.5166791677474976,
        "codebertscore_s_f3-143": 0.4958786070346832,
        "codebertscore_s_f1-178": 0.8310644030570984,
        "codebertscore_s_f3-178": 0.8517993092536926,
        "codebertscore_s_f1-165": 0.48316147923469543,
        "codebertscore_s_f3-165": 0.4612458050251007,
        "gpt35_nsnr-189": 2,
        "raw_gpt35_nsnr-189": "2",
        "gpt35_nsnr-28": 2,
        "raw_gpt35_nsnr-28": "2",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-73": 2,
        "raw_gpt35_nsnr-73": "2",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-26": 0,
        "raw_gpt35_nsnr-26": "0",
        "gpt35_nsnr-161": 0,
        "raw_gpt35_nsnr-161": "2 - The code snippet does not contain any logic to handle the problem requirements. It only returns an empty tuple without any processing. The function needs to be implemented with the required logic to handle the planet names and return the planets between the given planets' orbits.",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-174": 3,
        "raw_gpt35_nsnr-174": "3",
        "gpt35_nsnr-118": 4,
        "raw_gpt35_nsnr-118": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-143": 3,
        "raw_gpt35_nsnr-143": "3",
        "gpt35_nsnr-178": 3,
        "raw_gpt35_nsnr-178": "3",
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-161": 0,
        "raw_gpt35_nswr-161": "Score: 1",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-118": 3,
        "raw_gpt35_nswr-118": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-23": 0,
        "raw_gpt35_nswr-23": "3 - The code snippet correctly identifies the positions of the input planets in the list of planets and returns a tuple containing the planets whose orbits are located between the two input planets, sorted by proximity to the sun. However, the code snippet does not handle the case where the input planet names are not correct and simply returns an empty tuple. The reference code handles this case by checking if the positions of the input planets are -1 and returning an empty vector if so.",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n",
        "snippet": [
            "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n"
        ],
        "simplified": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "task_id": "6",
        "163": "std::vector<long> result;\n   int start = 0;\n   int end = 0;\n   while (end < paren_string.size()) {\n      char c = paren_string[end];\n      if (c == '(') {\n         result.push_back(1);\n      } else if (c == ')') {\n         result.back()++;\n      } else if (c == ' ') {\n         start = end + 1;\n      }\n      end++;\n   }\n   return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> nested_list;\n    std::stringstream input_stream(paren_string);\n    std::string paren_stream;\n    while(std::getline(input_stream, paren_stream, ' ')) {\n        std::stack<char> paren_stack;\n        long max_depth = 0;\n        for(long i = 0; i < paren_stream.size(); i++) {\n            if(paren_stream[i] == '(') {\n                paren_stack.push(paren_stream[i]);\n                max_depth = std::max(max_depth, (long)paren_stack.size());\n            }\n            else if(paren_stream[i] == ')') {\n                paren_stack.pop();\n            }\n        }\n        nested_list.push_back(max_depth);\n    }\n    return nested_list;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> max_levels;\n\tstd::istringstream iss(paren_string);\n\tfor (std::string s; iss >> s; ) {\n\t\tstd::vector<char> stk;\n\t\tlong level = 0;\n\t\tlong max_level = 0;\n\t\tfor (char c : s) {\n\t\t\tif (c == '(') {\n\t\t\t\tlevel++;\n\t\t\t\tstk.push_back(c);\n\t\t\t} else if (c == ')') {\n\t\t\t\tlevel--;\n\t\t\t\tstk.pop_back();\n\t\t\t}\n\t\t\tmax_level = std::max(max_level, level);\n\t\t}\n\t\tassert(stk.empty());\n\t\tmax_levels.push_back(max_level);\n\t}\n\treturn max_levels;",
        "grade-6": {
            "execution": 1
        },
        "189": "int count = 0;\n    std::vector<long> result;\n    bool flag = true;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i] == '(')\n            count++;\n        else if(paren_string[i] == ')')\n            count--;\n        else if(paren_string[i] == ' ') {\n            if(count < 0)\n                flag = false;\n            result.push_back(count);\n            count = 0;\n        }\n    }\n    if(flag == false)\n        return {};\n    return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<long> output;\n    int i = 0;\n    while (i < paren_string.size()) {\n        std::string nested_parens = \"\";\n        while (paren_string[i] != ' ') {\n            nested_parens += paren_string[i];\n            i++;\n        }\n        output.push_back(nested_parens.size() - nested_parens.erase(std::remove(nested_parens.begin(), nested_parens.end(), ')'), nested_parens.end()).size());\n        i++;\n    }\n    return output;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> depths;\n  long current_depth = 0;\n  long max_depth = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n      current_depth++;\n      max_depth = std::max(max_depth, current_depth);\n    } else if (c == ')') {\n      assert(current_depth > 0);\n      current_depth--;\n    } else if (c == ' ') {\n      depths.push_back(max_depth);\n      max_depth = 0;\n    }\n  }\n  depths.push_back(max_depth);\n  return depths;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Write your code here\n    // Prepare a stack to be used to process the parenthsis.\n    std::stack<char> s;\n    // Prepare a vector to hold the output, where each element is the max count of\n    // nesting of parenthesis encountered in each group.\n    std::vector<long> output;\n    // Iterate over each char in the input string, we are interested in only '(' and ')'\n    for (int i = 0; i < paren_string.length(); i++) {\n        // If '(' push the current count of maximum nesting into the stack.\n        if (paren_string[i] == '(') {\n            s.push(0);\n        }\n        // If ')' is found, calculate the new max count of nesting by adding 1 to\n        // the maximum count of nesting in the current level.\n        else if (paren_string[i] == ')') {\n            long new_max = 1;\n            while (!s.empty() && s.top() != 0) {\n                new_max += s.top();\n                s.pop();\n            }\n            // Now push the new max count of nesting of parenthesis in the current level.\n            s.push(new_max);\n        }\n        // If ' ' is found, we know that a group of parenthesis has ended.\n        // Pop all the elements from the stack and push them into the output.\n        // While doing so, keep track of the max nesting of parenthesis in the\n        // current group.\n        else if (paren_string[i] == ' ') {\n            long max_count = 0;\n            while (!s.empty()) {\n                max_count = std::max(max_count, s.top());\n                s.pop();\n            }\n            output.push_back(max_count);\n        }\n    }\n    return output;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> max_depth;\n    long count = 0;\n    long max_depth_so_far = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            count++;\n            max_depth_so_far = std::max(max_depth_so_far, count);\n        } else if (c == ')') {\n            count--;\n        } else if (c == ' ') {\n            max_depth.push_back(max_depth_so_far);\n            max_depth_so_far = 0;\n            count = 0;\n        }\n    }\n    if (count == 0) {\n        max_depth.push_back(max_depth_so_far);\n    }\n    return max_depth;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<long> result;\n  std::string token;\n  std::istringstream tokenStream(paren_string);\n  while (std::getline(tokenStream, token, ' ')) {\n    std::stack<char> parens;\n    long deepest = 0;\n    for (char c : token) {\n      if (c == '(') {\n        parens.push(c);\n        deepest = std::max(deepest, (long)parens.size());\n      } else if (c == ')') {\n        if (parens.empty()) {\n          throw std::invalid_argument(\"Unbalanced parentheses\");\n        }\n        parens.pop();\n      }\n    }\n    if (!parens.empty()) {\n      throw std::invalid_argument(\"Unbalanced parentheses\");\n    }\n    result.push_back(deepest);\n  }\n  return result;",
        "grade-188": {
            "execution": 1
        },
        "26": "std::stack<int> st;\n  std::vector<long> result;\n  int level = 0;\n  for (char ch : paren_string) {\n    if (ch == '(') {\n      level++;\n      st.push(level);\n    } else if (ch == ')') {\n      long top = st.top();\n      st.pop();\n      if (st.empty()) {\n        result.push_back(top);\n        level = 0;\n      }\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "if (paren_string.empty()) {\n        return {};\n    }\n    std::vector<long> max_levels;\n    int level = 0;\n    int max_level = 0;\n    int last_open_paren_idx = -1;\n    std::stack<int> open_paren_idx_stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            level++;\n            last_open_paren_idx = i;\n            open_paren_idx_stack.push(i);\n        } else if (paren_string[i] == ')') {\n            level--;\n            assert(level >= 0);\n            open_paren_idx_stack.pop();\n            if (level == 0) {\n                max_levels.push_back(max_level);\n                max_level = 0;\n            }\n        } else if (paren_string[i] == ' ') {\n            if (open_paren_idx_stack.empty()) {\n                max_levels.push_back(max_level);\n                max_level = 0;\n            }\n        }\n        max_level = std::max(max_level, level);\n    }\n    return max_levels;",
        "grade-173": {
            "execution": 0
        },
        "139": "// This is your job. :)\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n    std::string temp;\n    int flag = 0;\n    int count = 0;\n    while(ss>>temp){\n        for(int i = 0; i < temp.size(); i++){\n            if(temp[i] == '('){\n                flag++;\n                count = (flag > count) ? flag : count;\n            }else if(temp[i] == ')'){\n                flag--;\n            }\n        }\n        res.push_back(count);\n        count = 0;\n        flag = 0;\n    }\n    return res;",
        "grade-139": {
            "execution": 1
        },
        "22": "std::vector<long> ans;\n  std::stringstream stream(paren_string);\n  long max_nesting_level = -1;\n  for (std::string line; std::getline(stream, line);) {\n    if (line.empty()) {\n      continue;\n    }\n    std::stack<char> paren_stack;\n    max_nesting_level = -1;\n    for (char c : line) {\n      if (c == '(') {\n        paren_stack.push(c);\n      } else if (c == ')') {\n        if (paren_stack.empty()) {\n          continue;\n        }\n        paren_stack.pop();\n      }\n      max_nesting_level = std::max(max_nesting_level, (long)paren_stack.size());\n    }\n    ans.push_back(max_nesting_level);\n  }\n  return ans;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> depths;\n    std::stack<char> stk;\n    long curr_depth = 0;\n    long max_depth = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            curr_depth++;\n            max_depth = std::max(max_depth, curr_depth);\n            stk.push(paren_string[i]);\n        } else if (paren_string[i] == ')') {\n            curr_depth--;\n            stk.pop();\n        } else if (paren_string[i] == ' ') {\n            depths.push_back(max_depth);\n            max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n    return depths;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> result;\n  if (paren_string.size() == 0) return result;\n  if (paren_string.size() == 1) return {-1};\n  long max_level = 0;\n  long level = 0;\n  for (auto ch : paren_string) {\n    if (ch == '(') {\n      level++;\n      max_level = std::max(max_level, level);\n    } else if (ch == ')') {\n      level--;\n    } else if (ch == ' ') {\n      result.push_back(max_level);\n      max_level = 0;\n      level = 0;\n    }\n  }\n  result.push_back(max_level);\n  return result;",
        "grade-108": {
            "execution": 1
        },
        "8": "// return a vector of the maximum number of nested parens for each of the subgroup\n    std::vector<long> max_parens;\n    long count = 0;\n    for (auto &c : paren_string) {\n        switch (c) {\n            case '(':\n                count++;\n                break;\n            case ')':\n                count--;\n                break;\n            case ' ':\n                max_parens.push_back(count);\n                count = 0;\n                break;\n            default:\n                break;\n        }\n    }\n    max_parens.push_back(count);\n    return max_parens;",
        "grade-8": {
            "execution": 0
        },
        "7": "long count = 0;\n  std::vector<long> res;\n  for (char c : paren_string) {\n    if (c == '(') {\n      count++;\n    } else if (c == ')') {\n      count--;\n    } else if (c == ' ') {\n      res.push_back(count);\n    }\n  }\n  return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Implement this method\n    std::vector<long> out;\n    long len = paren_string.length();\n    long count = 0;\n    long max_count = 0;\n    for(long i = 0; i < len; i++) {\n        // std::cout << paren_string[i] << std::endl;\n        if(paren_string[i] == '(') {\n            count++;\n            max_count = std::max(max_count, count);\n        }\n        else if(paren_string[i] == ')') {\n            count--;\n        }\n        else if(paren_string[i] == ' ') {\n            out.push_back(max_count);\n            max_count = 0;\n            count = 0;\n        }\n    }\n    out.push_back(max_count);\n    return out;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long> result;\n    std::vector<char> stack;\n    int count = 0;\n    int max_count = 0;\n    long int size = paren_string.size();\n    for(long int i = 0; i < size; i++) {\n        if(paren_string[i] == '(') {\n            count++;\n            stack.push_back(paren_string[i]);\n        }\n        else if(paren_string[i] == ')') {\n            count--;\n            if(count == 0) {\n                result.push_back(stack.size());\n                stack.clear();\n            }\n            else {\n                stack.pop_back();\n            }\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n    std::stringstream paren_stream(paren_string);\n    std::string paren_group;\n    while (std::getline(paren_stream, paren_group, ' ')) {\n        std::stack<long> paren_stack;\n        for (char& paren : paren_group) {\n            if (paren == '(') {\n                paren_stack.push(1);\n            } else if (paren == ')') {\n                paren_stack.pop();\n            }\n        }\n        result.push_back(paren_stack.size());\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.19945976280900088,
        "bleu-28": 0.22770436995519724,
        "bleu-6": 0.24795758103667237,
        "bleu-189": 0.33160118729449317,
        "bleu-70": 0.18988151165859612,
        "bleu-62": 0.20121104967696504,
        "bleu-57": 0.12277157941281443,
        "bleu-35": 0.23399111336989656,
        "bleu-188": 0.13463569442670223,
        "bleu-26": 0.25279020289642234,
        "bleu-173": 0.33233701528038007,
        "bleu-139": 0.265371859195904,
        "bleu-22": 0.1417885787035388,
        "bleu-151": 0.2958236342543932,
        "bleu-108": 0.3257504332828819,
        "bleu-8": 0.05681979451161471,
        "bleu-7": 0.14075440746920886,
        "bleu-23": 0.26982533990170643,
        "bleu-55": 0.2982519630820401,
        "bleu-59": 0.15923269545672966,
        "codebleu-163": 0.4728518402131458,
        "codebleu-28": 0.5519784023996622,
        "codebleu-6": 0.5460090827903727,
        "codebleu-189": 0.5837335807789521,
        "codebleu-70": 0.4323965920689253,
        "codebleu-62": 0.5057884610033255,
        "codebleu-57": 0.6251374165511653,
        "codebleu-35": 0.5293953449193681,
        "codebleu-188": 0.5192060668939281,
        "codebleu-26": 0.4916722382809503,
        "codebleu-173": 0.7006904085656811,
        "codebleu-139": 0.6194843123856223,
        "codebleu-22": 0.5284015117830146,
        "codebleu-151": 0.6208529101095251,
        "codebleu-108": 0.6123895546857371,
        "codebleu-8": 0.3880786762351943,
        "codebleu-7": 0.3275932717410221,
        "codebleu-23": 0.6326614640336219,
        "codebleu-55": 0.5954466565290905,
        "codebleu-59": 0.440485257434257,
        "chrf-163": 0.26394224107124553,
        "chrf-28": 0.31954210986690446,
        "chrf-6": 0.42842936692094447,
        "chrf-189": 0.3279858645660404,
        "chrf-70": 0.2829477552832484,
        "chrf-62": 0.3115231381372946,
        "chrf-57": 0.3256361357656349,
        "chrf-35": 0.2644203358168439,
        "chrf-188": 0.2799165342950806,
        "chrf-26": 0.3036323339352265,
        "chrf-173": 0.53862368201688,
        "chrf-139": 0.26648544672271146,
        "chrf-22": 0.35398143460391746,
        "chrf-151": 0.3620272437683324,
        "chrf-108": 0.46114439740771296,
        "chrf-8": 0.24927156951604065,
        "chrf-7": 0.20718819625160886,
        "chrf-23": 0.3460374942645762,
        "chrf-55": 0.3163662716307803,
        "chrf-59": 0.26898524890586645,
        "rougel-163": 0.5150214592274679,
        "rougel-28": 0.43971631205673756,
        "rougel-6": 0.4312267657992565,
        "rougel-189": 0.5275590551181103,
        "rougel-70": 0.38866396761133604,
        "rougel-62": 0.4793388429752066,
        "rougel-57": 0.28346456692913385,
        "rougel-35": 0.49193548387096775,
        "rougel-188": 0.35064935064935066,
        "rougel-26": 0.5147679324894515,
        "rougel-173": 0.5585585585585586,
        "rougel-139": 0.5147058823529411,
        "rougel-22": 0.3667820069204151,
        "rougel-151": 0.5611510791366907,
        "rougel-108": 0.4962962962962963,
        "rougel-8": 0.3189655172413793,
        "rougel-7": 0.463768115942029,
        "rougel-23": 0.5154639175257733,
        "rougel-55": 0.542124542124542,
        "rougel-59": 0.3636363636363636,
        "meteor-163": 0.4516784092545275,
        "meteor-28": 0.3402356384127977,
        "meteor-6": 0.3421688572615133,
        "meteor-189": 0.4467437977099237,
        "meteor-70": 0.2755948517477855,
        "meteor-62": 0.34106959424756034,
        "meteor-57": 0.3931697792341574,
        "meteor-35": 0.40456366595718046,
        "meteor-188": 0.30030825401576877,
        "meteor-26": 0.3440448569218871,
        "meteor-173": 0.5128398801819863,
        "meteor-139": 0.45758208605107276,
        "meteor-22": 0.3060841619168912,
        "meteor-151": 0.47076393899021524,
        "meteor-108": 0.437463769154979,
        "meteor-8": 0.22914510006901312,
        "meteor-7": 0.3239904988123516,
        "meteor-23": 0.4450252926923248,
        "meteor-55": 0.42649246333882684,
        "meteor-59": 0.27043461555996917,
        "ruby-163": 0.3787878787878788,
        "ruby-28": 0.2666666666666667,
        "ruby-6": 0.23357664233576647,
        "ruby-189": 0.36363636363636365,
        "ruby-70": 0.21212121212121215,
        "ruby-62": 0.31060606060606055,
        "ruby-57": 0.17819148936170215,
        "ruby-35": 0.28787878787878785,
        "ruby-188": 0.22159090909090906,
        "ruby-26": 0.3484848484848485,
        "ruby-173": 0.3880597014925373,
        "ruby-139": 0.3214285714285714,
        "ruby-22": 0.21656050955414008,
        "ruby-151": 0.452054794520548,
        "ruby-108": 0.3405797101449275,
        "ruby-8": 0.1742424242424242,
        "ruby-7": 0.34090909090909094,
        "ruby-23": 0.3584905660377359,
        "ruby-55": 0.36170212765957444,
        "ruby-59": 0.21212121212121215,
        "codebertscore_f1-163": 0.7581804990768433,
        "codebertscore_f3-163": 0.7383496165275574,
        "codebertscore_f1-28": 0.7721921801567078,
        "codebertscore_f3-28": 0.7782248854637146,
        "codebertscore_f1-6": 0.7936962246894836,
        "codebertscore_f3-6": 0.7972063422203064,
        "codebertscore_f1-189": 0.7896979451179504,
        "codebertscore_f3-189": 0.7687351107597351,
        "codebertscore_f1-70": 0.7485026717185974,
        "codebertscore_f3-70": 0.7355931401252747,
        "codebertscore_f1-62": 0.7936815023422241,
        "codebertscore_f3-62": 0.7836083769798279,
        "codebertscore_f1-57": 0.71584153175354,
        "codebertscore_f3-57": 0.7714366316795349,
        "codebertscore_f1-35": 0.7838118672370911,
        "codebertscore_f3-35": 0.7835255265235901,
        "codebertscore_f1-188": 0.7260135412216187,
        "codebertscore_f3-188": 0.7428786158561707,
        "codebertscore_f1-26": 0.7690615057945251,
        "codebertscore_f3-26": 0.7594811320304871,
        "codebertscore_f1-173": 0.821257472038269,
        "codebertscore_f3-173": 0.8295800089836121,
        "codebertscore_f1-139": 0.7666246891021729,
        "codebertscore_f3-139": 0.7662345767021179,
        "codebertscore_f1-22": 0.7656676769256592,
        "codebertscore_f3-22": 0.7771904468536377,
        "codebertscore_f1-151": 0.8215904235839844,
        "codebertscore_f3-151": 0.8195769786834717,
        "codebertscore_f1-108": 0.8128333687782288,
        "codebertscore_f3-108": 0.8085644245147705,
        "codebertscore_f1-8": 0.7407751083374023,
        "codebertscore_f3-8": 0.756748616695404,
        "codebertscore_f1-7": 0.7315024733543396,
        "codebertscore_f3-7": 0.7082136869430542,
        "codebertscore_f1-23": 0.7940219044685364,
        "codebertscore_f3-23": 0.7962548732757568,
        "codebertscore_f1-55": 0.8005844950675964,
        "codebertscore_f3-55": 0.7872329950332642,
        "codebertscore_f1-59": 0.7241498231887817,
        "codebertscore_f3-59": 0.7133877873420715,
        "codebertscore_s_f1-163": 0.7744290828704834,
        "codebertscore_s_f3-163": 0.7576483488082886,
        "codebertscore_s_f1-28": 0.7754226326942444,
        "codebertscore_s_f3-28": 0.7781652212142944,
        "codebertscore_s_f1-6": 0.8009446263313293,
        "codebertscore_s_f3-6": 0.8071706891059875,
        "codebertscore_s_f1-189": 0.7903857231140137,
        "codebertscore_s_f3-189": 0.7680503726005554,
        "codebertscore_s_f1-70": 0.757678210735321,
        "codebertscore_s_f3-70": 0.7489368319511414,
        "codebertscore_s_f1-62": 0.8045196533203125,
        "codebertscore_s_f3-62": 0.7967290282249451,
        "codebertscore_s_f1-57": 0.7211509346961975,
        "codebertscore_s_f3-57": 0.7782977223396301,
        "codebertscore_s_f1-35": 0.7840753197669983,
        "codebertscore_s_f3-35": 0.7872711420059204,
        "codebertscore_s_f1-188": 0.7283925414085388,
        "codebertscore_s_f3-188": 0.7468276619911194,
        "codebertscore_s_f1-26": 0.7824432253837585,
        "codebertscore_s_f3-26": 0.775791347026825,
        "codebertscore_s_f1-173": 0.8204296231269836,
        "codebertscore_s_f3-173": 0.8285619616508484,
        "codebertscore_s_f1-139": 0.7694793939590454,
        "codebertscore_s_f3-139": 0.7680127620697021,
        "codebertscore_s_f1-22": 0.7703166604042053,
        "codebertscore_s_f3-22": 0.7824719548225403,
        "codebertscore_s_f1-151": 0.8260998129844666,
        "codebertscore_s_f3-151": 0.823040246963501,
        "codebertscore_s_f1-108": 0.814687967300415,
        "codebertscore_s_f3-108": 0.8115689754486084,
        "codebertscore_s_f1-8": 0.7440184354782104,
        "codebertscore_s_f3-8": 0.7592948079109192,
        "codebertscore_s_f1-7": 0.7595375776290894,
        "codebertscore_s_f3-7": 0.7381077408790588,
        "codebertscore_s_f1-23": 0.7950891852378845,
        "codebertscore_s_f3-23": 0.7947375774383545,
        "codebertscore_s_f1-55": 0.7991517186164856,
        "codebertscore_s_f3-55": 0.7862477898597717,
        "codebertscore_s_f1-59": 0.7247652411460876,
        "codebertscore_s_f3-59": 0.7134432792663574,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 2,
        "raw_gpt35_nswr-163": "2",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nbool triples_sum_to_zero(std::vector<long> l) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n"
        ],
        "simplified": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "40",
        "169": "// first sort the array\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++) {\n    // l[i] is the fixed element\n    int j = i + 1; // j is the left index\n    int k = l.size() - 1; // k is the right index\n    while (j < k) {\n      if (l[i] + l[j] + l[k] == 0) {\n        return true;\n      } else if (l[i] + l[j] + l[k] < 0) {\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n  return false;",
        "grade-169": {
            "execution": 1
        },
        "29": "// Your code here\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n            break;\n        for (long j = i + 1; j < l.size(); j++) {\n            long low = j + 1;\n            long high = l.size() - 1;\n            while (low <= high) {\n                long mid = (low + high) / 2;\n                if (l[i] + l[j] + l[mid] == 0)\n                    return true;\n                else if (l[i] + l[j] + l[mid] < 0)\n                    low = mid + 1;\n                else\n                    high = mid - 1;\n            }\n        }\n    }\n    return false;",
        "grade-29": {
            "execution": 1
        },
        "6": "// Write your code here\n\tstd::sort(l.begin(), l.end());\n\tlong sum = 0;\n\tlong i = 0;\n\tfor (; i < l.size() - 2; i++) {\n\t\tlong l_ = i + 1;\n\t\tlong r_ = l.size() - 1;\n\t\twhile (l_ < r_) {\n\t\t\tsum = l[i] + l[l_] + l[r_];\n\t\t\tif (sum == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (sum < 0) {\n\t\t\t\tl_++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tr_--;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-6": {
            "execution": 0
        },
        "196": "std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        long sum = -l[i];\n        int front = i + 1;\n        int back = l.size() - 1;\n        while (front < back) {\n            if (l[front] + l[back] == sum) {\n                return true;\n            } else if (l[front] + l[back] < sum) {\n                front++;\n            } else {\n                back--;\n            }\n        }\n    }\n    return false;",
        "grade-196": {
            "execution": 1
        },
        "71": "// YOUR CODE HERE\n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int x = l[i];\n        int start = i + 1;\n        int end = l.size() - 1;\n        while (start < end) {\n            int y = l[start];\n            int z = l[end];\n            if (x + y + z == 0)\n                return true;\n            else if (x + y + z > 0)\n                end--;\n            else\n                start++;\n        }\n    }\n    return false;",
        "grade-71": {
            "execution": 1
        },
        "63": "std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            int sum = -(l[i] + l[j]);\n            if (std::binary_search(l.begin() + j + 1, l.end(), sum)) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-63": {
            "execution": 1
        },
        "58": "// YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int k = l.size() - 1;\n        int j = i + 1;\n        while (j < k) {\n            int sum = l[i] + l[j] + l[k];\n            if (sum == 0)\n                return true;\n            else if (sum < 0)\n                j++;\n            else if (sum > 0)\n                k--;\n        }\n    }\n    return false;",
        "grade-58": {
            "execution": 1
        },
        "36": "// TODO\n    long sum, i, j, k;\n    sum = 0;\n    for (i = 0; i < l.size(); i++) {\n        for (j = i + 1; j < l.size(); j++) {\n            for (k = j + 1; k < l.size(); k++) {\n                sum = l[i] + l[j] + l[k];\n                if (sum == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
        "grade-36": {
            "execution": 1
        },
        "195": "std::sort(l.begin(), l.end());\n    std::vector<long>::iterator a, b, c;\n    a = l.begin();\n    c = l.end() - 1;\n    while (a < l.end() - 2) {\n        b = a + 1;\n        while (b < c) {\n            if (*a + *b + *c == 0) {\n                return true;\n            } else if (*a + *b + *c < 0) {\n                b++;\n            } else {\n                c--;\n            }\n        }\n        a++;\n    }\n    return false;",
        "grade-195": {
            "execution": 1
        },
        "27": "// 2. sort the list of integers in non-decreasing order.\n  // sort(l.begin(), l.end());\n  std::sort(l.begin(), l.end());\n  // 3. for each integer in the list, do the following:\n  for (int i = 0; i < l.size(); i++) {\n    // 3.1 if i is greater than 0 and l[i] is the same as l[i-1], skip.\n    if (i > 0 && l[i] == l[i-1]) {\n      continue;\n    }\n    // 3.2 let k = i + 1\n    int k = i + 1;\n    // 3.3 let j = l.size() - 1\n    int j = l.size() - 1;\n    // 3.4 while k < j:\n    while (k < j) {\n      // 3.4.1 compute the sum of l[i], l[j], and l[k]\n      long sum = l[i] + l[j] + l[k];\n      // 3.4.2 if the sum is equal to zero, return True\n      if (sum == 0) {\n        return true;\n      }\n      // 3.4.3 if the sum is smaller than zero, increment k\n      if (sum < 0) {\n        k += 1;\n      }\n      // 3.4.4 if the sum is greater than zero, decrement j\n      if (sum > 0) {\n        j -= 1;\n      }\n    }\n  }\n  // 4. return False\n  return false;",
        "grade-27": {
            "execution": 1
        },
        "179": "for (auto i : l) {\n        for (auto j : l) {\n            for (auto k : l) {\n                if (i + j + k == 0 && i != j && j != k && i != k)\n                    return true;\n            }\n        }\n    }\n    return false;",
        "grade-179": {
            "execution": 0
        },
        "142": "return false;",
        "grade-142": {
            "execution": 0
        },
        "22": "for (auto iter = l.begin(); iter != l.end(); iter++) {\n    std::vector<long>::iterator iterator = iter;\n    for (auto iter2 = iterator; iter2 != l.end(); iter2++) {\n      std::vector<long>::iterator iterator2 = iter2;\n      for (auto iter3 = iterator2; iter3 != l.end(); iter3++) {\n        std::vector<long>::iterator iterator3 = iter3;\n        if (iter != iter2 and iter != iter3 and iter2 != iter3 and\n            *iter + *iter2 + *iter3 == 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;",
        "grade-22": {
            "execution": 1
        },
        "157": "// WRITE YOUR CODE HERE\n  std::vector<long> temp;\n  bool is_found = false;\n  for (auto &i : l) {\n    long sum = 0;\n    for (auto &j : l) {\n      sum += j;\n      if (sum == 0) {\n        is_found = true;\n        break;\n      }\n    }\n    if (is_found)\n      break;\n  }\n  return is_found;",
        "grade-157": {
            "execution": 0
        },
        "109": "std::sort(l.begin(), l.end());\n    std::map<long, long> sum_index;\n    for (int i = 0; i < l.size(); i++) {\n        sum_index[l[i]] = i;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (sum_index.find(-(l[i] + l[j])) != sum_index.end()) {\n                long index = sum_index[-(l[i] + l[j])];\n                if (index != i && index != j) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
        "grade-109": {
            "execution": 1
        },
        "8": "// YOUR CODE HERE\n    return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code here\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator left, right;\n    for(int i = 0; i < l.size() - 2; i++){\n        int a = l[i];\n        left = l.begin() + i + 1;\n        right = l.end() - 1;\n        while(left < right){\n            if((*left + *right + a) == 0){\n                return true;\n            }\n            else if((*left + *right + a) < 0){\n                left++;\n            }\n            else{\n                right--;\n            }\n        }\n    }\n    return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "int a = 0;\n\tint b = 0;\n\tint c = 0;\n\tif (l.size() == 0)\n\t\treturn false;\n\telse {\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tfor (int j = 0; j < l.size(); j++) {\n\t\t\t\tfor (int k = 0; k < l.size(); k++) {\n\t\t\t\t\tif (i != j) {\n\t\t\t\t\t\tif (j != k) {\n\t\t\t\t\t\t\tif (i != k) {\n\t\t\t\t\t\t\t\ta = l[i];\n\t\t\t\t\t\t\t\tb = l[j];\n\t\t\t\t\t\t\t\tc = l[k];\n\t\t\t\t\t\t\t\tif (a + b + c == 0)\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-23": {
            "execution": 1
        },
        "56": "sort(l.begin(), l.end());\n    long n = l.size();\n    for (long i = 0; i < n - 2; i++) {\n        long j = i + 1;\n        long k = n - 1;\n        while (j < k) {\n            long x = l[i] + l[j] + l[k];\n            if (x == 0) {\n                return true;\n            }\n            else if (x > 0) {\n                k--;\n            }\n            else {\n                j++;\n            }\n        }\n    }\n    return false;",
        "grade-56": {
            "execution": 1
        },
        "60": "// YOUR CODE HERE\n\tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tlong target = l[i];\n\t\tint front = i + 1;\n\t\tint back = l.size() - 1;\n\t\twhile (front < back) {\n\t\t\tlong sum = l[front] + l[back];\n\t\t\tif (sum < -target) {\n\t\t\t\tfront++;\n\t\t\t}\n\t\t\telse if (sum > -target) {\n\t\t\t\tback--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-60": {
            "execution": 1
        },
        "bleu-169": 0.35832390671383396,
        "bleu-29": 0.35016516967475403,
        "bleu-6": 0.2771105284999018,
        "bleu-196": 0.333545836353377,
        "bleu-71": 0.32032014903345624,
        "bleu-63": 0.4853391339640625,
        "bleu-58": 0.44080791434296984,
        "bleu-36": 0.6159014265029812,
        "bleu-195": 0.07522911959622872,
        "bleu-27": 0.15681922100582374,
        "bleu-179": 0.07826230362204321,
        "bleu-142": 4.95438417045742e-13,
        "bleu-22": 0.07484315207158306,
        "bleu-157": 0.06897248589756513,
        "bleu-109": 0.358666628686827,
        "bleu-8": 9.332718665139976e-06,
        "bleu-7": 0.2160090360806844,
        "bleu-23": 0.4006336373217815,
        "bleu-56": 0.35619342161137646,
        "bleu-60": 0.30109004337603446,
        "codebleu-169": 0.761745761097182,
        "codebleu-29": 0.8026058044120431,
        "codebleu-6": 0.6914414023508733,
        "codebleu-196": 0.7137616520620167,
        "codebleu-71": 0.7185746125783592,
        "codebleu-63": 0.7379533770859871,
        "codebleu-58": 0.7456424213783808,
        "codebleu-36": 0.805209569242264,
        "codebleu-195": 0.5799283696529459,
        "codebleu-27": 0.7095530676366513,
        "codebleu-179": 0.3005626962232082,
        "codebleu-142": 0.01694915255027138,
        "codebleu-22": 0.6147346650524617,
        "codebleu-157": 0.38513922518159804,
        "codebleu-109": 0.7716271208314918,
        "codebleu-8": 0.03390780385522029,
        "codebleu-7": 0.6704101721791074,
        "codebleu-23": 0.7579967451647078,
        "codebleu-56": 0.7165699593373016,
        "codebleu-60": 0.6919854010891335,
        "chrf-169": 0.5444013695103465,
        "chrf-29": 0.5453690161392533,
        "chrf-6": 0.39481062621777824,
        "chrf-196": 0.46298881315466067,
        "chrf-71": 0.4588164118415074,
        "chrf-63": 0.5996784290977428,
        "chrf-58": 0.5697794475153609,
        "chrf-36": 0.7024172796724351,
        "chrf-195": 0.26411356085681986,
        "chrf-27": 0.3647308541049108,
        "chrf-179": 0.26606203939952433,
        "chrf-142": 0.09338677645765264,
        "chrf-22": 0.23975775099037833,
        "chrf-157": 0.19365073939260083,
        "chrf-109": 0.5825538146137279,
        "chrf-8": 0.0908528614186074,
        "chrf-7": 0.3640355602675502,
        "chrf-23": 0.6471181170145196,
        "chrf-56": 0.43922577186221184,
        "chrf-60": 0.431347037309967,
        "rougel-169": 0.5245901639344261,
        "rougel-29": 0.5757575757575758,
        "rougel-6": 0.48401826484018273,
        "rougel-196": 0.48826291079812206,
        "rougel-71": 0.4814814814814815,
        "rougel-63": 0.61,
        "rougel-58": 0.5592417061611374,
        "rougel-36": 0.82,
        "rougel-195": 0.33484162895927605,
        "rougel-27": 0.30626450116009274,
        "rougel-179": 0.4266666666666667,
        "rougel-142": 0.06593406593406592,
        "rougel-22": 0.42194092827004215,
        "rougel-157": 0.308641975308642,
        "rougel-109": 0.5747126436781609,
        "rougel-8": 0.0625,
        "rougel-7": 0.430379746835443,
        "rougel-23": 0.6370967741935483,
        "rougel-56": 0.4854368932038835,
        "rougel-60": 0.45581395348837206,
        "meteor-169": 0.6510424141527217,
        "meteor-29": 0.6432552621384298,
        "meteor-6": 0.6029495655250182,
        "meteor-196": 0.5799490420991693,
        "meteor-71": 0.5790752929780544,
        "meteor-63": 0.5148017172278712,
        "meteor-58": 0.7053452967235603,
        "meteor-36": 0.9195961049698379,
        "meteor-195": 0.4204819778226981,
        "meteor-27": 0.48709380962370263,
        "meteor-179": 0.3494990892531876,
        "meteor-142": 0.037037037037037035,
        "meteor-22": 0.47206681831355773,
        "meteor-157": 0.26148956521592437,
        "meteor-109": 0.579376749146533,
        "meteor-8": 0.03680555555555555,
        "meteor-7": 0.4977542345312195,
        "meteor-23": 0.7582339856357768,
        "meteor-56": 0.6495616571793857,
        "meteor-60": 0.5727021017428576,
        "ruby-169": 0.3782051282051282,
        "ruby-29": 0.4204545454545454,
        "ruby-6": 0.3740458015267175,
        "ruby-196": 0.368,
        "ruby-71": 0.3359375,
        "ruby-63": 0.4732142857142857,
        "ruby-58": 0.38211382113821135,
        "ruby-36": 0.6964285714285714,
        "ruby-195": 0.21052631578947367,
        "ruby-27": 0.18075801749271136,
        "ruby-179": 0.23863636363636365,
        "ruby-142": 0.03409090909090906,
        "ruby-22": 0.2953020134228188,
        "ruby-157": 0.15909090909090906,
        "ruby-109": 0.4161849710982659,
        "ruby-8": 0.03409090909090906,
        "ruby-7": 0.261744966442953,
        "ruby-23": 0.4625,
        "ruby-56": 0.3389830508474576,
        "ruby-60": 0.3464566929133859,
        "codebertscore_f1-169": 0.8232462406158447,
        "codebertscore_f3-169": 0.868560791015625,
        "codebertscore_f1-29": 0.7866291403770447,
        "codebertscore_f3-29": 0.8340989947319031,
        "codebertscore_f1-6": 0.7986776232719421,
        "codebertscore_f3-6": 0.8352261185646057,
        "codebertscore_f1-196": 0.8107830286026001,
        "codebertscore_f3-196": 0.8387393355369568,
        "codebertscore_f1-71": 0.7931988835334778,
        "codebertscore_f3-71": 0.8316726684570312,
        "codebertscore_f1-63": 0.8735700249671936,
        "codebertscore_f3-63": 0.8986984491348267,
        "codebertscore_f1-58": 0.820841908454895,
        "codebertscore_f3-58": 0.8588657975196838,
        "codebertscore_f1-36": 0.865679144859314,
        "codebertscore_f3-36": 0.8762038350105286,
        "codebertscore_f1-195": 0.7238965630531311,
        "codebertscore_f3-195": 0.7439442873001099,
        "codebertscore_f1-27": 0.7082656621932983,
        "codebertscore_f3-27": 0.7870811223983765,
        "codebertscore_f1-179": 0.8311241865158081,
        "codebertscore_f3-179": 0.812086284160614,
        "codebertscore_f1-142": 0.5397630929946899,
        "codebertscore_f3-142": 0.48493316769599915,
        "codebertscore_f1-22": 0.7464821934700012,
        "codebertscore_f3-22": 0.7793129682540894,
        "codebertscore_f1-157": 0.7312082648277283,
        "codebertscore_f3-157": 0.7549015879631042,
        "codebertscore_f1-109": 0.8127549886703491,
        "codebertscore_f3-109": 0.8459337949752808,
        "codebertscore_f1-8": 0.6063354015350342,
        "codebertscore_f3-8": 0.5732093453407288,
        "codebertscore_f1-7": 0.753731906414032,
        "codebertscore_f3-7": 0.8068233132362366,
        "codebertscore_f1-23": 0.8373286724090576,
        "codebertscore_f3-23": 0.8480314612388611,
        "codebertscore_f1-56": 0.8150157332420349,
        "codebertscore_f3-56": 0.8500829935073853,
        "codebertscore_f1-60": 0.8084882497787476,
        "codebertscore_f3-60": 0.8468322157859802,
        "codebertscore_s_f1-169": 0.8379930257797241,
        "codebertscore_s_f3-169": 0.8860272765159607,
        "codebertscore_s_f1-29": 0.835318922996521,
        "codebertscore_s_f3-29": 0.8746210336685181,
        "codebertscore_s_f1-6": 0.8111592531204224,
        "codebertscore_s_f3-6": 0.8497445583343506,
        "codebertscore_s_f1-196": 0.8381373882293701,
        "codebertscore_s_f3-196": 0.8640410304069519,
        "codebertscore_s_f1-71": 0.8273420333862305,
        "codebertscore_s_f3-71": 0.8621079921722412,
        "codebertscore_s_f1-63": 0.8781484961509705,
        "codebertscore_s_f3-63": 0.9057284593582153,
        "codebertscore_s_f1-58": 0.8512474894523621,
        "codebertscore_s_f3-58": 0.8876281380653381,
        "codebertscore_s_f1-36": 0.8847836256027222,
        "codebertscore_s_f3-36": 0.8974398970603943,
        "codebertscore_s_f1-195": 0.7543585300445557,
        "codebertscore_s_f3-195": 0.7757214903831482,
        "codebertscore_s_f1-27": 0.7676103711128235,
        "codebertscore_s_f3-27": 0.8474553227424622,
        "codebertscore_s_f1-179": 0.8379670977592468,
        "codebertscore_s_f3-179": 0.8200629949569702,
        "codebertscore_s_f1-142": 0.6591339111328125,
        "codebertscore_s_f3-142": 0.5643065571784973,
        "codebertscore_s_f1-22": 0.7599712014198303,
        "codebertscore_s_f3-22": 0.7914378046989441,
        "codebertscore_s_f1-157": 0.7254042029380798,
        "codebertscore_s_f3-157": 0.7563789486885071,
        "codebertscore_s_f1-109": 0.8408945798873901,
        "codebertscore_s_f3-109": 0.8768742084503174,
        "codebertscore_s_f1-8": 0.5867146849632263,
        "codebertscore_s_f3-8": 0.5613045692443848,
        "codebertscore_s_f1-7": 0.7912589311599731,
        "codebertscore_s_f3-7": 0.8413208723068237,
        "codebertscore_s_f1-23": 0.8647355437278748,
        "codebertscore_s_f3-23": 0.8760619759559631,
        "codebertscore_s_f1-56": 0.8475862741470337,
        "codebertscore_s_f3-56": 0.8796316981315613,
        "codebertscore_s_f1-60": 0.8184752464294434,
        "codebertscore_s_f3-60": 0.8578321933746338,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 3,
        "raw_gpt35_nsnr-196": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-142": 2,
        "raw_gpt35_nsnr-142": "2",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 2,
        "raw_gpt35_nsnr-157": "2",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-157": 2,
        "raw_gpt35_nswr-157": "2",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nlong do_algebra(std::vector<std::string> _operator_, std::vector<long> operand) {\n",
        "snippet": [
            "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n"
        ],
        "simplified": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
        "task_id": "160",
        "174": "assert(_operator_.size() == operand.size() - 1);\n    long res = operand[0];\n    for (int i = 0; i < _operator_.size(); i++) {\n        if (_operator_[i] == \"+\") {\n            res += operand[i + 1];\n        } else if (_operator_[i] == \"-\") {\n            res -= operand[i + 1];\n        } else if (_operator_[i] == \"*\") {\n            res *= operand[i + 1];\n        } else if (_operator_[i] == \"//\") {\n            res /= operand[i + 1];\n        } else if (_operator_[i] == \"**\") {\n            res = pow(res, operand[i + 1]);\n        }\n    }\n    return res;",
        "grade-174": {
            "execution": 0
        },
        "29": "std::stack<long> stk;\n  long num;\n  for (long i = 0; i < operand.size(); i++) {\n    stk.push(operand[i]);\n    if (i > 0) {\n      num = stk.top();\n      stk.pop();\n      std::string op = _operator_[i - 1];\n      if (op == \"+\") {\n        stk.top() += num;\n      } else if (op == \"-\") {\n        stk.top() -= num;\n      } else if (op == \"*\") {\n        stk.top() *= num;\n      } else if (op == \"//\") {\n        stk.top() /= num;\n      } else if (op == \"**\") {\n        stk.top() = std::pow(stk.top(), num);\n      }\n    }\n  }\n  return stk.top();",
        "grade-29": {
            "execution": 0
        },
        "6": "// Write your code here\n    long ans = operand[0];\n    for(int i = 0; i < _operator_.size(); i++){\n        if(_operator_[i] == \"+\"){\n            ans += operand[i+1];\n        }\n        else if(_operator_[i] == \"-\"){\n            ans -= operand[i+1];\n        }\n        else if(_operator_[i] == \"*\"){\n            ans *= operand[i+1];\n        }\n        else if(_operator_[i] == \"//\"){\n            ans /= operand[i+1];\n        }\n        else if(_operator_[i] == \"**\"){\n            ans = pow(ans, operand[i+1]);\n        }\n    }\n    return ans;",
        "grade-6": {
            "execution": 0
        },
        "71": "int n = operand.size();\n    std::string op;\n    long op1, op2;\n    std::stack<long> operands;\n    long result = 0;\n    for(int i = 0; i < n; i++) {\n        op = _operator_[i];\n        if(op == \"+\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 + op2);\n        }\n        else if(op == \"-\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 - op2);\n        }\n        else if(op == \"*\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 * op2);\n        }\n        else if(op == \"//\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 / op2);\n        }\n        else if(op == \"**\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(pow(op1, op2));\n        }\n        else {\n            operands.push(operand[i]);\n        }\n    }\n    result = operands.top();\n    return result;",
        "grade-71": {
            "execution": 0
        },
        "63": "long result = operand[0];\n  long n = operand.size();\n  for (int i = 1; i < n; i++) {\n    if (_operator_[i - 1] == \"+\")\n      result += operand[i];\n    else if (_operator_[i - 1] == \"-\")\n      result -= operand[i];\n    else if (_operator_[i - 1] == \"*\")\n      result *= operand[i];\n    else if (_operator_[i - 1] == \"//\")\n      result /= operand[i];\n    else if (_operator_[i - 1] == \"**\")\n      result = pow(result, operand[i]);\n  }\n  return result;",
        "grade-63": {
            "execution": 0
        },
        "58": "// Write your code here\n  long res=operand[0];\n  for(int i=0;i<_operator_.size();i++){\n      if(_operator_[i]==\"+\"){\n          res+=operand[i+1];\n      }\n      else if(_operator_[i]==\"-\"){\n          res-=operand[i+1];\n      }\n      else if(_operator_[i]==\"*\"){\n          res*=operand[i+1];\n      }\n      else if(_operator_[i]==\"//\"){\n          res/=operand[i+1];\n      }\n      else if(_operator_[i]==\"**\"){\n          res=pow(res,operand[i+1]);\n      }\n  }\n  return res;",
        "grade-58": {
            "execution": 0
        },
        "36": "assert(_operator_.size() == operand.size() - 1);\n  long result = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i] == \"+\") {\n      result += operand[i + 1];\n    } else if (_operator_[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (_operator_[i] == \"*\") {\n      result *= operand[i + 1];\n    } else if (_operator_[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n      result = std::pow(result, operand[i + 1]);\n    }\n  }\n  return result;",
        "grade-36": {
            "execution": 0
        },
        "26": "// Write your code here\n\tlong result = operand[0];\n\tfor (long i = 0; i < _operator_.size(); i++) {\n\t\tswitch (_operator_[i][0]) {\n\t\tcase '+':\n\t\t\tresult += operand[i + 1];\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tresult -= operand[i + 1];\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tresult *= operand[i + 1];\n\t\t\tbreak;\n\t\tcase '/':\n\t\t\tresult /= operand[i + 1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 0
        },
        "184": "long result = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    switch (_operator_[i][0]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '^':\n        result = pow(result, operand[i + 1]);\n        break;\n      default:\n        assert(false);\n    }\n  }\n  return result;",
        "grade-184": {
            "execution": 0
        },
        "146": "// write your code here\n  long result = operand[0];\n  for(int i = 0; i < _operator_.size(); i++) {\n    if(_operator_[i] == \"+\") {\n      result += operand[i+1];\n    }\n    else if(_operator_[i] == \"-\") {\n      result -= operand[i+1];\n    }\n    else if(_operator_[i] == \"*\") {\n      result *= operand[i+1];\n    }\n    else if(_operator_[i] == \"//\") {\n      result /= operand[i+1];\n    }\n    else if(_operator_[i] == \"**\") {\n      result = pow(result, operand[i+1]);\n    }\n  }\n  return result;",
        "grade-146": {
            "execution": 0
        },
        "22": "long result = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "159": "long ans = operand[0];\n    for(int i = 0; i < _operator_.size(); i++) {\n        switch(_operator_[i][0]) {\n            case '+': ans += operand[i+1]; break;\n            case '-': ans -= operand[i+1]; break;\n            case '*': ans *= operand[i+1]; break;\n            case '/': ans /= operand[i+1]; break;\n            case '^': ans = pow(ans, operand[i+1]); break;\n        }\n    }\n    return ans;",
        "grade-159": {
            "execution": 0
        },
        "112": "// Write your code here\n    stack<long>stk;\n    stk.push(operand[0]);\n    for(int i=0;i<_operator_.size();i++){\n        char op = _operator_[i][0];\n        if(op=='+')\n            stk.push(operand[i+1]);\n        else if(op=='-')\n            stk.push(-operand[i+1]);\n        else if(op=='*'){\n            long val = stk.top();\n            stk.pop();\n            stk.push(val*operand[i+1]);\n        }\n        else if(op=='/'){\n            long val = stk.top();\n            stk.pop();\n            stk.push(val/operand[i+1]);\n        }\n        else if(op=='^'){\n            long val = stk.top();\n            stk.pop();\n            stk.push(pow(val,operand[i+1]));\n        }\n    }\n    long ans = 0;\n    while(!stk.empty()){\n        ans+=stk.top();\n        stk.pop();\n    }\n    return ans;",
        "grade-112": {
            "execution": 0
        },
        "8": "assert(_operator_.size() == operand.size() - 1);\n    int n = operand.size();\n    long dp[n][n];\n    long minimum = INT_MAX;\n    std::string op_str[n][n];\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n            dp[i][j] = INT_MAX;\n            op_str[i][j] = \"\";\n        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        dp[i][i] = operand[i];\n        op_str[i][i] = std::to_string(operand[i]);\n    }\n    for(int l = 2; l <= n; l++)\n    {\n        for(int i = 0; i < n - l + 1; i++)\n        {\n            int j = i + l - 1;\n            for(int k = i; k < j; k++)\n            {\n                long left_val = dp[i][k];\n                long right_val = dp[k + 1][j];\n                // std::cout << left_val << \" \" << right_val << std::endl;\n                std::string left_str = op_str[i][k];\n                std::string right_str = op_str[k + 1][j];\n                if(left_val == INT_MAX || right_val == INT_MAX)\n                    continue;\n                if(_operator_[k] == \"+\")\n                {\n                    if(dp[i][j] > left_val + right_val)\n                    {\n                        dp[i][j] = left_val + right_val;\n                        op_str[i][j] = left_str + \"+\" + right_str;\n                    }\n                }\n                else if(_operator_[k] == \"-\")\n                {\n                    if(dp[i][j] > left_val - right_val)\n                    {\n                        dp[i][j] = left_val - right_val;\n                        op_",
        "grade-8": {
            "execution": 0
        },
        "7": "std::stack<long> stk;\n    stk.push(operand[0]);\n    for(int i = 0; i < operand.size() - 1; i++) {\n        char op = _operator_[i][0];\n        long op1 = stk.top();\n        stk.pop();\n        long op2 = operand[i + 1];\n        switch(op) {\n            case '+':\n                stk.push(op1 + op2);\n                break;\n            case '-':\n                stk.push(op1 - op2);\n                break;\n            case '*':\n                stk.push(op1 * op2);\n                break;\n            case '/':\n                stk.push(op1 / op2);\n                break;\n            case '^':\n                stk.push(std::pow(op1, op2));\n                break;\n        }\n    }\n    return stk.top();",
        "grade-7": {
            "execution": 0
        },
        "23": "long res = operand[0];\n    for(int i = 0; i < _operator_.size(); i++) {\n        if(_operator_[i] == \"+\") {\n            res += operand[i+1];\n        } else if(_operator_[i] == \"-\") {\n            res -= operand[i+1];\n        } else if(_operator_[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(_operator_[i] == \"//\") {\n            res /= operand[i+1];\n        } else if(_operator_[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 0
        },
        "56": "std::stack<long> s;\n  //  while(s.empty()==false)\n  //  {\n  //     cout<<s.top()<<\" \";\n  //     s.pop();\n  //  }\n  //  cout<<endl;\n  //  cout<<_operator_.size()<<endl;\n  //  cout<<operand.size()<<endl;\n  s.push(operand[0]);\n  for(int i=0;i<_operator_.size();i++)\n  {\n     //cout<<_operator_[i]<<endl;\n     long n1=s.top();\n     s.pop();\n     long n2=operand[i+1];\n     //cout<<n1<<\" \"<<n2<<endl;\n     if(_operator_[i]==\"+\")\n     {\n        s.push(n1+n2);\n     }\n     else if(_operator_[i]==\"-\")\n     {\n        s.push(n1-n2);\n     }\n     else if(_operator_[i]==\"*\")\n     {\n        s.push(n1*n2);\n     }\n     else if(_operator_[i]==\"/\")\n     {\n        s.push(n1/n2);\n     }\n     else if(_operator_[i]==\"^\")\n     {\n        s.push(pow(n1,n2));\n     }\n     else\n     {\n        //cout<<\"Invalid\"<<endl;\n        return 0;\n     }\n  }\n  return s.top();\n  }\n\nvoid test_case_1() {\n   std::vector<std::string> _operator_ = {\"+\", \"*\", \"-\"};\n   std::vector<long> operand = {2, 3, 4, 5};\n   long result = do_algebra(_operator_, operand);\n   assert(result == 9);",
        "grade-56": {
            "execution": 0
        },
        "60": "// Write your code here\n\tint n = _operator_.size();\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tint length = operand.size();\n\tif (length == 0) {\n\t\treturn 0;\n\t}\n\tlong result = operand[0];\n\tlong second_operand = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tsecond_operand = operand[i + 1];\n\t\t\tresult = pow(result, second_operand);\n\t\t}\n\t}\n\treturn result;",
        "grade-60": {
            "execution": 0
        },
        "134": "// ensure operator size equals to operand size - 1\n  assert(_operator_.size() == operand.size() - 1);\n  // ensure there is at least one operator and at least two operands\n  assert(_operator_.size() != 0 && operand.size() != 0);\n  // if only two operands and one operator\n  if (operand.size() == 2) {\n    if (_operator_[0] == \"+\") return operand[0] + operand[1];\n    if (_operator_[0] == \"-\") return operand[0] - operand[1];\n    if (_operator_[0] == \"*\") return operand[0] * operand[1];\n    if (_operator_[0] == \"//\") return operand[0] / operand[1];\n    if (_operator_[0] == \"**\") return pow(operand[0], operand[1]);\n  }\n\n  std::vector<std::string> ops = _operator_;\n  std::vector<long> nums = operand;\n  long res = 0;\n  // find the operator with highest priority\n  auto it = std::find(ops.begin(), ops.end(), \"**\");\n  if (it != ops.end()) {\n    res = nums[it - ops.begin()] + nums[it - ops.begin() + 1];\n    nums.erase(nums.begin() + it - ops.begin());\n    nums[it - ops.begin()] = res;\n    ops.erase(it);\n    return do_algebra(ops, nums);\n  }\n\n  it = std::find(ops.begin(), ops.end(), \"*\");\n  if (it != ops.end()) {\n    res = nums[it - ops.begin()] * nums[it - ops.begin() + 1];\n    nums.erase(nums.begin() + it - ops.begin());\n    nums[it - ops.begin()] = res;\n    ops.erase(it);\n    return do_algebra(ops, nums);\n  }\n\n  it = std::find(ops.begin(), ops.end",
        "grade-134": {
            "execution": 0
        },
        "163": "long ret = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    std::string operator_ = _operator_[i];\n    long b = operand[i + 1];\n    if (operator_ == \"+\") {\n      ret += b;\n    } else if (operator_ == \"-\") {\n      ret -= b;\n    } else if (operator_ == \"*\") {\n      ret *= b;\n    } else if (operator_ == \"//\") {\n      ret /= b;\n    } else if (operator_ == \"**\") {\n      ret = std::pow(ret, b);\n    }\n  }\n  return ret;",
        "grade-163": {
            "execution": 0
        },
        "bleu-174": 0.06798198427996016,
        "bleu-29": 0.05476968365100045,
        "bleu-6": 0.054302566690593856,
        "bleu-71": 0.11071891133019665,
        "bleu-63": 0.03624102421979493,
        "bleu-58": 0.054302566690593856,
        "bleu-36": 0.07004921591392026,
        "bleu-26": 0.008563057623865387,
        "bleu-184": 0.019245896009627714,
        "bleu-146": 0.054302566690593856,
        "bleu-22": 0.04973532751256417,
        "bleu-159": 0.01622187094240604,
        "bleu-112": 0.10415410827978111,
        "bleu-8": 0.19215684282742224,
        "bleu-7": 0.028020966550575784,
        "bleu-23": 0.04973532751256417,
        "bleu-56": 0.15336017364132212,
        "bleu-60": 0.09588590894385302,
        "bleu-134": 0.15614905381418903,
        "bleu-163": 0.025212522083577688,
        "codebleu-174": 0.18255240136705117,
        "codebleu-29": 0.17533488820356907,
        "codebleu-6": 0.16510697780004333,
        "codebleu-71": 0.27817962007858,
        "codebleu-63": 0.1279008396217207,
        "codebleu-58": 0.16510697780004333,
        "codebleu-36": 0.18382827287934764,
        "codebleu-26": 0.09855358335932293,
        "codebleu-184": 0.12255838597791585,
        "codebleu-146": 0.16595300148870662,
        "codebleu-22": 0.16172980014235785,
        "codebleu-159": 0.1131082648217677,
        "codebleu-112": 0.2543384413194354,
        "codebleu-8": 0.4385521940396479,
        "codebleu-7": 0.1561015006331023,
        "codebleu-23": 0.16033710624028716,
        "codebleu-56": 0.31036986252674836,
        "codebleu-60": 0.2118983235186634,
        "codebleu-134": 0.4039366669125799,
        "codebleu-163": 0.12043789722661179,
        "chrf-174": 0.20920204152668062,
        "chrf-29": 0.13679069264690846,
        "chrf-6": 0.18908889675433244,
        "chrf-71": 0.25073883879138414,
        "chrf-63": 0.17148633849684305,
        "chrf-58": 0.18762433876997822,
        "chrf-36": 0.21023137176946946,
        "chrf-26": 0.10661702490513654,
        "chrf-184": 0.12902158044077974,
        "chrf-146": 0.1890042732520856,
        "chrf-22": 0.18687008701019875,
        "chrf-159": 0.12459876511822551,
        "chrf-112": 0.1811958109935202,
        "chrf-8": 0.21484070138760594,
        "chrf-7": 0.11833721879504729,
        "chrf-23": 0.18547310551368498,
        "chrf-56": 0.23019515115049732,
        "chrf-60": 0.22569536583540653,
        "chrf-134": 0.28691626042637086,
        "chrf-163": 0.15805833309968026,
        "rougel-174": 0.338255033557047,
        "rougel-29": 0.258148631029987,
        "rougel-6": 0.3274215552523875,
        "rougel-71": 0.29500580720092917,
        "rougel-63": 0.2936288088642659,
        "rougel-58": 0.3274215552523875,
        "rougel-36": 0.33689839572192515,
        "rougel-26": 0.21961932650073207,
        "rougel-184": 0.24397163120567378,
        "rougel-146": 0.3274215552523875,
        "rougel-22": 0.33012379642365886,
        "rougel-159": 0.24355300859598855,
        "rougel-112": 0.29404617253948967,
        "rougel-8": 0.3790983606557377,
        "rougel-7": 0.20754716981132076,
        "rougel-23": 0.33012379642365886,
        "rougel-56": 0.2770199370409234,
        "rougel-60": 0.34871794871794876,
        "rougel-134": 0.2767175572519084,
        "rougel-163": 0.2390998593530239,
        "meteor-174": 0.18021807157258016,
        "meteor-29": 0.13616301655337246,
        "meteor-6": 0.15866300973224004,
        "meteor-71": 0.1972158329961774,
        "meteor-63": 0.13525230718573525,
        "meteor-58": 0.15866300973224004,
        "meteor-36": 0.1801154416912746,
        "meteor-26": 0.10265872253187265,
        "meteor-184": 0.11963494595073543,
        "meteor-146": 0.15866300973224004,
        "meteor-22": 0.15884444256212252,
        "meteor-159": 0.11689442354174327,
        "meteor-112": 0.18021953667820656,
        "meteor-8": 0.2787801320117052,
        "meteor-7": 0.11456197242443923,
        "meteor-23": 0.15884444256212252,
        "meteor-56": 0.18174496492331743,
        "meteor-60": 0.1914476654897599,
        "meteor-134": 0.21892447243976113,
        "meteor-163": 0.11811941369933558,
        "ruby-174": 0.21415929203539819,
        "ruby-29": 0.15929203539823011,
        "ruby-6": 0.2053097345132744,
        "ruby-71": 0.1893805309734513,
        "ruby-63": 0.17876106194690267,
        "ruby-58": 0.2053097345132744,
        "ruby-36": 0.21415929203539819,
        "ruby-26": 0.1327433628318584,
        "ruby-184": 0.1504424778761062,
        "ruby-146": 0.2053097345132744,
        "ruby-22": 0.2053097345132744,
        "ruby-159": 0.1504424778761062,
        "ruby-112": 0.2053097345132744,
        "ruby-8": 0.23716814159292032,
        "ruby-7": 0.12566371681415933,
        "ruby-23": 0.2053097345132744,
        "ruby-56": 0.17876106194690267,
        "ruby-60": 0.22831858407079642,
        "ruby-134": 0.14513274336283188,
        "ruby-163": 0.14867256637168147,
        "codebertscore_f1-174": 0.7968210577964783,
        "codebertscore_f3-174": 0.7814875841140747,
        "codebertscore_f1-29": 0.7412771582603455,
        "codebertscore_f3-29": 0.7290086150169373,
        "codebertscore_f1-6": 0.7973766326904297,
        "codebertscore_f3-6": 0.7849147319793701,
        "codebertscore_f1-71": 0.77424556016922,
        "codebertscore_f3-71": 0.773346483707428,
        "codebertscore_f1-63": 0.7656895518302917,
        "codebertscore_f3-63": 0.7481820583343506,
        "codebertscore_f1-58": 0.8010811805725098,
        "codebertscore_f3-58": 0.7883787751197815,
        "codebertscore_f1-36": 0.7885156869888306,
        "codebertscore_f3-36": 0.7731605172157288,
        "codebertscore_f1-26": 0.7395661473274231,
        "codebertscore_f3-26": 0.7299578785896301,
        "codebertscore_f1-184": 0.7658140659332275,
        "codebertscore_f3-184": 0.7592776417732239,
        "codebertscore_f1-146": 0.7854756116867065,
        "codebertscore_f3-146": 0.7728484869003296,
        "codebertscore_f1-22": 0.7819011211395264,
        "codebertscore_f3-22": 0.7605046629905701,
        "codebertscore_f1-159": 0.7699218988418579,
        "codebertscore_f3-159": 0.7565215229988098,
        "codebertscore_f1-112": 0.7785634398460388,
        "codebertscore_f3-112": 0.7890559434890747,
        "codebertscore_f1-8": 0.7495454549789429,
        "codebertscore_f3-8": 0.7598292231559753,
        "codebertscore_f1-7": 0.7405962944030762,
        "codebertscore_f3-7": 0.7431156635284424,
        "codebertscore_f1-23": 0.7996662259101868,
        "codebertscore_f3-23": 0.7815255522727966,
        "codebertscore_f1-56": 0.7448247671127319,
        "codebertscore_f3-56": 0.7663357853889465,
        "codebertscore_f1-60": 0.788467526435852,
        "codebertscore_f3-60": 0.7846763134002686,
        "codebertscore_f1-134": 0.7397117614746094,
        "codebertscore_f3-134": 0.7541204690933228,
        "codebertscore_f1-163": 0.7305800914764404,
        "codebertscore_f3-163": 0.703072190284729,
        "codebertscore_s_f1-174": 0.8121787905693054,
        "codebertscore_s_f3-174": 0.7982581257820129,
        "codebertscore_s_f1-29": 0.7564609050750732,
        "codebertscore_s_f3-29": 0.7517910003662109,
        "codebertscore_s_f1-6": 0.8096580505371094,
        "codebertscore_s_f3-6": 0.7978153228759766,
        "codebertscore_s_f1-71": 0.7787288427352905,
        "codebertscore_s_f3-71": 0.7781957387924194,
        "codebertscore_s_f1-63": 0.7912685871124268,
        "codebertscore_s_f3-63": 0.7787396311759949,
        "codebertscore_s_f1-58": 0.8172276020050049,
        "codebertscore_s_f3-58": 0.8062413334846497,
        "codebertscore_s_f1-36": 0.8101412653923035,
        "codebertscore_s_f3-36": 0.797014057636261,
        "codebertscore_s_f1-26": 0.7644472718238831,
        "codebertscore_s_f3-26": 0.7628313899040222,
        "codebertscore_s_f1-184": 0.785201370716095,
        "codebertscore_s_f3-184": 0.782077431678772,
        "codebertscore_s_f1-146": 0.8073797225952148,
        "codebertscore_s_f3-146": 0.7973991632461548,
        "codebertscore_s_f1-22": 0.8084425926208496,
        "codebertscore_s_f3-22": 0.7912982702255249,
        "codebertscore_s_f1-159": 0.7933568358421326,
        "codebertscore_s_f3-159": 0.786020815372467,
        "codebertscore_s_f1-112": 0.7862513661384583,
        "codebertscore_s_f3-112": 0.7974604964256287,
        "codebertscore_s_f1-8": 0.7563105225563049,
        "codebertscore_s_f3-8": 0.7668874263763428,
        "codebertscore_s_f1-7": 0.7524996995925903,
        "codebertscore_s_f3-7": 0.7592504620552063,
        "codebertscore_s_f1-23": 0.8169102668762207,
        "codebertscore_s_f3-23": 0.8004064559936523,
        "codebertscore_s_f1-56": 0.7522409558296204,
        "codebertscore_s_f3-56": 0.7744375467300415,
        "codebertscore_s_f1-60": 0.798872709274292,
        "codebertscore_s_f3-60": 0.7968074083328247,
        "codebertscore_s_f1-134": 0.7480906844139099,
        "codebertscore_s_f3-134": 0.7629404067993164,
        "codebertscore_s_f1-163": 0.763637363910675,
        "codebertscore_s_f3-163": 0.7468939423561096,
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-112": 3,
        "raw_gpt35_nsnr-112": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-134": 3,
        "raw_gpt35_nsnr-134": "3",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-146": 4,
        "raw_gpt35_nswr-146": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-159": 3,
        "raw_gpt35_nswr-159": "3",
        "gpt35_nswr-112": 3,
        "raw_gpt35_nswr-112": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-134": 3,
        "raw_gpt35_nswr-134": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n",
        "snippet": [
            "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n"
        ],
        "simplified": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
        "task_id": "63",
        "178": "if (n < 2) return 0;\n    long a = 0, b = 0, c = 1, d;\n    while (n-- > 2) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;",
        "grade-178": {
            "execution": 1
        },
        "29": "if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 1;\n\t}\n\tlong temp1 = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 1;\n\tlong result = 0;\n\tfor (int i = 3; i <= n; i++) {\n\t\tresult = temp1 + temp2 + temp3;\n\t\ttemp1 = temp2;\n\t\ttemp2 = temp3;\n\t\ttemp3 = result;\n\t}\n\treturn result;",
        "grade-29": {
            "execution": 1
        },
        "6": "if (n == 0) {\n\t\treturn 0;\n\t} else if (n == 1) {\n\t\treturn 0;\n\t} else if (n == 2) {\n\t\treturn 1;\n\t} else {\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 1;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tfor (int i = 0; i < n - 2; i++) {\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = a + b + c;\n\t\t\te = d;\n\t\t}\n\t\treturn e;\n\t}",
        "grade-6": {
            "execution": 0
        },
        "73": "if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 1;\n  long d = a + b + c;\n  for (int i = 3; i < n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;",
        "grade-73": {
            "execution": 1
        },
        "65": "if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long m = n - 3;\n  long first_fib = 0;\n  long second_fib = 1;\n  long current_fib = 1;\n  long sum = 0;\n  while (m >= 0) {\n    m--;\n    sum += first_fib;\n    first_fib = second_fib;\n    second_fib = current_fib;\n    current_fib = first_fib + second_fib;\n  }\n  return sum + current_fib;",
        "grade-65": {
            "execution": 0
        },
        "59": "if (n == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n    return 0;\n  }\n  else if (n == 2) {\n    return 1;\n  }\n  else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }",
        "grade-59": {
            "execution": 1
        },
        "36": "if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = a + b + c;\n    for (int i = 3; i < n; i++) {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b + c;\n    }\n    return d;",
        "grade-36": {
            "execution": 1
        },
        "26": "assert(n>=0);\n  if(n==0)\n    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n    return 1;\n  return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);",
        "grade-26": {
            "execution": 1
        },
        "188": "long dp[n+1];\n   dp[0] = 0;\n   dp[1] = 0;\n   dp[2] = 1;\n   for(int i = 3; i <= n; i++) {\n       dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n   }\n   return dp[n];",
        "grade-188": {
            "execution": 1
        },
        "150": "// WRITE YOUR CODE HERE\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int a = 0, b = 0, c = 1, sum = 0;\n    while(n--){\n        sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n    }\n    return sum;",
        "grade-150": {
            "execution": 0
        },
        "22": "if (n==0)\n        return 0;\n    if (n==1)\n        return 0;\n    if (n==2)\n        return 1;\n    long a=0,b=0,c=1,d;\n    for (int i=3;i<=n;i++)\n    {\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;",
        "grade-22": {
            "execution": 1
        },
        "165": "assert(n>=0);\n\tif(n==0 || n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\tlong dp[n+1];\n\tdp[0]=0;\n\tdp[1]=0;\n\tdp[2]=1;\n\tlong result;\n\tfor(int i=3;i<=n;i++){\n\t\tdp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n\t}\n\tresult=dp[n];\n\treturn result;",
        "grade-165": {
            "execution": 1
        },
        "114": "std::vector<long> fib = {0, 0, 1};\n  for (long i = 3; i <= n; i++) {\n    fib.push_back(fib[i-1] + fib[i-2] + fib[i-3]);\n  }\n  return fib[n];",
        "grade-114": {
            "execution": 1
        },
        "8": "// Implement this placeholer.\n    long a=0,b=0,c=1,d;\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n    else{\n        for(int i=3;i<=n;i++){\n            d=a+b+c;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }",
        "grade-8": {
            "execution": 1
        },
        "7": "// your code here\n    assert(n >= 0);\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    int memo[n+1];\n    memo[0] = 0;\n    memo[1] = 0;\n    memo[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n    }\n    return memo[n];",
        "grade-23": {
            "execution": 1
        },
        "57": "long a=0,b=0,c=1,d=0;\n  for(int i=3;i<=n;i++){\n    d=a+b+c;\n    a=b;\n    b=c;\n    c=d;\n  }\n  return d;",
        "grade-57": {
            "execution": 0
        },
        "62": "if (n < 0) {\n    return -1;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 1;\n  long d = a + b + c;\n  for (int i = 3; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;",
        "grade-62": {
            "execution": 0
        },
        "137": "std::vector<long> fibs = {0, 0, 1};\n    if (n < 3) return fibs[n];\n    for (int i = 3; i <= n; i++) {\n        fibs.push_back(fibs[i-1] + fibs[i-2] + fibs[i-3]);\n    }\n    return fibs[n];",
        "grade-137": {
            "execution": 1
        },
        "168": "assert(n >= 0);\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tlong f[n+1];\n\tf[0] = 0;\n\tf[1] = 0;\n\tf[2] = 1;\n\tfor (int i = 3; i <= n; i++) {\n\t\tf[i] = f[i-1] + f[i-2] + f[i-3];\n\t}\n\treturn f[n];",
        "grade-168": {
            "execution": 1
        },
        "bleu-178": 0.026870803788677854,
        "bleu-29": 0.22685815034594126,
        "bleu-6": 0.12940588413116622,
        "bleu-73": 0.18884925959350285,
        "bleu-65": 0.04977138727778018,
        "bleu-59": 0.03188957942095322,
        "bleu-36": 0.18884925959350285,
        "bleu-26": 0.03240555226862577,
        "bleu-188": 0.6301573844850704,
        "bleu-150": 0.039435780734436945,
        "bleu-22": 0.24497061528256567,
        "bleu-165": 0.3947970236039896,
        "bleu-114": 0.3817754380694711,
        "bleu-8": 0.20682156011227412,
        "bleu-7": 0.20995698790489378,
        "bleu-23": 0.4319051554174147,
        "bleu-57": 0.2595626025185037,
        "bleu-62": 0.1976587592433129,
        "bleu-137": 0.4161906165953688,
        "bleu-168": 0.5008751359892432,
        "codebleu-178": 0.34299174892392187,
        "codebleu-29": 0.471599521768445,
        "codebleu-6": 0.4578073326429965,
        "codebleu-73": 0.4618170696859379,
        "codebleu-65": 0.4256139562743336,
        "codebleu-59": 0.28048925738513664,
        "codebleu-36": 0.4618170696859379,
        "codebleu-26": 0.2978363226960781,
        "codebleu-188": 0.8078116562797781,
        "codebleu-150": 0.3858939802336029,
        "codebleu-22": 0.4717209186597028,
        "codebleu-165": 0.7862388417130707,
        "codebleu-114": 0.5467678074647878,
        "codebleu-8": 0.4445434703881828,
        "codebleu-7": 0.4579954371475188,
        "codebleu-23": 0.783198751628689,
        "codebleu-57": 0.41825645135348094,
        "codebleu-62": 0.4789923918328209,
        "codebleu-137": 0.5842607011955335,
        "codebleu-168": 0.7911762497912308,
        "chrf-178": 0.11320749889740167,
        "chrf-29": 0.2529923043191698,
        "chrf-6": 0.2131135684095556,
        "chrf-73": 0.24217360397500873,
        "chrf-65": 0.1420282977785927,
        "chrf-59": 0.1487801943708903,
        "chrf-36": 0.24217360397500873,
        "chrf-26": 0.16466674407216597,
        "chrf-188": 0.5114916729013567,
        "chrf-150": 0.125929956420335,
        "chrf-22": 0.28227975560901564,
        "chrf-165": 0.44584135740295916,
        "chrf-114": 0.3415676614073025,
        "chrf-8": 0.256561220985233,
        "chrf-7": 0.2661350232916542,
        "chrf-23": 0.46069641995168026,
        "chrf-57": 0.2894173406363091,
        "chrf-62": 0.27257770135381704,
        "chrf-137": 0.3847135221877025,
        "chrf-168": 0.6303124194236908,
        "rougel-178": 0.25563909774436094,
        "rougel-29": 0.38150289017341044,
        "rougel-6": 0.3404255319148936,
        "rougel-73": 0.3636363636363636,
        "rougel-65": 0.25,
        "rougel-59": 0.302158273381295,
        "rougel-36": 0.3636363636363636,
        "rougel-26": 0.32352941176470584,
        "rougel-188": 0.8258064516129032,
        "rougel-150": 0.25,
        "rougel-22": 0.3950617283950617,
        "rougel-165": 0.63,
        "rougel-114": 0.6013986013986014,
        "rougel-8": 0.38150289017341044,
        "rougel-7": 0.3771428571428571,
        "rougel-23": 0.6806282722513088,
        "rougel-57": 0.4328358208955224,
        "rougel-62": 0.3597883597883598,
        "rougel-137": 0.5935483870967743,
        "rougel-168": 0.7314285714285714,
        "meteor-178": 0.20917678812415655,
        "meteor-29": 0.31229938178555083,
        "meteor-6": 0.3407355038129374,
        "meteor-73": 0.31767416039394064,
        "meteor-65": 0.2823394982993197,
        "meteor-59": 0.2708909712925777,
        "meteor-36": 0.31767416039394064,
        "meteor-26": 0.2719832735961768,
        "meteor-188": 0.8492202222618596,
        "meteor-150": 0.251586652509948,
        "meteor-22": 0.323450054219285,
        "meteor-165": 0.7518205518776732,
        "meteor-114": 0.5440438918907022,
        "meteor-8": 0.33392513349176406,
        "meteor-7": 0.31807987451960335,
        "meteor-23": 0.822876334168859,
        "meteor-57": 0.30782221244292873,
        "meteor-62": 0.32539109704222485,
        "meteor-137": 0.5731129177588467,
        "meteor-168": 0.8275287734173675,
        "ruby-178": 0.1578947368421053,
        "ruby-29": 0.23711340206185572,
        "ruby-6": 0.2232142857142857,
        "ruby-73": 0.20999999999999996,
        "ruby-65": 0.17000000000000004,
        "ruby-59": 0.19736842105263153,
        "ruby-36": 0.20999999999999996,
        "ruby-26": 0.22368421052631582,
        "ruby-188": 0.7974683544303798,
        "ruby-150": 0.13095238095238093,
        "ruby-22": 0.2558139534883721,
        "ruby-165": 0.5080645161290323,
        "ruby-114": 0.513157894736842,
        "ruby-8": 0.24742268041237114,
        "ruby-7": 0.23232323232323238,
        "ruby-23": 0.5565217391304348,
        "ruby-57": 0.32894736842105265,
        "ruby-62": 0.21238938053097345,
        "ruby-137": 0.5189873417721519,
        "ruby-168": 0.6363636363636364,
        "codebertscore_f1-178": 0.7360497117042542,
        "codebertscore_f3-178": 0.7271188497543335,
        "codebertscore_f1-29": 0.7919739484786987,
        "codebertscore_f3-29": 0.7921699285507202,
        "codebertscore_f1-6": 0.7675178050994873,
        "codebertscore_f3-6": 0.7716514468193054,
        "codebertscore_f1-73": 0.7771686315536499,
        "codebertscore_f3-73": 0.777880847454071,
        "codebertscore_f1-65": 0.7192997932434082,
        "codebertscore_f3-65": 0.7253344058990479,
        "codebertscore_f1-59": 0.808620274066925,
        "codebertscore_f3-59": 0.8024480938911438,
        "codebertscore_f1-36": 0.750759482383728,
        "codebertscore_f3-36": 0.7502812147140503,
        "codebertscore_f1-26": 0.8185259699821472,
        "codebertscore_f3-26": 0.8098764419555664,
        "codebertscore_f1-188": 0.9015281796455383,
        "codebertscore_f3-188": 0.912806510925293,
        "codebertscore_f1-150": 0.7220257520675659,
        "codebertscore_f3-150": 0.7179314494132996,
        "codebertscore_f1-22": 0.7845131754875183,
        "codebertscore_f3-22": 0.784568727016449,
        "codebertscore_f1-165": 0.8631638884544373,
        "codebertscore_f3-165": 0.8799126744270325,
        "codebertscore_f1-114": 0.8887509703636169,
        "codebertscore_f3-114": 0.8931711912155151,
        "codebertscore_f1-8": 0.7512285709381104,
        "codebertscore_f3-8": 0.7646073698997498,
        "codebertscore_f1-7": 0.753418505191803,
        "codebertscore_f3-7": 0.7606033086776733,
        "codebertscore_f1-23": 0.8398514986038208,
        "codebertscore_f3-23": 0.843218207359314,
        "codebertscore_f1-57": 0.8138192892074585,
        "codebertscore_f3-57": 0.8076498508453369,
        "codebertscore_f1-62": 0.7603527307510376,
        "codebertscore_f3-62": 0.7613609433174133,
        "codebertscore_f1-137": 0.8696775436401367,
        "codebertscore_f3-137": 0.8815068602561951,
        "codebertscore_f1-168": 0.8965016603469849,
        "codebertscore_f3-168": 0.9076818227767944,
        "codebertscore_s_f1-178": 0.7457143068313599,
        "codebertscore_s_f3-178": 0.7365424036979675,
        "codebertscore_s_f1-29": 0.7900910377502441,
        "codebertscore_s_f3-29": 0.790406346321106,
        "codebertscore_s_f1-6": 0.7774810194969177,
        "codebertscore_s_f3-6": 0.7842718362808228,
        "codebertscore_s_f1-73": 0.7801737785339355,
        "codebertscore_s_f3-73": 0.7815207839012146,
        "codebertscore_s_f1-65": 0.7334029674530029,
        "codebertscore_s_f3-65": 0.7433424592018127,
        "codebertscore_s_f1-59": 0.804872453212738,
        "codebertscore_s_f3-59": 0.7979640960693359,
        "codebertscore_s_f1-36": 0.7749148011207581,
        "codebertscore_s_f3-36": 0.7768002152442932,
        "codebertscore_s_f1-26": 0.8139230608940125,
        "codebertscore_s_f3-26": 0.8052108287811279,
        "codebertscore_s_f1-188": 0.8965755105018616,
        "codebertscore_s_f3-188": 0.9080159068107605,
        "codebertscore_s_f1-150": 0.7358154654502869,
        "codebertscore_s_f3-150": 0.7355096340179443,
        "codebertscore_s_f1-22": 0.7987706661224365,
        "codebertscore_s_f3-22": 0.7975444197654724,
        "codebertscore_s_f1-165": 0.8681775331497192,
        "codebertscore_s_f3-165": 0.886231005191803,
        "codebertscore_s_f1-114": 0.8820608258247375,
        "codebertscore_s_f3-114": 0.8885496258735657,
        "codebertscore_s_f1-8": 0.7686977982521057,
        "codebertscore_s_f3-8": 0.7838020324707031,
        "codebertscore_s_f1-7": 0.7691795229911804,
        "codebertscore_s_f3-7": 0.7787114381790161,
        "codebertscore_s_f1-23": 0.8684815764427185,
        "codebertscore_s_f3-23": 0.8733463883399963,
        "codebertscore_s_f1-57": 0.8122952580451965,
        "codebertscore_s_f3-57": 0.8061504364013672,
        "codebertscore_s_f1-62": 0.7733199000358582,
        "codebertscore_s_f3-62": 0.7755836844444275,
        "codebertscore_s_f1-137": 0.8658393025398254,
        "codebertscore_s_f3-137": 0.8797216415405273,
        "codebertscore_s_f1-168": 0.905321478843689,
        "codebertscore_s_f3-168": 0.9173431396484375,
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-150": 3,
        "raw_gpt35_nsnr-150": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-114": 3,
        "raw_gpt35_nsnr-114": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nswr-178": 4,
        "raw_gpt35_nswr-178": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-150": 4,
        "raw_gpt35_nswr-150": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-114": 4,
        "raw_gpt35_nswr-114": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-137": 4,
        "raw_gpt35_nswr-137": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nstd::string concatenate(std::vector<std::string> strings) {\n",
        "snippet": [
            "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n"
        ],
        "simplified": "Concatenate list of strings into a single string",
        "task_id": "28",
        "193": "std::string result;\n\tfor (std::string s : strings) {\n\t\tresult += s;\n\t}\n\treturn result;",
        "grade-193": {
            "execution": 1
        },
        "28": "std::string s;\n  for (auto &&str : strings) {\n    s += str;\n  }\n  return s;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string concated_string;\n    for (std::string s : strings) {\n        concated_string += s;\n    }\n    return concated_string;",
        "grade-6": {
            "execution": 1
        },
        "75": "// your code here\n  return std::accumulate(std::begin(strings), std::end(strings), std::string());",
        "grade-75": {
            "execution": 1
        },
        "66": "std::string s;\n    for (std::string str : strings) {\n        s += str;\n    }\n    return s;",
        "grade-66": {
            "execution": 1
        },
        "61": "std::string s;\n\tfor (std::string str : strings)\n\t\ts += str;\n\treturn s;",
        "grade-61": {
            "execution": 1
        },
        "35": "// Your code here\n  std::string s = \"\";\n  for(auto x: strings)\n  {\n      s+=x;\n  }\n  return s;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::string result;\n\tfor (std::string str : strings) {\n\t\tresult += str;\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 1
        },
        "158": "std::string result;\n  for (std::string item : strings) {\n    result += item;\n  }\n  return result;",
        "grade-158": {
            "execution": 1
        },
        "22": "std::string s;\n    for (int i = 0; i < strings.size(); i++) {\n        s += strings[i];\n    }\n    return s;",
        "grade-22": {
            "execution": 1
        },
        "179": "std::string concat_string = \"\";\n    for (unsigned i = 0; i < strings.size(); i++) {\n        concat_string += strings[i];\n    }\n    return concat_string;",
        "grade-179": {
            "execution": 1
        },
        "122": "// TODO: Implement\n    return \"\";",
        "grade-122": {
            "execution": 0
        },
        "8": "std::string s = \"\";\n  for (int i = 0; i < strings.size(); i++) {\n    s = s + strings[i];\n  }\n  return s;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string res;\n  for (const auto& s : strings) {\n    res += s;\n  }\n  return res;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (strings.size() == 0) {\n    return \"\";\n  } else {\n    return strings[0] + concatenate(std::vector<std::string>(strings.begin() + 1, strings.end()));\n  }",
        "grade-23": {
            "execution": 1
        },
        "57": "std::string concatenated = \"\";\n   for (std::string str : strings) {\n      concatenated += str;\n   }\n   return concatenated;",
        "grade-57": {
            "execution": 1
        },
        "63": "std::string result = \"\";\n    for (std::string str : strings) {\n        result += str;\n    }\n    return result;",
        "grade-63": {
            "execution": 1
        },
        "147": "std::string s;\n    for (std::string str : strings) {\n        s.append(str);\n    }\n    return s;",
        "grade-147": {
            "execution": 1
        },
        "182": "std::stringstream ss;\n  for (std::string s : strings) {\n    ss << s;\n  }\n  return ss.str();",
        "grade-182": {
            "execution": 1
        },
        "167": "std::string final = \"\";\n  for (int i = 0; i < strings.size(); i++) {\n    final = final + strings[i];\n  }\n  return final;",
        "grade-167": {
            "execution": 1
        },
        "bleu-193": 0.05304707116732969,
        "bleu-28": 0.05216864465644676,
        "bleu-6": 0.05304707116732969,
        "bleu-75": 0.033575127327374915,
        "bleu-66": 0.05304707116732969,
        "bleu-61": 0.050048063141241404,
        "bleu-35": 0.15515997412703936,
        "bleu-26": 0.05304707116732969,
        "bleu-158": 0.05304707116732969,
        "bleu-22": 0.6398047961625044,
        "bleu-179": 0.5984989932066052,
        "bleu-122": 0.007602846470131927,
        "bleu-8": 0.6718723395519142,
        "bleu-7": 0.05216864465644676,
        "bleu-23": 0.12244626438325806,
        "bleu-57": 0.15296835889210184,
        "bleu-63": 0.15296835889210184,
        "bleu-147": 0.05967320675455183,
        "bleu-182": 0.07779512556930984,
        "bleu-167": 0.6718723395519142,
        "codebleu-193": 0.27224893458488775,
        "codebleu-28": 0.2580957699949684,
        "codebleu-6": 0.27224893458488775,
        "codebleu-75": 0.28952569169960474,
        "codebleu-66": 0.27224893458488775,
        "codebleu-61": 0.25520492755417057,
        "codebleu-35": 0.3579140320741844,
        "codebleu-26": 0.27224893458488775,
        "codebleu-158": 0.27224893458488775,
        "codebleu-22": 0.6805438217981377,
        "codebleu-179": 0.7044990017213631,
        "codebleu-122": 0.08671592469713431,
        "codebleu-8": 0.7617219623789185,
        "codebleu-7": 0.2823381942373927,
        "codebleu-23": 0.5226643727966943,
        "codebleu-57": 0.3278666142849737,
        "codebleu-63": 0.3278666142849737,
        "codebleu-147": 0.3486247817139466,
        "codebleu-182": 0.37500548001233946,
        "codebleu-167": 0.7617219623789185,
        "chrf-193": 0.30057864101433873,
        "chrf-28": 0.2660769409373559,
        "chrf-6": 0.28592528099330733,
        "chrf-75": 0.2642295191992267,
        "chrf-66": 0.2936411995270232,
        "chrf-61": 0.30286670779901487,
        "chrf-35": 0.3028904133830982,
        "chrf-26": 0.29727770622775396,
        "chrf-158": 0.2884998549354503,
        "chrf-22": 0.6568162067653005,
        "chrf-179": 0.5754022405678858,
        "chrf-122": 0.08375097023193391,
        "chrf-8": 0.7028253788604863,
        "chrf-7": 0.2492657353475459,
        "chrf-23": 0.36519991892034764,
        "chrf-57": 0.31834137157034736,
        "chrf-63": 0.3478301487176656,
        "chrf-147": 0.2993751659727878,
        "chrf-182": 0.3075921990066534,
        "chrf-167": 0.6730339129944407,
        "rougel-193": 0.34375,
        "rougel-28": 0.34920634920634924,
        "rougel-6": 0.34375,
        "rougel-75": 0.1643835616438356,
        "rougel-66": 0.34375,
        "rougel-61": 0.3548387096774194,
        "rougel-35": 0.40579710144927533,
        "rougel-26": 0.34375,
        "rougel-158": 0.34375,
        "rougel-22": 0.7631578947368421,
        "rougel-179": 0.7848101265822786,
        "rougel-122": 0.12765957446808512,
        "rougel-8": 0.825,
        "rougel-7": 0.34920634920634924,
        "rougel-23": 0.30107526881720426,
        "rougel-57": 0.417910447761194,
        "rougel-63": 0.417910447761194,
        "rougel-147": 0.33333333333333337,
        "rougel-182": 0.23529411764705882,
        "rougel-167": 0.825,
        "meteor-193": 0.1766304347826087,
        "meteor-28": 0.16348773841961853,
        "meteor-6": 0.1766304347826087,
        "meteor-75": 0.15489406294003996,
        "meteor-66": 0.1766304347826087,
        "meteor-61": 0.20159760170006072,
        "meteor-35": 0.23866547512660113,
        "meteor-26": 0.1766304347826087,
        "meteor-158": 0.1766304347826087,
        "meteor-22": 0.808779232159483,
        "meteor-179": 0.8528796150443433,
        "meteor-122": 0.08992165242165244,
        "meteor-8": 0.8815532187139561,
        "meteor-7": 0.16348773841961853,
        "meteor-23": 0.3717114469633362,
        "meteor-57": 0.2535903807277628,
        "meteor-63": 0.2535903807277628,
        "meteor-147": 0.2269029233314947,
        "meteor-182": 0.22568301514154043,
        "meteor-167": 0.8815532187139561,
        "ruby-193": 0.23684210526315785,
        "ruby-28": 0.23684210526315785,
        "ruby-6": 0.23684210526315785,
        "ruby-75": 0.052631578947368474,
        "ruby-66": 0.23684210526315785,
        "ruby-61": 0.26315789473684215,
        "ruby-35": 0.1578947368421053,
        "ruby-26": 0.23684210526315785,
        "ruby-158": 0.23684210526315785,
        "ruby-22": 0.6842105263157895,
        "ruby-179": 0.7073170731707317,
        "ruby-122": 0.02631578947368418,
        "ruby-8": 0.7619047619047619,
        "ruby-7": 0.23684210526315785,
        "ruby-23": 0.1636363636363637,
        "ruby-57": 0.26315789473684215,
        "ruby-63": 0.26315789473684215,
        "ruby-147": 0.1842105263157895,
        "ruby-182": 0.1578947368421053,
        "ruby-167": 0.7619047619047619,
        "codebertscore_f1-193": 0.8171585202217102,
        "codebertscore_f3-193": 0.8021697402000427,
        "codebertscore_f1-28": 0.8008610010147095,
        "codebertscore_f3-28": 0.7878756523132324,
        "codebertscore_f1-6": 0.7883538007736206,
        "codebertscore_f3-6": 0.7839703559875488,
        "codebertscore_f1-75": 0.6989211440086365,
        "codebertscore_f3-75": 0.7027060389518738,
        "codebertscore_f1-66": 0.8131763339042664,
        "codebertscore_f3-66": 0.797846257686615,
        "codebertscore_f1-61": 0.8102015256881714,
        "codebertscore_f3-61": 0.7961820960044861,
        "codebertscore_f1-35": 0.7819123864173889,
        "codebertscore_f3-35": 0.7937363386154175,
        "codebertscore_f1-26": 0.8171221017837524,
        "codebertscore_f3-26": 0.8017503619194031,
        "codebertscore_f1-158": 0.8117256164550781,
        "codebertscore_f3-158": 0.7940136790275574,
        "codebertscore_f1-22": 0.9262823462486267,
        "codebertscore_f3-22": 0.927024781703949,
        "codebertscore_f1-179": 0.87749844789505,
        "codebertscore_f3-179": 0.8943655490875244,
        "codebertscore_f1-122": 0.6430743932723999,
        "codebertscore_f3-122": 0.6219573616981506,
        "codebertscore_f1-8": 0.9336144924163818,
        "codebertscore_f3-8": 0.9371858239173889,
        "codebertscore_f1-7": 0.8018023371696472,
        "codebertscore_f3-7": 0.7950672507286072,
        "codebertscore_f1-23": 0.7458897233009338,
        "codebertscore_f3-23": 0.7393879294395447,
        "codebertscore_f1-57": 0.7911728024482727,
        "codebertscore_f3-57": 0.7890799641609192,
        "codebertscore_f1-63": 0.8211511373519897,
        "codebertscore_f3-63": 0.8060522079467773,
        "codebertscore_f1-147": 0.8053367733955383,
        "codebertscore_f3-147": 0.7906544208526611,
        "codebertscore_f1-182": 0.7853172421455383,
        "codebertscore_f3-182": 0.7783219814300537,
        "codebertscore_f1-167": 0.9311034083366394,
        "codebertscore_f3-167": 0.934602677822113,
        "codebertscore_s_f1-193": 0.8210886120796204,
        "codebertscore_s_f3-193": 0.8016693592071533,
        "codebertscore_s_f1-28": 0.8047752976417542,
        "codebertscore_s_f3-28": 0.7893342971801758,
        "codebertscore_s_f1-6": 0.7954056859016418,
        "codebertscore_s_f3-6": 0.7862239480018616,
        "codebertscore_s_f1-75": 0.6995294094085693,
        "codebertscore_s_f3-75": 0.7065212726593018,
        "codebertscore_s_f1-66": 0.8183668255805969,
        "codebertscore_s_f3-66": 0.7971069812774658,
        "codebertscore_s_f1-61": 0.8132725358009338,
        "codebertscore_s_f3-61": 0.7933387160301208,
        "codebertscore_s_f1-35": 0.7834698557853699,
        "codebertscore_s_f3-35": 0.791710615158081,
        "codebertscore_s_f1-26": 0.8213130831718445,
        "codebertscore_s_f3-26": 0.7998215556144714,
        "codebertscore_s_f1-158": 0.815331220626831,
        "codebertscore_s_f3-158": 0.7945431470870972,
        "codebertscore_s_f1-22": 0.9307062029838562,
        "codebertscore_s_f3-22": 0.9317342042922974,
        "codebertscore_s_f1-179": 0.887324869632721,
        "codebertscore_s_f3-179": 0.9017782211303711,
        "codebertscore_s_f1-122": 0.6465811729431152,
        "codebertscore_s_f3-122": 0.627758800983429,
        "codebertscore_s_f1-8": 0.9368835091590881,
        "codebertscore_s_f3-8": 0.9408389329910278,
        "codebertscore_s_f1-7": 0.8081631064414978,
        "codebertscore_s_f3-7": 0.8009902834892273,
        "codebertscore_s_f1-23": 0.757659912109375,
        "codebertscore_s_f3-23": 0.7558624148368835,
        "codebertscore_s_f1-57": 0.7967034578323364,
        "codebertscore_s_f3-57": 0.7882413864135742,
        "codebertscore_s_f1-63": 0.8280507326126099,
        "codebertscore_s_f3-63": 0.8056268095970154,
        "codebertscore_s_f1-147": 0.808585524559021,
        "codebertscore_s_f3-147": 0.7879334092140198,
        "codebertscore_s_f1-182": 0.7864460349082947,
        "codebertscore_s_f3-182": 0.7748764157295227,
        "codebertscore_s_f1-167": 0.93852698802948,
        "codebertscore_s_f3-167": 0.9423484802246094,
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-193": 4,
        "raw_gpt35_nswr-193": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-158": 4,
        "raw_gpt35_nswr-158": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-122": 2,
        "raw_gpt35_nswr-122": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-147": 4,
        "raw_gpt35_nswr-147": "4",
        "gpt35_nswr-182": 4,
        "raw_gpt35_nswr-182": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long a, long b) {\n",
        "snippet": [
            "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n"
        ],
        "simplified": "Return a greatest common divisor of two integers a and b",
        "task_id": "13",
        "178": "if (a == 0 || b == 0) {\n\t\treturn a + b;\n\t}\n\twhile (a > 0 && b > 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t}\n\treturn a + b;",
        "grade-178": {
            "execution": 1
        },
        "29": "long temp;\n    while (b != 0) {\n        temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;",
        "grade-29": {
            "execution": 1
        },
        "6": "long m = a, n = b;\n    while (m != n) {\n        if (m > n) {\n            m = m - n;\n        } else {\n            n = n - m;\n        }\n    }\n    return m;",
        "grade-6": {
            "execution": 1
        },
        "74": "assert(a >= 0 && b >= 0);\n    while (b != 0) {\n        a %= b;\n        std::swap(a, b);\n    }\n    return a;",
        "grade-74": {
            "execution": 1
        },
        "64": "// Use Euclid's algorithm\n    while (b != 0) {\n        long remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;",
        "grade-64": {
            "execution": 1
        },
        "59": "if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    long r = a % b;\n    if (r == 0) {\n        return b;\n    }\n    return greatest_common_divisor(b, r);",
        "grade-59": {
            "execution": 1
        },
        "37": "// your code goes here\n\tif (a == 0) {\n\t\treturn b;\n\t}\n\tif (b == 0) {\n\t\treturn a;\n\t}\n\tif (a == b) {\n\t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a - b, b);\n\t}\n\treturn greatest_common_divisor(a, b - a);",
        "grade-37": {
            "execution": 1
        },
        "27": "assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return b;\n    }\n    return greatest_common_divisor(b % a, a);",
        "grade-27": {
            "execution": 1
        },
        "188": "assert(a > 0 && b > 0);\n    long shift, k;\n    if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n    for (shift = 0; ((a | b) & 1) == 0; ++shift) {\n        a >>= 1;\n        b >>= 1;\n    }\n    while ((a & 1) == 0)\n        a >>= 1;\n    do {\n        while ((b & 1) == 0)\n            b >>= 1;\n        if (a > b) {\n            long temp = a;\n            a = b;\n            b = temp;\n        }\n        b = b - a;\n    } while (b != 0);\n    return a << shift;",
        "grade-188": {
            "execution": 1
        },
        "152": "long r = 0;\n   if (a == 0) {\n      return b;\n   }\n   if (b == 0) {\n      return a;\n   }\n   while (b != 0) {\n      r = a % b;\n      a = b;\n      b = r;\n   }\n   return a;",
        "grade-152": {
            "execution": 1
        },
        "23": "if (a == 0 || b == 0) {\n        return 1;\n    }\n    a = abs(a);\n    b = abs(b);\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;",
        "grade-23": {
            "execution": 1
        },
        "165": "while (b) {\n\t\tlong c = a;\n\t\ta = b;\n\t\tb = c % b;\n\t}\n\treturn a;",
        "grade-165": {
            "execution": 1
        },
        "116": "assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a > b) return greatest_common_divisor(a % b, b);\n    else return greatest_common_divisor(a, b % a);",
        "grade-116": {
            "execution": 1
        },
        "9": "while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;",
        "grade-9": {
            "execution": 1
        },
        "7": "if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    long m = std::max(a, b);\n    long n = std::min(a, b);\n    if (m % n == 0) {\n        return n;\n    }\n    return greatest_common_divisor(n, m % n);",
        "grade-7": {
            "execution": 1
        },
        "24": "// TODO: Implement me!\n    assert(a >= 1 && b >= 1);\n    long c = b%a;\n    //long* nums = new long[2];\n    //nums[0] = a;\n    //nums[1] = b;\n    //std::sort(nums, nums+2);\n    while(c!=0){\n    \tb = a;\n    \ta = c;\n    \tc = b%a;\n    }\n    //if(c == 0)return nums[0];\n    return a;",
        "grade-24": {
            "execution": 1
        },
        "57": "long m = std::min(a, b);\n    long n = std::max(a, b);\n    while (n % m != 0) {\n        long remainder = n % m;\n        n = m;\n        m = remainder;\n    }\n    return m;",
        "grade-57": {
            "execution": 1
        },
        "61": "if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b == 0) {\n        return a;\n    }\n    else {\n        return greatest_common_divisor(b, a % b);\n    }",
        "grade-61": {
            "execution": 1
        },
        "141": "if (a == 0 || b == 0)\n        return 0;\n    else if (a == b)\n        return a;\n    else if (a > b)\n        return greatest_common_divisor(a - b, b);\n    else\n        return greatest_common_divisor(a, b - a);",
        "grade-141": {
            "execution": 1
        },
        "169": "long m = std::max(a, b);\n\tlong n = std::min(a, b);\n\tlong t = n;\n\tif (t == 0)\n\t\treturn m;\n\twhile (m % t != 0) {\n\t\tt = m % t;\n\t}\n\treturn t;",
        "grade-169": {
            "execution": 0
        },
        "bleu-178": 0.2840773697958014,
        "bleu-29": 0.23642413241573831,
        "bleu-6": 0.2049044599362573,
        "bleu-74": 0.10412075318172942,
        "bleu-64": 0.24216262895838075,
        "bleu-59": 0.37126776664574074,
        "bleu-37": 0.19602195501589872,
        "bleu-27": 0.2320549752354159,
        "bleu-188": 0.14172987566031914,
        "bleu-152": 0.39271354463734953,
        "bleu-23": 0.28030831270139855,
        "bleu-165": 0.1886622023940228,
        "bleu-116": 0.2657037144996439,
        "bleu-9": 0.18777234925593672,
        "bleu-7": 0.17454065295903437,
        "bleu-24": 0.10836848934402306,
        "bleu-57": 0.09344094711376157,
        "bleu-61": 0.4194146595720658,
        "bleu-141": 0.20920766821693576,
        "bleu-169": 0.16597257588073366,
        "codebleu-178": 0.49873991935483863,
        "codebleu-29": 0.3997834241343432,
        "codebleu-6": 0.5183131720430108,
        "codebleu-74": 0.3682814960644627,
        "codebleu-64": 0.4166731518779968,
        "codebleu-59": 0.5914511747813501,
        "codebleu-37": 0.5554435483870966,
        "codebleu-27": 0.3564180320655192,
        "codebleu-188": 0.7001161478644873,
        "codebleu-152": 0.6714492134043366,
        "codebleu-23": 0.6326444892473118,
        "codebleu-165": 0.35546306323150045,
        "codebleu-116": 0.5555271018540662,
        "codebleu-9": 0.40694261493531625,
        "codebleu-7": 0.6381888440860214,
        "codebleu-24": 0.6114751344086021,
        "codebleu-57": 0.5639280913978494,
        "codebleu-61": 0.7006425245401432,
        "codebleu-141": 0.5042899877135752,
        "codebleu-169": 0.6173555107526881,
        "chrf-178": 0.34797247212048554,
        "chrf-29": 0.3070878983085996,
        "chrf-6": 0.2729617662191644,
        "chrf-74": 0.24077882633989522,
        "chrf-64": 0.28413434348519484,
        "chrf-59": 0.33273409517865365,
        "chrf-37": 0.2666355173204712,
        "chrf-27": 0.2774222112378499,
        "chrf-188": 0.3009678298716957,
        "chrf-152": 0.4231646296441561,
        "chrf-23": 0.36762758296191755,
        "chrf-165": 0.2856539621840364,
        "chrf-116": 0.3019950335807799,
        "chrf-9": 0.27536678133583276,
        "chrf-7": 0.28350118768821714,
        "chrf-24": 0.2597850827582073,
        "chrf-57": 0.23882120815235172,
        "chrf-61": 0.34867634028444583,
        "chrf-141": 0.253299180911901,
        "chrf-169": 0.3072840259146972,
        "rougel-178": 0.411214953271028,
        "rougel-29": 0.49350649350649356,
        "rougel-6": 0.41304347826086957,
        "rougel-74": 0.35955056179775274,
        "rougel-64": 0.4390243902439025,
        "rougel-59": 0.5494505494505495,
        "rougel-37": 0.38983050847457623,
        "rougel-27": 0.4047619047619048,
        "rougel-188": 0.3482587064676617,
        "rougel-152": 0.44660194174757284,
        "rougel-23": 0.4347826086956522,
        "rougel-165": 0.5277777777777777,
        "rougel-116": 0.3853211009174312,
        "rougel-9": 0.5060240963855421,
        "rougel-7": 0.4328358208955223,
        "rougel-24": 0.32298136645962733,
        "rougel-57": 0.34951456310679613,
        "rougel-61": 0.5957446808510638,
        "rougel-141": 0.3689320388349515,
        "rougel-169": 0.36697247706422015,
        "meteor-178": 0.49675319180145666,
        "meteor-29": 0.291504730055435,
        "meteor-6": 0.368036103330221,
        "meteor-74": 0.33718542055792833,
        "meteor-64": 0.2775907250703814,
        "meteor-59": 0.47135074013157896,
        "meteor-37": 0.40758710311110125,
        "meteor-27": 0.3986112576647556,
        "meteor-188": 0.43053375196232335,
        "meteor-152": 0.4304284844483866,
        "meteor-23": 0.5226363311764883,
        "meteor-165": 0.23026315789473686,
        "meteor-116": 0.4021701748352366,
        "meteor-9": 0.44499385100331756,
        "meteor-7": 0.4960105744313425,
        "meteor-24": 0.4380683683931887,
        "meteor-57": 0.358390416452772,
        "meteor-61": 0.48439510193674024,
        "meteor-141": 0.358390416452772,
        "meteor-169": 0.3641988760926618,
        "ruby-178": 0.2033898305084746,
        "ruby-29": 0.33333333333333337,
        "ruby-6": 0.20833333333333337,
        "ruby-74": 0.16666666666666663,
        "ruby-64": 0.25,
        "ruby-59": 0.33333333333333337,
        "ruby-37": 0.2857142857142857,
        "ruby-27": 0.1875,
        "ruby-188": 0.2222222222222222,
        "ruby-152": 0.3090909090909091,
        "ruby-23": 0.25373134328358204,
        "ruby-165": 0.375,
        "ruby-116": 0.21311475409836067,
        "ruby-9": 0.35416666666666663,
        "ruby-7": 0.32558139534883723,
        "ruby-24": 0.20353982300884954,
        "ruby-57": 0.18181818181818177,
        "ruby-61": 0.29166666666666663,
        "ruby-141": 0.18181818181818177,
        "ruby-169": 0.24590163934426235,
        "codebertscore_f1-178": 0.8240726590156555,
        "codebertscore_f3-178": 0.8214515447616577,
        "codebertscore_f1-29": 0.8465939164161682,
        "codebertscore_f3-29": 0.8349241614341736,
        "codebertscore_f1-6": 0.8142932653427124,
        "codebertscore_f3-6": 0.8247848749160767,
        "codebertscore_f1-74": 0.805896520614624,
        "codebertscore_f3-74": 0.8075380325317383,
        "codebertscore_f1-64": 0.7884925007820129,
        "codebertscore_f3-64": 0.8102601766586304,
        "codebertscore_f1-59": 0.784369170665741,
        "codebertscore_f3-59": 0.8103427290916443,
        "codebertscore_f1-37": 0.7752850651741028,
        "codebertscore_f3-37": 0.7927350997924805,
        "codebertscore_f1-27": 0.7796825170516968,
        "codebertscore_f3-27": 0.7892541885375977,
        "codebertscore_f1-188": 0.7632879018783569,
        "codebertscore_f3-188": 0.8044527173042297,
        "codebertscore_f1-152": 0.8579137921333313,
        "codebertscore_f3-152": 0.8522034287452698,
        "codebertscore_f1-23": 0.8195701241493225,
        "codebertscore_f3-23": 0.8209092020988464,
        "codebertscore_f1-165": 0.8105037212371826,
        "codebertscore_f3-165": 0.7900687456130981,
        "codebertscore_f1-116": 0.7842565178871155,
        "codebertscore_f3-116": 0.793673038482666,
        "codebertscore_f1-9": 0.825605034828186,
        "codebertscore_f3-9": 0.811188280582428,
        "codebertscore_f1-7": 0.7939173579216003,
        "codebertscore_f3-7": 0.8182013630867004,
        "codebertscore_f1-24": 0.7408766150474548,
        "codebertscore_f3-24": 0.7934839129447937,
        "codebertscore_f1-57": 0.8002058267593384,
        "codebertscore_f3-57": 0.8226689696311951,
        "codebertscore_f1-61": 0.8105985522270203,
        "codebertscore_f3-61": 0.8219701647758484,
        "codebertscore_f1-141": 0.7709372639656067,
        "codebertscore_f3-141": 0.7895498275756836,
        "codebertscore_f1-169": 0.8124182224273682,
        "codebertscore_f3-169": 0.8314452767372131,
        "codebertscore_s_f1-178": 0.8271728754043579,
        "codebertscore_s_f3-178": 0.8255599141120911,
        "codebertscore_s_f1-29": 0.8466267585754395,
        "codebertscore_s_f3-29": 0.8340181708335876,
        "codebertscore_s_f1-6": 0.8085201978683472,
        "codebertscore_s_f3-6": 0.81756591796875,
        "codebertscore_s_f1-74": 0.7972865700721741,
        "codebertscore_s_f3-74": 0.8017387986183167,
        "codebertscore_s_f1-64": 0.7931944131851196,
        "codebertscore_s_f3-64": 0.8132725358009338,
        "codebertscore_s_f1-59": 0.7956234216690063,
        "codebertscore_s_f3-59": 0.8226875066757202,
        "codebertscore_s_f1-37": 0.7766314744949341,
        "codebertscore_s_f3-37": 0.7955566644668579,
        "codebertscore_s_f1-27": 0.7815871238708496,
        "codebertscore_s_f3-27": 0.789741575717926,
        "codebertscore_s_f1-188": 0.7802995443344116,
        "codebertscore_s_f3-188": 0.8215969800949097,
        "codebertscore_s_f1-152": 0.8584523797035217,
        "codebertscore_s_f3-152": 0.8525530099868774,
        "codebertscore_s_f1-23": 0.8238474726676941,
        "codebertscore_s_f3-23": 0.8239651322364807,
        "codebertscore_s_f1-165": 0.8113623261451721,
        "codebertscore_s_f3-165": 0.7869978547096252,
        "codebertscore_s_f1-116": 0.7900370359420776,
        "codebertscore_s_f3-116": 0.7994873523712158,
        "codebertscore_s_f1-9": 0.8321573138237,
        "codebertscore_s_f3-9": 0.8157782554626465,
        "codebertscore_s_f1-7": 0.8097788691520691,
        "codebertscore_s_f3-7": 0.8332769870758057,
        "codebertscore_s_f1-24": 0.7560826539993286,
        "codebertscore_s_f3-24": 0.8106452226638794,
        "codebertscore_s_f1-57": 0.805019736289978,
        "codebertscore_s_f3-57": 0.8234488368034363,
        "codebertscore_s_f1-61": 0.8260664939880371,
        "codebertscore_s_f3-61": 0.8381228446960449,
        "codebertscore_s_f1-141": 0.7769153118133545,
        "codebertscore_s_f3-141": 0.7936075329780579,
        "codebertscore_s_f1-169": 0.8090506792068481,
        "codebertscore_s_f3-169": 0.8280280232429504,
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-141": 3,
        "raw_gpt35_nsnr-141": "3",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-116": 3,
        "raw_gpt35_nswr-116": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nstd::string flip_case(std::string string) {\n",
        "snippet": [
            "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n"
        ],
        "simplified": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "task_id": "27",
        "186": "int len = string.length();\n    for(int i=0;i<len;i++){\n        if(isupper(string[i]))\n            string[i] = tolower(string[i]);\n        else\n            string[i] = toupper(string[i]);\n    }\n    return string;",
        "grade-186": {
            "execution": 1
        },
        "28": "int i = 0;\n    while(string[i] != '\\0'){\n        if(islower(string[i])){\n            string[i] = toupper(string[i]);\n        }\n        else if(isupper(string[i])){\n            string[i] = tolower(string[i]);\n        }\n        i++;\n    }\n    return string;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string result = \"\";\n  for (char c : string) {\n    if (islower(c)) {\n      result += toupper(c);\n    } else {\n      result += tolower(c);\n    }\n  }\n  return result;",
        "grade-6": {
            "execution": 1
        },
        "76": "for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z')\n\t\t\tstring[i] = string[i] - 32;\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\n\t\t\tstring[i] = string[i] + 32;\n\t}\n\treturn string;",
        "grade-76": {
            "execution": 1
        },
        "67": "std::string new_string = \"\";\n\tfor (char& i : string) {\n\t\tif (islower(i)) {\n\t\t\tnew_string += std::toupper(i);\n\t\t}\n\t\telse {\n\t\t\tnew_string += std::tolower(i);\n\t\t}\n\t}\n\treturn new_string;",
        "grade-67": {
            "execution": 1
        },
        "61": "for(int i=0; i<string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        else if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;",
        "grade-61": {
            "execution": 1
        },
        "36": "// Create a stack to store the characters\nstd::stack<char> stk;\n// Create a string to store the flipped string\nstd::string flippedString;\n\n// Push every character of input string to stack\nfor(int i=0; i<string.length(); i++)\n\tstk.push(string[i]);\n\n// Flip the case of string and store in new string\nwhile(!stk.empty())\n{\n\tif((stk.top()>='a') && (stk.top()<='z'))\n\t\tflippedString += (stk.top()-'a'+'A');\n\telse if((stk.top()>='A') && (stk.top()<='Z'))\n\t\tflippedString += (stk.top()-'A'+'a');\n\telse\n\t\tflippedString += stk.top();\n\tstk.pop();",
        "grade-36": {
            "execution": 0
        },
        "26": "for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>='a'&&string[i]<='z')\n        {\n            string[i]=string[i]-32;\n        }\n        else if(string[i]>='A'&&string[i]<='Z')\n        {\n            string[i]=string[i]+32;\n        }\n    }\n    return string;",
        "grade-26": {
            "execution": 1
        },
        "198": "for (int i = 0; i < string.length(); i++) {\n    string[i] = isupper(string[i]) ? tolower(string[i]) : toupper(string[i]);\n  }\n  return string;",
        "grade-198": {
            "execution": 1
        },
        "159": "// your code here!\n    //v1\n//     for(int i=0;i<string.length();i++){\n//         string[i]^=32;\n//     }\n//     return string;\n    //v2\n    for(int i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n            string[i]=string[i]-32;\n        }\n        else if(string[i]>='A' && string[i]<='Z'){\n            string[i]=string[i]+32;\n        }\n    }\n    return string;",
        "grade-159": {
            "execution": 1
        },
        "22": "//! Error Handling\n    if(string.empty()) {\n        std::cerr << \"String is empty\" << std::endl;\n        return \"\";\n    }\n    //! Lowercase char to uppercase\n    std::transform(string.begin(), string.end(), string.begin(), ::toupper);\n    //! Uppercase char to lowercase\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;",
        "grade-22": {
            "execution": 0
        },
        "172": "int length = string.length();\n\tchar *temp = new char[length];\n\tfor (int i = 0; i < length; i++) {\n\t\ttemp[i] = string[i];\n\t}\n\tfor (int i = 0; i < length; i++) {\n\t\tif (temp[i] >= 'a' && temp[i] <= 'z') {\n\t\t\ttemp[i] = (temp[i] - 32);\n\t\t}\n\t\telse if (temp[i] >= 'A' && temp[i] <= 'Z') {\n\t\t\ttemp[i] = (temp[i] + 32);\n\t\t}\n\t}\n\tstd::string output;\n\tfor (int i = 0; i < length; i++) {\n\t\toutput += temp[i];\n\t}\n\treturn output;",
        "grade-172": {
            "execution": 1
        },
        "124": "",
        "grade-124": {
            "execution": 0
        },
        "8": "std::string ans=\"\";\n    int i=0;\n    while(string[i]!='\\0'){\n        int n=string[i];\n        if(n>=65 && n<=90){\n            n=n+32;\n            ans=ans+(char)n;\n        }\n        else if(n>=97 && n<=122){\n            n=n-32;\n            ans=ans+(char)n;\n        }\n        else{\n            ans=ans+(char)n;\n        }\n        i++;\n    }\n    return ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "for(int i=0;i<string.length();i++)\n    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n        }\n        else if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n        }\n    }\n    return string;",
        "grade-7": {
            "execution": 1
        },
        "23": "int size = string.size();\n  for(int i = 0; i < size; i++) {\n    char c = string[i];\n    if (islower(c)) {\n      string[i] = toupper(c);\n    } else if (isupper(c)) {\n      string[i] = tolower(c);\n    }\n  }\n  return string;",
        "grade-23": {
            "execution": 1
        },
        "58": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\treturn string;",
        "grade-58": {
            "execution": 0
        },
        "63": "std::string flip_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            flip_string += std::toupper(string[i]);\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            flip_string += std::tolower(string[i]);\n        } else {\n            flip_string += string[i];\n        }\n    }\n    return flip_string;",
        "grade-63": {
            "execution": 1
        },
        "148": "for(int i=0;i<string.length();i++)\n    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n        }\n        else\n        {\n            string[i]=toupper(string[i]);\n        }\n    }\n    return string;",
        "grade-148": {
            "execution": 1
        },
        "175": "for(char &ch : string) {\n        if(isupper(ch)) {\n            ch = tolower(ch);\n        } else {\n            ch = toupper(ch);\n        }\n    }\n    return string;",
        "grade-175": {
            "execution": 1
        },
        "bleu-186": 0.24257553422354047,
        "bleu-28": 0.1596331681704657,
        "bleu-6": 0.092600141681861,
        "bleu-76": 0.26737860130366786,
        "bleu-67": 0.10306696967978263,
        "bleu-61": 0.2908817292780721,
        "bleu-36": 0.1102725152538391,
        "bleu-26": 0.2908817292780721,
        "bleu-198": 0.21242921171870546,
        "bleu-159": 0.19914993357833205,
        "bleu-22": 0.028190016767278482,
        "bleu-172": 0.1695438395499572,
        "bleu-124": 0.0,
        "bleu-8": 0.24346400984911168,
        "bleu-7": 0.28863185748482184,
        "bleu-23": 0.313578078061594,
        "bleu-58": 0.008240577093891692,
        "bleu-63": 0.24859201800001188,
        "bleu-148": 0.25494356721469325,
        "bleu-175": 0.027405706724043542,
        "codebleu-186": 0.4521054396369729,
        "codebleu-28": 0.42696455291568647,
        "codebleu-6": 0.28870459960921163,
        "codebleu-76": 0.5180104468116962,
        "codebleu-67": 0.30640169366821907,
        "codebleu-61": 0.5459314939725511,
        "codebleu-36": 0.5216601933237472,
        "codebleu-26": 0.5423508435260297,
        "codebleu-198": 0.35512248507050853,
        "codebleu-159": 0.5833505602058897,
        "codebleu-22": 0.3151709401709401,
        "codebleu-172": 0.6104214845475545,
        "codebleu-124": 0.0,
        "codebleu-8": 0.5459487309482266,
        "codebleu-7": 0.482460865199905,
        "codebleu-23": 0.5244254875517838,
        "codebleu-58": 0.14299045280423092,
        "codebleu-63": 0.5420079941564171,
        "codebleu-148": 0.45892922347502857,
        "codebleu-175": 0.23499607423807875,
        "chrf-186": 0.30823958622112163,
        "chrf-28": 0.24245368697078817,
        "chrf-6": 0.23730590162514298,
        "chrf-76": 0.35842851157807865,
        "chrf-67": 0.23628036537359876,
        "chrf-61": 0.37917540596309185,
        "chrf-36": 0.24320076228166737,
        "chrf-26": 0.37917540596309185,
        "chrf-198": 0.32214607874849155,
        "chrf-159": 0.35960248131670974,
        "chrf-22": 0.15749741004643092,
        "chrf-172": 0.36737078846491544,
        "chrf-124": 0.0,
        "chrf-8": 0.35627096098215927,
        "chrf-7": 0.3517755183494424,
        "chrf-23": 0.3540639901584346,
        "chrf-58": 0.14123020838660832,
        "chrf-63": 0.3409999984665469,
        "chrf-148": 0.3394589224973632,
        "chrf-175": 0.19441737386155097,
        "rougel-186": 0.4,
        "rougel-28": 0.3703703703703704,
        "rougel-6": 0.37593984962406013,
        "rougel-76": 0.49162011173184356,
        "rougel-67": 0.3714285714285715,
        "rougel-61": 0.5245901639344263,
        "rougel-36": 0.3175675675675676,
        "rougel-26": 0.5245901639344263,
        "rougel-198": 0.4525547445255475,
        "rougel-159": 0.4340425531914893,
        "rougel-22": 0.1752577319587629,
        "rougel-172": 0.4230769230769231,
        "rougel-124": 0,
        "rougel-8": 0.49751243781094534,
        "rougel-7": 0.47798742138364775,
        "rougel-23": 0.5125,
        "rougel-58": 0.19130434782608696,
        "rougel-63": 0.5,
        "rougel-148": 0.46979865771812085,
        "rougel-175": 0.30894308943089427,
        "meteor-186": 0.28167987679533074,
        "meteor-28": 0.2573478717026379,
        "meteor-6": 0.2578770819733585,
        "meteor-76": 0.44360819372102656,
        "meteor-67": 0.28128581481853837,
        "meteor-61": 0.5195495626117635,
        "meteor-36": 0.4266146311600857,
        "meteor-26": 0.5195495626117635,
        "meteor-198": 0.24834744862484548,
        "meteor-159": 0.5346796852323299,
        "meteor-22": 0.17628637413394918,
        "meteor-172": 0.43114396123927046,
        "meteor-124": 0.0,
        "meteor-8": 0.3665521191294387,
        "meteor-7": 0.33991786162468474,
        "meteor-23": 0.36482371794871793,
        "meteor-58": 0.10022330323376163,
        "meteor-63": 0.49059879330626494,
        "meteor-148": 0.3240141595615104,
        "meteor-175": 0.19203018867924526,
        "ruby-186": 0.29761904761904767,
        "ruby-28": 0.20238095238095233,
        "ruby-6": 0.23809523809523814,
        "ruby-76": 0.3263157894736842,
        "ruby-67": 0.25,
        "ruby-61": 0.36363636363636365,
        "ruby-36": 0.21226415094339623,
        "ruby-26": 0.36363636363636365,
        "ruby-198": 0.3571428571428571,
        "ruby-159": 0.3112582781456954,
        "ruby-22": 0.08181818181818179,
        "ruby-172": 0.28409090909090906,
        "ruby-124": 0.0,
        "ruby-8": 0.37606837606837606,
        "ruby-7": 0.36904761904761907,
        "ruby-23": 0.38095238095238093,
        "ruby-58": 0.13095238095238093,
        "ruby-63": 0.3833333333333333,
        "ruby-148": 0.36904761904761907,
        "ruby-175": 0.2142857142857143,
        "codebertscore_f1-186": 0.8069161772727966,
        "codebertscore_f3-186": 0.7802544236183167,
        "codebertscore_f1-28": 0.7692843079566956,
        "codebertscore_f3-28": 0.7483821511268616,
        "codebertscore_f1-6": 0.7607038617134094,
        "codebertscore_f3-6": 0.745352029800415,
        "codebertscore_f1-76": 0.8327271342277527,
        "codebertscore_f3-76": 0.8177822828292847,
        "codebertscore_f1-67": 0.746572732925415,
        "codebertscore_f3-67": 0.746893048286438,
        "codebertscore_f1-61": 0.8312432169914246,
        "codebertscore_f3-61": 0.8170439004898071,
        "codebertscore_f1-36": 0.7110443115234375,
        "codebertscore_f3-36": 0.7529513835906982,
        "codebertscore_f1-26": 0.8307665586471558,
        "codebertscore_f3-26": 0.8174705505371094,
        "codebertscore_f1-198": 0.7763551473617554,
        "codebertscore_f3-198": 0.7382632493972778,
        "codebertscore_f1-159": 0.7805044651031494,
        "codebertscore_f3-159": 0.7876596450805664,
        "codebertscore_f1-22": 0.6791220307350159,
        "codebertscore_f3-22": 0.6790964007377625,
        "codebertscore_f1-172": 0.820764422416687,
        "codebertscore_f3-172": 0.8220170140266418,
        "codebertscore_f1-124": 0.0,
        "codebertscore_f3-124": 0.0,
        "codebertscore_f1-8": 0.8415931463241577,
        "codebertscore_f3-8": 0.8510013818740845,
        "codebertscore_f1-7": 0.7870322465896606,
        "codebertscore_f3-7": 0.7685791254043579,
        "codebertscore_f1-23": 0.8084502816200256,
        "codebertscore_f3-23": 0.7958624958992004,
        "codebertscore_f1-58": 0.6658206582069397,
        "codebertscore_f3-58": 0.6346679925918579,
        "codebertscore_f1-63": 0.7924890518188477,
        "codebertscore_f3-63": 0.7944787740707397,
        "codebertscore_f1-148": 0.799217939376831,
        "codebertscore_f3-148": 0.7763665318489075,
        "codebertscore_f1-175": 0.7320504784584045,
        "codebertscore_f3-175": 0.7175112366676331,
        "codebertscore_s_f1-186": 0.8073190450668335,
        "codebertscore_s_f3-186": 0.7788861393928528,
        "codebertscore_s_f1-28": 0.7755167484283447,
        "codebertscore_s_f3-28": 0.7548115849494934,
        "codebertscore_s_f1-6": 0.7579578757286072,
        "codebertscore_s_f3-6": 0.7436633110046387,
        "codebertscore_s_f1-76": 0.8356701135635376,
        "codebertscore_s_f3-76": 0.8219789862632751,
        "codebertscore_s_f1-67": 0.7455617189407349,
        "codebertscore_s_f3-67": 0.7464656233787537,
        "codebertscore_s_f1-61": 0.8370053172111511,
        "codebertscore_s_f3-61": 0.8241533637046814,
        "codebertscore_s_f1-36": 0.7182721495628357,
        "codebertscore_s_f3-36": 0.7603884339332581,
        "codebertscore_s_f1-26": 0.8385076522827148,
        "codebertscore_s_f3-26": 0.826930046081543,
        "codebertscore_s_f1-198": 0.7743721604347229,
        "codebertscore_s_f3-198": 0.7351750731468201,
        "codebertscore_s_f1-159": 0.791938066482544,
        "codebertscore_s_f3-159": 0.8016883730888367,
        "codebertscore_s_f1-22": 0.6733547449111938,
        "codebertscore_s_f3-22": 0.6753339767456055,
        "codebertscore_s_f1-172": 0.8266090750694275,
        "codebertscore_s_f3-172": 0.8288194537162781,
        "codebertscore_s_f1-124": 0,
        "codebertscore_s_f3-124": 0,
        "codebertscore_s_f1-8": 0.8476867079734802,
        "codebertscore_s_f3-8": 0.8568932414054871,
        "codebertscore_s_f1-7": 0.793376088142395,
        "codebertscore_s_f3-7": 0.7758797407150269,
        "codebertscore_s_f1-23": 0.8081731796264648,
        "codebertscore_s_f3-23": 0.7943985462188721,
        "codebertscore_s_f1-58": 0.648613691329956,
        "codebertscore_s_f3-58": 0.6221388578414917,
        "codebertscore_s_f1-63": 0.7934846878051758,
        "codebertscore_s_f3-63": 0.795036792755127,
        "codebertscore_s_f1-148": 0.8015459775924683,
        "codebertscore_s_f3-148": 0.7785188555717468,
        "codebertscore_s_f1-175": 0.7368108630180359,
        "codebertscore_s_f3-175": 0.7237573266029358,
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-124": 3,
        "raw_gpt35_nsnr-124": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-67": 4,
        "raw_gpt35_nswr-67": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4",
        "gpt35_nswr-124": 3,
        "raw_gpt35_nswr-124": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n",
        "snippet": [
            "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n"
        ],
        "simplified": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "task_id": "76",
        "163": "if (x == 1) return true;\n  int count = 0;\n  if (x % n != 0) {\n    return false;\n  }\n  long power = n;\n  while (x > 1) {\n    if (x % n != 0) {\n      return false;\n    }\n    count++;\n    x /= n;\n  }\n  if (power == n) {\n    return true;\n  }\n  return false;",
        "grade-163": {
            "execution": 1
        },
        "28": "if (n == 1 && x == 1) {\n    return true;\n  }\n  if (n == 1 && x != 1) {\n    return false;\n  }\n  long exponent = 2;\n  long result = n * n;\n  while (result <= x) {\n    if (result == x) {\n      return true;\n    }\n    result *= n;\n    exponent++;\n  }\n  return false;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Write your code here\n    if(x==1)\n        return true;\n    long k = n;\n    for(int i=1; i<x; i++)\n    {\n        k = k*n;\n        if(k==x)\n            return true;\n    }\n    return false;",
        "grade-6": {
            "execution": 1
        },
        "189": "if (x <= 0 || n <= 0) {\n        return false;\n    }\n    double log_n = log(x) / log(n);\n    if (log_n - (int)log_n == 0) {\n        return true;\n    }\n    return false;",
        "grade-189": {
            "execution": 0
        },
        "70": "long p = n;\n  while (p < x) p *= n;\n  return p == x;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (x < 0 || n < 0) return false;\n    if (x == 1) return true;\n    if (n == 1) return false;\n    double tmp = std::log(x) / std::log(n);\n    if (tmp == (int)tmp) return true;\n    return false;",
        "grade-62": {
            "execution": 1
        },
        "57": "// your code here\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    double lg=log(x)/log(n);\n    if(floor(lg)==ceil(lg))\n        return true;\n    return false;",
        "grade-57": {
            "execution": 1
        },
        "35": "if (x == 1) {\n\t\treturn true;\n\t}\n\tlong power = n;\n\tif (x == n) {\n\t\treturn true;\n\t}\n\twhile (power < x) {\n\t\tpower *= n;\n\t\tif (power == x) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-35": {
            "execution": 1
        },
        "188": "if (x == 1) {\n        return true;\n    }\n    for (long i = 0; i < x; i++) {\n        double temp = std::pow(n, i);\n        if (temp == x) {\n            return true;\n        }\n    }\n    return false;",
        "grade-188": {
            "execution": 1
        },
        "26": "return (x == 1 || (x > 1 && x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n",
        "grade-26": {
            "execution": 0
        },
        "173": "if (x == 1) return true;\n    int nn = 0;\n    while (x % n == 0) {\n        nn++;\n        x /= n;\n    }\n    if (x != 1) return false;\n    if (nn > 1) return false;\n    return true;",
        "grade-173": {
            "execution": 0
        },
        "139": "if (x==1 && n==1) {\n        return true;\n    } else if (x==1) {\n        return false;\n    } else if (n==1) {\n        return false;\n    } else {\n        double d = log(x)/log(n);\n        std::cout << d << std::endl;\n        std::cout << d - floor(d) << std::endl;\n        return d - floor(d) == 0;\n    }",
        "grade-139": {
            "execution": 0
        },
        "22": "double y = log2(x)/log2(n);\n    int z = (int)y;\n    if (z == y){\n        return true;\n    }\n    return false;",
        "grade-22": {
            "execution": 0
        },
        "151": "int i = 1;\n  while (std::pow(n, i) <= x) {\n    if (std::pow(n, i) == x) {\n      return true;\n    }\n    i++;\n  }\n  return false;",
        "grade-151": {
            "execution": 0
        },
        "108": "long power = 0;\n  if (x == 1) {\n    return true;\n  }\n  for (; pow(n, power) <= x; ++power) {\n    if (pow(n, power) == x) {\n      return true;\n    }\n  }\n  return false;",
        "grade-108": {
            "execution": 1
        },
        "8": "if (x == 1 && n == 1) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n  }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x / n, n);",
        "grade-8": {
            "execution": 0
        },
        "7": "double d = x;\n  int c = 0;\n  while(d > 1) {\n    d = d / n;\n    c++;\n  }\n  if(d == 1) {\n    return true;\n  }\n  return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (x == 1 && n == 1) {\n\t\treturn true;\n\t}\n\tif (x == 1 && n != 1) {\n\t\treturn false;\n\t}\n\tint res = 0;\n\twhile (n > 1) {\n\t\tint y = log(x) / log(n);\n\t\tif (y * log(n) == log(x)) {\n\t\t\treturn true;\n\t\t}\n\t\tn--;\n\t}\n\treturn false;",
        "grade-23": {
            "execution": 0
        },
        "55": "for (long i = 2; i < x; i++) {\n        int count = 0;\n        while (x % i == 0) {\n            x /= i;\n            count++;\n        }\n        if (n == i && count == 1)\n            return true;\n    }\n    return false;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (n == 1) {\n    return x == 1;\n  }\n  long a = n;\n  while (a <= x) {\n    if (a == x) {\n      return true;\n    }\n    a *= n;\n  }\n  return false;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.1867819445107643,
        "bleu-28": 0.17963747679246034,
        "bleu-6": 0.24223266348776867,
        "bleu-189": 0.17370158695252103,
        "bleu-70": 0.11885176490296766,
        "bleu-62": 0.08115521673757929,
        "bleu-57": 0.09185887244480377,
        "bleu-35": 0.14881900797912184,
        "bleu-188": 0.155759203160423,
        "bleu-26": 0.0028993511588372846,
        "bleu-173": 0.17657563775993831,
        "bleu-139": 0.0634799350811646,
        "bleu-22": 0.13838410992723305,
        "bleu-151": 0.2627712318955568,
        "bleu-108": 0.20332669634850775,
        "bleu-8": 0.12103068379747921,
        "bleu-7": 0.24010000365325976,
        "bleu-23": 0.13988885565179057,
        "bleu-55": 0.23925529906298762,
        "bleu-59": 0.2984055382164659,
        "codebleu-163": 0.5349176936915229,
        "codebleu-28": 0.5444651741293531,
        "codebleu-6": 0.4849191542288557,
        "codebleu-189": 0.417910447761194,
        "codebleu-70": 0.23364257457739004,
        "codebleu-62": 0.45461247043169895,
        "codebleu-57": 0.40003109452736313,
        "codebleu-35": 0.4640858208955223,
        "codebleu-188": 0.4824315920398009,
        "codebleu-26": 0.2818718905472637,
        "codebleu-173": 0.4949887885860632,
        "codebleu-139": 0.4541355721393034,
        "codebleu-22": 0.3746144624872455,
        "codebleu-151": 0.4457400497512437,
        "codebleu-108": 0.44620646766169153,
        "codebleu-8": 0.4020522388059701,
        "codebleu-7": 0.48445273631840785,
        "codebleu-23": 0.5052860696517412,
        "codebleu-55": 0.5277562494717357,
        "codebleu-59": 0.4536691542288557,
        "chrf-163": 0.44831644613599136,
        "chrf-28": 0.3772111955429601,
        "chrf-6": 0.3816384268663056,
        "chrf-189": 0.3397055715893721,
        "chrf-70": 0.19582671660695553,
        "chrf-62": 0.3125166326089677,
        "chrf-57": 0.3019201328543957,
        "chrf-35": 0.37118745489763755,
        "chrf-188": 0.34717339886810206,
        "chrf-26": 0.040584911843991246,
        "chrf-173": 0.38434588550692234,
        "chrf-139": 0.29555360718327506,
        "chrf-22": 0.32676425283027216,
        "chrf-151": 0.402803750418319,
        "chrf-108": 0.3554955761338839,
        "chrf-8": 0.3329479897809818,
        "chrf-7": 0.40580861992131756,
        "chrf-23": 0.37429109182715165,
        "chrf-55": 0.5186324719919934,
        "chrf-59": 0.4096774213365128,
        "rougel-163": 0.4094488188976378,
        "rougel-28": 0.453125,
        "rougel-6": 0.4230769230769231,
        "rougel-189": 0.38775510204081626,
        "rougel-70": 0.46376811594202894,
        "rougel-62": 0.3448275862068965,
        "rougel-57": 0.3653846153846153,
        "rougel-35": 0.4423076923076923,
        "rougel-188": 0.4230769230769231,
        "rougel-26": 0.028520499108734405,
        "rougel-173": 0.40384615384615385,
        "rougel-139": 0.2913907284768212,
        "rougel-22": 0.38554216867469876,
        "rougel-151": 0.5416666666666667,
        "rougel-108": 0.4271844660194175,
        "rougel-8": 0.36,
        "rougel-7": 0.4444444444444445,
        "rougel-23": 0.3676470588235294,
        "rougel-55": 0.40740740740740744,
        "rougel-59": 0.5625,
        "meteor-163": 0.4540836612975211,
        "meteor-28": 0.5288272333726879,
        "meteor-6": 0.5428975423177083,
        "meteor-189": 0.4047188495651425,
        "meteor-70": 0.2567696629213484,
        "meteor-62": 0.41129177958446256,
        "meteor-57": 0.3664833333333334,
        "meteor-35": 0.5139503121748179,
        "meteor-188": 0.5077209472656249,
        "meteor-26": 0.09671430285501381,
        "meteor-173": 0.41856892903645826,
        "meteor-139": 0.3311881078036053,
        "meteor-22": 0.3480437170276742,
        "meteor-151": 0.42871939736346515,
        "meteor-108": 0.4774623684879399,
        "meteor-8": 0.36340041367319814,
        "meteor-7": 0.5293908794933745,
        "meteor-23": 0.4476763372359964,
        "meteor-55": 0.6318329721278124,
        "meteor-59": 0.49614340572033894,
        "ruby-163": 0.2875,
        "ruby-28": 0.308641975308642,
        "ruby-6": 0.21052631578947367,
        "ruby-189": 0.17647058823529416,
        "ruby-70": 0.34042553191489366,
        "ruby-62": 0.21739130434782605,
        "ruby-57": 0.17543859649122806,
        "ruby-35": 0.24561403508771928,
        "ruby-188": 0.22807017543859653,
        "ruby-26": 0.009727626459143934,
        "ruby-173": 0.24561403508771928,
        "ruby-139": 0.1923076923076923,
        "ruby-22": 0.276595744680851,
        "ruby-151": 0.2857142857142857,
        "ruby-108": 0.1964285714285714,
        "ruby-8": 0.15094339622641506,
        "ruby-7": 0.25531914893617025,
        "ruby-23": 0.2247191011235955,
        "ruby-55": 0.2622950819672131,
        "ruby-59": 0.34693877551020413,
        "codebertscore_f1-163": 0.8316733241081238,
        "codebertscore_f3-163": 0.823950469493866,
        "codebertscore_f1-28": 0.8132842779159546,
        "codebertscore_f3-28": 0.8040392994880676,
        "codebertscore_f1-6": 0.8157141208648682,
        "codebertscore_f3-6": 0.8226985335350037,
        "codebertscore_f1-189": 0.767973780632019,
        "codebertscore_f3-189": 0.7609087824821472,
        "codebertscore_f1-70": 0.8303318619728088,
        "codebertscore_f3-70": 0.7892347574234009,
        "codebertscore_f1-62": 0.7890703678131104,
        "codebertscore_f3-62": 0.7798831462860107,
        "codebertscore_f1-57": 0.7685952186584473,
        "codebertscore_f3-57": 0.7676122188568115,
        "codebertscore_f1-35": 0.8407186269760132,
        "codebertscore_f3-35": 0.8146893978118896,
        "codebertscore_f1-188": 0.7995561957359314,
        "codebertscore_f3-188": 0.792742908000946,
        "codebertscore_f1-26": 0.577465295791626,
        "codebertscore_f3-26": 0.6302868127822876,
        "codebertscore_f1-173": 0.819442629814148,
        "codebertscore_f3-173": 0.8086663484573364,
        "codebertscore_f1-139": 0.7278913259506226,
        "codebertscore_f3-139": 0.7567465305328369,
        "codebertscore_f1-22": 0.7944138646125793,
        "codebertscore_f3-22": 0.7867181301116943,
        "codebertscore_f1-151": 0.8353524804115295,
        "codebertscore_f3-151": 0.8313950300216675,
        "codebertscore_f1-108": 0.832202136516571,
        "codebertscore_f3-108": 0.817065417766571,
        "codebertscore_f1-8": 0.8000600337982178,
        "codebertscore_f3-8": 0.7813001275062561,
        "codebertscore_f1-7": 0.8544626235961914,
        "codebertscore_f3-7": 0.8465801477432251,
        "codebertscore_f1-23": 0.8136653304100037,
        "codebertscore_f3-23": 0.817488431930542,
        "codebertscore_f1-55": 0.8349299430847168,
        "codebertscore_f3-55": 0.8439825773239136,
        "codebertscore_f1-59": 0.8398467302322388,
        "codebertscore_f3-59": 0.8168867826461792,
        "codebertscore_s_f1-163": 0.845971405506134,
        "codebertscore_s_f3-163": 0.8373124003410339,
        "codebertscore_s_f1-28": 0.8218109011650085,
        "codebertscore_s_f3-28": 0.8115212321281433,
        "codebertscore_s_f1-6": 0.8236802816390991,
        "codebertscore_s_f3-6": 0.8301364183425903,
        "codebertscore_s_f1-189": 0.7788084745407104,
        "codebertscore_s_f3-189": 0.7727468013763428,
        "codebertscore_s_f1-70": 0.818439781665802,
        "codebertscore_s_f3-70": 0.7756951451301575,
        "codebertscore_s_f1-62": 0.7962735295295715,
        "codebertscore_s_f3-62": 0.7856465578079224,
        "codebertscore_s_f1-57": 0.7708754539489746,
        "codebertscore_s_f3-57": 0.7689557075500488,
        "codebertscore_s_f1-35": 0.8508396744728088,
        "codebertscore_s_f3-35": 0.8249266147613525,
        "codebertscore_s_f1-188": 0.8139244318008423,
        "codebertscore_s_f3-188": 0.8042271137237549,
        "codebertscore_s_f1-26": 0.6381189227104187,
        "codebertscore_s_f3-26": 0.674252450466156,
        "codebertscore_s_f1-173": 0.830610990524292,
        "codebertscore_s_f3-173": 0.8191853165626526,
        "codebertscore_s_f1-139": 0.7437570691108704,
        "codebertscore_s_f3-139": 0.7733086347579956,
        "codebertscore_s_f1-22": 0.7896597385406494,
        "codebertscore_s_f3-22": 0.780461311340332,
        "codebertscore_s_f1-151": 0.8326221704483032,
        "codebertscore_s_f3-151": 0.8307600021362305,
        "codebertscore_s_f1-108": 0.8331246376037598,
        "codebertscore_s_f3-108": 0.8181686997413635,
        "codebertscore_s_f1-8": 0.8056604862213135,
        "codebertscore_s_f3-8": 0.7875345349311829,
        "codebertscore_s_f1-7": 0.8528252840042114,
        "codebertscore_s_f3-7": 0.8453733325004578,
        "codebertscore_s_f1-23": 0.8244267702102661,
        "codebertscore_s_f3-23": 0.8275308012962341,
        "codebertscore_s_f1-55": 0.8470653891563416,
        "codebertscore_s_f3-55": 0.8541589975357056,
        "codebertscore_s_f1-59": 0.8443841338157654,
        "codebertscore_s_f3-59": 0.8188602328300476,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n// Output: [1]\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n",
        "snippet": [
            "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n"
        ],
        "simplified": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
        "task_id": "129",
        "169": "int n = grid.size();\n    long start = grid[0][0];\n    std::priority_queue<std::vector<long>, std::vector<std::vector<long>>, std::greater<std::vector<long>>> q;\n    std::set<long> visited;\n    std::vector<long> result;\n    std::vector<std::vector<long>> offsets = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    std::vector<long> elem = {start, 0, 0, 0};\n    q.push(elem);\n    while (!q.empty()) {\n        std::vector<long> curr = q.top();\n        q.pop();\n        long val = curr[0];\n        long len = curr[1];\n        long x = curr[2];\n        long y = curr[3];\n        if (len == k) {\n            result.push_back(val);\n            break;\n        }\n        for (int i = 0; i < offsets.size(); i++) {\n            long next_x = x + offsets[i][0];\n            long next_y = y + offsets[i][1];\n            if (next_x >= 0 && next_x < n && next_y >= 0 && next_y < n) {\n                long next_val = grid[next_x][next_y];\n                if (visited.find(next_val) == visited.end()) {\n                    std::vector<long> next_elem = {next_val, len + 1, next_x, next_y};\n                    q.push(next_elem);\n                    visited.insert(next_val);\n                }\n            }\n        }\n    }\n    return result;",
        "grade-169": {
            "execution": 0
        },
        "29": "// Write your code here\n  int n = grid.size();\n  assert(n >= 2);\n  for (int i = 0; i < n; i++) {\n    assert(grid[i].size() == n);\n  }\n  std::vector<std::vector<std::vector<long>>> memo(n,\n                                                   std::vector<std::vector<long>>(n,\n                                                                                  std::vector<long>(k + 1, -1)));\n  long answer = INT_MAX;\n  std::vector<long> ret;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      std::vector<long> temp;\n      dfs(grid, memo, temp, i, j, n, k, 0, answer, ret);\n    }\n  }\n  return ret;",
        "grade-29": {
            "execution": 0
        },
        "6": "// initialize data structures\n  std::vector<long> v;\n  std::vector<std::vector<long>> G;\n  for (long i = 0; i < grid.size(); i++) {\n    G.push_back(std::vector<long>());\n    for (long j = 0; j < grid[i].size(); j++) {\n      G[i].push_back(0);\n    }\n  }\n  // create adjacency matrix G\n  for (long i = 0; i < grid.size(); i++) {\n    for (long j = 0; j < grid[i].size(); j++) {\n      // same row left\n      if (j > 0) {\n        G[i][j] += (grid[i][j] == grid[i][j-1]) ? 1 : 0;\n      }\n      // same row right\n      if (j < grid[i].size() - 1) {\n        G[i][j] += (grid[i][j] == grid[i][j+1]) ? 1 : 0;\n      }\n      // same column up\n      if (i > 0) {\n        G[i][j] += (grid[i][j] == grid[i-1][j]) ? 1 : 0;\n      }\n      // same column down\n      if (i < grid.size() - 1) {\n        G[i][j] += (grid[i][j] == grid[i+1][j]) ? 1 : 0;\n      }\n    }\n  }\n  // now need to use adjacency matrix and BFS to find min cost path of length k\n  // store std::queue<std::vector<long>> that holds the paths\n  std::queue<std::vector<long>> paths;\n  // start with each node (i, j) in grid and a path of one node\n  for (long i = 0; i < grid.size(); i++) {\n    for (long j = 0; j < grid[i].size(); j++) {\n      paths.push(std::vector<long>{grid[i][j]});\n    }\n  }\n  // BFS\n  while (!paths.empty()) {",
        "grade-6": {
            "execution": 0
        },
        "196": "std::vector<long> v = {};\n    long i, j;\n    for(i = 0; i < grid.size(); i++) {\n        for(j = 0; j < grid[i].size(); j++) {\n            if(k == 1) {\n                v.push_back(grid[i][j]);\n                break;\n            }\n            if(i > 0 && grid[i-1][j] < grid[i][j]) {\n                if(grid[i-1][j] < grid[i+1][j]) {\n                    v.push_back(grid[i-1][j]);\n                    i = i-1;\n                }\n                else {\n                    v.push_back(grid[i+1][j]);\n                    i = i+1;\n                }\n            }\n            else if(j > 0 && grid[i][j-1] < grid[i][j]) {\n                if(grid[i][j-1] < grid[i][j+1]) {\n                    v.push_back(grid[i][j-1]);\n                    j = j-1;\n                }\n                else {\n                    v.push_back(grid[i][j+1]);\n                    j = j+1;\n                }\n            }\n            else if(i < grid.size()-1 && grid[i+1][j] < grid[i][j]) {\n                if(grid[i+1][j] < grid[i-1][j]) {\n                    v.push_back(grid[i+1][j]);\n                    i = i+1;\n                }\n                else {\n                    v.push_back(grid[i-1][j]);\n                    i = i-1;\n                }\n            }\n            else if(j < grid[i].size()-1 && grid[i][j+1] < grid[i][j]) {\n                if(grid[i][j+1] < grid[i][j-1]) {\n                    v.push_back(grid[i][j+1]);\n                    j = j+1;\n                }\n                else {\n                    v.push_back(grid[i][j-",
        "grade-196": {
            "execution": 0
        },
        "71": "long n = grid.size();\n    std::vector<std::vector<std::vector<long>>> dp(k+1, std::vector<std::vector<long>>(n, std::vector<long>(n, INT_MAX)));\n    dp[0][0][0] = grid[0][0];\n    for(long idx = 1; idx <= k; idx++) {\n        for(long row = 0; row < n; row++) {\n            for(long col = 0; col < n; col++) {\n                if(row > 0) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row-1][col]);\n                }\n                if(row < n-1) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row+1][col]);\n                }\n                if(col > 0) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row][col-1]);\n                }\n                if(col < n-1) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row][col+1]);\n                }\n                dp[idx][row][col] += grid[row][col];\n            }\n        }\n    }\n    std::vector<long> result;\n    long row = 0, col = 0;\n    result.push_back(grid[0][0]);\n    for(long idx = 1; idx <= k; idx++) {\n        std::vector<std::vector<long>> temp = dp[idx];\n        if(row > 0 && temp[row-1][col] == dp[idx][row][col] - grid[row][col]) {\n            row--;\n        } else if(row < n-1 && temp[row+1][col] == dp[idx][row][col]",
        "grade-71": {
            "execution": 0
        },
        "63": "// Implement the solution here.\n  // Make sure to return the result in the specified format.\n  std::vector<long> ret;\n  return ret;",
        "grade-63": {
            "execution": 0
        },
        "58": "// backtracking\n    int N = grid.size();\n    long n = N * N;\n    std::vector<std::vector<bool>> visited(N, std::vector<bool>(N, false));\n    std::vector<long> result(k, 0);\n    long min_path = INT_MAX;\n    long min_index = INT_MAX;\n    std::vector<std::vector<long>> dirs = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};\n    long dfs(long r, long c, long i, long path, long index) {\n        if (i == k) {\n            if (path < min_path) {\n                min_path = path;\n                min_index = index;\n                for (int j = 0; j < k; j++) {\n                    result[j] = grid[r - j][c];\n                }\n            } else if (path == min_path) {\n                bool success = true;\n                long j = k - 1;\n                while (j >= 0) {\n                    if (grid[r - j][c] < result[j]) {\n                        for (int x = 0; x < k; x++) {\n                            result[x] = grid[r - x][c];\n                        }\n                        min_index = index;\n                        break;\n                    } else if (grid[r - j][c] > result[j]) {\n                        success = false;\n                        break;\n                    }\n                    j--;\n                }\n                if (success) {\n                    if (index < min_index) {\n                        for (int x = 0; x < k; x++) {\n                            result[x] = grid[r - x][c];\n                        }\n                        min_index = index;\n                    }\n                }\n            }\n            return INT_MAX;\n        }\n        long temp = INT_MAX;\n        for (int j = 0; j < 4; j++) {\n            long nr = r + dirs[j][0];\n            long nc = c + dirs[j][1];\n            if (nr >= 0 && nr < N && nc >= 0 &&",
        "grade-58": {
            "execution": 0
        },
        "36": "std::vector<long> dp[grid.size() + 1][grid[0].size() + 1][k + 1];\n\t// for (long i = 0; i < grid.size() + 1; i++) {\n\t// \tfor (long j = 0; j < grid[0].size() + 1; j++) {\n\t// \t\tfor (long p = 0; p < k + 1; p++) {\n\t// \t\t\tstd::vector<long> temp;\n\t// \t\t\tdp[i][j][p] = temp;\n\t// \t\t}\n\t// \t}\n\t// }\n\tdp[1][1][0].push_back(grid[0][0]);\n\tfor (long i = 1; i < grid.size() + 1; i++) {\n\t\tfor (long j = 1; j < grid[0].size() + 1; j++) {\n\t\t\tfor (long p = 0; p < k + 1; p++) {\n\t\t\t\tif (p == 0) {\n\t\t\t\t\tstd::vector<long> temp;\n\t\t\t\t\ttemp.push_back(grid[i - 1][j - 1]);\n\t\t\t\t\tdp[i][j][p] = temp;\n\t\t\t\t} else {\n\t\t\t\t\tstd::vector<long> temp = dp[i - 1][j][p - 1];\n\t\t\t\t\ttemp.push_back(grid[i - 1][j - 1]);\n\t\t\t\t\tif (dp[i][j][p].empty() || temp < dp[i][j][p]) {\n\t\t\t\t\t\tdp[i][j][p] = temp;\n\t\t\t\t\t}\n\t\t\t\t\ttemp = dp[i][j - 1][p - 1];\n\t\t\t\t\ttemp.push_back(grid[i - 1][j - 1]);\n\t\t\t\t\tif (dp[i][j][p].empty() || temp < dp[i][j][p]) {\n\t\t\t\t\t\tdp[i][j][p] = temp;",
        "grade-36": {
            "execution": 0
        },
        "195": "// Write your code here\n    int rows = grid.size();\n    int cols = grid[0].size();\n    std::vector<std::vector<long>> dp(rows, std::vector<long>(cols, 0));\n    std::vector<std::vector<int>> visited(rows, std::vector<int>(cols, 0));\n    std::vector<std::vector<std::vector<long>>> v(rows, std::vector<std::vector<long>>(cols, std::vector<long>()));\n    for(int i = 0; i < rows; i++){\n        for(int j = 0; j < cols; j++){\n            v[i][j].push_back(grid[i][j]);\n        }\n    }\n    // std::cout << \"v start: \" << std::endl;\n    // for(int i = 0; i < rows; i++){\n    //     for(int j = 0; j < cols; j++){\n    //         for(int n = 0; n < v[i][j].size(); n++){\n    //             std::cout << v[i][j][n] << \" \";\n    //         }\n    //         std::cout << std::endl;\n    //     }\n    // }\n    // std::cout << \"v end: \" << std::endl;\n    for(int i = 0; i < rows; i++){\n        for(int j = 0; j < cols; j++){\n            if(i == 0 && j == 0){\n                dp[i][j] = grid[i][j];\n            }\n            else if(i == 0){\n                dp[i][j] = dp[i][j-1] + grid[i][j];\n            }\n            else if(j == 0){\n                dp[i][j] = dp[i-1][j] + grid[i][j];\n            }\n            else{\n                dp[i][j] = std::min(dp[i-1][j], dp[i][j-1]) + grid[i][j];",
        "grade-195": {
            "execution": 0
        },
        "27": "// calculate the number of rows and columns in the grid\n    long n = grid.size();\n    assert(n >= 2);\n    assert(grid[0].size() == n);\n    // create an ordered list of all the values on the grid\n    std::vector<long> all_vals(n * n);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            all_vals[i * n + j] = grid[i][j];\n        }\n    }\n    // sort the list of values\n    std::sort(all_vals.begin(), all_vals.end());\n    // create a matrix that stores the minimum path of length k from cell i, j\n    // with value v\n    std::vector<std::vector<std::vector<long>>> mat(n);\n    for (long i = 0; i < n; i++) {\n        mat[i].resize(n);\n        for (long j = 0; j < n; j++) {\n            mat[i][j].resize(n * n + 1);\n        }\n    }\n    // initialise the matrix with -1\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            for (long v = 0; v <= n * n; v++) {\n                mat[i][j][v] = -1;\n            }\n        }\n    }\n    // using the matrix, do a simple dynamic programming approach\n    // visit all the cells in the grid and find the minimum path of length k\n    // from them\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            // find the value of the cell at i, j\n            long val = grid[i][j];\n            // check whether we can start at this cell or not\n            if (k > 0) {\n                // find the index of the current value in the ordered list\n                // of values\n                long index = std::lower_bound(all_vals.begin(), all_vals.end(), val) - all_vals",
        "grade-27": {
            "execution": 0
        },
        "179": "// Implement this placeholder.\n    return {};",
        "grade-179": {
            "execution": 0
        },
        "143": "long n = grid.size();\n    std::vector<std::vector<std::vector<long>>> dp(n, std::vector<std::vector<long>>(n, std::vector<long>(k + 1, INT_MAX)));\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            dp[i][j][1] = grid[i][j];\n        }\n    }\n    for (long i = 1; i <= k; i++) {\n        for (long x = 0; x < n; x++) {\n            for (long y = 0; y < n; y++) {\n                for (long d = 0; d < 8; d++) {\n                    long nx = x + \"2101\"[d] - '1';\n                    long ny = y + \"1210\"[d] - '1';\n                    if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;\n                    if (dp[nx][ny][i - 1] == INT_MAX) continue;\n                    dp[x][y][i] = std::min(dp[x][y][i], dp[nx][ny][i - 1] * 10 + grid[x][y]);\n                }\n            }\n        }\n    }\n    std::vector<long> ans;\n    for (long x = 0; x < n; x++) {\n        for (long y = 0; y < n; y++) {\n            if (dp[x][y][k] == INT_MAX) continue;\n            if (ans.empty() || dp[x][y][k] < ans[0]) {\n                ans.clear();\n                long cur = dp[x][y][k];\n                for (long i = k; i >= 1; i--) {\n                    ans.push_back(cur % 10);\n                    cur /= 10;\n                }\n            }\n        }\n    }\n    return ans;",
        "grade-143": {
            "execution": 0
        },
        "23": "int n = grid.size();\n  int m = grid[0].size();\n  struct Node{\n    int i, j, l;\n    Node(int i, int j, int l): i(i), j(j), l(l) {}\n    bool operator<(const Node& other) const {\n      if (l != other.l) return l < other.l;\n      if (i != other.i) return i < other.i;\n      return j < other.j;\n    }\n  };\n  std::vector<std::vector<std::vector<std::pair<int, int>>>> prev(n, std::vector<std::vector<std::pair<int, int>>>(m, std::vector<std::pair<int, int>>(k + 1, {-1, -1})));\n  std::vector<std::vector<std::vector<long>>> dist(n, std::vector<std::vector<long>>(m, std::vector<long>(k + 1, INT_MAX)));\n  std::vector<std::vector<std::vector<long>>> max(n, std::vector<std::vector<long>>(m, std::vector<long>(k + 1, INT_MIN)));\n  std::vector<std::vector<bool>> visited(n, std::vector<bool>(m, false));\n  int dir[2][4] = {{-1, 0, 1, 0}, {0, 1, 0, -1}};\n  std::priority_queue<Node> q;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      q.push(Node(i, j, 1));\n      dist[i][j][1] = grid[i][j];\n      max[i][j][1] = grid[i][j];\n    }\n  }\n  while (!q.empty()) {\n    Node cur = q.top();\n    q.pop();\n    if (cur.l > k) break;\n    if (visited[cur.i][cur.j]) continue;\n    visited[cur.i][cur.j] =",
        "grade-23": {
            "execution": 0
        },
        "155": "int m = grid.size();\n    int n = grid[0].size();\n    struct State {\n        int x, y, k;\n        State(int x, int y, int k) : x(x), y(y), k(k) {}\n        bool operator<(const State& other) const {\n            if (k != other.k) return k < other.k;\n            else if (x != other.x) return x < other.x;\n            else return y < other.y;\n        }\n    };\n    State start(0, 0, k);\n    std::vector<std::vector<std::vector<bool>>> visited(m, std::vector<std::vector<bool>>(n, std::vector<bool>(k+1, false)));\n    std::vector<std::vector<std::vector<std::vector<long>>>> prev(m, std::vector<std::vector<std::vector<long>>>(n, std::vector<std::vector<long>>(k+1, std::vector<long>())));\n    std::vector<long> ans;\n    std::vector<std::vector<long>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    std::queue<State> q;\n    q.push(start);\n    visited[0][0][k] = true;\n    while (!q.empty()) {\n        State cur = q.front();\n        q.pop();\n        int cur_x = cur.x;\n        int cur_y = cur.y;\n        int cur_k = cur.k;\n        std::vector<long> cur_ans = prev[cur_x][cur_y][cur_k];\n        if (cur_k == 0) {\n            ans = cur_ans;\n            break;\n        }\n        for (int i = 0; i < directions.size(); i++) {\n            int new_x = cur_x + directions[i][0];\n            int new_y = cur_y + directions[i][1];\n            if (new_x < 0 || new_x >= m || new_y < 0 || new_y >=",
        "grade-155": {
            "execution": 0
        },
        "111": "std::vector<long> ans = {};\n    // your code here\n    long m = grid.size();\n    if(m == 0){\n        return ans;\n    }\n    long n = grid[0].size();\n    long grid_size = m*n;\n    if(k > grid_size){\n        return ans;\n    }\n    for(int i = 0; i < m; i++){\n        for(int j = 0; j < n; j++){\n            grid[i][j] -= 1;\n        }\n    }\n    // for(int i = 0; i < m; i++){\n    //     for(int j = 0; j < n; j++){\n    //         cout << grid[i][j] << \" \";\n    //     }\n    //     cout << endl;\n    // }\n    std::vector<long> grid_nums = {};\n    // std::vector<std::vector<long>> paths = {};\n    for(int i = 0; i < m; i++){\n        for(int j = 0; j < n; j++){\n            grid_nums.push_back(grid[i][j]);\n        }\n    }\n    // std::vector<long> path = {};\n    // for(int i = 0; i < grid_size; i++){\n    //     path.push_back(grid_nums[i]);\n    //     if(path.size() == k){\n    //         paths.push_back(path);\n    //         path.clear();\n    //     }\n    // }\n    // std::sort(paths.begin(), paths.end());\n    // for(int i = 0; i < paths.size(); i++){\n    //     for(int j = 0; j < paths[i].size(); j++){\n    //         cout << paths[i][j] << \" \";\n    //     }\n    //     cout << endl;\n    // }\n    // cout << paths.size() << endl;\n    std::vector<long> perm = {};\n    // cout << \"grid_nums: \";\n    // for",
        "grade-111": {
            "execution": 0
        },
        "8": "int n = grid.size();\n  // dp[i][j][m] is the minimum path from cell (i, j) to a cell (x, y)\n  // that the minimum length is m, so it can go through at most m cells.\n  std::vector<std::vector<std::vector<long>>> dp(n, std::vector<std::vector<long>>(n, std::vector<long>(k + 1, -1)));\n  // keep track of the previous cell in the optimal path\n  std::vector<std::vector<std::vector<std::pair<int, int>>>> prev(n, std::vector<std::vector<std::pair<int, int>>>(n, std::vector<std::pair<int, int>>(k + 1, {-1, -1})));\n  // the base case:\n  // the minimum path of 1 step is the grid itself\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      dp[i][j][1] = grid[i][j];\n    }\n  }\n  for (int m = 2; m <= k; m++) {\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        std::vector<long> adjacent_min = {-1, -1, -1, -1};\n        if (i > 0) {\n          adjacent_min[0] = dp[i - 1][j][m - 1];\n        }\n        if (i < n - 1) {\n          adjacent_min[1] = dp[i + 1][j][m - 1];\n        }\n        if (j > 0) {\n          adjacent_min[2] = dp[i][j - 1][m - 1];\n        }\n        if (j < n - 1) {\n          adjacent_min[3] = dp[i][j + 1][m - 1];\n        }\n        long min_value = -1;\n        int min_index = -1;\n        for (int x = 0; x <",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(k >= 1);\n  assert(grid.size() >= 2);\n  assert(grid[0].size() >= 2);\n  // We have a grid.\n  int n = grid.size();\n  std::vector<std::vector<long>> dist(n, std::vector<long>(n, 1000000000));\n  std::vector<std::vector<std::vector<long>>> from(n, std::vector<std::vector<long>>(n, std::vector<long>(n * n + 1, -1)));\n  dist[0][0] = 0;\n  for (int s = 0; s < k; ++s) {\n    std::vector<std::vector<long>> ndist(n, std::vector<long>(n, 1000000000));\n    std::vector<std::vector<std::vector<long>>> nfrom(n, std::vector<std::vector<long>>(n, std::vector<long>(n * n + 1, -1)));\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0; j < n; ++j) {\n        if (dist[i][j] == 1000000000) continue;\n        for (int di = -1; di <= 1; ++di) {\n          for (int dj = -1; dj <= 1; ++dj) {\n            if (abs(di) + abs(dj) != 1) continue;\n            int ni = i + di;\n            int nj = j + dj;\n            if (ni < 0 || ni >= n || nj < 0 || nj >= n) continue;\n            long cd = dist[i][j] + grid[ni][nj];\n            if (cd < ndist[ni][nj]) {\n              ndist[ni][nj] = cd;\n              nfrom[ni][nj] = from[i][j];\n              nfrom[ni][nj][grid[ni][nj]] = s;\n            }\n          }\n        }\n      }\n    }\n    dist = ndist;\n    from = nfrom;\n  }\n  std::vector<long> res;\n  int i = n - 1",
        "grade-7": {
            "execution": 0
        },
        "24": "// Implement your solution here\n\t// std::cout << grid.size() << \" \" << grid[0].size() << std::endl;\n\tstd::vector<long> res;\n\tint n = grid.size();\n\tif (k == 1) {\n\t\tres.push_back(grid[0][0]);\n\t\treturn res;\n\t}\n\t// std::vector<std::vector<long>> dp(n, std::vector<long>(n, INT_MAX));\n\t// for (int i = 0; i < n; i++) {\n\t// \tfor (int j = 0; j < n; j++) {\n\t// \t\tif (i == 0 and j == 0) {\n\t// \t\t\tdp[i][j] = grid[i][j];\n\t// \t\t}\n\t// \t\telse if (i == 0) {\n\t// \t\t\tdp[i][j] = grid[i][j] + dp[i][j - 1];\n\t// \t\t}\n\t// \t\telse if (j == 0) {\n\t// \t\t\tdp[i][j] = grid[i][j] + dp[i - 1][j];\n\t// \t\t}\n\t// \t\telse {\n\t// \t\t\tdp[i][j] = grid[i][j] + std::min(dp[i - 1][j], dp[i][j - 1]);\n\t// \t\t}\n\t// \t}\n\t// }\n\tint i = 0, j = 0;\n\tfor (int t = 0; t < k; t++) {\n\t\tres.push_back(grid[i][j]);\n\t\tif (i == n - 1 and j == n - 1) {\n\t\t\tbreak;\n\t\t}\n\t\telse if (i == n - 1) {\n\t\t\tj++;\n\t\t}\n\t\telse if (j == n - 1) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\t// if (dp[i + 1][j] <= dp[i][j + 1])",
        "grade-24": {
            "execution": 0
        },
        "56": "std::vector<long> values;\n    if (k == 0) {\n        return values;\n    }\n    std::vector<std::vector<long>> visited(grid.size(), std::vector<long>(grid[0].size(), 0));\n    std::priority_queue<std::vector<long>, std::vector<std::vector<long>>, std::greater<std::vector<long>>> pq;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            pq.push({{grid[i][j], 0, i, j}});\n        }\n    }\n    std::vector<long> top;\n    std::vector<long> min_path;\n    long min_path_cost = INT_MAX;\n    while (!pq.empty()) {\n        top = pq.top();\n        pq.pop();\n        long value = top[0];\n        long cost = top[1];\n        long i = top[2];\n        long j = top[3];\n        if (visited[i][j] == 0) {\n            visited[i][j] = 1;\n            cost++;\n            if (cost == k) {\n                if (min_path_cost > value) {\n                    min_path_cost = value;\n                    min_path = {value};\n                }\n            } else {\n                if (i - 1 >= 0 && grid[i - 1][j] < value) {\n                    pq.push({{grid[i - 1][j], cost, i - 1, j}});\n                }\n                if (i + 1 < grid.size() && grid[i + 1][j] < value) {\n                    pq.push({{grid[i + 1][j], cost, i + 1, j}});\n                }\n                if (j - 1 >= 0 && grid[i][j - 1] < value) {\n                    pq.push({{grid[i][j - 1], cost, i, j - 1}});\n                }\n                if (j + 1 < grid[0].size() && grid[i][j",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> path;\n    // For all k, we need to start at the 1.\n    path.push_back(1);\n    if (k == 1) {\n        return path;\n    }\n    for (int i = 0; i < k - 1; i++) {\n        // Find the position of the last value in the path\n        int row = 0;\n        int col = 0;\n        for (int r = 0; r < grid.size(); r++) {\n            for (int c = 0; c < grid[0].size(); c++) {\n                if (grid[r][c] == path.back()) {\n                    row = r;\n                    col = c;\n                }\n            }\n        }\n        // Pick a neighbor to go to.\n        if (row - 1 >= 0 && grid[row - 1][col] == grid[row][col] + 1) {\n            path.push_back(grid[row - 1][col]);\n        } else if (row + 1 < grid.size() && grid[row + 1][col] == grid[row][col] + 1) {\n            path.push_back(grid[row + 1][col]);\n        } else if (col - 1 >= 0 && grid[row][col - 1] == grid[row][col] + 1) {\n            path.push_back(grid[row][col - 1]);\n        } else if (col + 1 < grid[0].size() && grid[row][col + 1] == grid[row][col] + 1) {\n            path.push_back(grid[row][col + 1]);\n        }\n    }\n    return path;",
        "grade-60": {
            "execution": 0
        },
        "bleu-169": 0.1366380464909858,
        "bleu-29": 0.17844828404133586,
        "bleu-6": 0.21264634286305198,
        "bleu-196": 0.22206819265018857,
        "bleu-71": 0.09236063750732823,
        "bleu-63": 2.297124630951709e-05,
        "bleu-58": 0.12559982084863963,
        "bleu-36": 0.20758053969809548,
        "bleu-195": 0.15705844764922394,
        "bleu-27": 0.13772404024396417,
        "bleu-179": 9.067307359289794e-13,
        "bleu-143": 0.18782806209608954,
        "bleu-23": 0.11809396476980077,
        "bleu-155": 0.11580859784337454,
        "bleu-111": 0.17757855123253058,
        "bleu-8": 0.1523579707584562,
        "bleu-7": 0.12006149394393574,
        "bleu-24": 0.20506223166700174,
        "bleu-56": 0.20346200785300175,
        "bleu-60": 0.2109126735214023,
        "codebleu-169": 0.5796103410485574,
        "codebleu-29": 0.38356452456653384,
        "codebleu-6": 0.6971933509716074,
        "codebleu-196": 0.6931495668629184,
        "codebleu-71": 0.6380703433935339,
        "codebleu-63": 0.04672968677514653,
        "codebleu-58": 0.6296226225414507,
        "codebleu-36": 0.6623241654758335,
        "codebleu-195": 0.6306606029917701,
        "codebleu-27": 0.601669735423056,
        "codebleu-179": 0.016172506750345216,
        "codebleu-143": 0.6608901326071772,
        "codebleu-23": 0.6226513709967146,
        "codebleu-155": 0.5900425367338673,
        "codebleu-111": 0.5925798438035164,
        "codebleu-8": 0.6329074932069451,
        "codebleu-7": 0.6239325493117421,
        "codebleu-24": 0.6806498530085097,
        "codebleu-56": 0.7119998551845177,
        "codebleu-60": 0.6622940944694756,
        "chrf-169": 0.24192731962191588,
        "chrf-29": 0.22284288686647533,
        "chrf-6": 0.3785523860271576,
        "chrf-196": 0.36956383396021797,
        "chrf-71": 0.24076049440526567,
        "chrf-63": 0.063244409213398,
        "chrf-58": 0.2603915532052493,
        "chrf-36": 0.3462184652771839,
        "chrf-195": 0.2932299641603782,
        "chrf-27": 0.24821852528630772,
        "chrf-179": 0.025060177170386916,
        "chrf-143": 0.28282587154460764,
        "chrf-23": 0.24865412042447926,
        "chrf-155": 0.2240964999833872,
        "chrf-111": 0.3450779073375488,
        "chrf-8": 0.2531066642858026,
        "chrf-7": 0.24655598181945326,
        "chrf-24": 0.3623619227836516,
        "chrf-56": 0.3518152307612981,
        "chrf-60": 0.34689079415577717,
        "rougel-169": 0.2870514820592824,
        "rougel-29": 0.30537634408602155,
        "rougel-6": 0.42580645161290326,
        "rougel-196": 0.45013477088948783,
        "rougel-71": 0.3118556701030928,
        "rougel-63": 0.05298013245033113,
        "rougel-58": 0.31714285714285717,
        "rougel-36": 0.36134453781512604,
        "rougel-195": 0.2857142857142857,
        "rougel-27": 0.2723631508678238,
        "rougel-179": 0.02857142857142857,
        "rougel-143": 0.36538461538461536,
        "rougel-23": 0.22942643391521195,
        "rougel-155": 0.23653088042049936,
        "rougel-111": 0.28993288590604027,
        "rougel-8": 0.32460732984293195,
        "rougel-7": 0.2823834196891192,
        "rougel-24": 0.3463687150837989,
        "rougel-56": 0.37994722955145116,
        "rougel-60": 0.46177847113884557,
        "meteor-169": 0.3477973443027592,
        "meteor-29": 0.23347192752598153,
        "meteor-6": 0.43943328443434926,
        "meteor-196": 0.42494061488597284,
        "meteor-71": 0.3720176319186034,
        "meteor-63": 0.021609717709179528,
        "meteor-58": 0.39893646254284243,
        "meteor-36": 0.40203332880384435,
        "meteor-195": 0.3906122651412805,
        "meteor-27": 0.3673566047736525,
        "meteor-179": 0.010245901639344262,
        "meteor-143": 0.44511344980096845,
        "meteor-23": 0.36588070846716964,
        "meteor-155": 0.33275714666039086,
        "meteor-111": 0.35969456339803485,
        "meteor-8": 0.3861204257865937,
        "meteor-7": 0.3643012825099535,
        "meteor-24": 0.4556219164439524,
        "meteor-56": 0.42309009333962344,
        "meteor-60": 0.433724694551875,
        "ruby-169": 0.15363881401617252,
        "ruby-29": 0.16666666666666663,
        "ruby-6": 0.30099009900990104,
        "ruby-196": 0.31567796610169496,
        "ruby-71": 0.20750988142292492,
        "ruby-63": 0.029629629629629672,
        "ruby-58": 0.1837209302325581,
        "ruby-36": 0.25225225225225223,
        "ruby-195": 0.14971209213051828,
        "ruby-27": 0.17327766179540705,
        "ruby-179": 0.014814814814814836,
        "ruby-143": 0.22707423580786024,
        "ruby-23": 0.13533834586466165,
        "ruby-155": 0.15478615071283097,
        "ruby-111": 0.18315789473684208,
        "ruby-8": 0.14574898785425106,
        "ruby-7": 0.13745019920318724,
        "ruby-24": 0.21076233183856508,
        "ruby-56": 0.2520491803278688,
        "ruby-60": 0.30188679245283023,
        "codebertscore_f1-169": 0.7582447528839111,
        "codebertscore_f3-169": 0.7880910038948059,
        "codebertscore_f1-29": 0.7515798807144165,
        "codebertscore_f3-29": 0.7547022700309753,
        "codebertscore_f1-6": 0.7886047959327698,
        "codebertscore_f3-6": 0.8219648003578186,
        "codebertscore_f1-196": 0.8420137763023376,
        "codebertscore_f3-196": 0.8411363959312439,
        "codebertscore_f1-71": 0.7813049554824829,
        "codebertscore_f3-71": 0.796565592288971,
        "codebertscore_f1-63": 0.5456365346908569,
        "codebertscore_f3-63": 0.5125567317008972,
        "codebertscore_f1-58": 0.7523934245109558,
        "codebertscore_f3-58": 0.7786536812782288,
        "codebertscore_f1-36": 0.787635326385498,
        "codebertscore_f3-36": 0.7999143004417419,
        "codebertscore_f1-195": 0.761544942855835,
        "codebertscore_f3-195": 0.7866002917289734,
        "codebertscore_f1-27": 0.7262023687362671,
        "codebertscore_f3-27": 0.7585650086402893,
        "codebertscore_f1-179": 0.5178894996643066,
        "codebertscore_f3-179": 0.46718475222587585,
        "codebertscore_f1-143": 0.7805414795875549,
        "codebertscore_f3-143": 0.8029676675796509,
        "codebertscore_f1-23": 0.7539818286895752,
        "codebertscore_f3-23": 0.778630793094635,
        "codebertscore_f1-155": 0.7573305368423462,
        "codebertscore_f3-155": 0.7812627553939819,
        "codebertscore_f1-111": 0.7537397146224976,
        "codebertscore_f3-111": 0.768185019493103,
        "codebertscore_f1-8": 0.7663978934288025,
        "codebertscore_f3-8": 0.8001660108566284,
        "codebertscore_f1-7": 0.7364982962608337,
        "codebertscore_f3-7": 0.7557996511459351,
        "codebertscore_f1-24": 0.7791200280189514,
        "codebertscore_f3-24": 0.800620973110199,
        "codebertscore_f1-56": 0.789129912853241,
        "codebertscore_f3-56": 0.81732577085495,
        "codebertscore_f1-60": 0.8040546774864197,
        "codebertscore_f3-60": 0.8181002140045166,
        "codebertscore_s_f1-169": 0.7681986689567566,
        "codebertscore_s_f3-169": 0.7977214455604553,
        "codebertscore_s_f1-29": 0.7690943479537964,
        "codebertscore_s_f3-29": 0.7653281092643738,
        "codebertscore_s_f1-6": 0.8028814792633057,
        "codebertscore_s_f3-6": 0.8303776979446411,
        "codebertscore_s_f1-196": 0.8458376526832581,
        "codebertscore_s_f3-196": 0.8431763648986816,
        "codebertscore_s_f1-71": 0.7837486267089844,
        "codebertscore_s_f3-71": 0.8004581332206726,
        "codebertscore_s_f1-63": 0.6083257794380188,
        "codebertscore_s_f3-63": 0.5786582827568054,
        "codebertscore_s_f1-58": 0.7625597715377808,
        "codebertscore_s_f3-58": 0.7876311540603638,
        "codebertscore_s_f1-36": 0.7949745655059814,
        "codebertscore_s_f3-36": 0.8021141886711121,
        "codebertscore_s_f1-195": 0.7784488201141357,
        "codebertscore_s_f3-195": 0.7987117171287537,
        "codebertscore_s_f1-27": 0.7441071271896362,
        "codebertscore_s_f3-27": 0.773987889289856,
        "codebertscore_s_f1-179": 0.5404366850852966,
        "codebertscore_s_f3-179": 0.5063447952270508,
        "codebertscore_s_f1-143": 0.7915756702423096,
        "codebertscore_s_f3-143": 0.8114629983901978,
        "codebertscore_s_f1-23": 0.7597329616546631,
        "codebertscore_s_f3-23": 0.7804251313209534,
        "codebertscore_s_f1-155": 0.7682539820671082,
        "codebertscore_s_f3-155": 0.7920941710472107,
        "codebertscore_s_f1-111": 0.7730014324188232,
        "codebertscore_s_f3-111": 0.7819117903709412,
        "codebertscore_s_f1-8": 0.7827508449554443,
        "codebertscore_s_f3-8": 0.8161953091621399,
        "codebertscore_s_f1-7": 0.7541332244873047,
        "codebertscore_s_f3-7": 0.7727705240249634,
        "codebertscore_s_f1-24": 0.795737624168396,
        "codebertscore_s_f3-24": 0.8142730593681335,
        "codebertscore_s_f1-56": 0.8037077784538269,
        "codebertscore_s_f3-56": 0.8293381929397583,
        "codebertscore_s_f1-60": 0.8167246580123901,
        "codebertscore_s_f3-60": 0.8309094905853271,
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 3,
        "raw_gpt35_nsnr-196": "3",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 2,
        "raw_gpt35_nsnr-63": "2",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-179": 0,
        "raw_gpt35_nsnr-179": "3 - The code snippet correctly defines the function signature and returns an empty vector as required. However, it does not implement the logic to find the minimum path of length k in the grid.",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-111": 3,
        "raw_gpt35_nsnr-111": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-29": 2,
        "raw_gpt35_nswr-29": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-196": 2,
        "raw_gpt35_nswr-196": "2",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 2,
        "raw_gpt35_nswr-63": "2",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-36": 2,
        "raw_gpt35_nswr-36": "2",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-179": 0,
        "raw_gpt35_nswr-179": "3 - The code snippet correctly finds the minimum path of length k in the grid and returns an ordered list of the values on the cells that the minimum path goes through. However, the implementation assumes that the starting cell contains the value 1, which is not guaranteed by the problem statement. The code snippet also does not handle the case where k is greater than the number of cells in the grid.",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-155": 4,
        "raw_gpt35_nswr-155": "4",
        "gpt35_nswr-111": 3,
        "raw_gpt35_nswr-111": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-56": 2,
        "raw_gpt35_nswr-56": "2",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n",
        "snippet": [
            "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n"
        ],
        "simplified": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "task_id": "26",
        "164": "// your code goes here\n  std::unordered_map<long, int> umap;\n  std::vector<long>::iterator it;\n  for(it = numbers.begin(); it != numbers.end(); it++) {\n    umap[*it]++;\n  }\n  std::vector<long> ans;\n  for(it = numbers.begin(); it != numbers.end(); it++) {\n    if(umap[*it] == 1)\n      ans.push_back(*it);\n  }\n  return ans;",
        "grade-164": {
            "execution": 1
        },
        "28": "std::vector<long> ans;\n  std::unordered_set<long> unique;\n  for (auto i : numbers) {\n    if (unique.find(i) == unique.end()) {\n      unique.insert(i);\n      ans.push_back(i);\n    }\n  }\n  return ans;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n    std::unordered_set<long> numbers_set;\n    for (auto& n : numbers) {\n        if (numbers_set.find(n) == numbers_set.end()) {\n            numbers_set.insert(n);\n            result.push_back(n);\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::vector<long> result;\n  std::unordered_set<long> seen;\n  for (auto num : numbers) {\n    if (seen.find(num) == seen.end()) {\n      result.push_back(num);\n      seen.insert(num);\n    }\n  }\n  return result;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<long> result;\n    std::set<long> uniques;\n    for (long n : numbers) {\n        if (uniques.find(n) == uniques.end()) {\n            uniques.insert(n);\n            result.push_back(n);\n        }\n    }\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (numbers.size() == 0) return {};\n    std::vector<long> unique{numbers[0]};\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i-1]) unique.push_back(numbers[i]);\n    }\n    return unique;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> answer;\n    std::unordered_set<long> used;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (used.find(numbers[i]) == used.end()) {\n            answer.push_back(numbers[i]);\n            used.insert(numbers[i]);\n        }\n    }\n    return answer;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> uniques;\n    std::set<long> set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end()) {\n            uniques.push_back(number);\n            set.insert(number);\n        }\n    }\n    return uniques;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<long> answer;\n    std::unordered_set<long> numbers_set;\n    std::unordered_set<long> duplicates;\n    for (long number : numbers) {\n        if (numbers_set.find(number) == numbers_set.end()) {\n            numbers_set.insert(number);\n        } else {\n            duplicates.insert(number);\n        }\n    }\n    for (long number : numbers) {\n        if (duplicates.find(number) == duplicates.end()) {\n            answer.push_back(number);\n        }\n    }\n    return answer;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::unordered_set<long> seen;\n\tstd::vector<long> ret;\n\tfor (auto n : numbers) {\n\t\tif (seen.find(n) == seen.end()) {\n\t\t\tret.push_back(n);\n\t\t\tseen.insert(n);\n\t\t}\n\t}\n\treturn ret;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> dups{};\n    int i = 0;\n    while (i < numbers.size()) {\n        int j = i + 1;\n        while (j < numbers.size()) {\n            if (numbers[i] == numbers[j]) {\n                dups.push_back(numbers[i]);\n                numbers.erase(numbers.begin() + j);\n            } else {\n                j++;\n            }\n        }\n        i++;\n    }\n    std::vector<long> result{};\n    std::set<long> u_dups(dups.begin(), dups.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        if (u_dups.find(numbers[i]) == u_dups.end()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-174": {
            "execution": 1
        },
        "139": "std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        bool repeated = false;\n        for (int j = 0; j < result.size(); j++) {\n            if (numbers[i] == result[j]) repeated = true;\n        }\n        if (!repeated) result.push_back(numbers[i]);\n    }\n    return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "if (numbers.size() <= 1)\n\t\treturn numbers;\n\tsort(numbers.begin(), numbers.end());\n\tfor (int i = 0; i < numbers.size() - 1; i++) {\n\t\tif (numbers[i] == numbers[i + 1]) {\n\t\t\tnumbers.erase(numbers.begin() + i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn numbers;",
        "grade-22": {
            "execution": 0
        },
        "152": "if (numbers.size() == 0) return numbers;\n    std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        bool found = false;\n        for (long j = 0; j < result.size(); j++) {\n            if (numbers[i] == result[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "std::vector<long>::iterator it;\n    // std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (std::find(result.begin(), result.end(), numbers[i]) == result.end()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long>::iterator it;\n  std::vector<long> result;\n  std::vector<long>::iterator it1;\n  for (it = numbers.begin(); it != numbers.end(); it++) {\n    if (find(result.begin(), result.end(), *it) == result.end()) {\n      result.push_back(*it);\n    }\n  }\n  return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n    std::set<long> set;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (set.count(numbers[i]) == 0) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> res;\n    long len = numbers.size();\n    std::map<long, int> map;\n    for (long i = 0; i < len; i++) {\n        if (map.find(numbers[i]) == map.end()) {\n            map[numbers[i]] = 1;\n        } else {\n            map[numbers[i]]++;\n        }\n    }\n    for (long i = 0; i < len; i++) {\n        if (map[numbers[i]] == 1) {\n            res.push_back(numbers[i]);\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "// use a hashmap to keep track of which elements were encountered.\n  std::unordered_map<long, bool> encountered_elements;\n  std::vector<long> solution;\n  for (long n : numbers) {\n    // if the value has been encountered in the hashmap, don't include it in\n    // solution.\n    if (encountered_elements.find(n) == encountered_elements.end()) {\n      encountered_elements[n] = true;\n      solution.push_back(n);\n    }\n  }\n  return solution;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.11235050039632467,
        "bleu-28": 0.02686996517529919,
        "bleu-6": 0.027102103664915927,
        "bleu-190": 0.02622201982683996,
        "bleu-70": 0.02622201982683996,
        "bleu-62": 0.12365773157741529,
        "bleu-57": 0.15985274964424126,
        "bleu-35": 0.02622201982683996,
        "bleu-189": 0.0949047441052995,
        "bleu-26": 0.02622201982683996,
        "bleu-174": 0.43664380330632113,
        "bleu-139": 0.1661235596681427,
        "bleu-22": 0.15979967072544526,
        "bleu-152": 0.2019933519534537,
        "bleu-108": 0.2594342094933727,
        "bleu-8": 0.12411323417895892,
        "bleu-7": 0.13795996561169377,
        "bleu-23": 0.28239449952855816,
        "bleu-55": 0.1687287447324034,
        "bleu-59": 0.04636882496826199,
        "codebleu-164": 0.3321915546566453,
        "codebleu-28": 0.16521951787416603,
        "codebleu-6": 0.16490763792389387,
        "codebleu-190": 0.16456011621459257,
        "codebleu-70": 0.16456011621459257,
        "codebleu-62": 0.2393419547435068,
        "codebleu-57": 0.2828601787059443,
        "codebleu-35": 0.16456011621459257,
        "codebleu-189": 0.3175987865372827,
        "codebleu-26": 0.16456011621459257,
        "codebleu-174": 0.6609291224538867,
        "codebleu-139": 0.30060790659145614,
        "codebleu-22": 0.28231815612293565,
        "codebleu-152": 0.3767094719416274,
        "codebleu-108": 0.3803947677359025,
        "codebleu-8": 0.28894364904410946,
        "codebleu-7": 0.2600003830573618,
        "codebleu-23": 0.45484611311209866,
        "codebleu-55": 0.2910653953542354,
        "codebleu-59": 0.25166027993968054,
        "chrf-164": 0.2638715881220292,
        "chrf-28": 0.15049503403183156,
        "chrf-6": 0.20542321794676752,
        "chrf-190": 0.17086512963772243,
        "chrf-70": 0.15411687041737918,
        "chrf-62": 0.29035022872130467,
        "chrf-57": 0.3038868869304199,
        "chrf-35": 0.1924574000656395,
        "chrf-189": 0.284197670609879,
        "chrf-26": 0.15461735613773706,
        "chrf-174": 0.4794387869598401,
        "chrf-139": 0.28441988815210123,
        "chrf-22": 0.31731405411556635,
        "chrf-152": 0.3054520064019852,
        "chrf-108": 0.3754250725884859,
        "chrf-8": 0.2577799961341776,
        "chrf-7": 0.2870691904366824,
        "chrf-23": 0.3373771642720051,
        "chrf-55": 0.35426122998719384,
        "chrf-59": 0.19925231640235347,
        "rougel-164": 0.360128617363344,
        "rougel-28": 0.32156862745098036,
        "rougel-6": 0.28906249999999994,
        "rougel-190": 0.2901960784313725,
        "rougel-70": 0.2901960784313725,
        "rougel-62": 0.39705882352941174,
        "rougel-57": 0.463768115942029,
        "rougel-35": 0.2901960784313725,
        "rougel-189": 0.4119601328903654,
        "rougel-26": 0.2901960784313725,
        "rougel-174": 0.5092838196286471,
        "rougel-139": 0.4366197183098591,
        "rougel-22": 0.4113475177304965,
        "rougel-152": 0.41447368421052627,
        "rougel-108": 0.49668874172185434,
        "rougel-8": 0.41237113402061853,
        "rougel-7": 0.4411764705882353,
        "rougel-23": 0.5304878048780488,
        "rougel-55": 0.4270462633451957,
        "rougel-59": 0.2593856655290102,
        "meteor-164": 0.2727163821503444,
        "meteor-28": 0.14985640420989846,
        "meteor-6": 0.13836474541602747,
        "meteor-190": 0.12982789367746442,
        "meteor-70": 0.13844165744794298,
        "meteor-62": 0.272858148114221,
        "meteor-57": 0.27897670511306877,
        "meteor-35": 0.13542317091611797,
        "meteor-189": 0.27703458475027964,
        "meteor-26": 0.12982789367746442,
        "meteor-174": 0.5720464318533527,
        "meteor-139": 0.2799051787016776,
        "meteor-22": 0.2603864349612776,
        "meteor-152": 0.3374991323956101,
        "meteor-108": 0.42693279293203046,
        "meteor-8": 0.30977476097576706,
        "meteor-7": 0.2748940578025957,
        "meteor-23": 0.42431969059765845,
        "meteor-55": 0.29487829528158294,
        "meteor-59": 0.1683077308943345,
        "ruby-164": 0.23834196891191706,
        "ruby-28": 0.20725388601036265,
        "ruby-6": 0.18652849740932642,
        "ruby-190": 0.18652849740932642,
        "ruby-70": 0.18652849740932642,
        "ruby-62": 0.24870466321243523,
        "ruby-57": 0.3264248704663213,
        "ruby-35": 0.18652849740932642,
        "ruby-189": 0.26943005181347146,
        "ruby-26": 0.18652849740932642,
        "ruby-174": 0.3471502590673575,
        "ruby-139": 0.2901554404145078,
        "ruby-22": 0.24352331606217614,
        "ruby-152": 0.27979274611398963,
        "ruby-108": 0.3523316062176166,
        "ruby-8": 0.2538860103626943,
        "ruby-7": 0.30569948186528495,
        "ruby-23": 0.37305699481865284,
        "ruby-55": 0.2901554404145078,
        "ruby-59": 0.14507772020725385,
        "codebertscore_f1-164": 0.7386267185211182,
        "codebertscore_f3-164": 0.7345069646835327,
        "codebertscore_f1-28": 0.727235734462738,
        "codebertscore_f3-28": 0.7020820379257202,
        "codebertscore_f1-6": 0.7373408675193787,
        "codebertscore_f3-6": 0.7181685566902161,
        "codebertscore_f1-190": 0.7176035046577454,
        "codebertscore_f3-190": 0.6937702298164368,
        "codebertscore_f1-70": 0.7331000566482544,
        "codebertscore_f3-70": 0.7088693976402283,
        "codebertscore_f1-62": 0.7954686880111694,
        "codebertscore_f3-62": 0.7607183456420898,
        "codebertscore_f1-57": 0.8138459324836731,
        "codebertscore_f3-57": 0.7928557395935059,
        "codebertscore_f1-35": 0.7220555543899536,
        "codebertscore_f3-35": 0.699120819568634,
        "codebertscore_f1-189": 0.7661498785018921,
        "codebertscore_f3-189": 0.7612659335136414,
        "codebertscore_f1-26": 0.7125672698020935,
        "codebertscore_f3-26": 0.6922501921653748,
        "codebertscore_f1-174": 0.8123304843902588,
        "codebertscore_f3-174": 0.8160954713821411,
        "codebertscore_f1-139": 0.7996814250946045,
        "codebertscore_f3-139": 0.7720859050750732,
        "codebertscore_f1-22": 0.7784002423286438,
        "codebertscore_f3-22": 0.7490454912185669,
        "codebertscore_f1-152": 0.8076980113983154,
        "codebertscore_f3-152": 0.7874868512153625,
        "codebertscore_f1-108": 0.8156694173812866,
        "codebertscore_f3-108": 0.8015472292900085,
        "codebertscore_f1-8": 0.7556004524230957,
        "codebertscore_f3-8": 0.7333757281303406,
        "codebertscore_f1-7": 0.8019059300422668,
        "codebertscore_f3-7": 0.7701838612556458,
        "codebertscore_f1-23": 0.8389207720756531,
        "codebertscore_f3-23": 0.8256022930145264,
        "codebertscore_f1-55": 0.8089856505393982,
        "codebertscore_f3-55": 0.7815461754798889,
        "codebertscore_f1-59": 0.6924437284469604,
        "codebertscore_f3-59": 0.7095953822135925,
        "codebertscore_s_f1-164": 0.7422288060188293,
        "codebertscore_s_f3-164": 0.7412825226783752,
        "codebertscore_s_f1-28": 0.739489734172821,
        "codebertscore_s_f3-28": 0.719402015209198,
        "codebertscore_s_f1-6": 0.7443850040435791,
        "codebertscore_s_f3-6": 0.7277044653892517,
        "codebertscore_s_f1-190": 0.7232534885406494,
        "codebertscore_s_f3-190": 0.704180121421814,
        "codebertscore_s_f1-70": 0.7418083548545837,
        "codebertscore_s_f3-70": 0.7225075364112854,
        "codebertscore_s_f1-62": 0.805154025554657,
        "codebertscore_s_f3-62": 0.7729911804199219,
        "codebertscore_s_f1-57": 0.8201063871383667,
        "codebertscore_s_f3-57": 0.8039807677268982,
        "codebertscore_s_f1-35": 0.7239003777503967,
        "codebertscore_s_f3-35": 0.7052018046379089,
        "codebertscore_s_f1-189": 0.7655908465385437,
        "codebertscore_s_f3-189": 0.7620157599449158,
        "codebertscore_s_f1-26": 0.7247909903526306,
        "codebertscore_s_f3-26": 0.707463800907135,
        "codebertscore_s_f1-174": 0.8117352724075317,
        "codebertscore_s_f3-174": 0.8187990188598633,
        "codebertscore_s_f1-139": 0.8089048862457275,
        "codebertscore_s_f3-139": 0.7856144309043884,
        "codebertscore_s_f1-22": 0.7912160158157349,
        "codebertscore_s_f3-22": 0.7637950778007507,
        "codebertscore_s_f1-152": 0.8121103644371033,
        "codebertscore_s_f3-152": 0.7931298017501831,
        "codebertscore_s_f1-108": 0.8285213112831116,
        "codebertscore_s_f3-108": 0.8185415863990784,
        "codebertscore_s_f1-8": 0.7642675638198853,
        "codebertscore_s_f3-8": 0.7447649836540222,
        "codebertscore_s_f1-7": 0.8109506368637085,
        "codebertscore_s_f3-7": 0.7834160327911377,
        "codebertscore_s_f1-23": 0.8412356972694397,
        "codebertscore_s_f3-23": 0.8304536938667297,
        "codebertscore_s_f1-55": 0.822380006313324,
        "codebertscore_s_f3-55": 0.7988907694816589,
        "codebertscore_s_f1-59": 0.7009626626968384,
        "codebertscore_s_f3-59": 0.7220895886421204,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n"
        ],
        "simplified": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
        "task_id": "113",
        "163": "int n = lst.size();\n  std::vector<std::string> ans(n);\n  for (int i = 0; i < n; i++) {\n    std::string str = lst[i];\n    int c = 0;\n    for (int j = 0; j < str.size(); j++) {\n      if ((str[j] - '0') % 2 == 1) {\n        c++;\n      }\n    }\n    std::string str1 = \"the number of odd elements \";\n    std::stringstream ss;\n    ss << c;\n    std::string str2 = ss.str();\n    str1 += str2;\n    str1 += \"n the str\";\n    str1 += str2;\n    str1 += \"ng \";\n    str1 += str2;\n    str1 += \" of the \";\n    str1 += str2;\n    str1 += \"nput.\";\n    ans[i] = str1;\n  }\n  return ans;",
        "grade-163": {
            "execution": 1
        },
        "28": "// your code here\n    std::vector<std::string> result;\n    int count;\n    std::string word;\n    for(int i = 0; i < lst.size(); i++){\n        count = 0;\n        word = lst[i];\n        for(int j = 0; j < word.size(); j++){\n            if(word[j] % 2 != 0){\n                count++;\n            }\n        }\n        word = \"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\";\n        result.push_back(word);\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<std::string> ans;\n  std::string temp;\n  std::string curr, prev;\n  int counter = 0;\n  for (std::string curr : lst) {\n    temp = \"\";\n    for (char c : curr) {\n      if ((c - '0') % 2 == 1) {\n        counter++;\n      }\n    }\n    for (char c : curr) {\n      if (c == '1') {\n        temp += std::to_string(counter);\n      } else if (c == '3') {\n        temp += std::to_string(counter);\n      } else if (c == '5') {\n        temp += std::to_string(counter);\n      } else if (c == '7') {\n        temp += std::to_string(counter);\n      } else if (c == '9') {\n        temp += std::to_string(counter);\n      } else {\n        temp += c;\n      }\n    }\n    ans.push_back(temp);\n    counter = 0;\n  }\n  return ans;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<std::string> result;\n    for (auto i = lst.begin(); i != lst.end(); i++) {\n        int odd_counter = 0;\n        std::string word = *i;\n        for (auto j = word.begin(); j != word.end(); j++) {\n            if ((*j) % 2 != 0) {\n                odd_counter++;\n            }\n        }\n        std::string answer = \"the number of odd elements \" + std::to_string(odd_counter) + \"n the str\" + std::to_string(odd_counter) + \"ng \" + std::to_string(odd_counter) + \" of the \" + std::to_string(odd_counter) + \"nput.\";\n        result.push_back(answer);\n    }\n    return result;",
        "grade-189": {
            "execution": 1
        },
        "70": "std::vector<std::string> temp;\n    std::string t;\n    int count = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        t = lst[i];\n        count = 0;\n        for(int j = 0; j < t.size(); j++) {\n            if(int(t[j]) % 2 != 0) {\n                count++;\n            }\n        }\n        std::cout << count << std::endl;\n        temp.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return temp;",
        "grade-70": {
            "execution": 1
        },
        "62": "int ind, odd_counter;\n    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < lst.size(); i++) {\n        temp = \"the number of odd elements \";\n        odd_counter = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (int(lst[i][j]) % 2 != 0)\n                odd_counter++;\n        }\n        temp += std::to_string(odd_counter) + \"n the str\" + std::to_string(odd_counter) + \"ng \" + std::to_string(odd_counter) + \" of the \" + std::to_string(odd_counter) + \"nput.\";\n        result.push_back(temp);\n    }\n    return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Do your magic here\n    std::vector<std::string> res;\n    // std::vector<int> res;\n    std::vector<int> temp;\n    int count = 0;\n    int pos;\n    int length;\n    for (int i = 0; i < lst.size(); i++) {\n        pos = 0;\n        length = lst[i].length();\n        count = 0;\n        while (pos < length) {\n            if ((lst[i][pos] - '0') % 2 == 1) {\n                count++;\n            }\n            pos++;\n        }\n        // temp.push_back(count);\n        res.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<std::string> ans;\n    for (auto i : lst) {\n        int cnt = 0;\n        for (auto j : i)\n            if ((j - '0') % 2)\n                cnt++;\n        ans.push_back(\"the number of odd elements \" + std::to_string(cnt) + \"n the str\" + std::to_string(cnt) + \"ng \" + std::to_string(cnt) + \" of the \" + std::to_string(cnt) + \"nput.\");\n    }\n    return ans;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<std::string> result;\n    int digit_count = 0;\n    std::string str;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]%2!=0) {\n                digit_count++;\n            }\n        }\n        str = \"the number of odd elements \" + std::to_string(digit_count) + \"n the str\"\n        + std::to_string(digit_count) + \"ng \" + std::to_string(digit_count) + \" of the \"\n        + std::to_string(digit_count) + \"nput.\";\n        result.push_back(str);\n        digit_count = 0;\n    }\n    return result;",
        "grade-188": {
            "execution": 1
        },
        "26": "std::vector<std::string> result;\n  for (auto &num : lst) {\n    int count = 0;\n    for (auto &digit : num) {\n      if (digit % 2 == 1) {\n        count++;\n      }\n    }\n    std::stringstream ss;\n    ss << \"the number of odd elements \" << count << \"n the str\" << count\n       << \"ng \" << count << \" of the \" << count << \"nput.\";\n    result.push_back(ss.str());\n  }\n  return result;",
        "grade-26": {
            "execution": 1
        },
        "173": "for (int i = 0; i < lst.size(); i++) {\n        int cnt = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            cnt += lst[i][j] % 2;\n        }\n        std::cout << lst[i] << std::endl;\n        std::cout << cnt << std::endl;\n        lst[i] = \"the number of odd elements \" + std::to_string(cnt) + \"n the str\" + std::to_string(cnt) + \"ng \" + std::to_string(cnt) + \" of the \" + std::to_string(cnt) + \"nput.\";\n    }\n    return lst;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<std::string> new_lst;\n    for (int i = 0; i < lst.size(); i++) {\n        int counter = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if ((lst[i][j] - '0') % 2 != 0) {\n                counter++;\n            }\n        }\n        new_lst.push_back(\"the number of odd elements \" + std::to_string(counter) + \"n the str\" + std::to_string(i + 1) + \"ng \" + std::to_string(i + 1) + \" of the \" + std::to_string(i + 1) + \"nput.\");\n    }\n    return new_lst;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<std::string> result;\n    for (auto str : lst) {\n        int odd_count = 0;\n        for (auto c : str) {\n            if (c % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(odd_count) + \"n the str\" + std::to_string(odd_count) + \"ng \" + std::to_string(odd_count) + \" of the \" + std::to_string(odd_count) + \"nput.\");\n    }\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "std::vector<std::string> result;\n\tfor (auto i : lst) {\n\t\tint nums = 0;\n\t\tfor (int j = 0; j < i.size(); j++) {\n\t\t\tif (i[j] % 2 == 1)\n\t\t\t\tnums++;\n\t\t}\n\t\tstd::string temp = \"the number of odd elements \" + std::to_string(nums) + \"n the str\" + std::to_string(nums) + \"ng \" + std::to_string(nums) + \" of the \" + std::to_string(nums) + \"nput.\";\n\t\tresult.push_back(temp);\n\t}\n\treturn result;",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> result;\n  for (auto &s : lst) {\n    std::string res = \"the number of odd elements \";\n    int count = 0;\n    for (auto &c : s) {\n      if (c == '1' || c == '3' || c == '5' || c == '7' || c == '9') {\n        count++;\n      }\n    }\n    res += std::to_string(count) + \"n the str\" + std::to_string(count) +\n           \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) +\n           \"nput.\";\n    result.push_back(res);\n  }\n  return result;",
        "grade-108": {
            "execution": 1
        },
        "8": "std::vector<std::string> ret;\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n                for (int j = 0; j < lst[i].size(); j++) {\n                        if (lst[i][j] % 2 != 0) {\n                                count++;\n                        }\n                }\n                std::string newstr = \"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\";\n                ret.push_back(newstr);\n                count = 0;\n        }\n        return ret;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> res;\n    for (int i = 0; i < lst.size(); i++) {\n        int cnt = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if ((lst[i][j] - '0') & 1) {\n                cnt++;\n            }\n        }\n        std::string foo = \"the number of odd elements \" + std::to_string(cnt) + \"n the str\" + std::to_string(cnt) + \"ng \" + std::to_string(cnt) + \" of the \" + std::to_string(cnt) + \"nput.\";\n        res.push_back(foo);\n    }\n    return res;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> rv;\n\tfor(std::string s : lst) {\n\t    int sum = 0;\n\t    for(char c : s) {\n\t        sum += (c-'0')%2;\n\t    }\n\t    rv.push_back(\"the number of odd elements \" + std::to_string(sum) + \"n the str\" + std::to_string(sum) + \"ng \" + std::to_string(sum) + \" of the \" + std::to_string(sum) + \"nput.\");\n\t}\n\treturn rv;",
        "grade-23": {
            "execution": 1
        },
        "55": "for (int i = 0; i < lst.size(); i++) {\n    int counter = 0;\n    for (int j = 0; j < lst[i].size(); j++) {\n      int char_to_int = lst[i][j] - '0';\n      if (char_to_int % 2 != 0) {\n        counter++;\n      }\n    }\n    lst[i] = \"the number of odd elements \" + std::to_string(counter) +\n    \"n the str\" + std::to_string(counter) + \"ng \" + std::to_string(counter) +\n    \" of the \" + std::to_string(counter) + \"nput.\";\n  }\n  return lst;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> result;\n  for (auto str : lst) {\n    int count = 0;\n    for (auto ch : str) {\n      if (isdigit(ch)) {\n        if ((ch - '0') & 1) {\n          count++;\n        }\n      }\n    }\n    result.push_back(\"the number of odd elements \" + std::to_string(count) +\n                     \"n the str\" + std::to_string(count) + \"ng \" +\n                     std::to_string(count) + \" of the \" + std::to_string(count) +\n                     \"nput.\");\n  }\n  return result;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.30955820635234893,
        "bleu-28": 0.3222515719558161,
        "bleu-6": 0.11878681953052901,
        "bleu-189": 0.20600843535303748,
        "bleu-70": 0.3197778538060758,
        "bleu-62": 0.36582936208814343,
        "bleu-57": 0.2853972893949642,
        "bleu-35": 0.0960850104936574,
        "bleu-188": 0.36133356958410956,
        "bleu-26": 0.11518822241083043,
        "bleu-173": 0.3645741564844587,
        "bleu-139": 0.35864201686420555,
        "bleu-22": 0.0947868382435949,
        "bleu-151": 0.24074527050493594,
        "bleu-108": 0.12407012470039486,
        "bleu-8": 0.36557308533515387,
        "bleu-7": 0.3602891094435282,
        "bleu-23": 0.12845117585514945,
        "bleu-55": 0.343989616283877,
        "bleu-59": 0.10037812666410736,
        "codebleu-163": 0.5700340661110509,
        "codebleu-28": 0.5515975919526369,
        "codebleu-6": 0.4523828253031792,
        "codebleu-189": 0.4948002826636066,
        "codebleu-70": 0.558619109970964,
        "codebleu-62": 0.5612876439912172,
        "codebleu-57": 0.5864976659674579,
        "codebleu-35": 0.2853673641469915,
        "codebleu-188": 0.5544320535204371,
        "codebleu-26": 0.25671373435798384,
        "codebleu-173": 0.5168113064404409,
        "codebleu-139": 0.5137195565451845,
        "codebleu-22": 0.2921214608463392,
        "codebleu-151": 0.418257271874511,
        "codebleu-108": 0.34466567115208224,
        "codebleu-8": 0.5450304687523146,
        "codebleu-7": 0.5228955609858681,
        "codebleu-23": 0.2960438896495878,
        "codebleu-55": 0.4929203506358107,
        "codebleu-59": 0.3163007495188948,
        "chrf-163": 0.42218968715408045,
        "chrf-28": 0.4448389243850653,
        "chrf-6": 0.2843696263683643,
        "chrf-189": 0.36600471390814204,
        "chrf-70": 0.4472204594703626,
        "chrf-62": 0.47186921555069217,
        "chrf-57": 0.44378762274455247,
        "chrf-35": 0.3295413670672653,
        "chrf-188": 0.4773434578567491,
        "chrf-26": 0.32292636144732934,
        "chrf-173": 0.45056747417521703,
        "chrf-139": 0.4808470100247497,
        "chrf-22": 0.32700847701442876,
        "chrf-151": 0.4135217782325958,
        "chrf-108": 0.34361319030890836,
        "chrf-8": 0.47949395398182054,
        "chrf-7": 0.4801550198279212,
        "chrf-23": 0.3607533204761973,
        "chrf-55": 0.43697861866998344,
        "chrf-59": 0.3368721292513888,
        "rougel-163": 0.45077720207253885,
        "rougel-28": 0.4915254237288135,
        "rougel-6": 0.3235294117647059,
        "rougel-189": 0.4481792717086835,
        "rougel-70": 0.46153846153846156,
        "rougel-62": 0.5028248587570622,
        "rougel-57": 0.42564102564102574,
        "rougel-35": 0.3642384105960265,
        "rougel-188": 0.5314285714285714,
        "rougel-26": 0.3223684210526316,
        "rougel-173": 0.5072046109510087,
        "rougel-139": 0.5287356321839081,
        "rougel-22": 0.3432343234323433,
        "rougel-151": 0.4876543209876543,
        "rougel-108": 0.3160919540229885,
        "rougel-8": 0.5402298850574714,
        "rougel-7": 0.547550432276657,
        "rougel-23": 0.3355263157894737,
        "rougel-55": 0.5165165165165165,
        "rougel-59": 0.3301587301587302,
        "meteor-163": 0.4185500666067706,
        "meteor-28": 0.4008706429985056,
        "meteor-6": 0.30589504206023427,
        "meteor-189": 0.35604973374063287,
        "meteor-70": 0.3752127427891044,
        "meteor-62": 0.39980468315325046,
        "meteor-57": 0.37961585925386815,
        "meteor-35": 0.259251800777953,
        "meteor-188": 0.3978435679809185,
        "meteor-26": 0.2508002723937294,
        "meteor-173": 0.3750477530913844,
        "meteor-139": 0.3784968805815692,
        "meteor-22": 0.25329481698550216,
        "meteor-151": 0.3575110228822371,
        "meteor-108": 0.2995916332541682,
        "meteor-8": 0.39543894786335604,
        "meteor-7": 0.3778826482942563,
        "meteor-23": 0.2713229583117,
        "meteor-55": 0.3578373875749969,
        "meteor-59": 0.24663416898792945,
        "ruby-163": 0.24875621890547261,
        "ruby-28": 0.2810810810810811,
        "ruby-6": 0.19730941704035876,
        "ruby-189": 0.254054054054054,
        "ruby-70": 0.2594594594594595,
        "ruby-62": 0.31351351351351353,
        "ruby-57": 0.2195121951219512,
        "ruby-35": 0.22162162162162158,
        "ruby-188": 0.34594594594594597,
        "ruby-26": 0.18918918918918914,
        "ruby-173": 0.3675675675675676,
        "ruby-139": 0.39459459459459456,
        "ruby-22": 0.18918918918918914,
        "ruby-151": 0.3297297297297297,
        "ruby-108": 0.16216216216216217,
        "ruby-8": 0.3621621621621621,
        "ruby-7": 0.4162162162162162,
        "ruby-23": 0.19999999999999996,
        "ruby-55": 0.39459459459459456,
        "ruby-59": 0.17837837837837833,
        "codebertscore_f1-163": 0.816588282585144,
        "codebertscore_f3-163": 0.8299126029014587,
        "codebertscore_f1-28": 0.8151596784591675,
        "codebertscore_f3-28": 0.8232822418212891,
        "codebertscore_f1-6": 0.7616772651672363,
        "codebertscore_f3-6": 0.759177565574646,
        "codebertscore_f1-189": 0.7939325571060181,
        "codebertscore_f3-189": 0.8022413849830627,
        "codebertscore_f1-70": 0.8147672414779663,
        "codebertscore_f3-70": 0.8218191862106323,
        "codebertscore_f1-62": 0.8192890882492065,
        "codebertscore_f3-62": 0.8262202143669128,
        "codebertscore_f1-57": 0.7947448492050171,
        "codebertscore_f3-57": 0.8073484897613525,
        "codebertscore_f1-35": 0.7636194825172424,
        "codebertscore_f3-35": 0.7645816206932068,
        "codebertscore_f1-188": 0.823655903339386,
        "codebertscore_f3-188": 0.8286249041557312,
        "codebertscore_f1-26": 0.7431519627571106,
        "codebertscore_f3-26": 0.7267647385597229,
        "codebertscore_f1-173": 0.7855480313301086,
        "codebertscore_f3-173": 0.7859634160995483,
        "codebertscore_f1-139": 0.8177041411399841,
        "codebertscore_f3-139": 0.8200841546058655,
        "codebertscore_f1-22": 0.7541149854660034,
        "codebertscore_f3-22": 0.746044933795929,
        "codebertscore_f1-151": 0.7791911959648132,
        "codebertscore_f3-151": 0.7829875349998474,
        "codebertscore_f1-108": 0.7545198202133179,
        "codebertscore_f3-108": 0.7545075416564941,
        "codebertscore_f1-8": 0.835087239742279,
        "codebertscore_f3-8": 0.8353956341743469,
        "codebertscore_f1-7": 0.8217845559120178,
        "codebertscore_f3-7": 0.8256970047950745,
        "codebertscore_f1-23": 0.7403931617736816,
        "codebertscore_f3-23": 0.7299177646636963,
        "codebertscore_f1-55": 0.795316755771637,
        "codebertscore_f3-55": 0.7883817553520203,
        "codebertscore_f1-59": 0.7511579394340515,
        "codebertscore_f3-59": 0.7446608543395996,
        "codebertscore_s_f1-163": 0.8218032121658325,
        "codebertscore_s_f3-163": 0.8376638889312744,
        "codebertscore_s_f1-28": 0.8145133852958679,
        "codebertscore_s_f3-28": 0.8232862949371338,
        "codebertscore_s_f1-6": 0.7648849487304688,
        "codebertscore_s_f3-6": 0.7613754272460938,
        "codebertscore_s_f1-189": 0.7961722016334534,
        "codebertscore_s_f3-189": 0.804706335067749,
        "codebertscore_s_f1-70": 0.816940188407898,
        "codebertscore_s_f3-70": 0.8257631659507751,
        "codebertscore_s_f1-62": 0.8266407251358032,
        "codebertscore_s_f3-62": 0.8325276970863342,
        "codebertscore_s_f1-57": 0.8033463358879089,
        "codebertscore_s_f3-57": 0.8150546550750732,
        "codebertscore_s_f1-35": 0.773287832736969,
        "codebertscore_s_f3-35": 0.7768744230270386,
        "codebertscore_s_f1-188": 0.8292135000228882,
        "codebertscore_s_f3-188": 0.8376598954200745,
        "codebertscore_s_f1-26": 0.7586347460746765,
        "codebertscore_s_f3-26": 0.742513120174408,
        "codebertscore_s_f1-173": 0.7936670780181885,
        "codebertscore_s_f3-173": 0.7975720763206482,
        "codebertscore_s_f1-139": 0.8243637681007385,
        "codebertscore_s_f3-139": 0.8298667669296265,
        "codebertscore_s_f1-22": 0.7631158828735352,
        "codebertscore_s_f3-22": 0.754587709903717,
        "codebertscore_s_f1-151": 0.7974103093147278,
        "codebertscore_s_f3-151": 0.8062615394592285,
        "codebertscore_s_f1-108": 0.7610495686531067,
        "codebertscore_s_f3-108": 0.7628599405288696,
        "codebertscore_s_f1-8": 0.8377974033355713,
        "codebertscore_s_f3-8": 0.8405029773712158,
        "codebertscore_s_f1-7": 0.8230164051055908,
        "codebertscore_s_f3-7": 0.8309130668640137,
        "codebertscore_s_f1-23": 0.7588215470314026,
        "codebertscore_s_f3-23": 0.7477660179138184,
        "codebertscore_s_f1-55": 0.8057656288146973,
        "codebertscore_s_f3-55": 0.8006172180175781,
        "codebertscore_s_f1-59": 0.757391095161438,
        "codebertscore_s_f3-59": 0.7515462040901184,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nlong add(long x, long y) {\n",
        "snippet": [
            "    return x+y;\n}\n"
        ],
        "simplified": "Add two numbers x and y",
        "task_id": "53",
        "137": "assert (x >=0 && y >= 0);\n\tif (x==0) return y;\n\tif (y==0) return x;\n\tint carry = (x & y) << 1;\n\tint sum = x ^ y;\n\treturn add(sum, carry);",
        "grade-137": {
            "execution": 1
        },
        "16": "if (y == 0) {\n\t\treturn x;\n\t}\n\tif (x == 0) {\n\t\treturn y;\n\t}\n\treturn add(x ^ y, (x & y) << 1);",
        "grade-16": {
            "execution": 1
        },
        "3": "//TODO: Add your code here\n\treturn x+y;",
        "grade-3": {
            "execution": 1
        },
        "163": "// Your code here\n    while(y!=0){\n        long sum = x^y;\n        long carry = (x&y)<<1;\n        x = sum;\n        y = carry;\n    }\n    return x;",
        "grade-163": {
            "execution": 1
        },
        "46": "long result = x + y;\n\treturn result;",
        "grade-46": {
            "execution": 1
        },
        "39": "if (y == 0) {\n\t\treturn x;\n\t}\n\tlong sum = x ^ y;\n\tlong carry = (x & y) << 1;\n\treturn add(sum, carry);",
        "grade-39": {
            "execution": 1
        },
        "34": "long carry;\n  while (y != 0) {\n    carry = x & y;\n    x = x ^ y;\n    y = carry << 1;\n  }\n  return x;",
        "grade-34": {
            "execution": 1
        },
        "20": "long result = x + y;\n  return result;",
        "grade-20": {
            "execution": 1
        },
        "15": "// TODO\n    if(x<0 && y<0)\n    {\n        return -(add(-x,-y));\n    }\n    long result=0;\n    long carry=0;\n    long i;\n    for(i=0;i<64;i++)\n    {\n        long m=x&1;\n        long n=y&1;\n        x=x>>1;\n        y=y>>1;\n        long p=m&n;\n        long q=m^n;\n        long r=carry&q;\n        carry=p|r;\n        q=q^r;\n        result=result|(q<<i);\n    }\n    return result;",
        "grade-15": {
            "execution": 0
        },
        "152": "// >>> YOUR CODE HERE <<<\n    if(y==0)\n    \treturn x;\n    return add(x^y,(x&y)<<1);",
        "grade-152": {
            "execution": 1
        },
        "111": "assert(sizeof(long) == 8);\n\treturn x + y;",
        "grade-111": {
            "execution": 1
        },
        "13": "// Write code here\n    return x+y;",
        "grade-13": {
            "execution": 1
        },
        "128": "// Add x and y\n\treturn x + y;",
        "grade-128": {
            "execution": 1
        },
        "80": "// Write your code here\n\treturn x + y;",
        "grade-80": {
            "execution": 1
        },
        "4": "long res;\n  __asm__(R\"(\n  .intel_syntax noprefix\n  mov eax, %1\n  add eax, %2\n  mov %0, eax\n  )\"\n      : \"=r\"(res)\n      : \"r\"(x), \"r\"(y)\n      : \"eax\"\n      );\n  return res;",
        "grade-4": {
            "execution": 0
        },
        "32": "long ans = x;\n  long carry = y;\n  while (carry != 0) {\n    long t = ans;\n    ans = ans ^ carry;\n    carry = (t & carry) << 1;\n  }\n  return ans;",
        "grade-32": {
            "execution": 1
        },
        "36": "// Implement this!!!\n  // Example: the following adds two numbers.\n  return x + y;",
        "grade-36": {
            "execution": 1
        },
        "99": "// TODO: Write your code here\n\tif (y == 0)\n\t\treturn x;\n\tint sum = x ^ y;\n\tint carry = (x & y) << 1;\n\treturn add(sum, carry);",
        "grade-99": {
            "execution": 1
        },
        "133": "long result = 0;\n\tfor (int i = 0; i < y; i++) {\n\t\tresult += x;\n\t}\n\treturn result;",
        "grade-133": {
            "execution": 0
        },
        "113": "long result = x + y;\n    return result;",
        "grade-113": {
            "execution": 1
        },
        "bleu-137": 0.016809690889630954,
        "bleu-16": 0.04191237806232999,
        "bleu-3": 0.2891784933232572,
        "bleu-163": 0.027543032097479134,
        "bleu-46": 0.2777619034011791,
        "bleu-39": 0.031218512855465157,
        "bleu-34": 0.036026675331514026,
        "bleu-20": 0.2777619034011791,
        "bleu-15": 0.007077098835661226,
        "bleu-152": 0.02304907678117588,
        "bleu-111": 0.22894156860669912,
        "bleu-13": 0.39281465090051304,
        "bleu-128": 0.3508439695638686,
        "bleu-80": 0.3508439695638686,
        "bleu-4": 0.00869729662980301,
        "bleu-32": 0.024887938988772416,
        "bleu-36": 0.16169214353455807,
        "bleu-99": 0.022996104098636838,
        "bleu-133": 0.038860873003702515,
        "bleu-113": 0.2777619034011791,
        "codebleu-137": 0.4,
        "codebleu-16": 0.5499999999999999,
        "codebleu-3": 0.654823594767783,
        "codebleu-163": 0.4166666666666667,
        "codebleu-46": 0.5813305294122251,
        "codebleu-39": 0.48333333333333334,
        "codebleu-34": 0.4166666666666667,
        "codebleu-20": 0.5813305294122251,
        "codebleu-15": 0.5,
        "codebleu-152": 0.4,
        "codebleu-111": 0.6482527159459844,
        "codebleu-13": 0.6648630822205428,
        "codebleu-128": 0.6609747262777645,
        "codebleu-80": 0.6609747262777645,
        "codebleu-4": 0.4,
        "codebleu-32": 0.4166666666666667,
        "codebleu-36": 0.5068333742979481,
        "codebleu-99": 0.4,
        "codebleu-133": 0.5,
        "codebleu-113": 0.5813305294122251,
        "chrf-137": 0.18484302821172155,
        "chrf-16": 0.2906681390274792,
        "chrf-3": 0.5860044364676361,
        "chrf-163": 0.23992271748158953,
        "chrf-46": 0.4053513950483073,
        "chrf-39": 0.25485397080911687,
        "chrf-34": 0.2878922011943388,
        "chrf-20": 0.4053513950483073,
        "chrf-15": 0.09211384747188836,
        "chrf-152": 0.2568676287493902,
        "chrf-111": 0.5681928485824779,
        "chrf-13": 0.6583218111711788,
        "chrf-128": 0.7221679921658031,
        "chrf-80": 0.6149363700487119,
        "chrf-4": 0.13643824914763378,
        "chrf-32": 0.1756517611960466,
        "chrf-36": 0.38642815886468335,
        "chrf-99": 0.20121255434326846,
        "chrf-133": 0.25001528772966347,
        "chrf-113": 0.4053513950483073,
        "rougel-137": 0.11940298507462688,
        "rougel-16": 0.21276595744680848,
        "rougel-3": 0.5263157894736842,
        "rougel-163": 0.16,
        "rougel-46": 0.5,
        "rougel-39": 0.17777777777777778,
        "rougel-34": 0.2,
        "rougel-20": 0.5,
        "rougel-15": 0.08633093525179857,
        "rougel-152": 0.18181818181818182,
        "rougel-111": 0.45454545454545453,
        "rougel-13": 0.625,
        "rougel-128": 0.5882352941176471,
        "rougel-80": 0.5882352941176471,
        "rougel-4": 0.09230769230769231,
        "rougel-32": 0.16,
        "rougel-36": 0.35714285714285715,
        "rougel-99": 0.1568627450980392,
        "rougel-133": 0.16666666666666669,
        "rougel-113": 0.5,
        "meteor-137": 0.17391304347826092,
        "meteor-16": 0.26315789473684215,
        "meteor-3": 0.7432835820895523,
        "meteor-163": 0.379591836734694,
        "meteor-46": 0.696875,
        "meteor-39": 0.2688172043010753,
        "meteor-34": 0.4227272727272728,
        "meteor-20": 0.696875,
        "meteor-15": 0.16042780748663102,
        "meteor-152": 0.21739130434782608,
        "meteor-111": 0.7114285714285715,
        "meteor-13": 0.778125,
        "meteor-128": 0.7661538461538462,
        "meteor-80": 0.7661538461538462,
        "meteor-4": 0.17699115044247787,
        "meteor-32": 0.2551020408163266,
        "meteor-36": 0.6552631578947369,
        "meteor-99": 0.20202020202020202,
        "meteor-133": 0.35714285714285715,
        "meteor-113": 0.696875,
        "ruby-137": 0.06557377049180324,
        "ruby-16": 0.12195121951219512,
        "ruby-3": 0.3076923076923077,
        "ruby-163": 0.09090909090909094,
        "ruby-46": 0.4,
        "ruby-39": 0.10256410256410253,
        "ruby-34": 0.11764705882352944,
        "ruby-20": 0.4,
        "ruby-15": 0.045112781954887216,
        "ruby-152": 0.07894736842105265,
        "ruby-111": 0.25,
        "ruby-13": 0.4,
        "ruby-128": 0.36363636363636365,
        "ruby-80": 0.36363636363636365,
        "ruby-4": 0.05084745762711862,
        "ruby-32": 0.09090909090909094,
        "ruby-36": 0.18181818181818177,
        "ruby-99": 0.0888888888888889,
        "ruby-133": 0.09999999999999998,
        "ruby-113": 0.4,
        "codebertscore_f1-137": 0.7333002686500549,
        "codebertscore_f3-137": 0.7662949562072754,
        "codebertscore_f1-16": 0.7764884829521179,
        "codebertscore_f3-16": 0.7955426573753357,
        "codebertscore_f1-3": 0.8013625741004944,
        "codebertscore_f3-3": 0.9202767610549927,
        "codebertscore_f1-163": 0.742868185043335,
        "codebertscore_f3-163": 0.790563702583313,
        "codebertscore_f1-46": 0.8729314208030701,
        "codebertscore_f3-46": 0.9111706614494324,
        "codebertscore_f1-39": 0.7681986689567566,
        "codebertscore_f3-39": 0.8004363775253296,
        "codebertscore_f1-34": 0.7799493074417114,
        "codebertscore_f3-34": 0.7967726588249207,
        "codebertscore_f1-20": 0.862509548664093,
        "codebertscore_f3-20": 0.9010233879089355,
        "codebertscore_f1-15": 0.6314072012901306,
        "codebertscore_f3-15": 0.7294642329216003,
        "codebertscore_f1-152": 0.7618129253387451,
        "codebertscore_f3-152": 0.8012657165527344,
        "codebertscore_f1-111": 0.8285334706306458,
        "codebertscore_f3-111": 0.8883665800094604,
        "codebertscore_f1-13": 0.8632857799530029,
        "codebertscore_f3-13": 0.9322790503501892,
        "codebertscore_f1-128": 0.859643280506134,
        "codebertscore_f3-128": 0.8897333741188049,
        "codebertscore_f1-80": 0.8083794713020325,
        "codebertscore_f3-80": 0.8974541425704956,
        "codebertscore_f1-4": 0.6591824293136597,
        "codebertscore_f3-4": 0.7333174347877502,
        "codebertscore_f1-32": 0.7361219525337219,
        "codebertscore_f3-32": 0.7716018557548523,
        "codebertscore_f1-36": 0.7893812656402588,
        "codebertscore_f3-36": 0.8749025464057922,
        "codebertscore_f1-99": 0.7364972829818726,
        "codebertscore_f3-99": 0.7920564413070679,
        "codebertscore_f1-133": 0.7729048728942871,
        "codebertscore_f3-133": 0.8292183876037598,
        "codebertscore_f1-113": 0.8638368248939514,
        "codebertscore_f3-113": 0.9024840593338013,
        "codebertscore_s_f1-137": 0.770747721195221,
        "codebertscore_s_f3-137": 0.8160855174064636,
        "codebertscore_s_f1-16": 0.8096873164176941,
        "codebertscore_s_f3-16": 0.8374481201171875,
        "codebertscore_s_f1-3": 0.8058804273605347,
        "codebertscore_s_f3-3": 0.9426090121269226,
        "codebertscore_s_f1-163": 0.7617161273956299,
        "codebertscore_s_f3-163": 0.8251707553863525,
        "codebertscore_s_f1-46": 0.8886470198631287,
        "codebertscore_s_f3-46": 0.9254519939422607,
        "codebertscore_s_f1-39": 0.8012880086898804,
        "codebertscore_s_f3-39": 0.8454430103302002,
        "codebertscore_s_f1-34": 0.7958280444145203,
        "codebertscore_s_f3-34": 0.8257495760917664,
        "codebertscore_s_f1-20": 0.8842450380325317,
        "codebertscore_s_f3-20": 0.920526921749115,
        "codebertscore_s_f1-15": 0.6666637063026428,
        "codebertscore_s_f3-15": 0.781317412853241,
        "codebertscore_s_f1-152": 0.7800293564796448,
        "codebertscore_s_f3-152": 0.8342098593711853,
        "codebertscore_s_f1-111": 0.8518486022949219,
        "codebertscore_s_f3-111": 0.9336199164390564,
        "codebertscore_s_f1-13": 0.8733944296836853,
        "codebertscore_s_f3-13": 0.9569658041000366,
        "codebertscore_s_f1-128": 0.8921792507171631,
        "codebertscore_s_f3-128": 0.9364868998527527,
        "codebertscore_s_f1-80": 0.8260758519172668,
        "codebertscore_s_f3-80": 0.9241554737091064,
        "codebertscore_s_f1-4": 0.6632391214370728,
        "codebertscore_s_f3-4": 0.7462221384048462,
        "codebertscore_s_f1-32": 0.7526785135269165,
        "codebertscore_s_f3-32": 0.7911871671676636,
        "codebertscore_s_f1-36": 0.7983421087265015,
        "codebertscore_s_f3-36": 0.9083319902420044,
        "codebertscore_s_f1-99": 0.7588433623313904,
        "codebertscore_s_f3-99": 0.8281875848770142,
        "codebertscore_s_f1-133": 0.7747015357017517,
        "codebertscore_s_f3-133": 0.8317830562591553,
        "codebertscore_s_f1-113": 0.8862124085426331,
        "codebertscore_s_f3-113": 0.9230076670646667,
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-20": 4,
        "raw_gpt35_nsnr-20": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-152": 0,
        "raw_gpt35_nsnr-152": "3 - The code snippet implements the addition of two numbers using bitwise operations. It handles the case where one of the numbers is 0, but it does not handle negative numbers or overflow cases. It passes most of the possible tests, but may fail in some edge cases.",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-128": 4,
        "raw_gpt35_nsnr-128": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-99": 4,
        "raw_gpt35_nsnr-99": "4",
        "gpt35_nsnr-133": 4,
        "raw_gpt35_nsnr-133": "4",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nswr-137": 4,
        "raw_gpt35_nswr-137": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-46": 3,
        "raw_gpt35_nswr-46": "3",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-20": 4,
        "raw_gpt35_nswr-20": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-111": 4,
        "raw_gpt35_nswr-111": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-128": 4,
        "raw_gpt35_nswr-128": "4",
        "gpt35_nswr-80": 4,
        "raw_gpt35_nswr-80": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-99": 3,
        "raw_gpt35_nswr-99": "3",
        "gpt35_nswr-133": 4,
        "raw_gpt35_nswr-133": "4",
        "gpt35_nswr-113": 4,
        "raw_gpt35_nswr-113": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nstd::string make_palindrome(std::string string) {\n",
        "snippet": [
            "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n"
        ],
        "simplified": "Test if given string is a palindrome",
        "task_id": "10",
        "163": "int length = string.length();\n\tstd::string result = string;\n\tfor (int i = length - 1; i >= 0; i--) {\n\t\tstd::string substring = string.substr(i, length - i);\n\t\tstd::string reverse = substring;\n\t\tstd::reverse(reverse.begin(), reverse.end());\n\t\tif (substring == reverse) {\n\t\t\tresult.append(string.substr(0, i));\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
        "grade-163": {
            "execution": 0
        },
        "28": "auto palindrome_suffix = longest_palindrome_suffix(string);\n    assert(palindrome_suffix.length() <= string.length());\n    if (palindrome_suffix.length() == string.length()) {\n        return string;\n    }\n    std::string reversed_prefix = string.substr(0, string.length() - palindrome_suffix.length());\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return reversed_prefix + string;",
        "grade-28": {
            "execution": 0
        },
        "6": "assert(!string.empty());\n  auto it = string.begin();\n  bool even = true;\n  auto middle = it + string.size() / 2;\n  if(string.size() % 2) {\n    even = false;\n    middle = it + string.size() / 2 + 1;\n  }\n  for(;middle != string.end();++it,++middle) {\n    if(*it != *middle) {\n      if(even) {\n        it = string.begin();\n        middle = it + string.size() / 2;\n      } else {\n        it = string.begin();\n        middle = it + string.size() / 2 + 1;\n      }\n      even = !even;\n    }\n  }\n  std::reverse(string.begin(), it);\n  string.append(string.begin(), it);\n  return string;",
        "grade-6": {
            "execution": 0
        },
        "189": "int k = 0;\n    for (int i = 1; i < string.size(); ++i) {\n        int j = i;\n        while (j > 0 && string[j] == string[i - j]) --j;\n        if (i - j > k) k = i - j;\n    }\n    return string + std::string(string.rbegin(), string.rbegin() + k);",
        "grade-189": {
            "execution": 0
        },
        "70": "// Find the longest palindromic suffix\n    auto const end = std::begin(string);\n    auto const begin = std::prev(std::end(string));\n    auto const last = std::end(string);\n    for (auto it = begin; it != end; --it) {\n        if (std::equal(it, last, std::begin(string))) {\n            // Reverse of the prefix that comes before the palindromic suffix\n            auto prefix_begin = std::next(it);\n            auto prefix_end = last;\n            while (prefix_begin != prefix_end) {\n                std::iter_swap(prefix_begin, std::prev(prefix_end));\n                ++prefix_begin;\n                --prefix_end;\n            }\n            // Append the reverse of the prefix to the end of the string\n            std::copy(std::next(it), last, std::back_inserter(string));\n            return string;\n        }\n    }\n    // The entire string is a palindrome, so we return the original string twice\n    return string + string;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Trivial case.\n    if (string.empty()) {\n        return string;\n    }\n    // Preprocessing.\n    // Prefix function.\n    std::vector<int> pi(string.size());\n    pi[0] = 0;\n    for (int i = 1; i < string.size(); ++i) {\n        int j = pi[i - 1];\n        while (j > 0 && string[i] != string[j]) {\n            j = pi[j - 1];\n        }\n        if (string[i] == string[j]) {\n            ++j;\n        }\n        pi[i] = j;\n    }\n    // Find the longest prefix of the reverse of the string that is also a suffix of the string.\n    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n    int longest_prefix = pi[string.size() - 1];\n    // Concatenate the right part of the prefix of the string and the reverse of the left part of the prefix of the string.\n    // This forms a palindrome.\n    return string + reverse_string.substr(longest_prefix);",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<int> prefixes;\n\n  for (int index = 0; index < string.size(); ++index) {\n    int next_prefix = prefixes.size() > 0 ? prefixes.back() : 0;\n    while (next_prefix > 0 && string[index] != string[next_prefix]) {\n      next_prefix = prefixes[next_prefix - 1];\n    }\n    if (string[index] == string[next_prefix]) {\n      next_prefix++;\n    }\n    prefixes.push_back(next_prefix);\n  }\n\n  int end_prefix = prefixes.back();\n  std::string reverse = string.substr(end_prefix);\n  std::reverse(reverse.begin(), reverse.end());\n  return string + reverse;",
        "grade-57": {
            "execution": 0
        },
        "35": "// Find the longest palindromic suffix of a string.\n    std::string::iterator it_end_of_suffix =\n        std::find_if(string.begin(), string.end(),\n                     [string](auto c) {\n                         return !std::equal(string.begin(), string.end() - 1,\n                                            string.rbegin() + std::distance(string.begin(), &c));\n                     });\n    // Make string prefix that comes before palindromic suffix.\n    std::string::iterator it_start_of_prefix = string.begin();\n    std::string::iterator it_end_of_prefix = it_end_of_suffix;\n    std::reverse(it_start_of_prefix, it_end_of_prefix);\n    // Append reversed prefix to the end of the string.\n    string.append(it_start_of_prefix, it_end_of_prefix);\n    return string;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::string rev(string.rbegin(), string.rend());\n  std::string s = string + '#' + rev;\n  std::vector<int> f(s.size(), 0);\n  for (size_t i = 1; i < s.size(); ++i) {\n    int j = f[i - 1];\n    while (j > 0 && s[i] != s[j]) {\n      j = f[j - 1];\n    }\n    if (s[i] == s[j]) {\n      ++j;\n    }\n    f[i] = j;\n  }\n  return rev.substr(0, string.size() - f[s.size() - 1]) + string;",
        "grade-188": {
            "execution": 0
        },
        "26": "size_t string_length = string.length();\n    if (string_length == 0) {\n        return string;\n    }\n    // Find the longest palindromic suffix of the string.\n    // Example:\n    //    string = 'cat'\n    //    palindromic_suffix = ''\n    //    longest_palindromic_suffix = 't'\n    //    string = 'catac'\n    //    palindromic_suffix = 'ac'\n    //    longest_palindromic_suffix = 'c'\n    std::string palindromic_suffix;\n    std::string longest_palindromic_suffix;\n    while (palindromic_suffix.length() != string_length) {\n        palindromic_suffix = palindromic_suffix + string[string_length - 1];\n        if (string.length() >= palindromic_suffix.length() * 2 &&\n            string.substr(string.length() - palindromic_suffix.length() * 2, palindromic_suffix.length()) == palindromic_suffix) {\n            longest_palindromic_suffix = palindromic_suffix;\n        }\n        string_length -= 1;\n    }\n    // Find the prefix of the string that comes before the palindromic suffix.\n    // Example:\n    //    string = 'catac'\n    //    prefix = 'ca'\n    //    palindromic_suffix = 'c'\n    //    prefix_without_palindromic_suffix = 'ca'\n    //    string = 'cat'\n    //    prefix = 'ca'\n    //    palindromic_suffix = 't'\n    //    prefix_without_palindromic_suffix = 'c'\n    std::string prefix = string.substr(0, string.length() - longest_palindromic_suffix.length());\n    std::string prefix_without_palindromic_suffix = prefix.substr(0, prefix.length() - longest_palindromic_suffix.length());\n    //",
        "grade-26": {
            "execution": 0
        },
        "173": "assert(std::is_sorted(string.begin(), string.end()));\n  std::string mirror = string;\n  std::reverse(mirror.begin(), mirror.end());\n  std::string longest_palindrome_suffix =\n      *std::max_element(string.begin(), string.end(),\n        [&string, &mirror](char a, char b) {\n        return string.substr(a).compare(mirror.substr(b)) < 0;\n        });\n  return string + mirror.substr(longest_palindrome_suffix);",
        "grade-173": {
            "execution": 0
        },
        "139": "int length = string.length();\n    for (int i = length - 1; i >= 0; i--) {\n        if (string[0] == string[i]) {\n            bool is_palindrome = true;\n            for (int j = 0; j < i; j++) {\n                if (string[j] != string[i - j]) {\n                    is_palindrome = false;\n                    break;\n                }\n            }\n            if (is_palindrome) {\n                std::string result = string;\n                for (int j = length - 1; j >= i; j--) {\n                    result += string[j];\n                }\n                return result;\n            }\n        }\n    }\n    return string;",
        "grade-139": {
            "execution": 0
        },
        "22": "int longest_palindrome_begin_index = 0;\n    int longest_palindrome_length = 0;\n    // For each character index, find the longest palindrome beginning at that\n    // index that is centered on that index.  Note that this loop begins at\n    // index 1, since a string of length 1 is a palindrome.\n    for (int center_index = 1; center_index < string.length(); center_index++) {\n        // Find the palindrome centered on this character.\n        // Note that this loop only iterates if a palindrome with an even\n        // number of characters is found.\n        for (int palindrome_length = 0; center_index - palindrome_length >= 0 && center_index + palindrome_length < string.length(); palindrome_length++) {\n            if (string[center_index - palindrome_length] != string[center_index + palindrome_length]) {\n                break;\n            }\n            if (palindrome_length * 2 + 1 > longest_palindrome_length) {\n                longest_palindrome_begin_index = center_index - palindrome_length;\n                longest_palindrome_length = palindrome_length * 2 + 1;\n            }\n        }\n        // Find the palindrome centered between this character and the next\n        // character.\n        for (int palindrome_length = 0; center_index - palindrome_length >= 0 && center_index + palindrome_length + 1 < string.length(); palindrome_length++) {\n            if (string[center_index - palindrome_length] != string[center_index + palindrome_length + 1]) {\n                break;\n            }\n            if (palindrome_length * 2 + 2 > longest_palindrome_length) {\n                longest_palindrome_begin_index = center_index - palindrome_length;\n                longest_palindrome_length = palindrome_length * 2 + 2;\n            }\n        }\n    }\n    // Construct the shortest palindrome.\n    std::string palindrome;\n    palindrome.reserve(string.length()",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<int> z_values = Z(string);\n  int first_position = 0;\n  for (int i = 1; i < z_values.size(); ++i) {\n    if (z_values[i] + i == z_values.size()) {\n      first_position = i;\n      break;\n    }\n  }\n  std::string reversed = Reverse(string.substr(0, first_position));\n  return string + reversed;",
        "grade-151": {
            "execution": 0
        },
        "108": "if (string.empty()) {\n    return string;\n  }\n  std::string rstring(string.rbegin(), string.rend());\n  int i = string.size();\n  while (i && string.substr(0, i) != rstring.substr(string.size() - i)) {\n    --i;\n  }\n  return string + rstring.substr(i);",
        "grade-108": {
            "execution": 1
        },
        "8": "std::string result = string;\n    std::reverse(string.begin(), string.end());\n    std::size_t size = string.size();\n    // Build the prefix of the supplied string.\n    std::string prefix = string.substr(0, size);\n    // Find the maximum postfix that is a palindrome.\n    for (std::size_t i = 0; i < size; ++i) {\n        // Push a character from the prefix to the back of the result string.\n        result.push_back(prefix[i]);\n        // Check if the current postfix is a palindrome.\n        std::string postfix = result.substr(result.size() - i - 1);\n        if (prefix.substr(0, i + 1) == postfix) {\n            // If so, we are done.\n            return result;\n        }\n    }\n    // We get here if string is a palindrome.\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string temp = string;\n  std::reverse(temp.begin(), temp.end());\n  string += temp;\n  // the longest possible palindrome can't be longer than string.size() + 1\n  int const MAX_PALINDROME_LENGTH = string.size() + 1;\n  // dp[i][j] == true if substring string[i..j] is a palindrome\n  std::vector<std::vector<bool>> dp(MAX_PALINDROME_LENGTH, std::vector<bool>(MAX_PALINDROME_LENGTH, false));\n  // substring of length 1 is a palindrome\n  for (int i = 0; i < MAX_PALINDROME_LENGTH; ++i)\n    dp[i][i] = true;\n  // check larger substrings\n  for (int len = 2; len <= MAX_PALINDROME_LENGTH; ++len) {\n    for (int i = 0; i < MAX_PALINDROME_LENGTH - len + 1; ++i) {\n      int j = i + len - 1;\n      if (string[i] == string[j]) {\n        // substring must be a palindrome if its first and last characters are equal\n        // and the substring of length len - 2 (which contains all characters between those two) is a palindrome\n        dp[i][j] = len == 2 || dp[i + 1][j - 1];\n      }\n    }\n  }\n  // find the longest palindromic suffix of string\n  int palindrome_begin = 0;\n  int palindrome_length = 0;\n  for (int i = 0; i < MAX_PALINDROME_LENGTH; ++i) {\n    for (int j = i; j < MAX_PALINDROME_LENGTH; ++j) {\n      if (dp[i][j] && j - i + 1 > palindrome_length) {\n        palindrome_begin = i;\n        palindrome_length = j - i + 1;\n      }\n    }\n  }\n  // reverse a prefix before the pal",
        "grade-7": {
            "execution": 0
        },
        "23": "if (string.empty()) {\n        return \"\";\n    }\n    int n = string.size();\n    std::vector<std::vector<bool>> is_palindrome(n, std::vector<bool>(n, false));\n    // Loop from the beginning to the end of the string.\n    for (int i = 0; i < n; ++i) {\n        // From the i-th character from the beginning to the beginning of the string.\n        for (int j = 0; j <= i; ++j) {\n            // If all the characters are the same.\n            if (string[i] == string[j] && (i - j <= 2 || is_palindrome[i - 1][j + 1])) {\n                is_palindrome[i][j] = true;\n            }\n        }\n    }\n    // Find the longest palindromic suffix.\n    int max_j = 0;\n    int max_i = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j <= i; ++j) {\n            if (is_palindrome[i][j] && max_i - max_j < i - j) {\n                max_i = i;\n                max_j = j;\n            }\n        }\n    }\n    // Append the prefix and suffix.\n    std::string result = string;\n    for (int i = 0; i < max_j; ++i) {\n        result += string[max_j - i - 1];\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "size_t prefix_len = 0;\n  size_t suffix_len = 0;\n  for (size_t index = 0; index < string.size(); ++index) {\n    size_t prefix_i = index;\n    size_t suffix_i = string.size() - index - 1;\n    if (string[prefix_i] == string[suffix_i]) {\n      prefix_len = prefix_i + 1;\n      suffix_len = string.size() - suffix_i;\n    } else {\n      break;\n    }\n  }\n  return string + string.substr(prefix_len, string.size() - suffix_len - prefix_len).rbegin();",
        "grade-55": {
            "execution": 0
        },
        "59": "auto reverse_string = string;\n  std::reverse(reverse_string.begin(), reverse_string.end());\n  auto longest_common_suffix = std::string();\n  for (std::size_t i = 0; i < string.size(); ++i) {\n    if (string.substr(i) == reverse_string.substr(0, string.size() - i)) {\n      longest_common_suffix = string.substr(i);\n      break;\n    }\n  }\n  return string + reverse_string.substr(longest_common_suffix.size());",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.24668339219060162,
        "bleu-28": 0.1950952774397655,
        "bleu-6": 0.05854100566301521,
        "bleu-189": 0.14602695819901806,
        "bleu-70": 0.04246462031470045,
        "bleu-62": 0.06212023464158806,
        "bleu-57": 0.08642142799105715,
        "bleu-35": 0.05658829082609617,
        "bleu-188": 0.13489854166023432,
        "bleu-26": 0.06649430417656516,
        "bleu-173": 0.08694382948990877,
        "bleu-139": 0.10996213519636226,
        "bleu-22": 0.042213979244568704,
        "bleu-151": 0.15635945187787542,
        "bleu-108": 0.269414056022488,
        "bleu-8": 0.12031870090557714,
        "bleu-7": 0.04830965880764774,
        "bleu-23": 0.05322409981780377,
        "bleu-55": 0.09414303511199984,
        "bleu-59": 0.248676776144952,
        "codebleu-163": 0.5951011237470852,
        "codebleu-28": 0.5683395379759131,
        "codebleu-6": 0.6291457345012027,
        "codebleu-189": 0.49921643477228755,
        "codebleu-70": 0.5277712495103799,
        "codebleu-62": 0.6606282382257129,
        "codebleu-57": 0.6541920023935043,
        "codebleu-35": 0.5618317386181761,
        "codebleu-188": 0.679103969343346,
        "codebleu-26": 0.6041863011728208,
        "codebleu-173": 0.5856564763725945,
        "codebleu-139": 0.49034156033793846,
        "codebleu-22": 0.6263462781702169,
        "codebleu-151": 0.5092341571678213,
        "codebleu-108": 0.5783537467867423,
        "codebleu-8": 0.6564540513917898,
        "codebleu-7": 0.6359511377461093,
        "codebleu-23": 0.6290106719374443,
        "codebleu-55": 0.5755736426786607,
        "codebleu-59": 0.6667598287489342,
        "chrf-163": 0.3833039343762922,
        "chrf-28": 0.36206132684939535,
        "chrf-6": 0.2996153643179317,
        "chrf-189": 0.2859619420046323,
        "chrf-70": 0.2858612990748528,
        "chrf-62": 0.3221115635111195,
        "chrf-57": 0.3040744529091574,
        "chrf-35": 0.30706481097677313,
        "chrf-188": 0.3145649793507098,
        "chrf-26": 0.23457388751970643,
        "chrf-173": 0.40347676081128,
        "chrf-139": 0.3281027272069455,
        "chrf-22": 0.18094801961229023,
        "chrf-151": 0.2769486516866938,
        "chrf-108": 0.4176584748527369,
        "chrf-8": 0.3460104502959273,
        "chrf-7": 0.2430155471547376,
        "chrf-23": 0.2824754110502816,
        "chrf-55": 0.2791411709330147,
        "chrf-59": 0.37271337544485905,
        "rougel-163": 0.42512077294685985,
        "rougel-28": 0.49214659685863876,
        "rougel-6": 0.35789473684210527,
        "rougel-189": 0.4502617801047121,
        "rougel-70": 0.2636655948553055,
        "rougel-62": 0.28318584070796465,
        "rougel-57": 0.4032258064516129,
        "rougel-35": 0.2911877394636015,
        "rougel-188": 0.33460076045627374,
        "rougel-26": 0.24242424242424243,
        "rougel-173": 0.3669724770642202,
        "rougel-139": 0.33898305084745756,
        "rougel-22": 0.2469135802469136,
        "rougel-151": 0.4301075268817204,
        "rougel-108": 0.3804347826086957,
        "rougel-8": 0.29830508474576267,
        "rougel-7": 0.18526315789473685,
        "rougel-23": 0.22604422604422603,
        "rougel-55": 0.41346153846153855,
        "rougel-59": 0.46153846153846156,
        "meteor-163": 0.40917460670547096,
        "meteor-28": 0.4315195050553283,
        "meteor-6": 0.3778532302637723,
        "meteor-189": 0.33890847142613456,
        "meteor-70": 0.2925043827594502,
        "meteor-62": 0.33580500336895086,
        "meteor-57": 0.42427108144695586,
        "meteor-35": 0.30160501675653195,
        "meteor-188": 0.4011820443475863,
        "meteor-26": 0.3721973183511644,
        "meteor-173": 0.28686032239587594,
        "meteor-139": 0.2867059700825856,
        "meteor-22": 0.3089304296249451,
        "meteor-151": 0.36353664925890244,
        "meteor-108": 0.3327452512751404,
        "meteor-8": 0.3265869365225391,
        "meteor-7": 0.31507221293692844,
        "meteor-23": 0.3329411958224257,
        "meteor-55": 0.35102413099683993,
        "meteor-59": 0.40158895190086114,
        "ruby-163": 0.25,
        "ruby-28": 0.3535353535353535,
        "ruby-6": 0.23655913978494625,
        "ruby-189": 0.3232323232323232,
        "ruby-70": 0.16981132075471694,
        "ruby-62": 0.18333333333333335,
        "ruby-57": 0.2953020134228188,
        "ruby-35": 0.16049382716049387,
        "ruby-188": 0.20731707317073167,
        "ruby-26": 0.14141414141414144,
        "ruby-173": 0.2184873949579832,
        "ruby-139": 0.1897810218978102,
        "ruby-22": 0.1405228758169934,
        "ruby-151": 0.21212121212121215,
        "ruby-108": 0.23232323232323238,
        "ruby-8": 0.18367346938775508,
        "ruby-7": 0.10904255319148937,
        "ruby-23": 0.1428571428571429,
        "ruby-55": 0.2660550458715596,
        "ruby-59": 0.2018348623853211,
        "codebertscore_f1-163": 0.7867343425750732,
        "codebertscore_f3-163": 0.7818617224693298,
        "codebertscore_f1-28": 0.7730802893638611,
        "codebertscore_f3-28": 0.7703447341918945,
        "codebertscore_f1-6": 0.7109276652336121,
        "codebertscore_f3-6": 0.7169660925865173,
        "codebertscore_f1-189": 0.7718543410301208,
        "codebertscore_f3-189": 0.7596015334129333,
        "codebertscore_f1-70": 0.691596269607544,
        "codebertscore_f3-70": 0.7192181348800659,
        "codebertscore_f1-62": 0.7022244334220886,
        "codebertscore_f3-62": 0.7473706603050232,
        "codebertscore_f1-57": 0.7540015578269958,
        "codebertscore_f3-57": 0.7685695886611938,
        "codebertscore_f1-35": 0.6867010593414307,
        "codebertscore_f3-35": 0.7058954834938049,
        "codebertscore_f1-188": 0.7529268264770508,
        "codebertscore_f3-188": 0.7632694840431213,
        "codebertscore_f1-26": 0.6837397813796997,
        "codebertscore_f3-26": 0.7146899700164795,
        "codebertscore_f1-173": 0.7393577694892883,
        "codebertscore_f3-173": 0.7478107810020447,
        "codebertscore_f1-139": 0.757685661315918,
        "codebertscore_f3-139": 0.7541619539260864,
        "codebertscore_f1-22": 0.6755576729774475,
        "codebertscore_f3-22": 0.7058687806129456,
        "codebertscore_f1-151": 0.7620564103126526,
        "codebertscore_f3-151": 0.7633821964263916,
        "codebertscore_f1-108": 0.8105108737945557,
        "codebertscore_f3-108": 0.7931085824966431,
        "codebertscore_f1-8": 0.7318374514579773,
        "codebertscore_f3-8": 0.7630280256271362,
        "codebertscore_f1-7": 0.684668779373169,
        "codebertscore_f3-7": 0.7261772155761719,
        "codebertscore_f1-23": 0.7036206126213074,
        "codebertscore_f3-23": 0.7354809045791626,
        "codebertscore_f1-55": 0.7608616352081299,
        "codebertscore_f3-55": 0.774275004863739,
        "codebertscore_f1-59": 0.7821552157402039,
        "codebertscore_f3-59": 0.7851865291595459,
        "codebertscore_s_f1-163": 0.792138397693634,
        "codebertscore_s_f3-163": 0.7858995795249939,
        "codebertscore_s_f1-28": 0.7782001495361328,
        "codebertscore_s_f3-28": 0.7709661722183228,
        "codebertscore_s_f1-6": 0.710532546043396,
        "codebertscore_s_f3-6": 0.717859148979187,
        "codebertscore_s_f1-189": 0.7806031703948975,
        "codebertscore_s_f3-189": 0.7641807198524475,
        "codebertscore_s_f1-70": 0.697445273399353,
        "codebertscore_s_f3-70": 0.7202205657958984,
        "codebertscore_s_f1-62": 0.7362858653068542,
        "codebertscore_s_f3-62": 0.7717053890228271,
        "codebertscore_s_f1-57": 0.7600011825561523,
        "codebertscore_s_f3-57": 0.7752928137779236,
        "codebertscore_s_f1-35": 0.7018183469772339,
        "codebertscore_s_f3-35": 0.7192647457122803,
        "codebertscore_s_f1-188": 0.7600681781768799,
        "codebertscore_s_f3-188": 0.7691027522087097,
        "codebertscore_s_f1-26": 0.7252538800239563,
        "codebertscore_s_f3-26": 0.7414467930793762,
        "codebertscore_s_f1-173": 0.7423086166381836,
        "codebertscore_s_f3-173": 0.7481026649475098,
        "codebertscore_s_f1-139": 0.7721623182296753,
        "codebertscore_s_f3-139": 0.7566888928413391,
        "codebertscore_s_f1-22": 0.7089877128601074,
        "codebertscore_s_f3-22": 0.7234546542167664,
        "codebertscore_s_f1-151": 0.7663729190826416,
        "codebertscore_s_f3-151": 0.7655460238456726,
        "codebertscore_s_f1-108": 0.8176433444023132,
        "codebertscore_s_f3-108": 0.7993634939193726,
        "codebertscore_s_f1-8": 0.7351666688919067,
        "codebertscore_s_f3-8": 0.7631726861000061,
        "codebertscore_s_f1-7": 0.724443793296814,
        "codebertscore_s_f3-7": 0.7494136691093445,
        "codebertscore_s_f1-23": 0.7370439171791077,
        "codebertscore_s_f3-23": 0.7512902021408081,
        "codebertscore_s_f1-55": 0.7642080187797546,
        "codebertscore_s_f3-55": 0.7735570073127747,
        "codebertscore_s_f1-59": 0.7830758094787598,
        "codebertscore_s_f3-59": 0.7850404977798462,
        "gpt35_nsnr-163": 0,
        "raw_gpt35_nsnr-163": "3 - The code snippet correctly finds the longest palindromic suffix of the supplied string and appends the reverse of the prefix before it to create the shortest palindrome. However, it does not handle the case where the supplied string is already a palindrome (in which case the result should just be the supplied string).",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-151": 3,
        "raw_gpt35_nsnr-151": "3",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 2,
        "raw_gpt35_nswr-188": "2",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-151": 2,
        "raw_gpt35_nswr-151": "2",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n",
        "snippet": [
            "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n"
        ],
        "simplified": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
        "task_id": "151",
        "164": "",
        "grade-164": {
            "execution": 0
        },
        "28": "long i=0;\n    for(i=0;i<lst.size();i++)\n    {\n        if(lst[i]>0 && lst[i]==(int)lst[i])\n        {\n            if(lst[i]%2==1)\n            {\n                lst[i]=lst[i]*lst[i];\n            }\n            else\n            {\n                lst[i]=0;\n            }\n        }\n        else\n        {\n            lst[i]=0;\n        }\n    }\n    return lst[i];",
        "grade-28": {
            "execution": 0
        },
        "6": "long sum = 0;\n    for(float &i : lst) {\n        if(i < 0) {\n            continue;\n        }\n        long t = (long)i;\n        if(t != i) {\n            continue;\n        }\n        if(t % 2 == 1) {\n            sum += t * t;\n        }\n    }\n    return sum;",
        "grade-6": {
            "execution": 1
        },
        "191": "std::vector<float> result;\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > 0 && std::floor(lst[i]) == lst[i]) {\n\t\t\tresult.push_back(lst[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < result.size(); i++) {\n\t\tif (result[i] % 2 != 0) {\n\t\t\tsum += result[i] * result[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-191": {
            "execution": 0
        },
        "70": "int len = lst.size();\n  int sum = 0;\n  for(int i = 0; i < len; i++) {\n    if (lst[i] > 0 && lst[i] == int(lst[i])) {\n      if (lst[i] % 2 != 0) {\n        sum += (lst[i] * lst[i]);\n      }\n    }\n  }\n  return sum;",
        "grade-70": {
            "execution": 0
        },
        "62": "int sum=0;\n\tif(lst.size()==0)\n\t\treturn 0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(lst[i]>0)\n\t\t{\n\t\t\tif(lst[i]-(int)lst[i]!=0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(lst[i]%2==0)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tsum+=lst[i]*lst[i];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tcontinue;\n\t}\n\treturn sum;",
        "grade-62": {
            "execution": 0
        },
        "57": "long sum = 0;\n  for (unsigned i = 0; i < lst.size(); i++) {\n    if (lst[i] < 0) continue;\n    if (std::floor(lst[i]) != lst[i]) continue;\n    if (lst[i] % 2 == 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;",
        "grade-57": {
            "execution": 0
        },
        "35": "long sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(fmod(lst[i],2)!=0)\n\t\t\tsum+=(lst[i]*lst[i]);\n\t}\n\treturn sum;",
        "grade-35": {
            "execution": 0
        },
        "190": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > 0 && fmod(lst[i], 2) == 1) {\n\t\t\tsum += pow(lst[i], 2);\n\t\t}\n\t}\n\treturn sum;",
        "grade-190": {
            "execution": 1
        },
        "26": "long sum=0;\n\tfor(auto x:lst)\n\t{\n\t\tint a=x;\n\t\tif(a>0 && a%2==1)\n\t\t{\n\t\t\tsum=sum+a*a;\n\t\t}\n\t}\n\treturn sum;",
        "grade-26": {
            "execution": 1
        },
        "174": "long sum = 0;\n    for(auto i: lst){\n        if(i<0)\n            continue;\n        if(i!=i/1)\n            continue;\n        if(i%2==0)\n            continue;\n        sum += i*i;\n    }\n    return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "long int sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(lst[i]>0 && lst[i]==(int)lst[i])\n    {\n        if(lst[i]%2==1)\n        {\n            sum+=lst[i]*lst[i];\n        }\n    }\n  }\n  return sum;",
        "grade-140": {
            "execution": 0
        },
        "22": "long double ans=0;\n    int len=lst.size();\n    if(len==0)\n        return 0;\n    for(int i=0;i<len;i++)\n    {\n        if(lst[i]>0 && floor(lst[i])==lst[i])\n        {\n            int value=(int)lst[i];\n            if(value%2!=0)\n            {\n                ans=ans+(value*value);\n            }\n        }\n    }\n    return ans;",
        "grade-22": {
            "execution": 1
        },
        "152": "long sum=0;\n  int l = lst.size();\n  for(int i=0;i<l;i++){\n    if(lst[i]>0 && (lst[i]-(int)lst[i])==0){\n      if(lst[i]%2!=0){\n        sum = sum + lst[i]*lst[i];\n      }\n    }\n  }\n  return sum;",
        "grade-152": {
            "execution": 0
        },
        "108": "if(lst.size() == 0)\n    {\n        return 0;\n    }\n    float sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0 && ceil(lst[i]) == lst[i])\n        {\n            if(lst[i] % 2 != 0)\n            {\n                sum += lst[i] * lst[i];\n            }\n        }\n    }\n    return sum;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<float>::iterator itr;\n  long sum = 0;\n  for(itr = lst.begin(); itr != lst.end(); itr++) {\n    if (*itr > 0 && (int)*itr == *itr) {\n      if (*itr % 2 != 0) {\n        sum += *itr * *itr;\n      }\n    }\n  }\n  return sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "",
        "grade-7": {
            "execution": 0
        },
        "23": "// variable to hold the sum\n\tfloat sum = 0;\n\t// iterate over the list\n\tfor (float i : lst) {\n\t\t// if number is odd and positive\n\t\tif (int(i) % 2 == 1 && i > 0) {\n\t\t\t// add square of number to sum\n\t\t\tsum += i * i;\n\t\t}\n\t}\n\t// return sum\n\treturn sum;",
        "grade-23": {
            "execution": 1
        },
        "55": "// your code here",
        "grade-55": {
            "execution": 0
        },
        "59": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if (fmod(lst[i], 2) == 1 && lst[i] > 0) {\n            long val = (long) lst[i];\n            sum += (val * val);\n        }\n    }\n    return sum;",
        "grade-59": {
            "execution": 1
        },
        "bleu-164": 0.0,
        "bleu-28": 0.44895682770955714,
        "bleu-6": 0.13866415598952414,
        "bleu-191": 0.4093241444628464,
        "bleu-70": 0.48618513693978976,
        "bleu-62": 0.48792524463123427,
        "bleu-57": 0.45723751062049317,
        "bleu-35": 0.32117599341472186,
        "bleu-190": 0.37048208973921676,
        "bleu-26": 0.08829083006508505,
        "bleu-174": 0.10511613650924435,
        "bleu-140": 0.5049030670583449,
        "bleu-22": 0.39758988287774366,
        "bleu-152": 0.4620670875419029,
        "bleu-108": 0.4921179473940368,
        "bleu-8": 0.1419810092115817,
        "bleu-7": 0.0,
        "bleu-23": 0.110621506058993,
        "bleu-55": 0.0,
        "bleu-59": 0.37246924564201067,
        "codebleu-164": 0.0,
        "codebleu-28": 0.5681884342894087,
        "codebleu-6": 0.3045091362538512,
        "codebleu-191": 0.6308446144036614,
        "codebleu-70": 0.5995691291301387,
        "codebleu-62": 0.6210697783666062,
        "codebleu-57": 0.5906237277603866,
        "codebleu-35": 0.39280731088254867,
        "codebleu-190": 0.42347150591668725,
        "codebleu-26": 0.2176342108581755,
        "codebleu-174": 0.2714257543086086,
        "codebleu-140": 0.5733923610883256,
        "codebleu-22": 0.5824210942730458,
        "codebleu-152": 0.6041843148676034,
        "codebleu-108": 0.6044949290087341,
        "codebleu-8": 0.390408795926201,
        "codebleu-7": 0.0,
        "codebleu-23": 0.3271838139167469,
        "codebleu-55": 0.01379310344827586,
        "codebleu-59": 0.46414132750998094,
        "chrf-164": 0.0,
        "chrf-28": 0.42004204454586963,
        "chrf-6": 0.25362714052693874,
        "chrf-191": 0.4691902831528105,
        "chrf-70": 0.49745946821387027,
        "chrf-62": 0.4866906735155321,
        "chrf-57": 0.48610560799287783,
        "chrf-35": 0.427017341156265,
        "chrf-190": 0.43884106873275125,
        "chrf-26": 0.20513421898575582,
        "chrf-174": 0.2419955543043055,
        "chrf-140": 0.5170690425286727,
        "chrf-22": 0.40174206431171927,
        "chrf-152": 0.4846670937599319,
        "chrf-108": 0.4851733688353125,
        "chrf-8": 0.263238624346794,
        "chrf-7": 0.0,
        "chrf-23": 0.2116368188165761,
        "chrf-55": 0.014519448546711843,
        "chrf-59": 0.43327424412679877,
        "rougel-164": 0,
        "rougel-28": 0.5904761904761905,
        "rougel-6": 0.40236686390532544,
        "rougel-191": 0.5851528384279477,
        "rougel-70": 0.6321243523316062,
        "rougel-62": 0.6415094339622641,
        "rougel-57": 0.6875,
        "rougel-35": 0.638036809815951,
        "rougel-190": 0.6432748538011696,
        "rougel-26": 0.36,
        "rougel-174": 0.45569620253164556,
        "rougel-140": 0.716577540106952,
        "rougel-22": 0.5024154589371981,
        "rougel-152": 0.6326530612244897,
        "rougel-108": 0.6435643564356436,
        "rougel-8": 0.38947368421052636,
        "rougel-7": 0,
        "rougel-23": 0.35555555555555557,
        "rougel-55": 0.0,
        "rougel-59": 0.6067415730337079,
        "meteor-164": 0.0,
        "meteor-28": 0.5448509072252589,
        "meteor-6": 0.31374520557862906,
        "meteor-191": 0.55055177871099,
        "meteor-70": 0.6627581571815719,
        "meteor-62": 0.6770323979173688,
        "meteor-57": 0.6472524007161459,
        "meteor-35": 0.48153993106025994,
        "meteor-190": 0.5268681490155572,
        "meteor-26": 0.25926616665006536,
        "meteor-174": 0.3419108439769597,
        "meteor-140": 0.6808145240431795,
        "meteor-22": 0.5451829399077643,
        "meteor-152": 0.6518730733371416,
        "meteor-108": 0.6454585368472661,
        "meteor-8": 0.3422252967789908,
        "meteor-7": 0.0,
        "meteor-23": 0.28638803315654077,
        "meteor-55": 0.0,
        "meteor-59": 0.49062984772005824,
        "ruby-164": 0.0,
        "ruby-28": 0.44339622641509435,
        "ruby-6": 0.2692307692307693,
        "ruby-191": 0.41600000000000004,
        "ruby-70": 0.45192307692307687,
        "ruby-62": 0.40740740740740744,
        "ruby-57": 0.5192307692307692,
        "ruby-35": 0.4807692307692307,
        "ruby-190": 0.5,
        "ruby-26": 0.23076923076923073,
        "ruby-174": 0.29807692307692313,
        "ruby-140": 0.5961538461538461,
        "ruby-22": 0.28846153846153844,
        "ruby-152": 0.4326923076923077,
        "ruby-108": 0.41346153846153844,
        "ruby-8": 0.17307692307692313,
        "ruby-7": 0.0,
        "ruby-23": 0.21153846153846156,
        "ruby-55": 0.0,
        "ruby-59": 0.47115384615384615,
        "codebertscore_f1-164": 0.0,
        "codebertscore_f3-164": 0.0,
        "codebertscore_f1-28": 0.8474339246749878,
        "codebertscore_f3-28": 0.8347212076187134,
        "codebertscore_f1-6": 0.7985168695449829,
        "codebertscore_f3-6": 0.7859632968902588,
        "codebertscore_f1-191": 0.8744330406188965,
        "codebertscore_f3-191": 0.8736873865127563,
        "codebertscore_f1-70": 0.9001630544662476,
        "codebertscore_f3-70": 0.8802801370620728,
        "codebertscore_f1-62": 0.8730897903442383,
        "codebertscore_f3-62": 0.8674639463424683,
        "codebertscore_f1-57": 0.8890490531921387,
        "codebertscore_f3-57": 0.8758158087730408,
        "codebertscore_f1-35": 0.9038429856300354,
        "codebertscore_f3-35": 0.8784558176994324,
        "codebertscore_f1-190": 0.8997963070869446,
        "codebertscore_f3-190": 0.8826212882995605,
        "codebertscore_f1-26": 0.8326354026794434,
        "codebertscore_f3-26": 0.8110827803611755,
        "codebertscore_f1-174": 0.8217937350273132,
        "codebertscore_f3-174": 0.8036550879478455,
        "codebertscore_f1-140": 0.9219774007797241,
        "codebertscore_f3-140": 0.8993345499038696,
        "codebertscore_f1-22": 0.8631583452224731,
        "codebertscore_f3-22": 0.8634473085403442,
        "codebertscore_f1-152": 0.9084761738777161,
        "codebertscore_f3-152": 0.8912782073020935,
        "codebertscore_f1-108": 0.8678807616233826,
        "codebertscore_f3-108": 0.8525606393814087,
        "codebertscore_f1-8": 0.800481915473938,
        "codebertscore_f3-8": 0.8150756359100342,
        "codebertscore_f1-7": 0.0,
        "codebertscore_f3-7": 0.0,
        "codebertscore_f1-23": 0.7866242527961731,
        "codebertscore_f3-23": 0.8054198026657104,
        "codebertscore_f1-55": 0.5180731415748596,
        "codebertscore_f3-55": 0.5074179172515869,
        "codebertscore_f1-59": 0.8901687264442444,
        "codebertscore_f3-59": 0.8797935843467712,
        "codebertscore_s_f1-164": 0,
        "codebertscore_s_f3-164": 0,
        "codebertscore_s_f1-28": 0.8668791651725769,
        "codebertscore_s_f3-28": 0.8505614399909973,
        "codebertscore_s_f1-6": 0.8153163194656372,
        "codebertscore_s_f3-6": 0.805959165096283,
        "codebertscore_s_f1-191": 0.875218391418457,
        "codebertscore_s_f3-191": 0.8781895041465759,
        "codebertscore_s_f1-70": 0.901813268661499,
        "codebertscore_s_f3-70": 0.8801668286323547,
        "codebertscore_s_f1-62": 0.8791398406028748,
        "codebertscore_s_f3-62": 0.8724467158317566,
        "codebertscore_s_f1-57": 0.8898805975914001,
        "codebertscore_s_f3-57": 0.8756155967712402,
        "codebertscore_s_f1-35": 0.9031639695167542,
        "codebertscore_s_f3-35": 0.8783325552940369,
        "codebertscore_s_f1-190": 0.899731457233429,
        "codebertscore_s_f3-190": 0.8829294443130493,
        "codebertscore_s_f1-26": 0.8329333066940308,
        "codebertscore_s_f3-26": 0.8111698627471924,
        "codebertscore_s_f1-174": 0.8242745995521545,
        "codebertscore_s_f3-174": 0.8105075359344482,
        "codebertscore_s_f1-140": 0.9225562810897827,
        "codebertscore_s_f3-140": 0.8996152281761169,
        "codebertscore_s_f1-22": 0.8748224973678589,
        "codebertscore_s_f3-22": 0.8747938871383667,
        "codebertscore_s_f1-152": 0.9099467396736145,
        "codebertscore_s_f3-152": 0.8923084735870361,
        "codebertscore_s_f1-108": 0.8835803866386414,
        "codebertscore_s_f3-108": 0.86717689037323,
        "codebertscore_s_f1-8": 0.8013472557067871,
        "codebertscore_s_f3-8": 0.8173050880432129,
        "codebertscore_s_f1-7": 0,
        "codebertscore_s_f3-7": 0,
        "codebertscore_s_f1-23": 0.7897726893424988,
        "codebertscore_s_f3-23": 0.8110074400901794,
        "codebertscore_s_f1-55": 0.4849092662334442,
        "codebertscore_s_f3-55": 0.46821215748786926,
        "codebertscore_s_f1-59": 0.8931642770767212,
        "codebertscore_s_f3-59": 0.8839592337608337,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 3,
        "raw_gpt35_nsnr-191": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 0,
        "raw_gpt35_nsnr-55": "3 - The code snippet correctly sums the squares of odd numbers in the list and ignores negative numbers and non-integers. However, the function is named \"double_the_difference\" which is not related to the problem description and may cause confusion. Additionally, the function returns a \"long\" instead of a \"long double\" as specified in the problem statement.",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nstd::string solve(std::string s) {\n",
        "snippet": [
            "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n"
        ],
        "simplified": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
        "task_id": "161",
        "164": "string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(isupper(s[i])) {\n                res += tolower(s[i]);\n            }\n            else {\n                res += toupper(s[i]);\n            }\n        }\n        else {\n            res += s[i];\n        }\n    }\n    if(isalpha(res[0])) {\n        return res;\n    }\n    reverse(res.begin(), res.end());\n    return res;",
        "grade-164": {
            "execution": 0
        },
        "28": "bool notFound = true;\n\t// iterate through the string\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t// if a letter is found, \n\t\tif (isalpha(s[i])) {\n\t\t\t// change the letter case and make notFound false\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t\tnotFound = false;\n\t\t}\n\t}\n\t// if no letters are found, reverse the string\n\tif (notFound) {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\treturn s;",
        "grade-28": {
            "execution": 1
        },
        "6": "if(s.empty()) return \"\";\n  for(char& c : s)\n    if(std::isalpha(c))\n      c = std::tolower(c) ^ 32;\n  if(std::all_of(s.begin(), s.end(), [](char c){return !std::isalpha(c);}))\n    std::reverse(s.begin(), s.end());\n  return s;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::string result;\n    for (char c : s) {\n        if (isalpha(c))\n            result += (char)tolower(c);\n        else \n            result += c;\n    }\n    return result;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::string result;\n\tif (s.size() == 0) return result;\n\tif (s.size() == 1) {\n\t\tchar temp = s[0];\n\t\tif (isalpha(temp)) {\n\t\t\tif (isupper(temp)) {\n\t\t\t\ttemp = tolower(temp);\n\t\t\t}\n\t\t\telse if (islower(temp)) {\n\t\t\t\ttemp = toupper(temp);\n\t\t\t}\n\t\t}\n\t\treturn std::string(1, temp);\n\t}\n\telse {\n\t\t// check if no letters\n\t\tbool check = true;\n\t\tfor (size_t i = 0; i < s.size(); i++) {\n\t\t\tif (isalpha(s[i])) {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (check) {\n\t\t\tfor (size_t i = s.size() - 1; i >= 0; i--) {\n\t\t\t\tresult += s[i];\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\tfor (size_t i = 0; i < s.size(); i++) {\n\t\t\t\tchar temp = s[i];\n\t\t\t\tif (isalpha(temp)) {\n\t\t\t\t\tif (isupper(temp)) {\n\t\t\t\t\t\ttemp = tolower(temp);\n\t\t\t\t\t}\n\t\t\t\t\telse if (islower(temp)) {\n\t\t\t\t\t\ttemp = toupper(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult += temp;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}",
        "grade-70": {
            "execution": 0
        },
        "62": "if(s.empty())\n    return \"\";\n    std::string result;\n    for(int i=0;i<s.length();i++)\n    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n            s[i]='A'+s[i]-'a';\n        }\n        else if(s[i]>='A' && s[i]<='Z')\n        {\n            s[i]='a'+s[i]-'A';\n        }\n    }\n    return s;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string result;\n    if (std::all_of(s.begin(), s.end(), ::isdigit))\n    {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for (size_t i = 0; i < s.size(); i++)\n    {\n        if (isalpha(s[i]))\n        {\n            if (isupper(s[i]))\n            {\n                result += std::tolower(s[i]);\n            }\n            else\n            {\n                result += std::toupper(s[i]);\n            }\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "int len = s.length();\n    if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n        }\n    }\n    return s;",
        "grade-35": {
            "execution": 0
        },
        "190": "for(int i = 0; i < s.size(); i++) {\n        if(islower(s[i])) s[i] = toupper(s[i]);\n        else if(isupper(s[i])) s[i] = tolower(s[i]);\n    }\n    return s;",
        "grade-190": {
            "execution": 0
        },
        "26": "std::reverse(s.begin(), s.end());\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (isupper(s[i])) {\n        s[i] = tolower(s[i]);\n      } else {\n        s[i] = toupper(s[i]);\n      }\n    }\n  }\n  return s;",
        "grade-26": {
            "execution": 0
        },
        "174": "int n = s.size();\n  for (int i = 0; i < n; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = 'A' + (s[i] - 'a');\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      s[i] = 'a' + (s[i] - 'A');\n    }\n  }\n  if (s.find_first_of(\"a-zA-Z\") == std::string::npos) {\n    return std::string(s.rbegin(), s.rend());\n  }\n  return s;",
        "grade-174": {
            "execution": 0
        },
        "139": "// your code goes here\n\tstd::string str = \"\";\n\tif (s.length() == 0)\n\t\treturn str;\n\tbool flag = true;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\n\t\t{\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\t{\n\t\t\tstr += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\n\t\t{\n\t\t\tstr += (char)(s[i] + 32);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr += s[i];\n\t\t}\n\t}\n\tif (flag)\n\t{\n\t\tstd::reverse(str.begin(), str.end());\n\t}\n\treturn str;",
        "grade-139": {
            "execution": 1
        },
        "22": "const int len = s.length();\n  int idx = 0;\n  while(idx < len) {\n    if(isalpha(s[idx])) {\n      break;\n    }\n    idx++;\n  }\n  for(int i = idx; i < len; i++) {\n    if(isalpha(s[i])) {\n      if(islower(s[i])) {\n        s[i] = toupper(s[i]);\n      } else {\n        s[i] = tolower(s[i]);\n      }\n    }\n  }\n  if(idx == len) {\n    int i = 0, j = len - 1;\n    while(i < j) {\n      std::swap(s[i], s[j]);\n      i++;\n      j--;\n    }\n  }\n  return s;",
        "grade-22": {
            "execution": 1
        },
        "152": "if(s.length() == 0)\n        return s;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    for(int i = 0; i < s.length(); i++) {\n        if(islower(s[i]))\n            s[i] = toupper(s[i]);\n        else if(isupper(s[i]))\n            s[i] = tolower(s[i]);\n    }\n    return s;",
        "grade-152": {
            "execution": 0
        },
        "108": "int n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\n            s[i] = 'A' + (s[i] - 'a');\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n            s[i] = 'a' + (s[i] - 'A');\n    }\n    return s;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<char> str_vec(s.begin(), s.end());\n  bool no_letter = true;\n  for (int i = 0; i < str_vec.size(); i++) {\n    if (isalpha(str_vec[i])) {\n      no_letter = false;\n      if (islower(str_vec[i])) {\n        str_vec[i] = toupper(str_vec[i]);\n      } else {\n        str_vec[i] = tolower(str_vec[i]);\n      }\n    }\n  }\n  if (no_letter) {\n    std::reverse(str_vec.begin(), str_vec.end());\n  }\n  std::string result(str_vec.begin(), str_vec.end());\n  return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string answer = \"\";\n    if (s.size() <= 1) return s;\n    if (!isalpha(s[0])) return s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) answer += s[i] ^ ' ';\n        else answer += s[i];\n    }\n    return answer;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string result = \"\";\n  bool is_letter = false;\n  for (auto c : s) {\n    if (std::isalpha(c)) {\n      is_letter = true;\n      if (std::isupper(c)) {\n        result += std::tolower(c);\n      } else {\n        result += std::toupper(c);\n      }\n    } else {\n      result += c;\n    }\n  }\n  if (!is_letter) {\n    std::reverse(std::begin(result), std::end(result));\n  }\n  return result;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string res = \"\";\n\tif (s.size() == 0)\n\t\treturn res;\n\tbool hasLetters = false;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\thasLetters = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!hasLetters) {\n\t\tfor (int i = s.size() - 1; i >= 0; i--) {\n\t\t\tres += s[i];\n\t\t}\n\t\treturn res;\n\t}\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\tres += toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\treturn res;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            ret += toupper(s[i]);\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n            ret += tolower(s[i]);\n        else\n            ret += s[i];\n    }\n    if (ret.size() == s.size())\n        return s;\n    return ret;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.2782714651319668,
        "bleu-28": 0.23931271267835982,
        "bleu-6": 0.1374542753310606,
        "bleu-191": 0.011098535341208424,
        "bleu-70": 0.13937037144217632,
        "bleu-62": 0.2693204143754732,
        "bleu-57": 0.2382906636847234,
        "bleu-35": 0.2173877697655659,
        "bleu-190": 0.1664436085612104,
        "bleu-26": 0.24326683385298398,
        "bleu-174": 0.24982519185824711,
        "bleu-139": 0.1938776575213555,
        "bleu-22": 0.17988049187178917,
        "bleu-152": 0.3021727349693389,
        "bleu-108": 0.20490651866620102,
        "bleu-8": 0.21859633229015443,
        "bleu-7": 0.24819121782396525,
        "bleu-23": 0.0783709375558257,
        "bleu-55": 0.20309294197791883,
        "bleu-59": 0.31241544318533904,
        "codebleu-164": 0.5135541094147964,
        "codebleu-28": 0.526563173424766,
        "codebleu-6": 0.41489646578496403,
        "codebleu-191": 0.14772221200637606,
        "codebleu-70": 0.6389154325354611,
        "codebleu-62": 0.4629603317781505,
        "codebleu-57": 0.5115767856407553,
        "codebleu-35": 0.4228937325713147,
        "codebleu-190": 0.32029929958620534,
        "codebleu-26": 0.4423884017570587,
        "codebleu-174": 0.5651265854565405,
        "codebleu-139": 0.6185057093195485,
        "codebleu-22": 0.5356288222108416,
        "codebleu-152": 0.5102967586868691,
        "codebleu-108": 0.3823089897437366,
        "codebleu-8": 0.5383889575403059,
        "codebleu-7": 0.414059336988511,
        "codebleu-23": 0.38697241608507804,
        "codebleu-55": 0.6017394467205166,
        "codebleu-59": 0.5156560055396479,
        "chrf-164": 0.30943435394666735,
        "chrf-28": 0.368923893199572,
        "chrf-6": 0.22759975172280156,
        "chrf-191": 0.1426838438756225,
        "chrf-70": 0.27194163246387676,
        "chrf-62": 0.2851110992465642,
        "chrf-57": 0.3069141244629074,
        "chrf-35": 0.2680986991463227,
        "chrf-190": 0.19985513130712504,
        "chrf-26": 0.26050201073411117,
        "chrf-174": 0.3288231220201918,
        "chrf-139": 0.38820637773427746,
        "chrf-22": 0.2613411422695588,
        "chrf-152": 0.34818788368385234,
        "chrf-108": 0.18542992145223758,
        "chrf-8": 0.33481409473736556,
        "chrf-7": 0.26873864414016924,
        "chrf-23": 0.25439948673305357,
        "chrf-55": 0.3016107206585139,
        "chrf-59": 0.316371395961305,
        "rougel-164": 0.4691358024691358,
        "rougel-28": 0.42909090909090913,
        "rougel-6": 0.3333333333333333,
        "rougel-191": 0.2619047619047619,
        "rougel-70": 0.3181818181818182,
        "rougel-62": 0.39215686274509803,
        "rougel-57": 0.31970260223048325,
        "rougel-35": 0.38317757009345793,
        "rougel-190": 0.42639593908629436,
        "rougel-26": 0.38009049773755654,
        "rougel-174": 0.4657534246575342,
        "rougel-139": 0.39153439153439157,
        "rougel-22": 0.3493150684931507,
        "rougel-152": 0.39330543933054396,
        "rougel-108": 0.3884297520661157,
        "rougel-8": 0.3971119133574007,
        "rougel-7": 0.3686635944700461,
        "rougel-23": 0.3553719008264463,
        "rougel-55": 0.3850931677018633,
        "rougel-59": 0.5019607843137255,
        "meteor-164": 0.37440985986720826,
        "meteor-28": 0.3528274797300477,
        "meteor-6": 0.2673396906463502,
        "meteor-191": 0.12708444145833916,
        "meteor-70": 0.36742551355605274,
        "meteor-62": 0.3032809987205724,
        "meteor-57": 0.3346912734092931,
        "meteor-35": 0.30382250493699325,
        "meteor-190": 0.23842416973563918,
        "meteor-26": 0.2707180997475786,
        "meteor-174": 0.4469633864466206,
        "meteor-139": 0.44737914038583604,
        "meteor-22": 0.3540731047387852,
        "meteor-152": 0.2910373568439254,
        "meteor-108": 0.2672217145928515,
        "meteor-8": 0.3433789297313884,
        "meteor-7": 0.337905572385204,
        "meteor-23": 0.25240236686390527,
        "meteor-55": 0.4130988628596284,
        "meteor-59": 0.4346244494931912,
        "ruby-164": 0.33333333333333337,
        "ruby-28": 0.31543624161073824,
        "ruby-6": 0.23809523809523814,
        "ruby-191": 0.16666666666666663,
        "ruby-70": 0.20740740740740737,
        "ruby-62": 0.2558139534883721,
        "ruby-57": 0.14685314685314688,
        "ruby-35": 0.23809523809523814,
        "ruby-190": 0.30952380952380953,
        "ruby-26": 0.24603174603174605,
        "ruby-174": 0.3012048192771084,
        "ruby-139": 0.2698412698412699,
        "ruby-22": 0.22289156626506024,
        "ruby-152": 0.18253968253968256,
        "ruby-108": 0.23809523809523814,
        "ruby-8": 0.26490066225165565,
        "ruby-7": 0.25396825396825395,
        "ruby-23": 0.18253968253968256,
        "ruby-55": 0.2806122448979592,
        "ruby-59": 0.34883720930232553,
        "codebertscore_f1-164": 0.7995083332061768,
        "codebertscore_f3-164": 0.782051146030426,
        "codebertscore_f1-28": 0.7801781892776489,
        "codebertscore_f3-28": 0.7883560657501221,
        "codebertscore_f1-6": 0.7291510105133057,
        "codebertscore_f3-6": 0.7170766592025757,
        "codebertscore_f1-191": 0.7469891905784607,
        "codebertscore_f3-191": 0.7216932773590088,
        "codebertscore_f1-70": 0.746619462966919,
        "codebertscore_f3-70": 0.7606652975082397,
        "codebertscore_f1-62": 0.8074315786361694,
        "codebertscore_f3-62": 0.7901207804679871,
        "codebertscore_f1-57": 0.7604427933692932,
        "codebertscore_f3-57": 0.7530583143234253,
        "codebertscore_f1-35": 0.8009538054466248,
        "codebertscore_f3-35": 0.7698328495025635,
        "codebertscore_f1-190": 0.7847405076026917,
        "codebertscore_f3-190": 0.7470195889472961,
        "codebertscore_f1-26": 0.7953920364379883,
        "codebertscore_f3-26": 0.7643701434135437,
        "codebertscore_f1-174": 0.8073042035102844,
        "codebertscore_f3-174": 0.8057499527931213,
        "codebertscore_f1-139": 0.7943673133850098,
        "codebertscore_f3-139": 0.7945896983146667,
        "codebertscore_f1-22": 0.7650995254516602,
        "codebertscore_f3-22": 0.7612089514732361,
        "codebertscore_f1-152": 0.7916788458824158,
        "codebertscore_f3-152": 0.7683389186859131,
        "codebertscore_f1-108": 0.8043754696846008,
        "codebertscore_f3-108": 0.7803134322166443,
        "codebertscore_f1-8": 0.7813805341720581,
        "codebertscore_f3-8": 0.7814173102378845,
        "codebertscore_f1-7": 0.809097170829773,
        "codebertscore_f3-7": 0.7785996198654175,
        "codebertscore_f1-23": 0.757592499256134,
        "codebertscore_f3-23": 0.7609128952026367,
        "codebertscore_f1-55": 0.7872490882873535,
        "codebertscore_f3-55": 0.7750364542007446,
        "codebertscore_f1-59": 0.821313202381134,
        "codebertscore_f3-59": 0.8008084297180176,
        "codebertscore_s_f1-164": 0.8078823685646057,
        "codebertscore_s_f3-164": 0.7930750250816345,
        "codebertscore_s_f1-28": 0.7786120176315308,
        "codebertscore_s_f3-28": 0.7877867221832275,
        "codebertscore_s_f1-6": 0.7345036268234253,
        "codebertscore_s_f3-6": 0.7223042249679565,
        "codebertscore_s_f1-191": 0.7524297833442688,
        "codebertscore_s_f3-191": 0.7297603487968445,
        "codebertscore_s_f1-70": 0.7570551633834839,
        "codebertscore_s_f3-70": 0.7707036733627319,
        "codebertscore_s_f1-62": 0.8172276616096497,
        "codebertscore_s_f3-62": 0.7996839284896851,
        "codebertscore_s_f1-57": 0.7668177485466003,
        "codebertscore_s_f3-57": 0.7610158324241638,
        "codebertscore_s_f1-35": 0.7998706698417664,
        "codebertscore_s_f3-35": 0.7677226662635803,
        "codebertscore_s_f1-190": 0.7943289875984192,
        "codebertscore_s_f3-190": 0.7565235495567322,
        "codebertscore_s_f1-26": 0.7991831302642822,
        "codebertscore_s_f3-26": 0.7703031897544861,
        "codebertscore_s_f1-174": 0.810832142829895,
        "codebertscore_s_f3-174": 0.8107330203056335,
        "codebertscore_s_f1-139": 0.8042447566986084,
        "codebertscore_s_f3-139": 0.8045927882194519,
        "codebertscore_s_f1-22": 0.7711620330810547,
        "codebertscore_s_f3-22": 0.767662763595581,
        "codebertscore_s_f1-152": 0.7942007184028625,
        "codebertscore_s_f3-152": 0.7705027461051941,
        "codebertscore_s_f1-108": 0.8083240389823914,
        "codebertscore_s_f3-108": 0.7844588160514832,
        "codebertscore_s_f1-8": 0.783425509929657,
        "codebertscore_s_f3-8": 0.7859988808631897,
        "codebertscore_s_f1-7": 0.8140491843223572,
        "codebertscore_s_f3-7": 0.7842711806297302,
        "codebertscore_s_f1-23": 0.7573271989822388,
        "codebertscore_s_f3-23": 0.762394905090332,
        "codebertscore_s_f1-55": 0.7891159057617188,
        "codebertscore_s_f3-55": 0.7783786058425903,
        "codebertscore_s_f1-59": 0.8278804421424866,
        "codebertscore_s_f3-59": 0.8066909313201904,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-191": 2,
        "raw_gpt35_nsnr-191": "2",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 3,
        "raw_gpt35_nswr-108": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "task_id": "104",
        "163": "std::vector<long> res;\n\tbool flag;\n\tfor(int i=0;i<x.size();i++){\n\t\tflag = true;\n\t\twhile(x[i]!=0){\n\t\t\tif(x[i]%2==0){\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] = x[i]/10;\n\t\t}\n\t\tif(flag) res.push_back(x[i]);\n\t}\n\tstd::sort(res.begin(),res.end());\n\treturn res;",
        "grade-163": {
            "execution": 0
        },
        "28": "int digits;\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        digits = 0;\n        long num = x[i];\n        while(num > 0){\n            if(num%10%2 == 0){\n                digits = 1;\n                break;\n            }\n            num = num/10;\n        }\n        if(digits == 0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Your code here.\n  std::vector<long> ans;\n  for(long i=0;i<x.size();i++){\n    int flag=0;\n    while(x[i]>0){\n      if(x[i]%10==0 || x[i]%10==2 || x[i]%10==4 || x[i]%10==6 || x[i]%10==8)\n      {\n        flag=1;\n        break;\n      }\n      x[i]/=10;\n    }\n    if(flag==0)\n      ans.push_back(x[i]);\n  }\n  std::sort(ans.begin(),ans.end());\n  return ans;",
        "grade-6": {
            "execution": 0
        },
        "189": "// your code here",
        "grade-189": {
            "execution": 0
        },
        "70": "// your code here",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> temp = x;\n\tstd::vector<long> output;\n\tfor (long i = 0; i < temp.size(); i++) {\n\t\twhile (temp[i] != 0) {\n\t\t\tint rem = temp[i] % 10;\n\t\t\tif (rem % 2 == 0) {\n\t\t\t\tx.erase(x.begin() + i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp[i] = temp[i] / 10;\n\t\t}\n\t}\n\tstd::sort(x.begin(), x.end());\n\treturn x;",
        "grade-62": {
            "execution": 0
        },
        "57": "// step 1: sort the vector\n\tstd::sort(x.begin(), x.end());\n\t// step 2: loop over the vector and remove duplicates\n\t// we will also check if there is any even number\n\tstd::vector<long> ret;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tlong num = x[i];\n\t\t// check for even digit\n\t\tbool is_valid = true;\n\t\twhile (num > 0) {\n\t\t\tif (num % 2 == 0) {\n\t\t\t\tis_valid = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (is_valid) {\n\t\t\tret.push_back(x[i]);\n\t\t}\n\t}\n\treturn ret;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<long> answer;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tint count = 0;\n\t\tlong y = x[i];\n\t\tint remainder = 0;\n\t\twhile (y != 0) {\n\t\t\tremainder = y % 10;\n\t\t\tif (remainder % 2 == 0) {\n\t\t\t\tcount = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y / 10;\n\t\t}\n\t\tif (count == 0) {\n\t\t\tanswer.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(answer.begin(), answer.end());\n\treturn answer;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<long>::iterator itr;\n    std::vector<long> v;\n    for(itr=x.begin();itr!=x.end();itr++)\n    {\n        int count=0;\n        while(*itr!=0)\n        {\n            if((*itr%10)%2==0)\n            {\n                count++;\n                break;\n            }\n            *itr=*itr/10;\n        }\n        if(count==0)\n        {\n            v.push_back(*itr);\n        }\n    }\n    std::sort(v.begin(),v.end());\n    return v;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tif (x[i] < 10) {\n\t\t\tresult.push_back(x[i]);\n\t\t}\n\t\telse {\n\t\t\tint tmp = x[i];\n\t\t\tbool flag = true;\n\t\t\twhile (tmp > 0) {\n\t\t\t\tif (tmp % 2 == 0) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttmp /= 10;\n\t\t\t}\n\t\t\tif (flag)\n\t\t\t\tresult.push_back(x[i]);\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\treturn result;",
        "grade-26": {
            "execution": 1
        },
        "173": "// Your code here...\n    std::vector<long> result;\n    for(int i = 0; i < x.size(); i++){\n        bool no_even = true;\n        long t = x[i];\n        while(t > 0){\n            int r = t % 10;\n            if(r % 2 == 0){\n                no_even = false;\n                break;\n            }\n            t /= 10;\n        }\n        if(no_even) result.push_back(x[i]);\n    }\n    return result;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n        int num=x[i];\n        while(num!=0){\n            int dig=num%10;\n            if(dig%2==0){\n                flag=1;\n                break;\n            }\n            num=num/10;\n        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;",
        "grade-139": {
            "execution": 1
        },
        "22": "std::vector<long> result;\n    for (long element : x) {\n        // check if element has any even digits\n        long n = element;\n        bool has_even_digit = false;\n        while (n > 0) {\n            if ((n % 10) % 2 == 0) {\n                has_even_digit = true;\n                break;\n            }\n            n /= 10;\n        }\n        if (!has_even_digit) {\n            result.push_back(element);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "assert(x.size() > 0);\n\tstd::vector<long> y;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tbool b = true;\n\t\tlong n = x[i];\n\t\twhile (n > 0) {\n\t\t\tif (n % 2 == 0) {\n\t\t\t\tb = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\tif (b) {\n\t\t\ty.push_back(x[i]);\n\t\t}\n\t}\n\tsort(y.begin(), y.end());\n\treturn y;",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<long> array;\n    for(int i=0;i<x.size();i++){\n        if(x[i]>0){\n            int flag=0;\n            while(x[i]>0){\n                int temp=x[i]%10;\n                if(temp%2==0){\n                    flag=1;\n                    break;\n                }\n                x[i]=x[i]/10;\n            }\n            if(flag==0){\n                array.push_back(x[i]);\n            }\n        }\n    }\n    return array;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> res;\n    std::vector<long>::iterator it;\n    bool isunique;\n    for(it = x.begin(); it != x.end(); it++) {\n        isunique = true;\n        while(*it > 0) {\n            if((*it % 10) % 2 == 0) {\n                isunique = false;\n                break;\n            }\n            *it /= 10;\n        }\n        if(isunique)\n            res.push_back(*it);\n    }\n    return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> ret_vec;\n\tstd::string s;\n\tint ret = 0;\n\tfor(int i = 0; i < x.size(); i++) {\n\t\ts = std::to_string(x[i]);\n\t\tret = 0;\n\t\tfor(int j = 0; j < s.length(); j++) {\n\t\t\tif(s[j] == '0' || s[j] == '2' || s[j] == '4' || s[j] == '6' || s[j] == '8') {\n\t\t\t\tret = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(ret == 0) {\n\t\t\tret_vec.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(ret_vec.begin(), ret_vec.end());\n\treturn ret_vec;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long long temp = x[i];\n        while(temp>0){\n            if(temp%10 % 2 == 0){\n                break;\n            }\n            temp/=10;\n        }\n        if(temp == 0){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long>ans;\n    bool is_unique=true;\n    for(auto it:x){\n        is_unique=true;\n        while(it){\n            if(it%2==0){\n                is_unique=false;\n                break;\n            }\n            it/=10;\n        }\n        if(is_unique)ans.push_back(it);\n    }\n    std::sort(ans.begin(),ans.end());\n    return ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> unique;\n    for (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool even = false;\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n                even = true;\n                break;\n            }\n            num /= 10;\n        }\n        if (!even) {\n            unique.push_back(x[i]);\n        }\n    }\n    std::sort(unique.begin(), unique.end());\n    return unique;",
        "grade-59": {
            "execution": 1
        },
        "bleu-163": 0.5158018478165899,
        "bleu-28": 0.5854758306806674,
        "bleu-6": 0.3278578868138229,
        "bleu-189": 2.4396200656922746e-11,
        "bleu-70": 2.4396200656922746e-11,
        "bleu-62": 0.33627821387405116,
        "bleu-57": 0.44543392326694814,
        "bleu-35": 0.48340111943821235,
        "bleu-188": 0.2841628147199939,
        "bleu-26": 0.48142982211176916,
        "bleu-173": 0.43748035891548076,
        "bleu-139": 0.5515659894061992,
        "bleu-22": 0.2709227043490421,
        "bleu-151": 0.5141590510326933,
        "bleu-108": 0.44438094230373537,
        "bleu-8": 0.23948502766085195,
        "bleu-7": 0.28330343250998036,
        "bleu-23": 0.5097340865199957,
        "bleu-55": 0.2395507519443696,
        "bleu-59": 0.5763948515745164,
        "codebleu-163": 0.6745127225835152,
        "codebleu-28": 0.7274314998155589,
        "codebleu-6": 0.6613906519347854,
        "codebleu-189": 0.012345679012345678,
        "codebleu-70": 0.012345679012345678,
        "codebleu-62": 0.6466968842785646,
        "codebleu-57": 0.7189919897075033,
        "codebleu-35": 0.731635833513049,
        "codebleu-188": 0.6233050481437331,
        "codebleu-26": 0.7199453780412542,
        "codebleu-173": 0.6183430093923857,
        "codebleu-139": 0.7411557095845283,
        "codebleu-22": 0.5620088043971601,
        "codebleu-151": 0.711244888690586,
        "codebleu-108": 0.6337747057022691,
        "codebleu-8": 0.5183684385981727,
        "codebleu-7": 0.6770072615431885,
        "codebleu-23": 0.6650134287132621,
        "codebleu-55": 0.4773697819508474,
        "codebleu-59": 0.7179290208512659,
        "chrf-163": 0.5093124529246036,
        "chrf-28": 0.5609984762839118,
        "chrf-6": 0.43159995731833173,
        "chrf-189": 0.01537544374911587,
        "chrf-70": 0.01537544374911587,
        "chrf-62": 0.36684401833467084,
        "chrf-57": 0.5238685905554926,
        "chrf-35": 0.4851823429807505,
        "chrf-188": 0.37266534056051737,
        "chrf-26": 0.5347543960513461,
        "chrf-173": 0.4532029708967322,
        "chrf-139": 0.567869056571256,
        "chrf-22": 0.37817081319198365,
        "chrf-151": 0.5234882155788192,
        "chrf-108": 0.413038853176275,
        "chrf-8": 0.3582760036651921,
        "chrf-7": 0.39952060671120443,
        "chrf-23": 0.47978952953085513,
        "chrf-55": 0.3783940792733034,
        "chrf-59": 0.578396213065052,
        "rougel-163": 0.6637931034482759,
        "rougel-28": 0.717948717948718,
        "rougel-6": 0.5323741007194245,
        "rougel-189": 0.01652892561983471,
        "rougel-70": 0.01652892561983471,
        "rougel-62": 0.5210084033613445,
        "rougel-57": 0.5606060606060607,
        "rougel-35": 0.6776859504132232,
        "rougel-188": 0.5224489795918368,
        "rougel-26": 0.6857142857142857,
        "rougel-173": 0.597285067873303,
        "rougel-139": 0.7058823529411765,
        "rougel-22": 0.5315315315315315,
        "rougel-151": 0.6752136752136753,
        "rougel-108": 0.5811965811965812,
        "rougel-8": 0.47058823529411764,
        "rougel-7": 0.5217391304347826,
        "rougel-23": 0.7000000000000001,
        "rougel-55": 0.5517241379310345,
        "rougel-59": 0.7445887445887446,
        "meteor-163": 0.6728141726189367,
        "meteor-28": 0.7550943604983212,
        "meteor-6": 0.6197303127955265,
        "meteor-189": 0.004766444232602478,
        "meteor-70": 0.004766444232602478,
        "meteor-62": 0.5736434929307047,
        "meteor-57": 0.6114021042653451,
        "meteor-35": 0.7009481079641687,
        "meteor-188": 0.5771366155157714,
        "meteor-26": 0.7135018057523,
        "meteor-173": 0.5837481691651645,
        "meteor-139": 0.754055796020345,
        "meteor-22": 0.5273928568167082,
        "meteor-151": 0.7357826773479966,
        "meteor-108": 0.4676009842943201,
        "meteor-8": 0.43594962789293257,
        "meteor-7": 0.5967090256708797,
        "meteor-23": 0.6716255026981756,
        "meteor-55": 0.48993298316022493,
        "meteor-59": 0.7722257288502483,
        "ruby-163": 0.4913793103448276,
        "ruby-28": 0.5423728813559322,
        "ruby-6": 0.4135802469135802,
        "ruby-189": 0.008620689655172376,
        "ruby-70": 0.008620689655172376,
        "ruby-62": 0.3688524590163934,
        "ruby-57": 0.32432432432432434,
        "ruby-35": 0.5555555555555556,
        "ruby-188": 0.3410852713178295,
        "ruby-26": 0.5736434108527132,
        "ruby-173": 0.3879310344827587,
        "ruby-139": 0.5655737704918034,
        "ruby-22": 0.35344827586206895,
        "ruby-151": 0.5338983050847458,
        "ruby-108": 0.3813559322033898,
        "ruby-8": 0.25,
        "ruby-7": 0.39344262295081966,
        "ruby-23": 0.5603448275862069,
        "ruby-55": 0.39655172413793105,
        "ruby-59": 0.603448275862069,
        "codebertscore_f1-163": 0.8720353245735168,
        "codebertscore_f3-163": 0.8645486235618591,
        "codebertscore_f1-28": 0.8839297890663147,
        "codebertscore_f3-28": 0.8864989876747131,
        "codebertscore_f1-6": 0.8412632346153259,
        "codebertscore_f3-6": 0.8538053631782532,
        "codebertscore_f1-189": 0.49403515458106995,
        "codebertscore_f3-189": 0.47225654125213623,
        "codebertscore_f1-70": 0.49403515458106995,
        "codebertscore_f3-70": 0.47225654125213623,
        "codebertscore_f1-62": 0.818737804889679,
        "codebertscore_f3-62": 0.8115187883377075,
        "codebertscore_f1-57": 0.8256574273109436,
        "codebertscore_f3-57": 0.8739777207374573,
        "codebertscore_f1-35": 0.8462696671485901,
        "codebertscore_f3-35": 0.8501290082931519,
        "codebertscore_f1-188": 0.792300820350647,
        "codebertscore_f3-188": 0.8091816306114197,
        "codebertscore_f1-26": 0.8924698233604431,
        "codebertscore_f3-26": 0.8943380117416382,
        "codebertscore_f1-173": 0.8462625741958618,
        "codebertscore_f3-173": 0.855877697467804,
        "codebertscore_f1-139": 0.8992061018943787,
        "codebertscore_f3-139": 0.9006004333496094,
        "codebertscore_f1-22": 0.8076433539390564,
        "codebertscore_f3-22": 0.818699836730957,
        "codebertscore_f1-151": 0.8752094507217407,
        "codebertscore_f3-151": 0.87758868932724,
        "codebertscore_f1-108": 0.8596632480621338,
        "codebertscore_f3-108": 0.8441680073738098,
        "codebertscore_f1-8": 0.8087285757064819,
        "codebertscore_f3-8": 0.8135619163513184,
        "codebertscore_f1-7": 0.800309419631958,
        "codebertscore_f3-7": 0.8151255249977112,
        "codebertscore_f1-23": 0.8739920258522034,
        "codebertscore_f3-23": 0.86189866065979,
        "codebertscore_f1-55": 0.8208032846450806,
        "codebertscore_f3-55": 0.8164060115814209,
        "codebertscore_f1-59": 0.8959463238716125,
        "codebertscore_f3-59": 0.8972846865653992,
        "codebertscore_s_f1-163": 0.8784037828445435,
        "codebertscore_s_f3-163": 0.8721477389335632,
        "codebertscore_s_f1-28": 0.8895941972732544,
        "codebertscore_s_f3-28": 0.8920620083808899,
        "codebertscore_s_f1-6": 0.8457468748092651,
        "codebertscore_s_f3-6": 0.857710063457489,
        "codebertscore_s_f1-189": 0.4759795665740967,
        "codebertscore_s_f3-189": 0.45673882961273193,
        "codebertscore_s_f1-70": 0.4759795665740967,
        "codebertscore_s_f3-70": 0.45673882961273193,
        "codebertscore_s_f1-62": 0.8261631727218628,
        "codebertscore_s_f3-62": 0.8180438280105591,
        "codebertscore_s_f1-57": 0.832188606262207,
        "codebertscore_s_f3-57": 0.8799285292625427,
        "codebertscore_s_f1-35": 0.8514015674591064,
        "codebertscore_s_f3-35": 0.8569256067276001,
        "codebertscore_s_f1-188": 0.7951123714447021,
        "codebertscore_s_f3-188": 0.8122245669364929,
        "codebertscore_s_f1-26": 0.8957865834236145,
        "codebertscore_s_f3-26": 0.8979175090789795,
        "codebertscore_s_f1-173": 0.8510462045669556,
        "codebertscore_s_f3-173": 0.8605321049690247,
        "codebertscore_s_f1-139": 0.903810977935791,
        "codebertscore_s_f3-139": 0.9059373140335083,
        "codebertscore_s_f1-22": 0.812197208404541,
        "codebertscore_s_f3-22": 0.8242180347442627,
        "codebertscore_s_f1-151": 0.8812082409858704,
        "codebertscore_s_f3-151": 0.8838788270950317,
        "codebertscore_s_f1-108": 0.8639309406280518,
        "codebertscore_s_f3-108": 0.84880131483078,
        "codebertscore_s_f1-8": 0.8140943050384521,
        "codebertscore_s_f3-8": 0.8189811110496521,
        "codebertscore_s_f1-7": 0.804153561592102,
        "codebertscore_s_f3-7": 0.8195334672927856,
        "codebertscore_s_f1-23": 0.8778473138809204,
        "codebertscore_s_f3-23": 0.8674387335777283,
        "codebertscore_s_f1-55": 0.8250017762184143,
        "codebertscore_s_f3-55": 0.8232635259628296,
        "codebertscore_s_f1-59": 0.8986569046974182,
        "codebertscore_s_f3-59": 0.901559054851532,
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string test) {\n",
        "snippet": [
            "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "task_id": "111",
        "163": "std::map<std::string, long> mymap;\n  std::stringstream ss(test);\n  std::string intermediate;\n  while(getline(ss, intermediate, ' ')){\n    if(mymap.find(intermediate) == mymap.end()){\n      mymap[intermediate] = 1;\n    }else{\n      mymap[intermediate]++;\n    }\n  }\n  long max_value = 0;\n  for(auto i : mymap){\n    if(i.second > max_value){\n      max_value = i.second;\n    }\n  }\n  std::map<std::string, long> result;\n  for(auto i : mymap){\n    if(i.second == max_value){\n      result[i.first] = i.second;\n    }\n  }\n  return result;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::map<std::string, long> dict;\nif(test == \"\"){\n    return dict;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::map<std::string, long> result;\n    std::istringstream iss(test);\n    std::string key;\n    std::map<std::string, long>::iterator it;\n    while (iss >> key) {\n        it = result.find(key);\n        if (it != result.end()) {\n            result[key]++;\n        } else {\n            result[key] = 1;\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::map<std::string, long> res;\n    if(test.length() == 0) return res;\n    std::stringstream ss(test);\n    std::string word;\n    long max_val = 0;\n    while(ss >> word){\n        if(res.find(word) == res.end()){\n            res[word] = 1;\n        }\n        else{\n            res[word] = res[word] + 1;\n        }\n        max_val = std::max(max_val, res[word]);\n    }\n    for(auto it = res.begin(); it != res.end(); it++){\n        if(it->second != max_val){\n            res.erase(it);\n        }\n    }\n    return res;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::map<std::string, long> count;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        ++count[token];\n    }\n    return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "// your code goes here\n    std::map<std::string, long> dictionary;\n    std::string element;\n    int value = 0;\n    std::istringstream test_in(test);\n    while(test_in >> element){\n      dictionary[element]++;\n    }\n    std::map<std::string, long>::iterator itr;\n    for(itr = dictionary.begin(); itr != dictionary.end(); itr++){\n      value = itr->second;\n      if(value > 1){\n        break;\n      }\n    }\n    for(itr = dictionary.begin(); itr != dictionary.end(); itr++){\n      if(itr->second < value){\n        dictionary.erase(itr);\n      }\n    }\n    return dictionary;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::map<std::string, long> dict;\n    std::istringstream iss(test);\n    std::string temp;\n    while(iss >> temp)\n    {\n        dict[temp]++;\n    }\n    return dict;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::map<std::string, long> char_histogram;\n\tstd::stringstream ss(test);\n\tstd::string char_string;\n\twhile (std::getline(ss, char_string, ' ')) {\n\t\tauto map_iter = char_histogram.find(char_string);\n\t\tif (map_iter == char_histogram.end()) {\n\t\t\tchar_histogram.insert(std::pair<std::string, long>(char_string, 1));\n\t\t} else {\n\t\t\tmap_iter->second += 1;\n\t\t}\n\t}\n\treturn char_histogram;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::map<std::string, long> temp;\n  std::string word = \"\";\n  for (int i = 0; i < test.length(); i++) {\n    if (test[i] != ' ') {\n      word += test[i];\n    } else {\n      temp[word]++;\n      word = \"\";\n    }\n  }\n  if (word != \"\") {\n    temp[word]++;\n  }\n  // std::cout << temp.size() << '\\n';\n  auto it = temp.begin();\n  while (it != temp.end()) {\n    if (it->second == 1) {\n      it = temp.erase(it);\n    } else {\n      it++;\n    }\n  }\n  return temp;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::map<std::string, long> letter_count;\n  std::stringstream ss(test);\n  std::string letter;\n  while (ss >> letter) {\n    letter_count[letter]++;\n  }\n  return letter_count;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::map<std::string, long> histMap;\n  std::string delimiter = \" \";\n  size_t pos = 0;\n  std::string token;\n  std::vector<std::string> words;\n  while ((pos = test.find(delimiter)) != std::string::npos) {\n    token = test.substr(0, pos);\n    words.push_back(token);\n    test.erase(0, pos + delimiter.length());\n  }\n  words.push_back(test);\n  for (std::string s : words) {\n    histMap[s] += 1;\n  }\n  return histMap;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::map<std::string, long> result;\n\tstringstream ss(test);\n\tstd::string token;\n\twhile (getline(ss, token, ' ')) {\n\t\tresult[token]++;\n\t}\n\treturn result;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::map<std::string, long> result;\n\tstd::istringstream iss(test);\n\tdo\n\t{\n\t\tstd::string sub;\n\t\tiss >> sub;\n\t\tif(sub.empty())\n\t\t\tcontinue;\n\t\tresult[sub]++;\n\t} while (iss);\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::map<std::string, long> answer;\n    std::string temp = \"\";\n    for(auto i : test){\n        if(i == ' '){\n            if(answer.find(temp) == answer.end()){\n                answer[temp] = 1;\n            }\n            else{\n                answer[temp] += 1;\n            }\n            temp = \"\";\n        }\n        else{\n            temp += i;\n        }\n    }\n    if(answer.find(temp) == answer.end()){\n        answer[temp] = 1;\n    }\n    else{\n        answer[temp] += 1;\n    }\n    return answer;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::map<std::string, long> result;\n    std::istringstream ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::map<std::string, long> hist;\n  std::istringstream iss(test);\n  std::string letter;\n  while (iss >> letter) {\n    hist[letter]++;\n  }\n  return hist;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your code here\n  std::map<std::string, long> dict;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\n  {\n      if(dict.find(word) == dict.end())\n      {\n          dict[word] = 1;\n      }\n      else\n      {\n          dict[word] += 1;\n      }\n  }\n  return dict;",
        "grade-7": {
            "execution": 0
        },
        "23": "int flag = 0;\n    std::map<std::string, long> ret;\n    std::map<std::string, long>::iterator it;\n    std::string temp;\n    std::stringstream ss(test);\n    std::string s_arr[test.length()];\n    int j = 0;\n    if(test.length() == 0) {\n        return ret;\n    }\n    for(int i = 0; i < test.length(); i++) {\n        if(test[i] == ' ') {\n            flag = 1;\n        }\n    }\n    if(flag == 0) {\n        for(int i = 0; i < test.length(); i++) {\n            if(i == 0) {\n                ret.insert(std::pair<std::string, long>(test.substr(i, 1), test.length()));\n            }\n            else {\n                ret.insert(std::pair<std::string, long>(test.substr(i, 1), 0));\n            }\n        }\n        return ret;\n    }\n    while(ss >> temp) {\n        s_arr[j] = temp;\n        j++;\n    }\n    std::sort(s_arr, s_arr + j);\n    for(int i = 0; i < j; i++) {\n        it = ret.find(s_arr[i]);\n        if(it == ret.end()) {\n            ret.insert(std::pair<std::string, long>(s_arr[i], 1));\n        }\n        else {\n            it->second++;\n        }\n    }\n    return ret;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::map<std::string, long> res;\n\tstd::string temp = \"\";\n\tlong count = 0;\n\tfor (int i = 0; i < test.length(); i++) {\n\t\tif (test[i] != ' ') {\n\t\t\ttemp = temp + test[i];\n\t\t}\n\t\telse {\n\t\t\tres[temp]++;\n\t\t\ttemp = \"\";\n\t\t}\n\t}\n\tres[temp]++;\n\tstd::map<std::string, long> ans;\n\tfor (auto i : res) {\n\t\tif (i.second == count) {\n\t\t\tans[i.first] = i.second;\n\t\t}\n\t\telse if (i.second > count) {\n\t\t\tans.clear();\n\t\t\tans[i.first] = i.second;\n\t\t\tcount = i.second;\n\t\t}\n\t}\n\treturn ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Your code here!\n    map<std::string,long> m;\n    stringstream ss(test);\n    string t;\n    while(ss>>t){\n        m[t]++;\n    }\n    return m;",
        "grade-59": {
            "execution": 0
        },
        "bleu-163": 0.10064796987948302,
        "bleu-28": 0.0017932160122040716,
        "bleu-6": 0.08902494883260444,
        "bleu-189": 0.23306467711469764,
        "bleu-70": 0.015380313943789187,
        "bleu-62": 0.17628723068033428,
        "bleu-57": 0.007384110483729871,
        "bleu-35": 0.0702435114195762,
        "bleu-188": 0.32339658706335783,
        "bleu-26": 0.007384110483729871,
        "bleu-173": 0.0945211210990514,
        "bleu-139": 0.010462056816040882,
        "bleu-22": 0.01342247897751678,
        "bleu-151": 0.1155075451970849,
        "bleu-108": 0.013005190668254675,
        "bleu-8": 0.007384110483729871,
        "bleu-7": 0.05391658750622253,
        "bleu-23": 0.16939526584136896,
        "bleu-55": 0.2931404868520185,
        "bleu-59": 0.006418610309646321,
        "codebleu-163": 0.5223651652242673,
        "codebleu-28": 0.07870834051638341,
        "codebleu-6": 0.3326128223129946,
        "codebleu-189": 0.5792164154929269,
        "codebleu-70": 0.16397202995952576,
        "codebleu-62": 0.5568445154299092,
        "codebleu-57": 0.1327273973986799,
        "codebleu-35": 0.34714438356191196,
        "codebleu-188": 0.5998986348209879,
        "codebleu-26": 0.13251743982599368,
        "codebleu-173": 0.4436074739602574,
        "codebleu-139": 0.15866285263970817,
        "codebleu-22": 0.19689253830071018,
        "codebleu-151": 0.44224681466810073,
        "codebleu-108": 0.16331224990648283,
        "codebleu-8": 0.13251743982599368,
        "codebleu-7": 0.26735165443213915,
        "codebleu-23": 0.6674042219992726,
        "codebleu-55": 0.6392207044092464,
        "codebleu-59": 0.1351684253024896,
        "chrf-163": 0.24308358706836244,
        "chrf-28": 0.07643153945490302,
        "chrf-6": 0.2009884867422279,
        "chrf-189": 0.30206937894773894,
        "chrf-70": 0.1489507020363692,
        "chrf-62": 0.30119705426490295,
        "chrf-57": 0.11348339790617518,
        "chrf-35": 0.20938480118068858,
        "chrf-188": 0.360743976298953,
        "chrf-26": 0.14005693463084992,
        "chrf-173": 0.20852322163008757,
        "chrf-139": 0.11902062628584051,
        "chrf-22": 0.1247416403194111,
        "chrf-151": 0.1904349137741526,
        "chrf-108": 0.12127884533521119,
        "chrf-8": 0.11425614907813947,
        "chrf-7": 0.16027497496240373,
        "chrf-23": 0.3279833663103428,
        "chrf-55": 0.37010114209678446,
        "chrf-59": 0.10450732802358134,
        "rougel-163": 0.3141025641025641,
        "rougel-28": 0.16483516483516483,
        "rougel-6": 0.3162055335968379,
        "rougel-189": 0.4240506329113924,
        "rougel-70": 0.2358490566037736,
        "rougel-62": 0.3974763406940063,
        "rougel-57": 0.22549019607843138,
        "rougel-35": 0.2977099236641221,
        "rougel-188": 0.5153374233128835,
        "rougel-26": 0.22549019607843138,
        "rougel-173": 0.30821917808219174,
        "rougel-139": 0.21359223300970875,
        "rougel-22": 0.26605504587155965,
        "rougel-151": 0.3706293706293706,
        "rougel-108": 0.22641509433962267,
        "rougel-8": 0.22549019607843138,
        "rougel-7": 0.29411764705882354,
        "rougel-23": 0.3552894211576846,
        "rougel-55": 0.4652567975830816,
        "rougel-59": 0.208955223880597,
        "meteor-163": 0.33265114790085065,
        "meteor-28": 0.08945221445221446,
        "meteor-6": 0.25060473904115627,
        "meteor-189": 0.3931697792341574,
        "meteor-70": 0.14111853277482167,
        "meteor-62": 0.37808107719690015,
        "meteor-57": 0.11214369659936438,
        "meteor-35": 0.26106574481656186,
        "meteor-188": 0.4277750405541293,
        "meteor-26": 0.1086442694834303,
        "meteor-173": 0.24294729634994286,
        "meteor-139": 0.131121045392022,
        "meteor-22": 0.15446791505933866,
        "meteor-151": 0.2896238036451739,
        "meteor-108": 0.13058219178082192,
        "meteor-8": 0.11214369659936438,
        "meteor-7": 0.1899368060228802,
        "meteor-23": 0.4129806428336444,
        "meteor-55": 0.39907332045529187,
        "meteor-59": 0.11237587816582269,
        "ruby-163": 0.14102564102564108,
        "ruby-28": 0.09615384615384615,
        "ruby-6": 0.19871794871794868,
        "ruby-189": 0.26249999999999996,
        "ruby-70": 0.13461538461538458,
        "ruby-62": 0.18012422360248448,
        "ruby-57": 0.1282051282051282,
        "ruby-35": 0.17307692307692313,
        "ruby-188": 0.32352941176470584,
        "ruby-26": 0.1282051282051282,
        "ruby-173": 0.15384615384615385,
        "ruby-139": 0.13461538461538458,
        "ruby-22": 0.15384615384615385,
        "ruby-151": 0.20512820512820518,
        "ruby-108": 0.13461538461538458,
        "ruby-8": 0.1282051282051282,
        "ruby-7": 0.1858974358974359,
        "ruby-23": 0.22898550724637678,
        "ruby-55": 0.3028571428571428,
        "ruby-59": 0.1282051282051282,
        "codebertscore_f1-163": 0.7521838545799255,
        "codebertscore_f3-163": 0.7664784789085388,
        "codebertscore_f1-28": 0.6502354145050049,
        "codebertscore_f3-28": 0.5940802693367004,
        "codebertscore_f1-6": 0.7383130788803101,
        "codebertscore_f3-6": 0.7297467589378357,
        "codebertscore_f1-189": 0.7794271111488342,
        "codebertscore_f3-189": 0.7892119884490967,
        "codebertscore_f1-70": 0.6809855699539185,
        "codebertscore_f3-70": 0.6609356999397278,
        "codebertscore_f1-62": 0.7730432748794556,
        "codebertscore_f3-62": 0.7835453152656555,
        "codebertscore_f1-57": 0.6774038672447205,
        "codebertscore_f3-57": 0.6532830595970154,
        "codebertscore_f1-35": 0.7095291614532471,
        "codebertscore_f3-35": 0.711538553237915,
        "codebertscore_f1-188": 0.8108975291252136,
        "codebertscore_f3-188": 0.8211507201194763,
        "codebertscore_f1-26": 0.6912981271743774,
        "codebertscore_f3-26": 0.6651464700698853,
        "codebertscore_f1-173": 0.7101708650588989,
        "codebertscore_f3-173": 0.7189508080482483,
        "codebertscore_f1-139": 0.662522554397583,
        "codebertscore_f3-139": 0.6402043700218201,
        "codebertscore_f1-22": 0.673159658908844,
        "codebertscore_f3-22": 0.6560595631599426,
        "codebertscore_f1-151": 0.7226952314376831,
        "codebertscore_f3-151": 0.7175769805908203,
        "codebertscore_f1-108": 0.666612446308136,
        "codebertscore_f3-108": 0.6490495204925537,
        "codebertscore_f1-8": 0.674330472946167,
        "codebertscore_f3-8": 0.6506688594818115,
        "codebertscore_f1-7": 0.7016209959983826,
        "codebertscore_f3-7": 0.6977680325508118,
        "codebertscore_f1-23": 0.7462165951728821,
        "codebertscore_f3-23": 0.7741075754165649,
        "codebertscore_f1-55": 0.8013063669204712,
        "codebertscore_f3-55": 0.8055062890052795,
        "codebertscore_f1-59": 0.6726271510124207,
        "codebertscore_f3-59": 0.6547303795814514,
        "codebertscore_s_f1-163": 0.7502768635749817,
        "codebertscore_s_f3-163": 0.7666114568710327,
        "codebertscore_s_f1-28": 0.6680379509925842,
        "codebertscore_s_f3-28": 0.618865430355072,
        "codebertscore_s_f1-6": 0.7273606657981873,
        "codebertscore_s_f3-6": 0.7183418869972229,
        "codebertscore_s_f1-189": 0.763848602771759,
        "codebertscore_s_f3-189": 0.7709118127822876,
        "codebertscore_s_f1-70": 0.6874741911888123,
        "codebertscore_s_f3-70": 0.673275887966156,
        "codebertscore_s_f1-62": 0.7766032814979553,
        "codebertscore_s_f3-62": 0.7883918881416321,
        "codebertscore_s_f1-57": 0.6874896287918091,
        "codebertscore_s_f3-57": 0.6708013415336609,
        "codebertscore_s_f1-35": 0.7082952260971069,
        "codebertscore_s_f3-35": 0.708928108215332,
        "codebertscore_s_f1-188": 0.8084492683410645,
        "codebertscore_s_f3-188": 0.8186461925506592,
        "codebertscore_s_f1-26": 0.7008255124092102,
        "codebertscore_s_f3-26": 0.68362957239151,
        "codebertscore_s_f1-173": 0.7087290287017822,
        "codebertscore_s_f3-173": 0.7118048071861267,
        "codebertscore_s_f1-139": 0.6744713187217712,
        "codebertscore_s_f3-139": 0.658263087272644,
        "codebertscore_s_f1-22": 0.6814307570457458,
        "codebertscore_s_f3-22": 0.6673367023468018,
        "codebertscore_s_f1-151": 0.7305777072906494,
        "codebertscore_s_f3-151": 0.7262995839118958,
        "codebertscore_s_f1-108": 0.671143114566803,
        "codebertscore_s_f3-108": 0.6583928465843201,
        "codebertscore_s_f1-8": 0.6833047270774841,
        "codebertscore_s_f3-8": 0.6673478484153748,
        "codebertscore_s_f1-7": 0.6988946795463562,
        "codebertscore_s_f3-7": 0.6937961578369141,
        "codebertscore_s_f1-23": 0.7716565132141113,
        "codebertscore_s_f3-23": 0.7927156090736389,
        "codebertscore_s_f1-55": 0.7961755394935608,
        "codebertscore_s_f3-55": 0.8018718361854553,
        "codebertscore_s_f1-59": 0.6822391748428345,
        "codebertscore_s_f3-59": 0.6717392206192017,
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-28": 0,
        "raw_gpt35_nsnr-28": "3 - The code snippet correctly handles the case where the input string is empty and returns an empty dictionary. However, the implementation does not actually compute the histogram as required by the problem. The function needs to split the input string into individual letters, count their occurrences, and return a dictionary with the counts.",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "3 - The code snippet correctly creates a dictionary of the letter with the most repetition and containing the corresponding count. It also correctly handles cases where several letters have the same occurrence and returns all of them. However, it does not handle the case where the input string is empty and returns an empty dictionary instead of an empty map.",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 0,
        "raw_gpt35_nswr-35": "Score: 1",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n",
        "snippet": [
            "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n"
        ],
        "simplified": "Filter an input list of strings only for ones that contain given substring",
        "task_id": "7",
        "179": "std::vector<std::string> new_strings;\n\tfor (auto i : strings) {\n\t\tif (i.find(substring) != std::string::npos) {\n\t\t\tnew_strings.push_back(i);\n\t\t}\n\t}\n\treturn new_strings;",
        "grade-179": {
            "execution": 1
        },
        "28": "std::vector<std::string> ret;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\n            ret.push_back(s);\n    }\n    return ret;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<std::string> result_strings;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            result_strings.push_back(s);\n        }\n    }\n    return result_strings;",
        "grade-6": {
            "execution": 1
        },
        "73": "std::vector<std::string> res;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            res.push_back(s);\n        }\n    }\n    return res;",
        "grade-73": {
            "execution": 1
        },
        "64": "std::vector<std::string> output;\n    for (auto str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            output.push_back(str);\n        }\n    }\n    return output;",
        "grade-64": {
            "execution": 1
        },
        "59": "std::vector<std::string> ans;\n    for(std::string s: strings) {\n        if(s.find(substring) != std::string::npos) {\n            ans.push_back(s);\n        }\n    }\n    return ans;",
        "grade-59": {
            "execution": 1
        },
        "35": "std::vector<std::string> result;\n  for (std::string s : strings) {\n    if (s.find(substring) != std::string::npos) {\n      result.push_back(s);\n    }\n  }\n  return result;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<std::string> filtered_strings;\n  for (int i = 0; i < strings.size(); i++) {\n    bool contain_substring = false;\n    for (int j = 0; j < strings[i].size(); j++) {\n      if (strings[i][j] == substring[0]) {\n        int cnt = 0;\n        for (int k = j; k < strings[i].size(); k++) {\n          if (cnt == substring.size()) {\n            contain_substring = true;\n            break;\n          }\n          if (strings[i][k] == substring[cnt]) {\n            cnt++;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (contain_substring) {\n      filtered_strings.push_back(strings[i]);\n    }\n  }\n  return filtered_strings;",
        "grade-26": {
            "execution": 0
        },
        "190": "std::vector<std::string> ret;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            ret.push_back(s);\n        }\n    }\n    return ret;",
        "grade-190": {
            "execution": 1
        },
        "152": "std::vector<std::string> new_strings;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n            new_strings.push_back(strings[i]);\n        }\n    }\n    return new_strings;",
        "grade-152": {
            "execution": 1
        },
        "22": "std::vector<std::string> results;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            results.push_back(s);\n        }\n    }\n    return results;",
        "grade-22": {
            "execution": 1
        },
        "167": "std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.find(substring) != std::string::npos) {\n      result.push_back(string);\n    }\n  }\n  return result;",
        "grade-167": {
            "execution": 1
        },
        "115": "std::vector<std::string> filtered_strings;\n    for (std::string element : strings) {\n        if (element.find(substring) != std::string::npos) {\n            filtered_strings.push_back(element);\n        }\n    }\n    return filtered_strings;",
        "grade-115": {
            "execution": 1
        },
        "8": "std::vector<std::string> filtered;\n    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            filtered.push_back(str);\n        }\n    }\n    return filtered;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> newStrings;\n    for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            newStrings.push_back(str);\n        }\n    }\n    return newStrings;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> result;\n  for (const auto& s : strings) {\n    if (s.find(substring) != std::string::npos) {\n      result.push_back(s);\n    }\n  }\n  return result;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<std::string> result;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::vector<std::string> filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;",
        "grade-61": {
            "execution": 1
        },
        "140": "std::vector<std::string>::iterator it;\n\tstd::vector<std::string> res;\n\tfor(it = strings.begin(); it != strings.end(); it++) {\n\t\tstd::string str = *it;\n\t\tif(str.find(substring) != std::string::npos)\n\t\t\tres.push_back(str);\n\t}\n\treturn res;",
        "grade-140": {
            "execution": 1
        },
        "170": "std::vector<std::string> result;\n  for (auto& i : strings) {\n    if (i.find(substring) != std::string::npos) {\n      result.push_back(i);\n    }\n  }\n  return result;",
        "grade-170": {
            "execution": 1
        },
        "bleu-179": 0.22100862929344012,
        "bleu-28": 0.2285613553225973,
        "bleu-6": 0.21580477992733532,
        "bleu-73": 0.217446786986345,
        "bleu-64": 0.21580477992733532,
        "bleu-59": 0.217446786986345,
        "bleu-35": 0.217446786986345,
        "bleu-26": 0.2421553255372471,
        "bleu-190": 0.21645118179214798,
        "bleu-152": 0.6500924718494493,
        "bleu-22": 0.217446786986345,
        "bleu-167": 0.21645118179214798,
        "bleu-115": 0.217446786986345,
        "bleu-8": 0.2169963768263715,
        "bleu-7": 0.21828785648391696,
        "bleu-23": 0.2169963768263715,
        "bleu-57": 0.217446786986345,
        "bleu-61": 0.217446786986345,
        "bleu-140": 0.1890683626855742,
        "bleu-170": 0.22167061829184445,
        "codebleu-179": 0.4306254904649345,
        "codebleu-28": 0.42548710130871353,
        "codebleu-6": 0.4234738975067862,
        "codebleu-73": 0.43366180696914386,
        "codebleu-64": 0.4234738975067862,
        "codebleu-59": 0.43366180696914386,
        "codebleu-35": 0.43366180696914386,
        "codebleu-26": 0.7170728660301373,
        "codebleu-190": 0.4250079533403114,
        "codebleu-152": 0.7452304981061358,
        "codebleu-22": 0.43366180696914386,
        "codebleu-167": 0.4250079533403114,
        "codebleu-115": 0.43366180696914386,
        "codebleu-8": 0.44149273475301454,
        "codebleu-7": 0.43366180696914386,
        "codebleu-23": 0.44149273475301454,
        "codebleu-57": 0.43366180696914386,
        "codebleu-61": 0.43366180696914386,
        "codebleu-140": 0.577879183651948,
        "codebleu-170": 0.4322746172881782,
        "chrf-179": 0.5232320554938237,
        "chrf-28": 0.501274806652173,
        "chrf-6": 0.5262134857147326,
        "chrf-73": 0.49760495879721217,
        "chrf-64": 0.5584740422888466,
        "chrf-59": 0.49760495879721217,
        "chrf-35": 0.5096443856330939,
        "chrf-26": 0.541869639528874,
        "chrf-190": 0.49192906644079265,
        "chrf-152": 0.7679566791380139,
        "chrf-22": 0.49359518113039896,
        "chrf-167": 0.5462699283711179,
        "chrf-115": 0.4951426934706976,
        "chrf-8": 0.4866264395203418,
        "chrf-7": 0.534185105436068,
        "chrf-23": 0.4865203662073278,
        "chrf-57": 0.5096443856330939,
        "chrf-61": 0.5164081831497733,
        "chrf-140": 0.5404114052614893,
        "chrf-170": 0.47873672439887904,
        "rougel-179": 0.5714285714285714,
        "rougel-28": 0.5225225225225224,
        "rougel-6": 0.5178571428571428,
        "rougel-73": 0.5043478260869565,
        "rougel-64": 0.5178571428571428,
        "rougel-59": 0.5043478260869565,
        "rougel-35": 0.5043478260869565,
        "rougel-26": 0.451063829787234,
        "rougel-190": 0.5132743362831858,
        "rougel-152": 0.8,
        "rougel-22": 0.5043478260869565,
        "rougel-167": 0.5132743362831858,
        "rougel-115": 0.5043478260869565,
        "rougel-8": 0.5087719298245614,
        "rougel-7": 0.4915254237288136,
        "rougel-23": 0.5087719298245614,
        "rougel-57": 0.5043478260869565,
        "rougel-61": 0.5043478260869565,
        "rougel-140": 0.4933333333333334,
        "rougel-170": 0.5663716814159292,
        "meteor-179": 0.4789576124567474,
        "meteor-28": 0.44674457429048414,
        "meteor-6": 0.4472944849115504,
        "meteor-73": 0.4556886790008292,
        "meteor-64": 0.4472944849115504,
        "meteor-59": 0.4556886790008292,
        "meteor-35": 0.4556886790008292,
        "meteor-26": 0.5913423179360561,
        "meteor-190": 0.44655023452068265,
        "meteor-152": 0.8400283448976964,
        "meteor-22": 0.4556886790008292,
        "meteor-167": 0.4783350063943016,
        "meteor-115": 0.4556886790008292,
        "meteor-8": 0.4458084567224755,
        "meteor-7": 0.46387972130546384,
        "meteor-23": 0.4458084567224755,
        "meteor-57": 0.4556886790008292,
        "meteor-61": 0.4556886790008292,
        "meteor-140": 0.5607802159526297,
        "meteor-170": 0.478160677993425,
        "ruby-179": 0.3770491803278688,
        "ruby-28": 0.360655737704918,
        "ruby-6": 0.3278688524590164,
        "ruby-73": 0.3278688524590164,
        "ruby-64": 0.3278688524590164,
        "ruby-59": 0.3278688524590164,
        "ruby-35": 0.3278688524590164,
        "ruby-26": 0.29885057471264365,
        "ruby-190": 0.3278688524590164,
        "ruby-152": 0.7391304347826086,
        "ruby-22": 0.3278688524590164,
        "ruby-167": 0.3278688524590164,
        "ruby-115": 0.3278688524590164,
        "ruby-8": 0.3278688524590164,
        "ruby-7": 0.2786885245901639,
        "ruby-23": 0.3278688524590164,
        "ruby-57": 0.3278688524590164,
        "ruby-61": 0.3278688524590164,
        "ruby-140": 0.3370786516853933,
        "ruby-170": 0.3770491803278688,
        "codebertscore_f1-179": 0.8710808753967285,
        "codebertscore_f3-179": 0.8653116226196289,
        "codebertscore_f1-28": 0.861308753490448,
        "codebertscore_f3-28": 0.852188229560852,
        "codebertscore_f1-6": 0.8579657077789307,
        "codebertscore_f3-6": 0.8443911671638489,
        "codebertscore_f1-73": 0.8688611388206482,
        "codebertscore_f3-73": 0.8555719256401062,
        "codebertscore_f1-64": 0.8721528053283691,
        "codebertscore_f3-64": 0.8564190864562988,
        "codebertscore_f1-59": 0.8665890097618103,
        "codebertscore_f3-59": 0.8540282249450684,
        "codebertscore_f1-35": 0.8676649332046509,
        "codebertscore_f3-35": 0.8559378981590271,
        "codebertscore_f1-26": 0.7906733155250549,
        "codebertscore_f3-26": 0.8192314505577087,
        "codebertscore_f1-190": 0.8593744039535522,
        "codebertscore_f3-190": 0.8498254418373108,
        "codebertscore_f1-152": 0.9349530935287476,
        "codebertscore_f3-152": 0.9463752508163452,
        "codebertscore_f1-22": 0.8669540286064148,
        "codebertscore_f3-22": 0.8540431261062622,
        "codebertscore_f1-167": 0.8597074747085571,
        "codebertscore_f3-167": 0.8470808267593384,
        "codebertscore_f1-115": 0.8496135473251343,
        "codebertscore_f3-115": 0.8366278409957886,
        "codebertscore_f1-8": 0.8484163284301758,
        "codebertscore_f3-8": 0.8414934277534485,
        "codebertscore_f1-7": 0.8512961864471436,
        "codebertscore_f3-7": 0.8422161936759949,
        "codebertscore_f1-23": 0.855948805809021,
        "codebertscore_f3-23": 0.8519787788391113,
        "codebertscore_f1-57": 0.8668205142021179,
        "codebertscore_f3-57": 0.8533362150192261,
        "codebertscore_f1-61": 0.855248212814331,
        "codebertscore_f3-61": 0.8422300219535828,
        "codebertscore_f1-140": 0.8508887887001038,
        "codebertscore_f3-140": 0.8670803904533386,
        "codebertscore_f1-170": 0.876308023929596,
        "codebertscore_f3-170": 0.8742504715919495,
        "codebertscore_s_f1-179": 0.8713855743408203,
        "codebertscore_s_f3-179": 0.8663772940635681,
        "codebertscore_s_f1-28": 0.8619097471237183,
        "codebertscore_s_f3-28": 0.8541365265846252,
        "codebertscore_s_f1-6": 0.8599447011947632,
        "codebertscore_s_f3-6": 0.8478464484214783,
        "codebertscore_s_f1-73": 0.8712040185928345,
        "codebertscore_s_f3-73": 0.8590787649154663,
        "codebertscore_s_f1-64": 0.873614490032196,
        "codebertscore_s_f3-64": 0.8581984043121338,
        "codebertscore_s_f1-59": 0.8684188723564148,
        "codebertscore_s_f3-59": 0.8565186858177185,
        "codebertscore_s_f1-35": 0.8700281977653503,
        "codebertscore_s_f3-35": 0.8581489324569702,
        "codebertscore_s_f1-26": 0.8130246996879578,
        "codebertscore_s_f3-26": 0.8431556224822998,
        "codebertscore_s_f1-190": 0.8601770401000977,
        "codebertscore_s_f3-190": 0.8524030447006226,
        "codebertscore_s_f1-152": 0.9346500039100647,
        "codebertscore_s_f3-152": 0.9464309215545654,
        "codebertscore_s_f1-22": 0.8698934316635132,
        "codebertscore_s_f3-22": 0.8580967783927917,
        "codebertscore_s_f1-167": 0.8625379800796509,
        "codebertscore_s_f3-167": 0.8503952026367188,
        "codebertscore_s_f1-115": 0.8528289198875427,
        "codebertscore_s_f3-115": 0.8413569927215576,
        "codebertscore_s_f1-8": 0.850360095500946,
        "codebertscore_s_f3-8": 0.8446390628814697,
        "codebertscore_s_f1-7": 0.8510870337486267,
        "codebertscore_s_f3-7": 0.8437403440475464,
        "codebertscore_s_f1-23": 0.8563594222068787,
        "codebertscore_s_f3-23": 0.853098452091217,
        "codebertscore_s_f1-57": 0.868440568447113,
        "codebertscore_s_f3-57": 0.8563619256019592,
        "codebertscore_s_f1-61": 0.8578459620475769,
        "codebertscore_s_f3-61": 0.8460909128189087,
        "codebertscore_s_f1-140": 0.8545176982879639,
        "codebertscore_s_f3-140": 0.8690744638442993,
        "codebertscore_s_f1-170": 0.8779969811439514,
        "codebertscore_s_f3-170": 0.8770054578781128,
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-115": 4,
        "raw_gpt35_nswr-115": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-170": 4,
        "raw_gpt35_nswr-170": "4"
    }
]