[
    {
        "intent": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n",
        "snippet": [
            "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n"
        ],
        "simplified": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "task_id": "99",
        "0": "let val = Number(value);\n    if(val > 0){\n        return Math.ceil(val);\n    }else{\n        return Math.floor(val);\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "value = parseFloat(value)\n  return Math.round(value)\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "value = +value;\n  if (isNaN(value)) {\n    return false;\n  }\n  return Math.round(value);\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return Math.round(value);\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "return Math.round(value);\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let closerToFloor = num - floor;\n  let closerToCeil = ceil - num;\n  if(closerToFloor < closerToCeil){\n    return floor;\n  } else {\n    return ceil;\n  }\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "return Number(value).toFixed(0);\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "let num = parseFloat(value);\n  if (Math.round(num) - num === 0){\n    return num;\n  } else if (Math.round(num) - num > 0){\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "let convertedToNum = Number(value);\n    let rounded = Math.round(convertedToNum);\n    let roundedDown = Math.floor(convertedToNum);\n    let roundedUp = Math.ceil(convertedToNum);\n    let decimal = convertedToNum - roundedDown;\n    let decimal2 = roundedUp - convertedToNum;\n    if(decimal < decimal2){\n        return roundedDown;\n    }else if(decimal2 < decimal){\n        return roundedUp;\n    }else{\n        return rounded;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "let numbers = value.split('.');\n    let num1 = parseInt(numbers[0]);\n    let num2 = parseInt(numbers[1]);\n    return (num2 >= 5) ? num1 + 1 : num1;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "//Turn value into an array using .split()\n    //Turn value into an array using .map() to loop over each number\n    //Turn value into an array using .Math.round() to round each number\n    //Turn value into an array using .join('') to put each number back into one string\n    //Turn value into an array using .parseInt() to change each number back into a string\n    //Return value\n    return parseInt(value.split('').map(val => Math.round(val)).join(''));\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var valInt = parseInt(value);\n    var valFloat = parseFloat(value);\n    var valStr = value.toString();\n    var valDec = valStr.slice(valStr.indexOf('.'));\n    if(valFloat>valInt){\n        if(valDec<0.5){\n            return valInt;\n        }else{\n            return valInt + 1;\n        }\n    }else{\n        return valInt;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "const splitValue = value.split(\".\");\n    if(splitValue[1] !== undefined){\n        if(splitValue[1][0] >= 5){\n            return Number(splitValue[0]) + 1;\n        } else {\n            return Number(splitValue[0]);\n        }\n    } else {\n        return Number(splitValue[0]);\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "value = parseFloat(value);\n\tvar num = value.toString().indexOf('.');\n\tif(num == -1){\n\t\treturn value;\n\t}\n\telse{\n\t\tvar before = value.toString().slice(0,num);\n\t\tvar after = value.toString().slice(num+1,value.toString().length);\n\t\tif(after[0] >= 5){\n\t\t\treturn parseInt(before) + 1;\n\t\t}\n\t\telse{\n\t\t\treturn parseInt(before);\n\t\t}\n\t}\n}",
        "grade-13": {
            "execution": 0
        },
        "15": "return (value - value.toFixed(0) > 0.5) ? (Math.ceil(value)) : (Math.floor(value));\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "return value.toString().indexOf('.') < 0 ? parseInt(value) : parseInt(value) + 0.5;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var result = Math.round(value);\n  return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "return value;\n}\nmodule.exports = closest_integer;",
        "grade-18": {
            "execution": 0
        },
        "bleu-0": 0.13889984369883362,
        "bleu-1": 0.02167200111829456,
        "bleu-2": 0.056141400967573245,
        "bleu-3": 0.004319857100303265,
        "bleu-4": 0.004319857100303265,
        "bleu-5": 0.050783845775815406,
        "bleu-6": 0.0224018140881918,
        "bleu-7": 0.055120915530288424,
        "bleu-8": 0.06356082898139025,
        "bleu-9": 0.029831770408576198,
        "bleu-10": 0.009476129952350363,
        "bleu-11": 0.09244793890351667,
        "bleu-12": 0.04563140695624064,
        "bleu-13": 0.04020699376365581,
        "bleu-15": 0.09712468454367519,
        "bleu-16": 0.07229185426958862,
        "bleu-17": 0.015327881970938522,
        "bleu-18": 0.003521771152560621,
        "codebleu-0": 0.4557325180699613,
        "codebleu-1": 0.19036631279125232,
        "codebleu-2": 0.2587278133125411,
        "codebleu-3": 0.08106893903501249,
        "codebleu-4": 0.08106893903501249,
        "codebleu-5": 0.4949712643678161,
        "codebleu-6": 0.1340089341751344,
        "codebleu-7": 0.5124178981937603,
        "codebleu-8": 0.5085409263409049,
        "codebleu-9": 0.3328201970443349,
        "codebleu-10": 0.3123973727422003,
        "codebleu-11": 0.5452725218369572,
        "codebleu-12": 0.44642857142857145,
        "codebleu-13": 0.5187807881773397,
        "codebleu-15": 0.2846243397039475,
        "codebleu-16": 0.24142954530790744,
        "codebleu-17": 0.1417718405156061,
        "codebleu-18": 0.06985944411531661,
        "chrf-0": 0.33315214119285663,
        "chrf-1": 0.21957880197776963,
        "chrf-2": 0.28133001136043995,
        "chrf-3": 0.12751445522091173,
        "chrf-4": 0.12751445522091173,
        "chrf-5": 0.2028380587008089,
        "chrf-6": 0.21400215781070775,
        "chrf-7": 0.22246432945883665,
        "chrf-8": 0.21786837952324042,
        "chrf-9": 0.1923483206175808,
        "chrf-10": 0.2042425243273664,
        "chrf-11": 0.2849377106899592,
        "chrf-12": 0.28657636327092734,
        "chrf-13": 0.31089503705671506,
        "chrf-15": 0.27034663152814836,
        "chrf-16": 0.2521653833352282,
        "chrf-17": 0.15256278362685322,
        "chrf-18": 0.16131519622698756,
        "rougel-0": 0.39999999999999997,
        "rougel-1": 0.2711864406779661,
        "rougel-2": 0.3055555555555556,
        "rougel-3": 0.1509433962264151,
        "rougel-4": 0.1509433962264151,
        "rougel-5": 0.2831858407079646,
        "rougel-6": 0.2807017543859649,
        "rougel-7": 0.3119266055045871,
        "rougel-8": 0.2638888888888889,
        "rougel-9": 0.27368421052631586,
        "rougel-10": 0.15204678362573099,
        "rougel-11": 0.31884057971014496,
        "rougel-12": 0.2698412698412698,
        "rougel-13": 0.2732919254658385,
        "rougel-15": 0.325,
        "rougel-16": 0.2531645569620253,
        "rougel-17": 0.20689655172413793,
        "rougel-18": 0.11111111111111109,
        "meteor-0": 0.29421296296296295,
        "meteor-1": 0.13381995133819952,
        "meteor-2": 0.22189158313679247,
        "meteor-3": 0.07407407407407407,
        "meteor-4": 0.07407407407407407,
        "meteor-5": 0.3552045856454662,
        "meteor-6": 0.15537897310513443,
        "meteor-7": 0.3311583514099783,
        "meteor-8": 0.34386200716845877,
        "meteor-9": 0.25562080536912757,
        "meteor-10": 0.17208413001912046,
        "meteor-11": 0.4213907785336357,
        "meteor-12": 0.3830672373181701,
        "meteor-13": 0.33045093946567194,
        "meteor-15": 0.19675925925925927,
        "meteor-16": 0.2716701711136891,
        "meteor-17": 0.08536585365853658,
        "meteor-18": 0.0916256157635468,
        "ruby-0": 0.2272727272727273,
        "ruby-1": 0.15909090909090906,
        "ruby-2": 0.20454545454545459,
        "ruby-3": 0.06818181818181823,
        "ruby-4": 0.06818181818181823,
        "ruby-5": 0.17391304347826086,
        "ruby-6": 0.18181818181818177,
        "ruby-7": 0.18461538461538463,
        "ruby-8": 0.18000000000000005,
        "ruby-9": 0.13725490196078427,
        "ruby-10": 0.09448818897637801,
        "ruby-11": 0.23404255319148937,
        "ruby-12": 0.1707317073170732,
        "ruby-13": 0.16239316239316237,
        "ruby-15": 0.20454545454545459,
        "ruby-16": 0.15909090909090906,
        "ruby-17": 0.09090909090909094,
        "ruby-18": 0.06818181818181823,
        "codebertscore_f1-0": 0.7943733930587769,
        "codebertscore_f3-0": 0.787087082862854,
        "codebertscore_f1-1": 0.7802424430847168,
        "codebertscore_f3-1": 0.7385267019271851,
        "codebertscore_f1-2": 0.7778981328010559,
        "codebertscore_f3-2": 0.7576201558113098,
        "codebertscore_f1-3": 0.7482434511184692,
        "codebertscore_f3-3": 0.7139187455177307,
        "codebertscore_f1-4": 0.7482434511184692,
        "codebertscore_f3-4": 0.7139187455177307,
        "codebertscore_f1-5": 0.7267894148826599,
        "codebertscore_f3-5": 0.7408045530319214,
        "codebertscore_f1-6": 0.7402535676956177,
        "codebertscore_f3-6": 0.7121255993843079,
        "codebertscore_f1-7": 0.770380973815918,
        "codebertscore_f3-7": 0.7705193758010864,
        "codebertscore_f1-8": 0.7056088447570801,
        "codebertscore_f3-8": 0.7215262055397034,
        "codebertscore_f1-9": 0.7489889860153198,
        "codebertscore_f3-9": 0.7517250776290894,
        "codebertscore_f1-10": 0.6845218539237976,
        "codebertscore_f3-10": 0.702293336391449,
        "codebertscore_f1-11": 0.7386476397514343,
        "codebertscore_f3-11": 0.7597350478172302,
        "codebertscore_f1-12": 0.7406908869743347,
        "codebertscore_f3-12": 0.7401167750358582,
        "codebertscore_f1-13": 0.741791307926178,
        "codebertscore_f3-13": 0.7670261859893799,
        "codebertscore_f1-15": 0.7644587159156799,
        "codebertscore_f3-15": 0.7619799375534058,
        "codebertscore_f1-16": 0.7554633021354675,
        "codebertscore_f3-16": 0.762428343296051,
        "codebertscore_f1-17": 0.771527886390686,
        "codebertscore_f3-17": 0.7333159446716309,
        "codebertscore_f1-18": 0.6845465898513794,
        "codebertscore_f3-18": 0.6889156103134155,
        "codebertscore_s_f1-0": 0.8111485838890076,
        "codebertscore_s_f3-0": 0.8072682023048401,
        "codebertscore_s_f1-1": 0.7741898894309998,
        "codebertscore_s_f3-1": 0.7307534217834473,
        "codebertscore_s_f1-2": 0.7702716588973999,
        "codebertscore_s_f3-2": 0.7535694241523743,
        "codebertscore_s_f1-3": 0.7472700476646423,
        "codebertscore_s_f3-3": 0.6999900937080383,
        "codebertscore_s_f1-4": 0.7472700476646423,
        "codebertscore_s_f3-4": 0.6999900937080383,
        "codebertscore_s_f1-5": 0.7418688535690308,
        "codebertscore_s_f3-5": 0.7576016187667847,
        "codebertscore_s_f1-6": 0.7461177110671997,
        "codebertscore_s_f3-6": 0.7136269807815552,
        "codebertscore_s_f1-7": 0.784775972366333,
        "codebertscore_s_f3-7": 0.7877858281135559,
        "codebertscore_s_f1-8": 0.7259981036186218,
        "codebertscore_s_f3-8": 0.7485155463218689,
        "codebertscore_s_f1-9": 0.7659282088279724,
        "codebertscore_s_f3-9": 0.7688294649124146,
        "codebertscore_s_f1-10": 0.6831616759300232,
        "codebertscore_s_f3-10": 0.7069587111473083,
        "codebertscore_s_f1-11": 0.7503945231437683,
        "codebertscore_s_f3-11": 0.7738601565361023,
        "codebertscore_s_f1-12": 0.7579987049102783,
        "codebertscore_s_f3-12": 0.7610186338424683,
        "codebertscore_s_f1-13": 0.740626871585846,
        "codebertscore_s_f3-13": 0.7702863812446594,
        "codebertscore_s_f1-15": 0.7765536904335022,
        "codebertscore_s_f3-15": 0.7754755616188049,
        "codebertscore_s_f1-16": 0.7561997771263123,
        "codebertscore_s_f3-16": 0.7585335373878479,
        "codebertscore_s_f1-17": 0.7530423998832703,
        "codebertscore_s_f3-17": 0.7180606126785278,
        "codebertscore_s_f1-18": 0.6774858832359314,
        "codebertscore_s_f3-18": 0.6782023310661316,
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 0,
        "raw_gpt35_nsnr-18": "3 - The code snippet returns the input value as is, without any rounding or conversion to integer. While this does not cover all required functionalities of the problem, it does handle the case where the input value is already an integer.",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-10": 0,
        "raw_gpt35_nswr-10": "Score: 1",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3"
    },
    {
        "intent": "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunction fix_spaces(text){\n",
        "snippet": [
            "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n"
        ],
        "simplified": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
        "task_id": "140",
        "3": "var t = text.replace(/\\s+/g,'-');\n    return t.replace(/\\s/g, '_');\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var arr = text.split('');\n    var result = '';\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == ' '){\n            count++;\n            if(count > 2){\n                result += '-';\n                count = 0;\n            }\n            else{\n                result += '_';\n            }\n        }\n        else{\n            result += arr[i];\n            count = 0;\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return text.replace(/\\s{2,}/g, \"-\").replace(/\\s/g, \"_\");\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return text.replace(/\\s{2,}/g, \"-\").replace(/\\s/g, \"_\");\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var newStr = text.split(\"  \").join(\"-\");\n    var newStr2 = newStr.split(\" \").join(\"_\");\n    return newStr2;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var index = 0;\n\tvar space_index = 0;\n\tvar substring = \"\";\n\twhile(index < text.length){\n\t\tspace_index = text.indexOf(\" \", index);\n\t\tif(space_index == -1){\n\t\t\tsubstring = text.substring(index, text.length);\n\t\t\tsubstring = substring.replace(/ /g, \"_\");\n\t\t\ttext = text.substring(0, index) + substring;\n\t\t\tbreak;\n\t\t}\n\t\tsubstring = text.substring(index, space_index);\n\t\tsubstring = substring.replace(/ /g, \"_\");\n\t\ttext = text.substring(0, index) + substring + text.substring(space_index);\n\t\tindex = space_index + 1;\n\t}\n\treturn text.replace(/\\s+/g, \"-\");\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let count = 0;\n    let result = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === \" \"){\n            count++;\n            result += (count > 2) ? \"-\" : \"_\";\n        }\n        else{\n            count = 0;\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return text.replace(/\\s+/g, '-').replace(/ /g, '_');\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if (text.length == 0){\n        return \"\";\n    }\n    else{\n        if (text[0] == \" \"){\n            if (text[1] == \" \"){\n                if (text[2] == \" \"){\n                    return fix_spaces(\"-\" + text.slice(3));\n                }\n                else{\n                    return fix_spaces(\"_\" + text.slice(2));\n                }\n            }\n            else{\n                return fix_spaces(\"_\" + text.slice(1));\n            }\n        }\n        else{\n            return text[0] + fix_spaces(text.slice(1));\n        }\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let result = '';\n    let to_underscore = false;\n    let to_dash = false;\n    for(let i = 0; i < text.length; i++){\n        if(text[i] !== ' '){\n            result += text[i];\n            to_underscore = false;\n            to_dash = false;\n        }else{\n            if(to_underscore){\n                result += '-';\n                to_dash = true;\n            }else{\n                result += '_';\n                to_underscore = true;\n            }\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return text.replace(/\\s+/g,'-').replace(/ /g, '_')\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let temp = text.split(\" \");\n  let i = 0;\n  while(i < temp.length){\n    if(temp[i] == \"\")\n      temp.splice(i, 1);\n    else i++;\n  }\n  let j = 0;\n  while(j < temp.length - 1){\n    if(temp[j].length == 0){\n      temp.splice(j, 1);\n    }else j++;\n  }\n  let result = temp.join(\" \");\n  while(result.indexOf(\"  \") != -1){\n    result = result.replace(\"  \", \"-\");\n  }\n  return result.replace(/ /g, \"_\");\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return text.replace(/[ ]{2,}/g, '-').replace(/ /g, '_');\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return text.replace(/\\s+/g, ' ').replace(/ /g, '_').replace(/_+/g, '-');\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let a = text.replace(/\\s{2,}/g, \"-\").replace(/ /g, \"_\");\n    return a;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return text.replace(/\\s/g, '_').replace(/_+/g, '-');\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return text.replace(/[\\s]+/g, '-').replace(/ /g, '_').replace(/^[\\s]+/g, '').replace(/[\\s]+$/g, '');\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return text.replace(/[ ]{2,}/g, '-').replace(/ /g, '_');\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "const newText = text.replace(/\\s+/g, '_');\n    return newText;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.003030014835696526,
        "bleu-0": 0.23146398881453173,
        "bleu-8": 0.0021885446529872564,
        "bleu-7": 0.0021885446529872564,
        "bleu-16": 0.006750180107417917,
        "bleu-2": 0.0699242295065711,
        "bleu-11": 0.2094327685848571,
        "bleu-1": 0.0010880274613702665,
        "bleu-10": 0.1702648765214996,
        "bleu-17": 0.2533811899539412,
        "bleu-12": 0.0008724910515513589,
        "bleu-6": 0.17487515393634534,
        "bleu-18": 0.0017680227024779618,
        "bleu-15": 0.0049602318281835285,
        "bleu-13": 0.003190732311141587,
        "bleu-9": 0.0021885446529872564,
        "bleu-4": 0.0012884017610224913,
        "bleu-14": 0.014686697799957548,
        "bleu-5": 0.0017680227024779618,
        "bleu-19": 0.00039367842206012796,
        "codebleu-3": 0.08623603095286081,
        "codebleu-0": 0.4330797558184599,
        "codebleu-8": 0.07338111503498608,
        "codebleu-7": 0.07338111503498608,
        "codebleu-16": 0.13488400915290136,
        "codebleu-2": 0.4008555389053766,
        "codebleu-11": 0.33298037665009295,
        "codebleu-1": 0.06998508603102409,
        "codebleu-10": 0.46119367530461164,
        "codebleu-17": 0.3822168095620061,
        "codebleu-12": 0.06042896212025549,
        "codebleu-6": 0.4906816924052226,
        "codebleu-18": 0.08283388340616382,
        "codebleu-15": 0.09940117525689762,
        "codebleu-13": 0.09585325086546971,
        "codebleu-9": 0.07338111503498608,
        "codebleu-4": 0.07319841521251079,
        "codebleu-14": 0.1452624626068664,
        "codebleu-5": 0.08283388340616382,
        "codebleu-19": 0.06671585577713632,
        "chrf-3": 0.0771563334491754,
        "chrf-0": 0.3066979957541736,
        "chrf-8": 0.06069373524857478,
        "chrf-7": 0.06069373524857478,
        "chrf-16": 0.07185269702387323,
        "chrf-2": 0.16656076445922674,
        "chrf-11": 0.3443322543412849,
        "chrf-1": 0.06854890288509259,
        "chrf-10": 0.25517254085208374,
        "chrf-17": 0.3624855362720381,
        "chrf-12": 0.06675255863446361,
        "chrf-6": 0.23187865417182021,
        "chrf-18": 0.07110798490512013,
        "chrf-15": 0.07817755871646588,
        "chrf-13": 0.06588668282618468,
        "chrf-9": 0.07094855258110128,
        "chrf-4": 0.0694038360592146,
        "chrf-14": 0.09003767036787727,
        "chrf-5": 0.07110798490512013,
        "chrf-19": 0.07660163165076576,
        "rougel-3": 0.16915422885572137,
        "rougel-0": 0.4723247232472325,
        "rougel-8": 0.1507537688442211,
        "rougel-7": 0.1507537688442211,
        "rougel-16": 0.2105263157894737,
        "rougel-2": 0.32415902140672787,
        "rougel-11": 0.4738955823293172,
        "rougel-1": 0.13402061855670103,
        "rougel-10": 0.3822525597269625,
        "rougel-17": 0.4925373134328358,
        "rougel-12": 0.13471502590673576,
        "rougel-6": 0.389937106918239,
        "rougel-18": 0.17258883248730963,
        "rougel-15": 0.17475728155339806,
        "rougel-13": 0.1782178217821782,
        "rougel-9": 0.1507537688442211,
        "rougel-4": 0.1435897435897436,
        "rougel-14": 0.21929824561403508,
        "rougel-5": 0.17258883248730963,
        "rougel-19": 0.1263157894736842,
        "meteor-3": 0.07512327416173571,
        "meteor-0": 0.3384068485246377,
        "meteor-8": 0.05924950625411454,
        "meteor-7": 0.05924950625411454,
        "meteor-16": 0.08829300196206673,
        "meteor-2": 0.24783000486620338,
        "meteor-11": 0.318735651385737,
        "meteor-1": 0.05284015852047557,
        "meteor-10": 0.3095884867098106,
        "meteor-17": 0.31195863799286544,
        "meteor-12": 0.049570389953734306,
        "meteor-6": 0.3036105308832581,
        "meteor-18": 0.06591957811470008,
        "meteor-15": 0.0900100733295062,
        "meteor-13": 0.06898817345597898,
        "meteor-9": 0.05924950625411454,
        "meteor-4": 0.07366930464672765,
        "meteor-14": 0.12155301195090439,
        "meteor-5": 0.06591957811470008,
        "meteor-19": 0.04966887417218543,
        "ruby-3": 0.10303030303030303,
        "ruby-0": 0.296969696969697,
        "ruby-8": 0.09090909090909094,
        "ruby-7": 0.09090909090909094,
        "ruby-16": 0.12727272727272732,
        "ruby-2": 0.1454545454545455,
        "ruby-11": 0.32727272727272727,
        "ruby-1": 0.07878787878787874,
        "ruby-10": 0.2666666666666667,
        "ruby-17": 0.33939393939393936,
        "ruby-12": 0.07878787878787874,
        "ruby-6": 0.22424242424242424,
        "ruby-18": 0.10303030303030303,
        "ruby-15": 0.10303030303030303,
        "ruby-13": 0.10303030303030303,
        "ruby-9": 0.09090909090909094,
        "ruby-4": 0.08484848484848484,
        "ruby-14": 0.12121212121212122,
        "ruby-5": 0.10303030303030303,
        "ruby-19": 0.06666666666666665,
        "codebertscore_f1-3": 0.6438118815422058,
        "codebertscore_f3-3": 0.6372100710868835,
        "codebertscore_f1-0": 0.8372467756271362,
        "codebertscore_f3-0": 0.8292966485023499,
        "codebertscore_f1-8": 0.5957157015800476,
        "codebertscore_f3-8": 0.586877703666687,
        "codebertscore_f1-7": 0.5957157015800476,
        "codebertscore_f3-7": 0.586877703666687,
        "codebertscore_f1-16": 0.6548364758491516,
        "codebertscore_f3-16": 0.630757212638855,
        "codebertscore_f1-2": 0.7444267272949219,
        "codebertscore_f3-2": 0.7554486393928528,
        "codebertscore_f1-11": 0.8693825602531433,
        "codebertscore_f3-11": 0.8432970643043518,
        "codebertscore_f1-1": 0.5881949663162231,
        "codebertscore_f3-1": 0.5795965194702148,
        "codebertscore_f1-10": 0.7442648410797119,
        "codebertscore_f3-10": 0.7375396490097046,
        "codebertscore_f1-17": 0.8018951416015625,
        "codebertscore_f3-17": 0.8101351261138916,
        "codebertscore_f1-12": 0.5883769989013672,
        "codebertscore_f3-12": 0.5790985226631165,
        "codebertscore_f1-6": 0.7779393792152405,
        "codebertscore_f3-6": 0.784176766872406,
        "codebertscore_f1-18": 0.5970314145088196,
        "codebertscore_f3-18": 0.5858339071273804,
        "codebertscore_f1-15": 0.5943370461463928,
        "codebertscore_f3-15": 0.5880830883979797,
        "codebertscore_f1-13": 0.6384624242782593,
        "codebertscore_f3-13": 0.6246936321258545,
        "codebertscore_f1-9": 0.5960366725921631,
        "codebertscore_f3-9": 0.5862889885902405,
        "codebertscore_f1-4": 0.6006274819374084,
        "codebertscore_f3-4": 0.586036205291748,
        "codebertscore_f1-14": 0.6012293696403503,
        "codebertscore_f3-14": 0.6003434658050537,
        "codebertscore_f1-5": 0.5970314145088196,
        "codebertscore_f3-5": 0.5858339071273804,
        "codebertscore_f1-19": 0.6292304992675781,
        "codebertscore_f3-19": 0.6034390330314636,
        "codebertscore_s_f1-3": 0.6558107733726501,
        "codebertscore_s_f3-3": 0.6452195048332214,
        "codebertscore_s_f1-0": 0.8438398838043213,
        "codebertscore_s_f3-0": 0.8369277715682983,
        "codebertscore_s_f1-8": 0.6160712242126465,
        "codebertscore_s_f3-8": 0.6047484278678894,
        "codebertscore_s_f1-7": 0.6160712242126465,
        "codebertscore_s_f3-7": 0.6047484278678894,
        "codebertscore_s_f1-16": 0.6560518741607666,
        "codebertscore_s_f3-16": 0.6337478160858154,
        "codebertscore_s_f1-2": 0.743364155292511,
        "codebertscore_s_f3-2": 0.7574000358581543,
        "codebertscore_s_f1-11": 0.8741000890731812,
        "codebertscore_s_f3-11": 0.8503395318984985,
        "codebertscore_s_f1-1": 0.6101238131523132,
        "codebertscore_s_f3-1": 0.5977321863174438,
        "codebertscore_s_f1-10": 0.7493260502815247,
        "codebertscore_s_f3-10": 0.7461144328117371,
        "codebertscore_s_f1-17": 0.803349494934082,
        "codebertscore_s_f3-17": 0.8153715133666992,
        "codebertscore_s_f1-12": 0.6074098944664001,
        "codebertscore_s_f3-12": 0.5947598218917847,
        "codebertscore_s_f1-6": 0.7782387137413025,
        "codebertscore_s_f3-6": 0.7862433195114136,
        "codebertscore_s_f1-18": 0.6208351850509644,
        "codebertscore_s_f3-18": 0.6065301895141602,
        "codebertscore_s_f1-15": 0.6184127330780029,
        "codebertscore_s_f3-15": 0.610107958316803,
        "codebertscore_s_f1-13": 0.6537173390388489,
        "codebertscore_s_f3-13": 0.6395490765571594,
        "codebertscore_s_f1-9": 0.6205921173095703,
        "codebertscore_s_f3-9": 0.6119253635406494,
        "codebertscore_s_f1-4": 0.6183933615684509,
        "codebertscore_s_f3-4": 0.6016392111778259,
        "codebertscore_s_f1-14": 0.6306800246238708,
        "codebertscore_s_f3-14": 0.6281113624572754,
        "codebertscore_s_f1-5": 0.6208351850509644,
        "codebertscore_s_f3-5": 0.6065301895141602,
        "codebertscore_s_f1-19": 0.6403272151947021,
        "codebertscore_s_f3-19": 0.6089344024658203,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 2,
        "raw_gpt35_nsnr-10": "2",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 2,
        "raw_gpt35_nsnr-15": "2",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfunction specialFilter(nums){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
        "task_id": "146",
        "3": "let arr = nums.filter(n => n > 10);\n    let result = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let first = num % 10;\n        let last = num.toString().split('')[0];\n        if(first % 2 != 0 && last % 2 != 0){\n            result++;\n        }\n    }\n    return result;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return nums.filter(n => n > 10 && n.toString().length > 1 && n.toString()[0] % 2 !== 0 && n.toString()[n.toString().length - 1] % 2 !== 0).length;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let oddFilter = nums.filter(function(num){\n        if(num > 10){\n            if(Math.abs(num % 10) % 2 !== 0 && Math.abs(num % 10) !== 0){\n                return num;\n            }\n        }\n    });\n    return oddFilter.length;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var count = 0;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tvar elem = nums[i];\n\t\tif(elem > 10 && elem % 2 === 1 && Math.floor(elem / 10) % 2 === 1 && elem % 10 === 1 || elem % 10 === 3 || elem % 10 === 5 || elem % 10 === 7 || elem % 10 === 9){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var index = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1){\n            index++;\n        }\n    }\n    return index;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let counter = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] > 10 && nums[i]%2 === 1 && nums[i]%10 === 1){\n      counter += 1;\n    }\n  }\n  return counter;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return nums.filter(function(num){\n\t\tvar first = num.toString()[0];\n\t\tvar last = num.toString()[num.toString().length - 1];\n\t\tif(first % 2 !== 0 && last % 2 !== 0 && num > 10){\n\t\t\treturn num;\n\t\t}\n\t}).length;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let count = 0;\n  for(let num of nums){\n    if(num > 10 && num.toString().length > 1){\n      let numStr = num.toString();\n      if(numStr[0] % 2 !== 0 && numStr[numStr.length - 1] % 2 !== 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//determine the first and last digit of a number\n    //function to determine the first digit of a number\n    const firstDigit = (n) => {\n        while (n >= 10) {\n            n = n / 10;\n        }\n        return n;\n    }\n    //function to determine the last digit of a number\n    const lastDigit = (n) => {\n        return n % 10;\n    }\n    //function to check if the digit is even or odd\n    const isOdd = (n) => {\n        if (n % 2 === 0) {\n            return false;\n        }\n        return true;\n    }\n    //filter\n    return nums.filter(x => (x > 10) && (isOdd(firstDigit(x)) && isOdd(lastDigit(x)))).length;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "12": "return nums.filter(n => {\n        if(n < 0){\n            n = n * -1;\n        }\n        if(n > 10 && n % 2 != 0 && \n        Math.floor(n / 10) % 2 != 0 && \n        n % 10 != 0){\n            return n;\n        }\n    }).length;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if (nums[0] % 2 == 1 && nums[nums.length - 1] % 2 == 1) {\n\t\treturn nums.length;\n\t}\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "//your code is here\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var count = 0;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tif(nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === -1) && (nums[i] % 10 === 1 || nums[i] % 10 === 3 || nums[i] % 10 === 5 || nums[i] % 10 === 7 || nums[i] % 10 === 9)){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// your code here\n    return nums.filter(function(number){\n        return Math.abs(number) > 10 &&\n               Math.abs(number % 10) % 2 == 1 &&\n               Math.abs(number / (Math.pow(10, String(number).length - 1))) % 2 == 1;\n    }).length;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        let firstDigit = num.toString()[0];\n        let lastDigit = num.toString()[num.toString().length - 1];\n        if(num > 10 && ((firstDigit % 2 != 0) && (lastDigit % 2 != 0))){\n            sum += 1;\n        }\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 2 !== 0 && (nums[i] % 10) % 2 !== 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let arr = [];\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && Math.abs(nums[i] % 10) % 2 != 0 && nums[i] % 2 != 0){\n            arr.push(nums[i]);\n        }\n    }\n    return arr.length;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let specialArray = [];\n    let counter = 0;\n    for(let i = 0; i < nums.length; i++){\n        let numAsString = nums[i].toString();\n        if(nums[i] > 10 && numAsString[0] % 2 !== 0 && numAsString[numAsString.length - 1] % 2 !== 0){\n            specialArray.push(nums[i]);\n            counter ++;\n        }\n    }\n    return counter;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return nums.filter(x => x > 10 && x.toString().slice(0,1) % 2 != 0 && x.toString().slice(-1) % 2 != 0).length;\n}\n\nmodule.exports = {\n    parseStudentRecord,\n    isStudentId,\n    getStudentName,\n    getStudentId,\n    getStudentGrade,\n    getStudentInfo,\n    getStudentList,\n    getStudentInfoList,\n    getStudentsByGrade,\n    getStudentsByGradeRange,\n    addStudent,\n    addStudents,\n    removeStudentById,\n    removeStudentByName,\n    removeStudentsByGrade,\n    removeStudentsByGradeRange,\n    updateStudent,\n    updateStudents,\n    addGradeById,\n    addGradeByName,\n    removeGradeById,\n    removeGradeByName,\n    getStudentCountByGrade,\n    getStudentsByLetter,\n    getCountByLetter,\n    getAverageByGrade,\n    getStudentAverageById,\n    getStudentAverageByName,\n    getAverageByGradeAndGender,\n    getStudentInfoById,\n    getStudentInfoByName,\n    getFemaleCount,\n    getStudentsByName,\n    getBestStudent,\n    getWorstStudent,\n    getStudentsByAge,\n    getTotalCount,\n    getStudentListByAge,\n    getOlderStudents,\n    getYoungerStudents,\n    sortStudents,\n    getStudentsByAverage,\n    specialFilter\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.2724713295051356,
        "bleu-0": 0.15208380232673865,
        "bleu-8": 0.08922731960715558,
        "bleu-7": 0.2667281099944152,
        "bleu-16": 0.38390514686721283,
        "bleu-2": 0.41480128649873643,
        "bleu-11": 0.16873225928671073,
        "bleu-1": 0.21471426368934796,
        "bleu-10": 0.04637557890969707,
        "bleu-17": 1.6458114310822745e-38,
        "bleu-12": 0.06536688358723891,
        "bleu-6": 0.13733393197098323,
        "bleu-18": 6.194091388061874e-07,
        "bleu-15": 0.26521447025458467,
        "bleu-13": 0.20569594935711208,
        "bleu-9": 0.31242384116191135,
        "bleu-4": 0.3745165188759208,
        "bleu-14": 0.3840613814780673,
        "bleu-5": 0.3806276069113626,
        "bleu-19": 0.03598611583761591,
        "codebleu-3": 0.6118075522074954,
        "codebleu-0": 0.3805372325873211,
        "codebleu-8": 0.4021135782086856,
        "codebleu-7": 0.5590210806630258,
        "codebleu-16": 0.4899561113661924,
        "codebleu-2": 0.5027559859776755,
        "codebleu-11": 0.4790706172218661,
        "codebleu-1": 0.5783879963555452,
        "codebleu-10": 0.44490932939672295,
        "codebleu-17": 0.005420054200542005,
        "codebleu-12": 0.3823269664098691,
        "codebleu-6": 0.2485281092187711,
        "codebleu-18": 0.021680231357342566,
        "codebleu-15": 0.6121412855422801,
        "codebleu-13": 0.4346081524729984,
        "codebleu-9": 0.641652091563721,
        "codebleu-4": 0.5123623762659206,
        "codebleu-14": 0.5695955305222451,
        "codebleu-5": 0.6909597652590903,
        "codebleu-19": 0.4083990710978983,
        "chrf-3": 0.3674631092498124,
        "chrf-0": 0.27956017969081864,
        "chrf-8": 0.26281446845682066,
        "chrf-7": 0.3336960338846227,
        "chrf-16": 0.4031548551092648,
        "chrf-2": 0.4497516711355493,
        "chrf-11": 0.31888845532454924,
        "chrf-1": 0.37327274745122385,
        "chrf-10": 0.21630049946176186,
        "chrf-17": 0.008547008547008546,
        "chrf-12": 0.20776292428701956,
        "chrf-6": 0.31111429571353794,
        "chrf-18": 0.026403545141257298,
        "chrf-15": 0.36741779594927965,
        "chrf-13": 0.32081546439256914,
        "chrf-9": 0.44523408832888944,
        "chrf-4": 0.4299701998500445,
        "chrf-14": 0.44013956148613714,
        "chrf-5": 0.48928427012980774,
        "chrf-19": 0.13712074029687238,
        "rougel-3": 0.5425531914893618,
        "rougel-0": 0.40251572327044033,
        "rougel-8": 0.4,
        "rougel-7": 0.46601941747572817,
        "rougel-16": 0.6666666666666667,
        "rougel-2": 0.6666666666666667,
        "rougel-11": 0.36904761904761907,
        "rougel-1": 0.5714285714285714,
        "rougel-10": 0.2142857142857143,
        "rougel-17": 0.02247191011235955,
        "rougel-12": 0.33749999999999997,
        "rougel-6": 0.4552845528455285,
        "rougel-18": 0.021052631578947368,
        "rougel-15": 0.49090909090909096,
        "rougel-13": 0.3636363636363636,
        "rougel-9": 0.5517241379310345,
        "rougel-4": 0.6792452830188679,
        "rougel-14": 0.5680473372781065,
        "rougel-5": 0.6161616161616162,
        "rougel-19": 0.16091954022988506,
        "meteor-3": 0.4900304708753494,
        "meteor-0": 0.35206779274381506,
        "meteor-8": 0.40062375141925005,
        "meteor-7": 0.3920248494830197,
        "meteor-16": 0.4686777184757618,
        "meteor-2": 0.4338373688072224,
        "meteor-11": 0.4217868678984,
        "meteor-1": 0.5582255655390713,
        "meteor-10": 0.29270365204814297,
        "meteor-17": 0.006305170239596469,
        "meteor-12": 0.3259457063878373,
        "meteor-6": 0.3854292623941959,
        "meteor-18": 0.00625782227784731,
        "meteor-15": 0.47884225038420053,
        "meteor-13": 0.40376315466731383,
        "meteor-9": 0.5883676332902369,
        "meteor-4": 0.4932621045133325,
        "meteor-14": 0.4762457044673539,
        "meteor-5": 0.560496849168526,
        "meteor-19": 0.2726236723439022,
        "ruby-3": 0.37,
        "ruby-0": 0.23863636363636365,
        "ruby-8": 0.23863636363636365,
        "ruby-7": 0.35593220338983056,
        "ruby-16": 0.5454545454545454,
        "ruby-2": 0.5227272727272727,
        "ruby-11": 0.20454545454545459,
        "ruby-1": 0.40909090909090906,
        "ruby-10": 0.1097560975609756,
        "ruby-17": 0.011363636363636354,
        "ruby-12": 0.19318181818181823,
        "ruby-6": 0.30681818181818177,
        "ruby-18": 0.011363636363636354,
        "ruby-15": 0.3787878787878788,
        "ruby-13": 0.17045454545454541,
        "ruby-9": 0.4173913043478261,
        "ruby-4": 0.5454545454545454,
        "ruby-14": 0.40909090909090906,
        "ruby-5": 0.4545454545454546,
        "ruby-19": 0.0346153846153846,
        "codebertscore_f1-3": 0.8598482012748718,
        "codebertscore_f3-3": 0.8612834811210632,
        "codebertscore_f1-0": 0.8101551532745361,
        "codebertscore_f3-0": 0.786088228225708,
        "codebertscore_f1-8": 0.7794574499130249,
        "codebertscore_f3-8": 0.7679113149642944,
        "codebertscore_f1-7": 0.8266688585281372,
        "codebertscore_f3-7": 0.8459776639938354,
        "codebertscore_f1-16": 0.8878462314605713,
        "codebertscore_f3-16": 0.8619902729988098,
        "codebertscore_f1-2": 0.8938372135162354,
        "codebertscore_f3-2": 0.8688055872917175,
        "codebertscore_f1-11": 0.8097949028015137,
        "codebertscore_f3-11": 0.7950206398963928,
        "codebertscore_f1-1": 0.8747760653495789,
        "codebertscore_f3-1": 0.8688685894012451,
        "codebertscore_f1-10": 0.6833210587501526,
        "codebertscore_f3-10": 0.7174574136734009,
        "codebertscore_f1-17": 0.0,
        "codebertscore_f3-17": 0.0,
        "codebertscore_f1-12": 0.7766510248184204,
        "codebertscore_f3-12": 0.7668734192848206,
        "codebertscore_f1-6": 0.8302597999572754,
        "codebertscore_f3-6": 0.7801938056945801,
        "codebertscore_f1-18": 0.5889002084732056,
        "codebertscore_f3-18": 0.5714622139930725,
        "codebertscore_f1-15": 0.8467903733253479,
        "codebertscore_f3-15": 0.8488785028457642,
        "codebertscore_f1-13": 0.7691821455955505,
        "codebertscore_f3-13": 0.7664659023284912,
        "codebertscore_f1-9": 0.8700482249259949,
        "codebertscore_f3-9": 0.8890219926834106,
        "codebertscore_f1-4": 0.8920643925666809,
        "codebertscore_f3-4": 0.8662238717079163,
        "codebertscore_f1-14": 0.8713149428367615,
        "codebertscore_f3-14": 0.8504675626754761,
        "codebertscore_f1-5": 0.8864968419075012,
        "codebertscore_f3-5": 0.900646984577179,
        "codebertscore_f1-19": 0.6388152837753296,
        "codebertscore_f3-19": 0.7219958305358887,
        "codebertscore_s_f1-3": 0.8631508946418762,
        "codebertscore_s_f3-3": 0.8655673861503601,
        "codebertscore_s_f1-0": 0.8194453716278076,
        "codebertscore_s_f3-0": 0.7962289452552795,
        "codebertscore_s_f1-8": 0.7878491878509521,
        "codebertscore_s_f3-8": 0.7788545489311218,
        "codebertscore_s_f1-7": 0.8320685029029846,
        "codebertscore_s_f3-7": 0.8507922291755676,
        "codebertscore_s_f1-16": 0.8894558548927307,
        "codebertscore_s_f3-16": 0.8640354871749878,
        "codebertscore_s_f1-2": 0.8962180018424988,
        "codebertscore_s_f3-2": 0.8717485666275024,
        "codebertscore_s_f1-11": 0.8224608898162842,
        "codebertscore_s_f3-11": 0.8084735870361328,
        "codebertscore_s_f1-1": 0.8805568218231201,
        "codebertscore_s_f3-1": 0.8758453130722046,
        "codebertscore_s_f1-10": 0.697104275226593,
        "codebertscore_s_f3-10": 0.7324738502502441,
        "codebertscore_s_f1-17": 0.0,
        "codebertscore_s_f3-17": 0.0,
        "codebertscore_s_f1-12": 0.7878995537757874,
        "codebertscore_s_f3-12": 0.7794795632362366,
        "codebertscore_s_f1-6": 0.8333462476730347,
        "codebertscore_s_f3-6": 0.7810041308403015,
        "codebertscore_s_f1-18": 0.5502440333366394,
        "codebertscore_s_f3-18": 0.5246371626853943,
        "codebertscore_s_f1-15": 0.8513493537902832,
        "codebertscore_s_f3-15": 0.8526653051376343,
        "codebertscore_s_f1-13": 0.7764233350753784,
        "codebertscore_s_f3-13": 0.7752386927604675,
        "codebertscore_s_f1-9": 0.8751879930496216,
        "codebertscore_s_f3-9": 0.8954434394836426,
        "codebertscore_s_f1-4": 0.8949748873710632,
        "codebertscore_s_f3-4": 0.86991947889328,
        "codebertscore_s_f1-14": 0.8787225484848022,
        "codebertscore_s_f3-14": 0.8589683771133423,
        "codebertscore_s_f1-5": 0.8948827981948853,
        "codebertscore_s_f3-5": 0.907314658164978,
        "codebertscore_s_f1-19": 0.6439515948295593,
        "codebertscore_s_f3-19": 0.7259597182273865,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 0,
        "raw_gpt35_nsnr-18": "0",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name, extensions){\n",
        "snippet": [
            "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n"
        ],
        "simplified": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
        "task_id": "153",
        "3": "let strongest = [0, extensions[0]];\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    let strength = [...extension].reduce((acc, cur) => {\n      cur = cur.toUpperCase() === cur ? 1 : -1;\n      return acc + cur;\n    }, 0);\n    if (strength >= strongest[0]) {\n      strongest = [strength, extension];\n    }\n  }\n  return `${class_name}.${strongest[1]}`;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return class_name + '.' + extensions.reduce((a, b) => {\n\t\tlet A = a.toUpperCase().split('').length - a.toLowerCase().split('').length;\n\t\tlet B = b.toUpperCase().split('').length - b.toLowerCase().split('').length;\n\t\treturn A > B ? a : b;\n\t})\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var arr = []\n\tfor(var i = 0; i < extensions.length; i++){\n\t\tarr.push(extensions[i].split(''))\n\t}\n\t//[[\"S\", \"E\", \"r\", \"v\", \"i\", \"N\", \"G\", \"S\", \"l\", \"i\", \"C\", \"e\", \"s\"], [\"C\", \"h\", \"e\", \"e\", \"s\", \"e\"], [\"S\", \"t\", \"u\", \"F\", \"f\", \"e\", \"d\"]]\n\tvar num = 0\n\tvar count = 0\n\tvar a = 0\n\tvar b = 0\n\tvar c = 0\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = 0; j < arr[i].length; j++){\n\t\t\tif(arr[i][j] == arr[i][j].toUpperCase()){\n\t\t\t\ta++\n\t\t\t}else{\n\t\t\t\tb++\n\t\t\t}\n\t\t}\n\t\tc = a - b\n\t\tif(c > num){\n\t\t\tnum = c\n\t\t\tcount = i\n\t\t}\n\t\ta = 0\n\t\tb = 0\n\t}\n\treturn class_name + '.' + extensions[count]\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var ext_strength = [];\n    extensions.forEach(function(e){\n        var upper = e.replace(/[^A-Z]/g, '').length;\n        var lower = e.replace(/[^a-z]/g, '').length;\n        ext_strength.push([upper - lower, e]);\n    });\n    ext_strength.sort();\n    return class_name + '.' + ext_strength[ext_strength.length - 1][1];\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let maxStrength = 0;\n  let strongestExtension = '';\n  extensions.forEach(extension => {\n    let strength = extension.split('').filter(char => char === char.toUpperCase()).length - extension.split('').filter(char => char === char.toLowerCase()).length;\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = extension;\n    }\n  });\n  return `${class_name}.${strongestExtension}`;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var strength = -99;\n    var result = 'my_class.AA';\n    for(var extension of extensions){\n        var cap = 0;\n        var sm = 0;\n        for(var i = 0; i < extension.length; i++){\n            if(extension[i] == extension[i].toUpperCase()){\n                cap++;\n            }else{\n                sm++;\n            }\n        }\n        var temp = cap - sm;\n        if(temp > strength){\n            strength = temp;\n            result = class_name + '.' + extension;\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let caps = 0,\n        sm = 0,\n        _strongest = '';\n    for(let i = 0; i < extensions.length; i++){\n        let j = 0;\n        while(j < extensions[i].length){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n                caps += 1;\n            }\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n                sm += 1;\n            }\n            j++;\n        }\n        if(caps - sm > 0){\n            _strongest = extensions[i];\n        }\n        caps = 0;\n        sm = 0;\n    }\n    return `${class_name}.${_strongest}`;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let aux = '';\n    let start = false;\n    let strongest = '';\n    let strongest_strength = 0;\n    let strength = 0;\n    let cap = 0;\n    let sm = 0;\n    let first = true;\n    for(let extension of extensions){\n        aux = '';\n        start = false;\n        cap = 0;\n        sm = 0;\n        strength = 0;\n        first = true;\n        for(let ch of extension){\n            if(ch.charCodeAt(0) >= 65 && ch.charCodeAt(0) <= 90){\n                start = true;\n                if(first){\n                    aux += ch;\n                    first = false;\n                }\n                cap++;\n            }\n            else if(ch.charCodeAt(0) >= 97 && ch.charCodeAt(0) <= 122){\n                start = true;\n                sm++;\n            }\n            else if(start){\n                break;\n            }\n        }\n        strength = cap - sm;\n        if(strength > strongest_strength){\n            strongest_strength = strength;\n            strongest = aux;\n        }\n    }\n    return class_name + '.' + strongest;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let strength = 0;\n    let strongest = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let caps = 0;\n        let smalls = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n                caps += 1;\n            }\n            else{\n                smalls += 1;\n            }\n        }\n        strength = caps - smalls;\n        if(strength > strongest){\n            strongest = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(extensions.length === 0)\n        return class_name;\n    let strongest_extension = extensions[0];\n    let strongest_strength = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let strength = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                strength++;\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\n                strength--;\n        }\n        if(strength > strongest_strength){\n            strongest_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let extension = extensions.reduce((acc, e) => {\n        let num_caps = (e.match(/[A-Z]/g) || []).length;\n        let num_smalls = (e.match(/[a-z]/g) || []).length;\n        let diff = num_caps - num_smalls;\n        if (diff > acc.diff){\n            acc.diff = diff;\n            acc.extension = e;\n        }\n        return acc;\n    }, {diff: -Infinity, extension: ''});\n    return `${class_name}.${extension.extension}`;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var strength = 0;\n    var strongest_extension = '';\n    extensions.forEach(element => {\n        var cur_strength = element.split('').reduce((acc, cur) => {\n            if (/[A-Z]/.test(cur)) acc.caps++;\n            if (/[a-z]/.test(cur)) acc.smalls++;\n            return acc;\n        }, {caps: 0, smalls: 0});\n        if (strength < cur_strength.caps - cur_strength.smalls) {\n            strength = cur_strength.caps - cur_strength.smalls;\n            strongest_extension = element;\n        }\n    });\n    return class_name + '.' + strongest_extension;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let maxStrength = -Infinity;\n    let extensionName = \"\";\n    extensions.forEach(extension => {\n        let up = extension.split(\"\").filter(x => x === x.toUpperCase()).length;\n        let lo = extension.split(\"\").filter(x => x === x.toLowerCase()).length;\n        let strength = up - lo;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            extensionName = extension;\n        }\n    });\n    return `${class_name}.${extensionName}`;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var classes = {};\n    for(var i=0; i<extensions.length; i++){\n        var up = extensions[i].match(/[A-Z]/g).length;\n        var low = extensions[i].match(/[a-z]/g).length;\n        var strength = up - low;\n        classes[extensions[i]] = strength;\n    }\n    var max = extensions[0];\n    for(var i=0; i<extensions.length; i++){\n        if(classes[extensions[i]] > classes[max]){\n            max = extensions[i];\n        }\n    }\n    return class_name + '.' + max;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var uppercase = 0;\n    var lowercase = 0;\n    var strength = 0;\n    var strongest = '';\n    extensions.forEach(extension => {\n        for(let i = 0; i < extension.length; i++){\n            if(extension[i] === extension[i].toUpperCase()){\n                uppercase++;\n            }\n            else{\n                lowercase++;\n            }\n        }\n        if(strength < uppercase - lowercase){\n            strength = uppercase - lowercase;\n            strongest = extension;\n        }\n        uppercase = 0;\n        lowercase = 0;\n    });\n    return class_name + '.' + strongest;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let ext_index=0;\n\tlet sum_up=0;\n\tlet sum_low=0;\n\tfor(let i=0;i<extensions.length;i++){\n\t\tsum_up=0;\n\t\tsum_low=0;\n\t\tfor(let j=0;j<extensions[i].length;j++){\n\t\t\tif(extensions[i][j]==extensions[i][j].toUpperCase()){\n\t\t\t\tsum_up++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum_low++;\n\t\t\t}\n\t\t}\n\t\tif(sum_up-sum_low>ext_index){\n\t\t\text_index=sum_up-sum_low;\n\t\t\tresult=extensions[i];\n\t\t}\n\t}\n\treturn class_name+'.'+result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let strongest = {ext: '', str: -Infinity};\n    for(let x = 0; x < extensions.length; x++){\n        let cap = 0, sm = 0;\n        for(let y = 0; y < extensions[x].length; y++){\n            if(extensions[x][y] >= 'A' && extensions[x][y] <= 'Z'){\n                cap++;\n            }\n            else{\n                sm++;\n            }\n        }\n        if(cap - sm > strongest.str){\n            strongest.ext = extensions[x];\n            strongest.str = cap - sm;\n        }\n    }\n    return class_name + '.' + strongest.ext;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var best_ext;\n    var best_score = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var score = extensions[i].replace(/[^A-Z]/g, '').length - extensions[i].replace(/[^a-z]/g, '').length;\n        if(score > best_score){\n            best_score = score;\n            best_ext = extensions[i];\n        }\n    }\n    return class_name + '.' + best_ext;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var res = null;\n  var strength = 0;\n  extensions.forEach(function(val, index){\n    var temp = 0;\n    val.split('').forEach(function(val, index){\n      if (val.toUpperCase() === val) temp += 1;\n      else temp -= 1;\n    });\n    if (temp > strength) {\n      strength = temp;\n      res = val;\n    }\n  });\n  return class_name + '.' + res;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var CAP = 0;\n  var SM = 0;\n  var strongestExt;\n  for(var i = 0; i < extensions.length; i++){\n    CAP = 0;\n    SM = 0;\n    for(var j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] == extensions[i][j].toUpperCase()){\n        CAP++;\n      }\n      else{\n        SM++;\n      }\n    }\n    if(extensions[i].length === 0){\n      continue;\n    }\n    if(i === 0){\n      strongestExt = extensions[i];\n    }\n    else if(CAP - SM > extensions[i].length){\n      strongestExt = extensions[i];\n    }\n  }\n  return class_name + '.' + strongestExt;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.16274007246637232,
        "bleu-0": 0.08502747457396836,
        "bleu-8": 0.15903215833401999,
        "bleu-7": 0.09322128749299574,
        "bleu-16": 0.04550008921290025,
        "bleu-2": 0.162715899660611,
        "bleu-11": 0.2458457515585376,
        "bleu-1": 0.1754294217444801,
        "bleu-10": 0.39525444115940817,
        "bleu-17": 0.32988022612912327,
        "bleu-12": 0.03750405285880967,
        "bleu-6": 0.0946825323702713,
        "bleu-18": 0.04260092265027349,
        "bleu-15": 0.20946538349651234,
        "bleu-13": 0.19758285220669858,
        "bleu-9": 0.38469102855262105,
        "bleu-4": 0.22734266983971693,
        "bleu-14": 0.20202548739345125,
        "bleu-5": 0.10485794777796448,
        "bleu-19": 0.29339883826058244,
        "codebleu-3": 0.46578685246113954,
        "codebleu-0": 0.28112241551688383,
        "codebleu-8": 0.6113576195352574,
        "codebleu-7": 0.374083436372911,
        "codebleu-16": 0.36158960875122503,
        "codebleu-2": 0.4989775545570196,
        "codebleu-11": 0.6227231336083882,
        "codebleu-1": 0.5905526001010446,
        "codebleu-10": 0.640113338541577,
        "codebleu-17": 0.6597313271365656,
        "codebleu-12": 0.42423736527040967,
        "codebleu-6": 0.49385979962968113,
        "codebleu-18": 0.3972361825146607,
        "codebleu-15": 0.5257208456714836,
        "codebleu-13": 0.5211015944606965,
        "codebleu-9": 0.6299742656334336,
        "codebleu-4": 0.5859387883599457,
        "codebleu-14": 0.455332343831889,
        "codebleu-5": 0.39755496194587286,
        "codebleu-19": 0.6357845865148877,
        "chrf-3": 0.3585787114900281,
        "chrf-0": 0.25298724150214424,
        "chrf-8": 0.38149269124308044,
        "chrf-7": 0.2640218261316394,
        "chrf-16": 0.295851219303603,
        "chrf-2": 0.35175484813217706,
        "chrf-11": 0.4306367820771148,
        "chrf-1": 0.3569343076601628,
        "chrf-10": 0.48861129595346564,
        "chrf-17": 0.4582562105079365,
        "chrf-12": 0.3221271790141721,
        "chrf-6": 0.28396798641767157,
        "chrf-18": 0.320961911048424,
        "chrf-15": 0.3811391649356141,
        "chrf-13": 0.34959400230930393,
        "chrf-9": 0.48942791558733795,
        "chrf-4": 0.44025521310675503,
        "chrf-14": 0.38696464420708115,
        "chrf-5": 0.2635586831356056,
        "chrf-19": 0.44205154104809724,
        "rougel-3": 0.4226415094339623,
        "rougel-0": 0.2240663900414938,
        "rougel-8": 0.34272300469483563,
        "rougel-7": 0.2704918032786885,
        "rougel-16": 0.3255813953488372,
        "rougel-2": 0.4108527131782946,
        "rougel-11": 0.5146579804560261,
        "rougel-1": 0.42134831460674155,
        "rougel-10": 0.608695652173913,
        "rougel-17": 0.564935064935065,
        "rougel-12": 0.291044776119403,
        "rougel-6": 0.3142857142857143,
        "rougel-18": 0.3420074349442379,
        "rougel-15": 0.37630662020905925,
        "rougel-13": 0.4182509505703422,
        "rougel-9": 0.5745454545454545,
        "rougel-4": 0.4930555555555555,
        "rougel-14": 0.39183673469387753,
        "rougel-5": 0.38016528925619836,
        "rougel-19": 0.5209003215434083,
        "meteor-3": 0.34694568945337256,
        "meteor-0": 0.1775968956649522,
        "meteor-8": 0.49698441659005854,
        "meteor-7": 0.23130715438407742,
        "meteor-16": 0.27432158790994016,
        "meteor-2": 0.3751691662635058,
        "meteor-11": 0.5151756897985709,
        "meteor-1": 0.5069284448191921,
        "meteor-10": 0.5446740344579444,
        "meteor-17": 0.5537017981795893,
        "meteor-12": 0.2731635593718755,
        "meteor-6": 0.3114587432769251,
        "meteor-18": 0.276575136437012,
        "meteor-15": 0.43085752507116837,
        "meteor-13": 0.4046639231824417,
        "meteor-9": 0.5286523362393336,
        "meteor-4": 0.45043257422731287,
        "meteor-14": 0.38030907948067716,
        "meteor-5": 0.28556962517327145,
        "meteor-19": 0.4914906321061775,
        "ruby-3": 0.22857142857142854,
        "ruby-0": 0.1428571428571429,
        "ruby-8": 0.1678321678321678,
        "ruby-7": 0.12857142857142856,
        "ruby-16": 0.16428571428571426,
        "ruby-2": 0.2785714285714286,
        "ruby-11": 0.33532934131736525,
        "ruby-1": 0.2962962962962963,
        "ruby-10": 0.4642857142857143,
        "ruby-17": 0.41666666666666663,
        "ruby-12": 0.12142857142857144,
        "ruby-6": 0.13571428571428568,
        "ruby-18": 0.16428571428571426,
        "ruby-15": 0.19727891156462585,
        "ruby-13": 0.30714285714285716,
        "ruby-9": 0.3928571428571429,
        "ruby-4": 0.32432432432432434,
        "ruby-14": 0.30714285714285716,
        "ruby-5": 0.26428571428571423,
        "ruby-19": 0.3742690058479532,
        "codebertscore_f1-3": 0.7985150218009949,
        "codebertscore_f3-3": 0.7954919338226318,
        "codebertscore_f1-0": 0.709594190120697,
        "codebertscore_f3-0": 0.7018337249755859,
        "codebertscore_f1-8": 0.7645619511604309,
        "codebertscore_f3-8": 0.7686765193939209,
        "codebertscore_f1-7": 0.7271883487701416,
        "codebertscore_f3-7": 0.7193825244903564,
        "codebertscore_f1-16": 0.7488589286804199,
        "codebertscore_f3-16": 0.7473949790000916,
        "codebertscore_f1-2": 0.7850419282913208,
        "codebertscore_f3-2": 0.7824539542198181,
        "codebertscore_f1-11": 0.8147493004798889,
        "codebertscore_f3-11": 0.8094186186790466,
        "codebertscore_f1-1": 0.7307807803153992,
        "codebertscore_f3-1": 0.7397273778915405,
        "codebertscore_f1-10": 0.8278378248214722,
        "codebertscore_f3-10": 0.8209331035614014,
        "codebertscore_f1-17": 0.8151735067367554,
        "codebertscore_f3-17": 0.8087446093559265,
        "codebertscore_f1-12": 0.7271901369094849,
        "codebertscore_f3-12": 0.7300378680229187,
        "codebertscore_f1-6": 0.7330164313316345,
        "codebertscore_f3-6": 0.7384790182113647,
        "codebertscore_f1-18": 0.7645139694213867,
        "codebertscore_f3-18": 0.7525395154953003,
        "codebertscore_f1-15": 0.7794718146324158,
        "codebertscore_f3-15": 0.7720113396644592,
        "codebertscore_f1-13": 0.7670443654060364,
        "codebertscore_f3-13": 0.7764502167701721,
        "codebertscore_f1-9": 0.8168148994445801,
        "codebertscore_f3-9": 0.8100007176399231,
        "codebertscore_f1-4": 0.8200857639312744,
        "codebertscore_f3-4": 0.8211938142776489,
        "codebertscore_f1-14": 0.7915754914283752,
        "codebertscore_f3-14": 0.7914804816246033,
        "codebertscore_f1-5": 0.7766227722167969,
        "codebertscore_f3-5": 0.7677796483039856,
        "codebertscore_f1-19": 0.816705048084259,
        "codebertscore_f3-19": 0.806343674659729,
        "codebertscore_s_f1-3": 0.8232799768447876,
        "codebertscore_s_f3-3": 0.8186500072479248,
        "codebertscore_s_f1-0": 0.7566713094711304,
        "codebertscore_s_f3-0": 0.7439549565315247,
        "codebertscore_s_f1-8": 0.7930380702018738,
        "codebertscore_s_f3-8": 0.8000606298446655,
        "codebertscore_s_f1-7": 0.7608740925788879,
        "codebertscore_s_f3-7": 0.7505707144737244,
        "codebertscore_s_f1-16": 0.7798402905464172,
        "codebertscore_s_f3-16": 0.7722779512405396,
        "codebertscore_s_f1-2": 0.8131208419799805,
        "codebertscore_s_f3-2": 0.8082343339920044,
        "codebertscore_s_f1-11": 0.8419091105461121,
        "codebertscore_s_f3-11": 0.8362027406692505,
        "codebertscore_s_f1-1": 0.7722347974777222,
        "codebertscore_s_f3-1": 0.7816650867462158,
        "codebertscore_s_f1-10": 0.8436838984489441,
        "codebertscore_s_f3-10": 0.8382426500320435,
        "codebertscore_s_f1-17": 0.8357641100883484,
        "codebertscore_s_f3-17": 0.8311900496482849,
        "codebertscore_s_f1-12": 0.7666646242141724,
        "codebertscore_s_f3-12": 0.7665367722511292,
        "codebertscore_s_f1-6": 0.7578197717666626,
        "codebertscore_s_f3-6": 0.7630715370178223,
        "codebertscore_s_f1-18": 0.7934545278549194,
        "codebertscore_s_f3-18": 0.7846537828445435,
        "codebertscore_s_f1-15": 0.8001220226287842,
        "codebertscore_s_f3-15": 0.7972300052642822,
        "codebertscore_s_f1-13": 0.7906329035758972,
        "codebertscore_s_f3-13": 0.8007506728172302,
        "codebertscore_s_f1-9": 0.8322526216506958,
        "codebertscore_s_f3-9": 0.8325045704841614,
        "codebertscore_s_f1-4": 0.8437175154685974,
        "codebertscore_s_f3-4": 0.8462511897087097,
        "codebertscore_s_f1-14": 0.8193307518959045,
        "codebertscore_s_f3-14": 0.8176562786102295,
        "codebertscore_s_f1-5": 0.8061810731887817,
        "codebertscore_s_f3-5": 0.796515166759491,
        "codebertscore_s_f1-19": 0.8304367065429688,
        "codebertscore_s_f3-19": 0.8237676620483398,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row(lst, x){\n",
        "snippet": [
            "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
        "task_id": "87",
        "3": "let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let sublst = lst[i];\n        for (let j = 0; j < sublst.length; j++) {\n            if (sublst[j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let new_arr = [];\n    for (let i = 0; i < lst.length; i++) {\n        let arr = lst[i];\n        let index = arr.indexOf(x);\n        while (index >= 0) {\n            new_arr.push([i, index]);\n            index = arr.indexOf(x, index + 1);\n        }\n    }\n    new_arr.sort(function (a, b) {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n        } else {\n            return b[1] - a[1];\n        }\n    });\n    return new_arr;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let arr = []\n    lst.forEach((item, index) => {\n        item.forEach((item2, index2) => {\n            if (item2 === x) {\n                arr.push([index, index2])\n            }\n        })\n    })\n    arr.sort((a, b) => {\n        if (a[0] < b[0]) {\n            return -1\n        } else if (a[0] > b[0]) {\n            return 1\n        } else {\n            if (a[1] > b[1]) {\n                return -1\n            } else if (a[1] < b[1]) {\n                return 1\n            } else {\n                return 0\n            }\n        }\n    })\n    console.log(arr)\n    return arr\n}\nget_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1)\nget_row([], 1)\nget_row([[], [1], [1, 2, 3]], 3)",
        "grade-7": {
            "execution": 1
        },
        "16": "if (lst.length == 0) {\n        return [];\n    }\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    result.sort(function(a, b) {\n        if (a[0] == b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let tuples = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                tuples.push([i, j]);\n            }\n        }\n    }\n    tuples.sort(function (a, b) {\n        return a[0] - b[0];\n    });\n    tuples.sort(function (a, b) {\n        return b[1] - a[1];\n    });\n    return tuples;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "// write code here.\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        const element = lst[i];\n        for (let j = 0; j < element.length; j++) {\n            const e = element[j];\n            if (e === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n\nconst lst = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n];\n\nconst list = [\n    [],\n    [1],\n    [1, 2, 3]\n];",
        "grade-11": {
            "execution": 1
        },
        "1": "let arr = [];\n\tif (lst.length == 0) {\n\t\treturn arr;\n\t}\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tarr.push([i, j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort(function(a, b) {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] < b[0]) {\n            return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n        } else {\n            if (a[1] > b[1]) {\n                return -1;\n            } else if (a[1] < b[1]) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    });\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let arr = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                arr.push([i, j]);\n            }\n        }\n    }\n    return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let res = [];\n    lst.forEach((item, i) => {\n        item.forEach((elem, j) => {\n            if (elem === x) res.push([i, j]);\n        });\n    });\n    return res.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let row = [];\n    let obj = {};\n    for(let i = 0; i < lst.length; i++){\n        obj[i] = [];\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                obj[i].push(j);\n            }\n        }\n    }\n    for(let i in obj){\n        for(let j of obj[i]){\n            row.push([i, j]);\n        }\n    }\n    let res = row.sort((a, b) => {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n    return res;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let array = []\n  let row = 0\n  for(let i = 0; i < lst.length; i++){\n    let columns = 0\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        array.push([row, columns])\n      }\n      columns++\n    }\n    row++\n  }\n  let sorted = array.sort(function(a, b){\n    if(a[0] === b[0]){\n      return b[1] - a[1]\n    }\n    return a[0] - b[0]\n  })\n  return sorted\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var coordinates = [];\n    var row_num = 0;\n    var col_num = 0;\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coordinates.push([row_num, col_num]);\n            }\n            col_num += 1;\n        }\n        row_num += 1;\n        col_num = 0;\n    }\n    coordinates.sort(function(a, b) {\n        if (a[0] < b[0]) {\n            return -1;\n        }\n        if (a[0] > b[0]) {\n            return 1;\n        }\n        if (a[1] > b[1]) {\n            return -1;\n        }\n        if (a[1] < b[1]) {\n            return 1;\n        }\n        return 0;\n    });\n    return coordinates;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        return (a[0] - b[0]) || (b[1] - a[1]);\n    });\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(lst.length == 0){\n        return [];\n    }\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort(function(a, b){\n        if(a[0] < b[0]){\n            return -1;\n        }\n        if(a[0] > b[0]){\n            return 1;\n        }\n        if(a[1] > b[1]){\n            return -1;\n        }\n        if(a[1] < b[1]){\n            return 1;\n        }\n        return 0;\n    });\n    return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let array = [];\n    for (let i = 0; i < lst.length; i++) {\n        let row = lst[i];\n        for (let j = 0; j < row.length; j++) {\n            if (x === row[j]) {\n                array.push([i, j]);\n            }\n        }\n    }\n    return array.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1]));\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let res = []\n    for (let i = 0; i < lst.length; i++) {\n        let temp = lst[i].reduce((acc,item, ind) => item === x ? acc.concat([[i, ind]]) : acc, [])\n        res = res.concat(temp)\n    }\n    res.sort((a,b) => a[0] - b[0] || b[1] - a[1])\n    return res\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  let sortByRow = result.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  return sortByRow.map(x => {\n    return [x[0], -x[1]];\n  }).sort((a, b) => {\n    return a[1] - b[1];\n  }).map(x => {\n    return [x[0], -x[1]];\n  });\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.4028321499469298,
        "bleu-0": 0.33361634283742364,
        "bleu-8": 0.2347155434514786,
        "bleu-7": 0.04794127913481921,
        "bleu-16": 0.26374283654240527,
        "bleu-2": 0.3960379059525572,
        "bleu-11": 0.1991334896996624,
        "bleu-1": 0.42908637734404964,
        "bleu-10": 0.3333681391187199,
        "bleu-17": 0.2777629744019883,
        "bleu-12": 0.47778513819659046,
        "bleu-6": 0.09789933552269599,
        "bleu-18": 0.3119146275453128,
        "bleu-15": 0.33607115954474165,
        "bleu-13": 0.23866654087627606,
        "bleu-9": 0.40443382900901026,
        "bleu-4": 0.26092107360142947,
        "bleu-14": 0.34856355996921734,
        "bleu-5": 0.2818956571618482,
        "bleu-19": 0.28230679245014073,
        "codebleu-3": 0.7760196155925089,
        "codebleu-0": 0.7362080603255523,
        "codebleu-8": 0.6938384926063097,
        "codebleu-7": 0.5830599065383997,
        "codebleu-16": 0.7022606041788118,
        "codebleu-2": 0.7669222873919336,
        "codebleu-11": 0.7076214119630858,
        "codebleu-1": 0.805086678183387,
        "codebleu-10": 0.7282017388375882,
        "codebleu-17": 0.7726976522450147,
        "codebleu-12": 0.7885117803007857,
        "codebleu-6": 0.600346822746415,
        "codebleu-18": 0.7546938556860666,
        "codebleu-15": 0.7409979212542709,
        "codebleu-13": 0.758216625789216,
        "codebleu-9": 0.7858445071446717,
        "codebleu-4": 0.7655099439674226,
        "codebleu-14": 0.7325264236746784,
        "codebleu-5": 0.6369865920040754,
        "codebleu-19": 0.7638970102112241,
        "chrf-3": 0.6346534763798913,
        "chrf-0": 0.5359208663780649,
        "chrf-8": 0.383343274818007,
        "chrf-7": 0.1895769023077858,
        "chrf-16": 0.4690702095014167,
        "chrf-2": 0.5989155155690916,
        "chrf-11": 0.4470496046275832,
        "chrf-1": 0.6457152247675509,
        "chrf-10": 0.5281254976659367,
        "chrf-17": 0.5114414633104424,
        "chrf-12": 0.6635512040025604,
        "chrf-6": 0.23143431519325863,
        "chrf-18": 0.5570715564756853,
        "chrf-15": 0.5364590395866716,
        "chrf-13": 0.4389681177443254,
        "chrf-9": 0.5787568223637362,
        "chrf-4": 0.5007452697453565,
        "chrf-14": 0.5291311633565057,
        "chrf-5": 0.39880780929980714,
        "chrf-19": 0.5485702094982549,
        "rougel-3": 0.6116504854368932,
        "rougel-0": 0.5576923076923077,
        "rougel-8": 0.4953271028037384,
        "rougel-7": 0.23452768729641693,
        "rougel-16": 0.4642857142857143,
        "rougel-2": 0.6146341463414634,
        "rougel-11": 0.37762237762237766,
        "rougel-1": 0.6331658291457287,
        "rougel-10": 0.5603864734299517,
        "rougel-17": 0.49392712550607293,
        "rougel-12": 0.6774193548387096,
        "rougel-6": 0.3905325443786982,
        "rougel-18": 0.5333333333333334,
        "rougel-15": 0.5688073394495413,
        "rougel-13": 0.45283018867924524,
        "rougel-9": 0.625,
        "rougel-4": 0.4765625,
        "rougel-14": 0.5729166666666667,
        "rougel-5": 0.5026737967914437,
        "rougel-19": 0.49612403100775193,
        "meteor-3": 0.5447754311326858,
        "meteor-0": 0.5217381431289704,
        "meteor-8": 0.4266101090753547,
        "meteor-7": 0.33471432993565786,
        "meteor-16": 0.49972667638483953,
        "meteor-2": 0.569013999789477,
        "meteor-11": 0.46200487257397826,
        "meteor-1": 0.6343954309502239,
        "meteor-10": 0.5162117778806737,
        "meteor-17": 0.48052895983029353,
        "meteor-12": 0.6176936622601874,
        "meteor-6": 0.3754569901208891,
        "meteor-18": 0.5517870390018993,
        "meteor-15": 0.509403229251552,
        "meteor-13": 0.39160045402951194,
        "meteor-9": 0.4907670697865635,
        "meteor-4": 0.4508015821007302,
        "meteor-14": 0.5632704112425131,
        "meteor-5": 0.39098341208157933,
        "meteor-19": 0.44027255191365533,
        "ruby-3": 0.43410852713178294,
        "ruby-0": 0.3893129770992366,
        "ruby-8": 0.33576642335766427,
        "ruby-7": 0.14347826086956517,
        "ruby-16": 0.25850340136054417,
        "ruby-2": 0.4375,
        "ruby-11": 0.23444976076555024,
        "ruby-1": 0.4590163934426229,
        "ruby-10": 0.39230769230769236,
        "ruby-17": 0.3176470588235294,
        "ruby-12": 0.5137614678899083,
        "ruby-6": 0.18478260869565222,
        "ruby-18": 0.3496932515337423,
        "ruby-15": 0.3900709219858156,
        "ruby-13": 0.28191489361702127,
        "ruby-9": 0.4608695652173913,
        "ruby-4": 0.3016759776536313,
        "ruby-14": 0.4173913043478261,
        "ruby-5": 0.38181818181818183,
        "ruby-19": 0.3149171270718232,
        "codebertscore_f1-3": 0.8712031841278076,
        "codebertscore_f3-3": 0.9105666279792786,
        "codebertscore_f1-0": 0.8476833701133728,
        "codebertscore_f3-0": 0.8910647630691528,
        "codebertscore_f1-8": 0.799760639667511,
        "codebertscore_f3-8": 0.8588218688964844,
        "codebertscore_f1-7": 0.6726661324501038,
        "codebertscore_f3-7": 0.7333670854568481,
        "codebertscore_f1-16": 0.7988536357879639,
        "codebertscore_f3-16": 0.8431478142738342,
        "codebertscore_f1-2": 0.8576758503913879,
        "codebertscore_f3-2": 0.9047693014144897,
        "codebertscore_f1-11": 0.7709223031997681,
        "codebertscore_f3-11": 0.85454261302948,
        "codebertscore_f1-1": 0.8868189454078674,
        "codebertscore_f3-1": 0.9133636355400085,
        "codebertscore_f1-10": 0.8632349967956543,
        "codebertscore_f3-10": 0.9031556844711304,
        "codebertscore_f1-17": 0.8094141483306885,
        "codebertscore_f3-17": 0.8824936151504517,
        "codebertscore_f1-12": 0.8921922445297241,
        "codebertscore_f3-12": 0.9211210608482361,
        "codebertscore_f1-6": 0.7883110046386719,
        "codebertscore_f3-6": 0.8150514364242554,
        "codebertscore_f1-18": 0.8264622688293457,
        "codebertscore_f3-18": 0.8752821683883667,
        "codebertscore_f1-15": 0.8469579815864563,
        "codebertscore_f3-15": 0.8932492136955261,
        "codebertscore_f1-13": 0.7767972946166992,
        "codebertscore_f3-13": 0.8521136045455933,
        "codebertscore_f1-9": 0.8727386593818665,
        "codebertscore_f3-9": 0.9044167399406433,
        "codebertscore_f1-4": 0.7986558079719543,
        "codebertscore_f3-4": 0.8630014657974243,
        "codebertscore_f1-14": 0.8640734553337097,
        "codebertscore_f3-14": 0.8980507254600525,
        "codebertscore_f1-5": 0.8294655084609985,
        "codebertscore_f3-5": 0.8680945038795471,
        "codebertscore_f1-19": 0.8390920758247375,
        "codebertscore_f3-19": 0.9022600650787354,
        "codebertscore_s_f1-3": 0.9633352756500244,
        "codebertscore_s_f3-3": 0.9747167825698853,
        "codebertscore_s_f1-0": 0.9550896286964417,
        "codebertscore_s_f3-0": 0.9696916341781616,
        "codebertscore_s_f1-8": 0.9324536323547363,
        "codebertscore_s_f3-8": 0.955284059047699,
        "codebertscore_s_f1-7": 0.9020570516586304,
        "codebertscore_s_f3-7": 0.9286525845527649,
        "codebertscore_s_f1-16": 0.9401417970657349,
        "codebertscore_s_f3-16": 0.9553027153015137,
        "codebertscore_s_f1-2": 0.9577721357345581,
        "codebertscore_s_f3-2": 0.9737508296966553,
        "codebertscore_s_f1-11": 0.9332494139671326,
        "codebertscore_s_f3-11": 0.9581431746482849,
        "codebertscore_s_f1-1": 0.9632720947265625,
        "codebertscore_s_f3-1": 0.9740296006202698,
        "codebertscore_s_f1-10": 0.957979142665863,
        "codebertscore_s_f3-10": 0.9720478653907776,
        "codebertscore_s_f1-17": 0.9424132108688354,
        "codebertscore_s_f3-17": 0.9652674198150635,
        "codebertscore_s_f1-12": 0.9679269194602966,
        "codebertscore_s_f3-12": 0.9763079881668091,
        "codebertscore_s_f1-6": 0.9396613836288452,
        "codebertscore_s_f3-6": 0.9495519399642944,
        "codebertscore_s_f1-18": 0.945671796798706,
        "codebertscore_s_f3-18": 0.9641538858413696,
        "codebertscore_s_f1-15": 0.9498441219329834,
        "codebertscore_s_f3-15": 0.968551516532898,
        "codebertscore_s_f1-13": 0.923665463924408,
        "codebertscore_s_f3-13": 0.9555814266204834,
        "codebertscore_s_f1-9": 0.9621491432189941,
        "codebertscore_s_f3-9": 0.9718865752220154,
        "codebertscore_s_f1-4": 0.9355807900428772,
        "codebertscore_s_f3-4": 0.957486093044281,
        "codebertscore_s_f1-14": 0.9598947763442993,
        "codebertscore_s_f3-14": 0.9700489044189453,
        "codebertscore_s_f1-5": 0.9428830742835999,
        "codebertscore_s_f3-5": 0.9589855670928955,
        "codebertscore_s_f1-19": 0.9481263160705566,
        "codebertscore_s_f3-19": 0.9716165065765381,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n",
        "snippet": [
            "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n"
        ],
        "simplified": "Return median of elements in the list l.",
        "task_id": "47",
        "3": "}",
        "grade-3": {
            "execution": 0
        },
        "0": "var sum = 0;\n    var length = 0;\n    for(var i = 0; i < l.length; i++){\n        sum += l[i];\n        length++;\n    }\n    return sum/length;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(l.length == 0){\n        return null;\n    }\n    //Sort the list\n    l.sort(function(a, b){\n        return a - b;\n    });\n    //Get the middle index\n    let index = parseInt(l.length / 2);\n    //Check if the list has an even number of elements\n    if(l.length % 2 == 0){\n        //If so, then return the mean of the elements at the index and at index + 1\n        return (l[index] + l[index + 1]) / 2;\n    }else{\n        //If not, then return the element at the index\n        return l[index];\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return _.median(l);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(l.length === 0){\n        return NaN;\n    }\n    let k = Math.floor(l.length/2);\n    let m = 0;\n    l.sort(function(a, b){return a-b});\n    if(l.length % 2 === 0){\n        m = (l[k-1] + l[k])/2;\n    }else{\n        m = l[k];\n    }\n    return m;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "// >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    let length = l.length;\n    let sorted = l.sort(function(a, b){return a-b});\n    let result;\n    if (length % 2 != 0){\n        result = sorted[Math.floor(length/2)];\n    }\n    else{\n        result = (sorted[length/2] + sorted[length/2 - 1])/2;\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if(l.length==0){\n    return null;\n  }else{\n    return l[Math.floor(l.length/2)];\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(l.length == 0){\n        return null;\n    }\n    var length = l.length;\n    var l2 = l.sort(function(a, b){return a-b});\n    if(length % 2 == 0){\n        return (l2[length/2] + l2[length/2 - 1])/2;\n    }\n    else{\n        return l2[Math.floor(length/2)];\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "if (l.length == 0) {\n    return -1;\n  }\n  l.sort(function(a, b){return a-b});\n  var median = (l.length % 2 == 0) ? ((l[l.length/2] + l[l.length/2 - 1]) / 2) : l[Math.floor(l.length/2)];\n  return median;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "l.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tconsole.log(l);\n\treturn l[Math.floor(l.length/2)];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if (l.length % 2 == 0){\n        return (l[l.length/2-1] + l[l.length/2])/2\n    }\n    else {\n        return l[Math.floor(l.length/2)]\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var l1 = l.slice();\n  l1.sort(function(a,b){\n    return a-b;\n  });\n  var result = l1[Math.floor(l1.length/2)];\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let length = l.length;\n\tif(length == 0){\n\t\treturn 0;\n\t}\n\telse if(length == 1){\n\t\treturn l[0];\n\t}\n\tl.sort(function(a, b){return a-b});\n\tconsole.log(l);\n\tif(length % 2 == 0){\n\t\treturn (l[length/2] + l[length/2 - 1])/2;\n\t}\n\telse{\n\t\treturn l[Math.floor(length/2)];\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if(isEmpty(l)){\n    return 0;\n  }\n  else{\n    return (first(l) + last(l)) / 2;\n  }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (l.length % 2 == 0){\n        return (l[Math.floor(l.length/2)] + l[Math.floor(l.length/2)-1])/2\n    }\n    else {\n        return l[Math.floor(l.length/2)]\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var l_sorted = l.sort(function(a, b){return a-b});\n    var l_len = l_sorted.length;\n    var l_mid = Math.floor(l_len/2);\n    if (l_len % 2)\n        return l_sorted[l_mid];\n    else\n        return (l_sorted[l_mid-1] + l_sorted[l_mid]) / 2.0;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var ln = l.length;\n    if(ln%2===0){\n        return (l[ln/2-1]+l[ln/2])/2;\n    }\n    else{\n        return l[Math.floor(ln/2)];\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var list = l.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tvar len = list.length;\n\tif(len%2 === 0){\n\t\treturn (list[len/2-1]+list[len/2])/2;\n\t}\n\telse{\n\t\treturn list[(len-1)/2];\n\t}\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sorted = l.sort(function(a,b){\n    return a-b;\n  });\n  var m = sorted.length/2;\n  if(sorted.length % 2 == 0){\n    return ((sorted[m-1]+sorted[m])/2.0);\n  }\n  else{\n    return sorted[Math.floor(m)];\n  }\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 1.4624862272512316e-31,
        "bleu-0": 0.05825888414631576,
        "bleu-8": 0.1969945270971667,
        "bleu-7": 0.00015652204264755295,
        "bleu-16": 0.319198013919646,
        "bleu-2": 0.2143239355681243,
        "bleu-11": 0.14647108028361613,
        "bleu-1": 0.37152791459448925,
        "bleu-10": 0.4031297473859555,
        "bleu-17": 0.23717321912986944,
        "bleu-12": 0.42357504780187744,
        "bleu-6": 0.20905183702368646,
        "bleu-18": 0.36572757042319126,
        "bleu-15": 0.034990445631142834,
        "bleu-13": 0.3813207448128119,
        "bleu-9": 0.3852512500628628,
        "bleu-4": 0.4274968370528199,
        "bleu-14": 0.4322925968929471,
        "bleu-5": 1.4624862272512316e-31,
        "bleu-19": 0.3542552393288743,
        "codebleu-3": 0.006472491909385112,
        "codebleu-0": 0.27276105907018183,
        "codebleu-8": 0.6427912325979831,
        "codebleu-7": 0.06474391663480018,
        "codebleu-16": 0.6715249117050541,
        "codebleu-2": 0.7206647571342577,
        "codebleu-11": 0.25709163427897264,
        "codebleu-1": 0.7468654203053187,
        "codebleu-10": 0.6938799652527635,
        "codebleu-17": 0.36604081439834535,
        "codebleu-12": 0.5220389069354077,
        "codebleu-6": 0.41823892157066866,
        "codebleu-18": 0.7451080225492019,
        "codebleu-15": 0.19646219040644275,
        "codebleu-13": 0.59343206955244,
        "codebleu-9": 0.6692762086380146,
        "codebleu-4": 0.5980725552065435,
        "codebleu-14": 0.7143700371108721,
        "codebleu-5": 0.006472491909385112,
        "codebleu-19": 0.6568470412120644,
        "chrf-3": 0.010752688172043012,
        "chrf-0": 0.24112621907605442,
        "chrf-8": 0.34113157028805013,
        "chrf-7": 0.062876387499363,
        "chrf-16": 0.47974051135932755,
        "chrf-2": 0.4226213211117051,
        "chrf-11": 0.39193450416850667,
        "chrf-1": 0.5535719518041236,
        "chrf-10": 0.5204915001482772,
        "chrf-17": 0.3897081207419407,
        "chrf-12": 0.5396160142979384,
        "chrf-6": 0.35623383678532394,
        "chrf-18": 0.5557899051224878,
        "chrf-15": 0.1630005376473442,
        "chrf-13": 0.4843469534020068,
        "chrf-9": 0.497752669697929,
        "chrf-4": 0.5440961380723319,
        "chrf-14": 0.5104071744233678,
        "chrf-5": 0.010752688172043012,
        "chrf-19": 0.43861020539387363,
        "rougel-3": 0.0273972602739726,
        "rougel-0": 0.3025210084033613,
        "rougel-8": 0.4131455399061033,
        "rougel-7": 0.17283950617283952,
        "rougel-16": 0.45614035087719296,
        "rougel-2": 0.4660194174757281,
        "rougel-11": 0.4,
        "rougel-1": 0.4785276073619632,
        "rougel-10": 0.5521472392638037,
        "rougel-17": 0.543859649122807,
        "rougel-12": 0.47244094488188976,
        "rougel-6": 0.4793388429752066,
        "rougel-18": 0.48618784530386744,
        "rougel-15": 0.32692307692307687,
        "rougel-13": 0.49635036496350365,
        "rougel-9": 0.6344827586206897,
        "rougel-4": 0.5271317829457364,
        "rougel-14": 0.6266666666666667,
        "rougel-5": 0.0273972602739726,
        "rougel-19": 0.5921052631578947,
        "meteor-3": 0.007704160246533127,
        "meteor-0": 0.21966043165467627,
        "meteor-8": 0.5404168426982116,
        "meteor-7": 0.07299723542384991,
        "meteor-16": 0.6049693713490528,
        "meteor-2": 0.6863853988412538,
        "meteor-11": 0.2816985825167071,
        "meteor-1": 0.708567839938945,
        "meteor-10": 0.7213232087140315,
        "meteor-17": 0.3785424672616212,
        "meteor-12": 0.5387624466571835,
        "meteor-6": 0.3747407495129392,
        "meteor-18": 0.7064854259651535,
        "meteor-15": 0.2170138888888889,
        "meteor-13": 0.5505712797828991,
        "meteor-9": 0.6967536705041201,
        "meteor-4": 0.5372340425531915,
        "meteor-14": 0.7040097949188857,
        "meteor-5": 0.007704160246533127,
        "meteor-19": 0.6028947199307311,
        "ruby-3": 0.01388888888888884,
        "ruby-0": 0.2222222222222222,
        "ruby-8": 0.2836879432624113,
        "ruby-7": 0.09722222222222221,
        "ruby-16": 0.23232323232323238,
        "ruby-2": 0.30597014925373134,
        "ruby-11": 0.2222222222222222,
        "ruby-1": 0.29670329670329665,
        "ruby-10": 0.37362637362637363,
        "ruby-17": 0.38888888888888884,
        "ruby-12": 0.29166666666666663,
        "ruby-6": 0.2222222222222222,
        "ruby-18": 0.29357798165137616,
        "ruby-15": 0.18055555555555558,
        "ruby-13": 0.29166666666666663,
        "ruby-9": 0.4794520547945206,
        "ruby-4": 0.2777777777777778,
        "ruby-14": 0.4358974358974359,
        "ruby-5": 0.01388888888888884,
        "ruby-19": 0.375,
        "codebertscore_f1-3": 0.0,
        "codebertscore_f3-3": 0.0,
        "codebertscore_f1-0": 0.7410923838615417,
        "codebertscore_f3-0": 0.7283679842948914,
        "codebertscore_f1-8": 0.7640335559844971,
        "codebertscore_f3-8": 0.8123155236244202,
        "codebertscore_f1-7": 0.6840050220489502,
        "codebertscore_f3-7": 0.6493565440177917,
        "codebertscore_f1-16": 0.8424589037895203,
        "codebertscore_f3-16": 0.8540040850639343,
        "codebertscore_f1-2": 0.8029203414916992,
        "codebertscore_f3-2": 0.8401532769203186,
        "codebertscore_f1-11": 0.8192836046218872,
        "codebertscore_f3-11": 0.7881761789321899,
        "codebertscore_f1-1": 0.8775107860565186,
        "codebertscore_f3-1": 0.887921929359436,
        "codebertscore_f1-10": 0.8797088265419006,
        "codebertscore_f3-10": 0.8803900480270386,
        "codebertscore_f1-17": 0.8539303541183472,
        "codebertscore_f3-17": 0.827317476272583,
        "codebertscore_f1-12": 0.8744575381278992,
        "codebertscore_f3-12": 0.8465712070465088,
        "codebertscore_f1-6": 0.8379909992218018,
        "codebertscore_f3-6": 0.826394259929657,
        "codebertscore_f1-18": 0.8754377365112305,
        "codebertscore_f3-18": 0.8875322937965393,
        "codebertscore_f1-15": 0.782008707523346,
        "codebertscore_f3-15": 0.7642717361450195,
        "codebertscore_f1-13": 0.857617199420929,
        "codebertscore_f3-13": 0.8319470286369324,
        "codebertscore_f1-9": 0.8751639127731323,
        "codebertscore_f3-9": 0.8958330154418945,
        "codebertscore_f1-4": 0.8702857494354248,
        "codebertscore_f3-4": 0.8543818593025208,
        "codebertscore_f1-14": 0.8911278247833252,
        "codebertscore_f3-14": 0.8885818123817444,
        "codebertscore_f1-5": 0.0,
        "codebertscore_f3-5": 0.0,
        "codebertscore_f1-19": 0.8700389266014099,
        "codebertscore_f3-19": 0.8807311654090881,
        "codebertscore_s_f1-3": 0.0,
        "codebertscore_s_f3-3": 0.0,
        "codebertscore_s_f1-0": 0.7597677707672119,
        "codebertscore_s_f3-0": 0.7441002130508423,
        "codebertscore_s_f1-8": 0.7734597325325012,
        "codebertscore_s_f3-8": 0.8236878514289856,
        "codebertscore_s_f1-7": 0.6898849010467529,
        "codebertscore_s_f3-7": 0.6517084836959839,
        "codebertscore_s_f1-16": 0.8390877842903137,
        "codebertscore_s_f3-16": 0.8512803316116333,
        "codebertscore_s_f1-2": 0.8043985962867737,
        "codebertscore_s_f3-2": 0.8427127599716187,
        "codebertscore_s_f1-11": 0.8316786289215088,
        "codebertscore_s_f3-11": 0.801240086555481,
        "codebertscore_s_f1-1": 0.8781741857528687,
        "codebertscore_s_f3-1": 0.8890382647514343,
        "codebertscore_s_f1-10": 0.8900668025016785,
        "codebertscore_s_f3-10": 0.8910409212112427,
        "codebertscore_s_f1-17": 0.8613801002502441,
        "codebertscore_s_f3-17": 0.8339172601699829,
        "codebertscore_s_f1-12": 0.8931819200515747,
        "codebertscore_s_f3-12": 0.8674216866493225,
        "codebertscore_s_f1-6": 0.8450549244880676,
        "codebertscore_s_f3-6": 0.8315977454185486,
        "codebertscore_s_f1-18": 0.8740623593330383,
        "codebertscore_s_f3-18": 0.8865388035774231,
        "codebertscore_s_f1-15": 0.7916555404663086,
        "codebertscore_s_f3-15": 0.7769935131072998,
        "codebertscore_s_f1-13": 0.8769436478614807,
        "codebertscore_s_f3-13": 0.8537029027938843,
        "codebertscore_s_f1-9": 0.8819093108177185,
        "codebertscore_s_f3-9": 0.9018038511276245,
        "codebertscore_s_f1-4": 0.8775734901428223,
        "codebertscore_s_f3-4": 0.8628506064414978,
        "codebertscore_s_f1-14": 0.9008156657218933,
        "codebertscore_s_f3-14": 0.8992418050765991,
        "codebertscore_s_f1-5": 0.0,
        "codebertscore_s_f3-5": 0.0,
        "codebertscore_s_f1-19": 0.8826343417167664,
        "codebertscore_s_f3-19": 0.892740786075592,
        "gpt35_nsnr-3": 0,
        "raw_gpt35_nsnr-3": "0",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 2,
        "raw_gpt35_nsnr-15": "2",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction sort_numbers(numbers){\n",
        "snippet": [
            "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n"
        ],
        "simplified": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
        "task_id": "19",
        "3": "numbers = numbers.split(' ');\n    var nums = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    numbers.sort(function(a, b){\n        return nums[a] - nums[b];\n    });\n    return numbers.join(' ');\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var numDict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  var numArr = numbers.split(' ');\n  var sortedArr = [];\n  var sortedStr = '';\n  for (i = 0; i < numArr.length; i++){\n    sortedArr.push(numDict[numArr[i]]);\n  }\n  sortedArr.sort(function(a, b){return a-b});\n  for (i = 0; i < sortedArr.length; i++){\n    for (var key in numDict){\n      if (numDict[key] === sortedArr[i]){\n        sortedStr += key + ' ';\n      }\n    }\n  }\n  return sortedStr.slice(0, -1);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let s = '';\n    let nums = numbers.split(' ');\n    nums.sort((a, b) => lookup_number(a) - lookup_number(b));\n    for (let n of nums)\n        s += n + ' ';\n    return s.trimRight();\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var nums = numbers.split(' ');\n\tvar sort_nums = [];\n\tvar num_dict = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tfor (var i = 0; i < nums.length; i++){\n\t\tvar num = num_dict[nums[i]];\n\t\tif (num){\n\t\t\tsort_nums.push(num);\n\t\t}\n\t}\n\tsort_nums.sort(function(a, b){return a - b});\n\tfor (var i = 0; i < sort_nums.length; i++){\n\t\tfor (var key in num_dict){\n\t\t\tif (num_dict[key] === sort_nums[i]){\n\t\t\t\tsort_nums[i] = key;\n\t\t\t}\n\t\t}\n\t}\n\treturn sort_nums.join(' ');\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var arr = numbers.split(' ');\n    arr.sort();\n    var output = arr.join(' ');\n    return output;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// PUT YOUR CODE HERE\n    let numberals = numbers.split(' ');\n    for (let i = 0; i < numberals.length; i++) {\n        numberals[i] = numberals[i].replace('zero', '0');\n        numberals[i] = numberals[i].replace('one', '1');\n        numberals[i] = numberals[i].replace('two', '2');\n        numberals[i] = numberals[i].replace('three', '3');\n        numberals[i] = numberals[i].replace('four', '4');\n        numberals[i] = numberals[i].replace('five', '5');\n        numberals[i] = numberals[i].replace('six', '6');\n        numberals[i] = numberals[i].replace('seven', '7');\n        numberals[i] = numberals[i].replace('eight', '8');\n        numberals[i] = numberals[i].replace('nine', '9');\n    }\n    numberals.sort(function(a, b){return a-b});\n    for (let i = 0; i < numberals.length; i++) {\n        numberals[i] = numberals[i].replace('0', 'zero');\n        numberals[i] = numberals[i].replace('1', 'one');\n        numberals[i] = numberals[i].replace('2', 'two');\n        numberals[i] = numberals[i].replace('3', 'three');\n        numberals[i] = numberals[i].replace('4', 'four');\n        numberals[i] = numberals[i].replace('5', 'five');\n        numberals[i] = numberals[i].replace('6', 'six');\n        numberals[i] = numberals[i].replace('7', 'seven');\n        numberals[i] = numberals[i].replace('8', 'eight');\n        numberals[i] = numberals[i].replace('9', 'nine');\n    }\n    return numberals.join(' ');\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var num_obj = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  var stringArr = numbers.split(' ');\n  for (var i = 0; i < stringArr.length; i++) {\n    stringArr[i] = num_obj[stringArr[i]];\n  }\n  stringArr.sort(function(a, b){return a-b});\n  for (var j = 0; j < stringArr.length; j++) {\n    for (var key in num_obj) {\n      if (num_obj[key] === stringArr[j]) {\n        stringArr[j] = key;\n      }\n    }\n  }\n  var string = stringArr.join(' ');\n  return string;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "numbers = numbers.split(' ')\n\tvar numbers_in_order = []\n\tvar number_conversions = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tnumbers_in_order.push(number_conversions[numbers[i]])\n\t}\n\tnumbers_in_order.sort(function(a,b){return a-b})\n\tvar sorted_numbers = []\n\tfor (var j = 0; j < numbers_in_order.length; j++){\n\t\tfor (var key in number_conversions){\n\t\t\tif (numbers_in_order[j] == number_conversions[key]){\n\t\t\t\tsorted_numbers.push(key)\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted_numbers.join(' ')\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "var numbers_array = numbers.split(\" \");\n\tvar real_numbers = [];\n\t//Converting words to numbers\n\tfor(var i = 0; i < numbers_array.length; i++){\n\t\tif(numbers_array[i] == \"zero\"){\n\t\t\treal_numbers.push(0);\n\t\t}\n\t\telse if(numbers_array[i] == \"one\"){\n\t\t\treal_numbers.push(1);\n\t\t}\n\t\telse if(numbers_array[i] == \"two\"){\n\t\t\treal_numbers.push(2);\n\t\t}\n\t\telse if(numbers_array[i] == \"three\"){\n\t\t\treal_numbers.push(3);\n\t\t}\n\t\telse if(numbers_array[i] == \"four\"){\n\t\t\treal_numbers.push(4);\n\t\t}\n\t\telse if(numbers_array[i] == \"five\"){\n\t\t\treal_numbers.push(5);\n\t\t}\n\t\telse if(numbers_array[i] == \"six\"){\n\t\t\treal_numbers.push(6);\n\t\t}\n\t\telse if(numbers_array[i] == \"seven\"){\n\t\t\treal_numbers.push(7);\n\t\t}\n\t\telse if(numbers_array[i] == \"eight\"){\n\t\t\treal_numbers.push(8);\n\t\t}\n\t\telse if(numbers_array[i] == \"nine\"){\n\t\t\treal_numbers.push(9);\n\t\t}\n\t}\n\t\n\t//Sorting\n\tvar temp;\n\tfor(var i = 0; i < real_numbers.length - 1; i++){\n\t\tfor(var j = i + 1; j < real_numbers.length; j++){\n\t\t\tif(real_numbers[i] > real_numbers[j]){\n\t\t\t\ttemp = real_numbers[i];\n\t\t\t\treal_numbers[i] =",
        "grade-17": {
            "execution": 0
        },
        "12": "var nums = numbers.split(' ');\n  return nums.sort(function(a,b){\n    return (translate(a) > translate(b));\n  }).join(' ');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var numbers_list = numbers.split(' ');\n  numbers_list.sort(function(a, b){\n    return numeral_dict[a] - numeral_dict[b];\n  });\n  return numbers_list.join(' ');\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "const numeral_map = new Map([['zero', 0], ['one', 1], ['two', 2], ['three', 3], ['four', 4], ['five', 5], ['six', 6], ['seven', 7], ['eight', 8], ['nine', 9]]);\n    const num_array = numbers.split(' ');\n    num_array.sort((a, b) => {return numeral_map.get(a) - numeral_map.get(b)});\n    return num_array.join(' ');\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var new_number_array = [];\n\tvar array_of_numbers = numbers.split(\" \");\n\tfor (var i = 0; i < array_of_numbers.length; i++) {\n\t\tswitch(array_of_numbers[i]){\n\t\t\tcase 'zero':\n\t\t\t\tnew_number_array.push(0);\n\t\t\t\tbreak;\n\t\t\tcase 'one':\n\t\t\t\tnew_number_array.push(1);\n\t\t\t\tbreak;\n\t\t\tcase 'two':\n\t\t\t\tnew_number_array.push(2);\n\t\t\t\tbreak;\n\t\t\tcase 'three':\n\t\t\t\tnew_number_array.push(3);\n\t\t\t\tbreak;\n\t\t\tcase 'four':\n\t\t\t\tnew_number_array.push(4);\n\t\t\t\tbreak;\n\t\t\tcase 'five':\n\t\t\t\tnew_number_array.push(5);\n\t\t\t\tbreak;\n\t\t\tcase 'six':\n\t\t\t\tnew_number_array.push(6);\n\t\t\t\tbreak;\n\t\t\tcase 'seven':\n\t\t\t\tnew_number_array.push(7);\n\t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\t\t\tnew_number_array.push(8);\n\t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\t\t\tnew_number_array.push(9);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tfor (var i = 0; i < new_number_array.length; i++) {\n\t\tfor (var j = i; j < new_number_array.length; j++) {\n\t\t\tif (new_number_array[i] > new_number_array[j]) {\n\t\t\t\ttemp = new_number_array[i];\n\t\t\t\tnew_number_array[i] = new_number_array[j];\n\t\t\t\tnew_number_array[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (var i =",
        "grade-15": {
            "execution": 0
        },
        "13": "let numberMap = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    return numbers.split(' ').sort((a,b) => numberMap[a] - numberMap[b]).join(' ')\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var num = numbers.split(' ');\n  var sorted = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  var nums = [];\n  for (var i = 0; i < num.length; i++) {\n    for (var j = 0; j < sorted.length; j++) {\n      if (num[i] === sorted[j]) {\n        nums.push(sorted[j]);\n      }\n    }\n  }\n  return nums.join(' ');\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let num_map = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9};\n    let num_arr = numbers.split(' ');\n    num_arr.sort((a,b) => {\n        return num_map[a] - num_map[b];\n    });\n    return num_arr.join(' ');\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var list = numbers.split(' ');\n    var num = [];\n    var dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};\n    for (var i=0; i<list.length; i++){\n        num.push(dict[list[i]]);\n    }\n    num.sort(function(a, b){return a-b});\n    for (var i=0; i<num.length; i++){\n        for (var key in dict){\n            if (dict[key] === num[i]){\n                num[i] = key;\n            }\n        }\n    }\n    return num.join(' ');\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "// assume all numbers are valid integers, single space, no period\n  var numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};\n  var numbers_array = numbers.split(' ');\n  var numbers_array_converted = [];\n  for (var i = 0; i < numbers_array.length; i++) {\n    numbers_array_converted.push(numeral_to_number[numbers_array[i]]);\n  }\n  numbers_array_converted.sort(function(a, b){return a-b});\n  var sorted_numbers = '';\n  for (var i = 0; i < numbers_array_converted.length; i++) {\n    sorted_numbers += Object.keys(numeral_to_number)[numbers_array_converted[i]] + ' ';\n  }\n  return sorted_numbers.trim();\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let numToInt = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers = numbers.split(' ');\n    numbers = numbers.map(function(number){\n        return numToInt[number];\n    })\n    return numbers.sort(function(a, b){\n        return a - b;\n    }).join(' ');\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.31044964100841255,
        "bleu-0": 0.37228885139960965,
        "bleu-8": 0.1445270274837115,
        "bleu-7": 0.4037693825715879,
        "bleu-16": 0.03501603632988751,
        "bleu-2": 0.08366178515628993,
        "bleu-11": 0.17428720839929115,
        "bleu-1": 0.42310826451415556,
        "bleu-10": 2.2856936767186727e-49,
        "bleu-17": 0.06387103624412474,
        "bleu-12": 0.1008016489844051,
        "bleu-6": 0.10999978636300296,
        "bleu-18": 0.26924725266267846,
        "bleu-15": 0.12634671946014828,
        "bleu-13": 0.7872175002718427,
        "bleu-9": 0.2700993820912699,
        "bleu-4": 0.7772158974433652,
        "bleu-14": 0.4269631710564156,
        "bleu-5": 0.4044980484140723,
        "bleu-19": 0.6646289449188021,
        "codebleu-3": 0.5179214525983643,
        "codebleu-0": 0.786293700540398,
        "codebleu-8": 0.29253606561158185,
        "codebleu-7": 0.7858696698101648,
        "codebleu-16": 0.1787473672019913,
        "codebleu-2": 0.5894875726453617,
        "codebleu-11": 0.5365423787457725,
        "codebleu-1": 0.7890928168005927,
        "codebleu-10": 0.008492569002123142,
        "codebleu-17": 0.5222770887978688,
        "codebleu-12": 0.24172949626910173,
        "codebleu-6": 0.27365045785113884,
        "codebleu-18": 0.6614568274825406,
        "codebleu-15": 0.5794804914962115,
        "codebleu-13": 0.7970894141139312,
        "codebleu-9": 0.5864269108247094,
        "codebleu-4": 0.8510382809344477,
        "codebleu-14": 0.7897353012243027,
        "codebleu-5": 0.7831693310406852,
        "codebleu-19": 0.8080876212569499,
        "chrf-3": 0.3697453663928974,
        "chrf-0": 0.5411700308999262,
        "chrf-8": 0.2445160308787735,
        "chrf-7": 0.5598131289307166,
        "chrf-16": 0.20739897736175558,
        "chrf-2": 0.24165778625474366,
        "chrf-11": 0.30579766946644715,
        "chrf-1": 0.5173065390320889,
        "chrf-10": 0.0063371356147021544,
        "chrf-17": 0.14825283806589803,
        "chrf-12": 0.2560147298486843,
        "chrf-6": 0.26760294085596037,
        "chrf-18": 0.4412875342157937,
        "chrf-15": 0.23666224179390846,
        "chrf-13": 0.7536212702756935,
        "chrf-9": 0.4060828064176876,
        "chrf-4": 0.7475830479178847,
        "chrf-14": 0.6053437221204453,
        "chrf-5": 0.48113762872842014,
        "chrf-19": 0.6440056714393217,
        "rougel-3": 0.6699507389162561,
        "rougel-0": 0.573170731707317,
        "rougel-8": 0.35227272727272724,
        "rougel-7": 0.5741324921135648,
        "rougel-16": 0.28965517241379307,
        "rougel-2": 0.24350649350649348,
        "rougel-11": 0.5102040816326531,
        "rougel-1": 0.5960264900662251,
        "rougel-10": 0.017543859649122806,
        "rougel-17": 0.25617977528089886,
        "rougel-12": 0.339622641509434,
        "rougel-6": 0.4025157232704402,
        "rougel-18": 0.6428571428571429,
        "rougel-15": 0.35883905013192613,
        "rougel-13": 0.883720930232558,
        "rougel-9": 0.4899598393574297,
        "rougel-4": 0.8533333333333332,
        "rougel-14": 0.5882352941176471,
        "rougel-5": 0.5916398713826366,
        "rougel-19": 0.7763713080168776,
        "meteor-3": 0.6530128407239751,
        "meteor-0": 0.7518118655661908,
        "meteor-8": 0.2683561940318697,
        "meteor-7": 0.6578368567389252,
        "meteor-16": 0.19453219467275523,
        "meteor-2": 0.3943743876687904,
        "meteor-11": 0.5759599332220368,
        "meteor-1": 0.6519330446418368,
        "meteor-10": 0.004911591355599214,
        "meteor-17": 0.27427724240177914,
        "meteor-12": 0.2765236469221079,
        "meteor-6": 0.32641502038256504,
        "meteor-18": 0.5342063434959218,
        "meteor-15": 0.31956352299298524,
        "meteor-13": 0.7870848279157042,
        "meteor-9": 0.427549213832315,
        "meteor-4": 0.7913042026702043,
        "meteor-14": 0.6638171918001881,
        "meteor-5": 0.8160429749241744,
        "meteor-19": 0.7448040565919618,
        "ruby-3": 0.4601769911504425,
        "ruby-0": 0.4372093023255814,
        "ruby-8": 0.1415929203539823,
        "ruby-7": 0.4362745098039216,
        "ruby-16": 0.1504424778761062,
        "ruby-2": 0.14910536779324057,
        "ruby-11": 0.30386740331491713,
        "ruby-1": 0.4656084656084656,
        "ruby-10": 0.008849557522123908,
        "ruby-17": 0.1656626506024096,
        "ruby-12": 0.19469026548672563,
        "ruby-6": 0.23008849557522126,
        "ruby-18": 0.5107913669064748,
        "ruby-15": 0.2556390977443609,
        "ruby-13": 0.8141592920353982,
        "ruby-9": 0.32352941176470584,
        "ruby-4": 0.7699115044247787,
        "ruby-14": 0.46113989637305697,
        "ruby-5": 0.4545454545454546,
        "ruby-19": 0.7016129032258065,
        "codebertscore_f1-3": 0.8857839703559875,
        "codebertscore_f3-3": 0.8864740133285522,
        "codebertscore_f1-0": 0.8065159916877747,
        "codebertscore_f3-0": 0.880605161190033,
        "codebertscore_f1-8": 0.7224196791648865,
        "codebertscore_f3-8": 0.7106227278709412,
        "codebertscore_f1-7": 0.7951687574386597,
        "codebertscore_f3-7": 0.8630651831626892,
        "codebertscore_f1-16": 0.7026280760765076,
        "codebertscore_f3-16": 0.6619850993156433,
        "codebertscore_f1-2": 0.7080102562904358,
        "codebertscore_f3-2": 0.7704289555549622,
        "codebertscore_f1-11": 0.8167641758918762,
        "codebertscore_f3-11": 0.8831115365028381,
        "codebertscore_f1-1": 0.820427417755127,
        "codebertscore_f3-1": 0.8816064596176147,
        "codebertscore_f1-10": 0.0,
        "codebertscore_f3-10": 0.0,
        "codebertscore_f1-17": 0.6790847182273865,
        "codebertscore_f3-17": 0.7352302074432373,
        "codebertscore_f1-12": 0.7304555177688599,
        "codebertscore_f3-12": 0.6997439861297607,
        "codebertscore_f1-6": 0.7555516362190247,
        "codebertscore_f3-6": 0.729098916053772,
        "codebertscore_f1-18": 0.8816186785697937,
        "codebertscore_f3-18": 0.9022224545478821,
        "codebertscore_f1-15": 0.6834853887557983,
        "codebertscore_f3-15": 0.7302423119544983,
        "codebertscore_f1-13": 0.9055854082107544,
        "codebertscore_f3-13": 0.8987931609153748,
        "codebertscore_f1-9": 0.7764142751693726,
        "codebertscore_f3-9": 0.7929997444152832,
        "codebertscore_f1-4": 0.9024494290351868,
        "codebertscore_f3-4": 0.9109698534011841,
        "codebertscore_f1-14": 0.8386467695236206,
        "codebertscore_f3-14": 0.8890669941902161,
        "codebertscore_f1-5": 0.8023470640182495,
        "codebertscore_f3-5": 0.8722191452980042,
        "codebertscore_f1-19": 0.8784167170524597,
        "codebertscore_f3-19": 0.8899579644203186,
        "codebertscore_s_f1-3": 0.9398513436317444,
        "codebertscore_s_f3-3": 0.9396405816078186,
        "codebertscore_s_f1-0": 0.8617194890975952,
        "codebertscore_s_f3-0": 0.9234361052513123,
        "codebertscore_s_f1-8": 0.8685108423233032,
        "codebertscore_s_f3-8": 0.866847813129425,
        "codebertscore_s_f1-7": 0.862089216709137,
        "codebertscore_s_f3-7": 0.9153978824615479,
        "codebertscore_s_f1-16": 0.8731528520584106,
        "codebertscore_s_f3-16": 0.8386291265487671,
        "codebertscore_s_f1-2": 0.8029384016990662,
        "codebertscore_s_f3-2": 0.876777708530426,
        "codebertscore_s_f1-11": 0.8702439069747925,
        "codebertscore_s_f3-11": 0.9256231784820557,
        "codebertscore_s_f1-1": 0.8796663284301758,
        "codebertscore_s_f3-1": 0.9289575815200806,
        "codebertscore_s_f1-10": 0.8717177510261536,
        "codebertscore_s_f3-10": 0.8076509237289429,
        "codebertscore_s_f1-17": 0.7994867563247681,
        "codebertscore_s_f3-17": 0.8525283336639404,
        "codebertscore_s_f1-12": 0.8840599060058594,
        "codebertscore_s_f3-12": 0.8632628917694092,
        "codebertscore_s_f1-6": 0.8889504671096802,
        "codebertscore_s_f3-6": 0.8765160441398621,
        "codebertscore_s_f1-18": 0.9336305856704712,
        "codebertscore_s_f3-18": 0.9478635191917419,
        "codebertscore_s_f1-15": 0.7942951917648315,
        "codebertscore_s_f3-15": 0.8519367575645447,
        "codebertscore_s_f1-13": 0.9566079378128052,
        "codebertscore_s_f3-13": 0.9520909786224365,
        "codebertscore_s_f1-9": 0.866827130317688,
        "codebertscore_s_f3-9": 0.879959225654602,
        "codebertscore_s_f1-4": 0.9483320116996765,
        "codebertscore_s_f3-4": 0.9541665315628052,
        "codebertscore_s_f1-14": 0.8925348520278931,
        "codebertscore_s_f3-14": 0.9323563575744629,
        "codebertscore_s_f1-5": 0.8615310192108154,
        "codebertscore_s_f3-5": 0.920188844203949,
        "codebertscore_s_f1-19": 0.9287059307098389,
        "codebertscore_s_f3-19": 0.9368815422058105,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 0,
        "raw_gpt35_nsnr-10": "N/A (no code snippet provided)",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
        "task_id": "115",
        "3": "var sum = 0, max = 0;\n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n            if(sum > max) max = sum;\n            if(sum == capacity) sum = 0;\n        }\n    }\n    return max;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = 0;\n\t\tfor(var i = 0; i < grid.length; i++){\n\t\t\tvar row = grid[i];\n\t\t\tfor(var j = 0; j < row.length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tif(row[j-1] == 1){\n\t\t\t\t\t\tgrid[i][j-1] = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tgrid[i][j] = 0;\n\t\t\t\t\t\tresult ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "//expect_fill = max(grid[i])\n    let num_rows = grid.length;\n    let num_cols = grid[0].length;\n    let row_idx = 0;\n    let expect_fill = 0;\n    for(let col_idx = 0; col_idx < num_cols; col_idx++){\n        expect_fill = Math.max(expect_fill, grid[row_idx][col_idx]);\n    }\n    let fill_cnt = 0;\n    while(row_idx < num_rows){\n        let fill_cnt_per_row = 0;\n        for(let col_idx = 0; col_idx < num_cols; col_idx++){\n            if(grid[row_idx][col_idx] < expect_fill){\n                grid[row_idx][col_idx] += 1;\n                fill_cnt_per_row += 1;\n            }\n        }\n        fill_cnt += fill_cnt_per_row;\n        row_idx += 1;\n    }\n    return fill_cnt;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "const maxFillResult = [];\n    //calculate maxFillResult\n    for(let rowIndex = 0; rowIndex < grid.length; rowIndex++){\n        const row = grid[rowIndex];\n        let maxCapacity = capacity;\n        const resultRow = [];\n        // calculate maxFillRowResult\n        for(let wellIndex = 0; wellIndex < row.length; wellIndex++){\n            const well = row[wellIndex];\n            //check if the well contains water\n            if(well){\n                //calculate maxCapacity - current well capacity\n                const currentCapacity = maxCapacity - well;\n                //push it to the result row\n                resultRow.push(currentCapacity);\n                // if it's negative then we should throw away this water\n                // and set maxCapacity to capacity\n                if(currentCapacity < 0){\n                    maxCapacity = capacity;\n                } else {\n                    maxCapacity = currentCapacity;\n                }\n            } else {\n                //if the well is empty push 0\n                resultRow.push(0);\n            }\n        }\n        //push the result row to the result array\n        maxFillResult.push(resultRow);\n    }\n    return maxFillResult;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1) {\n                max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//return [max_fill_times, fill_row]\n    var max_fill_times = 0,\n        fill_row = 0;\n    for(var i=0; i<grid.length; i++){\n        var cur_row_total = 0;\n        for(var j=0; j<grid[i].length; j++){\n            cur_row_total += grid[i][j];\n        }\n        if(cur_row_total > max_fill_times){\n            max_fill_times = cur_row_total;\n            fill_row = i;\n        }\n    }\n    return [max_fill_times, fill_row];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var fill_count = 0\n\tvar empty_wells = []\n\tfor(i=0; i<grid.length; i++){\n\t\tvar well = grid[i]\n\t\tvar full_units = well.filter(function(unit){\n\t\t\treturn unit === 1\n\t\t})\n\t\tfill_count += Math.ceil(full_units.length / capacity)\n\t\tvar empty_units = well.filter(function(unit){\n\t\t\treturn unit === 0\n\t\t})\n\t\tempty_wells.push(empty_units.length)\n\t}\n\tvar empty_wells_count = empty_wells.filter(function(empty_units){\n\t\treturn empty_units === well.length\n\t})\n\tif(empty_wells_count.length === grid.length){\n\t\treturn 0\n\t}\n\treturn fill_count\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var ans = 0;\n    var prev_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                var prev_fill = grid[i][j];\n                grid[i][j] = 0;\n                ans++;\n            }\n            prev_fill = capacity - prev_fill;\n            if(prev_fill >= grid[i][j]){\n                prev_fill -= grid[i][j];\n                grid[i][j] = 0;\n            }\n            else{\n                grid[i][j] -= prev_fill;\n                prev_fill = 0;\n            }\n        }\n    }\n    return ans;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = 0;\n    for(var i=0; i<grid.length; i++){\n        var n_units = 0;\n        for(var j=0; j<grid[i].length; j++){\n            if(grid[i][j] == 1){\n                n_units += 1;\n            }\n        }\n        var n_buckets = Math.ceil(n_units / capacity);\n        result += n_buckets;\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let max_water = 0;\n    let max_row = 0;\n    let max_col = 0;\n    let row_idx = 0;\n    let col_idx = 0;\n    for(const row of grid){\n        for(const col of row){\n            if(col > max_water){\n                max_water = col;\n                max_row = row_idx;\n                max_col = col_idx;\n            }\n            col_idx++;\n        }\n        row_idx++;\n        col_idx = 0;\n    }\n    const result = grid[max_row][max_col] * capacity;\n    grid[max_row][max_col] = 0;\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let max_fill = 0;\n    for(let row = 0; row < grid.length; row++){\n        for(let col = 0; col < grid[row].length; col++){\n            if(grid[row][col] == 1){\n                max_fill += capacity - 1;\n            }\n        }\n    }\n    return max_fill;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var height = grid.length;\n    var width = grid[0].length;\n    var total = 0;\n    for(var i = 0; i < height; i++){\n        for(var j = 0; j < width; j++){\n            total += grid[i][j];\n        }\n    }\n    var can_fill = Math.floor(total / capacity);\n    return can_fill;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return grid.reduce((acc, row) => {\n    return Math.max(acc, capacity * Math.floor(row.reduce((acc, val) => {\n      return acc + val;\n    }, 0) / capacity));\n  }, 0);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let num_buckets = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                num_buckets++;\n                let j_new = j;\n                while(grid[i][j_new] === 1 && grid[i][j_new + 1] === 1 && j_new < grid[i].length){\n                    j_new++;\n                }\n                if(j_new < grid[i].length){\n                    grid[i][j_new] = capacity;\n                }\n                j = j_new;\n            }\n        }\n    }\n    return num_buckets;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let max = 0;\n    for(let row of grid){\n        for(let depth of row){\n            max = Math.max(max, depth);\n        }\n    }\n    return max * capacity;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "// create a dp array of the same size of grid\n    let dp = Array(grid.length).fill(0).map(x => Array(grid[0].length).fill(0));\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[0].length; j++){\n            // 1 means there is water in the well, \n            // add it to the current bucket capacity\n            if(grid[i][j] === 1){\n                dp[i][j] = 1;\n            }\n            // if we are not on the first row, \n            // add the previous row to the current bucket capacity\n            if(i > 0){\n                dp[i][j] += dp[i-1][j];\n            }\n            // if we are not on the first column, \n            // add the previous column to the current bucket capacity\n            if(j > 0){\n                dp[i][j] += dp[i][j-1];\n            }\n            // if we are not on the first row and first column, \n            // remove the square in the diagonal, \n            // because we added it twice\n            if(i > 0 && j > 0){\n                dp[i][j] -= dp[i-1][j-1];\n            }\n            // compare with the bucket capacity\n            dp[i][j] = Math.min(dp[i][j], capacity);\n        }\n    }\n    return dp[grid.length-1][grid[0].length-1];\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let max_fill = 0\n  let count = 0\n  for(let i = 0; i < grid.length; i++){\n    let fill = 0\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] == 1){\n        fill++\n      }\n    }\n    if(fill > max_fill){\n      max_fill = fill\n    }\n  }\n  count = Math.ceil(max_fill / capacity)\n  return count\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var i = 0, j = 0, c = 0, d = 0, s = 0, e = 0, b = 0, q = 0, f = 0, g = 0, r = 0, m = 0, h = 0, x = 0, z = 0, \n\t\tlen = grid.length, len2 = 0, len3 = 0, len4 = 0, len5 = 0, wells = [], wells2 = [], sp = [], em = [], po = [], \n\t\tst = [], st2 = [], en = [], co = [], co2 = [], stack = [], stack2 = [], stack3 = [], stack4 = [], \n\t\tstack5 = [], stack6 = [], stack7 = [], stack8 = [], stack9 = [], stack10 = [], stack11 = [], stack12 = [], \n\t\tstack13 = [], stack14 = [], stack15 = [], stack16 = [], stack17 = [], stack18 = [], stack19 = [], stack20 = [], \n\t\tstack21 = [], stack22 = [], stack23 = [], stack24 = [], stack25 = [], stack26 = [], stack27 = [], stack28 = [], \n\t\tstack29 = [], stack30 = [], stack31 = [], stack32 = [], stack33 = [], stack34 = [], stack35 = [], stack36 = [], \n\t\tstack37 = [], stack38 = [], stack39 = [], stack40 = [], stack41 = [], stack42 = [], stack43 = [], stack44 = [], \n\t\tstack45 = [], stack46 = [], stack47 = [], stack48 = [], stack49 = [], stack50 = [], stack51 = [], stack52 = [], \n\t\tstack53 = [], stack54 = [], stack55 = [], stack56 = [], stack57 = [], stack58 = [], stack59 = [], stack60 = [], \n\t\tstack61 = [], stack62 = [], stack63 = [], stack64 = [], stack65 = [], stack66 = [], stack67 = [], stack68 = [],",
        "grade-14": {
            "execution": 0
        },
        "5": "let maxFill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            maxFill = Math.max(maxFill, grid[i][j]);\n        }\n    }\n    return Math.min(maxFill, capacity);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let max_fill_map = [];\n\tfor(let i = 0; i < grid.length; i++){\n\t\tfor(let j = 0; j < grid[i].length; j++){\n\t\t\tif(grid[i][j] == 1){\n\t\t\t\tlet new_max_fill = [[i, j]];\n\t\t\t\tfor(let ii = i - 1; ii >= 0; ii--){\n\t\t\t\t\tif(grid[ii][j] == 1){\n\t\t\t\t\t\tnew_max_fill.push([ii, j]);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let ii = i + 1; ii < grid.length; ii++){\n\t\t\t\t\tif(grid[ii][j] == 1){\n\t\t\t\t\t\tnew_max_fill.push([ii, j]);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet new_max_fill_set = new Set(new_max_fill.map(function(x){return x.join(',');}));\n\t\t\t\tif(max_fill_map.length == 0){\n\t\t\t\t\tmax_fill_map.push(new_max_fill_set);\n\t\t\t\t}else{\n\t\t\t\t\tlet max_fill_map_new = [];\n\t\t\t\t\tfor(let k = 0; k < max_fill_map.length; k++){\n\t\t\t\t\t\tlet intersect = new Set([...max_fill_map[k]].filter(x => new_max_fill_set.has(x)));\n\t\t\t\t\t\tif(intersect.size == 0){\n\t\t\t\t\t\t\tmax_fill_map_new.push(max_fill_map[k]);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tlet union = new Set([...max_fill_map[k], ...new_max_fill_set]);",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.5086334799102703,
        "bleu-0": 0.4457358235686699,
        "bleu-8": 0.1800058515629497,
        "bleu-7": 0.07858474486388844,
        "bleu-16": 0.6342613036171155,
        "bleu-2": 0.44646020545847087,
        "bleu-11": 0.1760745156842064,
        "bleu-1": 0.3776065839582028,
        "bleu-10": 0.5553563774299751,
        "bleu-17": 0.10873271609171735,
        "bleu-12": 0.32723425618022844,
        "bleu-6": 0.37583617785890716,
        "bleu-18": 0.019153058078163122,
        "bleu-15": 0.4057992767463723,
        "bleu-13": 0.05043216978738389,
        "bleu-9": 0.15675309266889273,
        "bleu-4": 0.6471065624794383,
        "bleu-14": 0.009669198156991222,
        "bleu-5": 0.5387523745789187,
        "bleu-19": 0.1837380281321329,
        "codebleu-3": 0.6755023947080477,
        "codebleu-0": 0.7398579674284436,
        "codebleu-8": 0.6495045756894788,
        "codebleu-7": 0.5990736588970583,
        "codebleu-16": 0.640602825261893,
        "codebleu-2": 0.6705236137334006,
        "codebleu-11": 0.5419855565055618,
        "codebleu-1": 0.7128757002577801,
        "codebleu-10": 0.7425262007937656,
        "codebleu-17": 0.5479214145837965,
        "codebleu-12": 0.601678633793277,
        "codebleu-6": 0.5957417760127125,
        "codebleu-18": 0.2806534262171643,
        "codebleu-15": 0.7362916061315451,
        "codebleu-13": 0.256192563380805,
        "codebleu-9": 0.6612309748186983,
        "codebleu-4": 0.7999505779404344,
        "codebleu-14": 0.29967825953730653,
        "codebleu-5": 0.6337307554594226,
        "codebleu-19": 0.7180240567289319,
        "chrf-3": 0.5391752285167128,
        "chrf-0": 0.5182000309380417,
        "chrf-8": 0.3169066429132519,
        "chrf-7": 0.23077027035905273,
        "chrf-16": 0.704348802298801,
        "chrf-2": 0.435641315444733,
        "chrf-11": 0.2878843218158901,
        "chrf-1": 0.570164670438717,
        "chrf-10": 0.5641927698115695,
        "chrf-17": 0.24474195572572846,
        "chrf-12": 0.4728803707864239,
        "chrf-6": 0.4164842191715064,
        "chrf-18": 0.16842581188338215,
        "chrf-15": 0.6035490418760765,
        "chrf-13": 0.2576080944928855,
        "chrf-9": 0.3618789276947212,
        "chrf-4": 0.6804798473727245,
        "chrf-14": 0.07534869750340882,
        "chrf-5": 0.6121509327105025,
        "chrf-19": 0.37972737831461756,
        "rougel-3": 0.647398843930636,
        "rougel-0": 0.6299999999999999,
        "rougel-8": 0.42016806722689076,
        "rougel-7": 0.29721362229102166,
        "rougel-16": 0.810126582278481,
        "rougel-2": 0.6486486486486487,
        "rougel-11": 0.37668161434977576,
        "rougel-1": 0.5761316872427983,
        "rougel-10": 0.7374301675977654,
        "rougel-17": 0.35978835978835977,
        "rougel-12": 0.6918238993710691,
        "rougel-6": 0.5176470588235293,
        "rougel-18": 0.23448275862068962,
        "rougel-15": 0.5982905982905983,
        "rougel-13": 0.3464566929133858,
        "rougel-9": 0.32643678160919537,
        "rougel-4": 0.7912087912087912,
        "rougel-14": 0.07142857142857142,
        "rougel-5": 0.6909090909090909,
        "rougel-19": 0.3382352941176471,
        "meteor-3": 0.6469760900140646,
        "meteor-0": 0.6276047570635078,
        "meteor-8": 0.4946324507348096,
        "meteor-7": 0.35938398319545706,
        "meteor-16": 0.7376723116564403,
        "meteor-2": 0.5659525812244831,
        "meteor-11": 0.3680847554522644,
        "meteor-1": 0.6234121405750799,
        "meteor-10": 0.6404745427582799,
        "meteor-17": 0.42158207590306357,
        "meteor-12": 0.582540810515228,
        "meteor-6": 0.5041554400821144,
        "meteor-18": 0.1777066624910902,
        "meteor-15": 0.6448252688172044,
        "meteor-13": 0.19167858965970938,
        "meteor-9": 0.42053569023074233,
        "meteor-4": 0.6965994499085676,
        "meteor-14": 0.10699337623849967,
        "meteor-5": 0.6471384904274043,
        "meteor-19": 0.4231166317495625,
        "ruby-3": 0.5287356321839081,
        "ruby-0": 0.5221238938053097,
        "ruby-8": 0.2715231788079471,
        "ruby-7": 0.19067796610169496,
        "ruby-16": 0.7011494252873562,
        "ruby-2": 0.5204081632653061,
        "ruby-11": 0.25735294117647056,
        "ruby-1": 0.42307692307692313,
        "ruby-10": 0.6847826086956521,
        "ruby-17": 0.21568627450980393,
        "ruby-12": 0.5977011494252873,
        "ruby-6": 0.26436781609195403,
        "ruby-18": 0.14942528735632188,
        "ruby-15": 0.44897959183673475,
        "ruby-13": 0.2183908045977011,
        "ruby-9": 0.19252873563218387,
        "ruby-4": 0.736842105263158,
        "ruby-14": 0.04016913319238902,
        "ruby-5": 0.5287356321839081,
        "ruby-19": 0.20249221183800625,
        "codebertscore_f1-3": 0.8928735852241516,
        "codebertscore_f3-3": 0.8909741044044495,
        "codebertscore_f1-0": 0.8696494102478027,
        "codebertscore_f3-0": 0.8738692402839661,
        "codebertscore_f1-8": 0.7294945120811462,
        "codebertscore_f3-8": 0.7842366695404053,
        "codebertscore_f1-7": 0.6843785643577576,
        "codebertscore_f3-7": 0.7581056356430054,
        "codebertscore_f1-16": 0.9171189069747925,
        "codebertscore_f3-16": 0.9110124707221985,
        "codebertscore_f1-2": 0.7909709215164185,
        "codebertscore_f3-2": 0.8243957757949829,
        "codebertscore_f1-11": 0.7693967819213867,
        "codebertscore_f3-11": 0.820360541343689,
        "codebertscore_f1-1": 0.8333046436309814,
        "codebertscore_f3-1": 0.8681653141975403,
        "codebertscore_f1-10": 0.8601260781288147,
        "codebertscore_f3-10": 0.8837387561798096,
        "codebertscore_f1-17": 0.7321703433990479,
        "codebertscore_f3-17": 0.7573599219322205,
        "codebertscore_f1-12": 0.8704777359962463,
        "codebertscore_f3-12": 0.8703346848487854,
        "codebertscore_f1-6": 0.8503703474998474,
        "codebertscore_f3-6": 0.8633217811584473,
        "codebertscore_f1-18": 0.7042101621627808,
        "codebertscore_f3-18": 0.7033382058143616,
        "codebertscore_f1-15": 0.8341124653816223,
        "codebertscore_f3-15": 0.8640655875205994,
        "codebertscore_f1-13": 0.7758106589317322,
        "codebertscore_f3-13": 0.7689930200576782,
        "codebertscore_f1-9": 0.7239980101585388,
        "codebertscore_f3-9": 0.811211109161377,
        "codebertscore_f1-4": 0.8949508666992188,
        "codebertscore_f3-4": 0.9146082401275635,
        "codebertscore_f1-14": 0.6250308156013489,
        "codebertscore_f3-14": 0.7026588320732117,
        "codebertscore_f1-5": 0.8806322813034058,
        "codebertscore_f3-5": 0.8860688209533691,
        "codebertscore_f1-19": 0.7488009333610535,
        "codebertscore_f3-19": 0.8320038318634033,
        "codebertscore_s_f1-3": 0.8768965601921082,
        "codebertscore_s_f3-3": 0.8763226866722107,
        "codebertscore_s_f1-0": 0.8639469742774963,
        "codebertscore_s_f3-0": 0.8724029660224915,
        "codebertscore_s_f1-8": 0.7615926265716553,
        "codebertscore_s_f3-8": 0.8036731481552124,
        "codebertscore_s_f1-7": 0.7198803424835205,
        "codebertscore_s_f3-7": 0.7802120447158813,
        "codebertscore_s_f1-16": 0.9045940637588501,
        "codebertscore_s_f3-16": 0.8981874585151672,
        "codebertscore_s_f1-2": 0.7698672413825989,
        "codebertscore_s_f3-2": 0.8019012212753296,
        "codebertscore_s_f1-11": 0.7615146040916443,
        "codebertscore_s_f3-11": 0.807482123374939,
        "codebertscore_s_f1-1": 0.856619119644165,
        "codebertscore_s_f3-1": 0.8844665288925171,
        "codebertscore_s_f1-10": 0.8517624735832214,
        "codebertscore_s_f3-10": 0.8744661211967468,
        "codebertscore_s_f1-17": 0.7414599657058716,
        "codebertscore_s_f3-17": 0.7599388360977173,
        "codebertscore_s_f1-12": 0.8613640069961548,
        "codebertscore_s_f3-12": 0.8597399592399597,
        "codebertscore_s_f1-6": 0.8351352214813232,
        "codebertscore_s_f3-6": 0.846236526966095,
        "codebertscore_s_f1-18": 0.675656795501709,
        "codebertscore_s_f3-18": 0.67319256067276,
        "codebertscore_s_f1-15": 0.8518670797348022,
        "codebertscore_s_f3-15": 0.8761126399040222,
        "codebertscore_s_f1-13": 0.7702368497848511,
        "codebertscore_s_f3-13": 0.7615928649902344,
        "codebertscore_s_f1-9": 0.7563894987106323,
        "codebertscore_s_f3-9": 0.8185306191444397,
        "codebertscore_s_f1-4": 0.884242832660675,
        "codebertscore_s_f3-4": 0.9033542275428772,
        "codebertscore_s_f1-14": 0.6821118593215942,
        "codebertscore_s_f3-14": 0.7115954160690308,
        "codebertscore_s_f1-5": 0.8700075149536133,
        "codebertscore_s_f3-5": 0.8735195994377136,
        "codebertscore_s_f1-19": 0.7962335348129272,
        "codebertscore_s_f3-19": 0.8576350808143616,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 2,
        "raw_gpt35_nsnr-17": "2",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 1,
        "raw_gpt35_nsnr-14": "1",
        "gpt35_nsnr-5": 2,
        "raw_gpt35_nsnr-5": "2",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "Score: 1",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 1,
        "raw_gpt35_nswr-14": "1",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\nfunction smallest_change(arr){\n",
        "snippet": [
            "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n"
        ],
        "simplified": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "task_id": "73",
        "3": "var count = 0;\n    var length = arr.length;\n    var half = length/2\n    for(var i = 0; i < half; i++){\n        if(arr[i] != arr[length-1-i]){\n            count++\n        }\n    }\n    return count\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "}",
        "grade-0": {
            "execution": 0
        },
        "8": "var left = 0;\n  var right = arr.length - 1;\n  var changes = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      changes++;\n    }\n    left++;\n    right--;\n  }\n  return changes;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let odd = 0;\n  let even = 0;\n  let map = {};\n  for(let i = 0; i < arr.length; i++){\n    if(map[arr[i]]){\n      map[arr[i]]++\n    } else {\n      map[arr[i]] = 1;\n    }\n  }\n  for(let key in map){\n    if(map[key] % 2 === 0){\n      even += map[key];\n    } else {\n      odd += map[key];\n    }\n  }\n  return odd;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var left = 0;\n  var right = arr.length - 1;\n  var count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var counter = 0;\n  var arrEnd = arr.length - 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] !== arr[arrEnd]) {\n      counter++;\n    }\n    arrEnd--;\n  }\n  return counter;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var arr1 = arr.slice();\n  var arr2 = arr.slice().reverse();\n  var count = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(arr1[i] != arr2[i]){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var size = arr.length;\n    var left = 0;\n    var right = size - 1;\n    var left_sum = 0;\n    var right_sum = 0;\n    while(left < right){\n        if(arr[left] != arr[right]){\n            left_sum += arr[left];\n            right_sum += arr[right];\n        }\n        left++;\n        right--;\n    }\n    return Math.abs(left_sum - right_sum);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let count = 0;\n    for(let i = 0; i < arr.length / 2; i++){\n        if(arr[i] !== arr[arr.length - 1 - i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n        }\n        left++;\n        right--;\n    }\n    return count;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var count = 0;\n  for(var i = 0; i < arr.length/2; i++){\n    if(arr[i]!=arr[arr.length-1-i]){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let start=0;\n  let end=arr.length-1;\n  let count=0;\n  while(start<end){\n    if(arr[start]!==arr[end]){\n      count++;\n    }\n    start++;\n    end--;\n  }\n  return count;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] !== arr[arr.length-1-i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] != arr[arr.length-1-i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let length = arr.length;\n  let palinArr = new Array(length);\n  let i,j,k;\n  let minimum = 0;\n  //fill the palinArr with zeros\n  for(i=0;i<length;i++){\n    palinArr[i] = 0;\n  }\n  //make the palinArr\n  for(i=0,j=length-1;i<length;i++,j--){\n    palinArr[i] = arr[j];\n  }\n  //comapre arr and palinArr\n  for(i=0;i<length;i++){\n    if(arr[i] !== palinArr[i]){\n      minimum++;\n    }\n  }\n  return minimum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var l = 0;\n    var r = arr.length - 1;\n    var diff = 0;\n    while(l < r){\n        if(arr[l] !== arr[r]){\n            diff++;\n        }\n        l++;\n        r--;\n    }\n    return diff;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let original = 0;\n  let reversed = arr.length - 1;\n  let count = 0;\n  while (original <= reversed) {\n    if (arr[original] !== arr[reversed]) {\n      count++;\n    }\n    original++;\n    reversed--;\n  }\n  return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var min = 0;\n  var pointerStart = 0;\n  var pointerEnd = arr.length - 1;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[pointerStart] !== arr[pointerEnd]){\n      min++;\n    }\n    pointerStart++;\n    pointerEnd--;\n  }\n  return min;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] != arr[arr.length-1-i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var palindrome = false;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] == arr[arr.length - 1 - i]){\n      palindrome = true;\n    }\n    else{\n      return arr.length - 1 - i;\n    }\n  }\n  if(palindrome){\n    return 0;\n  }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.3699360669591566,
        "bleu-0": 3.5326285722008086e-24,
        "bleu-8": 0.14343949064802528,
        "bleu-7": 0.17040499279655258,
        "bleu-16": 0.14343949064802528,
        "bleu-2": 0.3390877651207259,
        "bleu-11": 0.2967952106405528,
        "bleu-1": 0.12321204698664504,
        "bleu-10": 0.508089941806722,
        "bleu-17": 0.14343949064802528,
        "bleu-12": 0.4759115667109252,
        "bleu-6": 0.14343949064802528,
        "bleu-18": 0.508089941806722,
        "bleu-15": 0.5302466017570859,
        "bleu-13": 0.14294874633929128,
        "bleu-9": 0.14343949064802528,
        "bleu-4": 0.14098662961310673,
        "bleu-14": 0.23332579659784627,
        "bleu-5": 0.5302466017570859,
        "bleu-19": 0.2573822015733372,
        "codebleu-3": 0.6323153725806038,
        "codebleu-0": 0.008438818565400843,
        "codebleu-8": 0.5587639405504123,
        "codebleu-7": 0.6184253928733595,
        "codebleu-16": 0.5587639405504123,
        "codebleu-2": 0.6415640638826122,
        "codebleu-11": 0.6588556285005494,
        "codebleu-1": 0.5906594043926038,
        "codebleu-10": 0.6771937798974424,
        "codebleu-17": 0.5587639405504123,
        "codebleu-12": 0.6718307173814764,
        "codebleu-6": 0.5587639405504123,
        "codebleu-18": 0.6771937798974424,
        "codebleu-15": 0.6808865565558365,
        "codebleu-13": 0.6297508569297143,
        "codebleu-9": 0.5587639405504123,
        "codebleu-4": 0.5499163118125251,
        "codebleu-14": 0.6298883255051452,
        "codebleu-5": 0.6808865565558365,
        "codebleu-19": 0.6219952135817014,
        "chrf-3": 0.4153171642757955,
        "chrf-0": 0.013550135501355011,
        "chrf-8": 0.3242084657099863,
        "chrf-7": 0.3435821962775892,
        "chrf-16": 0.30426870028421005,
        "chrf-2": 0.392596978420614,
        "chrf-11": 0.397929440797209,
        "chrf-1": 0.2888426986118558,
        "chrf-10": 0.4892086425419424,
        "chrf-17": 0.2958168833328453,
        "chrf-12": 0.46038171608603806,
        "chrf-6": 0.2930211589244413,
        "chrf-18": 0.4892086425419424,
        "chrf-15": 0.5071179353466134,
        "chrf-13": 0.2975866441522747,
        "chrf-9": 0.3050967326404743,
        "chrf-4": 0.295275992955825,
        "chrf-14": 0.3296504545805476,
        "chrf-5": 0.5071179353466134,
        "chrf-19": 0.3616720290276747,
        "rougel-3": 0.5739130434782609,
        "rougel-0": 0.03571428571428572,
        "rougel-8": 0.4385964912280701,
        "rougel-7": 0.43274853801169594,
        "rougel-16": 0.4385964912280701,
        "rougel-2": 0.6050420168067226,
        "rougel-11": 0.5645161290322581,
        "rougel-1": 0.33802816901408445,
        "rougel-10": 0.7387387387387387,
        "rougel-17": 0.4385964912280701,
        "rougel-12": 0.7454545454545455,
        "rougel-6": 0.4385964912280701,
        "rougel-18": 0.7387387387387387,
        "rougel-15": 0.7454545454545455,
        "rougel-13": 0.33816425120772947,
        "rougel-9": 0.4385964912280701,
        "rougel-4": 0.43478260869565216,
        "rougel-14": 0.5343511450381679,
        "rougel-5": 0.7454545454545455,
        "rougel-19": 0.5714285714285715,
        "meteor-3": 0.5631246951889427,
        "meteor-0": 0.010080645161290322,
        "meteor-8": 0.40292056512560426,
        "meteor-7": 0.3904977157256794,
        "meteor-16": 0.40292056512560426,
        "meteor-2": 0.4323960196779964,
        "meteor-11": 0.6680388862678313,
        "meteor-1": 0.43911409696242776,
        "meteor-10": 0.6726645785871403,
        "meteor-17": 0.40292056512560426,
        "meteor-12": 0.7049953291705591,
        "meteor-6": 0.40292056512560426,
        "meteor-18": 0.6726645785871403,
        "meteor-15": 0.7138502384581347,
        "meteor-13": 0.5174652241112829,
        "meteor-9": 0.40292056512560426,
        "meteor-4": 0.40219458212537795,
        "meteor-14": 0.43617608012057696,
        "meteor-5": 0.7138502384581347,
        "meteor-19": 0.47919692762384847,
        "ruby-3": 0.41666666666666663,
        "ruby-0": 0.018181818181818188,
        "ruby-8": 0.27118644067796616,
        "ruby-7": 0.2844827586206896,
        "ruby-16": 0.27118644067796616,
        "ruby-2": 0.40625,
        "ruby-11": 0.34782608695652173,
        "ruby-1": 0.24137931034482762,
        "ruby-10": 0.625,
        "ruby-17": 0.27118644067796616,
        "ruby-12": 0.6363636363636364,
        "ruby-6": 0.27118644067796616,
        "ruby-18": 0.625,
        "ruby-15": 0.6363636363636364,
        "ruby-13": 0.21052631578947367,
        "ruby-9": 0.27118644067796616,
        "ruby-4": 0.2833333333333333,
        "ruby-14": 0.35526315789473684,
        "ruby-5": 0.6363636363636364,
        "ruby-19": 0.3943661971830986,
        "codebertscore_f1-3": 0.8738144636154175,
        "codebertscore_f3-3": 0.8733922839164734,
        "codebertscore_f1-0": 0.0,
        "codebertscore_f3-0": 0.0,
        "codebertscore_f1-8": 0.8231948614120483,
        "codebertscore_f3-8": 0.8109386563301086,
        "codebertscore_f1-7": 0.8066627979278564,
        "codebertscore_f3-7": 0.818427562713623,
        "codebertscore_f1-16": 0.8271337747573853,
        "codebertscore_f3-16": 0.8148112297058105,
        "codebertscore_f1-2": 0.8737225532531738,
        "codebertscore_f3-2": 0.8664964437484741,
        "codebertscore_f1-11": 0.853523313999176,
        "codebertscore_f3-11": 0.846925675868988,
        "codebertscore_f1-1": 0.7592641115188599,
        "codebertscore_f3-1": 0.7668436169624329,
        "codebertscore_f1-10": 0.9100764393806458,
        "codebertscore_f3-10": 0.8965706825256348,
        "codebertscore_f1-17": 0.8238145112991333,
        "codebertscore_f3-17": 0.8110204935073853,
        "codebertscore_f1-12": 0.9044327139854431,
        "codebertscore_f3-12": 0.8919650316238403,
        "codebertscore_f1-6": 0.8281693458557129,
        "codebertscore_f3-6": 0.8141146302223206,
        "codebertscore_f1-18": 0.906636655330658,
        "codebertscore_f3-18": 0.8939586877822876,
        "codebertscore_f1-15": 0.9075710773468018,
        "codebertscore_f3-15": 0.8951215147972107,
        "codebertscore_f1-13": 0.7513569593429565,
        "codebertscore_f3-13": 0.7797974348068237,
        "codebertscore_f1-9": 0.8197783827781677,
        "codebertscore_f3-9": 0.8069165349006653,
        "codebertscore_f1-4": 0.8206680417060852,
        "codebertscore_f3-4": 0.81128990650177,
        "codebertscore_f1-14": 0.8406395316123962,
        "codebertscore_f3-14": 0.845058262348175,
        "codebertscore_f1-5": 0.9075710773468018,
        "codebertscore_f3-5": 0.8951215147972107,
        "codebertscore_f1-19": 0.8231706619262695,
        "codebertscore_f3-19": 0.8271319270133972,
        "codebertscore_s_f1-3": 0.871305525302887,
        "codebertscore_s_f3-3": 0.8673390746116638,
        "codebertscore_s_f1-0": 0.0,
        "codebertscore_s_f3-0": 0.0,
        "codebertscore_s_f1-8": 0.8321646451950073,
        "codebertscore_s_f3-8": 0.8171796202659607,
        "codebertscore_s_f1-7": 0.8131935000419617,
        "codebertscore_s_f3-7": 0.8238770365715027,
        "codebertscore_s_f1-16": 0.8319026827812195,
        "codebertscore_s_f3-16": 0.8170516490936279,
        "codebertscore_s_f1-2": 0.8768548369407654,
        "codebertscore_s_f3-2": 0.8669939637184143,
        "codebertscore_s_f1-11": 0.8570773601531982,
        "codebertscore_s_f3-11": 0.8477253317832947,
        "codebertscore_s_f1-1": 0.7705519795417786,
        "codebertscore_s_f3-1": 0.7737464904785156,
        "codebertscore_s_f1-10": 0.9080888032913208,
        "codebertscore_s_f3-10": 0.8929335474967957,
        "codebertscore_s_f1-17": 0.8194297552108765,
        "codebertscore_s_f3-17": 0.8056420087814331,
        "codebertscore_s_f1-12": 0.9050667881965637,
        "codebertscore_s_f3-12": 0.892013430595398,
        "codebertscore_s_f1-6": 0.8277037143707275,
        "codebertscore_s_f3-6": 0.8120253086090088,
        "codebertscore_s_f1-18": 0.9046046137809753,
        "codebertscore_s_f3-18": 0.8902968168258667,
        "codebertscore_s_f1-15": 0.9055051803588867,
        "codebertscore_s_f3-15": 0.8912744522094727,
        "codebertscore_s_f1-13": 0.7636106610298157,
        "codebertscore_s_f3-13": 0.7903081178665161,
        "codebertscore_s_f1-9": 0.8213099241256714,
        "codebertscore_s_f3-9": 0.8054643869400024,
        "codebertscore_s_f1-4": 0.8193641304969788,
        "codebertscore_s_f3-4": 0.808880627155304,
        "codebertscore_s_f1-14": 0.845490038394928,
        "codebertscore_s_f3-14": 0.847468912601471,
        "codebertscore_s_f1-5": 0.9055051803588867,
        "codebertscore_s_f3-5": 0.8912744522094727,
        "codebertscore_s_f1-19": 0.8269153237342834,
        "codebertscore_s_f3-19": 0.8300721645355225,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 0,
        "raw_gpt35_nsnr-0": "0",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings, prefix){\n",
        "snippet": [
            "  return strings.filter(x => x.startsWith(prefix));\n}\n\n"
        ],
        "simplified": "Filter an input list of strings only for ones that start with a given prefix.",
        "task_id": "29",
        "3": "return strings.filter(function(a){\n        return a.startsWith(prefix);\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return _.filter(strings, function(a){\n    return a.startsWith(prefix);\n  });\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return strings.filter(function(str){\n        return str.indexOf(prefix) == 0;\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var filtered = strings.filter(function(string){\n        return string.indexOf(prefix) == 0;\n    });\n    return filtered;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var filtered = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var new_strings = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].substring(0, prefix.length) == prefix){\n            new_strings.push(strings[i]);\n        }\n    }\n    return new_strings;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return strings.filter(function(str){return str.startsWith(prefix)});\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return filter(strings, function(s){\n\t\treturn s.indexOf(prefix)==0;\n\t});\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix))\n            result.push(strings[i]);\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return _.filter(strings, function(str){ return _.str.startsWith(str, prefix); });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var filtered = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n            filtered.push(string);\n        }\n    });\n    return filtered;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let result = []\n\tfor (let i = 0; i < strings.length; i++) {\n\t\tif (strings[i].startsWith(prefix)){\n\t\t\tresult.push(strings[i])\n\t\t}\n\t}\n\treturn result\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var a = strings.filter(function(val){\n\t\tif(val.startsWith(prefix)){\n\t\t\treturn val;\n\t\t}\n\t});\n\treturn a;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var arr = [];\n\tfor(i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\t\tarr.push(strings[i]);\n\t\t}\n\t}\n\treturn arr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// YOUR CODE HERE\n    return strings.filter(function(str){\n        return starts_with(str, prefix);\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return strings.filter(\n\tfunction(string){\n\t    return string.startsWith(prefix);\n\t});\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "// your code here\n  var newarr = [];\n  for (var i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      newarr.push(strings[i]);\n    }\n  }\n  return newarr;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return strings.filter(function(element){\n        return element.substring(0, prefix.length) == prefix;\n    });\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "return strings.filter(function(string){return string.startsWith(prefix)});\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return strings.filter(function(str){\n\t\treturn str.slice(0, prefix.length) === prefix;\n\t});\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.41261520349079434,
        "bleu-0": 0.2939918700508725,
        "bleu-8": 0.23203058032469898,
        "bleu-7": 0.13788941125887122,
        "bleu-16": 0.14128129251952778,
        "bleu-2": 0.03784219180388753,
        "bleu-11": 0.43280152762708535,
        "bleu-1": 0.11371681934875238,
        "bleu-10": 0.14687928362740124,
        "bleu-17": 0.1674349890815697,
        "bleu-12": 0.18317070220681322,
        "bleu-6": 0.13445273575332964,
        "bleu-18": 0.2683872404036398,
        "bleu-15": 0.1440259001759199,
        "bleu-13": 0.19555687445688397,
        "bleu-9": 0.41261520349079434,
        "bleu-4": 0.1289910935914641,
        "bleu-14": 0.1818958799213559,
        "bleu-5": 0.43280152762708535,
        "bleu-19": 0.1755035418383632,
        "codebleu-3": 0.6649029518879642,
        "codebleu-0": 0.6221438905675174,
        "codebleu-8": 0.6272297571178572,
        "codebleu-7": 0.6575165737678055,
        "codebleu-16": 0.5966921276456266,
        "codebleu-2": 0.535005224660397,
        "codebleu-11": 0.691255844991139,
        "codebleu-1": 0.5120167189132705,
        "codebleu-10": 0.5746366204164791,
        "codebleu-17": 0.6010510770726336,
        "codebleu-12": 0.6726392131682201,
        "codebleu-6": 0.5955540348512603,
        "codebleu-18": 0.6944177271101154,
        "codebleu-15": 0.5971495622550252,
        "codebleu-13": 0.5600222794941201,
        "codebleu-9": 0.6878914576350905,
        "codebleu-4": 0.594643761157616,
        "codebleu-14": 0.5958854679701737,
        "codebleu-5": 0.691255844991139,
        "codebleu-19": 0.6178085840368014,
        "chrf-3": 0.7491997026341951,
        "chrf-0": 0.636851152612125,
        "chrf-8": 0.5466376086953123,
        "chrf-7": 0.495329732679521,
        "chrf-16": 0.5162178853646866,
        "chrf-2": 0.2888880803709454,
        "chrf-11": 0.7399533783393433,
        "chrf-1": 0.44201789383979057,
        "chrf-10": 0.4904739063386399,
        "chrf-17": 0.5607851623614387,
        "chrf-12": 0.5381118911965059,
        "chrf-6": 0.48375825654894894,
        "chrf-18": 0.6583935983146961,
        "chrf-15": 0.5047857524765894,
        "chrf-13": 0.5599099173947684,
        "chrf-9": 0.7192434031488092,
        "chrf-4": 0.4652872470348962,
        "chrf-14": 0.47852022545606476,
        "chrf-5": 0.722130554531819,
        "chrf-19": 0.4988578722422228,
        "rougel-3": 0.6829268292682927,
        "rougel-0": 0.6046511627906976,
        "rougel-8": 0.5454545454545455,
        "rougel-7": 0.4489795918367347,
        "rougel-16": 0.3333333333333333,
        "rougel-2": 0.2564102564102564,
        "rougel-11": 0.7000000000000001,
        "rougel-1": 0.4545454545454546,
        "rougel-10": 0.3428571428571429,
        "rougel-17": 0.5531914893617021,
        "rougel-12": 0.4,
        "rougel-6": 0.31884057971014496,
        "rougel-18": 0.4999999999999999,
        "rougel-15": 0.3380281690140845,
        "rougel-13": 0.4888888888888889,
        "rougel-9": 0.6829268292682927,
        "rougel-4": 0.3116883116883117,
        "rougel-14": 0.5106382978723404,
        "rougel-5": 0.7000000000000001,
        "rougel-19": 0.5,
        "meteor-3": 0.7395201323772753,
        "meteor-0": 0.7191967696169377,
        "meteor-8": 0.637511015988921,
        "meteor-7": 0.595088450807861,
        "meteor-16": 0.46841563786008233,
        "meteor-2": 0.38413413413413416,
        "meteor-11": 0.7435392635314996,
        "meteor-1": 0.5437352245862884,
        "meteor-10": 0.44821666984550834,
        "meteor-17": 0.664600918901592,
        "meteor-12": 0.4959694989106753,
        "meteor-6": 0.39415061799367634,
        "meteor-18": 0.7072562358276645,
        "meteor-15": 0.4461319411485525,
        "meteor-13": 0.4700686518868337,
        "meteor-9": 0.7395201323772753,
        "meteor-4": 0.43401976175085416,
        "meteor-14": 0.4744570773567955,
        "meteor-5": 0.7435392635314996,
        "meteor-19": 0.47198594674556216,
        "ruby-3": 0.6086956521739131,
        "ruby-0": 0.52,
        "ruby-8": 0.46153846153846156,
        "ruby-7": 0.3548387096774194,
        "ruby-16": 0.2222222222222222,
        "ruby-2": 0.15000000000000002,
        "ruby-11": 0.6363636363636364,
        "ruby-1": 0.3846153846153846,
        "ruby-10": 0.23076923076923073,
        "ruby-17": 0.4482758620689655,
        "ruby-12": 0.2857142857142857,
        "ruby-6": 0.21568627450980393,
        "ruby-18": 0.38235294117647056,
        "ruby-15": 0.2264150943396226,
        "ruby-13": 0.40740740740740744,
        "ruby-9": 0.6086956521739131,
        "ruby-4": 0.2033898305084746,
        "ruby-14": 0.3793103448275862,
        "ruby-5": 0.6363636363636364,
        "ruby-19": 0.3666666666666667,
        "codebertscore_f1-3": 0.9445355534553528,
        "codebertscore_f3-3": 0.9603471755981445,
        "codebertscore_f1-0": 0.9339657425880432,
        "codebertscore_f3-0": 0.949707567691803,
        "codebertscore_f1-8": 0.8720186948776245,
        "codebertscore_f3-8": 0.8850383162498474,
        "codebertscore_f1-7": 0.8382629156112671,
        "codebertscore_f3-7": 0.8539185523986816,
        "codebertscore_f1-16": 0.7984837889671326,
        "codebertscore_f3-16": 0.837457001209259,
        "codebertscore_f1-2": 0.7232067584991455,
        "codebertscore_f3-2": 0.7322761416435242,
        "codebertscore_f1-11": 0.9479658603668213,
        "codebertscore_f3-11": 0.9631668925285339,
        "codebertscore_f1-1": 0.8567560315132141,
        "codebertscore_f3-1": 0.8685444593429565,
        "codebertscore_f1-10": 0.8017469644546509,
        "codebertscore_f3-10": 0.8398493528366089,
        "codebertscore_f1-17": 0.9005756974220276,
        "codebertscore_f3-17": 0.9171178340911865,
        "codebertscore_f1-12": 0.8208377361297607,
        "codebertscore_f3-12": 0.8559643626213074,
        "codebertscore_f1-6": 0.8042110204696655,
        "codebertscore_f3-6": 0.8440558910369873,
        "codebertscore_f1-18": 0.8892025947570801,
        "codebertscore_f3-18": 0.9206893444061279,
        "codebertscore_f1-15": 0.8100939989089966,
        "codebertscore_f3-15": 0.8463793396949768,
        "codebertscore_f1-13": 0.8385655283927917,
        "codebertscore_f3-13": 0.8790687918663025,
        "codebertscore_f1-9": 0.934012234210968,
        "codebertscore_f3-9": 0.9491686820983887,
        "codebertscore_f1-4": 0.7814264893531799,
        "codebertscore_f3-4": 0.8325018286705017,
        "codebertscore_f1-14": 0.8301750421524048,
        "codebertscore_f3-14": 0.8437451124191284,
        "codebertscore_f1-5": 0.9449295997619629,
        "codebertscore_f3-5": 0.9598771333694458,
        "codebertscore_f1-19": 0.8467988967895508,
        "codebertscore_f3-19": 0.855750322341919,
        "codebertscore_s_f1-3": 0.9417212009429932,
        "codebertscore_s_f3-3": 0.9591007828712463,
        "codebertscore_s_f1-0": 0.9304799437522888,
        "codebertscore_s_f3-0": 0.9484661817550659,
        "codebertscore_s_f1-8": 0.8657850027084351,
        "codebertscore_s_f3-8": 0.8795929551124573,
        "codebertscore_s_f1-7": 0.8424674272537231,
        "codebertscore_s_f3-7": 0.8622221350669861,
        "codebertscore_s_f1-16": 0.7994996905326843,
        "codebertscore_s_f3-16": 0.8410228490829468,
        "codebertscore_s_f1-2": 0.7319179177284241,
        "codebertscore_s_f3-2": 0.7460587024688721,
        "codebertscore_s_f1-11": 0.940707266330719,
        "codebertscore_s_f3-11": 0.9579454064369202,
        "codebertscore_s_f1-1": 0.8416518568992615,
        "codebertscore_s_f3-1": 0.8541480302810669,
        "codebertscore_s_f1-10": 0.8047502636909485,
        "codebertscore_s_f3-10": 0.8440513014793396,
        "codebertscore_s_f1-17": 0.8978394269943237,
        "codebertscore_s_f3-17": 0.9205106496810913,
        "codebertscore_s_f1-12": 0.8313013315200806,
        "codebertscore_s_f3-12": 0.8676113486289978,
        "codebertscore_s_f1-6": 0.8069304823875427,
        "codebertscore_s_f3-6": 0.8498684763908386,
        "codebertscore_s_f1-18": 0.8910969495773315,
        "codebertscore_s_f3-18": 0.9264283776283264,
        "codebertscore_s_f1-15": 0.8220680356025696,
        "codebertscore_s_f3-15": 0.8581157922744751,
        "codebertscore_s_f1-13": 0.8437954187393188,
        "codebertscore_s_f3-13": 0.8881325721740723,
        "codebertscore_s_f1-9": 0.9337921142578125,
        "codebertscore_s_f3-9": 0.9513339996337891,
        "codebertscore_s_f1-4": 0.7887623906135559,
        "codebertscore_s_f3-4": 0.8431624174118042,
        "codebertscore_s_f1-14": 0.837672233581543,
        "codebertscore_s_f3-14": 0.8543166518211365,
        "codebertscore_s_f1-5": 0.9391908049583435,
        "codebertscore_s_f3-5": 0.9563510417938232,
        "codebertscore_s_f1-19": 0.8455665111541748,
        "codebertscore_s_f3-19": 0.8567883372306824,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n",
        "snippet": [
            "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "Return true if a given number is prime, and false otherwise.",
        "task_id": "31",
        "0": "for(var i = 2; i < n; i++){\n\t\tif(n % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "if (n<=1){\n        return false;\n    }\n    for (var i=2; i*i<=n; i++){\n        if (n%i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "if (n <= 1){\n        return false;\n    }\n    var i = 2;\n    while (i < n){\n        if (n % i == 0){\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "if (n < 2) {\n    return false;\n  }\n  for (var i = 2; i < n; i++){\n    if (n % i == 0){\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "if (n <= 1){\n        return false;\n    }\n    for (let i = 2; i < n; i++){\n        if (n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "if (n===1){\n\t\treturn false;\n\t}\n\telse if(n === 2){\n\t\treturn true;\n\t}else{\n\t\tfor(var x = 2; x < n; x++){\n\t\t\tif(n % x === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;  \n\t}\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "if (n === 1){\n    return false;\n  }\n  else if (n === 2){\n    return true;\n  }\n  else {\n    for (var i = 2; i < n; i++){\n      if (n % i === 0){\n        return false;\n      }\n    }\n    return true;\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-7": {
            "execution": 1
        },
        "9": "if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var flag = true;\n\tvar i = 2;\n\twhile(i < n){\n\t\tif(n % i == 0){\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn flag;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "if (n === 1) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n        if (n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "// your code here\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "if (n < 2) {return false;}\n    else if (n == 2) {return true;}\n    else {\n        var max = Math.floor(Math.sqrt(n));\n        for (var i = 2; i <= max; i++){\n            if (n % i == 0) {return false;}\n        }\n        return true;\n    }\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "if (n < 2) {\n        return false;\n    } else if (n == 2) {\n        return true;\n    } else {\n        var i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-16": {
            "execution": 0
        },
        "18": "if (n < 2) {\n\t\treturn false;\n\t} else if (n === 2) {\n\t\treturn true;\n\t} else {\n\t\tfor (var i = 2; i < n; i++) {\n\t\t\tif (n % i === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "if (n<2){\n    return false;\n  }\n  for (var i=2; i<n; i++){\n    if (n%i==0){\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.2555847234761915,
        "bleu-1": 0.2826544643088026,
        "bleu-2": 0.28081596375006723,
        "bleu-3": 0.36636735883571253,
        "bleu-4": 0.3166855154889861,
        "bleu-5": 0.1957747654627421,
        "bleu-6": 0.1957747654627421,
        "bleu-7": 0.36636735883571253,
        "bleu-9": 0.37922624459962045,
        "bleu-10": 0.1820037942003726,
        "bleu-11": 0.26090342850591847,
        "bleu-12": 0.3048265358654792,
        "bleu-13": 0.00020119282554440773,
        "bleu-14": 0.21677809874909384,
        "bleu-15": 0.2569317964756512,
        "bleu-16": 0.2555847234761915,
        "bleu-18": 0.2608129377893103,
        "bleu-19": 0.36636735883571253,
        "codebleu-0": 0.4849880893401613,
        "codebleu-1": 0.6294323097080327,
        "codebleu-2": 0.6028632666856172,
        "codebleu-3": 0.6878289032402953,
        "codebleu-4": 0.6487405152077602,
        "codebleu-5": 0.6482856932336891,
        "codebleu-6": 0.6482856932336891,
        "codebleu-7": 0.6878289032402953,
        "codebleu-9": 0.692497303392866,
        "codebleu-10": 0.5247784101445065,
        "codebleu-11": 0.6232818845489662,
        "codebleu-12": 0.6442387660785899,
        "codebleu-13": 0.04445070391963805,
        "codebleu-14": 0.6740084710036367,
        "codebleu-15": 0.6791856024429116,
        "codebleu-16": 0.4849880893401613,
        "codebleu-18": 0.6924587219547841,
        "codebleu-19": 0.6878289032402953,
        "chrf-0": 0.40708847034440565,
        "chrf-1": 0.5382023185168606,
        "chrf-2": 0.5224402906505256,
        "chrf-3": 0.5695910015746546,
        "chrf-4": 0.5838952832874276,
        "chrf-5": 0.5003209377100848,
        "chrf-6": 0.5003209377100848,
        "chrf-7": 0.5695910015746546,
        "chrf-9": 0.608720187785744,
        "chrf-10": 0.2725755412769704,
        "chrf-11": 0.5305500056790192,
        "chrf-12": 0.5448739262049722,
        "chrf-13": 0.02688345578102926,
        "chrf-14": 0.49568783377253794,
        "chrf-15": 0.5137917879435128,
        "chrf-16": 0.40708847034440565,
        "chrf-18": 0.5304813426389431,
        "chrf-19": 0.5695910015746546,
        "rougel-0": 0.6753246753246753,
        "rougel-1": 0.7391304347826089,
        "rougel-2": 0.6444444444444444,
        "rougel-3": 0.7954545454545455,
        "rougel-4": 0.7865168539325842,
        "rougel-5": 0.6111111111111112,
        "rougel-6": 0.6111111111111112,
        "rougel-7": 0.7954545454545455,
        "rougel-9": 0.8181818181818182,
        "rougel-10": 0.4705882352941176,
        "rougel-11": 0.7252747252747253,
        "rougel-12": 0.7640449438202246,
        "rougel-13": 0.041666666666666664,
        "rougel-14": 0.5666666666666667,
        "rougel-15": 0.5961538461538461,
        "rougel-16": 0.6753246753246753,
        "rougel-18": 0.660377358490566,
        "rougel-19": 0.7954545454545455,
        "meteor-0": 0.6371459792677621,
        "meteor-1": 0.7855712378409307,
        "meteor-2": 0.7117914096147131,
        "meteor-3": 0.8333333333333334,
        "meteor-4": 0.8271151053013799,
        "meteor-5": 0.7431237359808789,
        "meteor-6": 0.7431237359808789,
        "meteor-7": 0.8333333333333334,
        "meteor-9": 0.8577566602808825,
        "meteor-10": 0.49707304389380036,
        "meteor-11": 0.7684578170708977,
        "meteor-12": 0.8024297719087634,
        "meteor-13": 0.013020833333333334,
        "meteor-14": 0.7111202485380117,
        "meteor-15": 0.7318274582560297,
        "meteor-16": 0.6371459792677621,
        "meteor-18": 0.763574660633484,
        "meteor-19": 0.8333333333333334,
        "ruby-0": 0.5238095238095238,
        "ruby-1": 0.64,
        "ruby-2": 0.45833333333333337,
        "ruby-3": 0.7173913043478262,
        "ruby-4": 0.7021276595744681,
        "ruby-5": 0.4696969696969697,
        "ruby-6": 0.4696969696969697,
        "ruby-7": 0.7173913043478262,
        "ruby-9": 0.7391304347826086,
        "ruby-10": 0.18604651162790697,
        "ruby-11": 0.6326530612244898,
        "ruby-12": 0.6808510638297872,
        "ruby-13": 0.023809523809523836,
        "ruby-14": 0.42307692307692313,
        "ruby-15": 0.4838709677419355,
        "ruby-16": 0.5238095238095238,
        "ruby-18": 0.515625,
        "ruby-19": 0.7173913043478262,
        "codebertscore_f1-0": 0.884530782699585,
        "codebertscore_f3-0": 0.8757083415985107,
        "codebertscore_f1-1": 0.8931708931922913,
        "codebertscore_f3-1": 0.8969957828521729,
        "codebertscore_f1-2": 0.887116551399231,
        "codebertscore_f3-2": 0.8836982846260071,
        "codebertscore_f1-3": 0.9286581873893738,
        "codebertscore_f3-3": 0.9186285734176636,
        "codebertscore_f1-4": 0.9251298904418945,
        "codebertscore_f3-4": 0.9187873601913452,
        "codebertscore_f1-5": 0.8815928101539612,
        "codebertscore_f3-5": 0.8879636526107788,
        "codebertscore_f1-6": 0.8862447738647461,
        "codebertscore_f3-6": 0.8902941346168518,
        "codebertscore_f1-7": 0.9247873425483704,
        "codebertscore_f3-7": 0.9147055149078369,
        "codebertscore_f1-9": 0.9416728615760803,
        "codebertscore_f3-9": 0.9312314391136169,
        "codebertscore_f1-10": 0.8241355419158936,
        "codebertscore_f3-10": 0.8291260004043579,
        "codebertscore_f1-11": 0.9244133830070496,
        "codebertscore_f3-11": 0.9182518124580383,
        "codebertscore_f1-12": 0.9174120426177979,
        "codebertscore_f3-12": 0.911316454410553,
        "codebertscore_f1-13": 0.5984628796577454,
        "codebertscore_f3-13": 0.5965107679367065,
        "codebertscore_f1-14": 0.8463982343673706,
        "codebertscore_f3-14": 0.8632920384407043,
        "codebertscore_f1-15": 0.8498942852020264,
        "codebertscore_f3-15": 0.8472473621368408,
        "codebertscore_f1-16": 0.8858450055122375,
        "codebertscore_f3-16": 0.876631498336792,
        "codebertscore_f1-18": 0.8981553912162781,
        "codebertscore_f3-18": 0.8988469839096069,
        "codebertscore_f1-19": 0.9227266311645508,
        "codebertscore_f3-19": 0.9125819802284241,
        "codebertscore_s_f1-0": 0.8987300992012024,
        "codebertscore_s_f3-0": 0.8903554677963257,
        "codebertscore_s_f1-1": 0.8993526101112366,
        "codebertscore_s_f3-1": 0.9021644592285156,
        "codebertscore_s_f1-2": 0.8873428702354431,
        "codebertscore_s_f3-2": 0.8840455412864685,
        "codebertscore_s_f1-3": 0.9357753992080688,
        "codebertscore_s_f3-3": 0.925861656665802,
        "codebertscore_s_f1-4": 0.9296797513961792,
        "codebertscore_s_f3-4": 0.9233306646347046,
        "codebertscore_s_f1-5": 0.8868122696876526,
        "codebertscore_s_f3-5": 0.8919910788536072,
        "codebertscore_s_f1-6": 0.8914365172386169,
        "codebertscore_s_f3-6": 0.8933582305908203,
        "codebertscore_s_f1-7": 0.9304718971252441,
        "codebertscore_s_f3-7": 0.9204862713813782,
        "codebertscore_s_f1-9": 0.9472571015357971,
        "codebertscore_s_f3-9": 0.9369022846221924,
        "codebertscore_s_f1-10": 0.834693431854248,
        "codebertscore_s_f3-10": 0.8415157198905945,
        "codebertscore_s_f1-11": 0.9309751391410828,
        "codebertscore_s_f3-11": 0.924628496170044,
        "codebertscore_s_f1-12": 0.9223702549934387,
        "codebertscore_s_f3-12": 0.9162337183952332,
        "codebertscore_s_f1-13": 0.5818980932235718,
        "codebertscore_s_f3-13": 0.5785830616950989,
        "codebertscore_s_f1-14": 0.8571119904518127,
        "codebertscore_s_f3-14": 0.8741849660873413,
        "codebertscore_s_f1-15": 0.8546984791755676,
        "codebertscore_s_f3-15": 0.8510051965713501,
        "codebertscore_s_f1-16": 0.9058871865272522,
        "codebertscore_s_f3-16": 0.8964962363243103,
        "codebertscore_s_f1-18": 0.903683602809906,
        "codebertscore_s_f3-18": 0.9036712050437927,
        "codebertscore_s_f1-19": 0.9304838180541992,
        "codebertscore_s_f3-19": 0.9205129146575928,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0- The code snippet does not contain any implementation for the given problem.",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunction exchange(lst1, lst2){\n",
        "snippet": [
            "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n"
        ],
        "simplified": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "task_id": "110",
        "3": "let exchange = true;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            exchange = false;\n            break;\n        }\n    }\n    return exchange ? \"YES\" : \"NO\";\n}\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);",
        "grade-3": {
            "execution": 0
        },
        "0": "let count1 = 0;\n    let count2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 == 0){\n            count1++;\n        }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 != 0){\n            count2++;\n        }\n    }\n    if(count1 == count2){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const lst1Odds = lst1.filter(n => n % 2 !== 0)\n  const lst2Evens = lst2.filter(n => n % 2 === 0)\n  const count = lst1Odds.length\n  return lst2Evens.length >= count ? \"YES\" : \"NO\"\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          let temp = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = temp;\n          break;\n        }\n      }\n    }\n  }\n  return lst1.every(el => el % 2 === 0) ? \"YES\" : \"NO\";\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var lst3 = lst1.concat(lst2);\n  for(var i = 0; i < lst3.length; i++){\n    if(lst3[i] % 2 == 0){\n      lst3.splice(i, 1);\n      i--;\n    }\n  }\n  var sum = 0;\n  for(var i = 0; i < lst3.length; i++){\n    sum += lst3[i];\n  }\n  if(sum % 2 == 0){\n    return \"YES\";\n  }\n  else{\n    return \"NO\";\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//Write your code here.\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      return \"YES\";\n    }\n    for (var j = 0; j < lst2.length; j++) {\n      if (lst2[j] % 2 === 0) {\n        lst1[i] = lst2[j];\n        return \"YES\";\n      }\n    }\n  }\n  return \"NO\";\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(var i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 != 0){\n            for(var j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 == 0){\n                    var temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    j = lst2.length;\n                }\n            }\n        }\n    }\n    if(lst1.every(function(e){ return e % 2 == 0;})){\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let result = lst1.filter( x => x % 2 === 0);\n  if (result.length === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let odds = [];\n  lst1.map(item => {\n    if (item % 2 !== 0) {\n      odds.push(item);\n    }\n  });\n  let evens = [];\n  lst2.map(item => {\n    if (item % 2 === 0) {\n      evens.push(item);\n    }\n  });\n  return (odds.length === evens.length) ? \"YES\" : \"NO\";\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let count = 0;\n  let lst1Even = [];\n  let lst2Even = [];\n  let lst1Odd = [];\n  let lst2Odd = [];\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      lst1Even.push(lst1[i]);\n    } else {\n      lst1Odd.push(lst1[i]);\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      lst2Even.push(lst2[i]);\n    } else {\n      lst2Odd.push(lst2[i]);\n    }\n  }\n  if(lst1Even.length + lst2Odd.length === lst1.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          let t = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = t;\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(lst1.some(x => x % 2)) {\n    return 'NO';\n  } else {\n    return 'YES';\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let evens = []\n  let odds = []\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evens.push(lst1[i])\n    }\n    else{\n      odds.push(lst1[i])\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      evens.push(lst2[i])\n    }\n    else{\n      odds.push(lst2[i])\n    }\n  }\n  if(evens.length === lst1.length){\n    return \"YES\"\n  }\n  else{\n    return \"NO\"\n  }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let sum1 = 0, sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i];\n    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i];\n    }\n    if(sum1 % 2 === 0 || sum2 % 2 === 0){\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let isOdd = n => n % 2 !== 0;\n    let cnt1 = lst1.filter(isOdd).length;\n    let cnt2 = lst2.filter(isOdd).length;\n    return cnt1 === cnt2 ? \"YES\" : \"NO\";\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let lst1odds = lst1.filter(x => x % 2 !== 0);\n  let lst2evens = lst2.filter(x => x % 2 === 0);\n  if (lst1odds.length === lst2evens.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "for (var i = 0; i < lst1.length; i++) {\n    for (var j = 0; j < lst2.length; j++) {\n      if (lst1[i] % 2 !== 0 && lst2[j] % 2 === 0) {\n        var tmp = lst1[i];\n        lst1[i] = lst2[j];\n        lst2[j] = tmp;\n      }\n    }\n  }\n  for (var k = 0; k < lst1.length; k++) {\n    if (lst1[k] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          let tmp = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = tmp;\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return lst1.some(n => n % 2 == 0) ? \"YES\" : \"NO\";\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.3346530864180767,
        "bleu-0": 0.6761440255727933,
        "bleu-8": 0.11100358595038572,
        "bleu-7": 0.46478169063373265,
        "bleu-16": 0.4622721064823008,
        "bleu-2": 6.65271077642146e-07,
        "bleu-11": 0.561025322849249,
        "bleu-1": 0.45133496427055114,
        "bleu-10": 0.11673579861283777,
        "bleu-17": 0.17641046457782775,
        "bleu-12": 0.42684016516195156,
        "bleu-6": 0.5121405860961817,
        "bleu-18": 0.033585717429861515,
        "bleu-15": 0.5190002767365439,
        "bleu-13": 0.5817025205813761,
        "bleu-9": 0.05794055671066125,
        "bleu-4": 0.16754839202581548,
        "bleu-14": 0.4199942163107469,
        "bleu-5": 0.5041518531489834,
        "bleu-19": 0.01642921214975458,
        "codebleu-3": 0.4144460966382051,
        "codebleu-0": 0.7833433069832206,
        "codebleu-8": 0.28347922785600044,
        "codebleu-7": 0.6773962965115178,
        "codebleu-16": 0.7217006090168914,
        "codebleu-2": 0.027210910734193572,
        "codebleu-11": 0.6213812071448218,
        "codebleu-1": 0.73222539937389,
        "codebleu-10": 0.25495278890846307,
        "codebleu-17": 0.46778260003284966,
        "codebleu-12": 0.7372575161891234,
        "codebleu-6": 0.7327047660500439,
        "codebleu-18": 0.14191498610801834,
        "codebleu-15": 0.7364079259413514,
        "codebleu-13": 0.6249401952488446,
        "codebleu-9": 0.2485540844274931,
        "codebleu-4": 0.3474841150418099,
        "codebleu-14": 0.7075592684780949,
        "codebleu-5": 0.7287691438921775,
        "codebleu-19": 0.09953214314955007,
        "chrf-3": 0.3607239746907862,
        "chrf-0": 0.6627485571402478,
        "chrf-8": 0.23655252713914984,
        "chrf-7": 0.5453762507684826,
        "chrf-16": 0.4832198077302856,
        "chrf-2": 0.021714562590347194,
        "chrf-11": 0.5320071180501373,
        "chrf-1": 0.5469026512183799,
        "chrf-10": 0.2644429556635774,
        "chrf-17": 0.2480838351214179,
        "chrf-12": 0.5951021125102322,
        "chrf-6": 0.6715285702891985,
        "chrf-18": 0.19980080080429563,
        "chrf-15": 0.6467531865373481,
        "chrf-13": 0.5563108817721947,
        "chrf-9": 0.23750481339754745,
        "chrf-4": 0.30263703351793764,
        "chrf-14": 0.5458319513134078,
        "chrf-5": 0.6643895884064481,
        "chrf-19": 0.09528879424365845,
        "rougel-3": 0.5111111111111112,
        "rougel-0": 0.8599033816425121,
        "rougel-8": 0.379746835443038,
        "rougel-7": 0.6425339366515836,
        "rougel-16": 0.647887323943662,
        "rougel-2": 0.037037037037037035,
        "rougel-11": 0.7010309278350516,
        "rougel-1": 0.6206896551724138,
        "rougel-10": 0.4081632653061224,
        "rougel-17": 0.4639175257731959,
        "rougel-12": 0.6181818181818183,
        "rougel-6": 0.6166666666666666,
        "rougel-18": 0.2769230769230769,
        "rougel-15": 0.6910569105691057,
        "rougel-13": 0.6871794871794872,
        "rougel-9": 0.33121019108280253,
        "rougel-4": 0.45783132530120485,
        "rougel-14": 0.5446808510638298,
        "rougel-5": 0.6083333333333334,
        "rougel-19": 0.272,
        "meteor-3": 0.4488143067835893,
        "meteor-0": 0.8626938590361297,
        "meteor-8": 0.2987729538579523,
        "meteor-7": 0.5840853381778603,
        "meteor-16": 0.6450987038940355,
        "meteor-2": 0.011013215859030838,
        "meteor-11": 0.6296434560614234,
        "meteor-1": 0.5732266415057821,
        "meteor-10": 0.3639973943201455,
        "meteor-17": 0.4343597191858488,
        "meteor-12": 0.6402526557565317,
        "meteor-6": 0.7116235091651325,
        "meteor-18": 0.18280365209645608,
        "meteor-15": 0.6717832741415547,
        "meteor-13": 0.7196261286191457,
        "meteor-9": 0.30519092853310364,
        "meteor-4": 0.41481810115350487,
        "meteor-14": 0.6431312917545194,
        "meteor-5": 0.7003863106462429,
        "meteor-19": 0.17060810810810811,
        "ruby-3": 0.36,
        "ruby-0": 0.822429906542056,
        "ruby-8": 0.27,
        "ruby-7": 0.44628099173553715,
        "ruby-16": 0.5132743362831859,
        "ruby-2": 0.020000000000000018,
        "ruby-11": 0.6,
        "ruby-1": 0.43181818181818177,
        "ruby-10": 0.24,
        "ruby-17": 0.25,
        "ruby-12": 0.48571428571428577,
        "ruby-6": 0.4214285714285714,
        "ruby-18": 0.16000000000000003,
        "ruby-15": 0.5753424657534247,
        "ruby-13": 0.56,
        "ruby-9": 0.20999999999999996,
        "ruby-4": 0.28,
        "ruby-14": 0.37777777777777777,
        "ruby-5": 0.41428571428571426,
        "ruby-19": 0.16000000000000003,
        "codebertscore_f1-3": 0.8605649471282959,
        "codebertscore_f3-3": 0.880443274974823,
        "codebertscore_f1-0": 0.9121314287185669,
        "codebertscore_f3-0": 0.9197283387184143,
        "codebertscore_f1-8": 0.8294851779937744,
        "codebertscore_f3-8": 0.8263767957687378,
        "codebertscore_f1-7": 0.881818950176239,
        "codebertscore_f3-7": 0.8901316523551941,
        "codebertscore_f1-16": 0.8812592625617981,
        "codebertscore_f3-16": 0.8964888453483582,
        "codebertscore_f1-2": 0.5826658010482788,
        "codebertscore_f3-2": 0.5630478262901306,
        "codebertscore_f1-11": 0.9128236174583435,
        "codebertscore_f3-11": 0.9048154950141907,
        "codebertscore_f1-1": 0.84940505027771,
        "codebertscore_f3-1": 0.8653149008750916,
        "codebertscore_f1-10": 0.8324907422065735,
        "codebertscore_f3-10": 0.8109514713287354,
        "codebertscore_f1-17": 0.8295156359672546,
        "codebertscore_f3-17": 0.8365546464920044,
        "codebertscore_f1-12": 0.8528359532356262,
        "codebertscore_f3-12": 0.8844717741012573,
        "codebertscore_f1-6": 0.8898887038230896,
        "codebertscore_f3-6": 0.8963742256164551,
        "codebertscore_f1-18": 0.7817491292953491,
        "codebertscore_f3-18": 0.749324381351471,
        "codebertscore_f1-15": 0.8807381391525269,
        "codebertscore_f3-15": 0.9016377925872803,
        "codebertscore_f1-13": 0.9180045127868652,
        "codebertscore_f3-13": 0.9208517074584961,
        "codebertscore_f1-9": 0.8083307147026062,
        "codebertscore_f3-9": 0.8092950582504272,
        "codebertscore_f1-4": 0.8368228673934937,
        "codebertscore_f3-4": 0.8356125354766846,
        "codebertscore_f1-14": 0.8787354230880737,
        "codebertscore_f3-14": 0.8840182423591614,
        "codebertscore_f1-5": 0.8858155012130737,
        "codebertscore_f3-5": 0.8913652896881104,
        "codebertscore_f1-19": 0.7931216955184937,
        "codebertscore_f3-19": 0.7530292272567749,
        "codebertscore_s_f1-3": 0.8586797118186951,
        "codebertscore_s_f3-3": 0.8829165697097778,
        "codebertscore_s_f1-0": 0.9185101985931396,
        "codebertscore_s_f3-0": 0.9262588620185852,
        "codebertscore_s_f1-8": 0.8169657588005066,
        "codebertscore_s_f3-8": 0.8124027252197266,
        "codebertscore_s_f1-7": 0.8912448883056641,
        "codebertscore_s_f3-7": 0.8979280591011047,
        "codebertscore_s_f1-16": 0.8823396563529968,
        "codebertscore_s_f3-16": 0.8958740830421448,
        "codebertscore_s_f1-2": 0.5165208578109741,
        "codebertscore_s_f3-2": 0.4966078996658325,
        "codebertscore_s_f1-11": 0.9195860028266907,
        "codebertscore_s_f3-11": 0.9095600247383118,
        "codebertscore_s_f1-1": 0.8669927716255188,
        "codebertscore_s_f3-1": 0.8793590664863586,
        "codebertscore_s_f1-10": 0.8324628472328186,
        "codebertscore_s_f3-10": 0.8080021142959595,
        "codebertscore_s_f1-17": 0.8264697790145874,
        "codebertscore_s_f3-17": 0.8363127708435059,
        "codebertscore_s_f1-12": 0.8619325757026672,
        "codebertscore_s_f3-12": 0.8919970989227295,
        "codebertscore_s_f1-6": 0.8972293138504028,
        "codebertscore_s_f3-6": 0.9025684595108032,
        "codebertscore_s_f1-18": 0.7914348244667053,
        "codebertscore_s_f3-18": 0.7560132741928101,
        "codebertscore_s_f1-15": 0.8841671347618103,
        "codebertscore_s_f3-15": 0.9047327637672424,
        "codebertscore_s_f1-13": 0.9168757796287537,
        "codebertscore_s_f3-13": 0.9206305146217346,
        "codebertscore_s_f1-9": 0.802375316619873,
        "codebertscore_s_f3-9": 0.8055565357208252,
        "codebertscore_s_f1-4": 0.8317348957061768,
        "codebertscore_s_f3-4": 0.8270953893661499,
        "codebertscore_s_f1-14": 0.8865801692008972,
        "codebertscore_s_f3-14": 0.8885074853897095,
        "codebertscore_s_f1-5": 0.8925520777702332,
        "codebertscore_s_f3-5": 0.896752655506134,
        "codebertscore_s_f1-19": 0.790847897529602,
        "codebertscore_s_f3-19": 0.7454206943511963,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n",
        "snippet": [
            "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n"
        ],
        "simplified": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "61",
        "3": "var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            count++;\n        } else if (brackets[i] == \")\"){\n            count--;\n        }\n        if (count < 0){\n            return false;\n        }\n    }\n    return (count == 0);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var x = 0;\n\tvar y = 0;\n\tvar i = 0;\n\tvar z = 0;\n\tfor (i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tx++;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\ty++;\n\t\t}\n\t\tif (x < y){\n\t\t\tz++;\n\t\t}\n\t}\n\tif (x == y && z == 0){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let stack = [];\n    for (let bracket of brackets){\n        if (bracket === \"(\"){\n            stack.push(bracket);\n        } else if (bracket === \")\"){\n            if (stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "//Step 1: How to do parentheses matching problem?\n    //Step 2: How to handle errors?\n    //Step 3: How to use stack?\n    //Step 4: How to find the current parentheses is a left parentheses or right parentheses?\n    //Step 5: How to compare the left parentheses with right parentheses?\n    //Step 6: How to judge the parentheses is error or not?\n    //Step 7: How to output the result?\n    //Step 8: How to write the test case?\n    if(brackets.length == 0) {\n        return false;\n    }\n    var bracket_list = brackets.split(\"\");\n    var stack = [];\n    for(var i = 0; i < bracket_list.length; i++) {\n        if(bracket_list[i] == \"(\") {\n            stack.push(bracket_list[i]);\n        } else if(bracket_list[i] == \")\") {\n            if(stack.length == 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == '('){\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i] == ')'){\n            if (stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "const stack = [];\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] === '('){\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i] === ')'){\n            if (stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var openP = 0\n    var closeP = 0\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            openP++\n        } else if (brackets[i] == \")\") {\n            closeP++\n        }\n    }\n    if (openP == closeP) {\n        return true\n    } else {\n        return false\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var leftCount = 0;\n\tvar rightCount = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"(\") {\n\t\t\tleftCount++;\n\t\t} else if (brackets[i] === \")\") {\n\t\t\trightCount++;\n\t\t}\n\t}\n\tif (leftCount === rightCount) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "var left = 0;\n\tvar right = 0;\n\t\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == '('){\n\t\t\tleft += 1;\n\t\t}\n\t\telse if (brackets[i] == ')'){\n\t\t\tright += 1;\n\t\t}\n\t\tif (right > left){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (left == right);\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var left_para = 0;\n\tvar right_para = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == '('){\n\t\t\tleft_para++;\n\t\t}\n\t\telse if (brackets[i] == ')'){\n\t\t\tright_para++;\n\t\t}\n\t\tif (right_para > left_para){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (left_para != right_para){\n\t\treturn false;\n\t}\n\treturn true;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var opened_brackets = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      opened_brackets++;\n    } else if (brackets[i] == \")\") {\n      opened_brackets--;\n    }\n    if (opened_brackets < 0) {\n      return false;\n    }\n  }\n  return opened_brackets == 0;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var i, l, open_bracket = 0;\n\tfor(i = 0, l = brackets.length; i < l; i++){\n\t\tif(brackets[i] == \"(\"){\n\t\t\topen_bracket++;\n\t\t}else if(brackets[i] == \")\"){\n\t\t\topen_bracket--;\n\t\t}\n\t\tif(open_bracket < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn open_bracket == 0;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var stack = [];\n\tvar error = false;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}else if(brackets[i] === \")\"){\n\t\t\tif(stack.length > 0){\n\t\t\t\tstack.pop();\n\t\t\t}else{\n\t\t\t\terror = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn error || stack.length > 0? false: true;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var num_left = 0;\n    var num_right = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            num_left++;\n        }\n        else{\n            num_right++;\n        }\n    }\n    if (num_left == num_right){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var bracket_counter = 0;\n    for (i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            bracket_counter += 1;\n        }\n        else if (brackets[i] == \")\"){\n            bracket_counter -= 1;\n        }\n        if (bracket_counter < 0){\n            return false;\n        }\n    }\n    if (bracket_counter == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let opening = 0\n    let closing = 0\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            opening += 1\n        } else if (brackets[i] == \")\"){\n            closing += 1\n        }\n    }\n    if (opening == closing){\n        return true\n    } else {\n        return false\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var error = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\terror += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\terror -= 1;\n\t\t}\n\t\tif (error < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (error == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if (brackets.length % 2 !== 0){\n        return false;\n    }\n    const opening_brackets = '([{';\n    const closing_brackets = ')]}';\n    const matching_brackets = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    const stack = [];\n    for (let i = 0; i < brackets.length; i++){\n        if (opening_brackets.includes(brackets[i])){\n            stack.push(brackets[i]);\n        }\n        else if (closing_brackets.includes(brackets[i])){\n            if (stack.length === 0){\n                return false;\n            }\n            else if (stack[stack.length - 1] === matching_brackets[brackets[i]]){\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "const stack = new Stack();\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === \")\") {\n            stack.pop();\n        }\n    }\n    return stack.size() === 0;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.2166109737693806,
        "bleu-0": 0.1485665453668099,
        "bleu-8": 0.22450056142280478,
        "bleu-7": 0.06111225453546015,
        "bleu-16": 0.13426672506866774,
        "bleu-2": 0.1686178961521489,
        "bleu-11": 0.13188086729475076,
        "bleu-1": 0.17185541232395965,
        "bleu-10": 5.242885663363467e-22,
        "bleu-17": 0.21730705236428452,
        "bleu-12": 0.18551130829854628,
        "bleu-6": 0.24072713660175768,
        "bleu-18": 0.22078159374378206,
        "bleu-15": 0.1139308537311456,
        "bleu-13": 0.22234137304129933,
        "bleu-9": 0.22948208744433635,
        "bleu-4": 0.15095832595105924,
        "bleu-14": 0.22697370987548252,
        "bleu-5": 0.07481527663496199,
        "bleu-19": 0.17130605204626573,
        "codebleu-3": 0.7025838847878815,
        "codebleu-0": 0.6780619327199002,
        "codebleu-8": 0.6402449983112737,
        "codebleu-7": 0.6438805463363264,
        "codebleu-16": 0.6319627823423409,
        "codebleu-2": 0.6376879775229212,
        "codebleu-11": 0.613879420874631,
        "codebleu-1": 0.6600854870488242,
        "codebleu-10": 0.01092896174863388,
        "codebleu-17": 0.6940231883906505,
        "codebleu-12": 0.6623614697112553,
        "codebleu-6": 0.7066032452599443,
        "codebleu-18": 0.6814210646196807,
        "codebleu-15": 0.6173122091914927,
        "codebleu-13": 0.6684998138350474,
        "codebleu-9": 0.7420204601507804,
        "codebleu-4": 0.6520981348155029,
        "codebleu-14": 0.741602397222638,
        "codebleu-5": 0.6484166356051624,
        "codebleu-19": 0.6005123142422405,
        "chrf-3": 0.3805837458491783,
        "chrf-0": 0.3478436611653883,
        "chrf-8": 0.39945546045593455,
        "chrf-7": 0.2185039611454284,
        "chrf-16": 0.3156225620336238,
        "chrf-2": 0.3475930802879486,
        "chrf-11": 0.31821774215256216,
        "chrf-1": 0.340876637378704,
        "chrf-10": 0.011876484560570073,
        "chrf-17": 0.35638358844728457,
        "chrf-12": 0.329510493414163,
        "chrf-6": 0.369663998949904,
        "chrf-18": 0.3675984752466864,
        "chrf-15": 0.2883509423921441,
        "chrf-13": 0.35362100171970495,
        "chrf-9": 0.3475680119058855,
        "chrf-4": 0.31787710525406515,
        "chrf-14": 0.3723249708994543,
        "chrf-5": 0.2546592456756605,
        "chrf-19": 0.3000186164127587,
        "rougel-3": 0.564885496183206,
        "rougel-0": 0.40740740740740744,
        "rougel-8": 0.5038167938931298,
        "rougel-7": 0.21602787456445993,
        "rougel-16": 0.4050632911392405,
        "rougel-2": 0.4266666666666667,
        "rougel-11": 0.3851851851851852,
        "rougel-1": 0.4305555555555555,
        "rougel-10": 0.0392156862745098,
        "rougel-17": 0.5362318840579711,
        "rougel-12": 0.4475524475524476,
        "rougel-6": 0.5736434108527131,
        "rougel-18": 0.5441176470588235,
        "rougel-15": 0.36477987421383645,
        "rougel-13": 0.4878048780487805,
        "rougel-9": 0.5633802816901409,
        "rougel-4": 0.42748091603053434,
        "rougel-14": 0.5594405594405595,
        "rougel-5": 0.24267782426778245,
        "rougel-19": 0.411764705882353,
        "meteor-3": 0.6052524559970692,
        "meteor-0": 0.4733374110320285,
        "meteor-8": 0.5390291709904299,
        "meteor-7": 0.4034570596797671,
        "meteor-16": 0.4967293906810036,
        "meteor-2": 0.5410909090909091,
        "meteor-11": 0.4462565621949305,
        "meteor-1": 0.46727941176470594,
        "meteor-10": 0.011086474501108647,
        "meteor-17": 0.5704519052044611,
        "meteor-12": 0.510451197053407,
        "meteor-6": 0.6516172635561017,
        "meteor-18": 0.6295837143846502,
        "meteor-15": 0.4455394306777271,
        "meteor-13": 0.5690248565965583,
        "meteor-9": 0.5211655775094336,
        "meteor-4": 0.4398874706470438,
        "meteor-14": 0.5202057882322523,
        "meteor-5": 0.4890989136617577,
        "meteor-19": 0.5063206611209838,
        "ruby-3": 0.4444444444444444,
        "ruby-0": 0.2857142857142857,
        "ruby-8": 0.40740740740740744,
        "ruby-7": 0.13080168776371304,
        "ruby-16": 0.2962962962962963,
        "ruby-2": 0.31999999999999995,
        "ruby-11": 0.2588235294117647,
        "ruby-1": 0.2978723404255319,
        "ruby-10": 0.020000000000000018,
        "ruby-17": 0.4204545454545454,
        "ruby-12": 0.33333333333333337,
        "ruby-6": 0.45569620253164556,
        "ruby-18": 0.41860465116279066,
        "ruby-15": 0.2660550458715596,
        "ruby-13": 0.36986301369863017,
        "ruby-9": 0.4347826086956522,
        "ruby-4": 0.308641975308642,
        "ruby-14": 0.4301075268817204,
        "ruby-5": 0.1534391534391535,
        "ruby-19": 0.313953488372093,
        "codebertscore_f1-3": 0.8304506540298462,
        "codebertscore_f3-3": 0.8333711624145508,
        "codebertscore_f1-0": 0.777703583240509,
        "codebertscore_f3-0": 0.7800095677375793,
        "codebertscore_f1-8": 0.8041241765022278,
        "codebertscore_f3-8": 0.8067062497138977,
        "codebertscore_f1-7": 0.645219087600708,
        "codebertscore_f3-7": 0.6771472096443176,
        "codebertscore_f1-16": 0.7644748091697693,
        "codebertscore_f3-16": 0.7718579173088074,
        "codebertscore_f1-2": 0.7803645730018616,
        "codebertscore_f3-2": 0.7871518135070801,
        "codebertscore_f1-11": 0.778188943862915,
        "codebertscore_f3-11": 0.7827355861663818,
        "codebertscore_f1-1": 0.7969554662704468,
        "codebertscore_f3-1": 0.8003948926925659,
        "codebertscore_f1-10": 0.0,
        "codebertscore_f3-10": 0.0,
        "codebertscore_f1-17": 0.8276089429855347,
        "codebertscore_f3-17": 0.8349848985671997,
        "codebertscore_f1-12": 0.7722596526145935,
        "codebertscore_f3-12": 0.783791720867157,
        "codebertscore_f1-6": 0.8188157081604004,
        "codebertscore_f3-6": 0.8319759368896484,
        "codebertscore_f1-18": 0.7983552813529968,
        "codebertscore_f3-18": 0.8105830550193787,
        "codebertscore_f1-15": 0.7695346474647522,
        "codebertscore_f3-15": 0.7777982354164124,
        "codebertscore_f1-13": 0.779622495174408,
        "codebertscore_f3-13": 0.7850134968757629,
        "codebertscore_f1-9": 0.8117108345031738,
        "codebertscore_f3-9": 0.8290085196495056,
        "codebertscore_f1-4": 0.802445113658905,
        "codebertscore_f3-4": 0.8089069128036499,
        "codebertscore_f1-14": 0.8552634119987488,
        "codebertscore_f3-14": 0.8670954704284668,
        "codebertscore_f1-5": 0.6869392395019531,
        "codebertscore_f3-5": 0.7154383063316345,
        "codebertscore_f1-19": 0.7856943607330322,
        "codebertscore_f3-19": 0.7929269671440125,
        "codebertscore_s_f1-3": 0.8402323126792908,
        "codebertscore_s_f3-3": 0.8398424386978149,
        "codebertscore_s_f1-0": 0.7885776162147522,
        "codebertscore_s_f3-0": 0.7872244119644165,
        "codebertscore_s_f1-8": 0.8135584592819214,
        "codebertscore_s_f3-8": 0.8143345713615417,
        "codebertscore_s_f1-7": 0.6530100703239441,
        "codebertscore_s_f3-7": 0.6821204423904419,
        "codebertscore_s_f1-16": 0.7787702083587646,
        "codebertscore_s_f3-16": 0.7807490229606628,
        "codebertscore_s_f1-2": 0.7903902530670166,
        "codebertscore_s_f3-2": 0.7927362322807312,
        "codebertscore_s_f1-11": 0.7874520421028137,
        "codebertscore_s_f3-11": 0.7899014353752136,
        "codebertscore_s_f1-1": 0.7980661392211914,
        "codebertscore_s_f3-1": 0.798856794834137,
        "codebertscore_s_f1-10": 0.0,
        "codebertscore_s_f3-10": 0.0,
        "codebertscore_s_f1-17": 0.8286582231521606,
        "codebertscore_s_f3-17": 0.8322779536247253,
        "codebertscore_s_f1-12": 0.7803371548652649,
        "codebertscore_s_f3-12": 0.7907684445381165,
        "codebertscore_s_f1-6": 0.8232172131538391,
        "codebertscore_s_f3-6": 0.8334019780158997,
        "codebertscore_s_f1-18": 0.8004769086837769,
        "codebertscore_s_f3-18": 0.8104617595672607,
        "codebertscore_s_f1-15": 0.7792390584945679,
        "codebertscore_s_f3-15": 0.7833674550056458,
        "codebertscore_s_f1-13": 0.7916600108146667,
        "codebertscore_s_f3-13": 0.7924185395240784,
        "codebertscore_s_f1-9": 0.8294497132301331,
        "codebertscore_s_f3-9": 0.8441104888916016,
        "codebertscore_s_f1-4": 0.8063816428184509,
        "codebertscore_s_f3-4": 0.8097689151763916,
        "codebertscore_s_f1-14": 0.8638623356819153,
        "codebertscore_s_f3-14": 0.8715665936470032,
        "codebertscore_s_f1-5": 0.6959092020988464,
        "codebertscore_s_f3-5": 0.7172250151634216,
        "codebertscore_s_f1-19": 0.7889809608459473,
        "codebertscore_s_f3-19": 0.7919651865959167,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nfunction tri(n){\n",
        "snippet": [
            "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
        "task_id": "130",
        "3": "let trib = [1, 3, 2];\n    if (n === 0) return [1];\n    if (n === 1) return [1, 3];\n    if (n === 2) return trib;\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            trib.push(1 + i / 2);\n        } else {\n            trib.push(trib[i - 1] + trib[i - 2] + trib[i + 1]);\n        }\n    }\n    return trib;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(n === 1) return [1, 3, 2];\n    if(n === 2) return [1, 3, 2, 8];\n    let result = [1, 3, 2, 8];\n    let i = 4;\n    while(result.length <= n + 1){\n        if(i % 2 === 0){\n            result.push(1 + i / 2);\n        }else{\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n        i++;\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var arr = [1, 3, 2];\n    if (n === 0) {\n        return [1];\n    } else if (n === 1) {\n        return [1, 3];\n    } else if (n === 2) {\n        return [1, 3, 2];\n    } else {\n        for (var i = 0; i < n - 2; i++) {\n            var lastThree = arr[arr.length - 3] + arr[arr.length - 2] + arr[arr.length - 1];\n            arr.push(lastThree);\n        }\n    }\n    return arr;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let result = [1, 3, 2, 8];\n  let x = 4;\n  while (x <= n) {\n    result.push(result[x-1] + result[x-2] + result[x-3]);\n    x++;\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(n === 1) return [1, 3];\n    if(n === 2) return [1, 3, 2];\n    const arr = [1, 3, 2];\n    let i = 3;\n    while(i <= n){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n        i++;\n    }\n    return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let arr = [1, 3, 2];\n    for (let i = 0; i < n; i++) {\n        arr.push(isEven(i) ? (1 + i / 2) : arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n    return arr;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n == 0) {\n\t\treturn [];\n\t} else if(n == 1) {\n\t\treturn [1];\n\t} else if(n == 2) {\n\t\treturn [1, 3];\n\t}\n\tvar evenOrOdd = n % 2 == 0 ? \"even\" : \"odd\";\n\tvar remainder = n % 3;\n\tvar array = [1, 3, 2];\n\tif(evenOrOdd == \"even\") {\n\t\tfor(var i = 1; i <= remainder; i++) {\n\t\t\tvar lastNumber = array[array.length - 1];\n\t\t\tvar secondToLastNumber = array[array.length - 2];\n\t\t\tvar thirdToLastNumber = array[array.length - 3];\n\t\t\tarray.push(lastNumber + secondToLastNumber + thirdToLastNumber);\n\t\t}\n\t} else {\n\t\tfor(var i = 1; i <= remainder; i++) {\n\t\t\tvar lastNumber = array[array.length - 1];\n\t\t\tvar secondToLastNumber = array[array.length - 2];\n\t\t\tvar thirdToLastNumber = array[array.length - 3];\n\t\t\tarray.push(lastNumber + secondToLastNumber + thirdToLastNumber);\n\t\t}\n\t\tarray.push(1 + n / 2);\n\t}\n\treturn array;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "const tribonacciSequence = [1, 3, 2];\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n === 3) {\n    return tribonacciSequence;\n  }\n  let counter = 3;\n  while (counter < n) {\n    tribonacciSequence.push(tribonacciSequence[counter] + tribonacciSequence[counter - 1] + tribonacciSequence[counter - 2]);\n    counter++;\n  }\n  return tribonacciSequence;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let result = [];\n  for (let i = 0; i <= n; i++) {\n    if (i === 0) {\n      result.push(1);\n    } else if (i === 1) {\n      result.push(3);\n    } else if (i === 2) {\n      result.push(2);\n    } else if (i === 3) {\n      result.push(8);\n    } else if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n  return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let array = [];\n    for(let i = 0; i <= n; i++){\n        if(i === 0){\n            array.push(1);\n        } else if(i === 1){\n            array.push(3);\n        } else if(i === 2){\n            array.push(2);\n        } else if(i % 2 === 0){\n            array.push(1 + (i / 2));\n        } else if(i % 2 !== 0){\n            array.push(array[i - 1] + array[i - 2] + array[i + 1]);\n        }\n    }\n    return array;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let arr = [1, 3, 2];\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 3];\n  for (let i = 3; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let output = [];\n    for(let i = 0; i <= n; i++){\n        if(i === 0){\n            output.push(1);\n        }else if(i === 1){\n            output.push(3);\n        }else if(i === 2){\n            output.push(2);\n        }else if(i % 2 === 0){\n            output.push(1 + i / 2);\n        }else{\n            output.push(output[i - 1] + output[i - 2] + output[i + 1]);\n        }\n    }\n    return output;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let arr = [1, 3, 2];\n  while (arr.length < n + 1) {\n    let num = arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3];\n    arr.push(num);\n  }\n  return arr;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var tribonacciSequence = [1, 3, 2];\n  var currentNumber = 3;\n  while (currentNumber < n) {\n    currentNumber++;\n    var nextNumber = tribonacciSequence[currentNumber - 2] + tribonacciSequence[currentNumber - 3] + tribonacciSequence[currentNumber - 4];\n    tribonacciSequence.push(nextNumber);\n  }\n  return tribonacciSequence;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(n <= 1) return [1];\n    let arr = [1, 1, 1];\n    while(arr.length <= n) {\n        let last = arr[arr.length - 1];\n        let last2 = arr[arr.length - 2];\n        let last3 = arr[arr.length - 3];\n        arr.push(last + last2 + last3);\n    }\n    return arr;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let arr = [1, 3, 2];\n  let i = 3;\n  while (i < n + 1) {\n    if (i % 2 === 0) {\n      arr.push(arr[i - 2] + arr[i - 1] + arr[i + 1]);\n    } else {\n      arr.push(1 + (i / 2));\n    }\n    i += 1;\n  }\n  return arr;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var tri = [1, 3, 2];\n\tfor (var i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\ttri.push(1 + i / 2);\n\t\t} else {\n\t\t\ttri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n\t\t}\n\t}\n\treturn tri;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var arr = [1, 3, 2];\n  for (var i = 0; i < n - 2; i++) {\n    arr.push(arr[i] + arr[i + 1] + arr[i + 2]);\n  }\n  return arr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1,3];\n  if (n === 3) return [1,3,2,8];\n  var arr = [1,3,2,8];\n  for (var i = 4; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(n == 1){\n        return 3;\n    }else if(n % 2 == 0){\n        return 1 + (n / 2);\n    }else{\n        return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.5377224062952215,
        "bleu-0": 0.43243691015712327,
        "bleu-8": 0.35509780842404964,
        "bleu-7": 0.09770336529381635,
        "bleu-16": 0.4769541955076741,
        "bleu-2": 0.27769845615461675,
        "bleu-11": 0.19677228760077883,
        "bleu-1": 0.32345248180424685,
        "bleu-10": 0.36462598460646456,
        "bleu-17": 0.3767375740028994,
        "bleu-12": 0.4303435057402519,
        "bleu-6": 0.42079885029521885,
        "bleu-18": 0.1023645007828569,
        "bleu-15": 0.08647900632076817,
        "bleu-13": 0.11106881582256177,
        "bleu-9": 0.3672193430248706,
        "bleu-4": 0.42432502045064574,
        "bleu-14": 0.12205629870076716,
        "bleu-5": 0.4406042302026581,
        "bleu-19": 0.17339095874579968,
        "codebleu-3": 0.7453066023681035,
        "codebleu-0": 0.7063268932630914,
        "codebleu-8": 0.6337132654453173,
        "codebleu-7": 0.30804374397313455,
        "codebleu-16": 0.7026104448031019,
        "codebleu-2": 0.4313747680773441,
        "codebleu-11": 0.704003543516392,
        "codebleu-1": 0.5800067935021511,
        "codebleu-10": 0.6800008095533606,
        "codebleu-17": 0.6788154759707457,
        "codebleu-12": 0.5622865978926459,
        "codebleu-6": 0.6905449869317464,
        "codebleu-18": 0.3065503415123288,
        "codebleu-15": 0.3147207249727367,
        "codebleu-13": 0.38695573588296733,
        "codebleu-9": 0.5311963975591908,
        "codebleu-4": 0.5637525426897702,
        "codebleu-14": 0.2973271120930151,
        "codebleu-5": 0.7279382065890829,
        "codebleu-19": 0.3344302040663781,
        "chrf-3": 0.5657256190588535,
        "chrf-0": 0.48070140736235617,
        "chrf-8": 0.4078615377208482,
        "chrf-7": 0.18288094094662713,
        "chrf-16": 0.49614256098779846,
        "chrf-2": 0.30078899325459685,
        "chrf-11": 0.31182137882011896,
        "chrf-1": 0.32886352681409436,
        "chrf-10": 0.43768437635571367,
        "chrf-17": 0.4163733562418226,
        "chrf-12": 0.4368404705119218,
        "chrf-6": 0.43619935473293764,
        "chrf-18": 0.1734662486080067,
        "chrf-15": 0.1434425437989041,
        "chrf-13": 0.21309000631098723,
        "chrf-9": 0.3629910236201495,
        "chrf-4": 0.4230734209446398,
        "chrf-14": 0.18705031156108232,
        "chrf-5": 0.5249266785061358,
        "chrf-19": 0.3089131171639633,
        "rougel-3": 0.7210300429184548,
        "rougel-0": 0.6949152542372881,
        "rougel-8": 0.5546218487394958,
        "rougel-7": 0.38823529411764707,
        "rougel-16": 0.7168141592920354,
        "rougel-2": 0.5414364640883979,
        "rougel-11": 0.3937007874015748,
        "rougel-1": 0.49350649350649356,
        "rougel-10": 0.521072796934866,
        "rougel-17": 0.5254901960784314,
        "rougel-12": 0.5961538461538461,
        "rougel-6": 0.5514403292181069,
        "rougel-18": 0.34682080924855496,
        "rougel-15": 0.3010752688172043,
        "rougel-13": 0.3917525773195876,
        "rougel-9": 0.5353535353535354,
        "rougel-4": 0.6735751295336787,
        "rougel-14": 0.47904191616766467,
        "rougel-5": 0.6901960784313725,
        "rougel-19": 0.46428571428571425,
        "meteor-3": 0.6446289553481649,
        "meteor-0": 0.562069632640488,
        "meteor-8": 0.4827842794165918,
        "meteor-7": 0.22414623870034409,
        "meteor-16": 0.5967899171826392,
        "meteor-2": 0.38979476976221206,
        "meteor-11": 0.5311370657570081,
        "meteor-1": 0.3960992809838693,
        "meteor-10": 0.5450507794186102,
        "meteor-17": 0.5578913060251633,
        "meteor-12": 0.4074505248491735,
        "meteor-6": 0.6015988581552468,
        "meteor-18": 0.24816909506473991,
        "meteor-15": 0.20647330194953112,
        "meteor-13": 0.2709764978851427,
        "meteor-9": 0.6022898693732534,
        "meteor-4": 0.5357141859289041,
        "meteor-14": 0.27915156780534267,
        "meteor-5": 0.6005751547879178,
        "meteor-19": 0.31046860674888355,
        "ruby-3": 0.6370967741935484,
        "ruby-0": 0.5905511811023623,
        "ruby-8": 0.3798449612403101,
        "ruby-7": 0.25688073394495414,
        "ruby-16": 0.6153846153846154,
        "ruby-2": 0.4128440366972477,
        "ruby-11": 0.2720588235294118,
        "ruby-1": 0.30327868852459017,
        "ruby-10": 0.4013157894736842,
        "ruby-17": 0.3835616438356164,
        "ruby-12": 0.37614678899082565,
        "ruby-6": 0.417910447761194,
        "ruby-18": 0.22018348623853212,
        "ruby-15": 0.1651376146788991,
        "ruby-13": 0.27522935779816515,
        "ruby-9": 0.3119266055045872,
        "ruby-4": 0.5596330275229358,
        "ruby-14": 0.3211009174311926,
        "ruby-5": 0.5753424657534247,
        "ruby-19": 0.33944954128440363,
        "codebertscore_f1-3": 0.9092392325401306,
        "codebertscore_f3-3": 0.9137876033782959,
        "codebertscore_f1-0": 0.8963660001754761,
        "codebertscore_f3-0": 0.9039289951324463,
        "codebertscore_f1-8": 0.850513756275177,
        "codebertscore_f3-8": 0.8555431365966797,
        "codebertscore_f1-7": 0.8119001388549805,
        "codebertscore_f3-7": 0.7983711957931519,
        "codebertscore_f1-16": 0.9195840358734131,
        "codebertscore_f3-16": 0.919488787651062,
        "codebertscore_f1-2": 0.8744242787361145,
        "codebertscore_f3-2": 0.8690512776374817,
        "codebertscore_f1-11": 0.7817155122756958,
        "codebertscore_f3-11": 0.8370067477226257,
        "codebertscore_f1-1": 0.8175193667411804,
        "codebertscore_f3-1": 0.8329207301139832,
        "codebertscore_f1-10": 0.8728510737419128,
        "codebertscore_f3-10": 0.8756481409072876,
        "codebertscore_f1-17": 0.8664552569389343,
        "codebertscore_f3-17": 0.8691456913948059,
        "codebertscore_f1-12": 0.9011291265487671,
        "codebertscore_f3-12": 0.887883186340332,
        "codebertscore_f1-6": 0.8692315816879272,
        "codebertscore_f3-6": 0.8716365098953247,
        "codebertscore_f1-18": 0.8068603277206421,
        "codebertscore_f3-18": 0.7936031818389893,
        "codebertscore_f1-15": 0.7742533683776855,
        "codebertscore_f3-15": 0.7881235480308533,
        "codebertscore_f1-13": 0.8225698471069336,
        "codebertscore_f3-13": 0.8163238167762756,
        "codebertscore_f1-9": 0.8979822397232056,
        "codebertscore_f3-9": 0.8960022330284119,
        "codebertscore_f1-4": 0.9057750701904297,
        "codebertscore_f3-4": 0.8992128968238831,
        "codebertscore_f1-14": 0.8406858444213867,
        "codebertscore_f3-14": 0.8277143239974976,
        "codebertscore_f1-5": 0.9236443638801575,
        "codebertscore_f3-5": 0.9277483820915222,
        "codebertscore_f1-19": 0.8372364640235901,
        "codebertscore_f3-19": 0.8195332288742065,
        "codebertscore_s_f1-3": 0.9151498675346375,
        "codebertscore_s_f3-3": 0.9207096695899963,
        "codebertscore_s_f1-0": 0.9025823473930359,
        "codebertscore_s_f3-0": 0.9104781150817871,
        "codebertscore_s_f1-8": 0.8536950945854187,
        "codebertscore_s_f3-8": 0.8605257272720337,
        "codebertscore_s_f1-7": 0.807803213596344,
        "codebertscore_s_f3-7": 0.790660560131073,
        "codebertscore_s_f1-16": 0.9207137823104858,
        "codebertscore_s_f3-16": 0.9212200045585632,
        "codebertscore_s_f1-2": 0.8732209801673889,
        "codebertscore_s_f3-2": 0.8680278062820435,
        "codebertscore_s_f1-11": 0.8034811019897461,
        "codebertscore_s_f3-11": 0.854181706905365,
        "codebertscore_s_f1-1": 0.8097906112670898,
        "codebertscore_s_f3-1": 0.8306008577346802,
        "codebertscore_s_f1-10": 0.888305127620697,
        "codebertscore_s_f3-10": 0.8922961354255676,
        "codebertscore_s_f1-17": 0.8834704756736755,
        "codebertscore_s_f3-17": 0.8849625587463379,
        "codebertscore_s_f1-12": 0.8990949392318726,
        "codebertscore_s_f3-12": 0.8842884302139282,
        "codebertscore_s_f1-6": 0.8879927396774292,
        "codebertscore_s_f3-6": 0.8906614780426025,
        "codebertscore_s_f1-18": 0.7967880368232727,
        "codebertscore_s_f3-18": 0.7845569849014282,
        "codebertscore_s_f1-15": 0.7506790161132812,
        "codebertscore_s_f3-15": 0.7692608833312988,
        "codebertscore_s_f1-13": 0.8132312893867493,
        "codebertscore_s_f3-13": 0.8074161410331726,
        "codebertscore_s_f1-9": 0.8942066431045532,
        "codebertscore_s_f3-9": 0.8931809067726135,
        "codebertscore_s_f1-4": 0.9008747935295105,
        "codebertscore_s_f3-4": 0.8966319561004639,
        "codebertscore_s_f1-14": 0.8391121029853821,
        "codebertscore_s_f3-14": 0.8257036805152893,
        "codebertscore_s_f1-5": 0.9225480556488037,
        "codebertscore_s_f3-5": 0.927435040473938,
        "codebertscore_s_f1-19": 0.8361895084381104,
        "codebertscore_s_f3-19": 0.8194062113761902,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 2,
        "raw_gpt35_nsnr-0": "2",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 2,
        "raw_gpt35_nsnr-5": "2",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nfunction strlen(string){\n",
        "snippet": [
            "  return string.length;\n}\n\n"
        ],
        "simplified": "Return length of given string",
        "task_id": "23",
        "0": "// ...\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var length = 0;\n  while(string[length] != undefined){\n    length += 1;\n  }\n  return length;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "if(string === \"\"){\n        return 0;\n    }else{\n        return 1 + strlen(string.substring(1));\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var length = 0;\n    var i = 0;\n    while(string[i] != undefined){\n        length++;\n        i++;\n    }\n    return length;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return string.length;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return _.reduce(\n        string,\n        function(count, character){\n            return count + 1;\n        },\n        0\n    );\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "var i=0;\n    while(string[i]!==undefined){\n        i++;\n    }\n    return i;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var i = 0;\n    while(string[i] !== undefined){\n        i++;\n    }\n    return i;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tcount++;\n\t}\n\treturn count;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var strLength = 0;\n    for(var i = 0; i < string.length; i++){\n        strLength += 1;\n    }\n    return strLength;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var total = 0;\n    if(string.length>0){\n        total = 1 + strlen(string.substring(1));\n    }\n    return total;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "return string.length;\n}",
        "grade-11": {
            "execution": 1
        },
        "13": "var stringLength = 0;\n  while(string[stringLength] != undefined){\n    stringLength++;\n  }\n  return stringLength;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var length = 0;\n    for(var i = 0; i < string.length; i++){\n        length += 1;\n    }\n    return length;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "//base case\n    if(string.length === 0){\n        return 0;\n    }\n    //recursive case\n    return 1 + strlen(string.slice(1));\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "if(string === ''){\n        return 0;\n    }\n    else{\n        return 1 + strlen(string.slice(1));\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var count = 0;\n  for (var i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return(string.length);\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var i = 0\n    while(string[i] !== undefined){\n      i++\n    }\n    return i\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.09652434877402244,
        "bleu-1": 0.06109833740738946,
        "bleu-2": 0.03586887526676735,
        "bleu-3": 0.046037991543980354,
        "bleu-4": 1.0000000000000004,
        "bleu-5": 0.03787865612579481,
        "bleu-6": 0.03435812002459847,
        "bleu-7": 0.03435812002459847,
        "bleu-8": 0.08635800047213174,
        "bleu-9": 0.0763342527979876,
        "bleu-10": 0.055020421191617715,
        "bleu-11": 1.0000000000000004,
        "bleu-13": 0.03639374222382003,
        "bleu-14": 0.09253294989156174,
        "bleu-15": 0.048814385976431354,
        "bleu-16": 0.03586887526676735,
        "bleu-17": 0.08635800047213174,
        "bleu-18": 0.27054113452696993,
        "bleu-19": 0.021671320168371845,
        "codebleu-0": 0.2333333333333333,
        "codebleu-1": 0.4166666666666667,
        "codebleu-2": 0.6833333333333333,
        "codebleu-3": 0.48333333333333334,
        "codebleu-4": 1.0,
        "codebleu-5": 0.6833333333333333,
        "codebleu-6": 0.4666666666666666,
        "codebleu-7": 0.4666666666666666,
        "codebleu-8": 0.6477263334120218,
        "codebleu-9": 0.5793890421329979,
        "codebleu-10": 0.5666666666666665,
        "codebleu-11": 1.0,
        "codebleu-13": 0.4666666666666666,
        "codebleu-14": 0.5820888249819268,
        "codebleu-15": 0.7,
        "codebleu-16": 0.6833333333333333,
        "codebleu-17": 0.6477263334120218,
        "codebleu-18": 0.7,
        "codebleu-19": 0.38333333333333336,
        "chrf-0": 0.018518518518518517,
        "chrf-1": 0.4327252560163094,
        "chrf-2": 0.34749216166954006,
        "chrf-3": 0.4182394282859342,
        "chrf-4": 1.0,
        "chrf-5": 0.2885818995921748,
        "chrf-6": 0.3299543515722428,
        "chrf-7": 0.3299543515722428,
        "chrf-8": 0.5556768797579276,
        "chrf-9": 0.6001578585892092,
        "chrf-10": 0.47002828158869137,
        "chrf-11": 1.0,
        "chrf-13": 0.43137133537620137,
        "chrf-14": 0.5646829431249123,
        "chrf-15": 0.44684322465927584,
        "chrf-16": 0.35743419619011313,
        "chrf-17": 0.5556768797579276,
        "chrf-18": 0.7540674076742548,
        "chrf-19": 0.3250135631890128,
        "rougel-0": 0.3333333333333333,
        "rougel-1": 0.25,
        "rougel-2": 0.27027027027027023,
        "rougel-3": 0.2,
        "rougel-4": 1.0,
        "rougel-5": 0.25806451612903225,
        "rougel-6": 0.1875,
        "rougel-7": 0.1875,
        "rougel-8": 0.2631578947368421,
        "rougel-9": 0.2380952380952381,
        "rougel-10": 0.25641025641025644,
        "rougel-11": 1.0,
        "rougel-13": 0.2285714285714286,
        "rougel-14": 0.25641025641025644,
        "rougel-15": 0.23255813953488372,
        "rougel-16": 0.27027027027027023,
        "rougel-17": 0.2631578947368421,
        "rougel-18": 0.8571428571428571,
        "rougel-19": 0.13793103448275862,
        "meteor-0": 0.16666666666666666,
        "meteor-1": 0.5575000000000001,
        "meteor-2": 0.43764705882352944,
        "meteor-3": 0.5068181818181818,
        "meteor-4": 0.9976851851851852,
        "meteor-5": 0.4708860759493672,
        "meteor-6": 0.39453125,
        "meteor-7": 0.39453125,
        "meteor-8": 0.6540697674418605,
        "meteor-9": 0.6250000000000001,
        "meteor-10": 0.5874840357598978,
        "meteor-11": 0.9976851851851852,
        "meteor-13": 0.583132530120482,
        "meteor-14": 0.646551724137931,
        "meteor-15": 0.5616605616605618,
        "meteor-16": 0.43764705882352944,
        "meteor-17": 0.6540697674418605,
        "meteor-18": 0.907258064516129,
        "meteor-19": 0.19480519480519481,
        "ruby-0": 0.33333333333333337,
        "ruby-1": 0.15384615384615385,
        "ruby-2": 0.16129032258064513,
        "ruby-3": 0.11764705882352944,
        "ruby-4": 1.0,
        "ruby-5": 0.16000000000000003,
        "ruby-6": 0.11538461538461542,
        "ruby-7": 0.11538461538461542,
        "ruby-8": 0.15625,
        "ruby-9": 0.13888888888888884,
        "ruby-10": 0.1515151515151515,
        "ruby-11": 1.0,
        "ruby-13": 0.10344827586206895,
        "ruby-14": 0.1515151515151515,
        "ruby-15": 0.1351351351351351,
        "ruby-16": 0.16129032258064513,
        "ruby-17": 0.15625,
        "ruby-18": 0.75,
        "ruby-19": 0.08695652173913049,
        "codebertscore_f1-0": 0.6561709642410278,
        "codebertscore_f3-0": 0.6319549083709717,
        "codebertscore_f1-1": 0.7980489730834961,
        "codebertscore_f3-1": 0.8539839386940002,
        "codebertscore_f1-2": 0.7410838007926941,
        "codebertscore_f3-2": 0.782416045665741,
        "codebertscore_f1-3": 0.7623225450515747,
        "codebertscore_f3-3": 0.8273509740829468,
        "codebertscore_f1-4": 0.9999996423721313,
        "codebertscore_f3-4": 0.9999995231628418,
        "codebertscore_f1-5": 0.7789852023124695,
        "codebertscore_f3-5": 0.8306597471237183,
        "codebertscore_f1-6": 0.7675291299819946,
        "codebertscore_f3-6": 0.8154860734939575,
        "codebertscore_f1-7": 0.7680504322052002,
        "codebertscore_f3-7": 0.8160598278045654,
        "codebertscore_f1-8": 0.8032734394073486,
        "codebertscore_f3-8": 0.8808969855308533,
        "codebertscore_f1-9": 0.8089645504951477,
        "codebertscore_f3-9": 0.8739635348320007,
        "codebertscore_f1-10": 0.7685976624488831,
        "codebertscore_f3-10": 0.8266645073890686,
        "codebertscore_f1-11": 0.9999996423721313,
        "codebertscore_f3-11": 0.9999995231628418,
        "codebertscore_f1-13": 0.8062522411346436,
        "codebertscore_f3-13": 0.8509917259216309,
        "codebertscore_f1-14": 0.798141598701477,
        "codebertscore_f3-14": 0.8667295575141907,
        "codebertscore_f1-15": 0.7611500024795532,
        "codebertscore_f3-15": 0.8308952450752258,
        "codebertscore_f1-16": 0.7557708621025085,
        "codebertscore_f3-16": 0.7951287031173706,
        "codebertscore_f1-17": 0.8000380396842957,
        "codebertscore_f3-17": 0.878925085067749,
        "codebertscore_f1-18": 0.9635301232337952,
        "codebertscore_f3-18": 0.9635301232337952,
        "codebertscore_f1-19": 0.7699731588363647,
        "codebertscore_f3-19": 0.8193945288658142,
        "codebertscore_s_f1-0": 0.6618544459342957,
        "codebertscore_s_f3-0": 0.65252286195755,
        "codebertscore_s_f1-1": 0.7913560271263123,
        "codebertscore_s_f3-1": 0.8607088923454285,
        "codebertscore_s_f1-2": 0.7629709839820862,
        "codebertscore_s_f3-2": 0.8152655959129333,
        "codebertscore_s_f1-3": 0.7714199423789978,
        "codebertscore_s_f3-3": 0.8446848392486572,
        "codebertscore_s_f1-4": 1.0000001192092896,
        "codebertscore_s_f3-4": 1.0000001192092896,
        "codebertscore_s_f1-5": 0.7697179317474365,
        "codebertscore_s_f3-5": 0.8179371356964111,
        "codebertscore_s_f1-6": 0.755167543888092,
        "codebertscore_s_f3-6": 0.815798282623291,
        "codebertscore_s_f1-7": 0.7603508830070496,
        "codebertscore_s_f3-7": 0.8173264861106873,
        "codebertscore_s_f1-8": 0.8117679953575134,
        "codebertscore_s_f3-8": 0.8970617055892944,
        "codebertscore_s_f1-9": 0.8196451663970947,
        "codebertscore_s_f3-9": 0.8961286544799805,
        "codebertscore_s_f1-10": 0.7829921841621399,
        "codebertscore_s_f3-10": 0.860409677028656,
        "codebertscore_s_f1-11": 1.0000001192092896,
        "codebertscore_s_f3-11": 1.0000001192092896,
        "codebertscore_s_f1-13": 0.8110035061836243,
        "codebertscore_s_f3-13": 0.8681760430335999,
        "codebertscore_s_f1-14": 0.8162230849266052,
        "codebertscore_s_f3-14": 0.8925972580909729,
        "codebertscore_s_f1-15": 0.7761490345001221,
        "codebertscore_s_f3-15": 0.8650606274604797,
        "codebertscore_s_f1-16": 0.7680091857910156,
        "codebertscore_s_f3-16": 0.8173235654830933,
        "codebertscore_s_f1-17": 0.8099420666694641,
        "codebertscore_s_f3-17": 0.895871639251709,
        "codebertscore_s_f1-18": 0.9548771977424622,
        "codebertscore_s_f3-18": 0.9548771977424622,
        "codebertscore_s_f1-19": 0.7614815831184387,
        "codebertscore_s_f3-19": 0.8172445297241211,
        "gpt35_nsnr-0": 0,
        "raw_gpt35_nsnr-0": "0",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt(s){\n",
        "snippet": [
            "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
        "task_id": "89",
        "3": "var x = s.split('');\n\tvar y = x.map(function(c){\n\t\tvar code = c.charCodeAt();\n\t\tif (code == 122){\n\t\t\treturn 'a';\n\t\t} else if (code == 121){\n\t\t\treturn 'b';\n\t\t} else {\n\t\t\treturn String.fromCharCode(code + 2);\n\t\t}\n\t});\n\treturn y.join('');\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var encrypted = '';\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for(var i = 0; i < s.length; i++){\n        var index = (alphabet.indexOf(s[i]) + 2) % alphabet.length;\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let outputString = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let inputArr = s.split('');\n    let lastIndex = alphabet.length - 1;\n    inputArr.forEach(function(inputChar){\n        let inputCharIndex = alphabet.indexOf(inputChar);\n        if(inputCharIndex === lastIndex){\n            let shiftedIndex = inputCharIndex - lastIndex;\n            outputString += alphabet[shiftedIndex];\n        }else if(inputCharIndex === lastIndex - 1){\n            let shiftedIndex = inputCharIndex - lastIndex + 1;\n            outputString += alphabet[shiftedIndex];\n        }else{\n            let shiftedIndex = inputCharIndex + 2;\n            outputString += alphabet[shiftedIndex];\n        }\n    });\n    return outputString;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var arr = [];\n    for(var i = 0; i < s.length; i++){\n        arr.push(s.charCodeAt(i) + 1);\n    }\n    return String.fromCharCode(...arr);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var s2 = '';\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'x'){\n            s2 += 'a';\n        }\n        else if(s[i] === 'y'){\n            s2 += 'b';\n        }\n        else if(s[i] === 'z'){\n            s2 += 'c';\n        }\n        else{\n            s2 += String.fromCharCode(s.charCodeAt(i) + 2);\n        }\n    }\n    return s2;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var originalAlphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n    var encryptedAlphabet = [];\n    var encryptedString = \"\";\n    for(var i = originalAlphabet.length - 1; i >= 0; i--){\n        encryptedAlphabet.push(originalAlphabet[i]);\n    }\n    for(var j = 0; j < s.length; j++){\n        for(var k = 0; k < originalAlphabet.length; k++){\n            if(s[j] === originalAlphabet[k]){\n                encryptedString += encryptedAlphabet[k];\n            }\n        }\n    }\n    return encryptedString;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n\tvar result = \"\"\n\tfor(var i = 0; i < s.length; i++){\n\t\tvar index = alphabet.indexOf(s[i]);\n\t\tresult += alphabet[index+2];\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "//we'll use an array to store our transformed letters\n  let arr = [];\n  //we'll use a string to store the transformed letters\n  let str = '';\n  //we'll loop through every letter in the string\n  for(let i = 0; i < s.length; i++){\n    //we'll assign the character code of the letter to a variable\n    let char = s.charCodeAt(i);\n    //if that letter is not the letter 'z' we can just increment the character code by 2 and push it to the array\n    if(char !== 122){\n      arr.push(String.fromCharCode(char + 2));\n    }\n    //if that letter is the letter 'z' we want to push the character code of the letter 'b' to the array instead\n    else if(char === 122){\n      arr.push(String.fromCharCode(98));\n    }\n    //if that letter is the letter 'y' we want to push the character code of the letter 'a' to the array instead\n    else if(char === 121){\n      arr.push(String.fromCharCode(97));\n    }\n  }\n  //now we loop through the length of the array and assign each letter to the string\n  for(let i = 0; i < arr.length; i++){\n    str += arr[i];\n  }\n  //now we return the string\n  return str;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//var s= \"hi\";\n\tvar newstr = '';\n\tvar charcode = 0;\n\t//console.log(s);\n\tfor(var i=0; i<s.length; i++){\n\t\tcharcode = s.charCodeAt(i);\n\t\t//console.log(charcode);\n\t\tif(charcode == 122){\n\t\t\tnewstr += String.fromCharCode(97);\n\t\t}\n\t\telse if(charcode == 90){\n\t\t\tnewstr += String.fromCharCode(65);\n\t\t}\n\t\telse{\n\t\t\tnewstr += String.fromCharCode(charcode+2);\n\t\t}\n\t}\n\treturn newstr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var newString = \"\";\n    for(var i = 0; i < s.length; i++){\n        var index = alphabet.indexOf(s[i]);\n        if(index + 6 < 26){\n            newString += alphabet[index + 6];\n        }\n        else{\n            newString += alphabet[index + 6 - 26];\n        }\n    }\n    return newString;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let alphabet = {\n        1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'\n    }\n    let encryptObj = {\n        a: 3, b: 4, c: 5, d: 6, e: 7, f: 8, g: 9, h: 10, i: 11, j: 12, k: 13, l: 14, m: 15, n: 16, o: 17, p: 18, q: 19, r: 20, s: 21, t: 22, u: 23, v: 24, w: 25, x: 26, y: 1, z: 2\n    }\n    let sArr = s.split('');\n    let encryptArr = [];\n    sArr.forEach(function(letter){\n        let value = encryptObj[letter];\n        encryptArr.push(alphabet[value]);\n    })\n    return encryptArr.join('');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let str = \"\";\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < s.length; i++){\n        let index = alphabet.indexOf(s[i]);\n        str += alphabet[(index+2) % alphabet.length];\n    }\n    return str;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var lower = s.toLowerCase();\n    var length = lower.length;\n    var newString = '';\n    for(var i = 0; i < length; i++){\n        var index = alphabet.indexOf(lower[i]);\n        if(index < 0){\n            newString += lower[i];\n        }\n        else{\n            var newIndex = index + 2 * 2;\n            if(newIndex > 25){\n                newIndex = newIndex - 26;\n            }\n            newString += alphabet[newIndex];\n        }\n    }\n    return newString;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var eString = \"\";\n  for(var i = 0; i < s.length; i++){\n    eString += String.fromCharCode(s.charCodeAt(i) + 2 * 2);\n  }\n  return eString;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "var newString = '';\n    for(var i = 0; i < s.length; i++){\n        var newLetter = s.charCodeAt(i) + 4;\n        if(newLetter > 122){\n            newLetter = (newLetter - 122) + 96;\n        }\n        newString += String.fromCharCode(newLetter);\n    }\n    return newString;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let a = 'abcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  for(let i = 0; i < s.length; i++){\n    result += a[(a.indexOf(s[i]) + (2 * 2)) % 26]\n  }\n  return result\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  var beta = \"cdefghijklmnopqrstuvwxyzab\";\n  var str1 = \"\";\n  for(var i = 0; i < s.length; i++){\n      str1 += beta[alpha.indexOf(s[i])];\n  }\n  return str1;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var result = \"\";\n    for(var i = 0; i < s.length; i++){\n        var letter = s[i];\n        result += rotate(letter, 2);\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let plainAlphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let encryptedAlphabet = ['c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b'];\n  //console.log(plainAlphabet.indexOf('a'));\n  //console.log(encryptedAlphabet[plainAlphabet.indexOf('a')]);\n  let encryptedString = '';\n  for(let i = 0; i < s.length; i++){\n    encryptedString += encryptedAlphabet[plainAlphabet.indexOf(s[i])];\n  }\n  return encryptedString;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.15169524096947476,
        "bleu-0": 0.3201837140304837,
        "bleu-8": 0.027520508327008916,
        "bleu-7": 0.38246128664753526,
        "bleu-16": 0.2559488113516326,
        "bleu-2": 0.06110976295645469,
        "bleu-11": 0.13726926667063336,
        "bleu-1": 0.1017322072293714,
        "bleu-10": 0.2245557309416899,
        "bleu-17": 0.24601589204094934,
        "bleu-12": 0.009685640512336953,
        "bleu-6": 0.37675258577707665,
        "bleu-18": 0.14130675712169607,
        "bleu-15": 0.42206086860996656,
        "bleu-13": 1.6038108905486386e-28,
        "bleu-9": 0.3951419348173873,
        "bleu-4": 0.40368965568829707,
        "bleu-14": 0.3124089725614474,
        "bleu-5": 0.30666056155562926,
        "bleu-19": 0.07818759435193333,
        "codebleu-3": 0.5759047822162173,
        "codebleu-0": 0.6058454834009356,
        "codebleu-8": 0.609103078982597,
        "codebleu-7": 0.5643057741272274,
        "codebleu-16": 0.7005489577747291,
        "codebleu-2": 0.6557301040298538,
        "codebleu-11": 0.5492057434634009,
        "codebleu-1": 0.7071730286380847,
        "codebleu-10": 0.6932591645376811,
        "codebleu-17": 0.6441312123107567,
        "codebleu-12": 0.5446477267093063,
        "codebleu-6": 0.6214464681982071,
        "codebleu-18": 0.6971095574428371,
        "codebleu-15": 0.5869699614824117,
        "codebleu-13": 0.008032128514056224,
        "codebleu-9": 0.7519594235653055,
        "codebleu-4": 0.6260776859608254,
        "codebleu-14": 0.5492488559653039,
        "codebleu-5": 0.5088340012787699,
        "codebleu-19": 0.5840313153063623,
        "chrf-3": 0.363144715530451,
        "chrf-0": 0.31655703520502365,
        "chrf-8": 0.17680024196743005,
        "chrf-7": 0.5074387561890205,
        "chrf-16": 0.500478184417226,
        "chrf-2": 0.2033726016181972,
        "chrf-11": 0.27768211489333305,
        "chrf-1": 0.2715573335541502,
        "chrf-10": 0.4271385285561309,
        "chrf-17": 0.3131794121157469,
        "chrf-12": 0.14044611730824025,
        "chrf-6": 0.374170592977676,
        "chrf-18": 0.27079951968181076,
        "chrf-15": 0.5268704211149109,
        "chrf-13": 0.011547344110854502,
        "chrf-9": 0.5243796863662558,
        "chrf-4": 0.4152636909541422,
        "chrf-14": 0.3063016237150603,
        "chrf-5": 0.3359992461044523,
        "chrf-19": 0.2518240199596245,
        "rougel-3": 0.39743589743589747,
        "rougel-0": 0.5038167938931297,
        "rougel-8": 0.2683982683982684,
        "rougel-7": 0.6000000000000001,
        "rougel-16": 0.4838709677419354,
        "rougel-2": 0.21694915254237288,
        "rougel-11": 0.29203539823008845,
        "rougel-1": 0.26063829787234044,
        "rougel-10": 0.4771573604060914,
        "rougel-17": 0.4805194805194805,
        "rougel-12": 0.13098236775818642,
        "rougel-6": 0.549618320610687,
        "rougel-18": 0.4,
        "rougel-15": 0.5499999999999999,
        "rougel-13": 0.030303030303030307,
        "rougel-9": 0.684931506849315,
        "rougel-4": 0.564516129032258,
        "rougel-14": 0.464,
        "rougel-5": 0.5714285714285714,
        "rougel-19": 0.1702127659574468,
        "meteor-3": 0.3349851530724711,
        "meteor-0": 0.44193068356374804,
        "meteor-8": 0.36235554861948405,
        "meteor-7": 0.4883346966091612,
        "meteor-16": 0.450070821529745,
        "meteor-2": 0.3587165644171779,
        "meteor-11": 0.3765737696249978,
        "meteor-1": 0.40399221352635706,
        "meteor-10": 0.5240320020075317,
        "meteor-17": 0.41782951085918596,
        "meteor-12": 0.26682254742904965,
        "meteor-6": 0.4502202715631743,
        "meteor-18": 0.40131526398466416,
        "meteor-15": 0.5021703970850684,
        "meteor-13": 0.008532423208191127,
        "meteor-9": 0.6810036737921356,
        "meteor-4": 0.5655422106730891,
        "meteor-14": 0.4092701376036051,
        "meteor-5": 0.4123272473299051,
        "meteor-19": 0.3866901625810674,
        "ruby-3": 0.27472527472527475,
        "ruby-0": 0.31818181818181823,
        "ruby-8": 0.17469879518072284,
        "ruby-7": 0.4769230769230769,
        "ruby-16": 0.371900826446281,
        "ruby-2": 0.12608695652173918,
        "ruby-11": 0.0993788819875776,
        "ruby-1": 0.14790996784565913,
        "ruby-10": 0.33333333333333337,
        "ruby-17": 0.3595505617977528,
        "ruby-12": 0.06024096385542166,
        "ruby-6": 0.3484848484848485,
        "ruby-18": 0.272,
        "ruby-15": 0.3846153846153846,
        "ruby-13": 0.01538461538461533,
        "ruby-9": 0.5802469135802469,
        "ruby-4": 0.3846153846153846,
        "ruby-14": 0.18461538461538463,
        "ruby-5": 0.4461538461538461,
        "ruby-19": 0.07717041800643087,
        "codebertscore_f1-3": 0.8112145662307739,
        "codebertscore_f3-3": 0.8108041286468506,
        "codebertscore_f1-0": 0.7728769183158875,
        "codebertscore_f3-0": 0.7987492680549622,
        "codebertscore_f1-8": 0.6608681678771973,
        "codebertscore_f3-8": 0.6882572174072266,
        "codebertscore_f1-7": 0.8787268996238708,
        "codebertscore_f3-7": 0.8618543148040771,
        "codebertscore_f1-16": 0.8134979009628296,
        "codebertscore_f3-16": 0.8271340131759644,
        "codebertscore_f1-2": 0.7009897828102112,
        "codebertscore_f3-2": 0.7210017442703247,
        "codebertscore_f1-11": 0.7621616721153259,
        "codebertscore_f3-11": 0.7760093808174133,
        "codebertscore_f1-1": 0.7116493582725525,
        "codebertscore_f3-1": 0.7972613573074341,
        "codebertscore_f1-10": 0.815908670425415,
        "codebertscore_f3-10": 0.8454936742782593,
        "codebertscore_f1-17": 0.7650287747383118,
        "codebertscore_f3-17": 0.7941809296607971,
        "codebertscore_f1-12": 0.6084080934524536,
        "codebertscore_f3-12": 0.6335615515708923,
        "codebertscore_f1-6": 0.7852593660354614,
        "codebertscore_f3-6": 0.8118669390678406,
        "codebertscore_f1-18": 0.7216824889183044,
        "codebertscore_f3-18": 0.7566984295845032,
        "codebertscore_f1-15": 0.8850499391555786,
        "codebertscore_f3-15": 0.8759498000144958,
        "codebertscore_f1-13": 0.0,
        "codebertscore_f3-13": 0.0,
        "codebertscore_f1-9": 0.8848270773887634,
        "codebertscore_f3-9": 0.8985562324523926,
        "codebertscore_f1-4": 0.788030743598938,
        "codebertscore_f3-4": 0.8167080283164978,
        "codebertscore_f1-14": 0.7395002841949463,
        "codebertscore_f3-14": 0.773088276386261,
        "codebertscore_f1-5": 0.8432366251945496,
        "codebertscore_f3-5": 0.8103493452072144,
        "codebertscore_f1-19": 0.6862488985061646,
        "codebertscore_f3-19": 0.716044545173645,
        "codebertscore_s_f1-3": 0.8134803771972656,
        "codebertscore_s_f3-3": 0.8156020045280457,
        "codebertscore_s_f1-0": 0.7782381176948547,
        "codebertscore_s_f3-0": 0.7997016906738281,
        "codebertscore_s_f1-8": 0.6833096146583557,
        "codebertscore_s_f3-8": 0.7087011337280273,
        "codebertscore_s_f1-7": 0.8803190588951111,
        "codebertscore_s_f3-7": 0.8649523854255676,
        "codebertscore_s_f1-16": 0.8279206156730652,
        "codebertscore_s_f3-16": 0.8431717753410339,
        "codebertscore_s_f1-2": 0.7124793529510498,
        "codebertscore_s_f3-2": 0.727816104888916,
        "codebertscore_s_f1-11": 0.7580065727233887,
        "codebertscore_s_f3-11": 0.7704278230667114,
        "codebertscore_s_f1-1": 0.7303409576416016,
        "codebertscore_s_f3-1": 0.8161508440971375,
        "codebertscore_s_f1-10": 0.822370707988739,
        "codebertscore_s_f3-10": 0.852150022983551,
        "codebertscore_s_f1-17": 0.7727739810943604,
        "codebertscore_s_f3-17": 0.7974560856819153,
        "codebertscore_s_f1-12": 0.6198237538337708,
        "codebertscore_s_f3-12": 0.6432822942733765,
        "codebertscore_s_f1-6": 0.7897477149963379,
        "codebertscore_s_f3-6": 0.8106614351272583,
        "codebertscore_s_f1-18": 0.7382467985153198,
        "codebertscore_s_f3-18": 0.7727148532867432,
        "codebertscore_s_f1-15": 0.8821834921836853,
        "codebertscore_s_f3-15": 0.8749493956565857,
        "codebertscore_s_f1-13": 0.0,
        "codebertscore_s_f3-13": 0.0,
        "codebertscore_s_f1-9": 0.8859333395957947,
        "codebertscore_s_f3-9": 0.9002549648284912,
        "codebertscore_s_f1-4": 0.7896707057952881,
        "codebertscore_s_f3-4": 0.8150331377983093,
        "codebertscore_s_f1-14": 0.74803227186203,
        "codebertscore_s_f3-14": 0.7788010239601135,
        "codebertscore_s_f1-5": 0.8394160270690918,
        "codebertscore_s_f3-5": 0.8082998991012573,
        "codebertscore_s_f1-19": 0.7008963823318481,
        "codebertscore_s_f3-19": 0.7290025949478149,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n",
        "snippet": [
            "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n"
        ],
        "simplified": "Add more test cases.",
        "task_id": "64",
        "3": "vowels=0;\n\tfor(var i=0;i<s.length;i++){\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||(s[i]=='y'&&i==s.length-1)){\n\t\t\tvowels+=1;\n\t\t}\n\t}\n\treturn vowels;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var res = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n            res += 1;\n        }\n        if(s[i] === 'y' && i === s.length - 1){\n            res += 1;\n        }\n    }\n    return res;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return s.replace(/[^aeiou]/gi, '').length;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(s[s.length-1]==\"y\"){\n        return s.match(/[aeiou]/gi).length;\n    }else{\n        return s.match(/[aeiou]/gi).length - 1;\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for (var i = 0; i < s.length; i++){\n        if (vowels.indexOf(s[i].toLowerCase()) !== -1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count = 0;\n    var string = s.toLowerCase();\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == \"a\" || string[i] == \"e\" || string[i] == \"i\" || string[i] == \"o\" || string[i] == \"u\"){\n            count++;\n        }\n    }\n    if(string[string.length - 1] == \"y\"){\n        count++;\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var counter = 0;\n  for(var i = 0; i < s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){\n      counter += 1;\n    }\n  }\n  return counter;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var re = /[aeiou]/gi;\n    return (s.replace(re, \"\").length);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var c = 0;\n    var l = s.length;\n    for(var i = 0; i < l; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){\n            c++;\n        }\n    }\n    return c;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var str = s.toLowerCase();\n   var sum = 0;\n   var vowel = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n   for(var i = 0; i < str.length; i++){\n      if(vowel.indexOf(str[i]) !== -1){\n         sum += 1;\n      }\n   }\n   return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var vowels = 'aeiou';\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "s = s.toLowerCase();\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n            count += 1;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count += 1;\n    }\n    return count;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var n = 0;\n\tfor(var i = 0; i < s.length; i++){\n\t\tvar c = s.charAt(i);\n\t\tif(c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u' || c === 'y'){\n\t\t\tn++;\n\t\t}\n\t}\n\tif(s.charAt(s.length - 1) !== 'y'){\n\t\treturn n;\n\t}\n\treturn n - 1;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let word = s.toLowerCase();\n    let count = 0;\n    for(let i = 0; i < word.length; i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// Your code here\n\tvar vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n\tvar count = 0;\n\tfor (var i = 0; i < s.length; i++) {\n\t\tif (vowels.has(s[i])) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (s[s.length - 1] == 'y') {\n\t\tcount++;\n\t}\n\treturn count;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var count = 0;\n  var vowels = 'aeiouyAEIOUY';\n  for(var i = 0; i < s.length; i++){\n    if(vowels.indexOf(s[i]) != -1){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var num=0;\n  var vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n  for(var i=0;i<s.length;i++){\n    if(vowels.indexOf(s[i].toLowerCase())!=-1){\n      num++;\n    }\n  }\n  return num;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "}",
        "grade-14": {
            "execution": 0
        },
        "5": "var v = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    var last_letter = s[s.length - 1];\n    if (v.indexOf(last_letter) != -1) {\n        count += 1;\n    }\n    s = s.toLowerCase();\n    for (var i = 0; i < s.length; i++) {\n        if (v.indexOf(s[i]) != -1) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y'){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.13527326331951708,
        "bleu-0": 0.11890980230548852,
        "bleu-8": 0.007305950302100238,
        "bleu-7": 0.08878441188071362,
        "bleu-16": 0.06795635663728315,
        "bleu-2": 0.08418527433552431,
        "bleu-11": 0.12297178156080968,
        "bleu-1": 0.021201952100162666,
        "bleu-10": 0.10503721862617636,
        "bleu-17": 0.08036236417202756,
        "bleu-12": 0.10453625335882787,
        "bleu-6": 0.1186786185657028,
        "bleu-18": 0.12677307416171157,
        "bleu-15": 0.058144527364519714,
        "bleu-13": 0.10333253188607296,
        "bleu-9": 0.07576265932462087,
        "bleu-4": 0.06635162675917097,
        "bleu-14": 8.985825944049384e-37,
        "bleu-5": 0.07507821145745289,
        "bleu-19": 0.10954725028499684,
        "codebleu-3": 0.4770594327754751,
        "codebleu-0": 0.5021099670509147,
        "codebleu-8": 0.10234994182752687,
        "codebleu-7": 0.31418134384200613,
        "codebleu-16": 0.46100924528689274,
        "codebleu-2": 0.5112531012781428,
        "codebleu-11": 0.44792585248235717,
        "codebleu-1": 0.15745095157058073,
        "codebleu-10": 0.4376450919932516,
        "codebleu-17": 0.5033242829175602,
        "codebleu-12": 0.3630078859046224,
        "codebleu-6": 0.5239464364276171,
        "codebleu-18": 0.5614066234713964,
        "codebleu-15": 0.4333333333333333,
        "codebleu-13": 0.5252081997587899,
        "codebleu-9": 0.35038380989594164,
        "codebleu-4": 0.45260218559946036,
        "codebleu-14": 0.01111111111111111,
        "codebleu-5": 0.5826519241317977,
        "codebleu-19": 0.42173009726972166,
        "chrf-3": 0.23363926583693606,
        "chrf-0": 0.1704941501635162,
        "chrf-8": 0.0859569813245702,
        "chrf-7": 0.15833268999345218,
        "chrf-16": 0.22727508445811329,
        "chrf-2": 0.15044560666450324,
        "chrf-11": 0.15609997888619645,
        "chrf-1": 0.10795762046391885,
        "chrf-10": 0.13973728418157655,
        "chrf-17": 0.2067082697608442,
        "chrf-12": 0.22384817123245182,
        "chrf-6": 0.18136601268302055,
        "chrf-18": 0.20131615253913238,
        "chrf-15": 0.14147025421963347,
        "chrf-13": 0.2336758606364276,
        "chrf-9": 0.23814651081886543,
        "chrf-4": 0.2273217499242092,
        "chrf-14": 0.007429420505200593,
        "chrf-5": 0.19919660596302854,
        "chrf-19": 0.14297702307932247,
        "rougel-3": 0.3248730964467005,
        "rougel-0": 0.3317535545023697,
        "rougel-8": 0.17307692307692304,
        "rougel-7": 0.30434782608695654,
        "rougel-16": 0.3592814371257485,
        "rougel-2": 0.3381642512077295,
        "rougel-11": 0.3229166666666667,
        "rougel-1": 0.2727272727272727,
        "rougel-10": 0.3163265306122449,
        "rougel-17": 0.3352601156069364,
        "rougel-12": 0.40559440559440557,
        "rougel-6": 0.3271028037383178,
        "rougel-18": 0.34123222748815163,
        "rougel-15": 0.3027027027027028,
        "rougel-13": 0.3978494623655914,
        "rougel-9": 0.3776223776223776,
        "rougel-4": 0.3493975903614458,
        "rougel-14": 0.023529411764705882,
        "rougel-5": 0.37254901960784315,
        "rougel-19": 0.31351351351351353,
        "meteor-3": 0.45879631760644424,
        "meteor-0": 0.415028562560994,
        "meteor-8": 0.10989404352806413,
        "meteor-7": 0.26916187690598464,
        "meteor-16": 0.3263315493792564,
        "meteor-2": 0.361490329920364,
        "meteor-11": 0.4249151088706855,
        "meteor-1": 0.14272250196904396,
        "meteor-10": 0.3964698185128292,
        "meteor-17": 0.40353372781065094,
        "meteor-12": 0.27421820484585946,
        "meteor-6": 0.4533372513924692,
        "meteor-18": 0.5161963634075751,
        "meteor-15": 0.31457604571016023,
        "meteor-13": 0.38828324873180686,
        "meteor-9": 0.27785271592268773,
        "meteor-4": 0.3368091810859188,
        "meteor-14": 0.006605019815059445,
        "meteor-5": 0.42352819811161957,
        "meteor-19": 0.366993675900716,
        "ruby-3": 0.23893805309734517,
        "ruby-0": 0.22047244094488194,
        "ruby-8": 0.1071428571428571,
        "ruby-7": 0.19047619047619047,
        "ruby-16": 0.19047619047619047,
        "ruby-2": 0.2195121951219512,
        "ruby-11": 0.25,
        "ruby-1": 0.15476190476190477,
        "ruby-10": 0.2142857142857143,
        "ruby-17": 0.202247191011236,
        "ruby-12": 0.2857142857142857,
        "ruby-6": 0.23076923076923073,
        "ruby-18": 0.22834645669291342,
        "ruby-15": 0.19801980198019797,
        "ruby-13": 0.2549019607843137,
        "ruby-9": 0.25,
        "ruby-4": 0.1785714285714286,
        "ruby-14": 0.011904761904761862,
        "ruby-5": 0.23333333333333328,
        "ruby-19": 0.2376237623762376,
        "codebertscore_f1-3": 0.7927747368812561,
        "codebertscore_f3-3": 0.7901009917259216,
        "codebertscore_f1-0": 0.757857620716095,
        "codebertscore_f3-0": 0.7357171177864075,
        "codebertscore_f1-8": 0.7109093070030212,
        "codebertscore_f3-8": 0.6901706457138062,
        "codebertscore_f1-7": 0.7530392408370972,
        "codebertscore_f3-7": 0.7394863963127136,
        "codebertscore_f1-16": 0.7905191779136658,
        "codebertscore_f3-16": 0.7892982959747314,
        "codebertscore_f1-2": 0.7495580911636353,
        "codebertscore_f3-2": 0.7360740303993225,
        "codebertscore_f1-11": 0.7742704749107361,
        "codebertscore_f3-11": 0.7515780925750732,
        "codebertscore_f1-1": 0.7294880747795105,
        "codebertscore_f3-1": 0.7060156464576721,
        "codebertscore_f1-10": 0.7600639462471008,
        "codebertscore_f3-10": 0.7340795993804932,
        "codebertscore_f1-17": 0.7763187289237976,
        "codebertscore_f3-17": 0.7736853957176208,
        "codebertscore_f1-12": 0.8188387751579285,
        "codebertscore_f3-12": 0.8092525601387024,
        "codebertscore_f1-6": 0.7611143589019775,
        "codebertscore_f3-6": 0.7397271394729614,
        "codebertscore_f1-18": 0.7712162733078003,
        "codebertscore_f3-18": 0.7560283541679382,
        "codebertscore_f1-15": 0.7461462616920471,
        "codebertscore_f3-15": 0.7359216809272766,
        "codebertscore_f1-13": 0.7941187620162964,
        "codebertscore_f3-13": 0.7992401719093323,
        "codebertscore_f1-9": 0.8270198702812195,
        "codebertscore_f3-9": 0.8166160583496094,
        "codebertscore_f1-4": 0.7871181964874268,
        "codebertscore_f3-4": 0.7867250442504883,
        "codebertscore_f1-14": 0.0,
        "codebertscore_f3-14": 0.0,
        "codebertscore_f1-5": 0.7446719408035278,
        "codebertscore_f3-5": 0.7367217540740967,
        "codebertscore_f1-19": 0.7662635445594788,
        "codebertscore_f3-19": 0.7423073649406433,
        "codebertscore_s_f1-3": 0.7927954792976379,
        "codebertscore_s_f3-3": 0.7885932922363281,
        "codebertscore_s_f1-0": 0.760226845741272,
        "codebertscore_s_f3-0": 0.738533616065979,
        "codebertscore_s_f1-8": 0.7014046311378479,
        "codebertscore_s_f3-8": 0.6696406006813049,
        "codebertscore_s_f1-7": 0.7508172988891602,
        "codebertscore_s_f3-7": 0.7338167428970337,
        "codebertscore_s_f1-16": 0.7856044173240662,
        "codebertscore_s_f3-16": 0.7826905846595764,
        "codebertscore_s_f1-2": 0.7527589797973633,
        "codebertscore_s_f3-2": 0.7373982071876526,
        "codebertscore_s_f1-11": 0.7714791893959045,
        "codebertscore_s_f3-11": 0.7473055124282837,
        "codebertscore_s_f1-1": 0.7259297966957092,
        "codebertscore_s_f3-1": 0.694295346736908,
        "codebertscore_s_f1-10": 0.7575058937072754,
        "codebertscore_s_f3-10": 0.7308095097541809,
        "codebertscore_s_f1-17": 0.7735865116119385,
        "codebertscore_s_f3-17": 0.770217776298523,
        "codebertscore_s_f1-12": 0.816572368144989,
        "codebertscore_s_f3-12": 0.8050257563591003,
        "codebertscore_s_f1-6": 0.7663190364837646,
        "codebertscore_s_f3-6": 0.7465389370918274,
        "codebertscore_s_f1-18": 0.7673243284225464,
        "codebertscore_s_f3-18": 0.7503269910812378,
        "codebertscore_s_f1-15": 0.743789553642273,
        "codebertscore_s_f3-15": 0.7315078973770142,
        "codebertscore_s_f1-13": 0.792081356048584,
        "codebertscore_s_f3-13": 0.796833336353302,
        "codebertscore_s_f1-9": 0.8220166563987732,
        "codebertscore_s_f3-9": 0.811498761177063,
        "codebertscore_s_f1-4": 0.7829328179359436,
        "codebertscore_s_f3-4": 0.78091961145401,
        "codebertscore_s_f1-14": 0.0,
        "codebertscore_s_f3-14": 0.0,
        "codebertscore_s_f1-5": 0.7465997338294983,
        "codebertscore_s_f3-5": 0.7419414520263672,
        "codebertscore_s_f1-19": 0.7669858932495117,
        "codebertscore_s_f3-19": 0.7420056462287903,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n",
        "snippet": [
            "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n"
        ],
        "simplified": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
        "task_id": "8",
        "0": "var sum=0,product=1;\n    for(var i=0;i<numbers.length;i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum:sum,product:product};\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "let sum = 0\n    let product = 1\n    for(let number of numbers){\n        sum += number\n        product *= number\n    }\n    return (sum, product)\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var sum = 0;\n    var product = 1;\n    if(numbers.length == 0){\n        return [sum, product];\n    }\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var sum = 0, product = 1;\n    for(i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "//\n    let sum=0;\n    let product=1;\n    numbers.forEach(function(value){\n        sum += value;\n        product *= value;\n    });\n    return [sum, product];\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var totalSum = 0;\n    var totalProduct = 1;\n    for(var i = 0; i < numbers.length; i++){\n        totalSum += numbers[i];\n        totalProduct *= numbers[i];\n    }\n    return [totalSum, totalProduct];\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "// YOUR CODE HERE\n}",
        "grade-10": {
            "execution": 0
        },
        "12": "if(numbers.length === 0){\n        return [0, 1];\n    } else{\n        let sum = 0;\n        let product = 1;\n        for(let i = 0; i < numbers.length; i++){\n            sum += numbers[i];\n            product *= numbers[i];\n        }\n        return [sum, product];\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "let sum = numbers.reduce((a, b) => a + b, 0);\n    let product = numbers.reduce((a, b) => a * b, 1);\n    return [sum, product];\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "//You can write your code here!\n    return (numbers.reduce((sum, val) => sum + val, 0), numbers.reduce((sum, val) => sum * val, 1));\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var sum = 0;\n  var product = 1;\n  if (numbers.length == 0){\n    return [sum, product];\n  } else {\n    for (var i = 0; i < numbers.length; i++){\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n    return [sum, product];\n  }\n}",
        "grade-15": {
            "execution": 1
        },
        "17": "var sum=0;\n    var product=1;\n    if(numbers.length==0){\n        console.log(\"empty sum is : \"+sum);\n        console.log(\"empty product is : \"+product);\n    }\n    else{\n        for(var i=0;i<numbers.length;i++){\n            sum=sum+numbers[i];\n            product=product*numbers[i];\n        }\n        console.log(\"sum is : \"+sum);\n        console.log(\"product is : \"+product);\n    }\n}\nsum_product([1,2,3,4]);\nsum_product([]);",
        "grade-17": {
            "execution": 0
        },
        "18": "var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  var sum_product = [sum, product];\n  return sum_product;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let sum = 0;\n\tlet product = 1;\n\tif(numbers.length == 0){\n\t\treturn [sum, product];\n\t}\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn [sum, product];\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.14503107473696397,
        "bleu-1": 0.16635316762824182,
        "bleu-2": 0.16635316762824182,
        "bleu-3": 0.16813259899820948,
        "bleu-4": 0.1228405383627392,
        "bleu-5": 0.08469674369081268,
        "bleu-6": 0.1871015823041062,
        "bleu-7": 0.09387318658061707,
        "bleu-8": 0.16635316762824182,
        "bleu-9": 0.15058130368679448,
        "bleu-10": 0.0005468988016936943,
        "bleu-12": 0.11999574894794368,
        "bleu-13": 0.04826741258911655,
        "bleu-14": 0.02422067601474124,
        "bleu-15": 0.08119119905925454,
        "bleu-17": 0.02788426955775909,
        "bleu-18": 0.12000796932295149,
        "bleu-19": 0.08383676689911676,
        "codebleu-0": 0.7047274013450495,
        "codebleu-1": 0.6451497703622827,
        "codebleu-2": 0.6451497703622827,
        "codebleu-3": 0.6492342210451562,
        "codebleu-4": 0.5240526634665151,
        "codebleu-5": 0.6391161239484687,
        "codebleu-6": 0.7256280414951287,
        "codebleu-7": 0.6174242424242424,
        "codebleu-8": 0.6451497703622827,
        "codebleu-9": 0.6463090051599203,
        "codebleu-10": 0.055581078082067234,
        "codebleu-12": 0.6412114127034452,
        "codebleu-13": 0.4936868686868686,
        "codebleu-14": 0.4015151515151515,
        "codebleu-15": 0.6385318665098757,
        "codebleu-17": 0.5643939393939393,
        "codebleu-18": 0.6273245605437241,
        "codebleu-19": 0.6351849156953073,
        "chrf-0": 0.34250928186937757,
        "chrf-1": 0.3342219111442596,
        "chrf-2": 0.3342219111442596,
        "chrf-3": 0.3547157320031636,
        "chrf-4": 0.312654008786256,
        "chrf-5": 0.330770109889173,
        "chrf-6": 0.3717718792459744,
        "chrf-7": 0.3540060344067835,
        "chrf-8": 0.3342219111442596,
        "chrf-9": 0.28020366295425886,
        "chrf-10": 0.0018811136192626034,
        "chrf-12": 0.3198486918413998,
        "chrf-13": 0.24418201349825788,
        "chrf-14": 0.21123094382487417,
        "chrf-15": 0.3287777191801748,
        "chrf-17": 0.2221654775298111,
        "chrf-18": 0.32806542180320364,
        "chrf-19": 0.307537209737109,
        "rougel-0": 0.5,
        "rougel-1": 0.5168539325842696,
        "rougel-2": 0.5168539325842696,
        "rougel-3": 0.5393258426966292,
        "rougel-4": 0.5294117647058824,
        "rougel-5": 0.44859813084112155,
        "rougel-6": 0.5747126436781609,
        "rougel-7": 0.5569620253164557,
        "rougel-8": 0.5168539325842696,
        "rougel-9": 0.5052631578947367,
        "rougel-10": 0.04761904761904762,
        "rougel-12": 0.43243243243243246,
        "rougel-13": 0.3488372093023256,
        "rougel-14": 0.23529411764705882,
        "rougel-15": 0.4363636363636364,
        "rougel-17": 0.23391812865497075,
        "rougel-18": 0.48936170212765956,
        "rougel-19": 0.42990654205607476,
        "meteor-0": 0.46292631578947374,
        "meteor-1": 0.5412845416756504,
        "meteor-2": 0.5412845416756504,
        "meteor-3": 0.5588942307692307,
        "meteor-4": 0.4307116104868915,
        "meteor-5": 0.5499544303797468,
        "meteor-6": 0.5792853333333333,
        "meteor-7": 0.5212137445079144,
        "meteor-8": 0.5412845416756504,
        "meteor-9": 0.5501387075718015,
        "meteor-10": 0.015151515151515152,
        "meteor-12": 0.4746240601503759,
        "meteor-13": 0.3705548128342246,
        "meteor-14": 0.22507796684357387,
        "meteor-15": 0.49027135678391953,
        "meteor-17": 0.26143790849673204,
        "meteor-18": 0.4464805119255381,
        "meteor-19": 0.5334256329113924,
        "ruby-0": 0.4107142857142857,
        "ruby-1": 0.4339622641509434,
        "ruby-2": 0.4339622641509434,
        "ruby-3": 0.4528301886792453,
        "ruby-4": 0.5,
        "ruby-5": 0.3380281690140845,
        "ruby-6": 0.4901960784313726,
        "ruby-7": 0.4883720930232558,
        "ruby-8": 0.4339622641509434,
        "ruby-9": 0.4067796610169492,
        "ruby-10": 0.02777777777777779,
        "ruby-12": 0.31999999999999995,
        "ruby-13": 0.21999999999999997,
        "ruby-14": 0.12244897959183676,
        "ruby-15": 0.32432432432432434,
        "ruby-17": 0.14814814814814814,
        "ruby-18": 0.39655172413793105,
        "ruby-19": 0.323943661971831,
        "codebertscore_f1-0": 0.8486731052398682,
        "codebertscore_f3-0": 0.854564905166626,
        "codebertscore_f1-1": 0.8640416860580444,
        "codebertscore_f3-1": 0.8667498230934143,
        "codebertscore_f1-2": 0.8668906688690186,
        "codebertscore_f3-2": 0.8679314851760864,
        "codebertscore_f1-3": 0.8666883111000061,
        "codebertscore_f3-3": 0.8682271838188171,
        "codebertscore_f1-4": 0.909858226776123,
        "codebertscore_f3-4": 0.903030514717102,
        "codebertscore_f1-5": 0.8333267569541931,
        "codebertscore_f3-5": 0.8411319255828857,
        "codebertscore_f1-6": 0.8682383894920349,
        "codebertscore_f3-6": 0.8675218820571899,
        "codebertscore_f1-7": 0.8592129349708557,
        "codebertscore_f3-7": 0.8579119443893433,
        "codebertscore_f1-8": 0.8668906688690186,
        "codebertscore_f3-8": 0.8679314851760864,
        "codebertscore_f1-9": 0.8528974056243896,
        "codebertscore_f3-9": 0.8554104566574097,
        "codebertscore_f1-10": 0.5982682704925537,
        "codebertscore_f3-10": 0.5772994160652161,
        "codebertscore_f1-12": 0.8091162443161011,
        "codebertscore_f3-12": 0.8157728910446167,
        "codebertscore_f1-13": 0.8172329664230347,
        "codebertscore_f3-13": 0.8207704424858093,
        "codebertscore_f1-14": 0.7585046887397766,
        "codebertscore_f3-14": 0.7702400088310242,
        "codebertscore_f1-15": 0.8342348337173462,
        "codebertscore_f3-15": 0.8440614938735962,
        "codebertscore_f1-17": 0.7402857542037964,
        "codebertscore_f3-17": 0.7724496126174927,
        "codebertscore_f1-18": 0.8613204956054688,
        "codebertscore_f3-18": 0.8653432130813599,
        "codebertscore_f1-19": 0.8427966833114624,
        "codebertscore_f3-19": 0.8520766496658325,
        "codebertscore_s_f1-0": 0.8607838153839111,
        "codebertscore_s_f3-0": 0.8638839721679688,
        "codebertscore_s_f1-1": 0.8708129525184631,
        "codebertscore_s_f3-1": 0.873589038848877,
        "codebertscore_s_f1-2": 0.87380450963974,
        "codebertscore_s_f3-2": 0.8745661377906799,
        "codebertscore_s_f1-3": 0.8804827332496643,
        "codebertscore_s_f3-3": 0.8789728879928589,
        "codebertscore_s_f1-4": 0.9126914739608765,
        "codebertscore_s_f3-4": 0.9057696461677551,
        "codebertscore_s_f1-5": 0.8410050868988037,
        "codebertscore_s_f3-5": 0.8462812900543213,
        "codebertscore_s_f1-6": 0.8810366988182068,
        "codebertscore_s_f3-6": 0.8788456320762634,
        "codebertscore_s_f1-7": 0.8658791780471802,
        "codebertscore_s_f3-7": 0.8657534122467041,
        "codebertscore_s_f1-8": 0.87380450963974,
        "codebertscore_s_f3-8": 0.8745661377906799,
        "codebertscore_s_f1-9": 0.8617674708366394,
        "codebertscore_s_f3-9": 0.8628749847412109,
        "codebertscore_s_f1-10": 0.6230420470237732,
        "codebertscore_s_f3-10": 0.6137942671775818,
        "codebertscore_s_f1-12": 0.8141683340072632,
        "codebertscore_s_f3-12": 0.8215038776397705,
        "codebertscore_s_f1-13": 0.8212682008743286,
        "codebertscore_s_f3-13": 0.826801061630249,
        "codebertscore_s_f1-14": 0.7801711559295654,
        "codebertscore_s_f3-14": 0.7910863161087036,
        "codebertscore_s_f1-15": 0.8432074785232544,
        "codebertscore_s_f3-15": 0.8507742285728455,
        "codebertscore_s_f1-17": 0.7579540014266968,
        "codebertscore_s_f3-17": 0.7919114828109741,
        "codebertscore_s_f1-18": 0.8759381175041199,
        "codebertscore_s_f3-18": 0.8780098557472229,
        "codebertscore_s_f1-19": 0.8493286967277527,
        "codebertscore_s_f3-19": 0.8568108081817627,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 0,
        "raw_gpt35_nsnr-10": "0",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-10": 0,
        "raw_gpt35_nswr-10": "0",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n",
        "snippet": [
            "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n"
        ],
        "simplified": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "task_id": "36",
        "3": "var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var temp = i;\n            while(temp > 0){\n                var digit = temp % 10;\n                if(digit == 7){\n                    count++;\n                }\n                temp = Math.floor(temp / 10);\n            }\n        }\n    }\n    return count;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let count = 0;\n    for(let i = 1; i < n; i++){\n        if((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var count = 0;\n  for(var i = 0; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      var number = i.toString();\n      for(var j = 0; j < number.length; j++){\n        if(number[j] === \"7\"){\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var count = 0;\n\t\n\tfor(var i = 0; i < n; i++) {\n\t\tvar str = i.toString();\n\t\tif(str.indexOf('7') !== -1) {\n\t\t\tif(i % 11 === 0 || i % 13 === 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var i, s;\n\tfor(i = 0, s = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\ts += i.toString().split(\"\").reduce(function(x, y){\n\t\t\t\treturn (y == 7) ? x + 1 : x;\n\t\t\t}, 0);\n\t\t}\n\t}\n\treturn s;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var count = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tcount += i.toString().split(\"\").filter(function(a){return a == 7}).length;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var count = 0;\n    for(i=1; i<n; i++){\n        if(i%11==0 || i%13==0){\n            if(i.toString().includes('7'))\n                count += 1;\n        }\n    }\n    return count;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = 0;\n\tfor(let i = 0; i < n; i++){\n\t\tlet currentDigit = i;\n\t\tif(currentDigit % 11 === 0 || currentDigit % 13 === 0){\n\t\t\tif(currentDigit === 7){\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\twhile(currentDigit > 0){\n\t\t\t\tif(currentDigit % 10 === 7){\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t\tcurrentDigit = (currentDigit - currentDigit % 10) / 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var count = 0;\n  for(var i = 1; i < n; i++){\n    if((i % 11 == 0 || i % 13 == 0) && i.toString().includes(\"7\")){\n      count += 1;\n    }\n  }\n  return count;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var count = 0;\n  for(var i = 1; i < n; i++){\n    if((i % 11 === 0 || i % 13 === 0) && i.toString().indexOf('7') != -1){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "function check_divis(n){\n\t\treturn n % 11 == 0 || n % 13 == 0;\n\t}\n\tfunction check_7(n){\n\t\tvar number = n.toString();\n\t\tvar count = 0;\n\t\tfor(var i = 0; i < number.length; i++){\n\t\t\tif(number[i] == '7'){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(check_divis(i)){\n\t\t\tsum += check_7(i);\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(n < 7) return 0;\n    let sum = 0;\n    for(let i = 7; i < n; i += 11){\n        if(i % 13 === 0) {\n            sum += 1;\n            continue;\n        }\n        let s = i.toString();\n        for(let j = 0; j < s.length; j++){\n            if(s[j] === '7') sum += 1;\n        }\n    }\n    return sum;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let count = 0;\n    for(let i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i.toString().indexOf('7') > -1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let sum = 0;\n    for(let i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && (i % 7 != 0)){\n            sum += Math.trunc(i / 10);\n        }\n    }\n    return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var count = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tvar num = i.toString();\n\t\t\tfor(var j = 0; j < num.length; j++){\n\t\t\t\tif(num[j] == 7){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var count = 0;\n    var i = 0;\n    while(i<n){\n        if(i%11 == 0 && i%13 == 0){\n            var tempString = i.toString();\n            for(var j = 0; j<tempString.length; j++){\n                if(tempString[j] == 7){\n                    count++;\n                }\n            }\n        }\n        i++;\n    }\n    return count;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var count = 0;\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i.toString().search(\"7\") != -1){\n            count++;\n            sum += i;\n        }\n    }\n    return count;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var str = String(i);\n            for(var j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// good luck!\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.3358184685202628,
        "bleu-0": 0.3695242051628726,
        "bleu-8": 0.4471339360554159,
        "bleu-7": 0.40163551191336205,
        "bleu-16": 0.41520060678566567,
        "bleu-2": 0.4087816463035836,
        "bleu-11": 0.3530568364445598,
        "bleu-1": 0.2822326348494853,
        "bleu-10": 0.3505764352126486,
        "bleu-17": 0.3544895499792695,
        "bleu-12": 0.30991924765744305,
        "bleu-6": 0.34639611936143155,
        "bleu-18": 0.40306318307249,
        "bleu-15": 0.3578679127180085,
        "bleu-13": 0.4113100652430728,
        "bleu-9": 0.2912567986288346,
        "bleu-4": 0.43123785664343567,
        "bleu-14": 0.40304066265340927,
        "bleu-5": 0.422432669304722,
        "bleu-19": 2.4829167184080853e-08,
        "codebleu-3": 0.543234879727834,
        "codebleu-0": 0.4684903446853901,
        "codebleu-8": 0.6175987637786594,
        "codebleu-7": 0.5217935404034144,
        "codebleu-16": 0.6142603391841975,
        "codebleu-2": 0.5515462562833697,
        "codebleu-11": 0.4556430568706049,
        "codebleu-1": 0.5256571935275458,
        "codebleu-10": 0.468967709936624,
        "codebleu-17": 0.4748622687754319,
        "codebleu-12": 0.6537835337574435,
        "codebleu-6": 0.5943085010965794,
        "codebleu-18": 0.4818114037894635,
        "codebleu-15": 0.4488505321353715,
        "codebleu-13": 0.5781398159973462,
        "codebleu-9": 0.5217710467535475,
        "codebleu-4": 0.6018956201755302,
        "codebleu-14": 0.540859508171768,
        "codebleu-5": 0.597720002234141,
        "codebleu-19": 0.01503759444017419,
        "chrf-3": 0.3177497778201174,
        "chrf-0": 0.37546144304218726,
        "chrf-8": 0.39079681668275645,
        "chrf-7": 0.3902587726018643,
        "chrf-16": 0.3887737726050944,
        "chrf-2": 0.4040886282235621,
        "chrf-11": 0.3765013932415946,
        "chrf-1": 0.2645908421785922,
        "chrf-10": 0.3596448108219239,
        "chrf-17": 0.35591647205727667,
        "chrf-12": 0.3611366821761446,
        "chrf-6": 0.3589795718941893,
        "chrf-18": 0.41358426390539926,
        "chrf-15": 0.3485751572268271,
        "chrf-13": 0.40899094988031687,
        "chrf-9": 0.3108734798252435,
        "chrf-4": 0.4136393726374073,
        "chrf-14": 0.38738597845233963,
        "chrf-5": 0.39674818400532524,
        "chrf-19": 0.010057471264367814,
        "rougel-3": 0.5405405405405405,
        "rougel-0": 0.6219512195121951,
        "rougel-8": 0.59375,
        "rougel-7": 0.45454545454545453,
        "rougel-16": 0.6063829787234043,
        "rougel-2": 0.6436781609195402,
        "rougel-11": 0.6583850931677019,
        "rougel-1": 0.4734299516908212,
        "rougel-10": 0.6380368098159509,
        "rougel-17": 0.6035502958579881,
        "rougel-12": 0.37333333333333335,
        "rougel-6": 0.494949494949495,
        "rougel-18": 0.6265060240963857,
        "rougel-15": 0.5818181818181818,
        "rougel-13": 0.5913978494623656,
        "rougel-9": 0.4973544973544974,
        "rougel-4": 0.5957446808510638,
        "rougel-14": 0.6136363636363636,
        "rougel-5": 0.5775401069518715,
        "rougel-19": 0.0196078431372549,
        "meteor-3": 0.4684155299055613,
        "meteor-0": 0.4849271095662043,
        "meteor-8": 0.5468307602540556,
        "meteor-7": 0.5226613344150691,
        "meteor-16": 0.5389885479914823,
        "meteor-2": 0.5386196312290742,
        "meteor-11": 0.47999161302992577,
        "meteor-1": 0.39798466400017685,
        "meteor-10": 0.4854479764937728,
        "meteor-17": 0.49287800897696366,
        "meteor-12": 0.515295343518582,
        "meteor-6": 0.5017452369191403,
        "meteor-18": 0.49032032513219415,
        "meteor-15": 0.3823607856693975,
        "meteor-13": 0.479464307139881,
        "meteor-9": 0.4054702689656975,
        "meteor-4": 0.5192316925176516,
        "meteor-14": 0.468256778977767,
        "meteor-5": 0.5394807137514691,
        "meteor-19": 0.005747126436781609,
        "ruby-3": 0.42708333333333337,
        "ruby-0": 0.45833333333333337,
        "ruby-8": 0.39583333333333337,
        "ruby-7": 0.29166666666666663,
        "ruby-16": 0.41666666666666663,
        "ruby-2": 0.53125,
        "ruby-11": 0.5208333333333333,
        "ruby-1": 0.3423423423423423,
        "ruby-10": 0.48958333333333337,
        "ruby-17": 0.44791666666666663,
        "ruby-12": 0.21705426356589153,
        "ruby-6": 0.32352941176470584,
        "ruby-18": 0.47916666666666663,
        "ruby-15": 0.44791666666666663,
        "ruby-13": 0.42708333333333337,
        "ruby-9": 0.29166666666666663,
        "ruby-4": 0.41666666666666663,
        "ruby-14": 0.5104166666666667,
        "ruby-5": 0.4375,
        "ruby-19": 0.01041666666666663,
        "codebertscore_f1-3": 0.8058006763458252,
        "codebertscore_f3-3": 0.8001703023910522,
        "codebertscore_f1-0": 0.8680857419967651,
        "codebertscore_f3-0": 0.8472638130187988,
        "codebertscore_f1-8": 0.8595092296600342,
        "codebertscore_f3-8": 0.8498262763023376,
        "codebertscore_f1-7": 0.8596394658088684,
        "codebertscore_f3-7": 0.8470221757888794,
        "codebertscore_f1-16": 0.8631146550178528,
        "codebertscore_f3-16": 0.8544191718101501,
        "codebertscore_f1-2": 0.8667386174201965,
        "codebertscore_f3-2": 0.8565632104873657,
        "codebertscore_f1-11": 0.85917067527771,
        "codebertscore_f3-11": 0.8361324071884155,
        "codebertscore_f1-1": 0.7886608839035034,
        "codebertscore_f3-1": 0.8010446429252625,
        "codebertscore_f1-10": 0.8656075596809387,
        "codebertscore_f3-10": 0.8473009467124939,
        "codebertscore_f1-17": 0.8536074161529541,
        "codebertscore_f3-17": 0.8421347737312317,
        "codebertscore_f1-12": 0.8180638551712036,
        "codebertscore_f3-12": 0.8229635953903198,
        "codebertscore_f1-6": 0.8264912962913513,
        "codebertscore_f3-6": 0.8227482438087463,
        "codebertscore_f1-18": 0.8620272278785706,
        "codebertscore_f3-18": 0.8481260538101196,
        "codebertscore_f1-15": 0.8565729260444641,
        "codebertscore_f3-15": 0.8377699851989746,
        "codebertscore_f1-13": 0.8617854118347168,
        "codebertscore_f3-13": 0.8499516248703003,
        "codebertscore_f1-9": 0.8226469159126282,
        "codebertscore_f3-9": 0.816091001033783,
        "codebertscore_f1-4": 0.8449537754058838,
        "codebertscore_f3-4": 0.8363756537437439,
        "codebertscore_f1-14": 0.8649446964263916,
        "codebertscore_f3-14": 0.8514344096183777,
        "codebertscore_f1-5": 0.8386531472206116,
        "codebertscore_f3-5": 0.8293558955192566,
        "codebertscore_f1-19": 0.6285791993141174,
        "codebertscore_f3-19": 0.5945583581924438,
        "codebertscore_s_f1-3": 0.8145240545272827,
        "codebertscore_s_f3-3": 0.8087260723114014,
        "codebertscore_s_f1-0": 0.8704344034194946,
        "codebertscore_s_f3-0": 0.8469066619873047,
        "codebertscore_s_f1-8": 0.8666325807571411,
        "codebertscore_s_f3-8": 0.858644962310791,
        "codebertscore_s_f1-7": 0.859386146068573,
        "codebertscore_s_f3-7": 0.8463013172149658,
        "codebertscore_s_f1-16": 0.8642571568489075,
        "codebertscore_s_f3-16": 0.8562477827072144,
        "codebertscore_s_f1-2": 0.8655602335929871,
        "codebertscore_s_f3-2": 0.8545662760734558,
        "codebertscore_s_f1-11": 0.8634999394416809,
        "codebertscore_s_f3-11": 0.8415377140045166,
        "codebertscore_s_f1-1": 0.7929027080535889,
        "codebertscore_s_f3-1": 0.805453896522522,
        "codebertscore_s_f1-10": 0.8678261041641235,
        "codebertscore_s_f3-10": 0.8476572632789612,
        "codebertscore_s_f1-17": 0.8566584587097168,
        "codebertscore_s_f3-17": 0.843192994594574,
        "codebertscore_s_f1-12": 0.8235725164413452,
        "codebertscore_s_f3-12": 0.8288185596466064,
        "codebertscore_s_f1-6": 0.832739531993866,
        "codebertscore_s_f3-6": 0.830457329750061,
        "codebertscore_s_f1-18": 0.8643605709075928,
        "codebertscore_s_f3-18": 0.8487499356269836,
        "codebertscore_s_f1-15": 0.8576486110687256,
        "codebertscore_s_f3-15": 0.8382896780967712,
        "codebertscore_s_f1-13": 0.8669620156288147,
        "codebertscore_s_f3-13": 0.8569406867027283,
        "codebertscore_s_f1-9": 0.8270743489265442,
        "codebertscore_s_f3-9": 0.8216719627380371,
        "codebertscore_s_f1-4": 0.8574991226196289,
        "codebertscore_s_f3-4": 0.8492234349250793,
        "codebertscore_s_f1-14": 0.8678683042526245,
        "codebertscore_s_f3-14": 0.8546830415725708,
        "codebertscore_s_f1-5": 0.8480680584907532,
        "codebertscore_s_f3-5": 0.8378845453262329,
        "codebertscore_s_f1-19": 0.6163128614425659,
        "codebertscore_s_f3-19": 0.5787255167961121,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 0,
        "raw_gpt35_nsnr-19": "0",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\nfunction string_xor(a, b){\n",
        "snippet": [
            "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n"
        ],
        "simplified": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "task_id": "11",
        "3": "return (a.split('').map(function(item, index){\n    return Number(item) !== Number(b[index]) ? '1' : '0';\n  })).join('');\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var str1 = a.toString();\n    var str2 = b.toString();\n    var result = '';\n    for (var i = 0; i < str1.length; i++) {\n        result += (parseInt(str1[i]) ^ parseInt(str2[i])).toString();\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "// init variables\n\tvar i = a.length;\n\tvar result = '';\n\t// walk thru input strings\n\twhile(i--){\n\t\t// XOR logic\n\t\tresult = (a[i] != b[i]) ? '1' + result : '0' + result;\n\t}\n\treturn result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var result = '';\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += '0';\n        }else{\n            result += '1';\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var result = '';\n  a = a.split('');\n  b = b.split('');\n  for(var i = 0; i < a.length; i++){\n    if (a[i] === b[i]){\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var res = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            res += '0';\n        }else{\n            res += '1';\n        }\n    }\n    return res;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += '0';\n        }else{\n            result += '1';\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "a = a.split('');\n    b = b.split('');\n    var output = [];\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            output.push('0');\n        } else{\n            output.push('1');\n        }\n    }\n    return output.join('');\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var res = '';\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == b[i]) {\n      res += '0';\n    } else {\n      res += '1';\n    }\n  }\n  return res;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "}",
        "grade-12": {
            "execution": 0
        },
        "6": "return (BigInt(a, 2) ^ BigInt(b, 2)).toString(2)\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "// let res = '';\n  // for (let i = 0; i < a.length; i++){\n  //   if (a[i] === b[i]){\n  //     res += '0';\n  //   } else {\n  //     res += '1';\n  //   }\n  // }\n  // return res;\n  return a.split('').map((letter, i) => letter == b[i] ? '0' : '1').join('');\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let res = \"\";\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      res += '0';\n    } else {\n      res += '1';\n    }\n  }\n  return res;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(a.length != b.length){\n    return \"Not the same length\";\n  }\n  var newString = '';\n  for(var i = 0; i < a.length; i++){\n    if(a[i] == b[i]){\n      newString += '0';\n    }\n    else{\n      newString += '1';\n    }\n  }\n  return newString;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// XOR\n    var result = '',\n        i = a.length,\n        j = b.length;\n\n    for(var l=0; l<i || l<j; l++){\n        if(a[l] === b[l]){\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var key = 0;\n    var string = \"\";\n    for(var i = 0; i < a.length; i++){\n        key = key + parseInt(a[i]) + parseInt(b[i]);\n        if(key == 0 || key == 1){\n            string = string + key;\n            key = 0;\n        }\n        else{\n            string = string + \"0\";\n            key = 1;\n        }\n    }\n    return string;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = \"\";\n  for(var i = 0; i < a.length; i++){\n    result += (a[i] === b[i]) ? \"0\" : \"1\";\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var xored = '';\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == b[i]) {\n      xored += '0';\n    } else {\n      xored += '1';\n    }\n  }\n  return xored;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var xor = [];\n    if(a.length === b.length){\n        for(var i = 0; i < a.length; i++){\n            var aBool = parseInt(a[i]);\n            var bBool = parseInt(b[i]);\n            xor.push(aBool ^ bBool);\n        }\n    }\n    return xor.join('');\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.4748191220652976,
        "bleu-0": 0.08656790020024559,
        "bleu-8": 0.07968775632601022,
        "bleu-7": 0.04506002535007928,
        "bleu-16": 0.17877941825139884,
        "bleu-2": 0.24993350920631147,
        "bleu-11": 0.1788713041013309,
        "bleu-1": 0.1788713041013309,
        "bleu-10": 0.23104668291194508,
        "bleu-17": 0.17877941825139884,
        "bleu-12": 1.6038108905486386e-28,
        "bleu-6": 0.01692685219280887,
        "bleu-18": 0.23455245898723312,
        "bleu-15": 0.17750054176165694,
        "bleu-13": 0.14294672737329417,
        "bleu-9": 0.1519141422029293,
        "bleu-4": 0.06122137727658235,
        "bleu-14": 0.14433280508083837,
        "bleu-5": 0.17877941825139884,
        "bleu-19": 0.14911847250810856,
        "codebleu-3": 0.5773209846971812,
        "codebleu-0": 0.4476581175256343,
        "codebleu-8": 0.3773993808049535,
        "codebleu-7": 0.2610621896493574,
        "codebleu-16": 0.4282210395047584,
        "codebleu-2": 0.5475379378088949,
        "codebleu-11": 0.4366863930429175,
        "codebleu-1": 0.4366863930429175,
        "codebleu-10": 0.6002208867804737,
        "codebleu-17": 0.4282210395047584,
        "codebleu-12": 0.007017543859649121,
        "codebleu-6": 0.13383742445779884,
        "codebleu-18": 0.6316617359405966,
        "codebleu-15": 0.43458976617559025,
        "codebleu-13": 0.5055582006922466,
        "codebleu-9": 0.4672178885095697,
        "codebleu-4": 0.43920253088768624,
        "codebleu-14": 0.3817895415005968,
        "codebleu-5": 0.4282210395047584,
        "codebleu-19": 0.49090055037157837,
        "chrf-3": 0.5473805064499953,
        "chrf-0": 0.18943213595816616,
        "chrf-8": 0.17789461788322092,
        "chrf-7": 0.1443067608089048,
        "chrf-16": 0.20387787364171925,
        "chrf-2": 0.2802940187314806,
        "chrf-11": 0.19321274566643723,
        "chrf-1": 0.1992167377806302,
        "chrf-10": 0.3016037554135485,
        "chrf-17": 0.19796204562770076,
        "chrf-12": 0.010395010395010394,
        "chrf-6": 0.08494428053726351,
        "chrf-18": 0.3853906715521616,
        "chrf-15": 0.1917375852367205,
        "chrf-13": 0.2275802468988357,
        "chrf-9": 0.2019290355246609,
        "chrf-4": 0.16728128736855152,
        "chrf-14": 0.1501061756426573,
        "chrf-5": 0.22740398626295616,
        "chrf-19": 0.24866736364424097,
        "rougel-3": 0.5378151260504201,
        "rougel-0": 0.35211267605633806,
        "rougel-8": 0.29007633587786263,
        "rougel-7": 0.28037383177570097,
        "rougel-16": 0.39682539682539686,
        "rougel-2": 0.3401360544217687,
        "rougel-11": 0.39370078740157477,
        "rougel-1": 0.39370078740157477,
        "rougel-10": 0.39490445859872614,
        "rougel-17": 0.39682539682539686,
        "rougel-12": 0.030303030303030307,
        "rougel-6": 0.2888888888888889,
        "rougel-18": 0.5268817204301075,
        "rougel-15": 0.3779527559055118,
        "rougel-13": 0.33112582781456956,
        "rougel-9": 0.3448275862068966,
        "rougel-4": 0.2732919254658385,
        "rougel-14": 0.3697478991596639,
        "rougel-5": 0.39682539682539686,
        "rougel-19": 0.4105960264900662,
        "meteor-3": 0.6697359407497788,
        "meteor-0": 0.42640693930491746,
        "meteor-8": 0.32690092165898615,
        "meteor-7": 0.27891088780552514,
        "meteor-16": 0.3189366220607425,
        "meteor-2": 0.37760456506440654,
        "meteor-11": 0.3184436751951154,
        "meteor-1": 0.3184436751951154,
        "meteor-10": 0.5413149493963926,
        "meteor-17": 0.3189366220607425,
        "meteor-12": 0.008532423208191127,
        "meteor-6": 0.16586520947176683,
        "meteor-18": 0.5647223796033994,
        "meteor-15": 0.3105302719281298,
        "meteor-13": 0.36022261549925483,
        "meteor-9": 0.3558304044134003,
        "meteor-4": 0.3353951272138812,
        "meteor-14": 0.3420243975123722,
        "meteor-5": 0.3189366220607425,
        "meteor-19": 0.4789702744179489,
        "ruby-3": 0.2615384615384615,
        "ruby-0": 0.24675324675324672,
        "ruby-8": 0.09090909090909094,
        "ruby-7": 0.19999999999999996,
        "ruby-16": 0.12307692307692308,
        "ruby-2": 0.19512195121951215,
        "ruby-11": 0.12307692307692308,
        "ruby-1": 0.12307692307692308,
        "ruby-10": 0.2065217391304348,
        "ruby-17": 0.12307692307692308,
        "ruby-12": 0.01538461538461533,
        "ruby-6": 0.18461538461538463,
        "ruby-18": 0.39669421487603307,
        "ruby-15": 0.10769230769230764,
        "ruby-13": 0.16279069767441856,
        "ruby-9": 0.13749999999999996,
        "ruby-4": 0.16666666666666663,
        "ruby-14": 0.18461538461538463,
        "ruby-5": 0.12307692307692308,
        "ruby-19": 0.2790697674418605,
        "codebertscore_f1-3": 0.8595867156982422,
        "codebertscore_f3-3": 0.8343997001647949,
        "codebertscore_f1-0": 0.7421505451202393,
        "codebertscore_f3-0": 0.7515794634819031,
        "codebertscore_f1-8": 0.7606772184371948,
        "codebertscore_f3-8": 0.7709870934486389,
        "codebertscore_f1-7": 0.7708548307418823,
        "codebertscore_f3-7": 0.7481689453125,
        "codebertscore_f1-16": 0.7974879741668701,
        "codebertscore_f3-16": 0.7832502126693726,
        "codebertscore_f1-2": 0.8066130876541138,
        "codebertscore_f3-2": 0.7961782813072205,
        "codebertscore_f1-11": 0.7990553975105286,
        "codebertscore_f3-11": 0.7858148217201233,
        "codebertscore_f1-1": 0.7983603477478027,
        "codebertscore_f3-1": 0.7842229008674622,
        "codebertscore_f1-10": 0.7978324294090271,
        "codebertscore_f3-10": 0.795647919178009,
        "codebertscore_f1-17": 0.8050282001495361,
        "codebertscore_f3-17": 0.7894810438156128,
        "codebertscore_f1-12": 0.0,
        "codebertscore_f3-12": 0.0,
        "codebertscore_f1-6": 0.7002121210098267,
        "codebertscore_f3-6": 0.6999387145042419,
        "codebertscore_f1-18": 0.8090675473213196,
        "codebertscore_f3-18": 0.8250201344490051,
        "codebertscore_f1-15": 0.7999969124794006,
        "codebertscore_f3-15": 0.7868461012840271,
        "codebertscore_f1-13": 0.7735893726348877,
        "codebertscore_f3-13": 0.7803733348846436,
        "codebertscore_f1-9": 0.777695894241333,
        "codebertscore_f3-9": 0.7837892770767212,
        "codebertscore_f1-4": 0.736216127872467,
        "codebertscore_f3-4": 0.7447468042373657,
        "codebertscore_f1-14": 0.7998965382575989,
        "codebertscore_f3-14": 0.7774359583854675,
        "codebertscore_f1-5": 0.8220565915107727,
        "codebertscore_f3-5": 0.8131531476974487,
        "codebertscore_f1-19": 0.7707147002220154,
        "codebertscore_f3-19": 0.7828291058540344,
        "codebertscore_s_f1-3": 0.8589154481887817,
        "codebertscore_s_f3-3": 0.8331102728843689,
        "codebertscore_s_f1-0": 0.7511539459228516,
        "codebertscore_s_f3-0": 0.7549320459365845,
        "codebertscore_s_f1-8": 0.760744571685791,
        "codebertscore_s_f3-8": 0.7686434388160706,
        "codebertscore_s_f1-7": 0.7704351544380188,
        "codebertscore_s_f3-7": 0.7448322176933289,
        "codebertscore_s_f1-16": 0.801861047744751,
        "codebertscore_s_f3-16": 0.7853230237960815,
        "codebertscore_s_f1-2": 0.8100619912147522,
        "codebertscore_s_f3-2": 0.7958158254623413,
        "codebertscore_s_f1-11": 0.8016021251678467,
        "codebertscore_s_f3-11": 0.7859202027320862,
        "codebertscore_s_f1-1": 0.8020662069320679,
        "codebertscore_s_f3-1": 0.7857664823532104,
        "codebertscore_s_f1-10": 0.8054211139678955,
        "codebertscore_s_f3-10": 0.799662709236145,
        "codebertscore_s_f1-17": 0.8099363446235657,
        "codebertscore_s_f3-17": 0.7921018004417419,
        "codebertscore_s_f1-12": 0.0,
        "codebertscore_s_f3-12": 0.0,
        "codebertscore_s_f1-6": 0.6942886114120483,
        "codebertscore_s_f3-6": 0.6859821677207947,
        "codebertscore_s_f1-18": 0.807597815990448,
        "codebertscore_s_f3-18": 0.8226549029350281,
        "codebertscore_s_f1-15": 0.8008162379264832,
        "codebertscore_s_f3-15": 0.7861343026161194,
        "codebertscore_s_f1-13": 0.7737736105918884,
        "codebertscore_s_f3-13": 0.7796733379364014,
        "codebertscore_s_f1-9": 0.7773387432098389,
        "codebertscore_s_f3-9": 0.7827292680740356,
        "codebertscore_s_f1-4": 0.7450386881828308,
        "codebertscore_s_f3-4": 0.7513619661331177,
        "codebertscore_s_f1-14": 0.8071225881576538,
        "codebertscore_s_f3-14": 0.7801303267478943,
        "codebertscore_s_f1-5": 0.828985333442688,
        "codebertscore_s_f3-5": 0.8176636695861816,
        "codebertscore_s_f1-19": 0.7869095802307129,
        "codebertscore_s_f3-19": 0.7952092885971069,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n",
        "snippet": [
            "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n"
        ],
        "simplified": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
        "task_id": "25",
        "0": "var n = n;\n    var factors = [];\n    for (var i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            factors.push(i);\n            n = n / i;\n            i--;\n        }\n    }\n    return factors;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "const factors = []\n  for (var i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i)\n      n /= i\n    }\n  }\n  return factors\n}\nfactorize(56)",
        "grade-1": {
            "execution": 1
        },
        "2": "var result = [];\n    var d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            result.push(d);\n            n /= d;\n        }\n        d = d + 1;\n        if (d*d > n) {\n            if (n > 1) result.push(n);\n            break;\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var factorization = [];\n  var primeFactors = [];\n  var remaining = n;\n  for (var i = 2; i <= n; i++) {\n    while (remaining % i === 0) {\n      primeFactors.push(i);\n      remaining = remaining / i;\n    }\n  }\n  for (var j = 0; j < primeFactors.length; j++) {\n    factorization.push(primeFactors[j]);\n  }\n  return factorization;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "var l = [];\n    if (n <= 1) {\n        return l;\n    }\n    var i = 2;\n    while (n > 1) {\n        if (n % i == 0) {\n            l.push(i);\n            n = n / i;\n        } else {\n            i = i + 1;\n        }\n    }\n    return l;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "let result = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var factors = [];\n    for (var i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var factors=[];\n    for(var i=2; i<=n; i++){\n        if(n%i==0){\n            factors.push(i);\n            n=n/i;\n            i=1;\n        }\n    }\n    return factors;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let primeFactors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            primeFactors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return primeFactors;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var result = [];\n    if (n % 2 == 0) {\n        for (var i = 0; i < n / 2; i++) {\n            result.push(2);\n        }\n    }\n    for (var i = 3; i < n; i+=2) {\n        if (n % i == 0) {\n            for (var j = 0; j < n / i; j++) {\n                result.push(i);\n            }\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "var factors = [],\n        divisor = 2;\n\n    while(n>2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n= n/ divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return factors;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var factors = [], i;\n    for (i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "let result = [];\n    let i = 2;\n    while (n > 1){\n        if (n % i === 0){\n            result.push(i);\n            n = n / i;\n        }\n        else{\n            i = i + 1;\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var res = [];\n    while(n % 2 === 0){\n        res.push(2);\n        n /= 2;\n    }\n    for(var i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i === 0){\n            res.push(i);\n            n /= i;\n        }\n    }\n    if(n > 2){\n        res.push(n);\n    }\n    return res;\n}",
        "grade-13": {
            "execution": 1
        },
        "15": "var factors = [];\n    var divisor = 2;\n    while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n            n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "for (var arr = [], i = 2; i <= n; i++) {\n    while ((n % i) === 0) {\n      arr.push(i);\n      n /= i;\n    }\n  }\n  return arr;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var res = [];\n    var factor = 2;\n    while (n != 1){\n        if (n % factor == 0){\n            res.push(factor);\n            n = n / factor;\n        }\n        else{\n            factor++;\n        }\n    }\n    return res;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var factors = [];\n    for (var i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let result = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.3975849829311362,
        "bleu-1": 0.23978165045151367,
        "bleu-2": 0.3666371955222538,
        "bleu-3": 0.22979586857104986,
        "bleu-4": 0.5626410308719502,
        "bleu-5": 0.2841261501548102,
        "bleu-6": 0.26668459293372565,
        "bleu-7": 0.4104939831875054,
        "bleu-8": 0.49715107466163727,
        "bleu-9": 0.275749614847081,
        "bleu-10": 0.31051007647632706,
        "bleu-11": 0.30106754426986637,
        "bleu-12": 0.5056197270557289,
        "bleu-13": 0.40255943195736704,
        "bleu-15": 0.29977545249733667,
        "bleu-16": 0.31109650038483844,
        "bleu-17": 0.3126167044696281,
        "bleu-18": 0.26668459293372565,
        "bleu-19": 0.2841261501548102,
        "codebleu-0": 0.514752459514691,
        "codebleu-1": 0.4174666713127499,
        "codebleu-2": 0.6876187422935514,
        "codebleu-3": 0.5911932284640878,
        "codebleu-4": 0.6923327425515182,
        "codebleu-5": 0.43221523488771807,
        "codebleu-6": 0.448676988087007,
        "codebleu-7": 0.5010142715508189,
        "codebleu-8": 0.5742155115915276,
        "codebleu-9": 0.6333332486460169,
        "codebleu-10": 0.563622226699932,
        "codebleu-11": 0.4635909953622992,
        "codebleu-12": 0.588709263290623,
        "codebleu-13": 0.6864078804041094,
        "codebleu-15": 0.5449869645094345,
        "codebleu-16": 0.44186475441066597,
        "codebleu-17": 0.5314798036004795,
        "codebleu-18": 0.448676988087007,
        "codebleu-19": 0.43221523488771807,
        "chrf-0": 0.43165667941511726,
        "chrf-1": 0.3552111093465682,
        "chrf-2": 0.37612032455052585,
        "chrf-3": 0.34334812182497404,
        "chrf-4": 0.4839162646968452,
        "chrf-5": 0.30057454531011024,
        "chrf-6": 0.37530101810687877,
        "chrf-7": 0.44507748909628914,
        "chrf-8": 0.4597178616039665,
        "chrf-9": 0.35339771979415757,
        "chrf-10": 0.4121882394583736,
        "chrf-11": 0.38989730368979425,
        "chrf-12": 0.4658073408141665,
        "chrf-13": 0.45389300691376877,
        "chrf-15": 0.40709126333056295,
        "chrf-16": 0.30014760348588876,
        "chrf-17": 0.3972642928755561,
        "chrf-18": 0.37530101810687877,
        "chrf-19": 0.30057454531011024,
        "rougel-0": 0.6470588235294118,
        "rougel-1": 0.5669291338582677,
        "rougel-2": 0.6315789473684211,
        "rougel-3": 0.5232558139534884,
        "rougel-4": 0.6713286713286714,
        "rougel-5": 0.5984251968503937,
        "rougel-6": 0.6046511627906976,
        "rougel-7": 0.7022900763358778,
        "rougel-8": 0.6917293233082706,
        "rougel-9": 0.4632768361581921,
        "rougel-10": 0.65625,
        "rougel-11": 0.6153846153846153,
        "rougel-12": 0.7121212121212122,
        "rougel-13": 0.6395348837209303,
        "rougel-15": 0.6356589147286822,
        "rougel-16": 0.625,
        "rougel-17": 0.6461538461538462,
        "rougel-18": 0.6046511627906976,
        "rougel-19": 0.5984251968503937,
        "meteor-0": 0.4994264329772831,
        "meteor-1": 0.47336423998505617,
        "meteor-2": 0.6169349161444111,
        "meteor-3": 0.49014473515180074,
        "meteor-4": 0.6179150574373555,
        "meteor-5": 0.5049885200333868,
        "meteor-6": 0.5496766607877718,
        "meteor-7": 0.5666894664842681,
        "meteor-8": 0.5548267394270123,
        "meteor-9": 0.541064225871482,
        "meteor-10": 0.4522927356734175,
        "meteor-11": 0.5757690666919467,
        "meteor-12": 0.5717698127849453,
        "meteor-13": 0.7032973531614314,
        "meteor-15": 0.4382772732941083,
        "meteor-16": 0.5702780663734434,
        "meteor-17": 0.44511077287332995,
        "meteor-18": 0.5496766607877718,
        "meteor-19": 0.5049885200333868,
        "ruby-0": 0.48,
        "ruby-1": 0.41333333333333333,
        "ruby-2": 0.48051948051948057,
        "ruby-3": 0.4329896907216495,
        "ruby-4": 0.5066666666666666,
        "ruby-5": 0.43999999999999995,
        "ruby-6": 0.42666666666666664,
        "ruby-7": 0.56,
        "ruby-8": 0.5466666666666666,
        "ruby-9": 0.28431372549019607,
        "ruby-10": 0.56,
        "ruby-11": 0.43999999999999995,
        "ruby-12": 0.5733333333333333,
        "ruby-13": 0.4742268041237113,
        "ruby-15": 0.5333333333333333,
        "ruby-16": 0.45333333333333337,
        "ruby-17": 0.5466666666666666,
        "ruby-18": 0.42666666666666664,
        "ruby-19": 0.43999999999999995,
        "codebertscore_f1-0": 0.8827131986618042,
        "codebertscore_f3-0": 0.8618558049201965,
        "codebertscore_f1-1": 0.8558101654052734,
        "codebertscore_f3-1": 0.839419960975647,
        "codebertscore_f1-2": 0.8477718830108643,
        "codebertscore_f3-2": 0.844234049320221,
        "codebertscore_f1-3": 0.8211801648139954,
        "codebertscore_f3-3": 0.8261842131614685,
        "codebertscore_f1-4": 0.8947682976722717,
        "codebertscore_f3-4": 0.8845535516738892,
        "codebertscore_f1-5": 0.8646740317344666,
        "codebertscore_f3-5": 0.8393272161483765,
        "codebertscore_f1-6": 0.8755161166191101,
        "codebertscore_f3-6": 0.8485229015350342,
        "codebertscore_f1-7": 0.8854570984840393,
        "codebertscore_f3-7": 0.8642193078994751,
        "codebertscore_f1-8": 0.8890913724899292,
        "codebertscore_f3-8": 0.8825950622558594,
        "codebertscore_f1-9": 0.8137949109077454,
        "codebertscore_f3-9": 0.8135398626327515,
        "codebertscore_f1-10": 0.826973021030426,
        "codebertscore_f3-10": 0.8296127319335938,
        "codebertscore_f1-11": 0.8759059906005859,
        "codebertscore_f3-11": 0.8472514748573303,
        "codebertscore_f1-12": 0.9042670726776123,
        "codebertscore_f3-12": 0.8908621668815613,
        "codebertscore_f1-13": 0.8691229820251465,
        "codebertscore_f3-13": 0.8661724925041199,
        "codebertscore_f1-15": 0.8404874801635742,
        "codebertscore_f3-15": 0.8432884812355042,
        "codebertscore_f1-16": 0.8616792559623718,
        "codebertscore_f3-16": 0.832707405090332,
        "codebertscore_f1-17": 0.8674371242523193,
        "codebertscore_f3-17": 0.8500432968139648,
        "codebertscore_f1-18": 0.8755161166191101,
        "codebertscore_f3-18": 0.8485229015350342,
        "codebertscore_f1-19": 0.8646740317344666,
        "codebertscore_f3-19": 0.8393272161483765,
        "codebertscore_s_f1-0": 0.8868956565856934,
        "codebertscore_s_f3-0": 0.8652656674385071,
        "codebertscore_s_f1-1": 0.8575910925865173,
        "codebertscore_s_f3-1": 0.8431415557861328,
        "codebertscore_s_f1-2": 0.8613020777702332,
        "codebertscore_s_f3-2": 0.8573005199432373,
        "codebertscore_s_f1-3": 0.8218267560005188,
        "codebertscore_s_f3-3": 0.8286250233650208,
        "codebertscore_s_f1-4": 0.8962295651435852,
        "codebertscore_s_f3-4": 0.8847708702087402,
        "codebertscore_s_f1-5": 0.865722119808197,
        "codebertscore_s_f3-5": 0.8426066637039185,
        "codebertscore_s_f1-6": 0.8817425966262817,
        "codebertscore_s_f3-6": 0.8539265394210815,
        "codebertscore_s_f1-7": 0.8894310593605042,
        "codebertscore_s_f3-7": 0.8673925399780273,
        "codebertscore_s_f1-8": 0.8845714926719666,
        "codebertscore_s_f3-8": 0.8782216310501099,
        "codebertscore_s_f1-9": 0.8256010413169861,
        "codebertscore_s_f3-9": 0.823255181312561,
        "codebertscore_s_f1-10": 0.8354396224021912,
        "codebertscore_s_f3-10": 0.8379462361335754,
        "codebertscore_s_f1-11": 0.88084876537323,
        "codebertscore_s_f3-11": 0.8529905676841736,
        "codebertscore_s_f1-12": 0.9062576293945312,
        "codebertscore_s_f3-12": 0.8929338455200195,
        "codebertscore_s_f1-13": 0.8741573691368103,
        "codebertscore_s_f3-13": 0.8719771504402161,
        "codebertscore_s_f1-15": 0.8488172292709351,
        "codebertscore_s_f3-15": 0.8504950404167175,
        "codebertscore_s_f1-16": 0.8684427738189697,
        "codebertscore_s_f3-16": 0.8405027985572815,
        "codebertscore_s_f1-17": 0.8810949325561523,
        "codebertscore_s_f3-17": 0.8620645403862,
        "codebertscore_s_f1-18": 0.8817425966262817,
        "codebertscore_s_f3-18": 0.8539265394210815,
        "codebertscore_s_f1-19": 0.865722119808197,
        "codebertscore_s_f3-19": 0.8426066637039185,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nfunction below_zero(operations){\n",
        "snippet": [
            "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n"
        ],
        "simplified": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
        "task_id": "3",
        "3": "let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        if(operations[i] > 0){\n            balance += operations[i];\n        }\n        else if(operations[i] < 0){\n            balance -= Math.abs(operations[i]);\n        }\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var balance = 0;\n  for (var i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var bal = 0;\n    for(var i = 0; i < operations.length; i++){\n        bal += operations[i];\n        if(bal < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "}",
        "grade-16": {
            "execution": 0
        },
        "2": "return operations.some(op => op < 0);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var balance = 0;\n    for(i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let sum = 0;\n    for(let i = 0; i < operations.length; i++){\n        sum += operations[i];\n        if(sum < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        if(operations[i] > 0){\n            balance += operations[i];\n        }\n        else if(operations[i] < 0){\n            balance -= operations[i];\n        }\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let total = 0;\n    for(let i=0; i<operations.length; i++){\n        if(operations[i] < 0){\n            total -= operations[i];\n        } else {\n            total += operations[i];\n        }\n        if(total < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var balance = 0;\n    for(var x = 0; x < operations.length; x++){\n        if(operations[x] > 0){\n            balance += operations[x];\n        }else{\n            balance -= operations[x];\n        }\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(let i = 0; i < operations.length; i++){\n        if(operations[i] < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var below = false;\n\tvar balance = 0;\n\tfor(i=0; i<operations.length; i++){\n\t\tbalance = balance + operations[i];\n\t\tif(balance < 0){\n\t\t\tbelow = true;\n\t\t}\n\t}\n\treturn below;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for (var i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var sum = 0;\n  for (var i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let balance = 0;\n  for (let i = 0; i < operations.length; i++){\n    if (operations[i] < 0){\n      balance = balance + operations[i];\n      if (balance < 0){\n        return true;\n      }\n    }\n    else {\n      balance = balance + operations[i];\n    }\n  }\n  return false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var account_balance = 0;\n    for (var i = 0; i < operations.length; i++){\n        account_balance += operations[i];\n        if (account_balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let result = 0;\n\tfor(let i = 0; i < operations.length; i++){\n\t\tresult += operations[i];\n\t\tif(result < 0){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.27791278233791616,
        "bleu-0": 0.538062702518006,
        "bleu-8": 0.538062702518006,
        "bleu-7": 0.3881828517941592,
        "bleu-16": 4.658886145103399e-15,
        "bleu-2": 0.03879618019582161,
        "bleu-11": 0.5501615554665087,
        "bleu-1": 0.38453753871439794,
        "bleu-10": 0.2960807784845402,
        "bleu-17": 0.2514866132105882,
        "bleu-12": 0.3506026552655136,
        "bleu-6": 0.42352567907217137,
        "bleu-18": 0.34984148459022957,
        "bleu-15": 0.4276988497719975,
        "bleu-13": 0.5158202078448899,
        "bleu-9": 0.3881828517941592,
        "bleu-4": 0.538062702518006,
        "bleu-14": 0.31739014747289707,
        "bleu-5": 0.3881828517941592,
        "bleu-19": 0.38453753871439794,
        "codebleu-3": 0.751874352611875,
        "codebleu-0": 0.812454894864112,
        "codebleu-8": 0.812454894864112,
        "codebleu-7": 0.7774749197434709,
        "codebleu-16": 0.0138888888888889,
        "codebleu-2": 0.17864921848875542,
        "codebleu-11": 0.8144713703555291,
        "codebleu-1": 0.7735340342301773,
        "codebleu-10": 0.7549023519696456,
        "codebleu-17": 0.7374699910906536,
        "codebleu-12": 0.7673226647664745,
        "codebleu-6": 0.6655876131786952,
        "codebleu-18": 0.7227513585428159,
        "codebleu-15": 0.6696164749619995,
        "codebleu-13": 0.8054144790852593,
        "codebleu-9": 0.7774749197434709,
        "codebleu-4": 0.812454894864112,
        "codebleu-14": 0.758453913467705,
        "codebleu-5": 0.7774749197434709,
        "codebleu-19": 0.7735340342301773,
        "chrf-3": 0.6470590635915304,
        "chrf-0": 0.7839005999455811,
        "chrf-8": 0.7839005999455811,
        "chrf-7": 0.5968135244910101,
        "chrf-16": 0.013850415512465375,
        "chrf-2": 0.18622836270731086,
        "chrf-11": 0.7890444137187695,
        "chrf-1": 0.5115636518779726,
        "chrf-10": 0.6592775481909265,
        "chrf-17": 0.48101850416217995,
        "chrf-12": 0.7084562488819401,
        "chrf-6": 0.4940911914317361,
        "chrf-18": 0.6191878928774949,
        "chrf-15": 0.4998340871581042,
        "chrf-13": 0.7547761398255775,
        "chrf-9": 0.5170785084048364,
        "chrf-4": 0.7839005999455811,
        "chrf-14": 0.6446866246216655,
        "chrf-5": 0.690864095048627,
        "chrf-19": 0.5015215282562611,
        "rougel-3": 0.4957264957264957,
        "rougel-0": 0.7407407407407407,
        "rougel-8": 0.7407407407407407,
        "rougel-7": 0.6666666666666666,
        "rougel-16": 0.05714285714285715,
        "rougel-2": 0.37499999999999994,
        "rougel-11": 0.75,
        "rougel-1": 0.6419753086419752,
        "rougel-10": 0.5178571428571428,
        "rougel-17": 0.5048543689320389,
        "rougel-12": 0.5825242718446603,
        "rougel-6": 0.5915492957746479,
        "rougel-18": 0.6206896551724137,
        "rougel-15": 0.619718309859155,
        "rougel-13": 0.7160493827160493,
        "rougel-9": 0.6666666666666666,
        "rougel-4": 0.7407407407407407,
        "rougel-14": 0.5333333333333333,
        "rougel-5": 0.6666666666666666,
        "rougel-19": 0.6419753086419752,
        "meteor-3": 0.7119233132303628,
        "meteor-0": 0.841800440667296,
        "meteor-8": 0.841800440667296,
        "meteor-7": 0.7507082152974505,
        "meteor-16": 0.016286644951140065,
        "meteor-2": 0.2776342975206611,
        "meteor-11": 0.8468592171717171,
        "meteor-1": 0.7258159143101395,
        "meteor-10": 0.7284544688862465,
        "meteor-17": 0.659250493096647,
        "meteor-12": 0.7593481481481481,
        "meteor-6": 0.711860058309038,
        "meteor-18": 0.771415512107552,
        "meteor-15": 0.7364534994048337,
        "meteor-13": 0.8157528640192947,
        "meteor-9": 0.7507082152974505,
        "meteor-4": 0.841800440667296,
        "meteor-14": 0.6610640988844277,
        "meteor-5": 0.7507082152974505,
        "meteor-19": 0.7258159143101395,
        "ruby-3": 0.3493975903614458,
        "ruby-0": 0.6382978723404256,
        "ruby-8": 0.6382978723404256,
        "ruby-7": 0.574468085106383,
        "ruby-16": 0.02941176470588236,
        "ruby-2": 0.23529411764705888,
        "ruby-11": 0.6521739130434783,
        "ruby-1": 0.5531914893617021,
        "ruby-10": 0.3717948717948718,
        "ruby-17": 0.37681159420289856,
        "ruby-12": 0.4347826086956522,
        "ruby-6": 0.45945945945945943,
        "ruby-18": 0.5094339622641509,
        "ruby-15": 0.4864864864864865,
        "ruby-13": 0.6170212765957447,
        "ruby-9": 0.574468085106383,
        "ruby-4": 0.6382978723404256,
        "ruby-14": 0.3943661971830986,
        "ruby-5": 0.574468085106383,
        "ruby-19": 0.5531914893617021,
        "codebertscore_f1-3": 0.8339799046516418,
        "codebertscore_f3-3": 0.8641433715820312,
        "codebertscore_f1-0": 0.9029695987701416,
        "codebertscore_f3-0": 0.9180226922035217,
        "codebertscore_f1-8": 0.9126530289649963,
        "codebertscore_f3-8": 0.9294593930244446,
        "codebertscore_f1-7": 0.8853745460510254,
        "codebertscore_f3-7": 0.8992873430252075,
        "codebertscore_f1-16": 0.0,
        "codebertscore_f3-16": 0.0,
        "codebertscore_f1-2": 0.7818677425384521,
        "codebertscore_f3-2": 0.746127724647522,
        "codebertscore_f1-11": 0.8976754546165466,
        "codebertscore_f3-11": 0.9117076992988586,
        "codebertscore_f1-1": 0.8851110339164734,
        "codebertscore_f3-1": 0.8990803956985474,
        "codebertscore_f1-10": 0.8482935428619385,
        "codebertscore_f3-10": 0.8721656203269958,
        "codebertscore_f1-17": 0.8385205268859863,
        "codebertscore_f3-17": 0.8558943867683411,
        "codebertscore_f1-12": 0.8618452548980713,
        "codebertscore_f3-12": 0.8811414241790771,
        "codebertscore_f1-6": 0.8356994986534119,
        "codebertscore_f3-6": 0.837574303150177,
        "codebertscore_f1-18": 0.8495163917541504,
        "codebertscore_f3-18": 0.8637235164642334,
        "codebertscore_f1-15": 0.836719274520874,
        "codebertscore_f3-15": 0.8385142087936401,
        "codebertscore_f1-13": 0.9014056324958801,
        "codebertscore_f3-13": 0.9167675971984863,
        "codebertscore_f1-9": 0.8975159525871277,
        "codebertscore_f3-9": 0.9127542972564697,
        "codebertscore_f1-4": 0.9029695987701416,
        "codebertscore_f3-4": 0.9180226922035217,
        "codebertscore_f1-14": 0.8664113879203796,
        "codebertscore_f3-14": 0.886186957359314,
        "codebertscore_f1-5": 0.8931122422218323,
        "codebertscore_f3-5": 0.909485399723053,
        "codebertscore_f1-19": 0.8777119517326355,
        "codebertscore_f3-19": 0.8899863362312317,
        "codebertscore_s_f1-3": 0.8397253155708313,
        "codebertscore_s_f3-3": 0.8670051693916321,
        "codebertscore_s_f1-0": 0.9081142544746399,
        "codebertscore_s_f3-0": 0.922764003276825,
        "codebertscore_s_f1-8": 0.9181780815124512,
        "codebertscore_s_f3-8": 0.9333927035331726,
        "codebertscore_s_f1-7": 0.8943643569946289,
        "codebertscore_s_f3-7": 0.9076663255691528,
        "codebertscore_s_f1-16": 0.0,
        "codebertscore_s_f3-16": 0.0,
        "codebertscore_s_f1-2": 0.8021051287651062,
        "codebertscore_s_f3-2": 0.7621145248413086,
        "codebertscore_s_f1-11": 0.9013395309448242,
        "codebertscore_s_f3-11": 0.9164888262748718,
        "codebertscore_s_f1-1": 0.8838933706283569,
        "codebertscore_s_f3-1": 0.8978440165519714,
        "codebertscore_s_f1-10": 0.8510953187942505,
        "codebertscore_s_f3-10": 0.8737829923629761,
        "codebertscore_s_f1-17": 0.8405089378356934,
        "codebertscore_s_f3-17": 0.8565658330917358,
        "codebertscore_s_f1-12": 0.8693128824234009,
        "codebertscore_s_f3-12": 0.8884881138801575,
        "codebertscore_s_f1-6": 0.8559784889221191,
        "codebertscore_s_f3-6": 0.8549414277076721,
        "codebertscore_s_f1-18": 0.8637827634811401,
        "codebertscore_s_f3-18": 0.8788958191871643,
        "codebertscore_s_f1-15": 0.860922634601593,
        "codebertscore_s_f3-15": 0.8596716523170471,
        "codebertscore_s_f1-13": 0.9015998840332031,
        "codebertscore_s_f3-13": 0.917163610458374,
        "codebertscore_s_f1-9": 0.9013426899909973,
        "codebertscore_s_f3-9": 0.9148908257484436,
        "codebertscore_s_f1-4": 0.9081142544746399,
        "codebertscore_s_f3-4": 0.922764003276825,
        "codebertscore_s_f1-14": 0.8705222606658936,
        "codebertscore_s_f3-14": 0.8891453742980957,
        "codebertscore_s_f1-5": 0.8935943841934204,
        "codebertscore_s_f3-5": 0.90998774766922,
        "codebertscore_s_f1-19": 0.8822949528694153,
        "codebertscore_s_f3-19": 0.8939492106437683,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n",
        "snippet": [
            "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n"
        ],
        "simplified": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "task_id": "72",
        "3": "let sum = 0;\n    let b = true;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n        if(q[i] !== q[q.length - 1 - i]){\n            b = false;\n        }\n    }\n    return b && sum <= w;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "const sum = q.reduce((total, num) => total + num);\n    const isBalanced = q.join(\"\") === q.reverse().join(\"\");\n    return isBalanced && sum <= w ? true : false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(q.length === 1) return true;\n    if(q.length === 2 && q[0] === q[1]) return true;\n    if(q.length % 2 === 0) return false;\n    if(sum(q) > w) return false;\n    let i = 0;\n    let j = q.length - 1;\n    while(i < j){\n        if(q[i] !== q[j]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(isPalindrome(q) && getSum(q)<=w){\n        return true;\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(q.length % 2 === 0) {\n    var first = q.slice(0, q.length/2);\n    var second = q.slice(q.length/2);\n    second.reverse();\n    if(first.toString() !== second.toString()) {\n      return false;\n    }\n  }\n  var sum = 0;\n  for(var i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if(sum <= w) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(q.length == 1){\n        return true;\n    }\n    if(sum(q) > w){\n        return false;\n    }\n    else{\n        return checkPalindrome(q);\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum = sum + q[i];\n    }\n    let arr = q.toString().split(',').join('');\n    let rev = q.toString().split(',').reverse().join('');\n    if(sum <= w && arr === rev){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let sum = 0;\n    let first = q[0];\n    let second = q[q.length-1];\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    return sum <= w && first === second;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "const sumOf = q.reduce((a,b) => a + b, 0);\n    if(w < sumOf){\n        return false;\n    }else if(q.join('') == q.reverse().join('')){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let sum = 0;\n    let balanced = true;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n        if(q[i] !== q[q.length -1 -i]){\n            balanced = false;\n        }\n    }\n    if(sum <= w && balanced){\n        return true;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var sum = 0;\n    var n = q.length;\n    for(var i = 0; i < n; i++){\n        sum += q[i];\n    }\n    if(sum <= w){\n        var c = 0;\n        for(var i = 0; i < n; i++){\n            if(q[i] == q[n-i-1]){\n                c++;\n            }\n        }\n        if(c == n){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (q.length === 1){\n        return true;\n    }\n    let sum = 0;\n    for (let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    if (sum > w){\n        return false;\n    }\n    let reverse = q.reverse();\n    let newSum = 0;\n    for (let i = 0; i < reverse.length; i++){\n        newSum += reverse[i];\n    }\n    if (newSum === sum){\n        return true;\n    }\n    return false;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "for(let i = 0; i<q.length/2; i++){\n        if(q[i] !== q[q.length-1-i]){\n            return false;\n        }\n    }\n    if(q.reduce((a,b)=>a+b)<=w){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    let qStr = \"\";\n    let rStr = \"\";\n    for(let i = 0; i < q.length; i++){\n        qStr += q[i].toString();\n        rStr += q[q.length - i - 1].toString();\n    }\n    if(sum <= w && qStr === rStr){\n        return true;\n    }\n    return false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let palindrome = isPalindrome(q);\n    let tot = 0;\n    for(i=0; i<q.length; i++){\n        tot += q[i];\n    }\n    if(palindrome === true && tot <= w){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let palindrome = q.slice(0, Math.floor(q.length/2)).join(\"\") === q.slice(Math.ceil(q.length/2)).reverse().join(\"\");\n\tlet totalWeight = q.reduce((acc, curr) => acc + curr);\n\treturn palindrome && totalWeight <= w;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = q.reduce((a,b) => a + b, 0);\n    return sum <= w && q.join(\"\") === q.reverse().join(\"\");\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(q.length === 1){\n        return true;\n    }\n    let sum = 0;\n    let i = 0;\n    while(i < q.length){\n        sum += q[i];\n        i++;\n    }\n    if(sum <= w){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(q.length > 1){\n        if(q[0] == q[q.length-1]){\n            q.pop();\n            q.shift();\n            will_it_fly(q, w);\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        if(w >= q[0]){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.2582091644814481,
        "bleu-0": 0.10086657544795434,
        "bleu-8": 0.45621500478137333,
        "bleu-7": 0.03602292572685673,
        "bleu-16": 0.15751532302637428,
        "bleu-2": 0.10791011426786656,
        "bleu-11": 0.1266198648692831,
        "bleu-1": 0.18042145099904403,
        "bleu-10": 0.19895162220120752,
        "bleu-17": 0.27906617564996866,
        "bleu-12": 0.20430051634294646,
        "bleu-6": 2.678636961808079e-33,
        "bleu-18": 0.15349527171711314,
        "bleu-15": 0.3916286578130839,
        "bleu-13": 0.1309195833009812,
        "bleu-9": 0.17387131837038527,
        "bleu-4": 0.10847282584363556,
        "bleu-14": 0.10116894475743379,
        "bleu-5": 0.26110899299727613,
        "bleu-19": 0.24262053846681128,
        "codebleu-3": 0.5173035961000246,
        "codebleu-0": 0.3680627463656345,
        "codebleu-8": 0.7664252422299174,
        "codebleu-7": 0.13957215650407803,
        "codebleu-16": 0.5703647033704393,
        "codebleu-2": 0.2502771249613772,
        "codebleu-11": 0.5327544011542262,
        "codebleu-1": 0.4357723926908547,
        "codebleu-10": 0.4924340069798398,
        "codebleu-17": 0.5585982566893248,
        "codebleu-12": 0.5719317059948523,
        "codebleu-6": 0.006230529595015575,
        "codebleu-18": 0.5962834798656248,
        "codebleu-15": 0.6438695738099688,
        "codebleu-13": 0.5475987467495405,
        "codebleu-9": 0.4303125294825067,
        "codebleu-4": 0.4585772466748738,
        "codebleu-14": 0.33296485575165685,
        "codebleu-5": 0.4878935350972096,
        "codebleu-19": 0.532601865445403,
        "chrf-3": 0.29060882534496785,
        "chrf-0": 0.21888030372746886,
        "chrf-8": 0.6147940751481826,
        "chrf-7": 0.23788492792232463,
        "chrf-16": 0.37241900581062565,
        "chrf-2": 0.3193279807325579,
        "chrf-11": 0.3197556697517486,
        "chrf-1": 0.22625351200964278,
        "chrf-10": 0.3793645811436015,
        "chrf-17": 0.3829188087722699,
        "chrf-12": 0.4076471356250784,
        "chrf-6": 0.00945179584120983,
        "chrf-18": 0.37397035368547543,
        "chrf-15": 0.4982708733652225,
        "chrf-13": 0.3072795120489469,
        "chrf-9": 0.31396473658722324,
        "chrf-4": 0.23778424210095941,
        "chrf-14": 0.18298348839957387,
        "chrf-5": 0.3844507894095415,
        "chrf-19": 0.3952146596317664,
        "rougel-3": 0.4161073825503355,
        "rougel-0": 0.3676470588235294,
        "rougel-8": 0.6424870466321243,
        "rougel-7": 0.2912621359223301,
        "rougel-16": 0.37,
        "rougel-2": 0.34782608695652173,
        "rougel-11": 0.2918918918918919,
        "rougel-1": 0.3661971830985915,
        "rougel-10": 0.4383561643835617,
        "rougel-17": 0.4050632911392405,
        "rougel-12": 0.38541666666666674,
        "rougel-6": 0.025974025974025976,
        "rougel-18": 0.358974358974359,
        "rougel-15": 0.42580645161290326,
        "rougel-13": 0.31999999999999995,
        "rougel-9": 0.3943661971830986,
        "rougel-4": 0.2839506172839506,
        "rougel-14": 0.3937007874015748,
        "rougel-5": 0.4507042253521127,
        "rougel-19": 0.39999999999999997,
        "meteor-3": 0.4435051037158544,
        "meteor-0": 0.27004447034610213,
        "meteor-8": 0.799666097851059,
        "meteor-7": 0.20235942478257127,
        "meteor-16": 0.4609181621287129,
        "meteor-2": 0.2871245518513881,
        "meteor-11": 0.3464229351500184,
        "meteor-1": 0.3546875,
        "meteor-10": 0.32978385251112524,
        "meteor-17": 0.47321828603210403,
        "meteor-12": 0.46552734375,
        "meteor-6": 0.0072992700729927005,
        "meteor-18": 0.5108631949978287,
        "meteor-15": 0.4534170299041739,
        "meteor-13": 0.42722252378317216,
        "meteor-9": 0.3358163265306122,
        "meteor-4": 0.2527106381273048,
        "meteor-14": 0.2824368040660593,
        "meteor-5": 0.49727176701373166,
        "meteor-19": 0.4606810356192854,
        "ruby-3": 0.1578947368421053,
        "ruby-0": 0.26315789473684215,
        "ruby-8": 0.5299145299145299,
        "ruby-7": 0.1842105263157895,
        "ruby-16": 0.24193548387096775,
        "ruby-2": 0.21052631578947367,
        "ruby-11": 0.1651376146788991,
        "ruby-1": 0.21052631578947367,
        "ruby-10": 0.25,
        "ruby-17": 0.14634146341463417,
        "ruby-12": 0.2586206896551724,
        "ruby-6": 0.013157894736842146,
        "ruby-18": 0.2184873949579832,
        "ruby-15": 0.16455696202531644,
        "ruby-13": 0.2016129032258065,
        "ruby-9": 0.21052631578947367,
        "ruby-4": 0.17441860465116277,
        "ruby-14": 0.3026315789473685,
        "ruby-5": 0.25,
        "ruby-19": 0.189873417721519,
        "codebertscore_f1-3": 0.8326085805892944,
        "codebertscore_f3-3": 0.8244184255599976,
        "codebertscore_f1-0": 0.7768943905830383,
        "codebertscore_f3-0": 0.7710971236228943,
        "codebertscore_f1-8": 0.8755528330802917,
        "codebertscore_f3-8": 0.8732845783233643,
        "codebertscore_f1-7": 0.7436676621437073,
        "codebertscore_f3-7": 0.7292283177375793,
        "codebertscore_f1-16": 0.7992607355117798,
        "codebertscore_f3-16": 0.810024619102478,
        "codebertscore_f1-2": 0.7708560824394226,
        "codebertscore_f3-2": 0.7478328347206116,
        "codebertscore_f1-11": 0.7766036987304688,
        "codebertscore_f3-11": 0.7906569838523865,
        "codebertscore_f1-1": 0.8120765686035156,
        "codebertscore_f3-1": 0.7959170937538147,
        "codebertscore_f1-10": 0.8052191734313965,
        "codebertscore_f3-10": 0.801793098449707,
        "codebertscore_f1-17": 0.8291270136833191,
        "codebertscore_f3-17": 0.8268091678619385,
        "codebertscore_f1-12": 0.7965962886810303,
        "codebertscore_f3-12": 0.7990105748176575,
        "codebertscore_f1-6": 0.0,
        "codebertscore_f3-6": 0.0,
        "codebertscore_f1-18": 0.8105520009994507,
        "codebertscore_f3-18": 0.8184435367584229,
        "codebertscore_f1-15": 0.8488114476203918,
        "codebertscore_f3-15": 0.849181592464447,
        "codebertscore_f1-13": 0.7988620400428772,
        "codebertscore_f3-13": 0.8103567957878113,
        "codebertscore_f1-9": 0.7880856990814209,
        "codebertscore_f3-9": 0.7989698648452759,
        "codebertscore_f1-4": 0.7445575594902039,
        "codebertscore_f3-4": 0.75286865234375,
        "codebertscore_f1-14": 0.7802876830101013,
        "codebertscore_f3-14": 0.756646454334259,
        "codebertscore_f1-5": 0.8497232794761658,
        "codebertscore_f3-5": 0.8367535471916199,
        "codebertscore_f1-19": 0.7574816346168518,
        "codebertscore_f3-19": 0.741561770439148,
        "codebertscore_s_f1-3": 0.9548532366752625,
        "codebertscore_s_f3-3": 0.9526265263557434,
        "codebertscore_s_f1-0": 0.9449366331100464,
        "codebertscore_s_f3-0": 0.9363740682601929,
        "codebertscore_s_f1-8": 0.9623315930366516,
        "codebertscore_s_f3-8": 0.9648931622505188,
        "codebertscore_s_f1-7": 0.945138156414032,
        "codebertscore_s_f3-7": 0.9267935752868652,
        "codebertscore_s_f1-16": 0.9384556412696838,
        "codebertscore_s_f3-16": 0.9477437734603882,
        "codebertscore_s_f1-2": 0.9487460851669312,
        "codebertscore_s_f3-2": 0.9340413212776184,
        "codebertscore_s_f1-11": 0.9380160570144653,
        "codebertscore_s_f3-11": 0.944868266582489,
        "codebertscore_s_f1-1": 0.9502100944519043,
        "codebertscore_s_f3-1": 0.9449616074562073,
        "codebertscore_s_f1-10": 0.9515994191169739,
        "codebertscore_s_f3-10": 0.9474234580993652,
        "codebertscore_s_f1-17": 0.9542283415794373,
        "codebertscore_s_f3-17": 0.9534961581230164,
        "codebertscore_s_f1-12": 0.941237211227417,
        "codebertscore_s_f3-12": 0.9475424289703369,
        "codebertscore_s_f1-6": 0.9436297416687012,
        "codebertscore_s_f3-6": 0.9076560735702515,
        "codebertscore_s_f1-18": 0.9411137700080872,
        "codebertscore_s_f3-18": 0.9495731592178345,
        "codebertscore_s_f1-15": 0.9588156342506409,
        "codebertscore_s_f3-15": 0.9591843485832214,
        "codebertscore_s_f1-13": 0.934352695941925,
        "codebertscore_s_f3-13": 0.9467213153839111,
        "codebertscore_s_f1-9": 0.9420358538627625,
        "codebertscore_s_f3-9": 0.9457177519798279,
        "codebertscore_s_f1-4": 0.9251748919487,
        "codebertscore_s_f3-4": 0.9306543469429016,
        "codebertscore_s_f1-14": 0.9501824975013733,
        "codebertscore_s_f3-14": 0.9355082511901855,
        "codebertscore_s_f1-5": 0.961592435836792,
        "codebertscore_s_f3-5": 0.9557737112045288,
        "codebertscore_s_f1-19": 0.9432997703552246,
        "codebertscore_s_f3-19": 0.9347949028015137,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nfunction digitSum(s){\n",
        "snippet": [
            "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n"
        ],
        "simplified": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
        "task_id": "66",
        "3": "let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      total += s.charCodeAt(i);\n    }\n  }\n  return total;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return [...s].reduce((acc,v)=>acc+v.charCodeAt(),0)\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (s === '') return 0;\n  s = s.toUpperCase();\n  return s.split('').reduce((acc, curr) => {\n    const num = curr.charCodeAt(0);\n    if (num >= 65 && num <= 90) {\n      return acc + num;\n    }\n    return acc;\n  }, 0);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// code code code\n    let res = [];\n    let sum = 0;\n    let code = [];\n    res = s.split('');\n    for(let i = 0; i < res.length; i++){\n        if(res[i] === res[i].toUpperCase()){\n            code.push(res[i].charCodeAt());\n        }\n    }\n    for(let i = 0; i < code.length; i++){\n        sum += code[i];\n    }\n    return sum;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(s == \"\"){\n        return 0;\n    }\n    var sum = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return s.split('').reduce((sum, ch) => sum + (ch >= 'A' && ch <= 'Z' ? ch.charCodeAt(0) : 0), 0);\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let upperArray = s.split('').filter(element => element.toUpperCase() === element)\n    let upperCodes = upperArray.map(element => element.charCodeAt(0))\n    let sum = upperCodes.reduce((acc,element) => acc + element)\n    return sum\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(alpha.includes(s[i])) sum += s.charCodeAt(i);\n  }\n  return sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return s.split('').reduce((acc,val)=>{\n    if(val.charCodeAt(0)>=65 && val.charCodeAt(0)<=90){\n      acc += val.charCodeAt(0)\n    }\n    return acc\n  },0)\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var sum = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return s.split('').reduce((acc, char) => char.toUpperCase() === char ? acc + char.charCodeAt(0) : acc, 0)\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var sum = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] == s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "const str = s.toUpperCase().split('');\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    sum += str[i].charCodeAt();\n  }\n  return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var sum = 0;\n  for (var i = 0; i < s.length; i++) {\n    if(s[i] == s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//your code here.\n}\nmodule.exports = digitSum",
        "grade-4": {
            "execution": 0
        },
        "14": "let array = s.split('');\n    let sum = 0;\n    for(let i = 0; i < array.length; i++){\n        if(array[i] === array[i].toUpperCase()){\n            sum += array[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        let asc = s.charCodeAt(i);\n        if (asc > 64 && asc < 91) {\n            result += asc;\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let sum = 0;\n    s.split('').map(x => x.charCodeAt(0) >= 65 && x.charCodeAt(0) <= 90 ? sum += x.charCodeAt(0) : 0)\n    return sum;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.13362140918068052,
        "bleu-0": 0.0923254658352563,
        "bleu-8": 0.4490312126714687,
        "bleu-7": 0.11682254118556797,
        "bleu-16": 0.12494772432543538,
        "bleu-2": 0.20601291845887132,
        "bleu-11": 0.37594440223101294,
        "bleu-1": 0.250999019492386,
        "bleu-10": 0.11962819689387574,
        "bleu-17": 0.37669040891287464,
        "bleu-12": 0.12255111808245783,
        "bleu-6": 0.35032883899170186,
        "bleu-18": 0.12392650641261244,
        "bleu-15": 0.19083738647688303,
        "bleu-13": 0.12392650641261244,
        "bleu-9": 0.12494772432543538,
        "bleu-4": 0.0008001340564114267,
        "bleu-14": 0.22432768748758108,
        "bleu-5": 0.14780339095989836,
        "bleu-19": 0.283824449176116,
        "codebleu-3": 0.4591851717783837,
        "codebleu-0": 0.22984920717346383,
        "codebleu-8": 0.7255191305702843,
        "codebleu-7": 0.5138402512340889,
        "codebleu-16": 0.41622022183396995,
        "codebleu-2": 0.5181685257984068,
        "codebleu-11": 0.5246494430150069,
        "codebleu-1": 0.5176844791000401,
        "codebleu-10": 0.4295304181491717,
        "codebleu-17": 0.6237413513339845,
        "codebleu-12": 0.4761073642514764,
        "codebleu-6": 0.4878313326695244,
        "codebleu-18": 0.40542738023727304,
        "codebleu-15": 0.4394313614525954,
        "codebleu-13": 0.40542738023727304,
        "codebleu-9": 0.41622022183396995,
        "codebleu-4": 0.0807368265851648,
        "codebleu-14": 0.520316541954302,
        "codebleu-5": 0.43272251225390074,
        "codebleu-19": 0.5554562618463013,
        "chrf-3": 0.1910278197883178,
        "chrf-0": 0.19794830775659034,
        "chrf-8": 0.4813979236905594,
        "chrf-7": 0.2570851325049618,
        "chrf-16": 0.19647472211371292,
        "chrf-2": 0.24090374286287358,
        "chrf-11": 0.35428498844711387,
        "chrf-1": 0.2971359072245781,
        "chrf-10": 0.1959837342701017,
        "chrf-17": 0.38726571262898823,
        "chrf-12": 0.22662031299468433,
        "chrf-6": 0.4123429464044104,
        "chrf-18": 0.19675486530760214,
        "chrf-15": 0.2450514916145643,
        "chrf-13": 0.19675486530760214,
        "chrf-9": 0.19647472211371292,
        "chrf-4": 0.056788742393839776,
        "chrf-14": 0.2775994197557781,
        "chrf-5": 0.21865888230167765,
        "chrf-19": 0.2973697631986117,
        "rougel-3": 0.3384615384615385,
        "rougel-0": 0.42105263157894735,
        "rougel-8": 0.6666666666666666,
        "rougel-7": 0.31351351351351353,
        "rougel-16": 0.3464566929133858,
        "rougel-2": 0.4172661870503597,
        "rougel-11": 0.5470085470085471,
        "rougel-1": 0.3795620437956205,
        "rougel-10": 0.3548387096774193,
        "rougel-17": 0.534351145038168,
        "rougel-12": 0.3731343283582089,
        "rougel-6": 0.5585585585585586,
        "rougel-18": 0.3492063492063492,
        "rougel-15": 0.3548387096774193,
        "rougel-13": 0.3492063492063492,
        "rougel-9": 0.3464566929133858,
        "rougel-4": 0.07692307692307693,
        "rougel-14": 0.35460992907801425,
        "rougel-5": 0.45528455284552843,
        "rougel-19": 0.5079365079365079,
        "meteor-3": 0.40183738832387483,
        "meteor-0": 0.28892024457434656,
        "meteor-8": 0.6943270002830187,
        "meteor-7": 0.3773271276595745,
        "meteor-16": 0.354266282325858,
        "meteor-2": 0.4044573537509616,
        "meteor-11": 0.5978278281485279,
        "meteor-1": 0.3291523001894822,
        "meteor-10": 0.37235391050830263,
        "meteor-17": 0.5597475486054466,
        "meteor-12": 0.39876992241141856,
        "meteor-6": 0.5063559297507985,
        "meteor-18": 0.32943111455108365,
        "meteor-15": 0.3957545294332567,
        "meteor-13": 0.32943111455108365,
        "meteor-9": 0.354266282325858,
        "meteor-4": 0.04180602006688963,
        "meteor-14": 0.4598924654577761,
        "meteor-5": 0.43275462595613673,
        "meteor-19": 0.5526123232874602,
        "ruby-3": 0.1384615384615384,
        "ruby-0": 0.3076923076923077,
        "ruby-8": 0.5731707317073171,
        "ruby-7": 0.21666666666666667,
        "ruby-16": 0.19999999999999996,
        "ruby-2": 0.2567567567567568,
        "ruby-11": 0.36923076923076925,
        "ruby-1": 0.20833333333333337,
        "ruby-10": 0.15384615384615385,
        "ruby-17": 0.28787878787878785,
        "ruby-12": 0.24637681159420288,
        "ruby-6": 0.41538461538461535,
        "ruby-18": 0.19999999999999996,
        "ruby-15": 0.2153846153846154,
        "ruby-13": 0.19999999999999996,
        "ruby-9": 0.19999999999999996,
        "ruby-4": 0.0461538461538461,
        "ruby-14": 0.22368421052631582,
        "ruby-5": 0.3384615384615385,
        "ruby-19": 0.3076923076923077,
        "codebertscore_f1-3": 0.7779318690299988,
        "codebertscore_f3-3": 0.7775394916534424,
        "codebertscore_f1-0": 0.8210179209709167,
        "codebertscore_f3-0": 0.782386302947998,
        "codebertscore_f1-8": 0.8840519189834595,
        "codebertscore_f3-8": 0.8941383957862854,
        "codebertscore_f1-7": 0.7438973784446716,
        "codebertscore_f3-7": 0.7629202008247375,
        "codebertscore_f1-16": 0.7711172699928284,
        "codebertscore_f3-16": 0.7694379687309265,
        "codebertscore_f1-2": 0.7821911573410034,
        "codebertscore_f3-2": 0.7789445519447327,
        "codebertscore_f1-11": 0.8624396324157715,
        "codebertscore_f3-11": 0.8486717939376831,
        "codebertscore_f1-1": 0.8104285597801208,
        "codebertscore_f3-1": 0.816853404045105,
        "codebertscore_f1-10": 0.7264742851257324,
        "codebertscore_f3-10": 0.7607089281082153,
        "codebertscore_f1-17": 0.8678358197212219,
        "codebertscore_f3-17": 0.8521838188171387,
        "codebertscore_f1-12": 0.7950425148010254,
        "codebertscore_f3-12": 0.787807047367096,
        "codebertscore_f1-6": 0.8557153940200806,
        "codebertscore_f3-6": 0.839669406414032,
        "codebertscore_f1-18": 0.7659698724746704,
        "codebertscore_f3-18": 0.764660120010376,
        "codebertscore_f1-15": 0.7811843752861023,
        "codebertscore_f3-15": 0.7857456803321838,
        "codebertscore_f1-13": 0.7641149163246155,
        "codebertscore_f3-13": 0.7631782293319702,
        "codebertscore_f1-9": 0.7723379731178284,
        "codebertscore_f3-9": 0.7700705528259277,
        "codebertscore_f1-4": 0.607143223285675,
        "codebertscore_f3-4": 0.6178004741668701,
        "codebertscore_f1-14": 0.7851288318634033,
        "codebertscore_f3-14": 0.7924154996871948,
        "codebertscore_f1-5": 0.8171088099479675,
        "codebertscore_f3-5": 0.8217557668685913,
        "codebertscore_f1-19": 0.845255434513092,
        "codebertscore_f3-19": 0.8327820301055908,
        "codebertscore_s_f1-3": 0.7904933094978333,
        "codebertscore_s_f3-3": 0.7880574464797974,
        "codebertscore_s_f1-0": 0.8260869979858398,
        "codebertscore_s_f3-0": 0.7847778797149658,
        "codebertscore_s_f1-8": 0.8885787129402161,
        "codebertscore_s_f3-8": 0.8976551294326782,
        "codebertscore_s_f1-7": 0.756549596786499,
        "codebertscore_s_f3-7": 0.7762483954429626,
        "codebertscore_s_f1-16": 0.7852558493614197,
        "codebertscore_s_f3-16": 0.7809844613075256,
        "codebertscore_s_f1-2": 0.7908433675765991,
        "codebertscore_s_f3-2": 0.7870485782623291,
        "codebertscore_s_f1-11": 0.8716636300086975,
        "codebertscore_s_f3-11": 0.8577840328216553,
        "codebertscore_s_f1-1": 0.8117251992225647,
        "codebertscore_s_f3-1": 0.8155601024627686,
        "codebertscore_s_f1-10": 0.7408853769302368,
        "codebertscore_s_f3-10": 0.7733727097511292,
        "codebertscore_s_f1-17": 0.8826685547828674,
        "codebertscore_s_f3-17": 0.8674141764640808,
        "codebertscore_s_f1-12": 0.8077477216720581,
        "codebertscore_s_f3-12": 0.8020439743995667,
        "codebertscore_s_f1-6": 0.8657878637313843,
        "codebertscore_s_f3-6": 0.8514573574066162,
        "codebertscore_s_f1-18": 0.7790487408638,
        "codebertscore_s_f3-18": 0.7766320705413818,
        "codebertscore_s_f1-15": 0.7913275361061096,
        "codebertscore_s_f3-15": 0.7927741408348083,
        "codebertscore_s_f1-13": 0.7776023745536804,
        "codebertscore_s_f3-13": 0.7753340005874634,
        "codebertscore_s_f1-9": 0.7838837504386902,
        "codebertscore_s_f3-9": 0.7798917889595032,
        "codebertscore_s_f1-4": 0.5893851518630981,
        "codebertscore_s_f3-4": 0.580114483833313,
        "codebertscore_s_f1-14": 0.7970235347747803,
        "codebertscore_s_f3-14": 0.8020026683807373,
        "codebertscore_s_f1-5": 0.8308835029602051,
        "codebertscore_s_f3-5": 0.8326038718223572,
        "codebertscore_s_f1-19": 0.8523623943328857,
        "codebertscore_s_f3-19": 0.8393154740333557,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n",
        "snippet": [
            "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n"
        ],
        "simplified": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
        "task_id": "128",
        "3": "if(arr.length == 0){\n        return null;\n    }\n    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if (arr.length === 0) {\n    return null;\n  } else {\n    return arr.reduce(function(a, b) {\n      return (a * Math.abs(b) * Math.sign(b)) + b;\n    },0);\n  }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (arr.length == 0) {\n        return null;\n    } else {\n        let sum = 0;\n        let sign = 1;\n        for (let i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n            sign *= Math.sign(arr[i]);\n        }\n        return sum * sign;\n    }\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "}",
        "grade-7": {
            "execution": 0
        },
        "16": "let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i] !== 0){\n            if (arr[i] > 0){\n                sum += arr[i];\n                prod *= 1;\n            } else {\n                sum += Math.abs(arr[i]);\n                prod *= -1;\n            }\n        }\n    }\n    return sum * prod;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var val = 0\n    for(var i = 0; i < arr.length; i++){\n        val += Math.abs(arr[i])\n    }\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n            return 0\n        }\n        if(arr[i] < 0){\n            val = val * -1\n        }\n    }\n    return val\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (arr.length === 0) {\n    return null;\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const val = arr[i];\n    sum += Math.abs(val);\n    product *= Math.sign(val);\n  }\n  return sum * product;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var sum = 0;\n  var sign = 1;\n  if (arr.length == 0){\n    return null;\n  }\n  for (var i = 0; i < arr.length; i++){\n    if (arr[i] > 0){\n      sum += arr[i];\n    } else if (arr[i] < 0){\n      sum += Math.abs(arr[i]);\n      sign *= -1;\n    } else {\n      sign = 0;\n    }\n  }\n  return sum * sign;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let sum = 0;\n  let prod = 1;\n  if(arr.length !== 0){\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] > 0){\n        sum += arr[i];\n        prod *= 1;\n      }\n      else if(arr[i] < 0){\n        sum += Math.abs(arr[i]);\n        prod *= -1;\n      }\n      else{\n        sum += 0;\n        prod *= 0;\n      }\n    }\n    return sum * prod;\n  }\n  else{\n    return null;\n  }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if (arr.length === 0) {\n    return null;\n  }\n  var sign = 1;\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    var absVal = Math.abs(arr[i]);\n    if (arr[i] < 0) {\n      sign *= -1;\n    } else if (arr[i] === 0) {\n      sign = 0;\n    }\n    sum += absVal;\n  }\n  return sum * sign;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let magnitudes = [];\n    let signs = [];\n    for(let n of arr){\n        magnitudes.push(Math.abs(n));\n        if(n === 0){\n            signs.push(0);\n        } else if(n < 0){\n            signs.push(-1);\n        } else {\n            signs.push(1);\n        }\n    }\n    if(magnitudes.length === 0){\n        return null;\n    }\n    const sum = magnitudes.reduce((a, b) => a + b);\n    const product = signs.reduce((a, b) => a * b);\n    return sum * product;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(arr.length < 1){\n        return null;\n    }\n    var sum = arr.reduce(function(a, b){\n        return Math.abs(a) + Math.abs(b);\n    });\n    var signs = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signs *= -1;\n        }\n        else if(arr[i] == 0){\n            signs = 0;\n        }\n    }\n    return sum * signs;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return arr.length ? eval(arr.map(v => v ? (Math.abs(v) + v)/v : 0).join('*')) : null;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = 1;\n    var sum=0;\n    if(arr.length == 0){\n        return null;\n    }\n    else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i]>0){\n                sum += arr[i];\n                result *= 1;\n            }\n            else if(arr[i]<0){\n                sum += arr[i];\n                result *= -1;\n            }\n            else if(arr[i]==0){\n                result *= 0;\n            }\n        }\n        return result*sum;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(arr.length === 0){\n        return null;\n    }\n    var product = 1;\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        var currentElement = arr[i];\n        if(currentElement > 0){\n            sum += currentElement;\n            product *= 1;\n        }else if(currentElement < 0){\n            sum += currentElement * -1;\n            product *= -1;\n        }else{\n            product *= 0;\n        }\n    }\n    return sum * product;\n}\nvar result = prod_signs([1, 2, 2, -4]);",
        "grade-13": {
            "execution": 1
        },
        "9": "if(arr.length == 0){\n        return null;\n    }\n    else {\n        let sum = 0;\n        let prod = 1;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > 0) {\n                sum += arr[i];\n                prod *= 1;\n            }\n            else if (arr[i] < 0) {\n                sum += Math.abs(arr[i]);\n                prod *= -1;\n            }\n            else {\n                prod *= 0;\n            }\n        }\n        return sum * prod;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if (arr.length === 0) {\n    return;\n  }\n\n  var signs = 1;\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      signs *= -1;\n    } else if (arr[i] > 0) {\n      signs *= 1;\n    } else {\n      signs *= 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return sum * signs;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let prod = 1;\n    let sum = 0;\n    if (arr.length > 0){\n        for (let i = 0; i < arr.length; i++){\n            if (arr[i] > 0){\n                prod *= 1;\n                sum += arr[i];\n            } else if (arr[i] < 0){\n                prod *= -1;\n                sum += Math.abs(arr[i]);\n            } else if (arr[i] == 0){\n                prod *= 0;\n            }\n        }\n        return prod * sum;\n    } else {\n        return null;\n    }\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(arr.length==0){\n        return null;\n    }\n    var sum=0;\n    var prod=1;\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]<0){\n            prod*=-1;\n        }else if(arr[i]>0){\n            prod*=1;\n        }else{\n            prod*=0;\n        }\n        sum+=Math.abs(arr[i]);\n    }\n    return sum*prod;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        if(arr[i] !== 0){\n            prod *= arr[i]/Math.abs(arr[i]);\n        }\n    }\n    return arr.length === 0 ? null : sum * prod;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.385686554216216,
        "bleu-0": 0.15119966945033106,
        "bleu-8": 0.4263961941188404,
        "bleu-7": 8.194012623990518e-40,
        "bleu-16": 0.45560344399506186,
        "bleu-2": 0.5277733155691348,
        "bleu-11": 0.390013776575767,
        "bleu-1": 0.4814410279917009,
        "bleu-10": 0.42207333240480827,
        "bleu-17": 0.47186091705074695,
        "bleu-12": 0.1517679790783581,
        "bleu-6": 0.40284879027842385,
        "bleu-18": 0.025270456422148247,
        "bleu-15": 0.4542763449802489,
        "bleu-13": 0.30007802121160226,
        "bleu-9": 0.47020805296986273,
        "bleu-4": 0.43838772518485797,
        "bleu-14": 0.42745485032178154,
        "bleu-5": 0.44849854088645846,
        "bleu-19": 0.4733769705977677,
        "codebleu-3": 0.5639720131068191,
        "codebleu-0": 0.33950345829438516,
        "codebleu-8": 0.564393535011597,
        "codebleu-7": 0.005376344086021505,
        "codebleu-16": 0.6977826468283086,
        "codebleu-2": 0.7178333390687661,
        "codebleu-11": 0.5535876042172159,
        "codebleu-1": 0.7686832905151072,
        "codebleu-10": 0.732132850964188,
        "codebleu-17": 0.7306268601698837,
        "codebleu-12": 0.5812267134191769,
        "codebleu-6": 0.6934177820248082,
        "codebleu-18": 0.18888630583673582,
        "codebleu-15": 0.7601800594846,
        "codebleu-13": 0.6748887602895817,
        "codebleu-9": 0.7347789603056756,
        "codebleu-4": 0.7182710905487909,
        "codebleu-14": 0.7330297706170168,
        "codebleu-5": 0.7199562264990577,
        "codebleu-19": 0.6575625719036944,
        "chrf-3": 0.48161581471042,
        "chrf-0": 0.3245515869654788,
        "chrf-8": 0.5428857730803601,
        "chrf-7": 0.008787346221441126,
        "chrf-16": 0.4797260829448247,
        "chrf-2": 0.5564389829088691,
        "chrf-11": 0.4870099893880097,
        "chrf-1": 0.5895170308755197,
        "chrf-10": 0.5815068740355448,
        "chrf-17": 0.5653580365609036,
        "chrf-12": 0.30389281915493305,
        "chrf-6": 0.5487692717736373,
        "chrf-18": 0.15509162617255515,
        "chrf-15": 0.5921339780837749,
        "chrf-13": 0.4324237338103851,
        "chrf-9": 0.615553419650175,
        "chrf-4": 0.5246240276198377,
        "chrf-14": 0.5883865887538858,
        "chrf-5": 0.5444608305681052,
        "chrf-19": 0.51789066054274,
        "rougel-3": 0.6144578313253013,
        "rougel-0": 0.3378378378378379,
        "rougel-8": 0.6390532544378699,
        "rougel-7": 0.02173913043478261,
        "rougel-16": 0.5945945945945946,
        "rougel-2": 0.6145251396648044,
        "rougel-11": 0.5798816568047337,
        "rougel-1": 0.6091370558375634,
        "rougel-10": 0.5566037735849056,
        "rougel-17": 0.6632653061224489,
        "rougel-12": 0.2907488986784141,
        "rougel-6": 0.5499999999999999,
        "rougel-18": 0.20895522388059704,
        "rougel-15": 0.5876777251184834,
        "rougel-13": 0.5545454545454546,
        "rougel-9": 0.6310679611650485,
        "rougel-4": 0.6461538461538462,
        "rougel-14": 0.5488372093023256,
        "rougel-5": 0.635897435897436,
        "rougel-19": 0.6,
        "meteor-3": 0.4577181208053691,
        "meteor-0": 0.2526874048706241,
        "meteor-8": 0.475349931871671,
        "meteor-7": 0.006097560975609756,
        "meteor-16": 0.6249020898294445,
        "meteor-2": 0.6336815159295446,
        "meteor-11": 0.439761293313312,
        "meteor-1": 0.6659214269671333,
        "meteor-10": 0.6529853723404255,
        "meteor-17": 0.6273261678667084,
        "meteor-12": 0.3453017429581878,
        "meteor-6": 0.587107370838802,
        "meteor-18": 0.12180974477958237,
        "meteor-15": 0.7008879119994842,
        "meteor-13": 0.48008701717716307,
        "meteor-9": 0.7096359743040683,
        "meteor-4": 0.6026439683759848,
        "meteor-14": 0.6411991317603392,
        "meteor-5": 0.5925609519815023,
        "meteor-19": 0.5777878633944855,
        "ruby-3": 0.5054945054945055,
        "ruby-0": 0.23076923076923073,
        "ruby-8": 0.5164835164835164,
        "ruby-7": 0.01098901098901095,
        "ruby-16": 0.37234042553191493,
        "ruby-2": 0.4285714285714286,
        "ruby-11": 0.48351648351648346,
        "ruby-1": 0.4339622641509434,
        "ruby-10": 0.3801652892561983,
        "ruby-17": 0.5619047619047619,
        "ruby-12": 0.19117647058823528,
        "ruby-6": 0.3302752293577982,
        "ruby-18": 0.15384615384615385,
        "ruby-15": 0.44166666666666665,
        "ruby-13": 0.43410852713178294,
        "ruby-9": 0.5304347826086957,
        "ruby-4": 0.5288461538461539,
        "ruby-14": 0.3709677419354839,
        "ruby-5": 0.5192307692307692,
        "ruby-19": 0.3846153846153846,
        "codebertscore_f1-3": 0.8821868300437927,
        "codebertscore_f3-3": 0.8790891766548157,
        "codebertscore_f1-0": 0.7800909280776978,
        "codebertscore_f3-0": 0.7736831903457642,
        "codebertscore_f1-8": 0.8835910558700562,
        "codebertscore_f3-8": 0.8820024728775024,
        "codebertscore_f1-7": 0.0,
        "codebertscore_f3-7": 0.0,
        "codebertscore_f1-16": 0.8580639362335205,
        "codebertscore_f3-16": 0.8618040084838867,
        "codebertscore_f1-2": 0.8736798167228699,
        "codebertscore_f3-2": 0.8608465194702148,
        "codebertscore_f1-11": 0.8866854906082153,
        "codebertscore_f3-11": 0.8869480490684509,
        "codebertscore_f1-1": 0.8870758414268494,
        "codebertscore_f3-1": 0.8922015428543091,
        "codebertscore_f1-10": 0.8591273427009583,
        "codebertscore_f3-10": 0.873552680015564,
        "codebertscore_f1-17": 0.8829226493835449,
        "codebertscore_f3-17": 0.8925144672393799,
        "codebertscore_f1-12": 0.7600278258323669,
        "codebertscore_f3-12": 0.7937892079353333,
        "codebertscore_f1-6": 0.8232088088989258,
        "codebertscore_f3-6": 0.8371426463127136,
        "codebertscore_f1-18": 0.736137330532074,
        "codebertscore_f3-18": 0.730506181716919,
        "codebertscore_f1-15": 0.8261504173278809,
        "codebertscore_f3-15": 0.8398288488388062,
        "codebertscore_f1-13": 0.8176745772361755,
        "codebertscore_f3-13": 0.8566385507583618,
        "codebertscore_f1-9": 0.8337617516517639,
        "codebertscore_f3-9": 0.85295170545578,
        "codebertscore_f1-4": 0.8679075241088867,
        "codebertscore_f3-4": 0.8742226362228394,
        "codebertscore_f1-14": 0.8462998270988464,
        "codebertscore_f3-14": 0.8626581430435181,
        "codebertscore_f1-5": 0.847019374370575,
        "codebertscore_f3-5": 0.8582636713981628,
        "codebertscore_f1-19": 0.8890060186386108,
        "codebertscore_f3-19": 0.8874821066856384,
        "codebertscore_s_f1-3": 0.880964994430542,
        "codebertscore_s_f3-3": 0.8781641721725464,
        "codebertscore_s_f1-0": 0.7928845882415771,
        "codebertscore_s_f3-0": 0.7875365614891052,
        "codebertscore_s_f1-8": 0.8878893852233887,
        "codebertscore_s_f3-8": 0.8876439332962036,
        "codebertscore_s_f1-7": 0.0,
        "codebertscore_s_f3-7": 0.0,
        "codebertscore_s_f1-16": 0.8670498728752136,
        "codebertscore_s_f3-16": 0.8691370487213135,
        "codebertscore_s_f1-2": 0.8782459497451782,
        "codebertscore_s_f3-2": 0.8660339117050171,
        "codebertscore_s_f1-11": 0.8887693881988525,
        "codebertscore_s_f3-11": 0.8885123133659363,
        "codebertscore_s_f1-1": 0.89003586769104,
        "codebertscore_s_f3-1": 0.8963130712509155,
        "codebertscore_s_f1-10": 0.868735134601593,
        "codebertscore_s_f3-10": 0.8832559585571289,
        "codebertscore_s_f1-17": 0.8879806995391846,
        "codebertscore_s_f3-17": 0.8979122042655945,
        "codebertscore_s_f1-12": 0.776343584060669,
        "codebertscore_s_f3-12": 0.812623918056488,
        "codebertscore_s_f1-6": 0.831699013710022,
        "codebertscore_s_f3-6": 0.844802975654602,
        "codebertscore_s_f1-18": 0.7306901812553406,
        "codebertscore_s_f3-18": 0.7274191975593567,
        "codebertscore_s_f1-15": 0.8408941626548767,
        "codebertscore_s_f3-15": 0.8528170585632324,
        "codebertscore_s_f1-13": 0.8321637511253357,
        "codebertscore_s_f3-13": 0.8701274991035461,
        "codebertscore_s_f1-9": 0.8512338399887085,
        "codebertscore_s_f3-9": 0.8681209683418274,
        "codebertscore_s_f1-4": 0.8718317151069641,
        "codebertscore_s_f3-4": 0.8787367343902588,
        "codebertscore_s_f1-14": 0.8579088449478149,
        "codebertscore_s_f3-14": 0.8720270395278931,
        "codebertscore_s_f1-5": 0.855450451374054,
        "codebertscore_s_f3-5": 0.8672378063201904,
        "codebertscore_s_f1-19": 0.889701783657074,
        "codebertscore_s_f3-19": 0.8880501985549927,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n",
        "snippet": [
            "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "task_id": "100",
        "3": "var level = 1;\n    var stones = [];\n    stones.push(n);\n    while(level<n){\n        if(stones[level-1]%2==0){\n            stones.push(stones[level-1]+2);\n        }\n        else{\n            stones.push(stones[level-1]+1);\n        }\n        level++;\n    }\n    return stones;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var arr = [];\n    for(var i = 0; i < n; i++){\n        if(i === 0){\n            arr.push(n);\n        }\n        else if(i % 2 !== 0){\n            arr.push(arr[i-1] + 2);\n        }\n        else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var listOfLevels = [];\n    for (var i = 0; i < n; i++){\n        if (i == 0){\n            listOfLevels.push(n);\n        }\n        else if (i % 2 == 0){\n            listOfLevels.push(listOfLevels[i-1] + 2);\n        }\n        else{\n            listOfLevels.push(listOfLevels[i-1] + 1);\n        }\n    }\n    return listOfLevels;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(n===1){\n        return [1];\n    }\n    if(n%2===0){\n        return [n].concat(make_a_pile(n+1));\n    }\n    return [n].concat(make_a_pile(n+2));\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "//Fill this in.\n    let ret = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            ret.push(n+1);\n        }\n        else{\n            ret.push(n);\n        }\n        n--;\n    }\n    return ret;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var arr = [n];\n  var s = 0;\n  while(n >= 3){\n    if(n % 2 == 0){\n      s = n + 2;\n    }\n    else{\n      s = n + 1;\n    }\n    arr.push(s);\n    n = s;\n  }\n  return arr;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n<1)\n        return [];\n    let pile = [n];\n    while(pile[pile.length-1]>0){\n        let last = pile[pile.length-1];\n        if(last%2===0)\n            pile.push(last-1);\n        else\n            pile.push(last-2);\n    }\n    return pile.slice(0,pile.length-1);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let level = 1;\n    let current_n = n;\n    let result = [];\n    while(n > 0){\n        result.push(current_n);\n        if(current_n % 2 === 0){\n            current_n += 2;\n        } else {\n            current_n += 1;\n        }\n        n--;\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "const result = [n];\n  for (let i = 0; i < n - 1; i++) {\n    result.push(result[i] % 2 ? result[i] + 2 : result[i] + 1);\n  }\n  return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let i=1;\n    let arr=[];\n    while(i<=n){\n        if(i%2==0){\n            arr.push(i+1);\n        }\n        else if(i%2!=0){\n            arr.push(i+2);\n        }\n        i++;\n    }\n    console.log(arr);\n}\nmake_a_pile(3);",
        "grade-17": {
            "execution": 0
        },
        "12": "const arr = [n];\n  while(arr[arr.length-1] > 0){\n    if(arr[arr.length-1] % 2 === 0){\n      arr.push(arr[arr.length-1] - 1);\n    } else {\n      arr.push(arr[arr.length-1] - 2);\n    }\n  }\n  return arr.slice(0, arr.length-1);\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var stones = [];\n  for (var i = 0; i < n; i++) {\n    var levels = [i + 1];\n    stones.push(levels);\n  }\n  return stones;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let arr = [n]\n    while(n > 0){\n        n = next(n)\n        arr.push(n)\n    }\n    return arr.slice(0, arr.length - 1)\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let arr = [n];\n    for(let i = 1; i < n; i++){\n        if(arr[i-1] % 2 === 0){\n            arr.push(arr[i-1] + 2);\n        }else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var result = [n];\n  for(var i = 1; i < n; i++){\n    if(n % 2 == 0){\n      n += 2;\n    }\n    else{\n      n += 1;\n    }\n    result.push(n);\n  }\n  return result;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var arr = [];\n  arr.push(n);\n  for(var i = 1; i <= n; i++){\n    if(n % 2 === 0){\n      arr.push(n + i);\n    } else {\n      arr.push(n + i + 1);\n    }\n  }\n  return arr;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = [];\n    while(n>0){\n        result.push(n);\n        if(n%2===0){\n            n = n-1;\n        }else{\n            n = n-2;\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "const stones = [n];\n  while (stones[stones.length - 1] !== 1) {\n    if (stones[stones.length - 1] % 2 === 0) {\n      stones.push(stones[stones.length - 1] - 1);\n    } else {\n      stones.push(stones[stones.length - 1] - 2);\n    }\n  }\n  return stones;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// Your code here\n    var result = [];\n    var count = n;\n    for(var i = 0; i < n; i++){\n        if(count % 2 == 0){\n            result.push(count)\n            count = count + 2;\n        }else{\n            result.push(count)\n            count = count + 1;\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let arr = [n];\n    for(let i = 1; i < n; i++){\n        if(arr[i-1] % 2 == 0){\n            arr.push(arr[i-1] + 2);\n        }\n        else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.045819884698266006,
        "bleu-0": 0.0824952463665391,
        "bleu-8": 0.07244367910448739,
        "bleu-7": 0.029295568109786306,
        "bleu-16": 0.15772487527235088,
        "bleu-2": 0.04711994634490387,
        "bleu-11": 0.03463132791990113,
        "bleu-1": 0.07411036392896148,
        "bleu-10": 0.17322983318063592,
        "bleu-17": 0.0784397506624284,
        "bleu-12": 0.030702912066360156,
        "bleu-6": 0.16317905930437193,
        "bleu-18": 0.08257955974173521,
        "bleu-15": 0.13790339138642638,
        "bleu-13": 0.12098129874370579,
        "bleu-9": 0.10251061921014776,
        "bleu-4": 0.0689674919186202,
        "bleu-14": 0.034136164801689683,
        "bleu-5": 0.09835661568268829,
        "bleu-19": 0.1397800593856117,
        "codebleu-3": 0.6065759637188208,
        "codebleu-0": 0.6696448993377337,
        "codebleu-8": 0.6679696381273919,
        "codebleu-7": 0.4897959183673469,
        "codebleu-16": 0.672545982613419,
        "codebleu-2": 0.5249433106575964,
        "codebleu-11": 0.542517006802721,
        "codebleu-1": 0.6105442176870748,
        "codebleu-10": 0.6167401195890629,
        "codebleu-17": 0.6100120672872754,
        "codebleu-12": 0.5130385487528345,
        "codebleu-6": 0.6751556935575312,
        "codebleu-18": 0.5051020408163265,
        "codebleu-15": 0.6187888872265359,
        "codebleu-13": 0.6448801030785994,
        "codebleu-9": 0.6593753526347977,
        "codebleu-4": 0.5753968253968254,
        "codebleu-14": 0.5130385487528345,
        "codebleu-5": 0.6683202069221713,
        "codebleu-19": 0.6191016652264001,
        "chrf-3": 0.20753796955688522,
        "chrf-0": 0.26385920369193827,
        "chrf-8": 0.2342278952723312,
        "chrf-7": 0.1935945251010308,
        "chrf-16": 0.3963661969445178,
        "chrf-2": 0.23418127464496843,
        "chrf-11": 0.21214662965062522,
        "chrf-1": 0.25967030736540997,
        "chrf-10": 0.3729795729486395,
        "chrf-17": 0.22323922291509754,
        "chrf-12": 0.19462647759881463,
        "chrf-6": 0.3210981203222265,
        "chrf-18": 0.26051945819630945,
        "chrf-15": 0.35285132419312754,
        "chrf-13": 0.327302366420618,
        "chrf-9": 0.2818543240255909,
        "chrf-4": 0.28657099636755873,
        "chrf-14": 0.1818197274536198,
        "chrf-5": 0.2757254892553947,
        "chrf-19": 0.35405086542055975,
        "rougel-3": 0.33043478260869563,
        "rougel-0": 0.42622950819672134,
        "rougel-8": 0.3880597014925373,
        "rougel-7": 0.3043478260869565,
        "rougel-16": 0.5098039215686274,
        "rougel-2": 0.35416666666666663,
        "rougel-11": 0.27868852459016397,
        "rougel-1": 0.32653061224489793,
        "rougel-10": 0.5555555555555557,
        "rougel-17": 0.375,
        "rougel-12": 0.24,
        "rougel-6": 0.5974025974025974,
        "rougel-18": 0.4324324324324324,
        "rougel-15": 0.509090909090909,
        "rougel-13": 0.5161290322580646,
        "rougel-9": 0.4807692307692307,
        "rougel-4": 0.3488372093023256,
        "rougel-14": 0.27586206896551724,
        "rougel-5": 0.44036697247706424,
        "rougel-19": 0.5137614678899083,
        "meteor-3": 0.5189364402244545,
        "meteor-0": 0.4734773314393544,
        "meteor-8": 0.4594829275544474,
        "meteor-7": 0.39139263383119716,
        "meteor-16": 0.5270177468890487,
        "meteor-2": 0.44883188131832014,
        "meteor-11": 0.44463244970859195,
        "meteor-1": 0.47543783783783794,
        "meteor-10": 0.5942826395046571,
        "meteor-17": 0.38919610196616367,
        "meteor-12": 0.388880688338341,
        "meteor-6": 0.6037134670487107,
        "meteor-18": 0.3375437094126883,
        "meteor-15": 0.5440108073784014,
        "meteor-13": 0.5110960783208373,
        "meteor-9": 0.49614379943379155,
        "meteor-4": 0.41659933514936065,
        "meteor-14": 0.3671827801921541,
        "meteor-5": 0.5169775588750994,
        "meteor-19": 0.5454386572665337,
        "ruby-3": 0.2222222222222222,
        "ruby-0": 0.28409090909090906,
        "ruby-8": 0.25,
        "ruby-7": 0.18965517241379315,
        "ruby-16": 0.3529411764705882,
        "ruby-2": 0.25806451612903225,
        "ruby-11": 0.19318181818181823,
        "ruby-1": 0.21875,
        "ruby-10": 0.4285714285714286,
        "ruby-17": 0.2564102564102564,
        "ruby-12": 0.15384615384615385,
        "ruby-6": 0.4651162790697675,
        "ruby-18": 0.25,
        "ruby-15": 0.3421052631578947,
        "ruby-13": 0.3728813559322034,
        "ruby-9": 0.3285714285714286,
        "ruby-4": 0.25,
        "ruby-14": 0.18292682926829273,
        "ruby-5": 0.29333333333333333,
        "ruby-19": 0.3466666666666667,
        "codebertscore_f1-3": 0.7563755512237549,
        "codebertscore_f3-3": 0.782605767250061,
        "codebertscore_f1-0": 0.8029004335403442,
        "codebertscore_f3-0": 0.8414015173912048,
        "codebertscore_f1-8": 0.7574135065078735,
        "codebertscore_f3-8": 0.8112714290618896,
        "codebertscore_f1-7": 0.746920108795166,
        "codebertscore_f3-7": 0.7482579350471497,
        "codebertscore_f1-16": 0.8240052461624146,
        "codebertscore_f3-16": 0.8540704250335693,
        "codebertscore_f1-2": 0.81137615442276,
        "codebertscore_f3-2": 0.8251585960388184,
        "codebertscore_f1-11": 0.7239211797714233,
        "codebertscore_f3-11": 0.7571067214012146,
        "codebertscore_f1-1": 0.7897660136222839,
        "codebertscore_f3-1": 0.8122936487197876,
        "codebertscore_f1-10": 0.8670766949653625,
        "codebertscore_f3-10": 0.884373128414154,
        "codebertscore_f1-17": 0.7954598069190979,
        "codebertscore_f3-17": 0.8221732378005981,
        "codebertscore_f1-12": 0.7536532878875732,
        "codebertscore_f3-12": 0.7884429097175598,
        "codebertscore_f1-6": 0.8602278232574463,
        "codebertscore_f3-6": 0.8676416873931885,
        "codebertscore_f1-18": 0.802035391330719,
        "codebertscore_f3-18": 0.8113305568695068,
        "codebertscore_f1-15": 0.829468309879303,
        "codebertscore_f3-15": 0.8659684658050537,
        "codebertscore_f1-13": 0.8510745763778687,
        "codebertscore_f3-13": 0.8669524788856506,
        "codebertscore_f1-9": 0.8488821387290955,
        "codebertscore_f3-9": 0.868490993976593,
        "codebertscore_f1-4": 0.800065815448761,
        "codebertscore_f3-4": 0.8134468793869019,
        "codebertscore_f1-14": 0.7550294995307922,
        "codebertscore_f3-14": 0.7825972437858582,
        "codebertscore_f1-5": 0.7976634502410889,
        "codebertscore_f3-5": 0.8307515382766724,
        "codebertscore_f1-19": 0.8272204995155334,
        "codebertscore_f3-19": 0.8637186288833618,
        "codebertscore_s_f1-3": 0.7548790574073792,
        "codebertscore_s_f3-3": 0.781248152256012,
        "codebertscore_s_f1-0": 0.7994135618209839,
        "codebertscore_s_f3-0": 0.8375558853149414,
        "codebertscore_s_f1-8": 0.7544346451759338,
        "codebertscore_s_f3-8": 0.8071075677871704,
        "codebertscore_s_f1-7": 0.7458705306053162,
        "codebertscore_s_f3-7": 0.7509180903434753,
        "codebertscore_s_f1-16": 0.8236754536628723,
        "codebertscore_s_f3-16": 0.8576985001564026,
        "codebertscore_s_f1-2": 0.8038225769996643,
        "codebertscore_s_f3-2": 0.8163912296295166,
        "codebertscore_s_f1-11": 0.7274438142776489,
        "codebertscore_s_f3-11": 0.7658597826957703,
        "codebertscore_s_f1-1": 0.7853190302848816,
        "codebertscore_s_f3-1": 0.8053483963012695,
        "codebertscore_s_f1-10": 0.8578856587409973,
        "codebertscore_s_f3-10": 0.8746781349182129,
        "codebertscore_s_f1-17": 0.7947273254394531,
        "codebertscore_s_f3-17": 0.8217860460281372,
        "codebertscore_s_f1-12": 0.7494248747825623,
        "codebertscore_s_f3-12": 0.784813404083252,
        "codebertscore_s_f1-6": 0.852992832660675,
        "codebertscore_s_f3-6": 0.8574904799461365,
        "codebertscore_s_f1-18": 0.7944957613945007,
        "codebertscore_s_f3-18": 0.8041098117828369,
        "codebertscore_s_f1-15": 0.8218312859535217,
        "codebertscore_s_f3-15": 0.8593849539756775,
        "codebertscore_s_f1-13": 0.8491168022155762,
        "codebertscore_s_f3-13": 0.8624370098114014,
        "codebertscore_s_f1-9": 0.8370167016983032,
        "codebertscore_s_f3-9": 0.8545066714286804,
        "codebertscore_s_f1-4": 0.7976570129394531,
        "codebertscore_s_f3-4": 0.8103593587875366,
        "codebertscore_s_f1-14": 0.7552018165588379,
        "codebertscore_s_f3-14": 0.7852004170417786,
        "codebertscore_s_f1-5": 0.7922526597976685,
        "codebertscore_s_f3-5": 0.8264549970626831,
        "codebertscore_s_f1-19": 0.8212104439735413,
        "codebertscore_s_f3-19": 0.8585756421089172,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n",
        "snippet": [
            "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n"
        ],
        "simplified": "Given a positive integer N, return the total sum of its digits in binary.",
        "task_id": "84",
        "3": "return N.toString(2).split('').reduce((acc, curr) => parseInt(acc) + parseInt(curr), 0);\n}\n\nmodule.exports = { solve };",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = '';\n  var binaryVal = '';\n  if(N === 0) { return 0; }\n  while(N !== 0) {\n    if(N % 2 === 0) {\n      binaryVal = '0';\n    } else {\n      binaryVal = '1';\n    }\n    result = binaryVal + result;\n    N = parseInt(N / 2);\n  }\n  var sum = 0;\n  for(var i = 0; i < result.length; i++) {\n    sum += Number(result[i]);\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let result = 0;\n    for(let i = N; i > 0; i = Math.floor(i/2)){\n        result += i % 2;\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// write your code here\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let result = 0;\n  let str = '';\n  let rem = 0;\n  while(N>0){\n    rem = Math.floor(N%2);\n    str += rem;\n    result += rem;\n    N = Math.floor(N/2);\n  }\n  console.log(result);\n  return str.split('').reverse().join('');\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return (N.toString(2).match(/1/g)||[]).length\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var obj = {}\n  var count = 0\n  var binary = []\n  var sum = 0\n  while(N != 0){\n    if(N % 2 === 0){\n      binary.push(0)\n    }else{\n      binary.push(1)\n    }\n    N = Math.floor(N / 2)\n  }\n  var result = binary.reverse().join('')\n  for(var i = 0; i < result.length; i++){\n    if(result[i] === '1'){\n      sum++\n    }\n  }\n  return sum\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let binString = N.toString(2);\n    let splitString = binString.split('');\n    let sumDigits = 0;\n    for(let i = 0; i < splitString.length; i++){\n        sumDigits += parseInt(splitString[i]);\n    }\n    return sumDigits;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//your code here\n    var arr = [];\n    var total = 0;\n    for(var i = 0; i < N; i++){\n        var binary = (i).toString(2);\n        for(var j = 0; j < binary.length; j++){\n            total += parseInt(binary[j]);\n        }\n    }\n    return total;\n}\nsolve(1000);",
        "grade-10": {
            "execution": 0
        },
        "17": "let x = Number(N).toString(2);\n    let arr = x.split('');\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        sum += Number(arr[i]);\n    }\n    return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var bin = N.toString(2);\n    var sum = 0;\n    for(var i = 0; i < bin.length; i++){\n        sum += +bin[i];\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var binary = (N >>> 0).toString(2);\n  var result = 0;\n  for (var i = 0; i < binary.length; i++) {\n    result += parseInt(binary[i]);\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "// let result = 0;\n    // for(let i = 0; i < N.length; i++){\n    //     result += N[i];\n    // }\n    // return result;\n    return N.toString(2);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "// this is  a binary problem.\n   var sum = 0;\n   var arr = [];\n   while(N){\n      if(N%2){\n         sum++;\n      }\n      arr.push(N%2);\n      N = Math.floor(N/2);\n   }\n   return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//write your code here\n    return (N >>> 0).toString(2).split('').reduce((a,b) => +a + +b);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return N.toString(2).split('').reduce((acc, curr) => acc + Number(curr), 0);\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return N.toString(2).split('').reduce((a,b)=>+a+ +b)\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return N.toString(2).split('').reduce((p,c)=>p+parseInt(c),0)\n}\nsolve(1000)\nsolve(150)\nsolve(147)",
        "grade-14": {
            "execution": 0
        },
        "5": "var sum = 0;\n  var result = [];\n  while(N>0){\n    result.push(N%2);\n    N = Math.floor(N/2);\n  }\n  for(var i = 0; i < result.length; i++){\n    sum += result[i];\n  }\n  return sum;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let sum = 0;\n\tlet bin = N.toString(2);\n\tfor(let i = 0; i < bin.length; i++){\n\t\tsum += parseInt(bin[i],10);\n\t}\n\treturn sum;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.13251445746341228,
        "bleu-0": 0.03441459095770963,
        "bleu-8": 0.05379963846174873,
        "bleu-7": 0.000931833993942816,
        "bleu-16": 0.11009738752185598,
        "bleu-2": 0.1427107079720467,
        "bleu-11": 0.06352934665658287,
        "bleu-1": 0.10465699727124676,
        "bleu-10": 0.08483641206287325,
        "bleu-17": 0.11470714478681977,
        "bleu-12": 0.14864706943959644,
        "bleu-6": 0.161617234020115,
        "bleu-18": 0.13955856187969354,
        "bleu-15": 0.056760415433199415,
        "bleu-13": 0.17296503143175795,
        "bleu-9": 0.16215016436985952,
        "bleu-4": 0.15768372811354284,
        "bleu-14": 0.1351455754658585,
        "bleu-5": 0.13238962818167155,
        "bleu-19": 0.14416857088097065,
        "codebleu-3": 0.45428035988779436,
        "codebleu-0": 0.5755693581780539,
        "codebleu-8": 0.48343685300207034,
        "codebleu-7": 0.05961026983203964,
        "codebleu-16": 0.6213516349803507,
        "codebleu-2": 0.3006534353060267,
        "codebleu-11": 0.5944391561197824,
        "codebleu-1": 0.5045028742864086,
        "codebleu-10": 0.536913729132632,
        "codebleu-17": 0.5061778988723373,
        "codebleu-12": 0.47715546395421843,
        "codebleu-6": 0.5378057708874104,
        "codebleu-18": 0.4782287044126611,
        "codebleu-15": 0.55175983436853,
        "codebleu-13": 0.3942519358804482,
        "codebleu-9": 0.38257621603533015,
        "codebleu-4": 0.34600223207297726,
        "codebleu-14": 0.44384931433747743,
        "codebleu-5": 0.633348581922618,
        "codebleu-19": 0.5385208487700168,
        "chrf-3": 0.2635128607091241,
        "chrf-0": 0.20676103116186934,
        "chrf-8": 0.20810796092174744,
        "chrf-7": 0.05641844771711038,
        "chrf-16": 0.2584121015766061,
        "chrf-2": 0.29221901029554437,
        "chrf-11": 0.2244485005890818,
        "chrf-1": 0.24671529512273646,
        "chrf-10": 0.2707613056622492,
        "chrf-17": 0.291730052571485,
        "chrf-12": 0.2848368187446701,
        "chrf-6": 0.3079388211379491,
        "chrf-18": 0.30364679177442544,
        "chrf-15": 0.22824384260202776,
        "chrf-13": 0.28826904283564075,
        "chrf-9": 0.27274119534726377,
        "chrf-4": 0.28576008222853133,
        "chrf-14": 0.28472959504298767,
        "chrf-5": 0.2835523069450247,
        "chrf-19": 0.3151322682056447,
        "rougel-3": 0.20930232558139536,
        "rougel-0": 0.25157232704402516,
        "rougel-8": 0.3846153846153846,
        "rougel-7": 0.08888888888888889,
        "rougel-16": 0.396694214876033,
        "rougel-2": 0.2857142857142857,
        "rougel-11": 0.2564102564102564,
        "rougel-1": 0.25925925925925924,
        "rougel-10": 0.25806451612903225,
        "rougel-17": 0.2745098039215686,
        "rougel-12": 0.2558139534883721,
        "rougel-6": 0.2947368421052632,
        "rougel-18": 0.43010752688172044,
        "rougel-15": 0.36363636363636365,
        "rougel-13": 0.2926829268292683,
        "rougel-9": 0.21917808219178084,
        "rougel-4": 0.23188405797101447,
        "rougel-14": 0.18823529411764706,
        "rougel-5": 0.37037037037037035,
        "rougel-19": 0.32967032967032966,
        "meteor-3": 0.29298076923076927,
        "meteor-0": 0.34071593799123284,
        "meteor-8": 0.34616115206990306,
        "meteor-7": 0.028653295128939826,
        "meteor-16": 0.38313564108771075,
        "meteor-2": 0.22875771562030803,
        "meteor-11": 0.3030608695652175,
        "meteor-1": 0.33338682500200595,
        "meteor-10": 0.34846392986792313,
        "meteor-17": 0.39312653940886694,
        "meteor-12": 0.34171461041267137,
        "meteor-6": 0.37379088216408796,
        "meteor-18": 0.4623761386199903,
        "meteor-15": 0.44973350756897235,
        "meteor-13": 0.26990181027314014,
        "meteor-9": 0.26295742200765465,
        "meteor-4": 0.28527144772117957,
        "meteor-14": 0.25484562492772705,
        "meteor-5": 0.3505594013902453,
        "meteor-19": 0.36067574358115384,
        "ruby-3": 0.125,
        "ruby-0": 0.14049586776859502,
        "ruby-8": 0.15000000000000002,
        "ruby-7": 0.052631578947368474,
        "ruby-16": 0.2530120481927711,
        "ruby-2": 0.1578947368421053,
        "ruby-11": 0.15254237288135597,
        "ruby-1": 0.1428571428571429,
        "ruby-10": 0.15116279069767447,
        "ruby-17": 0.15625,
        "ruby-12": 0.125,
        "ruby-6": 0.1578947368421053,
        "ruby-18": 0.2909090909090909,
        "ruby-15": 0.21311475409836067,
        "ruby-13": 0.15909090909090906,
        "ruby-9": 0.13157894736842102,
        "ruby-4": 0.1578947368421053,
        "ruby-14": 0.14893617021276595,
        "ruby-5": 0.2571428571428571,
        "ruby-19": 0.16981132075471694,
        "codebertscore_f1-3": 0.7394469380378723,
        "codebertscore_f3-3": 0.7608432173728943,
        "codebertscore_f1-0": 0.7606031894683838,
        "codebertscore_f3-0": 0.7810035943984985,
        "codebertscore_f1-8": 0.8148258924484253,
        "codebertscore_f3-8": 0.8086642026901245,
        "codebertscore_f1-7": 0.6255244016647339,
        "codebertscore_f3-7": 0.6085600852966309,
        "codebertscore_f1-16": 0.8053613305091858,
        "codebertscore_f3-16": 0.8239056468009949,
        "codebertscore_f1-2": 0.7265727519989014,
        "codebertscore_f3-2": 0.7396877408027649,
        "codebertscore_f1-11": 0.7522334456443787,
        "codebertscore_f3-11": 0.7834923267364502,
        "codebertscore_f1-1": 0.764720618724823,
        "codebertscore_f3-1": 0.7802538871765137,
        "codebertscore_f1-10": 0.7484728693962097,
        "codebertscore_f3-10": 0.775144636631012,
        "codebertscore_f1-17": 0.7931170463562012,
        "codebertscore_f3-17": 0.8002957105636597,
        "codebertscore_f1-12": 0.7943496704101562,
        "codebertscore_f3-12": 0.7978675365447998,
        "codebertscore_f1-6": 0.791368842124939,
        "codebertscore_f3-6": 0.8018234372138977,
        "codebertscore_f1-18": 0.8062182664871216,
        "codebertscore_f3-18": 0.8120161890983582,
        "codebertscore_f1-15": 0.776599645614624,
        "codebertscore_f3-15": 0.7879242300987244,
        "codebertscore_f1-13": 0.7435885667800903,
        "codebertscore_f3-13": 0.7635877728462219,
        "codebertscore_f1-9": 0.7589237689971924,
        "codebertscore_f3-9": 0.7654125094413757,
        "codebertscore_f1-4": 0.7471906542778015,
        "codebertscore_f3-4": 0.7456621527671814,
        "codebertscore_f1-14": 0.7432036399841309,
        "codebertscore_f3-14": 0.7616718411445618,
        "codebertscore_f1-5": 0.8071686625480652,
        "codebertscore_f3-5": 0.8195977210998535,
        "codebertscore_f1-19": 0.792479932308197,
        "codebertscore_f3-19": 0.8021200895309448,
        "codebertscore_s_f1-3": 0.7449542880058289,
        "codebertscore_s_f3-3": 0.7665603160858154,
        "codebertscore_s_f1-0": 0.7630114555358887,
        "codebertscore_s_f3-0": 0.7862038612365723,
        "codebertscore_s_f1-8": 0.833186686038971,
        "codebertscore_s_f3-8": 0.8275975584983826,
        "codebertscore_s_f1-7": 0.614738404750824,
        "codebertscore_s_f3-7": 0.6026365756988525,
        "codebertscore_s_f1-16": 0.8169776201248169,
        "codebertscore_s_f3-16": 0.8327597379684448,
        "codebertscore_s_f1-2": 0.7315027713775635,
        "codebertscore_s_f3-2": 0.7379016280174255,
        "codebertscore_s_f1-11": 0.7576270699501038,
        "codebertscore_s_f3-11": 0.7902480959892273,
        "codebertscore_s_f1-1": 0.7808979749679565,
        "codebertscore_s_f3-1": 0.7996859550476074,
        "codebertscore_s_f1-10": 0.7573390007019043,
        "codebertscore_s_f3-10": 0.7937644720077515,
        "codebertscore_s_f1-17": 0.8090111613273621,
        "codebertscore_s_f3-17": 0.8179529309272766,
        "codebertscore_s_f1-12": 0.8050747513771057,
        "codebertscore_s_f3-12": 0.8135808110237122,
        "codebertscore_s_f1-6": 0.8038430213928223,
        "codebertscore_s_f3-6": 0.8176940679550171,
        "codebertscore_s_f1-18": 0.8221470713615417,
        "codebertscore_s_f3-18": 0.8326942920684814,
        "codebertscore_s_f1-15": 0.7841560244560242,
        "codebertscore_s_f3-15": 0.7922680377960205,
        "codebertscore_s_f1-13": 0.7583715319633484,
        "codebertscore_s_f3-13": 0.7791310548782349,
        "codebertscore_s_f1-9": 0.766421914100647,
        "codebertscore_s_f3-9": 0.7724833488464355,
        "codebertscore_s_f1-4": 0.759308397769928,
        "codebertscore_s_f3-4": 0.7585486769676208,
        "codebertscore_s_f1-14": 0.7544993758201599,
        "codebertscore_s_f3-14": 0.7753589153289795,
        "codebertscore_s_f1-5": 0.8122366666793823,
        "codebertscore_s_f3-5": 0.8234148025512695,
        "codebertscore_s_f1-19": 0.8153870105743408,
        "codebertscore_s_f3-19": 0.8276480436325073,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 2,
        "raw_gpt35_nsnr-0": "2",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 1,
        "raw_gpt35_nswr-0": "1",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n// digits(235) == 15\nfunction digits(n){\n",
        "snippet": [
            "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "task_id": "131",
        "3": "if(n == 0) {\n        return 0;\n    }\n    return Math.abs(n) % 10 % 2 ? Math.abs(n) % 10 * digits(Math.floor(n / 10)) : digits(Math.floor(n / 10));\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var sum = 1;\n    if(n === 0){\n        return 0;\n    }\n    if(n < 0){\n        n = -n;\n    }\n    while(n !== 0){\n        var m = n % 10;\n        if(m % 2 !== 0){\n            sum *= m;\n        }\n        n = (n - m) / 10;\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let sum = 1;\n    let check = n.toString();\n    for (let i = 0; i < check.length; i++) {\n        if (check[i] % 2 !== 0) {\n            sum *= parseInt(check[i]);\n        }\n    }\n    return sum === 1 ? 0 : sum;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let x = n.toString().split('');\n  let result = 1;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 !== 0) {\n      result *= x[i];\n    }\n  }\n  return result;\n}\n\nmodule.exports = digits;",
        "grade-7": {
            "execution": 0
        },
        "16": "let numToStr = n.toString();\n    let result = 1;\n    for (let i = 0; i < numToStr.length; i++) {\n        let currentNum = Number(numToStr[i]);\n        if (currentNum % 2 !== 0) {\n            result *= currentNum;\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var num = n.toString().split('');\n  var result = 0;\n  for (var i = 0; i < num.length; i++) {\n    if (num[i] % 2 != 0) {\n      result += parseInt(num[i]);\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let sum = 1;\n    n = n.toString().split('');\n    if(n.length === 1){\n        return n[0] % 2 !== 0 ? n[0] : 0;\n    }\n    for(let i = 0; i < n.length; i++){\n        if(n[i] % 2 !== 0){\n            sum *= n[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return (n+'').split('').reduce((a,b)=>(b%2===1)?a*+b:a,1);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let prod = 1;\n  n = n.toString().split('');\n  for (let i = 0; i < n.length; i++) {\n    if (n[i] % 2 === 1) {\n      prod *= n[i];\n    }\n  }\n  return prod === 1 ? 0 : prod;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "//write your code here\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let mult = 1;\n    n = n.toString().split('');\n    for (let i = 0; i < n.length; i++) {\n        if (n[i] % 2 === 1) {\n            mult *= n[i];\n        }\n    }\n    return mult;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var str = n.toString();\n  var arr = str.split('');\n  var total = 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      total *= arr[i];\n    }\n  }\n  return total;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "const arr = n.toString().split('');\n    const result = arr.filter(elem => elem % 2 !== 0).reduce((acc, curr) => acc * curr, 1);\n    return result || 0;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let arrayOfNumbers = n.toString().split('').map(n => parseInt(n));\n  let productOfOdd = arrayOfNumbers.filter(n => n % 2 !== 0).reduce((a, b) => a * b, 1);\n  return productOfOdd;\n}\n\ndigits(12345);",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr = n.toString().split('').map(Number);\n   var n = 1;\n   for (var i = 0; i < arr.length; i++) {\n     if (arr[i] % 2 === 1) {\n     n *= arr[i];\n     }\n   }\n   return n;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var num = n.toString();\n    var result = 1;\n    for (var i = 0; i < num.length; i++) {\n        if (num[i] % 2 === 1) {\n            result *= parseInt(num[i]);\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var product = 1;\n    var num = n.toString().split('');\n    for(var i = 0; i < num.length; i++){\n        if(num[i] % 2 !== 0){\n            product *= parseInt(num[i]);\n        }\n    }\n    return product;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let arr = n.toString().split('')\n  let ans = arr.filter(el => el % 2 !== 0)\n  return ans.length === 0 ? 0 : ans.reduce((a, b) => a * b)\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let prod = 1;\n    while (n > 0) {\n        if (n % 2 !== 0) prod *= n % 10;\n        n = Math.floor(n / 10);\n    }\n    return prod;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n    var num = n.toString();\n    for (i = 0; i < num.length; i++) {\n        var number = parseInt(num[i]);\n        if (number % 2 != 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.14837364157013627,
        "bleu-0": 0.2766412737714962,
        "bleu-8": 0.12351592596156585,
        "bleu-7": 0.10988066993151267,
        "bleu-16": 0.11498877810819842,
        "bleu-2": 0.08049803539447524,
        "bleu-11": 0.14785781600801187,
        "bleu-1": 0.08548590698607887,
        "bleu-10": 0.15101931389366646,
        "bleu-17": 1.479512208920264e-05,
        "bleu-12": 0.15981296544979573,
        "bleu-6": 0.10889562582665864,
        "bleu-18": 0.07576039545432409,
        "bleu-15": 0.06562473508480071,
        "bleu-13": 0.1432734081534563,
        "bleu-9": 0.1484633465496683,
        "bleu-4": 0.10956105896941092,
        "bleu-14": 0.068294745508298,
        "bleu-5": 0.20508719412724508,
        "bleu-19": 0.08494908099762545,
        "codebleu-3": 0.40895739593193636,
        "codebleu-0": 0.6363468466973465,
        "codebleu-8": 0.47362087372600004,
        "codebleu-7": 0.44263286422633497,
        "codebleu-16": 0.45751930330841417,
        "codebleu-2": 0.40518887401765147,
        "codebleu-11": 0.5612834210386412,
        "codebleu-1": 0.24728790732810646,
        "codebleu-10": 0.4858676069637256,
        "codebleu-17": 0.042105988988642755,
        "codebleu-12": 0.448388176360414,
        "codebleu-6": 0.44373910763172675,
        "codebleu-18": 0.3706094401257292,
        "codebleu-15": 0.3956924467730566,
        "codebleu-13": 0.4481983205966589,
        "codebleu-9": 0.4410523402852292,
        "codebleu-4": 0.42789921662396013,
        "codebleu-14": 0.3764112809774861,
        "codebleu-5": 0.3993492179016305,
        "codebleu-19": 0.4267513062793343,
        "chrf-3": 0.26001801318373347,
        "chrf-0": 0.3774980598534687,
        "chrf-8": 0.21010624127398678,
        "chrf-7": 0.2067612519502498,
        "chrf-16": 0.21173435531939172,
        "chrf-2": 0.18657350510733925,
        "chrf-11": 0.273231398353347,
        "chrf-1": 0.13050533170153542,
        "chrf-10": 0.23996753454435654,
        "chrf-17": 0.036568409020515065,
        "chrf-12": 0.2094629764233199,
        "chrf-6": 0.16646981376488235,
        "chrf-18": 0.1510025729029739,
        "chrf-15": 0.17137381117992742,
        "chrf-13": 0.1894275492828591,
        "chrf-9": 0.20554062944534318,
        "chrf-4": 0.18848449179690407,
        "chrf-14": 0.16642084921290087,
        "chrf-5": 0.3080056387671348,
        "chrf-19": 0.16767757552061255,
        "rougel-3": 0.32,
        "rougel-0": 0.4931506849315069,
        "rougel-8": 0.37142857142857144,
        "rougel-7": 0.34285714285714286,
        "rougel-16": 0.3661971830985916,
        "rougel-2": 0.291970802919708,
        "rougel-11": 0.3780487804878048,
        "rougel-1": 0.2522522522522523,
        "rougel-10": 0.3829787234042553,
        "rougel-17": 0.05405405405405406,
        "rougel-12": 0.3759398496240601,
        "rougel-6": 0.3165467625899281,
        "rougel-18": 0.272,
        "rougel-15": 0.27210884353741494,
        "rougel-13": 0.33093525179856115,
        "rougel-9": 0.36363636363636365,
        "rougel-4": 0.33333333333333337,
        "rougel-14": 0.31496062992125984,
        "rougel-5": 0.5357142857142857,
        "rougel-19": 0.33333333333333337,
        "meteor-3": 0.37072905160996505,
        "meteor-0": 0.4884853774367893,
        "meteor-8": 0.36842683690658196,
        "meteor-7": 0.36842683690658196,
        "meteor-16": 0.36145366728577155,
        "meteor-2": 0.2909147696261169,
        "meteor-11": 0.44658178140060684,
        "meteor-1": 0.19216153384342227,
        "meteor-10": 0.4408747743311997,
        "meteor-17": 0.016393442622950824,
        "meteor-12": 0.3460999383045767,
        "meteor-6": 0.3052341597796143,
        "meteor-18": 0.19667170953101362,
        "meteor-15": 0.25554338625549045,
        "meteor-13": 0.32037490551776265,
        "meteor-9": 0.2816827282934132,
        "meteor-4": 0.2980906319547478,
        "meteor-14": 0.21870286576168926,
        "meteor-5": 0.3781876333638164,
        "meteor-19": 0.3185815868263473,
        "ruby-3": 0.14925373134328357,
        "ruby-0": 0.26582278481012656,
        "ruby-8": 0.20547945205479456,
        "ruby-7": 0.136986301369863,
        "ruby-16": 0.18666666666666665,
        "ruby-2": 0.12857142857142856,
        "ruby-11": 0.27835051546391754,
        "ruby-1": 0.14925373134328357,
        "ruby-10": 0.18918918918918914,
        "ruby-17": 0.02985074626865669,
        "ruby-12": 0.17910447761194026,
        "ruby-6": 0.1527777777777778,
        "ruby-18": 0.17910447761194026,
        "ruby-15": 0.13749999999999996,
        "ruby-13": 0.13888888888888884,
        "ruby-9": 0.10447761194029848,
        "ruby-4": 0.14084507042253525,
        "ruby-14": 0.17910447761194026,
        "ruby-5": 0.3880597014925373,
        "ruby-19": 0.13432835820895528,
        "codebertscore_f1-3": 0.7842249870300293,
        "codebertscore_f3-3": 0.7739046812057495,
        "codebertscore_f1-0": 0.855588436126709,
        "codebertscore_f3-0": 0.8531695604324341,
        "codebertscore_f1-8": 0.800239622592926,
        "codebertscore_f3-8": 0.8157587647438049,
        "codebertscore_f1-7": 0.784005343914032,
        "codebertscore_f3-7": 0.8029249310493469,
        "codebertscore_f1-16": 0.7777349948883057,
        "codebertscore_f3-16": 0.7991471886634827,
        "codebertscore_f1-2": 0.7623701691627502,
        "codebertscore_f3-2": 0.7716146111488342,
        "codebertscore_f1-11": 0.8026896119117737,
        "codebertscore_f3-11": 0.8112719058990479,
        "codebertscore_f1-1": 0.7342330813407898,
        "codebertscore_f3-1": 0.7287366390228271,
        "codebertscore_f1-10": 0.8177976012229919,
        "codebertscore_f3-10": 0.8248079419136047,
        "codebertscore_f1-17": 0.594316840171814,
        "codebertscore_f3-17": 0.5795905590057373,
        "codebertscore_f1-12": 0.806585967540741,
        "codebertscore_f3-12": 0.8102887272834778,
        "codebertscore_f1-6": 0.7784361839294434,
        "codebertscore_f3-6": 0.7912383675575256,
        "codebertscore_f1-18": 0.7481350302696228,
        "codebertscore_f3-18": 0.7644544839859009,
        "codebertscore_f1-15": 0.7408968806266785,
        "codebertscore_f3-15": 0.7653217315673828,
        "codebertscore_f1-13": 0.7818862199783325,
        "codebertscore_f3-13": 0.7989298701286316,
        "codebertscore_f1-9": 0.7841441035270691,
        "codebertscore_f3-9": 0.7921779155731201,
        "codebertscore_f1-4": 0.7803444266319275,
        "codebertscore_f3-4": 0.7929820418357849,
        "codebertscore_f1-14": 0.7529881000518799,
        "codebertscore_f3-14": 0.7643058896064758,
        "codebertscore_f1-5": 0.879756510257721,
        "codebertscore_f3-5": 0.8676466941833496,
        "codebertscore_f1-19": 0.7701421976089478,
        "codebertscore_f3-19": 0.779238760471344,
        "codebertscore_s_f1-3": 0.796045184135437,
        "codebertscore_s_f3-3": 0.7856355309486389,
        "codebertscore_s_f1-0": 0.8529648780822754,
        "codebertscore_s_f3-0": 0.8492394089698792,
        "codebertscore_s_f1-8": 0.8078104257583618,
        "codebertscore_s_f3-8": 0.8214046359062195,
        "codebertscore_s_f1-7": 0.7932342886924744,
        "codebertscore_s_f3-7": 0.8095880150794983,
        "codebertscore_s_f1-16": 0.7829915881156921,
        "codebertscore_s_f3-16": 0.803661048412323,
        "codebertscore_s_f1-2": 0.7680196166038513,
        "codebertscore_s_f3-2": 0.7761251926422119,
        "codebertscore_s_f1-11": 0.8054975867271423,
        "codebertscore_s_f3-11": 0.8134042620658875,
        "codebertscore_s_f1-1": 0.7390599846839905,
        "codebertscore_s_f3-1": 0.729486346244812,
        "codebertscore_s_f1-10": 0.826117753982544,
        "codebertscore_s_f3-10": 0.8300493359565735,
        "codebertscore_s_f1-17": 0.556045413017273,
        "codebertscore_s_f3-17": 0.5416433811187744,
        "codebertscore_s_f1-12": 0.8172221779823303,
        "codebertscore_s_f3-12": 0.8179360032081604,
        "codebertscore_s_f1-6": 0.7859060168266296,
        "codebertscore_s_f3-6": 0.795581042766571,
        "codebertscore_s_f1-18": 0.7517695426940918,
        "codebertscore_s_f3-18": 0.7657104134559631,
        "codebertscore_s_f1-15": 0.7445986866950989,
        "codebertscore_s_f3-15": 0.767091691493988,
        "codebertscore_s_f1-13": 0.7917954325675964,
        "codebertscore_s_f3-13": 0.8054508566856384,
        "codebertscore_s_f1-9": 0.7897098660469055,
        "codebertscore_s_f3-9": 0.796783983707428,
        "codebertscore_s_f1-4": 0.7858737111091614,
        "codebertscore_s_f3-4": 0.797044575214386,
        "codebertscore_s_f1-14": 0.7577958106994629,
        "codebertscore_s_f3-14": 0.7649797797203064,
        "codebertscore_s_f1-5": 0.8820681571960449,
        "codebertscore_s_f3-5": 0.8720936179161072,
        "codebertscore_s_f1-19": 0.7717034816741943,
        "codebertscore_s_f3-19": 0.7790753245353699,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0-4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "0",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n",
        "snippet": [
            "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n"
        ],
        "simplified": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "task_id": "159",
        "3": "if(remaining >= (number + need)){\n    return [ number + need, remaining - (number + need) ];\n  } else if(remaining < (number + need)){\n    return [ number + remaining, 0 ];\n  }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return [number + Math.min(need, remaining), Math.max(0, remaining - need)];\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let left = remaining - need\n  let result = []\n  if (left < 0) {\n    result.push(remaining)\n    result.push(0)\n  } else {\n    result.push(number + need)\n    result.push(left)\n  }\n  return result\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var eat = number + need;\n  if (remaining >= eat) {\n    var ret = [eat, remaining - eat];\n  } else {\n    var ret = [eat - remaining, 0];\n  }\n  return ret;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(number + need <= remaining){\n\t\treturn [number + need, remaining - (number + need)];\n\t}\n\telse{\n\t\treturn [number + remaining, 0];\n\t}\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return [number+need<=remaining?number+need:remaining, remaining-need>=0?remaining-need:0];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(remaining < need){\n    return [number + remaining, 0];\n  }\n  else{\n    return [number + need, remaining - need];\n  }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "if (need <= remaining) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var eaten = number + need;\n    var left = 0;\n    if (eaten <= remaining) {\n        left = remaining - eaten;\n    }\n    return [eaten, left];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var total = number + need;\n  if (total > remaining) {\n    total = remaining + number;\n    return [total, 0];\n  } else {\n    return [total, remaining - total];\n  }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(number + need <= remaining){\n        return [number + need, remaining - (number + need)]\n    } else {\n        return [number + remaining, 0]\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "// Write your code here...\n    return need-number>remaining?[remaining+number,0]:[need, remaining-(need-number)];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(remaining >= need) return [number + need, remaining - need];\n  else return [number + remaining, 0];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let eaten = number + Math.min(need, remaining);\n    return [eaten, remaining - Math.min(need, remaining)];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var total = number + remaining;\n  var eaten = 0;\n  var carrotRemain = 0;\n  if (total < need) {\n    eaten = total;\n    carrotRemain = 0;\n  } else {\n    eaten = need;\n    carrotRemain = total - need;\n  }\n  return [eaten, carrotRemain];\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return (remaining >= need) ? [number + need, remaining - need] : [number + remaining, 0];\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let needCarrots = number + need;\n  if (needCarrots > remaining) {\n    return [remaining, 0];\n  } else {\n    return [needCarrots, remaining - needCarrots];\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(remaining < need) {\n    return [number + remaining, 0];\n  }\n  return [number + need, remaining - need];\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "// code here\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n  }",
        "grade-5": {
            "execution": 1
        },
        "19": "if(number + need <= remaining){\n    return [number + need, remaining - (number + need)]\n  }\n  return [remaining, 0]\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.11385988964970627,
        "bleu-0": 0.14083316217096864,
        "bleu-8": 0.05770467998237226,
        "bleu-7": 0.08100921917484444,
        "bleu-16": 0.29305709255761553,
        "bleu-2": 0.20735911550629574,
        "bleu-11": 0.2805430455957896,
        "bleu-1": 0.47112779362701135,
        "bleu-10": 0.176372419978516,
        "bleu-17": 0.1352174773865265,
        "bleu-12": 0.3458581116937045,
        "bleu-6": 0.23746239164015023,
        "bleu-18": 0.23705266435224473,
        "bleu-15": 0.08661387883295113,
        "bleu-13": 0.04707378393706195,
        "bleu-9": 0.2180395097698354,
        "bleu-4": 0.28265360518322036,
        "bleu-14": 0.3305352569838571,
        "bleu-5": 0.24098745877422104,
        "bleu-19": 0.47969127057824645,
        "codebleu-3": 0.6944152447661791,
        "codebleu-0": 0.4515128098978105,
        "codebleu-8": 0.5160087719298244,
        "codebleu-7": 0.5986842105263157,
        "codebleu-16": 0.7418253048999535,
        "codebleu-2": 0.4988142385492949,
        "codebleu-11": 0.7531168233887718,
        "codebleu-1": 0.8416791936746773,
        "codebleu-10": 0.6155796138560684,
        "codebleu-17": 0.6453947368421051,
        "codebleu-12": 0.7506254747559683,
        "codebleu-6": 0.5647963635189723,
        "codebleu-18": 0.6498157949359004,
        "codebleu-15": 0.4208333333333333,
        "codebleu-13": 0.5377192982456139,
        "codebleu-9": 0.5658020998578146,
        "codebleu-4": 0.6749598113901858,
        "codebleu-14": 0.7614488586201165,
        "codebleu-5": 0.7465242255851771,
        "codebleu-19": 0.7553871415876025,
        "chrf-3": 0.5397585094006359,
        "chrf-0": 0.43372128935776744,
        "chrf-8": 0.3850552876086102,
        "chrf-7": 0.4329430974028621,
        "chrf-16": 0.6585738756330941,
        "chrf-2": 0.5857556060951471,
        "chrf-11": 0.6342033065765741,
        "chrf-1": 0.7407236552203006,
        "chrf-10": 0.4034954880514967,
        "chrf-17": 0.569630528548317,
        "chrf-12": 0.6695730008981851,
        "chrf-6": 0.5737357078996259,
        "chrf-18": 0.6139927046418987,
        "chrf-15": 0.4554115935455168,
        "chrf-13": 0.32793710885858585,
        "chrf-9": 0.5462316605073284,
        "chrf-4": 0.6361952961899173,
        "chrf-14": 0.6542136386070729,
        "chrf-5": 0.6175219819050405,
        "chrf-19": 0.7406926104033796,
        "rougel-3": 0.5316455696202532,
        "rougel-0": 0.3703703703703704,
        "rougel-8": 0.27848101265822783,
        "rougel-7": 0.4657534246575342,
        "rougel-16": 0.7164179104477612,
        "rougel-2": 0.4482758620689655,
        "rougel-11": 0.5666666666666667,
        "rougel-1": 0.7868852459016394,
        "rougel-10": 0.47619047619047616,
        "rougel-17": 0.43478260869565216,
        "rougel-12": 0.7384615384615384,
        "rougel-6": 0.3692307692307692,
        "rougel-18": 0.6666666666666666,
        "rougel-15": 0.44067796610169496,
        "rougel-13": 0.32558139534883723,
        "rougel-9": 0.5818181818181818,
        "rougel-4": 0.47761194029850745,
        "rougel-14": 0.5964912280701754,
        "rougel-5": 0.6461538461538462,
        "rougel-19": 0.7999999999999999,
        "meteor-3": 0.6680011113356232,
        "meteor-0": 0.38275629496402874,
        "meteor-8": 0.40248484682263236,
        "meteor-7": 0.5698514066282662,
        "meteor-16": 0.8118775860859807,
        "meteor-2": 0.4725840356770988,
        "meteor-11": 0.6568664386869916,
        "meteor-1": 0.9210526315789475,
        "meteor-10": 0.49914581061125207,
        "meteor-17": 0.6348122866894197,
        "meteor-12": 0.8174961160934963,
        "meteor-6": 0.4127925680075953,
        "meteor-18": 0.7730676156583628,
        "meteor-15": 0.43295389242789195,
        "meteor-13": 0.5328068784681993,
        "meteor-9": 0.657933071799771,
        "meteor-4": 0.6705429553264605,
        "meteor-14": 0.7655883113903412,
        "meteor-5": 0.7958477508650519,
        "meteor-19": 0.9242957746478874,
        "ruby-3": 0.4117647058823529,
        "ruby-0": 0.1071428571428571,
        "ruby-8": 0.13725490196078427,
        "ruby-7": 0.33333333333333337,
        "ruby-16": 0.6153846153846154,
        "ruby-2": 0.4,
        "ruby-11": 0.4375,
        "ruby-1": 0.7272727272727273,
        "ruby-10": 0.2571428571428571,
        "ruby-17": 0.29268292682926833,
        "ruby-12": 0.6486486486486487,
        "ruby-6": 0.21621621621621623,
        "ruby-18": 0.6206896551724138,
        "ruby-15": 0.19354838709677424,
        "ruby-13": 0.2068965517241379,
        "ruby-9": 0.5357142857142857,
        "ruby-4": 0.28205128205128205,
        "ruby-14": 0.48275862068965514,
        "ruby-5": 0.5675675675675675,
        "ruby-19": 0.6875,
        "codebertscore_f1-3": 0.8884568214416504,
        "codebertscore_f3-3": 0.9042489528656006,
        "codebertscore_f1-0": 0.8493231534957886,
        "codebertscore_f3-0": 0.8661335706710815,
        "codebertscore_f1-8": 0.8112832903862,
        "codebertscore_f3-8": 0.8562623262405396,
        "codebertscore_f1-7": 0.8373759984970093,
        "codebertscore_f3-7": 0.870383620262146,
        "codebertscore_f1-16": 0.9004641771316528,
        "codebertscore_f3-16": 0.9138193130493164,
        "codebertscore_f1-2": 0.8566468954086304,
        "codebertscore_f3-2": 0.8510953783988953,
        "codebertscore_f1-11": 0.899645209312439,
        "codebertscore_f3-11": 0.907504677772522,
        "codebertscore_f1-1": 0.9347648024559021,
        "codebertscore_f3-1": 0.9399322271347046,
        "codebertscore_f1-10": 0.828173041343689,
        "codebertscore_f3-10": 0.8549030423164368,
        "codebertscore_f1-17": 0.869071900844574,
        "codebertscore_f3-17": 0.8886404633522034,
        "codebertscore_f1-12": 0.8953061699867249,
        "codebertscore_f3-12": 0.9079717993736267,
        "codebertscore_f1-6": 0.8415123224258423,
        "codebertscore_f3-6": 0.8702408671379089,
        "codebertscore_f1-18": 0.911781370639801,
        "codebertscore_f3-18": 0.9182907342910767,
        "codebertscore_f1-15": 0.8303479552268982,
        "codebertscore_f3-15": 0.8521594405174255,
        "codebertscore_f1-13": 0.7989434599876404,
        "codebertscore_f3-13": 0.8344185948371887,
        "codebertscore_f1-9": 0.8934153914451599,
        "codebertscore_f3-9": 0.8859028220176697,
        "codebertscore_f1-4": 0.8563181161880493,
        "codebertscore_f3-4": 0.8913159966468811,
        "codebertscore_f1-14": 0.907235860824585,
        "codebertscore_f3-14": 0.9075559973716736,
        "codebertscore_f1-5": 0.8795661330223083,
        "codebertscore_f3-5": 0.904443621635437,
        "codebertscore_f1-19": 0.919959306716919,
        "codebertscore_f3-19": 0.9251644611358643,
        "codebertscore_s_f1-3": 0.8854655027389526,
        "codebertscore_s_f3-3": 0.9014502763748169,
        "codebertscore_s_f1-0": 0.8420851826667786,
        "codebertscore_s_f3-0": 0.8587781190872192,
        "codebertscore_s_f1-8": 0.8135576248168945,
        "codebertscore_s_f3-8": 0.864432692527771,
        "codebertscore_s_f1-7": 0.833387017250061,
        "codebertscore_s_f3-7": 0.8733996748924255,
        "codebertscore_s_f1-16": 0.894652783870697,
        "codebertscore_s_f3-16": 0.9087625741958618,
        "codebertscore_s_f1-2": 0.8659719228744507,
        "codebertscore_s_f3-2": 0.8614086508750916,
        "codebertscore_s_f1-11": 0.8970977663993835,
        "codebertscore_s_f3-11": 0.9059080481529236,
        "codebertscore_s_f1-1": 0.925487756729126,
        "codebertscore_s_f3-1": 0.9307348132133484,
        "codebertscore_s_f1-10": 0.8267490267753601,
        "codebertscore_s_f3-10": 0.8597754240036011,
        "codebertscore_s_f1-17": 0.8747603893280029,
        "codebertscore_s_f3-17": 0.9016283750534058,
        "codebertscore_s_f1-12": 0.8935602307319641,
        "codebertscore_s_f3-12": 0.9065617322921753,
        "codebertscore_s_f1-6": 0.8533084988594055,
        "codebertscore_s_f3-6": 0.8829951286315918,
        "codebertscore_s_f1-18": 0.9064504504203796,
        "codebertscore_s_f3-18": 0.9141240119934082,
        "codebertscore_s_f1-15": 0.8134754300117493,
        "codebertscore_s_f3-15": 0.8402722477912903,
        "codebertscore_s_f1-13": 0.800534725189209,
        "codebertscore_s_f3-13": 0.8463873267173767,
        "codebertscore_s_f1-9": 0.8997771143913269,
        "codebertscore_s_f3-9": 0.8922730684280396,
        "codebertscore_s_f1-4": 0.8531752228736877,
        "codebertscore_s_f3-4": 0.8954918384552002,
        "codebertscore_s_f1-14": 0.9103720188140869,
        "codebertscore_s_f3-14": 0.9106111526489258,
        "codebertscore_s_f1-5": 0.8843952417373657,
        "codebertscore_s_f3-5": 0.9107146263122559,
        "codebertscore_s_f1-19": 0.9166653752326965,
        "codebertscore_s_f3-19": 0.9223031997680664,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nfunction iscube(a){\n",
        "snippet": [
            "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n"
        ],
        "simplified": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
        "task_id": "77",
        "0": "// a = Math.abs(a);\n    // if(a === 0) return true;\n    // var cube = 1;\n    // while(cube < a){\n    //     cube = cube + 1;\n    //     if(Math.pow(cube, 3) === a) return true;\n    // }\n    // return false;\n    return a >= 0 && Math.cbrt(a)%1 === 0;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return Number.isInteger(Math.cbrt(a));\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return Math.pow(a, 1/3) % 1 === 0;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return Number.isInteger(Math.cbrt(a));\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return (Math.cbrt(a) % 1 === 0)\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return Math.sqrt(a) % 1 === 0;\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "return !isNaN(Math.pow(a, 1/3));\n}",
        "grade-6": {
            "execution": 0
        },
        "8": "if(Math.cbrt(a) % 1 == 0){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var m=Math.cbrt(a);\n    if(m%1==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var g=a*a*a;\n  var t=a;\n  for(var i=0;i<t;i++){\n    g=g-a;\n    if(g==0){\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "if(a === 0) return true;\n    return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return Number.isInteger(Math.cbrt(a));\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "if(a==0){\n        return true;\n    }\n    if(a>0){\n        return Math.cbrt(a)%1==0;\n    }\n    if(a<0){\n        return Math.cbrt(-a)%1==0;\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var y = a/2;\n    var x = Math.floor(Math.sqrt(y));\n    var c = Math.pow(x,3);\n    if(c==a){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "17": "if(a===0){\n\t\treturn true;\n\t}\n\tvar cube=Math.abs(a);\n\tvar num=Math.round(Math.cbrt(cube));\n\tvar x=Math.pow(num,3);\n\tif(x===cube){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "//change the input to be positive to avoid lose of calculation result\n\t//due to the floating number.\n\tif(a < 0){\n\t\ta = Math.abs(a);\n\t}\n\t//simple logic to check if a is a cube of some integer number\n\treturn Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "if(a<0){\n    return true;\n  }else{\n    var c = Math.pow(a,1/3);\n    if(Number.isInteger(c)){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.19991544573928582,
        "bleu-1": 0.037681353135930615,
        "bleu-2": 0.12363415738059189,
        "bleu-3": 0.037681353135930615,
        "bleu-4": 0.05298393838120329,
        "bleu-5": 0.027444279527592562,
        "bleu-6": 0.14424603406122502,
        "bleu-8": 0.06801777787762794,
        "bleu-9": 0.1019668653865898,
        "bleu-10": 0.03316270006402463,
        "bleu-11": 0.5540889640791257,
        "bleu-12": 0.037681353135930615,
        "bleu-13": 0.06312871110271527,
        "bleu-14": 0.1712766252338756,
        "bleu-17": 0.25473877105317755,
        "bleu-18": 0.36867154685965375,
        "bleu-19": 0.19543904636677348,
        "codebleu-0": 0.6428814811130651,
        "codebleu-1": 0.2266162442013849,
        "codebleu-2": 0.22557031151817492,
        "codebleu-3": 0.2266162442013849,
        "codebleu-4": 0.2160402786457805,
        "codebleu-5": 0.19323021086118639,
        "codebleu-6": 0.23849448930094858,
        "codebleu-8": 0.2764175852733489,
        "codebleu-9": 0.37549713349201463,
        "codebleu-10": 0.32734164832477375,
        "codebleu-11": 0.631156343846162,
        "codebleu-12": 0.2266162442013849,
        "codebleu-13": 0.4812912692589874,
        "codebleu-14": 0.5752567914152327,
        "codebleu-17": 0.6679150091642798,
        "codebleu-18": 0.715272599458267,
        "codebleu-19": 0.5341628051110188,
        "chrf-0": 0.3776288781280233,
        "chrf-1": 0.16850820157075913,
        "chrf-2": 0.2530117043856773,
        "chrf-3": 0.16850820157075913,
        "chrf-4": 0.20974653945947444,
        "chrf-5": 0.1499130649979698,
        "chrf-6": 0.27090669224418934,
        "chrf-8": 0.17319490474269222,
        "chrf-9": 0.182043572517517,
        "chrf-10": 0.12898197065808994,
        "chrf-11": 0.6101469875979566,
        "chrf-12": 0.16850820157075913,
        "chrf-13": 0.20594770515094946,
        "chrf-14": 0.3192226945708468,
        "chrf-17": 0.46520152383937746,
        "chrf-18": 0.543960591835249,
        "chrf-19": 0.25849104654380545,
        "rougel-0": 0.3571428571428571,
        "rougel-1": 0.3793103448275862,
        "rougel-2": 0.48387096774193555,
        "rougel-3": 0.3793103448275862,
        "rougel-4": 0.3728813559322034,
        "rougel-5": 0.3448275862068966,
        "rougel-6": 0.48387096774193555,
        "rougel-8": 0.3188405797101449,
        "rougel-9": 0.3783783783783784,
        "rougel-10": 0.25,
        "rougel-11": 0.7710843373493975,
        "rougel-12": 0.3793103448275862,
        "rougel-13": 0.3838383838383838,
        "rougel-14": 0.45833333333333337,
        "rougel-17": 0.4778761061946903,
        "rougel-18": 0.5873015873015873,
        "rougel-19": 0.38709677419354843,
        "meteor-0": 0.5174650025299375,
        "meteor-1": 0.22100242588709346,
        "meteor-2": 0.3017880580223976,
        "meteor-3": 0.22100242588709346,
        "meteor-4": 0.2380108370891781,
        "meteor-5": 0.2497865701080397,
        "meteor-6": 0.31472359058565963,
        "meteor-8": 0.244982512779123,
        "meteor-9": 0.22507662978468898,
        "meteor-10": 0.2654320987654321,
        "meteor-11": 0.7267752809899273,
        "meteor-12": 0.22100242588709346,
        "meteor-13": 0.3790251992444833,
        "meteor-14": 0.4692760942760943,
        "meteor-17": 0.5015542334022541,
        "meteor-18": 0.7334160264280379,
        "meteor-19": 0.3075141431477243,
        "ruby-0": 0.24742268041237114,
        "ruby-1": 0.2558139534883721,
        "ruby-2": 0.34883720930232553,
        "ruby-3": 0.2558139534883721,
        "ruby-4": 0.2558139534883721,
        "ruby-5": 0.2325581395348837,
        "ruby-6": 0.34883720930232553,
        "ruby-8": 0.18604651162790697,
        "ruby-9": 0.2325581395348837,
        "ruby-10": 0.15094339622641506,
        "ruby-11": 0.6511627906976745,
        "ruby-12": 0.2558139534883721,
        "ruby-13": 0.25,
        "ruby-14": 0.24528301886792447,
        "ruby-17": 0.3285714285714286,
        "ruby-18": 0.37349397590361444,
        "ruby-19": 0.21999999999999997,
        "codebertscore_f1-0": 0.7839197516441345,
        "codebertscore_f3-0": 0.8293439149856567,
        "codebertscore_f1-1": 0.7747499942779541,
        "codebertscore_f3-1": 0.7659963965415955,
        "codebertscore_f1-2": 0.854698121547699,
        "codebertscore_f3-2": 0.8412010669708252,
        "codebertscore_f1-3": 0.7747499942779541,
        "codebertscore_f3-3": 0.7659963965415955,
        "codebertscore_f1-4": 0.7901225090026855,
        "codebertscore_f3-4": 0.7807669639587402,
        "codebertscore_f1-5": 0.8083991408348083,
        "codebertscore_f3-5": 0.7913269996643066,
        "codebertscore_f1-6": 0.8447811603546143,
        "codebertscore_f3-6": 0.8467319011688232,
        "codebertscore_f1-8": 0.7585428953170776,
        "codebertscore_f3-8": 0.7604257464408875,
        "codebertscore_f1-9": 0.766738772392273,
        "codebertscore_f3-9": 0.7665798664093018,
        "codebertscore_f1-10": 0.7065046429634094,
        "codebertscore_f3-10": 0.6932245492935181,
        "codebertscore_f1-11": 0.9019111394882202,
        "codebertscore_f3-11": 0.8995699882507324,
        "codebertscore_f1-12": 0.7747499942779541,
        "codebertscore_f3-12": 0.7659963965415955,
        "codebertscore_f1-13": 0.7700429558753967,
        "codebertscore_f3-13": 0.7712517976760864,
        "codebertscore_f1-14": 0.8086609840393066,
        "codebertscore_f3-14": 0.8293113708496094,
        "codebertscore_f1-17": 0.8075718879699707,
        "codebertscore_f3-17": 0.8351657390594482,
        "codebertscore_f1-18": 0.8040715456008911,
        "codebertscore_f3-18": 0.8647712469100952,
        "codebertscore_f1-19": 0.7984637022018433,
        "codebertscore_f3-19": 0.8271820545196533,
        "codebertscore_s_f1-0": 0.7861239314079285,
        "codebertscore_s_f3-0": 0.8406006097793579,
        "codebertscore_s_f1-1": 0.7663142681121826,
        "codebertscore_s_f3-1": 0.7628787159919739,
        "codebertscore_s_f1-2": 0.8570988178253174,
        "codebertscore_s_f3-2": 0.8476893901824951,
        "codebertscore_s_f1-3": 0.7663142681121826,
        "codebertscore_s_f3-3": 0.7628787159919739,
        "codebertscore_s_f1-4": 0.7845975160598755,
        "codebertscore_s_f3-4": 0.7755182981491089,
        "codebertscore_s_f1-5": 0.8071454763412476,
        "codebertscore_s_f3-5": 0.7885556817054749,
        "codebertscore_s_f1-6": 0.8438462615013123,
        "codebertscore_s_f3-6": 0.8508210778236389,
        "codebertscore_s_f1-8": 0.770537793636322,
        "codebertscore_s_f3-8": 0.7764964699745178,
        "codebertscore_s_f1-9": 0.7627161741256714,
        "codebertscore_s_f3-9": 0.7728992104530334,
        "codebertscore_s_f1-10": 0.7124176025390625,
        "codebertscore_s_f3-10": 0.7016398906707764,
        "codebertscore_s_f1-11": 0.9145529866218567,
        "codebertscore_s_f3-11": 0.9159221649169922,
        "codebertscore_s_f1-12": 0.7663142681121826,
        "codebertscore_s_f3-12": 0.7628787159919739,
        "codebertscore_s_f1-13": 0.7674368619918823,
        "codebertscore_s_f3-13": 0.7729964852333069,
        "codebertscore_s_f1-14": 0.8114222288131714,
        "codebertscore_s_f3-14": 0.8363807201385498,
        "codebertscore_s_f1-17": 0.8151176571846008,
        "codebertscore_s_f3-17": 0.8471708297729492,
        "codebertscore_s_f1-18": 0.8147076368331909,
        "codebertscore_s_f3-18": 0.8802454471588135,
        "codebertscore_s_f1-19": 0.8060912489891052,
        "codebertscore_s_f3-19": 0.841224193572998,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// compare_one(1, 2.5) \u279e 2.5\n// compare_one(1, \"2,3\") \u279e \"2,3\"\n// compare_one(\"5,1\", \"6\") \u279e \"6\"\n// compare_one(\"1\", 1) \u279e None\nfunction compare_one(a, b){\n",
        "snippet": [
            "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n"
        ],
        "simplified": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
        "task_id": "137",
        "3": "if(typeof a === typeof b){\n        if(a === b){\n            return false;\n        }\n        else{\n            return a > b ? a : b;\n        }\n    }\n    else{\n        return a > b ? a : b;\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if (a == b) return null;\n    if (typeof a == 'string' && typeof b == 'string'){\n        return parseFloat(a) > parseFloat(b) ? a : b;\n    }\n    if (typeof a == 'string' && typeof b == 'number'){\n        return parseFloat(a) > b ? a : b;\n    }\n    if (typeof a == 'number' && typeof b == 'string'){\n        return a > parseFloat(b) ? a : b;\n    }\n    return a > b ? a : b;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(typeof a == \"number\" && typeof b == \"number\"){\n        if(a>b){\n            return a;\n        }else if(a<b){\n            return b;\n        }else if(a==b){\n            return \"None\";\n        }\n    }else if(typeof a == \"string\" && typeof b == \"string\"){\n        let a2 = parseFloat(a.replace(/,/,\".\"));\n        let b2 = parseFloat(b.replace(/,/,\".\"));\n        if(a2>b2){\n            return a;\n        }else if(a2<b2){\n            return b;\n        }else if(a2==b2){\n            return \"None\";\n        }\n    }else if(typeof a == \"string\" && typeof b == \"number\"){\n        let a2 = parseFloat(a.replace(/,/,\".\"));\n        if(a2>b){\n            return a;\n        }else if(a2<b){\n            return b;\n        }else if(a2==b){\n            return \"None\";\n        }\n    }else if(typeof a == \"number\" && typeof b == \"string\"){\n        let b2 = parseFloat(b.replace(/,/,\".\"));\n        if(a>b2){\n            return a;\n        }else if(a<b2){\n            return b;\n        }else if(a==b2){\n            return \"None\";\n        }\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(a==b){\n        return \"None\";\n    }else if(a>b){\n        return a;\n    }else if(b>a){\n        return b;\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let newA = typeof a === \"string\" ? a.replace(/\\,/,\".\") : a;\n    let newB = typeof b === \"string\" ? b.replace(/\\,/,\".\") : b;\n    return parseFloat(newA) < parseFloat(newB) ? b :\n           parseFloat(newA) > parseFloat(newB) ? a :\n           parseFloat(newA) === parseFloat(newB) ? null : \"Invalid Input\"\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if (typeof a === typeof b) {\n        if (a === b) {\n            return null;\n        } else if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    } else if (typeof a === \"string\") {\n        let bnew = Number(b.replace(\",\", \".\"));\n        let anew = Number(a.replace(\",\", \".\"));\n        if (anew === bnew) {\n            return null;\n        } else if (anew > bnew) {\n            return a;\n        } else {\n            return b;\n        }\n    } else if (typeof b === \"string\") {\n        let bnew = Number(b.replace(\",\", \".\"));\n        let anew = Number(a.replace(\",\", \".\"));\n        if (anew === bnew) {\n            return null;\n        } else if (anew > bnew) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (a > b){\n        return a;\n    }\n    else if (a < b){\n        return b;\n    }\n    else if (a == b){\n        return None;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (a === b) {\n        return None;\n    } else if (parseFloat(a) > parseFloat(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var r = null;\n    if(typeof a == typeof b){\n        if(typeof a == \"number\"){\n            r = (a > b) ? a : b;\n        }else if(typeof a == \"string\"){\n            r = (parseFloat(a) > parseFloat(b)) ? a : b;\n        }\n    }\n    return r;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (a == b){\nreturn None\n} else if (a < b){\nreturn b\n} else {\nreturn a\n}\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(!isNaN(a) && !isNaN(b)) {\n    return a > b ? a : b\n  }\n  if(isNaN(a) && isNaN(b)) {\n    return a > b ? a : b\n  }\n  return null\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(a == b){\n        return \"None\";\n    }else if(a > b){\n        return a;\n    }else{\n        return b;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (typeof a == \"number\" && typeof b == \"number\") {\n        if (a == b) {\n            return \"None\";\n        }\n        else if (a > b) {\n            return a;\n        }\n        else {\n            return b;\n        }\n    }\n    else if (typeof a == \"string\" && typeof b == \"string\") {\n        if (a > b) {\n            return a;\n        }\n        else if (a < b) {\n            return b;\n        }\n        else {\n            return \"None\";\n        }\n    }\n    else if (typeof a == \"string\" && typeof b == \"number\") {\n        if (parseFloat(a) == b) {\n            return \"None\";\n        }\n        else if (parseFloat(a) > b) {\n            return a;\n        }\n        else {\n            return b;\n        }\n    }\n    else if (typeof a == \"number\" && typeof b == \"string\") {\n        if (a == parseFloat(b)) {\n            return \"None\";\n        }\n        else if (a > parseFloat(b)) {\n            return a;\n        }\n        else {\n            return b;\n        }\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var isNum1 = !isNaN(a);\n\tvar isNum2 = !isNaN(b);\n\tif (isNum1 && isNum2){\n\t\tif (typeof a == \"string\"){\n\t\t\ta = parseFloat(a.replace(\",\", \".\"));\n\t\t}\n\t\tif (typeof b == \"string\"){\n\t\t\tb = parseFloat(b.replace(\",\", \".\"));\n\t\t}\n\t\tif (a > b){\n\t\t\treturn a;\n\t\t} else if (a < b){\n\t\t\treturn b;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} else if (!isNum1 && !isNum2){\n\t\tif (a > b){\n\t\t\treturn a;\n\t\t} else if (a < b){\n\t\t\treturn b;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(typeof a == \"number\" && typeof b == \"number\"){\n        if(a > b){\n            return a;\n        }else if(a < b){\n            return b;\n        }else{\n            return undefined;\n        }\n    }else if(typeof a == \"string\" && typeof b == \"string\"){\n        let a_final = parseFloat(a.replace(\",\", \".\"));\n        let b_final = parseFloat(b.replace(\",\", \".\"));\n        if(a_final > b_final){\n            return a;\n        }else if(a_final < b_final){\n            return b;\n        }else{\n            return undefined;\n        }\n    }else if(typeof a == \"string\" && typeof b == \"number\"){\n        let a_final = parseFloat(a.replace(\",\", \".\"));\n        if(a_final > b){\n            return a;\n        }else if(a_final < b){\n            return b;\n        }else{\n            return undefined;\n        }\n    }else if(typeof a == \"number\" && typeof b == \"string\"){\n        let b_final = parseFloat(b.replace(\",\", \".\"));\n        if(a > b_final){\n            return a;\n        }else if(a < b_final){\n            return b;\n        }else{\n            return undefined;\n        }\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if(Number(a) === Number(b)) return None;\n    if(typeof a === \"string\" && typeof b === \"string\") return Number(a) > Number(b) ? a : b;\n    if(typeof a === \"string\" && typeof b === \"number\") return a;\n    if(typeof a === \"number\" && typeof b === \"string\") return b;\n    return a > b ? a : b;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if (typeof a == typeof b) {\n        return None;\n    }\n    else if (typeof a == \"string\") {\n        return b;\n    }\n    else if (typeof b == \"string\") {\n        return a;\n    }\n    else if (typeof a == \"number\" && typeof b == \"number\") {\n        if (a > b) {\n            return a;\n        }\n        else if (b > a) {\n            return b;\n        }\n        else {\n            return None;\n        }\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let answer = typeof a === typeof b ? a === b ? null : a > b ? a : b : typeof a === \"string\" ? \"string\" : \"number\";\n    return answer === \"string\" ? b.toString() : answer === \"number\" ? b : answer;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(parseFloat(a) === parseFloat(b)){\n        return null;\n    }\n    else if(parseFloat(a) < parseFloat(b)){\n        return b;\n    }\n    else{\n        return a;\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if (typeof a == typeof b) {\n        if (a > b) {\n            return a;\n        } else if (a < b) {\n            return b;\n        } else {\n            return \"None\";\n        }\n    }\n    else if (typeof a == \"string\") {\n        if (a.replace(\",\", \".\") > b) {\n            return a;\n        } else if (a.replace(\",\", \".\") < b) {\n            return b;\n        } else {\n            return \"None\";\n        }\n    }\n    else if (typeof b == \"string\") {\n        if (a > b.replace(\",\", \".\")) {\n            return a;\n        } else if (a < b.replace(\",\", \".\")) {\n            return b;\n        } else {\n            return \"None\";\n        }\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.08267355701943367,
        "bleu-0": 0.2440727031249845,
        "bleu-8": 0.1386754533441111,
        "bleu-7": 0.05450787920607422,
        "bleu-16": 0.22258721247609686,
        "bleu-2": 0.28898568823394377,
        "bleu-11": 0.048536057569479034,
        "bleu-1": 0.05078490701937987,
        "bleu-10": 0.2048177699390812,
        "bleu-17": 0.03250866981441684,
        "bleu-12": 0.10834452486702899,
        "bleu-6": 0.03141125981802536,
        "bleu-18": 0.13705813802817987,
        "bleu-15": 0.3213103353554647,
        "bleu-13": 0.1882158327953454,
        "bleu-9": 0.25529922637600216,
        "bleu-4": 0.30445480547850545,
        "bleu-14": 0.12025966885857092,
        "bleu-5": 0.0642198347239892,
        "bleu-19": 0.3019208750273473,
        "codebleu-3": 0.2480589325636302,
        "codebleu-0": 0.6031509757402619,
        "codebleu-8": 0.68957700139564,
        "codebleu-7": 0.1813656688269077,
        "codebleu-16": 0.5408190999881793,
        "codebleu-2": 0.729999010167373,
        "codebleu-11": 0.17786068100712796,
        "codebleu-1": 0.1897733095638193,
        "codebleu-10": 0.47308423997078125,
        "codebleu-17": 0.13536745635819725,
        "codebleu-12": 0.26529104136191617,
        "codebleu-6": 0.14929315253266484,
        "codebleu-18": 0.6431965399727021,
        "codebleu-15": 0.8082133736533669,
        "codebleu-13": 0.7326596019509453,
        "codebleu-9": 0.5760814004078112,
        "codebleu-4": 0.5390529476994774,
        "codebleu-14": 0.3109021691767077,
        "codebleu-5": 0.2377019385877464,
        "codebleu-19": 0.7312650149880752,
        "chrf-3": 0.23567779855151508,
        "chrf-0": 0.42922339442588253,
        "chrf-8": 0.3392844378776595,
        "chrf-7": 0.1800446176914937,
        "chrf-16": 0.2724171696346901,
        "chrf-2": 0.47011751416732994,
        "chrf-11": 0.1847636841253985,
        "chrf-1": 0.1814595519186368,
        "chrf-10": 0.2618553086734059,
        "chrf-17": 0.1808728575983803,
        "chrf-12": 0.2054973343397455,
        "chrf-6": 0.16885197658216136,
        "chrf-18": 0.3138344967168595,
        "chrf-15": 0.41856303716572013,
        "chrf-13": 0.3278042840636167,
        "chrf-9": 0.3944096750602786,
        "chrf-4": 0.3438900278112797,
        "chrf-14": 0.22705684304187532,
        "chrf-5": 0.2075390907898579,
        "chrf-19": 0.37487698680381093,
        "rougel-3": 0.35862068965517246,
        "rougel-0": 0.4253393665158371,
        "rougel-8": 0.3710843373493976,
        "rougel-7": 0.40298507462686567,
        "rougel-16": 0.44976076555023925,
        "rougel-2": 0.4983606557377049,
        "rougel-11": 0.3333333333333333,
        "rougel-1": 0.35555555555555557,
        "rougel-10": 0.46511627906976744,
        "rougel-17": 0.3252032520325203,
        "rougel-12": 0.31168831168831174,
        "rougel-6": 0.375,
        "rougel-18": 0.35582822085889565,
        "rougel-15": 0.5682656826568265,
        "rougel-13": 0.4221635883905013,
        "rougel-9": 0.41747572815533984,
        "rougel-4": 0.5077720207253886,
        "rougel-14": 0.32142857142857145,
        "rougel-5": 0.34965034965034963,
        "rougel-19": 0.5333333333333333,
        "meteor-3": 0.23895365881159092,
        "meteor-0": 0.4071984322887855,
        "meteor-8": 0.4987675914525391,
        "meteor-7": 0.2380453020134228,
        "meteor-16": 0.4454413344285083,
        "meteor-2": 0.6165932860548907,
        "meteor-11": 0.23272539348492557,
        "meteor-1": 0.18380509000620732,
        "meteor-10": 0.3191039101831088,
        "meteor-17": 0.1866545866364666,
        "meteor-12": 0.2762582056892779,
        "meteor-6": 0.1833700984935553,
        "meteor-18": 0.3930158320183704,
        "meteor-15": 0.6414250743341122,
        "meteor-13": 0.6203261758841716,
        "meteor-9": 0.38718470457250354,
        "meteor-4": 0.3817666462791716,
        "meteor-14": 0.23128030711206898,
        "meteor-5": 0.22515876782606728,
        "meteor-19": 0.538160733549083,
        "ruby-3": 0.2210526315789474,
        "ruby-0": 0.2936507936507936,
        "ruby-8": 0.24062499999999998,
        "ruby-7": 0.2421052631578947,
        "ruby-16": 0.20175438596491224,
        "ruby-2": 0.36190476190476195,
        "ruby-11": 0.19999999999999996,
        "ruby-1": 0.2315789473684211,
        "ruby-10": 0.3157894736842105,
        "ruby-17": 0.19999999999999996,
        "ruby-12": 0.21052631578947367,
        "ruby-6": 0.2210526315789474,
        "ruby-18": 0.22943722943722944,
        "ruby-15": 0.3977272727272727,
        "ruby-13": 0.2816901408450704,
        "ruby-9": 0.25225225225225223,
        "ruby-4": 0.33673469387755106,
        "ruby-14": 0.18947368421052635,
        "ruby-5": 0.2210526315789474,
        "ruby-19": 0.37142857142857144,
        "codebertscore_f1-3": 0.8094436526298523,
        "codebertscore_f3-3": 0.790789783000946,
        "codebertscore_f1-0": 0.8304403424263,
        "codebertscore_f3-0": 0.8294201493263245,
        "codebertscore_f1-8": 0.7488276362419128,
        "codebertscore_f3-8": 0.8011519908905029,
        "codebertscore_f1-7": 0.7948309779167175,
        "codebertscore_f3-7": 0.775423526763916,
        "codebertscore_f1-16": 0.8270841240882874,
        "codebertscore_f3-16": 0.8436471819877625,
        "codebertscore_f1-2": 0.7832181453704834,
        "codebertscore_f3-2": 0.8256566524505615,
        "codebertscore_f1-11": 0.795502781867981,
        "codebertscore_f3-11": 0.7691956758499146,
        "codebertscore_f1-1": 0.79117751121521,
        "codebertscore_f3-1": 0.7784231305122375,
        "codebertscore_f1-10": 0.8317434787750244,
        "codebertscore_f3-10": 0.8276961445808411,
        "codebertscore_f1-17": 0.773762047290802,
        "codebertscore_f3-17": 0.7517244219779968,
        "codebertscore_f1-12": 0.7978434562683105,
        "codebertscore_f3-12": 0.7922236323356628,
        "codebertscore_f1-6": 0.7755363583564758,
        "codebertscore_f3-6": 0.7561413049697876,
        "codebertscore_f1-18": 0.7506133913993835,
        "codebertscore_f3-18": 0.7872843742370605,
        "codebertscore_f1-15": 0.8218926787376404,
        "codebertscore_f3-15": 0.8557170629501343,
        "codebertscore_f1-13": 0.7594674825668335,
        "codebertscore_f3-13": 0.8103182911872864,
        "codebertscore_f1-9": 0.8527929782867432,
        "codebertscore_f3-9": 0.843591034412384,
        "codebertscore_f1-4": 0.8100858926773071,
        "codebertscore_f3-4": 0.8086496591567993,
        "codebertscore_f1-14": 0.8088754415512085,
        "codebertscore_f3-14": 0.7998610138893127,
        "codebertscore_f1-5": 0.7946617007255554,
        "codebertscore_f3-5": 0.7846129536628723,
        "codebertscore_f1-19": 0.7825215458869934,
        "codebertscore_f3-19": 0.8016095161437988,
        "codebertscore_s_f1-3": 0.9197758436203003,
        "codebertscore_s_f3-3": 0.9016677737236023,
        "codebertscore_s_f1-0": 0.9123358726501465,
        "codebertscore_s_f3-0": 0.9164739847183228,
        "codebertscore_s_f1-8": 0.86308753490448,
        "codebertscore_s_f3-8": 0.9080294966697693,
        "codebertscore_s_f1-7": 0.9221096038818359,
        "codebertscore_s_f3-7": 0.8955622911453247,
        "codebertscore_s_f1-16": 0.9134424924850464,
        "codebertscore_s_f3-16": 0.9255509972572327,
        "codebertscore_s_f1-2": 0.9020777344703674,
        "codebertscore_s_f3-2": 0.9259508848190308,
        "codebertscore_s_f1-11": 0.9248471260070801,
        "codebertscore_s_f3-11": 0.8974776268005371,
        "codebertscore_s_f1-1": 0.9222012162208557,
        "codebertscore_s_f3-1": 0.8999713659286499,
        "codebertscore_s_f1-10": 0.9224438071250916,
        "codebertscore_s_f3-10": 0.9179357290267944,
        "codebertscore_s_f1-17": 0.9159885048866272,
        "codebertscore_s_f3-17": 0.88516765832901,
        "codebertscore_s_f1-12": 0.9091864824295044,
        "codebertscore_s_f3-12": 0.900778591632843,
        "codebertscore_s_f1-6": 0.9211871027946472,
        "codebertscore_s_f3-6": 0.8917645812034607,
        "codebertscore_s_f1-18": 0.8790345788002014,
        "codebertscore_s_f3-18": 0.9015327095985413,
        "codebertscore_s_f1-15": 0.8996080756187439,
        "codebertscore_s_f3-15": 0.9266608357429504,
        "codebertscore_s_f1-13": 0.8738502860069275,
        "codebertscore_s_f3-13": 0.9132237434387207,
        "codebertscore_s_f1-9": 0.9264505505561829,
        "codebertscore_s_f3-9": 0.9233351349830627,
        "codebertscore_s_f1-4": 0.9115605354309082,
        "codebertscore_s_f3-4": 0.9093964695930481,
        "codebertscore_s_f1-14": 0.9185800552368164,
        "codebertscore_s_f3-14": 0.9078017473220825,
        "codebertscore_s_f1-5": 0.9188513159751892,
        "codebertscore_s_f3-5": 0.9030734300613403,
        "codebertscore_s_f1-19": 0.9079741835594177,
        "codebertscore_s_f3-19": 0.9110673069953918,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "Score: 1",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3, 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunction triangle_area(a, b, c){\n",
        "snippet": [
            "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "task_id": "71",
        "3": "if (a+b<c || a+c<b || b+c<a) return -1;\n\tvar p = (a+b+c)/2;\n\treturn Math.round(Math.sqrt(p*(p-a)*(p-b)*(p-c))*100)/100;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(a < 0 || b < 0 || c < 0){\n        return -1;\n    }\n    if(a + b > c && a + c > b && b + c > a){\n        let p = (a + b + c) / 2;\n        let A = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return A.toFixed(2);\n    } else {\n        return -1;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(a + b > c && a + c > b && b + c > a){\n      return +((a * b * c / 2).toFixed(2));\n    } else {\n      return -1;\n    }\n  }",
        "grade-8": {
            "execution": 0
        },
        "7": "// sort sides to use the most optimal (biggest side)\n    // for calculating the area\n    let sides = [a, b, c].sort(function(a, b){return a-b});\n    let p = (sides[0] + sides[1] + sides[2]) / 2;\n    let area = p * (p - sides[0]) * (p - sides[1]) * (p - sides[2]);\n    return area > 0 ? +Math.sqrt(area).toFixed(2) : -1;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let s = (a + b + c) / 2;\n  if (s - a < 0 || s - b < 0 || s - c < 0) return -1;\n  return Number((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2));\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var s = (a + b + c) / 2;\n    var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    if(area > 0) {\n        return area.toFixed(2);\n    } else {\n        return -1;\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area > 0 ? area.toFixed(2) : -1;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let p = (a + b + c) / 2;\n    let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    if(isNaN(area)) return -1;\n    return Number(area.toFixed(2));\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "const sides = [a, b, c];\n  sides.sort((a, b) => a - b);\n  if(sides[0] + sides[1] > sides[2]){\n    const s = sides.reduce((a,b) => a + b) / 2;\n    return +(Math.sqrt(s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]))).toFixed(2);\n  }\n  return -1;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if(a+b>c && a+c>b && b+c>a){\n        let s = (a+b+c)/2;\n        let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n        return Number(area.toFixed(2));\n    }\n    return -1;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (a + b > c && a + c > b && b + c > a) {\n        return +(a * b / 2).toFixed(2);\n    } else {\n        return -1;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if (a+b>c && a+c>b && b+c>a){\n        return Number((0.5*a*b).toFixed(2));\n    } else {\n        return -1;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (a + b > c && a + c > b && b + c > a) {\n    return Number(((a + b + c) / 2 * (Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a))) / 2).toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if ((a+b)>c && (a+c)>b && (b+c)>a){\n\t\tlet sp = (a+b+c)/2;\n\t\tlet area = sp*(sp-a)*(sp-b)*(sp-c);\n\t\tarea = Math.sqrt(area);\n\t\treturn +area.toFixed(2);\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        return (Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2);\n    }\n    return -1;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    }\n    return -1;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if( a+b>c && a+c>b && b+c>a){\n        let p = (a+b+c)/2;\n        let sq = p*(p-a)*(p-b)*(p-c);\n        return Math.sqrt(sq).toFixed(2);\n    }else{\n        return -1;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = a + b + c;\n    if(sum < c) return -1;\n    let p = sum / 2;\n    let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    return Number(area.toFixed(2));\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(a + b > c && a + c > b && b + c > a){\n        //Heron's formula\n        let s = (a + b + c) / 2;\n        return parseFloat((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2));\n    }\n    return -1;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let sides = [a, b, c].sort((a, b) => a - b);\n    if (sides[0] + sides[1] > sides[2]) {\n        let s = (a + b + c) / 2;\n        return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n    } else {\n        return -1;\n    }\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.46795356355489715,
        "bleu-0": 0.36651528332143585,
        "bleu-8": 0.1520916928540075,
        "bleu-7": 0.1390736438406415,
        "bleu-16": 0.48677052431189466,
        "bleu-2": 0.5175525402641036,
        "bleu-11": 0.4334498827472226,
        "bleu-1": 0.35139070128857375,
        "bleu-10": 0.24861919208716796,
        "bleu-17": 0.5563070757122958,
        "bleu-12": 0.14840920612400435,
        "bleu-6": 0.15626245189813392,
        "bleu-18": 0.3130526750172951,
        "bleu-15": 0.42071784422351655,
        "bleu-13": 0.5202247286878844,
        "bleu-9": 0.5563070757122958,
        "bleu-4": 0.3987137324154888,
        "bleu-14": 0.3068599507437863,
        "bleu-5": 0.5174432991072014,
        "bleu-19": 0.38134169508622556,
        "codebleu-3": 0.7097100651457297,
        "codebleu-0": 0.7507077292930684,
        "codebleu-8": 0.3096147004503347,
        "codebleu-7": 0.5516803412003309,
        "codebleu-16": 0.6306203925001629,
        "codebleu-2": 0.5856141214591144,
        "codebleu-11": 0.5144381367356872,
        "codebleu-1": 0.5610834393443352,
        "codebleu-10": 0.6067446552638277,
        "codebleu-17": 0.7248983148001888,
        "codebleu-12": 0.27799011932588347,
        "codebleu-6": 0.29827131196437107,
        "codebleu-18": 0.5744723646037229,
        "codebleu-15": 0.7099235622725468,
        "codebleu-13": 0.6584325740486816,
        "codebleu-9": 0.7248983148001888,
        "codebleu-4": 0.6541758206748073,
        "codebleu-14": 0.585327519418171,
        "codebleu-5": 0.673353109044883,
        "codebleu-19": 0.6815541480605893,
        "chrf-3": 0.4180696027265994,
        "chrf-0": 0.4070392593281916,
        "chrf-8": 0.25169597043220615,
        "chrf-7": 0.2973712615154127,
        "chrf-16": 0.461443877401149,
        "chrf-2": 0.6199986791657732,
        "chrf-11": 0.5106865132969362,
        "chrf-1": 0.43777932838436207,
        "chrf-10": 0.3125638877126783,
        "chrf-17": 0.5477429728709239,
        "chrf-12": 0.2536864936960358,
        "chrf-6": 0.25530390507924805,
        "chrf-18": 0.3430871612372853,
        "chrf-15": 0.4989442105117454,
        "chrf-13": 0.48322062509148056,
        "chrf-9": 0.5477429728709239,
        "chrf-4": 0.39574935900646546,
        "chrf-14": 0.400640987549348,
        "chrf-5": 0.4731478581691627,
        "chrf-19": 0.3722547551365988,
        "rougel-3": 0.7361963190184048,
        "rougel-0": 0.6041666666666667,
        "rougel-8": 0.5,
        "rougel-7": 0.4075829383886256,
        "rougel-16": 0.5939393939393939,
        "rougel-2": 0.6753246753246752,
        "rougel-11": 0.6575342465753425,
        "rougel-1": 0.5548387096774193,
        "rougel-10": 0.48039215686274506,
        "rougel-17": 0.7529411764705882,
        "rougel-12": 0.4705882352941177,
        "rougel-6": 0.4714285714285714,
        "rougel-18": 0.5683060109289617,
        "rougel-15": 0.6298342541436464,
        "rougel-13": 0.7317073170731707,
        "rougel-9": 0.7529411764705882,
        "rougel-4": 0.6352941176470588,
        "rougel-14": 0.6064516129032257,
        "rougel-5": 0.6896551724137931,
        "rougel-19": 0.5212765957446808,
        "meteor-3": 0.6947470346163157,
        "meteor-0": 0.6893071402316441,
        "meteor-8": 0.35260663507109,
        "meteor-7": 0.4592417675383935,
        "meteor-16": 0.6376458043201547,
        "meteor-2": 0.554543847419458,
        "meteor-11": 0.5852962930734423,
        "meteor-1": 0.4709167558461217,
        "meteor-10": 0.5529416364726429,
        "meteor-17": 0.6256509046012806,
        "meteor-12": 0.32774838330393885,
        "meteor-6": 0.346051799296422,
        "meteor-18": 0.46754387352460713,
        "meteor-15": 0.6195182435552234,
        "meteor-13": 0.6522917239945987,
        "meteor-9": 0.6256509046012806,
        "meteor-4": 0.63915744978388,
        "meteor-14": 0.5275278620145606,
        "meteor-5": 0.6388089699728706,
        "meteor-19": 0.5079669382015018,
        "ruby-3": 0.6590909090909092,
        "ruby-0": 0.46153846153846156,
        "ruby-8": 0.31818181818181823,
        "ruby-7": 0.30081300813008127,
        "ruby-16": 0.40909090909090906,
        "ruby-2": 0.4772727272727273,
        "ruby-11": 0.5113636363636364,
        "ruby-1": 0.36363636363636365,
        "ruby-10": 0.35344827586206895,
        "ruby-17": 0.6818181818181819,
        "ruby-12": 0.2954545454545454,
        "ruby-6": 0.30681818181818177,
        "ruby-18": 0.43157894736842106,
        "ruby-15": 0.5376344086021505,
        "ruby-13": 0.6590909090909092,
        "ruby-9": 0.6818181818181819,
        "ruby-4": 0.5340909090909092,
        "ruby-14": 0.5,
        "ruby-5": 0.5909090909090908,
        "ruby-19": 0.39,
        "codebertscore_f1-3": 0.8865143656730652,
        "codebertscore_f3-3": 0.8811109066009521,
        "codebertscore_f1-0": 0.8882639408111572,
        "codebertscore_f3-0": 0.8917139172554016,
        "codebertscore_f1-8": 0.8647136688232422,
        "codebertscore_f3-8": 0.836305558681488,
        "codebertscore_f1-7": 0.8032700419425964,
        "codebertscore_f3-7": 0.8327007293701172,
        "codebertscore_f1-16": 0.8932858109474182,
        "codebertscore_f3-16": 0.8883302211761475,
        "codebertscore_f1-2": 0.9060202836990356,
        "codebertscore_f3-2": 0.900459349155426,
        "codebertscore_f1-11": 0.905552089214325,
        "codebertscore_f3-11": 0.8929651379585266,
        "codebertscore_f1-1": 0.8775157928466797,
        "codebertscore_f3-1": 0.8774064183235168,
        "codebertscore_f1-10": 0.8348357081413269,
        "codebertscore_f3-10": 0.8485360741615295,
        "codebertscore_f1-17": 0.9126100540161133,
        "codebertscore_f3-17": 0.9094120860099792,
        "codebertscore_f1-12": 0.8672981262207031,
        "codebertscore_f3-12": 0.837361752986908,
        "codebertscore_f1-6": 0.8486549854278564,
        "codebertscore_f3-6": 0.820936918258667,
        "codebertscore_f1-18": 0.8818574547767639,
        "codebertscore_f3-18": 0.8702754378318787,
        "codebertscore_f1-15": 0.8953268527984619,
        "codebertscore_f3-15": 0.8951448798179626,
        "codebertscore_f1-13": 0.9315573573112488,
        "codebertscore_f3-13": 0.9180204272270203,
        "codebertscore_f1-9": 0.9398066401481628,
        "codebertscore_f3-9": 0.936040997505188,
        "codebertscore_f1-4": 0.8883289098739624,
        "codebertscore_f3-4": 0.8848956823348999,
        "codebertscore_f1-14": 0.8900758028030396,
        "codebertscore_f3-14": 0.8853580355644226,
        "codebertscore_f1-5": 0.9084120392799377,
        "codebertscore_f3-5": 0.9101987481117249,
        "codebertscore_f1-19": 0.8516603708267212,
        "codebertscore_f3-19": 0.855716347694397,
        "codebertscore_s_f1-3": 0.8930781483650208,
        "codebertscore_s_f3-3": 0.8877965211868286,
        "codebertscore_s_f1-0": 0.8936062455177307,
        "codebertscore_s_f3-0": 0.895861029624939,
        "codebertscore_s_f1-8": 0.8697877526283264,
        "codebertscore_s_f3-8": 0.8410139083862305,
        "codebertscore_s_f1-7": 0.8144696354866028,
        "codebertscore_s_f3-7": 0.8437516689300537,
        "codebertscore_s_f1-16": 0.8999087810516357,
        "codebertscore_s_f3-16": 0.8967077732086182,
        "codebertscore_s_f1-2": 0.9084644317626953,
        "codebertscore_s_f3-2": 0.9039180874824524,
        "codebertscore_s_f1-11": 0.9053875803947449,
        "codebertscore_s_f3-11": 0.8943738341331482,
        "codebertscore_s_f1-1": 0.8834299445152283,
        "codebertscore_s_f3-1": 0.8844643831253052,
        "codebertscore_s_f1-10": 0.8450857400894165,
        "codebertscore_s_f3-10": 0.8573279976844788,
        "codebertscore_s_f1-17": 0.9159883856773376,
        "codebertscore_s_f3-17": 0.9128549695014954,
        "codebertscore_s_f1-12": 0.8730079531669617,
        "codebertscore_s_f3-12": 0.8428708910942078,
        "codebertscore_s_f1-6": 0.8533371686935425,
        "codebertscore_s_f3-6": 0.8253056406974792,
        "codebertscore_s_f1-18": 0.8866927623748779,
        "codebertscore_s_f3-18": 0.8763752579689026,
        "codebertscore_s_f1-15": 0.8999931216239929,
        "codebertscore_s_f3-15": 0.8998972773551941,
        "codebertscore_s_f1-13": 0.933465301990509,
        "codebertscore_s_f3-13": 0.9207456707954407,
        "codebertscore_s_f1-9": 0.941468358039856,
        "codebertscore_s_f3-9": 0.9377548098564148,
        "codebertscore_s_f1-4": 0.8957074880599976,
        "codebertscore_s_f3-4": 0.8924477696418762,
        "codebertscore_s_f1-14": 0.8944321274757385,
        "codebertscore_s_f3-14": 0.8901296257972717,
        "codebertscore_s_f1-5": 0.9106013774871826,
        "codebertscore_s_f3-5": 0.9131132960319519,
        "codebertscore_s_f1-19": 0.8585073947906494,
        "codebertscore_s_f3-19": 0.8633549213409424,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n",
        "snippet": [
            "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n"
        ],
        "simplified": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
        "task_id": "120",
        "3": "let sorted = arr.sort((a,b) => b-a)\n    let sliced = sorted.slice(0,k)\n    return sliced\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "arr.sort(function(a, b){\n    return b - a;\n  });\n  return arr.slice(0, k);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "arr.sort((a, b) => b - a);\n  arr.length = k;\n  return arr;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// sort the array in ascending order\n  arr.sort(function(a, b){\n    return a - b;\n  });\n  // return the last k elements from the sorted array\n  return arr.slice(arr.length - k);\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let output = [];\n    let max= -Infinity;\n    let idx = 0;\n    while(k > 0){\n        for(let i = 0; i < arr.length; i++){\n            if(arr[i] > max){\n                max = arr[i];\n                idx = i;\n            }\n        }\n        output.push(max);\n        max = -Infinity;\n        arr.splice(idx, 1);\n        k--;\n    }\n    return output;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// return max(arr, k, 0, arr.length-1);\n    return quickSelect(arr, k, 0, arr.length-1);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(arr.length == 0) return null;\n  if(arr.length == 1) return arr;\n  const pq = new PQ();\n  for(let i = 0; i < arr.length; i++){\n    pq.insert(arr[i]);\n  }\n  const res = [];\n  for(let i = 0; i < k; i++){\n    res.push(pq.remove());\n  }\n  return res;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let list = [], ans = [], i, length = arr.length;\n    for(i = 0; i < length; i++){\n        if(list.length == 0 || arr[i] > list[0]){\n            list.unshift(arr[i]);\n        }\n        else{\n            list.push(arr[i]);\n        }\n    }\n    for(i = 0; i < k; i++){\n        ans.push(list.shift());\n    }\n    return ans;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let sortedArray = arr.sort((a,b) => a - b);\n    return sortedArray.slice(sortedArray.length - k);\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let sorted = arr.sort((a,b) => b-a);\n    return sorted.slice(0,k);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let result = []\n    let most = null\n    while(k > 0){\n        most = null\n        for(let i = 0; i < arr.length; i++){\n            if(most === null || arr[i] > most){\n                most = arr[i]\n            }\n        }\n        result.push(most)\n        arr.splice(arr.indexOf(most), 1)\n        k--\n    }\n    return result\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = []\n    if(arr.length == 0 || k == 0){\n        return result\n    }\n    arr.sort((a,b) => a-b)\n    result = arr.slice(arr.length - k)\n    return result\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(k == 0) return [];\n    if(k >= arr.length) return arr;\n    let copy = arr.slice();\n    let result = [];\n    let part = partition(copy, k-1);\n    while(part < k){\n        let temp = partition(copy, part-1);\n        if(temp < k){\n            result.push(copy[temp]);\n            copy.splice(temp, 1);\n            part = temp + 1;\n        }else{\n            result.push(copy[temp]);\n            copy.splice(temp, 1);\n            part = temp;\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var sortedArr = arr.sort((a,b) => b-a)\n    return sortedArr.slice(0,k)\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(k <= 0) return []\n    if(k >= arr.length) return arr.sort((a,b) => a-b)\n    let kArray = arr.slice(0,k)\n    kArray.sort((a,b) => a-b)\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > kArray[0]){\n            let j = 0\n            while(j < k && arr[i] > kArray[j]){\n                j++\n            }\n            kArray.splice(j,0,arr[i])\n            kArray.splice(0,1)\n        }\n    }\n    return kArray\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n    if(arr.length <= k){\n        return arr;\n    }\n    var i = 0;\n    while(i < k){\n        result.push(arr[i]);\n        i++;\n    }\n    i = k;\n    while(i < arr.length){\n        j = k - 1;\n        while(j >= 0){\n            if(arr[i] > result[j]){\n                if(j === 0){\n                    result[j] = arr[i];\n                }\n                else{\n                    temp = result[j];\n                    result[j] = arr[i];\n                    result[j - 1] = temp;\n                }\n            }\n            j--;\n        }\n        i++;\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = [];\n\tfor(let i = 0; i < k; i++){\n\t\tresult.push(Math.max(...arr));\n\t\tarr.splice(arr.indexOf(Math.max(...arr)), 1);\n\t}\n\treturn result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var sorted = quickSort(arr);\n    console.log(\"sorted: \", sorted);\n    return sorted.slice(sorted.length - k, sorted.length);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var res = []\n\tfor(var i = 0; i < arr.length; i++){\n\t\twhile(res.length && res[res.length - 1] < arr[i] && res.length + arr.length - i > k){\n\t\t\tres.pop()\n\t\t}\n\t\tif(res.length < k){\n\t\t\tres.push(arr[i])\n\t\t}\n\t}\n\treturn res\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(arr.length === 0 || k === 0) return [];\n    if(arr.length === k) return arr;\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        while(result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k){\n            result.pop();\n        }\n        if(result.length < k){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.006050365018260951,
        "bleu-0": 0.0063945435275516785,
        "bleu-8": 0.0018675101336823616,
        "bleu-7": 0.022270108572565457,
        "bleu-16": 0.11114044825462335,
        "bleu-2": 0.004699512422125719,
        "bleu-11": 0.12165476022087006,
        "bleu-1": 0.13798816952628473,
        "bleu-10": 0.010005971179600172,
        "bleu-17": 0.005085393291288651,
        "bleu-12": 0.10937795182056055,
        "bleu-6": 0.06857640939665637,
        "bleu-18": 0.11671219310487708,
        "bleu-15": 0.006152800739445327,
        "bleu-13": 0.14140168817128346,
        "bleu-9": 0.12668595325790105,
        "bleu-4": 0.04341757187033761,
        "bleu-14": 0.009473365451344034,
        "bleu-5": 0.07047720864656365,
        "bleu-19": 0.11291552023671708,
        "codebleu-3": 0.13464966402237263,
        "codebleu-0": 0.11496987203513045,
        "codebleu-8": 0.1060622224846832,
        "codebleu-7": 0.18546939198971382,
        "codebleu-16": 0.42469808126583497,
        "codebleu-2": 0.10487644909564135,
        "codebleu-11": 0.438414955767146,
        "codebleu-1": 0.5141782093066645,
        "codebleu-10": 0.1355278604836787,
        "codebleu-17": 0.1225037715164716,
        "codebleu-12": 0.4272157860514071,
        "codebleu-6": 0.22045323461416397,
        "codebleu-18": 0.5217059308196237,
        "codebleu-15": 0.1145089719559375,
        "codebleu-13": 0.5766858564106134,
        "codebleu-9": 0.61163576803811,
        "codebleu-4": 0.2649197638719625,
        "codebleu-14": 0.13626878485161734,
        "codebleu-5": 0.3945479731184771,
        "codebleu-19": 0.5392870896300961,
        "chrf-3": 0.11765758917167995,
        "chrf-0": 0.12539604956096595,
        "chrf-8": 0.08795634574057408,
        "chrf-7": 0.18210301421608907,
        "chrf-16": 0.24276413376931963,
        "chrf-2": 0.13780649945944579,
        "chrf-11": 0.27318276589630885,
        "chrf-1": 0.2542208649134514,
        "chrf-10": 0.13411030064551943,
        "chrf-17": 0.10438322763209129,
        "chrf-12": 0.2382961358034624,
        "chrf-6": 0.2279399800170256,
        "chrf-18": 0.26012384473728695,
        "chrf-15": 0.09723591851789308,
        "chrf-13": 0.31274965022798823,
        "chrf-9": 0.27271520157078255,
        "chrf-4": 0.16831614101166964,
        "chrf-14": 0.16255949900174504,
        "chrf-5": 0.2096271192303298,
        "chrf-19": 0.26321838635616096,
        "rougel-3": 0.24324324324324326,
        "rougel-0": 0.20547945205479454,
        "rougel-8": 0.16901408450704225,
        "rougel-7": 0.20359281437125748,
        "rougel-16": 0.37914691943127965,
        "rougel-2": 0.17105263157894737,
        "rougel-11": 0.3534883720930233,
        "rougel-1": 0.36123348017621143,
        "rougel-10": 0.2384105960264901,
        "rougel-17": 0.23287671232876708,
        "rougel-12": 0.3804878048780488,
        "rougel-6": 0.2705882352941177,
        "rougel-18": 0.2811244979919679,
        "rougel-15": 0.21917808219178084,
        "rougel-13": 0.3520599250936329,
        "rougel-9": 0.37453183520599254,
        "rougel-4": 0.2651933701657459,
        "rougel-14": 0.19480519480519481,
        "rougel-5": 0.3645320197044335,
        "rougel-19": 0.3539094650205762,
        "meteor-3": 0.13371519611562097,
        "meteor-0": 0.1436657841286732,
        "meteor-8": 0.08411214953271029,
        "meteor-7": 0.1409914459089693,
        "meteor-16": 0.2832592925229794,
        "meteor-2": 0.0925925925925926,
        "meteor-11": 0.3093730704406794,
        "meteor-1": 0.3345775742469957,
        "meteor-10": 0.138222949011558,
        "meteor-17": 0.13396420020522176,
        "meteor-12": 0.31835969162598843,
        "meteor-6": 0.22797941938393868,
        "meteor-18": 0.29717691863789386,
        "meteor-15": 0.12816975883394258,
        "meteor-13": 0.40453451882845193,
        "meteor-9": 0.39619120139575614,
        "meteor-4": 0.21528156967924958,
        "meteor-14": 0.12221216274556651,
        "meteor-5": 0.2914518125552608,
        "meteor-19": 0.3671325618601807,
        "ruby-3": 0.1293103448275862,
        "ruby-0": 0.11206896551724133,
        "ruby-8": 0.09482758620689657,
        "ruby-7": 0.10344827586206895,
        "ruby-16": 0.2586206896551724,
        "ruby-2": 0.09482758620689657,
        "ruby-11": 0.19827586206896552,
        "ruby-1": 0.1724137931034483,
        "ruby-10": 0.11206896551724133,
        "ruby-17": 0.1293103448275862,
        "ruby-12": 0.2844827586206896,
        "ruby-6": 0.14655172413793105,
        "ruby-18": 0.16541353383458646,
        "ruby-15": 0.12068965517241381,
        "ruby-13": 0.2185430463576159,
        "ruby-9": 0.2450331125827815,
        "ruby-4": 0.18103448275862066,
        "ruby-14": 0.09482758620689657,
        "ruby-5": 0.23275862068965514,
        "ruby-19": 0.17322834645669294,
        "codebertscore_f1-3": 0.7274210453033447,
        "codebertscore_f3-3": 0.7071302533149719,
        "codebertscore_f1-0": 0.6985863447189331,
        "codebertscore_f3-0": 0.679248571395874,
        "codebertscore_f1-8": 0.694311261177063,
        "codebertscore_f3-8": 0.672311007976532,
        "codebertscore_f1-7": 0.7057187557220459,
        "codebertscore_f3-7": 0.7053366899490356,
        "codebertscore_f1-16": 0.7899903059005737,
        "codebertscore_f3-16": 0.8027185797691345,
        "codebertscore_f1-2": 0.7219449877738953,
        "codebertscore_f3-2": 0.7049247026443481,
        "codebertscore_f1-11": 0.7922888994216919,
        "codebertscore_f3-11": 0.7880761027336121,
        "codebertscore_f1-1": 0.7875075340270996,
        "codebertscore_f3-1": 0.7920741438865662,
        "codebertscore_f1-10": 0.719035804271698,
        "codebertscore_f3-10": 0.7016937136650085,
        "codebertscore_f1-17": 0.7182706594467163,
        "codebertscore_f3-17": 0.6927329897880554,
        "codebertscore_f1-12": 0.7857569456100464,
        "codebertscore_f3-12": 0.801061749458313,
        "codebertscore_f1-6": 0.7677424550056458,
        "codebertscore_f3-6": 0.757377564907074,
        "codebertscore_f1-18": 0.7866276502609253,
        "codebertscore_f3-18": 0.7913777828216553,
        "codebertscore_f1-15": 0.707940936088562,
        "codebertscore_f3-15": 0.6860179901123047,
        "codebertscore_f1-13": 0.793646514415741,
        "codebertscore_f3-13": 0.8093278408050537,
        "codebertscore_f1-9": 0.7715802192687988,
        "codebertscore_f3-9": 0.7806251049041748,
        "codebertscore_f1-4": 0.7539561986923218,
        "codebertscore_f3-4": 0.7484773397445679,
        "codebertscore_f1-14": 0.7159919738769531,
        "codebertscore_f3-14": 0.6979948878288269,
        "codebertscore_f1-5": 0.7879853248596191,
        "codebertscore_f3-5": 0.7845368385314941,
        "codebertscore_f1-19": 0.8030025959014893,
        "codebertscore_f3-19": 0.8067992925643921,
        "codebertscore_s_f1-3": 0.7308722734451294,
        "codebertscore_s_f3-3": 0.7156214118003845,
        "codebertscore_s_f1-0": 0.7101893424987793,
        "codebertscore_s_f3-0": 0.6921618580818176,
        "codebertscore_s_f1-8": 0.7039455771446228,
        "codebertscore_s_f3-8": 0.6798200607299805,
        "codebertscore_s_f1-7": 0.7131978273391724,
        "codebertscore_s_f3-7": 0.71713787317276,
        "codebertscore_s_f1-16": 0.7914390563964844,
        "codebertscore_s_f3-16": 0.8077044486999512,
        "codebertscore_s_f1-2": 0.7327560186386108,
        "codebertscore_s_f3-2": 0.7177903056144714,
        "codebertscore_s_f1-11": 0.7958446741104126,
        "codebertscore_s_f3-11": 0.7945522665977478,
        "codebertscore_s_f1-1": 0.7938766479492188,
        "codebertscore_s_f3-1": 0.8014654517173767,
        "codebertscore_s_f1-10": 0.7328921556472778,
        "codebertscore_s_f3-10": 0.7193992137908936,
        "codebertscore_s_f1-17": 0.7282215356826782,
        "codebertscore_s_f3-17": 0.7081541419029236,
        "codebertscore_s_f1-12": 0.787720263004303,
        "codebertscore_s_f3-12": 0.8051486611366272,
        "codebertscore_s_f1-6": 0.7782843708992004,
        "codebertscore_s_f3-6": 0.7707236409187317,
        "codebertscore_s_f1-18": 0.793571412563324,
        "codebertscore_s_f3-18": 0.8012012243270874,
        "codebertscore_s_f1-15": 0.7122650146484375,
        "codebertscore_s_f3-15": 0.6951746344566345,
        "codebertscore_s_f1-13": 0.8037781119346619,
        "codebertscore_s_f3-13": 0.8199242949485779,
        "codebertscore_s_f1-9": 0.7866351008415222,
        "codebertscore_s_f3-9": 0.791342556476593,
        "codebertscore_s_f1-4": 0.7633355259895325,
        "codebertscore_s_f3-4": 0.7622187733650208,
        "codebertscore_s_f1-14": 0.7157007455825806,
        "codebertscore_s_f3-14": 0.701411247253418,
        "codebertscore_s_f1-5": 0.79371577501297,
        "codebertscore_s_f3-5": 0.789720356464386,
        "codebertscore_s_f1-19": 0.8090198636054993,
        "codebertscore_s_f3-19": 0.8136743307113647,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n",
        "snippet": [
            "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n"
        ],
        "simplified": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "56",
        "0": "var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            count += 1;\n        }\n        else if (brackets[i] == \">\"){\n            count -= 1;\n        }\n        if (count < 0){\n            return false;\n        }\n    }\n    if (count > 0){\n        return false;\n    }\n    return true;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "if(brackets === null){\n        return false;\n    }\n    if(brackets.length % 2 !== 0){\n        return false;\n    }\n    var arr = brackets.split(\"\");\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === \"<\"){\n            count++;\n        }else{\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    if(count === 0){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "if(brackets.length === 0){\n\t\treturn true;\n\t}\n\tif(brackets.length === 1){\n\t\treturn false;\n\t}\n\tif(brackets[0] === '>'){\n\t\treturn false;\n\t}\n\tif(brackets[brackets.length - 1] === '<'){\n\t\treturn false;\n\t}\n\tvar count = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === '<'){\n\t\t\tcount += 1;\n\t\t}\n\t\tif(brackets[i] === '>'){\n\t\t\tcount -= 1;\n\t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count === 0){\n\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var i;\n  var j;\n  for (i = 0; i < brackets.length; i += 1){\n    if (brackets[i] === \"<\"){\n      for (j = i; j < brackets.length; j += 1){\n        if (brackets[j] === \">\"){\n          break;\n        }\n      }\n      if (j === brackets.length){\n        return false;\n      }\n    }\n  }\n  return true;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var brace = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"<\") {\n      brace += 1;\n    }\n    else if (brackets[i] == \">\") {\n      brace -= 1;\n    }\n    if (brace < 0) {\n      return false;\n    }\n  }\n  if (brace == 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "6": "var counter = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            counter += 1;\n        } else if (brackets[i] == \">\"){\n            counter -= 1;\n        }\n        if (counter < 0){\n            return false;\n        }\n    }\n    if (counter == 0){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            open++;\n        }\n        else if (brackets[i] == \">\"){\n            open--;\n        }\n        if (open < 0){\n            return false;\n        }\n    }\n    if (open == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var opening = [];\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"<\") {\n\t\t\topening.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\tif (opening.length != 0) {\n\t\t\t\topening.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (opening.length == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var correct=false;\n    var open=brackets.split(\"<\").length-1;\n    var close=brackets.split(\">\").length-1;\n    if(open==close){\n        correct=true;\n    }\n    return correct;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "if(brackets.length == 0) return false;\n\tif(brackets.length == 1) return false;\n\tif(brackets.length == 2) {\n\t\tif(brackets[0] == \"<\" && brackets[1] == \">\") return true;\n\t\telse return false;\n\t}\n\tvar c = 0;\n\tvar d = 0;\n\tvar o = [];\n\tvar c = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \"<\"){\n\t\t\to.push(i);\n\t\t}\n\t\tif(brackets[i] == \">\"){\n\t\t\tc.push(i);\n\t\t}\n\t}\n\tif(o.length != c.length) return false;\n\twhile(o.length != 0){\n\t\tif(o[0] > c[0]) return false;\n\t\to.shift();\n\t\tc.shift();\n\t}\n\treturn true;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            count++;\n        }\n        else if (brackets[i] == \">\"){\n            count--;\n        }\n        if (count < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "// create a counter that increment if it's \"<\" and decrement if it's \">\"\n    var counter = 0;\n    // iterate through the string\n    for (var i = 0; i < brackets.length; i++){\n        // if bracket is \"<\" increment\n        if (brackets[i] === \"<\"){\n            counter++;\n        } else {\n            // if bracket is \">\" decrement\n            counter--;\n        }\n        // if counter gets negative, there is a \">\" without a \"<\" before it\n        if (counter < 0){\n            return false;\n        }\n    }\n    // if all the brackets have corresponding pairs, the counter will be 0 at the end.\n    return counter === 0;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++;\n    }\n    else if (brackets[i] === \">\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  if (count === 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var counter = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"<\") {\n      counter += 1;\n    }\n    else if (brackets[i] == \">\") {\n      counter -= 1;\n    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  if (counter != 0) {\n    return false;\n  }\n  return true;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "var opening = 0;\n    var closing = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            opening += 1;\n        }\n        else if (brackets[i] == \">\") {\n            closing += 1;\n        }\n    }\n    if (opening == closing) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "//Assume brackets is a string of \"<\" and \">\"\n  //Create a counter to count how many left brackets there are.\n  //Loop over the brackets\n    //If we hit a \"<\", increment the counter.\n    //If we hit a \">\", decrement the counter.\n    //If we hit a \">\" and the counter is 0, return False.\n  //If the counter is not 0, return False.\n  //If the counter is 0, return True.\n  var counter = 0;\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      counter += 1;\n    } else if(brackets[i] === \">\"){\n      counter -= 1;\n      if(counter < 0){\n        return false;\n      }\n    }\n  }\n  if(counter === 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var stack = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"<\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse{\n\t\t\tif(stack.length === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\tif(stack.length !== 0){\n\t\treturn false;\n\t}\n\treturn true;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var position = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      position += 1;\n    } else if (bracket === \">\") {\n      position -= 1;\n    }\n    if (position < 0) {\n      return false;\n    }\n  }\n  return position === 0;\n}",
        "grade-18": {
            "execution": 1
        },
        "bleu-0": 0.24583346031904413,
        "bleu-1": 0.14132206957235138,
        "bleu-2": 0.1314919074888195,
        "bleu-3": 0.15558445929694042,
        "bleu-4": 0.22697370987548252,
        "bleu-5": 5.242885663363467e-22,
        "bleu-6": 0.22697370987548252,
        "bleu-7": 0.19027827068486405,
        "bleu-8": 0.15131872047717518,
        "bleu-9": 0.15179779890081646,
        "bleu-10": 0.0912314195403388,
        "bleu-11": 0.19027827068486405,
        "bleu-12": 0.09813248014917374,
        "bleu-13": 0.18410616663135326,
        "bleu-14": 0.24305523513150473,
        "bleu-15": 0.21770396187611415,
        "bleu-16": 0.11462091476728276,
        "bleu-17": 0.16921746219959705,
        "bleu-18": 0.25456277763182295,
        "codebleu-0": 0.7338167272145977,
        "codebleu-1": 0.7009646958370105,
        "codebleu-2": 0.6925695787329984,
        "codebleu-3": 0.6242544767857919,
        "codebleu-4": 0.741602397222638,
        "codebleu-5": 0.01092896174863388,
        "codebleu-6": 0.741602397222638,
        "codebleu-7": 0.6981951009404621,
        "codebleu-8": 0.6348047815770922,
        "codebleu-9": 0.5284380174360612,
        "codebleu-10": 0.6402236976740913,
        "codebleu-11": 0.6981951009404621,
        "codebleu-12": 0.6719085074358797,
        "codebleu-13": 0.6971664169315436,
        "codebleu-14": 0.7333536896833411,
        "codebleu-15": 0.7050183017245893,
        "codebleu-16": 0.7360581453721573,
        "codebleu-17": 0.6268589434488621,
        "codebleu-18": 0.7462005751820281,
        "chrf-0": 0.40272145871125226,
        "chrf-1": 0.3225876328118635,
        "chrf-2": 0.30871002587506885,
        "chrf-3": 0.3436178576133539,
        "chrf-4": 0.369551790585241,
        "chrf-5": 0.011876484560570073,
        "chrf-6": 0.37165197961880314,
        "chrf-7": 0.3639054831163009,
        "chrf-8": 0.3421366921853169,
        "chrf-9": 0.2829066913612333,
        "chrf-10": 0.29978649581289535,
        "chrf-11": 0.35948351032683346,
        "chrf-12": 0.27233557965092514,
        "chrf-13": 0.3576681820107296,
        "chrf-14": 0.39529554881501633,
        "chrf-15": 0.36264190378095873,
        "chrf-16": 0.27836350512355856,
        "chrf-17": 0.3684332014718288,
        "chrf-18": 0.3830680792524453,
        "rougel-0": 0.5467625899280575,
        "rougel-1": 0.40697674418604646,
        "rougel-2": 0.36792452830188677,
        "rougel-3": 0.41379310344827586,
        "rougel-4": 0.5594405594405595,
        "rougel-5": 0.0392156862745098,
        "rougel-6": 0.5594405594405595,
        "rougel-7": 0.5106382978723404,
        "rougel-8": 0.4246575342465754,
        "rougel-9": 0.4230769230769231,
        "rougel-10": 0.25196850393700787,
        "rougel-11": 0.5106382978723404,
        "rougel-12": 0.3609756097560975,
        "rougel-13": 0.4999999999999999,
        "rougel-14": 0.5571428571428572,
        "rougel-15": 0.4963503649635037,
        "rougel-16": 0.32000000000000006,
        "rougel-17": 0.43356643356643354,
        "rougel-18": 0.6029411764705882,
        "meteor-0": 0.6260795378667393,
        "meteor-1": 0.54638847173053,
        "meteor-2": 0.5157271241830066,
        "meteor-3": 0.5469940557964362,
        "meteor-4": 0.5397668449127558,
        "meteor-5": 0.011086474501108647,
        "meteor-6": 0.5397668449127558,
        "meteor-7": 0.5417622861139121,
        "meteor-8": 0.44269116300366307,
        "meteor-9": 0.48947648778554087,
        "meteor-10": 0.4067517201834862,
        "meteor-11": 0.5417622861139121,
        "meteor-12": 0.5312215770817252,
        "meteor-13": 0.5192495275921195,
        "meteor-14": 0.57876704783308,
        "meteor-15": 0.5357483705772812,
        "meteor-16": 0.4591880341880342,
        "meteor-17": 0.5480662983425415,
        "meteor-18": 0.6782177009065321,
        "ruby-0": 0.4269662921348315,
        "ruby-1": 0.2704918032786885,
        "ruby-2": 0.2407407407407407,
        "ruby-3": 0.2947368421052632,
        "ruby-4": 0.4301075268817204,
        "ruby-5": 0.020000000000000018,
        "ruby-6": 0.4301075268817204,
        "ruby-7": 0.3846153846153846,
        "ruby-8": 0.3125,
        "ruby-9": 0.2222222222222222,
        "ruby-10": 0.1470588235294118,
        "ruby-11": 0.3846153846153846,
        "ruby-12": 0.22580645161290325,
        "ruby-13": 0.37234042553191493,
        "ruby-14": 0.43333333333333335,
        "ruby-15": 0.367816091954023,
        "ruby-16": 0.19999999999999996,
        "ruby-17": 0.32258064516129037,
        "ruby-18": 0.4767441860465116,
        "codebertscore_f1-0": 0.8388671875,
        "codebertscore_f3-0": 0.8502450585365295,
        "codebertscore_f1-1": 0.7631382346153259,
        "codebertscore_f3-1": 0.7724282145500183,
        "codebertscore_f1-2": 0.7867172360420227,
        "codebertscore_f3-2": 0.7965600490570068,
        "codebertscore_f1-3": 0.7905209064483643,
        "codebertscore_f3-3": 0.7953065633773804,
        "codebertscore_f1-4": 0.8516061305999756,
        "codebertscore_f3-4": 0.8637518286705017,
        "codebertscore_f1-5": 0.0,
        "codebertscore_f3-5": 0.0,
        "codebertscore_f1-6": 0.8377485275268555,
        "codebertscore_f3-6": 0.8520052433013916,
        "codebertscore_f1-7": 0.7991824746131897,
        "codebertscore_f3-7": 0.8024246692657471,
        "codebertscore_f1-8": 0.7934257984161377,
        "codebertscore_f3-8": 0.7939128875732422,
        "codebertscore_f1-9": 0.7527033090591431,
        "codebertscore_f3-9": 0.7549052238464355,
        "codebertscore_f1-10": 0.7323295474052429,
        "codebertscore_f3-10": 0.7528269290924072,
        "codebertscore_f1-11": 0.8109607696533203,
        "codebertscore_f3-11": 0.8152197003364563,
        "codebertscore_f1-12": 0.7093530893325806,
        "codebertscore_f3-12": 0.7619615793228149,
        "codebertscore_f1-13": 0.8408452868461609,
        "codebertscore_f3-13": 0.8460851907730103,
        "codebertscore_f1-14": 0.8679638504981995,
        "codebertscore_f3-14": 0.8808838725090027,
        "codebertscore_f1-15": 0.7973147034645081,
        "codebertscore_f3-15": 0.8031341433525085,
        "codebertscore_f1-16": 0.731063961982727,
        "codebertscore_f3-16": 0.7727076411247253,
        "codebertscore_f1-17": 0.8078766465187073,
        "codebertscore_f3-17": 0.8100225329399109,
        "codebertscore_f1-18": 0.8708935379981995,
        "codebertscore_f3-18": 0.8873446583747864,
        "codebertscore_s_f1-0": 0.8526811003684998,
        "codebertscore_s_f3-0": 0.8595030903816223,
        "codebertscore_s_f1-1": 0.7790815234184265,
        "codebertscore_s_f3-1": 0.7843099236488342,
        "codebertscore_s_f1-2": 0.794177234172821,
        "codebertscore_s_f3-2": 0.7982645034790039,
        "codebertscore_s_f1-3": 0.7959362268447876,
        "codebertscore_s_f3-3": 0.7960729002952576,
        "codebertscore_s_f1-4": 0.8618146181106567,
        "codebertscore_s_f3-4": 0.869548499584198,
        "codebertscore_s_f1-5": 0.0,
        "codebertscore_s_f3-5": 0.0,
        "codebertscore_s_f1-6": 0.8523814082145691,
        "codebertscore_s_f3-6": 0.8619463443756104,
        "codebertscore_s_f1-7": 0.8144060969352722,
        "codebertscore_s_f3-7": 0.8117767572402954,
        "codebertscore_s_f1-8": 0.8025529384613037,
        "codebertscore_s_f3-8": 0.7985936999320984,
        "codebertscore_s_f1-9": 0.7591707110404968,
        "codebertscore_s_f3-9": 0.7561073899269104,
        "codebertscore_s_f1-10": 0.7432900667190552,
        "codebertscore_s_f3-10": 0.7558119297027588,
        "codebertscore_s_f1-11": 0.8258517980575562,
        "codebertscore_s_f3-11": 0.8248928189277649,
        "codebertscore_s_f1-12": 0.7332653403282166,
        "codebertscore_s_f3-12": 0.785211443901062,
        "codebertscore_s_f1-13": 0.8464162945747375,
        "codebertscore_s_f3-13": 0.846931517124176,
        "codebertscore_s_f1-14": 0.8733243942260742,
        "codebertscore_s_f3-14": 0.8818715214729309,
        "codebertscore_s_f1-15": 0.8124856352806091,
        "codebertscore_s_f3-15": 0.8135168552398682,
        "codebertscore_s_f1-16": 0.7487713694572449,
        "codebertscore_s_f3-16": 0.789330780506134,
        "codebertscore_s_f1-17": 0.8121342658996582,
        "codebertscore_s_f3-17": 0.8098375201225281,
        "codebertscore_s_f1-18": 0.8749402761459351,
        "codebertscore_s_f3-18": 0.8866396546363831,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3"
    },
    {
        "intent": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s, n){\n",
        "snippet": [
            "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n"
        ],
        "simplified": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
        "task_id": "117",
        "3": "var regex = /[bcdfghjklmnpqrstvwxyz]/i;\n    var temp = s.split(\" \");\n    var result = [];\n    for(var i = 0; i < temp.length; i++){\n        var counter = 0;\n        for(var j = 0; j < temp[i].length; j++){\n            if(regex.test(temp[i][j])){\n                counter++;\n            }\n        }\n        if(counter == n){\n            result.push(temp[i]);\n        }\n    }\n    return result;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let list = [];\n    let temp = s.split(\" \");\n    for(let i = 0; i < temp.length; i++){\n        if(countVowels(temp[i]) == n){\n            list.push(temp[i]);\n        }\n    }\n    return list;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let res = [];\n    let vowels = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1};\n    let words = s.split(' ');\n    for(let word of words){\n        let num = 0;\n        for(let ch of word){\n            if(!vowels[ch])\n                num++;\n        }\n        if(num === n)\n            res.push(word);\n    }\n    return res;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return s.split(' ').filter(word => {\n        return word.split('').filter(char => {\n            return /[bcdfghjklmnpqrstvwxyz]/i.test(char);\n        }).length === n;\n    });\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var string = s.split(\" \");\n  var numConsonants = 0;\n  var finalArray = [];\n  for(var i = 0; i < string.length; i++){\n    var word = string[i];\n    for(var j = 0; j < word.length; j++){\n      var letter = word[j];\n      if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      }else{\n        numConsonants++;\n      }\n    }\n    if(numConsonants === n){\n      finalArray.push(word);\n    }\n    numConsonants = 0;\n  }\n  return finalArray;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let regex = /[^aeiou ]/gi;\n  let words = s.split(' ');\n  let result = [];\n  words.forEach(function(word){\n    let match = word.match(regex);\n    if(match){\n      if(match.length === n){\n        result.push(word);\n      }\n    }\n  });\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return s.split(\" \").filter(v => [...v].filter(v => isVowel(v)).length == n);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = [];\n  let words = s.split(' ');\n  if (s === '') return result;\n  words.forEach(word => {\n    let consonants = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (!'aeiou'.includes(word[i])) consonants++;\n    }\n    if (consonants === n) result.push(word);\n  });\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var arr = [];\n    s.split(' ').forEach(function(el){\n        if(el.match(/[b-df-hj-np-tv-z]/gi).length == n){\n            arr.push(el);\n        }\n    });\n    return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(s.length === 0){\n    return [];\n  }else{\n    let result = [];\n    let words = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n      let count = 0;\n      for(let j = 0; j < words[i].length; j++){\n        if(!isVowel(words[i][j])){\n          count++;\n        }\n      }\n      if(count === n){\n        result.push(words[i]);\n      }\n    }\n    return result;\n  }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var array = s.split(\" \");\n\tvar arr = [];\n\tfor(i = 0; i < array.length; i++){\n\t\tif(consonants(array[i]) == n){\n\t\t\tarr.push(array[i]);\n\t\t}\n\t}\n\treturn arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let consonants = 'bcdfghjklmnpqrstvwxyz';\n    let words = s.split(' ');\n    let validWords = [];\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        let consCount = 0;\n        for(let j = 0; j < word.length; j++){\n            if(consonants.includes(word[j])){\n                consCount++;\n            }\n        }\n        if(consCount === n){\n            validWords.push(word);\n        }\n    }\n    return validWords;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let allWords = s.split(' ');\n    let wordsWithKCons = [];\n    let cons = 'bcdfghjklmnpqrstvwxyz'.split('');\n    for(let word of allWords){\n        let wordCounter = 0;\n        for(let i = 0; i < word.length; i++){\n            if(cons.includes(word[i])){\n                wordCounter++;\n            }\n        }\n        if(wordCounter === n){\n            wordsWithKCons.push(word);\n        }\n    }\n    return wordsWithKCons;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "const non_consonants = ['a', 'e', 'i', 'o', 'u'];\n  const map = s.split(' ').map(word => word.split('').filter(letter => !non_consonants.includes(letter)).length);\n  const res = [];\n  for (let i = 0; i < map.length; i++) {\n    if (map[i] === n) {\n      res.push(s.split(' ')[i]);\n    }\n  }\n  return res;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(s.length == 0){\n        return [];\n    }\n    let arr = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let matchArr = [];\n    for(let i = 0; i < arr.length; i++){\n        let cCount = 0;\n        for(let j = 0; j < arr[i].length; j++){\n            if(consonants.includes(arr[i][j].toLowerCase())){\n                cCount++;\n            }\n        }\n        if(cCount == n){\n            matchArr.push(arr[i]);\n        }\n    }\n    return matchArr;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if (s === \"\") return [];\n    var words = s.split(\" \");\n    var result = [];\n    for (var i = 0; i < words.length; i++) {\n        var currentWord = words[i];\n        var currentWordConsonantsCount = 0;\n        for (var j = 0; j < currentWord.length; j++) {\n            var char = currentWord[j];\n            if (char !== \"a\" && char !== \"e\" && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n                currentWordConsonantsCount++;\n            }\n        }\n        if (currentWordConsonantsCount === n) {\n            result.push(currentWord);\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//Test\n    if(typeof s != \"string\" || typeof n != \"number\"){\n        return \"Input invalid\";\n    }\n    let list = s.split(\" \");\n    //Test\n    if(list.length == 0){\n        return \"Input invalid\";\n    }\n    let result = [];\n    for(let i = 0; i < list.length; i++){\n        if(consonant_count(list[i]) == n){\n            result.push(list[i]);\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(s==''){\n        return [];\n    }\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let words = s.split(' ');\n    words = words.filter(word => {\n        if(word.length > n) {\n            let charArray = word.split('');\n            let result = charArray.filter(letter => consonants.includes(letter));\n            return result.length == n;\n        }\n    });\n    return words;\n}\nmodule.exports = select_words;",
        "grade-14": {
            "execution": 0
        },
        "5": "const regex = /[aeiou\\s]/g;\n    const words = s.split(' ').filter(word => !(word.match(regex) || []).length);\n    return words.filter(word => word.length === n);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(s==\"\") return [];\n  let res=[];\n  for(let i=0;i<s.length;i++){\n    if(s[i]==\" \"){\n      let str=s.slice(0,i);\n      s=s.slice(i+1);\n      i=0;\n      if(isValid(str,n)) res.push(str);\n    }\n  }\n  return res;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.15259808642204553,
        "bleu-0": 0.034516848258679685,
        "bleu-8": 0.05791654352599971,
        "bleu-7": 0.004344024886635885,
        "bleu-16": 0.20479513815076233,
        "bleu-2": 0.028463441520131045,
        "bleu-11": 0.0012005391515215054,
        "bleu-1": 0.09982554902673431,
        "bleu-10": 0.015154349229423592,
        "bleu-17": 0.20124209577463759,
        "bleu-12": 0.028700683419027248,
        "bleu-6": 0.15636452156893804,
        "bleu-18": 0.11128667666283971,
        "bleu-15": 0.12725469892639318,
        "bleu-13": 0.2748888194022379,
        "bleu-9": 0.2766428660776879,
        "bleu-4": 0.11858080304129447,
        "bleu-14": 0.0633012585176804,
        "bleu-5": 0.009792692532400412,
        "bleu-19": 0.08879571371459204,
        "codebleu-3": 0.32646904871157206,
        "codebleu-0": 0.17210845962529717,
        "codebleu-8": 0.23329176444241204,
        "codebleu-7": 0.12285734766644174,
        "codebleu-16": 0.3675198829183527,
        "codebleu-2": 0.18691258442562741,
        "codebleu-11": 0.08100214311754314,
        "codebleu-1": 0.2521320113820604,
        "codebleu-10": 0.1494364054231983,
        "codebleu-17": 0.330630989200699,
        "codebleu-12": 0.16646695830544558,
        "codebleu-6": 0.30451108690360124,
        "codebleu-18": 0.2665721105300746,
        "codebleu-15": 0.2908513580046867,
        "codebleu-13": 0.4886667117361565,
        "codebleu-9": 0.43663182655829336,
        "codebleu-4": 0.2821828412224573,
        "codebleu-14": 0.22793372118499228,
        "codebleu-5": 0.13492383001639657,
        "codebleu-19": 0.23268054883078682,
        "chrf-3": 0.281336363117411,
        "chrf-0": 0.22405127633374433,
        "chrf-8": 0.1841909676968902,
        "chrf-7": 0.12559276123972554,
        "chrf-16": 0.247223717165738,
        "chrf-2": 0.16752786923755902,
        "chrf-11": 0.08634418338883823,
        "chrf-1": 0.24317240069662419,
        "chrf-10": 0.13016376989468728,
        "chrf-17": 0.3509145908181444,
        "chrf-12": 0.17140268700806796,
        "chrf-6": 0.2953154964819045,
        "chrf-18": 0.24182063971576004,
        "chrf-15": 0.2539183810480239,
        "chrf-13": 0.3262316374314019,
        "chrf-9": 0.2600339727724966,
        "chrf-4": 0.2740128983503975,
        "chrf-14": 0.2099918779311018,
        "chrf-5": 0.12952440611581695,
        "chrf-19": 0.2232765778234306,
        "rougel-3": 0.4456824512534819,
        "rougel-0": 0.31168831168831174,
        "rougel-8": 0.27011494252873564,
        "rougel-7": 0.17449664429530204,
        "rougel-16": 0.4444444444444445,
        "rougel-2": 0.2484472049689441,
        "rougel-11": 0.14893617021276595,
        "rougel-1": 0.3594202898550724,
        "rougel-10": 0.2006472491909385,
        "rougel-17": 0.47696476964769646,
        "rougel-12": 0.3202614379084967,
        "rougel-6": 0.4198895027624309,
        "rougel-18": 0.3492957746478873,
        "rougel-15": 0.2896174863387978,
        "rougel-13": 0.378494623655914,
        "rougel-9": 0.5083932853717027,
        "rougel-4": 0.3305322128851541,
        "rougel-14": 0.22478386167146971,
        "rougel-5": 0.17049180327868854,
        "rougel-19": 0.34705882352941175,
        "meteor-3": 0.3156975789516244,
        "meteor-0": 0.19795671837480297,
        "meteor-8": 0.24672227551896606,
        "meteor-7": 0.11274048563024133,
        "meteor-16": 0.3407226517634777,
        "meteor-2": 0.17706204348220797,
        "meteor-11": 0.07341417829678859,
        "meteor-1": 0.22132203158979974,
        "meteor-10": 0.13286642492959563,
        "meteor-17": 0.3398152519298907,
        "meteor-12": 0.1866795285274665,
        "meteor-6": 0.27759548006802537,
        "meteor-18": 0.2653766212724487,
        "meteor-15": 0.2545838053678251,
        "meteor-13": 0.39129709287796743,
        "meteor-9": 0.4302467542416139,
        "meteor-4": 0.27820079075286624,
        "meteor-14": 0.1550969735140361,
        "meteor-5": 0.11801299427996693,
        "meteor-19": 0.19195848283181363,
        "ruby-3": 0.2975206611570248,
        "ruby-0": 0.18181818181818177,
        "ruby-8": 0.18181818181818177,
        "ruby-7": 0.10330578512396693,
        "ruby-16": 0.27685950413223137,
        "ruby-2": 0.1198347107438017,
        "ruby-11": 0.0826446280991735,
        "ruby-1": 0.2024793388429752,
        "ruby-10": 0.09917355371900827,
        "ruby-17": 0.27685950413223137,
        "ruby-12": 0.1900826446280992,
        "ruby-6": 0.21900826446280997,
        "ruby-18": 0.1776859504132231,
        "ruby-15": 0.14462809917355368,
        "ruby-13": 0.21074380165289253,
        "ruby-9": 0.29338842975206614,
        "ruby-4": 0.17355371900826444,
        "ruby-14": 0.13636363636363635,
        "ruby-5": 0.08677685950413228,
        "ruby-19": 0.2272727272727273,
        "codebertscore_f1-3": 0.8105161190032959,
        "codebertscore_f3-3": 0.8219500184059143,
        "codebertscore_f1-0": 0.7859309911727905,
        "codebertscore_f3-0": 0.7527080178260803,
        "codebertscore_f1-8": 0.7680068612098694,
        "codebertscore_f3-8": 0.7516894936561584,
        "codebertscore_f1-7": 0.6410678625106812,
        "codebertscore_f3-7": 0.6366796493530273,
        "codebertscore_f1-16": 0.8103135824203491,
        "codebertscore_f3-16": 0.8170964121818542,
        "codebertscore_f1-2": 0.7250959277153015,
        "codebertscore_f3-2": 0.6952599287033081,
        "codebertscore_f1-11": 0.6342960000038147,
        "codebertscore_f3-11": 0.6069595217704773,
        "codebertscore_f1-1": 0.7862241268157959,
        "codebertscore_f3-1": 0.768974244594574,
        "codebertscore_f1-10": 0.6844789385795593,
        "codebertscore_f3-10": 0.664767324924469,
        "codebertscore_f1-17": 0.8403436541557312,
        "codebertscore_f3-17": 0.823485791683197,
        "codebertscore_f1-12": 0.7615491151809692,
        "codebertscore_f3-12": 0.7262009382247925,
        "codebertscore_f1-6": 0.7867849469184875,
        "codebertscore_f3-6": 0.7942554354667664,
        "codebertscore_f1-18": 0.7586805820465088,
        "codebertscore_f3-18": 0.7681486010551453,
        "codebertscore_f1-15": 0.7768210172653198,
        "codebertscore_f3-15": 0.775777280330658,
        "codebertscore_f1-13": 0.7924088835716248,
        "codebertscore_f3-13": 0.8078107833862305,
        "codebertscore_f1-9": 0.8270244598388672,
        "codebertscore_f3-9": 0.8433473706245422,
        "codebertscore_f1-4": 0.7721705436706543,
        "codebertscore_f3-4": 0.7783049941062927,
        "codebertscore_f1-14": 0.6927391886711121,
        "codebertscore_f3-14": 0.7061355710029602,
        "codebertscore_f1-5": 0.6847880482673645,
        "codebertscore_f3-5": 0.6570222973823547,
        "codebertscore_f1-19": 0.7777006030082703,
        "codebertscore_f3-19": 0.7527487874031067,
        "codebertscore_s_f1-3": 0.8046808838844299,
        "codebertscore_s_f3-3": 0.8144615292549133,
        "codebertscore_s_f1-0": 0.791640043258667,
        "codebertscore_s_f3-0": 0.7627991437911987,
        "codebertscore_s_f1-8": 0.7647406458854675,
        "codebertscore_s_f3-8": 0.7462813258171082,
        "codebertscore_s_f1-7": 0.6537012457847595,
        "codebertscore_s_f3-7": 0.6498908400535583,
        "codebertscore_s_f1-16": 0.8000560998916626,
        "codebertscore_s_f3-16": 0.8113052845001221,
        "codebertscore_s_f1-2": 0.7263893485069275,
        "codebertscore_s_f3-2": 0.6933518052101135,
        "codebertscore_s_f1-11": 0.6385065913200378,
        "codebertscore_s_f3-11": 0.6080964803695679,
        "codebertscore_s_f1-1": 0.7869059443473816,
        "codebertscore_s_f3-1": 0.7690293788909912,
        "codebertscore_s_f1-10": 0.6901038885116577,
        "codebertscore_s_f3-10": 0.673417329788208,
        "codebertscore_s_f1-17": 0.8377758264541626,
        "codebertscore_s_f3-17": 0.8197916746139526,
        "codebertscore_s_f1-12": 0.7697044014930725,
        "codebertscore_s_f3-12": 0.7378487586975098,
        "codebertscore_s_f1-6": 0.7822005748748779,
        "codebertscore_s_f3-6": 0.7904349565505981,
        "codebertscore_s_f1-18": 0.7467299103736877,
        "codebertscore_s_f3-18": 0.7556567788124084,
        "codebertscore_s_f1-15": 0.7791211605072021,
        "codebertscore_s_f3-15": 0.775509774684906,
        "codebertscore_s_f1-13": 0.7959369421005249,
        "codebertscore_s_f3-13": 0.8119868040084839,
        "codebertscore_s_f1-9": 0.8238887190818787,
        "codebertscore_s_f3-9": 0.8440350890159607,
        "codebertscore_s_f1-4": 0.7672152519226074,
        "codebertscore_s_f3-4": 0.7713242769241333,
        "codebertscore_s_f1-14": 0.6865300536155701,
        "codebertscore_s_f3-14": 0.6979718804359436,
        "codebertscore_s_f1-5": 0.6836273670196533,
        "codebertscore_s_f3-5": 0.6534932851791382,
        "codebertscore_s_f1-19": 0.7908143401145935,
        "codebertscore_s_f3-19": 0.7665536999702454,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 0,
        "raw_gpt35_nsnr-0": "Functional Correctness: 2",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num){\n",
        "snippet": [
            "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n"
        ],
        "simplified": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
        "task_id": "78",
        "3": "var symbol = {\n    0:0,\n    1:1,\n    2:2,\n    3:3,\n    4:4,\n    5:5,\n    6:6,\n    7:7,\n    8:8,\n    9:9,\n    A:10,\n    B:11,\n    C:12,\n    D:13,\n    E:14,\n    F:15\n  }\n  return symbol[num];\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let key = {\n    'A':10,\n    'B':11,\n    'C':12,\n    'D':13,\n    'E':14,\n    'F':15\n  }\n  let count = 0;\n  for(let i = 0; i < num.length; i++){\n    if(num[i] in key){\n      num[i] = key[num[i]];\n    }\n  }\n  for(let j = 0; j < num.length; j++){\n    if(num[j] == 2 || num[j] == 3 || num[j] == 5 || num[j] == 7 || num[j] == 11 || num[j] == 13){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let result = 0;\n  const primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n  for(let i = 0; i < num.length; i++){\n    if(primes.includes(num[i])){\n      result++;\n    }\n  }\n  return result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var result = 0;\n    for(var i = 0; i < num.length; i++){\n        if(num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i] === '7' || num[i] === 'B' || num[i] === 'D'){\n            result += 1;\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var hex_nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    var hex_keys = {};\n    for(var i = 0; i < hex_nums.length; i++){\n        hex_keys[hex_nums[i]] = i;\n    }\n    return hex_keys[num];\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var hex = \"0123456789ABCDEF\";\n\tvar primes = \"2357BDF\";\n\tvar count = 0;\n\tfor(var i = 0; i < num.length; i++){\n\t\tfor(var j = 0; j < primes.length; j++){\n\t\t\tif(num[i] == primes[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    let hexy = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n    let counter = 0;\n    let arr = [];\n    for(let i = 0; i < num.length; i++){\n      let index = hex.indexOf(num[i]);\n      arr.push(hexy[index]);\n    }\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] === 2 || arr[i] === 3 || arr[i] === 5 || arr[i] === 7 || arr[i] === 11 || arr[i] === 13){\n        counter++;\n      }\n    }\n    return counter;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var hash = {'A':11,'B':12,'C':13,'D':14,'E':15,'F':16}\n    return hash[num]\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var digits = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,12",
        "grade-10": {
            "execution": 0
        },
        "17": "var hex={\n        \"A\": 11,\n        \"B\": 12,\n        \"C\": 13,\n        \"D\": 14,\n        \"E\": 15,\n        \"F\": 16\n    }\n    var arr = [];\n    for(var key in hex){\n        arr.push(hex[key]);\n    }\n    return arr;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var obj = {\n    2: true,\n    3: true,\n    5: true,\n    7: true,\n    'B': true,\n    'D': true,\n    'F': true\n  }\n  return obj[num]\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return \"123456789ABCDEF\".indexOf(num);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let word ='0ABCDEF';\n    let pos = word.indexOf(num);\n    return pos;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let hex_key = {\n        0:0,\n        1:1,\n        2:2,\n        3:3,\n        4:4,\n        5:5,\n        6:6,\n        7:7,\n        8:8,\n        9:9,\n        \"A\":10,\n        \"B\":11,\n        \"C\":12,\n        \"D\":13,\n        \"E\":14,\n        \"F\":15\n    }\n    return hex_key[num]\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (num < 10) return true;\n    else if (num === 11 || num === 13 || num === 17) return true;\n    else return false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var hexArr = num.split('');\n    var hexConv = {\n        0:0,\n        1:1,\n        2:2,\n        3:3,\n        4:4,\n        5:5,\n        6:6,\n        7:7,\n        8:8,\n        9:9,\n        A:10,\n        B:11,\n        C:12,\n        D:13,\n        E:14,\n        F:15\n    }\n    var hexVal = hexArr.map(num => hexConv[num]);\n    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    var primeCount = 0;\n    for(var i = 0; i < hexVal.length; i++){\n        for(var j = 0; j < primes.length; j++){\n            if(hexVal[i] === primes[j]){\n                primeCount++;\n            }\n        }\n    }\n    return primeCount;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return num.split('').map(e=>(e.charCodeAt()>64)?e.charCodeAt()-55:e).reduce((acc,cv)=>acc+cv)\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let hexKey = {\n    'A': 10,\n    'B': 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  return hexKey[num]\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "//determine if the key is between hex keys 0-9\n    if(num >= '0' && num <= '9'){\n        //return num as number\n        return Number(num);\n    }\n    //determine if the key is between hex keys A-F\n    else if(num >= 'A' && num <= 'F'){\n        //convert num to number & add 10 to it\n        return Number(num) + 10;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let num_dict = {}\n    for(let j = 0; j < num.length; j++){\n        if(num_dict[num[j]]){\n            num_dict[num[j]] = num_dict[num[j]] + 1\n        }\n        else{\n            num_dict[num[j]] = 1\n        }\n    }\n    return num_dict\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.014734608110880452,
        "bleu-0": 0.15203198416070193,
        "bleu-8": 0.43150850329137236,
        "bleu-7": 0.20492034962581446,
        "bleu-16": 0.12962353342024602,
        "bleu-2": 0.3230245243574163,
        "bleu-11": 0.10476501905673531,
        "bleu-1": 0.013531619223468811,
        "bleu-10": 0.004454036053756092,
        "bleu-17": 0.036787621860872345,
        "bleu-12": 0.01351248174282008,
        "bleu-6": 0.005840608197394509,
        "bleu-18": 0.024373112999382655,
        "bleu-15": 0.007788101970768751,
        "bleu-13": 0.033296718651449536,
        "bleu-9": 0.08771936871745761,
        "bleu-4": 0.023449570097727367,
        "bleu-14": 0.01352470018029609,
        "bleu-5": 0.01907104824204178,
        "bleu-19": 0.11885183732622631,
        "codebleu-3": 0.24456521739130432,
        "codebleu-0": 0.6915222389060107,
        "codebleu-8": 0.7657586635920401,
        "codebleu-7": 0.6091533916043023,
        "codebleu-16": 0.5453961927681086,
        "codebleu-2": 0.7227987733832408,
        "codebleu-11": 0.7029680828862674,
        "codebleu-1": 0.20148550537657228,
        "codebleu-10": 0.18514492753623188,
        "codebleu-17": 0.4518115942028985,
        "codebleu-12": 0.2673935302708802,
        "codebleu-6": 0.10807805959444339,
        "codebleu-18": 0.24722008584984229,
        "codebleu-15": 0.20869565217391303,
        "codebleu-13": 0.2961279439250055,
        "codebleu-9": 0.6960208609698179,
        "codebleu-4": 0.39649758454106276,
        "codebleu-14": 0.20314009661835747,
        "codebleu-5": 0.4118357487922705,
        "codebleu-19": 0.49939801153504726,
        "chrf-3": 0.09350778512382982,
        "chrf-0": 0.34861495412730614,
        "chrf-8": 0.6094630852401921,
        "chrf-7": 0.35293969099483496,
        "chrf-16": 0.25513925719167196,
        "chrf-2": 0.501878340119765,
        "chrf-11": 0.31642607824044067,
        "chrf-1": 0.08431167835280412,
        "chrf-10": 0.04503495215989868,
        "chrf-17": 0.130803714668146,
        "chrf-12": 0.10791074339490671,
        "chrf-6": 0.10297825271247936,
        "chrf-18": 0.14452579741412172,
        "chrf-15": 0.08799956917631432,
        "chrf-13": 0.15381425216070052,
        "chrf-9": 0.300730577068705,
        "chrf-4": 0.122901379987031,
        "chrf-14": 0.08707522125161131,
        "chrf-5": 0.14641098918042145,
        "chrf-19": 0.25547911286475333,
        "rougel-3": 0.13008130081300814,
        "rougel-0": 0.34545454545454546,
        "rougel-8": 0.6666666666666665,
        "rougel-7": 0.41025641025641024,
        "rougel-16": 0.36477987421383645,
        "rougel-2": 0.6093749999999999,
        "rougel-11": 0.25503355704697983,
        "rougel-1": 0.1702127659574468,
        "rougel-10": 0.03187250996015937,
        "rougel-17": 0.32478632478632474,
        "rougel-12": 0.17391304347826086,
        "rougel-6": 0.26666666666666666,
        "rougel-18": 0.4,
        "rougel-15": 0.10447761194029852,
        "rougel-13": 0.25,
        "rougel-9": 0.26909090909090905,
        "rougel-4": 0.2376237623762376,
        "rougel-14": 0.14583333333333334,
        "rougel-5": 0.20689655172413793,
        "rougel-19": 0.41379310344827586,
        "meteor-3": 0.15557345097627298,
        "meteor-0": 0.4763193294701988,
        "meteor-8": 0.838909672374747,
        "meteor-7": 0.49937263794406644,
        "meteor-16": 0.4024927992825154,
        "meteor-2": 0.5920083376710291,
        "meteor-11": 0.4363636363636364,
        "meteor-1": 0.10460251046025104,
        "meteor-10": 0.06772009029345373,
        "meteor-17": 0.21801272800659077,
        "meteor-12": 0.1050420168067227,
        "meteor-6": 0.15501612723834945,
        "meteor-18": 0.233581317989751,
        "meteor-15": 0.13513513513513514,
        "meteor-13": 0.1993263373940678,
        "meteor-9": 0.436654176086216,
        "meteor-4": 0.1752577319587629,
        "meteor-14": 0.10416666666666669,
        "meteor-5": 0.31156143667296793,
        "meteor-19": 0.29890260631001375,
        "ruby-3": 0.07999999999999996,
        "ruby-0": 0.22093023255813948,
        "ruby-8": 0.5466666666666666,
        "ruby-7": 0.2407407407407407,
        "ruby-16": 0.21621621621621623,
        "ruby-2": 0.48750000000000004,
        "ruby-11": 0.15200000000000002,
        "ruby-1": 0.08333333333333337,
        "ruby-10": 0.013215859030836996,
        "ruby-17": 0.1594202898550725,
        "ruby-12": 0.0625,
        "ruby-6": 0.16666666666666663,
        "ruby-18": 0.29166666666666663,
        "ruby-15": 0.046511627906976716,
        "ruby-13": 0.16666666666666663,
        "ruby-9": 0.15859030837004406,
        "ruby-4": 0.1132075471698113,
        "ruby-14": 0.04166666666666663,
        "ruby-5": 0.14432989690721654,
        "ruby-19": 0.23529411764705888,
        "codebertscore_f1-3": 0.6780330538749695,
        "codebertscore_f3-3": 0.6893736124038696,
        "codebertscore_f1-0": 0.7650535106658936,
        "codebertscore_f3-0": 0.7984181642532349,
        "codebertscore_f1-8": 0.8989208936691284,
        "codebertscore_f3-8": 0.9102379083633423,
        "codebertscore_f1-7": 0.8385571837425232,
        "codebertscore_f3-7": 0.8420131802558899,
        "codebertscore_f1-16": 0.7636077404022217,
        "codebertscore_f3-16": 0.7906247973442078,
        "codebertscore_f1-2": 0.8656959533691406,
        "codebertscore_f3-2": 0.8860672116279602,
        "codebertscore_f1-11": 0.7226325869560242,
        "codebertscore_f3-11": 0.7704020142555237,
        "codebertscore_f1-1": 0.7171068787574768,
        "codebertscore_f3-1": 0.7116497755050659,
        "codebertscore_f1-10": 0.5411569476127625,
        "codebertscore_f3-10": 0.6196709871292114,
        "codebertscore_f1-17": 0.7080755233764648,
        "codebertscore_f3-17": 0.7081241011619568,
        "codebertscore_f1-12": 0.7104008197784424,
        "codebertscore_f3-12": 0.7019237875938416,
        "codebertscore_f1-6": 0.7237045764923096,
        "codebertscore_f3-6": 0.700649082660675,
        "codebertscore_f1-18": 0.7719006538391113,
        "codebertscore_f3-18": 0.752153217792511,
        "codebertscore_f1-15": 0.6444361209869385,
        "codebertscore_f3-15": 0.6550657153129578,
        "codebertscore_f1-13": 0.7166014909744263,
        "codebertscore_f3-13": 0.7098928689956665,
        "codebertscore_f1-9": 0.6191084384918213,
        "codebertscore_f3-9": 0.6701480150222778,
        "codebertscore_f1-4": 0.6702949404716492,
        "codebertscore_f3-4": 0.67844158411026,
        "codebertscore_f1-14": 0.705953061580658,
        "codebertscore_f3-14": 0.7057217359542847,
        "codebertscore_f1-5": 0.680515468120575,
        "codebertscore_f3-5": 0.697623610496521,
        "codebertscore_f1-19": 0.8077130913734436,
        "codebertscore_f3-19": 0.8030028343200684,
        "codebertscore_s_f1-3": 0.6290255784988403,
        "codebertscore_s_f3-3": 0.6375821232795715,
        "codebertscore_s_f1-0": 0.7612804174423218,
        "codebertscore_s_f3-0": 0.7871039509773254,
        "codebertscore_s_f1-8": 0.8821548819541931,
        "codebertscore_s_f3-8": 0.8949328064918518,
        "codebertscore_s_f1-7": 0.8026816844940186,
        "codebertscore_s_f3-7": 0.805082380771637,
        "codebertscore_s_f1-16": 0.7200886607170105,
        "codebertscore_s_f3-16": 0.7496823072433472,
        "codebertscore_s_f1-2": 0.8524829745292664,
        "codebertscore_s_f3-2": 0.8704699873924255,
        "codebertscore_s_f1-11": 0.7392705082893372,
        "codebertscore_s_f3-11": 0.7800288796424866,
        "codebertscore_s_f1-1": 0.6786336302757263,
        "codebertscore_s_f3-1": 0.6749334335327148,
        "codebertscore_s_f1-10": 0.5755715370178223,
        "codebertscore_s_f3-10": 0.634208083152771,
        "codebertscore_s_f1-17": 0.648141622543335,
        "codebertscore_s_f3-17": 0.6484970450401306,
        "codebertscore_s_f1-12": 0.6748218536376953,
        "codebertscore_s_f3-12": 0.6699677109718323,
        "codebertscore_s_f1-6": 0.6937870979309082,
        "codebertscore_s_f3-6": 0.6633991003036499,
        "codebertscore_s_f1-18": 0.7280164361000061,
        "codebertscore_s_f3-18": 0.7054461240768433,
        "codebertscore_s_f1-15": 0.6219173073768616,
        "codebertscore_s_f3-15": 0.6323644518852234,
        "codebertscore_s_f1-13": 0.6888920664787292,
        "codebertscore_s_f3-13": 0.676293671131134,
        "codebertscore_s_f1-9": 0.7437939047813416,
        "codebertscore_s_f3-9": 0.8111764788627625,
        "codebertscore_s_f1-4": 0.6564514636993408,
        "codebertscore_s_f3-4": 0.6574379801750183,
        "codebertscore_s_f1-14": 0.6790772676467896,
        "codebertscore_s_f3-14": 0.6774269342422485,
        "codebertscore_s_f1-5": 0.6483003497123718,
        "codebertscore_s_f3-5": 0.6710948348045349,
        "codebertscore_s_f1-19": 0.7783065438270569,
        "codebertscore_s_f3-19": 0.7763882875442505,
        "gpt35_nsnr-3": 0,
        "raw_gpt35_nsnr-3": "Score: 1",
        "gpt35_nsnr-0": 2,
        "raw_gpt35_nsnr-0": "2",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "Score: 1",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "Score: 0",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "Score: 0",
        "gpt35_nsnr-18": 0,
        "raw_gpt35_nsnr-18": "Score: 0",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "Score: 1",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "Score: 0 (The code snippet does not implement the required functionality of counting the number of prime hexadecimal digits in a given string. It only returns the decimal value of a single hexadecimal digit.)",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 2,
        "raw_gpt35_nsnr-19": "2",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 0,
        "raw_gpt35_nswr-16": "0",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 0,
        "raw_gpt35_nswr-1": "0",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "0",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-18": 0,
        "raw_gpt35_nswr-18": "Score: 0 (The code snippet does not address the problem at all. It is not counting the number of prime hexadecimal digits in the input string.)",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "0",
        "gpt35_nswr-13": 0,
        "raw_gpt35_nswr-13": "0",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 0,
        "raw_gpt35_nswr-19": "0"
    },
    {
        "intent": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n",
        "snippet": [
            "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "task_id": "80",
        "3": "if(s.length < 3) return false;\n    let found = false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n            found = true;\n            break;\n        }\n    }\n    return !found;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let str = s.toLowerCase();\n    if(str.length < 3) return false;\n    else {\n        for(let i = 0; i < str.length; i++){\n            if(str[i] == str[i+1] && str[i+1] == str[i+2]) return false;\n        }\n        return true;\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var result = false;\n    var i;\n    if (s.length < 3) {\n        return result;\n    }\n    for (i = 0; i < s.length; i+=3) {\n        if (s[i] !== s[i+1] && s[i] !== s[i+2] && s[i+1] !== s[i+2]) {\n            result = true;\n        } else {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let result = false;\n    if(s.length >= 3){\n        let i = 0;\n        while(i < s.length -2){\n            if(s[i] !== s[i+1] && s[i] !== s[i+2] && s[i+1] !== s[i+2]){\n                result = true;\n            } else {\n                result = false;\n                break;\n            }\n            i += 1;\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return s.length>2&&s.split('').map((e,i,a)=>i>0?e!==a[i-1]:false).filter(e=>e).length===s.length-1;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return s.length >= 3 && s.split('').every((v,i,a) => i < a.length - 2 ? v !== a[i+1] && v !== a[i+2] : true)\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s.length >= 3){\n        for(let i = 0; i < s.length; i+=3){\n            let a = s[i];\n            let b = s[i+1];\n            let c = s[i+2];\n            if(a !== b && b !== c && a !== c){\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return s.length >= 3 && /^[a-zA-Z]*([a-zA-Z])\\1[a-zA-Z]*$/.test(s)\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var consecutiveLetters = [];\n    for (var i = 0; i < s.length; i++) {\n        consecutiveLetters.push(s[i]);\n        if (consecutiveLetters.length === 3 && (consecutiveLetters[0] === consecutiveLetters[1] || consecutiveLetters[1] === consecutiveLetters[2] || consecutiveLetters[0] === consecutiveLetters[2])) {\n            return false;\n        }\n        if (consecutiveLetters.length === 3) {\n            consecutiveLetters = [];\n        }\n    }\n    return true;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(s.length<3){\n        return false;\n    }\n    if(s.length===3){\n        if(s[0]===s[1] || s[0]===s[2] || s[1]===s[2]){\n            return false;\n        }else{\n            return true;\n        }\n    }\n    if(s.length>3){\n        for(var i=0;i<s.length-2;i++){\n            if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return /(.).*\\1/g.test(s.slice(0,3))?false:true;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let myArr = s.split('');\n    let bool = true;\n    if(myArr.length < 3){\n        return false;\n    }\n    for(let i = 0; i < myArr.length; i+=3){\n        if(myArr[i] === myArr[i+1] || myArr[i] === myArr[i+2] || myArr[i+1] === myArr[i+2]){\n            bool = false;\n        }\n    }\n    return bool;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return s.length > 2 && !/(.).\\1.\\1/.test(s);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var count=0;\n    var b=s.length;\n    var c=b-2;\n    for(var i=0;i<=c;i++){\n        var letter=s.charAt(i);\n        var letter2=s.charAt(i+1);\n        var letter3=s.charAt(i+2);\n        if(letter!=letter2&&letter!=letter3&&letter2!=letter3){\n            count++;\n        }\n    }\n    if(count==c+1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(s.length<3){\n        return false;\n    }\n    else{\n        let count=0;\n        for(let i=0;i<s.length-2;i++){\n            if(s[i]!=s[i+1] && s[i]!=s[i+2] && s[i+1]!=s[i+2]){\n                count++;\n            }\n        }\n        if(count==s.length-2){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let arr = s.split('')\n    if(arr.length < 3){\n        return false\n    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === arr[i+1] && arr[i+1] === arr[i+2]){\n            return false\n        }\n    }\n    return true\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(s.length < 3) return false;\n    for(var i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.7566053659749423,
        "bleu-0": 0.5154635711582857,
        "bleu-8": 0.4734828542916706,
        "bleu-7": 0.4592432337250019,
        "bleu-16": 0.07677577403362558,
        "bleu-2": 0.1553064880177941,
        "bleu-11": 0.3746538165856481,
        "bleu-1": 0.027337263066656542,
        "bleu-10": 0.8404203100090409,
        "bleu-17": 0.8576915841545706,
        "bleu-12": 0.2557774407751158,
        "bleu-6": 0.42752527790184297,
        "bleu-18": 0.017769321341026156,
        "bleu-15": 0.38816095751928564,
        "bleu-13": 0.011980757517705515,
        "bleu-9": 0.16601599732163383,
        "bleu-4": 0.5159203276332505,
        "bleu-14": 0.44119300150787544,
        "bleu-5": 0.866027446386306,
        "bleu-19": 0.8962087196977554,
        "codebleu-3": 0.8748764272506242,
        "codebleu-0": 0.6722633530268539,
        "codebleu-8": 0.7266151503966386,
        "codebleu-7": 0.6939641489057449,
        "codebleu-16": 0.2997843473077804,
        "codebleu-2": 0.34986139677627964,
        "codebleu-11": 0.5748539463330397,
        "codebleu-1": 0.19703581783175003,
        "codebleu-10": 0.8790081047655185,
        "codebleu-17": 0.9054854705154372,
        "codebleu-12": 0.6360647601937488,
        "codebleu-6": 0.820419349066459,
        "codebleu-18": 0.12920328023624872,
        "codebleu-15": 0.7741469353420993,
        "codebleu-13": 0.09239160744904967,
        "codebleu-9": 0.518458001000703,
        "codebleu-4": 0.7655381210607094,
        "codebleu-14": 0.6433589073815953,
        "codebleu-5": 0.9053024538433679,
        "codebleu-19": 0.9119049931059681,
        "chrf-3": 0.8078187480941478,
        "chrf-0": 0.619263071372003,
        "chrf-8": 0.5416938682308348,
        "chrf-7": 0.5166696729667282,
        "chrf-16": 0.22663996485288126,
        "chrf-2": 0.2369549445068772,
        "chrf-11": 0.5558667026760958,
        "chrf-1": 0.11938784623181249,
        "chrf-10": 0.8873550067486495,
        "chrf-17": 0.9022093326726162,
        "chrf-12": 0.3605816979539306,
        "chrf-6": 0.701221593585045,
        "chrf-18": 0.12698954186114786,
        "chrf-15": 0.5020324660343873,
        "chrf-13": 0.11191628483861404,
        "chrf-9": 0.32245291839312357,
        "chrf-4": 0.6824172936044864,
        "chrf-14": 0.5283264285244812,
        "chrf-5": 0.8806581300953742,
        "chrf-19": 0.9257592500524474,
        "rougel-3": 0.8555555555555556,
        "rougel-0": 0.7073170731707317,
        "rougel-8": 0.73015873015873,
        "rougel-7": 0.6844919786096257,
        "rougel-16": 0.2876712328767123,
        "rougel-2": 0.4166666666666667,
        "rougel-11": 0.5524861878453039,
        "rougel-1": 0.21374045801526717,
        "rougel-10": 0.9411764705882352,
        "rougel-17": 0.935672514619883,
        "rougel-12": 0.526829268292683,
        "rougel-6": 0.6422764227642276,
        "rougel-18": 0.2162162162162162,
        "rougel-15": 0.6767676767676768,
        "rougel-13": 0.2201834862385321,
        "rougel-9": 0.38613861386138615,
        "rougel-4": 0.7171717171717171,
        "rougel-14": 0.6871165644171778,
        "rougel-5": 0.9349112426035503,
        "rougel-19": 0.9467455621301775,
        "meteor-3": 0.9442869238190875,
        "meteor-0": 0.6859756097560975,
        "meteor-8": 0.8076617725274566,
        "meteor-7": 0.7428655889671925,
        "meteor-16": 0.329151170516615,
        "meteor-2": 0.36228086194302406,
        "meteor-11": 0.5793012528465713,
        "meteor-1": 0.13341804320203304,
        "meteor-10": 0.9911804486260772,
        "meteor-17": 0.9862917722579768,
        "meteor-12": 0.5248688970937775,
        "meteor-6": 0.8831548784374239,
        "meteor-18": 0.14551368518877753,
        "meteor-15": 0.7815851469937148,
        "meteor-13": 0.11636891793754539,
        "meteor-9": 0.33666777009972276,
        "meteor-4": 0.7157070721068199,
        "meteor-14": 0.6303709172317971,
        "meteor-5": 0.9764309764309764,
        "meteor-19": 0.9895111135146828,
        "ruby-3": 0.7653061224489796,
        "ruby-0": 0.5121951219512195,
        "ruby-8": 0.5981308411214954,
        "ruby-7": 0.5142857142857142,
        "ruby-16": 0.19512195121951215,
        "ruby-2": 0.29268292682926833,
        "ruby-11": 0.4545454545454546,
        "ruby-1": 0.1585365853658537,
        "ruby-10": 0.8863636363636364,
        "ruby-17": 0.8764044943820225,
        "ruby-12": 0.3577235772357723,
        "ruby-6": 0.4695121951219512,
        "ruby-18": 0.13414634146341464,
        "ruby-15": 0.5431034482758621,
        "ruby-13": 0.14634146341463417,
        "ruby-9": 0.2666666666666667,
        "ruby-4": 0.5948275862068966,
        "ruby-14": 0.5,
        "ruby-5": 0.8850574712643678,
        "ruby-19": 0.896551724137931,
        "codebertscore_f1-3": 0.9220901131629944,
        "codebertscore_f3-3": 0.9321200251579285,
        "codebertscore_f1-0": 0.8942199945449829,
        "codebertscore_f3-0": 0.9034546613693237,
        "codebertscore_f1-8": 0.8783338069915771,
        "codebertscore_f3-8": 0.888812243938446,
        "codebertscore_f1-7": 0.8721027970314026,
        "codebertscore_f3-7": 0.8839269280433655,
        "codebertscore_f1-16": 0.7783743739128113,
        "codebertscore_f3-16": 0.7768283486366272,
        "codebertscore_f1-2": 0.8458194136619568,
        "codebertscore_f3-2": 0.8418711423873901,
        "codebertscore_f1-11": 0.8492349982261658,
        "codebertscore_f3-11": 0.8700551390647888,
        "codebertscore_f1-1": 0.6974310278892517,
        "codebertscore_f3-1": 0.7126743793487549,
        "codebertscore_f1-10": 0.957464337348938,
        "codebertscore_f3-10": 0.9575199484825134,
        "codebertscore_f1-17": 0.9636327624320984,
        "codebertscore_f3-17": 0.9636281728744507,
        "codebertscore_f1-12": 0.8063069581985474,
        "codebertscore_f3-12": 0.8401174545288086,
        "codebertscore_f1-6": 0.8583608865737915,
        "codebertscore_f3-6": 0.8676475882530212,
        "codebertscore_f1-18": 0.7068632245063782,
        "codebertscore_f3-18": 0.7037574052810669,
        "codebertscore_f1-15": 0.8502852916717529,
        "codebertscore_f3-15": 0.8721355199813843,
        "codebertscore_f1-13": 0.731417715549469,
        "codebertscore_f3-13": 0.7175820469856262,
        "codebertscore_f1-9": 0.7880734205245972,
        "codebertscore_f3-9": 0.8290256261825562,
        "codebertscore_f1-4": 0.8773348927497864,
        "codebertscore_f3-4": 0.8951026201248169,
        "codebertscore_f1-14": 0.9091771245002747,
        "codebertscore_f3-14": 0.9102203845977783,
        "codebertscore_f1-5": 0.9715588688850403,
        "codebertscore_f3-5": 0.9716410636901855,
        "codebertscore_f1-19": 0.9665852189064026,
        "codebertscore_f3-19": 0.9666269421577454,
        "codebertscore_s_f1-3": 0.9358927011489868,
        "codebertscore_s_f3-3": 0.9449859857559204,
        "codebertscore_s_f1-0": 0.9099099636077881,
        "codebertscore_s_f3-0": 0.9191997051239014,
        "codebertscore_s_f1-8": 0.8956516981124878,
        "codebertscore_s_f3-8": 0.9059740304946899,
        "codebertscore_s_f1-7": 0.8921669125556946,
        "codebertscore_s_f3-7": 0.9038265943527222,
        "codebertscore_s_f1-16": 0.7873806953430176,
        "codebertscore_s_f3-16": 0.7873899936676025,
        "codebertscore_s_f1-2": 0.8535086512565613,
        "codebertscore_s_f3-2": 0.8512310981750488,
        "codebertscore_s_f1-11": 0.8650869131088257,
        "codebertscore_s_f3-11": 0.8852351307868958,
        "codebertscore_s_f1-1": 0.6985939145088196,
        "codebertscore_s_f3-1": 0.7177944183349609,
        "codebertscore_s_f1-10": 0.9643222093582153,
        "codebertscore_s_f3-10": 0.9644181728363037,
        "codebertscore_s_f1-17": 0.9684379696846008,
        "codebertscore_s_f3-17": 0.9684932231903076,
        "codebertscore_s_f1-12": 0.8226295113563538,
        "codebertscore_s_f3-12": 0.8575462102890015,
        "codebertscore_s_f1-6": 0.8836011290550232,
        "codebertscore_s_f3-6": 0.8918715119361877,
        "codebertscore_s_f1-18": 0.706929624080658,
        "codebertscore_s_f3-18": 0.7039803266525269,
        "codebertscore_s_f1-15": 0.873420774936676,
        "codebertscore_s_f3-15": 0.8941211104393005,
        "codebertscore_s_f1-13": 0.7288299202919006,
        "codebertscore_s_f3-13": 0.7135048508644104,
        "codebertscore_s_f1-9": 0.8145735263824463,
        "codebertscore_s_f3-9": 0.856304407119751,
        "codebertscore_s_f1-4": 0.8955761790275574,
        "codebertscore_s_f3-4": 0.91180819272995,
        "codebertscore_s_f1-14": 0.919346034526825,
        "codebertscore_s_f3-14": 0.9212401509284973,
        "codebertscore_s_f1-5": 0.9741891026496887,
        "codebertscore_s_f3-5": 0.9742968082427979,
        "codebertscore_s_f1-19": 0.9689976572990417,
        "codebertscore_s_f3-19": 0.9690787196159363,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7, 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunction x_or_y(n, x, y){\n",
        "snippet": [
            "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n"
        ],
        "simplified": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "task_id": "150",
        "3": "if(isPrime(n)){\n        return x;\n    }\n    return y;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            return y;\n        }\n    }\n    return x;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(var i = 2; i < n; i++){\n\t\tif(n % i === 0){\n\t\t\treturn y;\n\t\t}\n\t}\n\treturn x;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return y;\n        }\n    }\n    return x;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return !isPrime(n) ? y : x;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (n%2 == 0)\n    return y;\n  else if (n%3 == 0)\n    return y;\n  else if (n%5 == 0)\n    return y;\n  else if (n%7 == 0)\n    return y;\n  else if (n%11 == 0)\n    return y;\n  else if (n%13 == 0)\n    return y;\n  else if (n%17 == 0)\n    return y;\n  else if (n%19 == 0)\n    return y;\n  else if (n%23 == 0)\n    return y;\n  else if (n%29 == 0)\n    return y;\n  else if (n%31 == 0)\n    return y;\n  else if (n%37 == 0)\n    return y;\n  else if (n%41 == 0)\n    return y;\n  else if (n%43 == 0)\n    return y;\n  else if (n%47 == 0)\n    return y;\n  else if (n%53 == 0)\n    return y;\n  else if (n%59 == 0)\n    return y;\n  else if (n%61 == 0)\n    return y;\n  else if (n%67 == 0)\n    return y;\n  else if (n%71 == 0)\n    return y;\n  else if (n%73 == 0)\n    return y;\n  else if (n%79 == 0)\n    return y;\n  else if (n%83 == 0)\n    return y;\n  else if (n%89 == 0)\n    return y;\n  else if (n%97 == 0)\n    return y;\n  else\n    return x;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// TODO: write code here\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// const arr = []\n  // for(var i = 2; i < n; i++){\n  //   if(n % i == 0){\n  //     arr.push(i)\n  //   }\n  // }\n  // if(arr.length > 0){\n  //   return y\n  // } else {\n  //   return x\n  // }\n  return n == 1 || n == 2 ? x : y\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (n % 1 === 0)\n  return y;\nif (n % 2 === 0)\n  return y;\nif (n % 3 === 0)\n  return y;\nif (n % 4 === 0)\n  return y;\nif (n % 5 === 0)\n  return y;\nif (n % 6 === 0)\n  return y;\nif (n % 7 === 0)\n  return y;\nif (n % 8 === 0)\n  return y;\nif (n % 9 === 0)\n  return y;\nif (n % 10 === 0)\n  return y;\nif (n % 11 === 0)\n  return y;\nif (n % 12 === 0)\n  return y;\nif (n % 13 === 0)\n  return y;\nif (n % 14 === 0)\n  return y;\nif (n % 15 === 0)\n  return y;\nif (n % 16 === 0)\n  return y;\nif (n % 17 === 0)\n  return y;\nif (n % 18 === 0)\n  return y;\nif (n % 19 === 0)\n  return y;\nif (n % 20 === 0)\n  return y;\nif (n % 21 === 0)\n  return y;\nif (n % 22 === 0)\n  return y;\nif (n % 23 === 0)\n  return y;\nif (n % 24 === 0)\n  return y;\nif (n % 25 === 0)\n  return y;\nif (n % 26 === 0)\n  return y;\nif (n % 27 === 0)\n  return y;\nif (n % 28 === 0)\n  return y;\nif (n % 29 === 0)\n  return y;\nif (n % 30 === 0)\n  return y;\nif (n % 31 === 0)\n  return y;\nif (n % 32 === 0)\n  return y;\nif (n % 33 === 0)\n  return y;\nif (n % 34 === 0)\n  return y;\nif (n % 35 === 0)\n  return y;\nif (n % 36 === 0)\n  return y;\nif (n % 37 ===",
        "grade-17": {
            "execution": 0
        },
        "12": "if(n===1){\n        return y;\n    }\n    else if(n===2){\n        return x;\n    }\n    else{\n        for(let i=2; i<n; i++){\n            if(n%i===0){\n                return y;\n            }\n        }\n        return x;\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(isPrime(n)){\n        return x;\n    }\n    return y;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let p = true;\n\tif (n > 1) {\n\t\tfor (let j = 2; j < n; j++) {\n\t\t\tif (n % j == 0) {\n\t\t\t\tp = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tp = false;\n\t}\n\tif (p) {\n\t\treturn x;\n\t} else {\n\t\treturn y;\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for(let i = 2; i < n; i++){\n    if(n % i === 0){\n      return y;\n    }\n  }\n  return x;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return isPrime(n) ? x : y;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let result = n;\n   let arr = [];\n   for(let i = 2; i < result; i++){\n      if(result % i === 0){\n         result = x;\n         break;\n      }else{\n         result = y;\n      }\n   }\n   return result;\n}\nx_or_y(7, 34, 12);\nx_or_y(15, 8, 5);",
        "grade-9": {
            "execution": 0
        },
        "4": "if(n == 1){\n        return y;\n    }\n    let prime = true;\n    for(let i = 2; i < n; i++){\n        if(n % i == 0){\n            prime = false;\n            break;\n        }\n    }\n    if(prime){\n        return x;\n    }\n    return y;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "// NOTE: I don't see the point of this challenge? you're just writing if statement\n    // example: function x_or_y(n, x, y){ return n % 2 ? x : y }\n    if (n % 2 == 0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(isPrime(n)) return x;\n    else return y;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(n%2==0)\n      return x;\n    else\n      return y;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.015930767872842633,
        "bleu-0": 0.4179959427348166,
        "bleu-8": 0.3366256172921828,
        "bleu-7": 0.3785514787898957,
        "bleu-16": 0.0017606717558448822,
        "bleu-2": 0.028123262014967527,
        "bleu-11": 0.02255274752786374,
        "bleu-1": 0.00012080196102565444,
        "bleu-10": 0.24258211852253114,
        "bleu-17": 0.015106573585901365,
        "bleu-12": 0.43499927162141544,
        "bleu-6": 0.015930767872842633,
        "bleu-18": 0.20876676373142913,
        "bleu-15": 0.3785514787898957,
        "bleu-13": 0.0013394271135332594,
        "bleu-9": 0.3011257160921883,
        "bleu-4": 0.4152960012832447,
        "bleu-14": 0.14561114236969155,
        "bleu-5": 0.007925805083998521,
        "bleu-19": 0.022895961613767012,
        "codebleu-3": 0.1719493931539937,
        "codebleu-0": 0.5295867305780492,
        "codebleu-8": 0.42603366666178805,
        "codebleu-7": 0.43416953070928765,
        "codebleu-16": 0.09342939937565874,
        "codebleu-2": 0.19456764984175967,
        "codebleu-11": 0.44203039619291556,
        "codebleu-1": 0.04630079730682753,
        "codebleu-10": 0.7163562790130142,
        "codebleu-17": 0.43873175403386416,
        "codebleu-12": 0.6794957633772316,
        "codebleu-6": 0.1719493931539937,
        "codebleu-18": 0.6078397281116168,
        "codebleu-15": 0.43416953070928765,
        "codebleu-13": 0.09317327767545701,
        "codebleu-9": 0.6129448209947885,
        "codebleu-4": 0.7111913088558494,
        "codebleu-14": 0.4635689352509156,
        "codebleu-5": 0.1521148004098928,
        "codebleu-19": 0.1667017840335966,
        "chrf-3": 0.1908131651060494,
        "chrf-0": 0.44959233612770005,
        "chrf-8": 0.3821029540565909,
        "chrf-7": 0.44741859885613033,
        "chrf-16": 0.07067158176285802,
        "chrf-2": 0.20043130702026604,
        "chrf-11": 0.14183583203978495,
        "chrf-1": 0.02408872588013162,
        "chrf-10": 0.3959375680810037,
        "chrf-17": 0.11393664672117602,
        "chrf-12": 0.5321669079094556,
        "chrf-6": 0.1908131651060494,
        "chrf-18": 0.3459287699749247,
        "chrf-15": 0.44741859885613033,
        "chrf-13": 0.07307083429535982,
        "chrf-9": 0.3585177575411055,
        "chrf-4": 0.5057034388294345,
        "chrf-14": 0.2907824238184069,
        "chrf-5": 0.15902237682867368,
        "chrf-19": 0.17377946902677066,
        "rougel-3": 0.27027027027027023,
        "rougel-0": 0.653061224489796,
        "rougel-8": 0.6451612903225806,
        "rougel-7": 0.6666666666666667,
        "rougel-16": 0.17142857142857143,
        "rougel-2": 0.2857142857142857,
        "rougel-11": 0.15544041450777202,
        "rougel-1": 0.030769230769230767,
        "rougel-10": 0.4105960264900662,
        "rougel-17": 0.1050656660412758,
        "rougel-12": 0.6829268292682926,
        "rougel-6": 0.27027027027027023,
        "rougel-18": 0.5039370078740157,
        "rougel-15": 0.6666666666666667,
        "rougel-13": 0.14492753623188404,
        "rougel-9": 0.5,
        "rougel-4": 0.6446280991735538,
        "rougel-14": 0.3414634146341463,
        "rougel-5": 0.2191780821917808,
        "rougel-19": 0.29729729729729726,
        "meteor-3": 0.21056603773584906,
        "meteor-0": 0.6069034111839682,
        "meteor-8": 0.5633378159153006,
        "meteor-7": 0.5827190601159802,
        "meteor-16": 0.07604562737642584,
        "meteor-2": 0.1594746716697936,
        "meteor-11": 0.302374555404233,
        "meteor-1": 0.009596928982725527,
        "meteor-10": 0.6502551253889802,
        "meteor-17": 0.22098441861517273,
        "meteor-12": 0.7227440571221486,
        "meteor-6": 0.21056603773584906,
        "meteor-18": 0.37469769033036693,
        "meteor-15": 0.5827190601159802,
        "meteor-13": 0.07619047619047618,
        "meteor-9": 0.4803941207654983,
        "meteor-4": 0.6261120739456961,
        "meteor-14": 0.39547425187691654,
        "meteor-5": 0.12287334593572778,
        "meteor-19": 0.23820754716981132,
        "ruby-3": 0.1578947368421053,
        "ruby-0": 0.4385964912280702,
        "ruby-8": 0.4736842105263158,
        "ruby-7": 0.49122807017543857,
        "ruby-16": 0.08771929824561409,
        "ruby-2": 0.19298245614035092,
        "ruby-11": 0.09118541033434646,
        "ruby-1": 0.01754385964912286,
        "ruby-10": 0.2021276595744681,
        "ruby-17": 0.05882352941176472,
        "ruby-12": 0.5303030303030303,
        "ruby-6": 0.1578947368421053,
        "ruby-18": 0.27142857142857146,
        "ruby-15": 0.49122807017543857,
        "ruby-13": 0.08771929824561409,
        "ruby-9": 0.2666666666666667,
        "ruby-4": 0.421875,
        "ruby-14": 0.21212121212121215,
        "ruby-5": 0.14035087719298245,
        "ruby-19": 0.19298245614035092,
        "codebertscore_f1-3": 0.7804071307182312,
        "codebertscore_f3-3": 0.7379601001739502,
        "codebertscore_f1-0": 0.8698647618293762,
        "codebertscore_f3-0": 0.8589081168174744,
        "codebertscore_f1-8": 0.8782860636711121,
        "codebertscore_f3-8": 0.8504307866096497,
        "codebertscore_f1-7": 0.890273928642273,
        "codebertscore_f3-7": 0.8608892560005188,
        "codebertscore_f1-16": 0.7445194125175476,
        "codebertscore_f3-16": 0.7032926678657532,
        "codebertscore_f1-2": 0.7673059105873108,
        "codebertscore_f3-2": 0.7375073432922363,
        "codebertscore_f1-11": 0.6874915361404419,
        "codebertscore_f3-11": 0.7174465656280518,
        "codebertscore_f1-1": 0.6456962823867798,
        "codebertscore_f3-1": 0.626526951789856,
        "codebertscore_f1-10": 0.8303769826889038,
        "codebertscore_f3-10": 0.8548851609230042,
        "codebertscore_f1-17": 0.7060025930404663,
        "codebertscore_f3-17": 0.7254772782325745,
        "codebertscore_f1-12": 0.8589208126068115,
        "codebertscore_f3-12": 0.8464757800102234,
        "codebertscore_f1-6": 0.780407190322876,
        "codebertscore_f3-6": 0.7379600405693054,
        "codebertscore_f1-18": 0.8264026045799255,
        "codebertscore_f3-18": 0.8351035118103027,
        "codebertscore_f1-15": 0.8891080617904663,
        "codebertscore_f3-15": 0.8610640168190002,
        "codebertscore_f1-13": 0.742211639881134,
        "codebertscore_f3-13": 0.7032574415206909,
        "codebertscore_f1-9": 0.8188000917434692,
        "codebertscore_f3-9": 0.8405669927597046,
        "codebertscore_f1-4": 0.8580312728881836,
        "codebertscore_f3-4": 0.8587857484817505,
        "codebertscore_f1-14": 0.747172474861145,
        "codebertscore_f3-14": 0.7721237540245056,
        "codebertscore_f1-5": 0.7622792720794678,
        "codebertscore_f3-5": 0.7318230271339417,
        "codebertscore_f1-19": 0.7939969301223755,
        "codebertscore_f3-19": 0.7550760507583618,
        "codebertscore_s_f1-3": 0.7879732847213745,
        "codebertscore_s_f3-3": 0.7484914660453796,
        "codebertscore_s_f1-0": 0.8915771842002869,
        "codebertscore_s_f3-0": 0.8819706439971924,
        "codebertscore_s_f1-8": 0.8955999612808228,
        "codebertscore_s_f3-8": 0.868313193321228,
        "codebertscore_s_f1-7": 0.9126541614532471,
        "codebertscore_s_f3-7": 0.8845987915992737,
        "codebertscore_s_f1-16": 0.7636551260948181,
        "codebertscore_s_f3-16": 0.7232415676116943,
        "codebertscore_s_f1-2": 0.7776715755462646,
        "codebertscore_s_f3-2": 0.7497626543045044,
        "codebertscore_s_f1-11": 0.7046642303466797,
        "codebertscore_s_f3-11": 0.7335419058799744,
        "codebertscore_s_f1-1": 0.6296288967132568,
        "codebertscore_s_f3-1": 0.6154395937919617,
        "codebertscore_s_f1-10": 0.8333042860031128,
        "codebertscore_s_f3-10": 0.8627969026565552,
        "codebertscore_s_f1-17": 0.7192098498344421,
        "codebertscore_s_f3-17": 0.7433996796607971,
        "codebertscore_s_f1-12": 0.8580058217048645,
        "codebertscore_s_f3-12": 0.8451845645904541,
        "codebertscore_s_f1-6": 0.7879732847213745,
        "codebertscore_s_f3-6": 0.7484914660453796,
        "codebertscore_s_f1-18": 0.8288881778717041,
        "codebertscore_s_f3-18": 0.840355634689331,
        "codebertscore_s_f1-15": 0.9109116792678833,
        "codebertscore_s_f3-15": 0.8837887644767761,
        "codebertscore_s_f1-13": 0.7585875988006592,
        "codebertscore_s_f3-13": 0.7232152819633484,
        "codebertscore_s_f1-9": 0.8180068135261536,
        "codebertscore_s_f3-9": 0.844059944152832,
        "codebertscore_s_f1-4": 0.8558462858200073,
        "codebertscore_s_f3-4": 0.856630802154541,
        "codebertscore_s_f1-14": 0.748383104801178,
        "codebertscore_s_f3-14": 0.7715226411819458,
        "codebertscore_s_f1-5": 0.7708755731582642,
        "codebertscore_s_f3-5": 0.7423530220985413,
        "codebertscore_s_f1-19": 0.8106919527053833,
        "codebertscore_s_f3-19": 0.7720885276794434,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "0",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 1,
        "raw_gpt35_nsnr-17": "1",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 0,
        "raw_gpt35_nswr-1": "Score: 0 (The code snippet is incomplete and does not provide any functionality to solve the problem.)",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 1,
        "raw_gpt35_nswr-17": "1",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n",
        "snippet": [
            "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
        "task_id": "149",
        "3": "function length(lst){\n        var length_lst = [];\n        for(var x = 0; x < lst.length; x++){\n            var l = lst[x].length;\n            length_lst.push(l);\n        }\n        return length_lst;\n    }\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return length(new_lst);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return lst.sort(function(a,b){\n       return a.length - b.length\n   })\n   .filter(function(a){\n        return a.length % 2 === 0\n   })\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return lst.sort();\n}\nassert(\n\tsorted_list_sum([\"aa\", \"a\", \"aaa\"]),\n\t[\"aa\"]\n);\nassert(\n\tsorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]),\n\t[\"ab\", \"cd\"]\n);",
        "grade-8": {
            "execution": 0
        },
        "7": "let new_lst = lst.slice(0);\n    new_lst.sort();\n    let sum = 0;\n    let sum_new_lst = [];\n    for (let i = 0; i < new_lst.length; i++) {\n        sum += new_lst[i];\n        sum_new_lst.push(sum);\n    }\n    return sum_new_lst;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var lst_lengths = []\n    var lst_result = []\n    var j = 0\n    for (i = 0; i < lst.length; i++){\n        lst_lengths.push(lst[i].length)\n    }\n    // print(lst_lengths)\n    lst_lengths.sort()\n    // print(lst_lengths)\n    // console.log(lst_lengths)\n    while (j < lst_lengths.length){\n        for (i = 0; i < lst.length; i++){\n            if (lst[i].length == lst_lengths[j]){\n                lst_result.push(lst[i])\n            }\n        }\n        j++\n    }\n    return lst_result\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "new_lst = []\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i])\n        }\n    }\n    return new_lst.sort(compare)\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return lst.sort(function(a,b){\n        if(a.length > b.length){\n            return 1;\n        }\n        else if(a.length < b.length){\n            return -1;\n        }\n        else{\n            return a.localeCompare(b);\n        }\n    }).filter(function(str){\n        return str.length % 2 === 0;\n    });\n}\nvar list = [\"ab\", \"a\", \"aaa\", \"cd\"];",
        "grade-11": {
            "execution": 0
        },
        "1": "let s_lst = lst.filter(element => element.length % 2 === 0);\n    s_lst.sort((a, b) => {return (a.length - b.length) || a.localeCompare(b)});\n    return s_lst;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var odd_list = [];\n    var even_list = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            even_list.push(lst[i]);\n        }else{\n            odd_list.push(lst[i]);\n        }\n    }\n    odd_list.sort();\n    return odd_list;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let total_sum = 0;\n    for(let l of lst){\n        total_sum += l;\n    }\n    return total_sum;\n}\nassert_equals(sorted_list_sum([1,3,5,6,2,6,7,5,2,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,",
        "grade-17": {
            "execution": 0
        },
        "12": "var lst_sorted = lst.sort(function(a, b){\n        if (a.length > b.length) return -1;\n        if (a.length < b.length) return 1;\n        if (a < b) return -1;\n        if (a > b) return 1;\n        return 0;\n    });\n    var count = 1;\n    while (count < lst_sorted.length){\n        if (lst_sorted[count-1].length == lst_sorted[count].length){\n            lst_sorted.splice(count, 1);\n        }\n        else {\n            count ++;\n        }\n    }\n    return lst_sorted;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "// Your code here\n    return 1;\n}\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]), \"aa\");\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]), \"abcd\");",
        "grade-6": {
            "execution": 0
        },
        "18": "var lst_count = []\n  for (var i = 0; i < lst.length; i++){\n    lst_count.push(lst[i].length)\n  }\n  lst_count.sort()\n  for (var i = 0; i < lst_count.length; i++){\n    for (var j = 0; j < lst.length; j++){\n      if (lst_count[i] == lst[j].length){\n        lst.splice(j, 1)\n        return lst_count[i]\n      }\n    }\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var alpha_lst = lst.sort();\n    var result = [];\n    for(var i = 0; i < alpha_lst.length; i++) {\n        if(result.indexOf(alpha_lst[i]) == -1) {\n            result.push(alpha_lst[i]);\n        }\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return lst.sort(function(a,b){\n        if(a.length<b.length){\n            return -1;\n        }else if(a.length>b.length){\n            return 1;\n        }else{\n            return a.localeCompare(b);\n        }\n    }).filter(function(a){\n        return a.length%2==0;\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var new_lst = lst.filter(function(a){\n        return a.length % 2 == 0;\n    });\n    var sort_by_length = function(a, b){\n        if(a.length == b.length){\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    };\n    return new_lst.sort(sort_by_length);\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return lst.reduce(function(acc, num){\n\t\treturn acc + num;\n\t}, 0);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var odd_lst = [];\n    var even_lst = [];\n    var result = [];\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            even_lst.push(lst[i]);\n        }else{\n            odd_lst.push(lst[i]);\n        }\n    }\n    for(var j = 0; j < even_lst.length; j++){\n        result.push(even_lst[j]);\n    }\n    for(var k = 0; k < odd_lst.length; k++){\n        result.push(odd_lst[k]);\n    }\n    for(var m = 0; m < result.length; m++){\n        for(var n = 0; n < result[m].length; n++){\n            sum += result[m].charCodeAt(n);\n        }\n    }\n    console.log(sum);\n}\nsorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]);",
        "grade-14": {
            "execution": 0
        },
        "5": "// filter out the odd length words\n    var result = lst.filter(function(word){\n        return word.length % 2 === 0;\n    });\n    //sort the list by length of each word\n    result.sort(function(a, b){\n        return a.length - b.length;\n    });\n    //return the list sorted by that rule\n    return result;\n}\nvar lst = [\"ab\", \"a\", \"aaa\", \"cd\"];",
        "grade-5": {
            "execution": 0
        },
        "19": "var temp;\n    for(var i = 0; i < lst.length; i++){\n        for(var j = i + 1; j < lst.length; j++){\n            if(lst[i].length > lst[j].length){\n                temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n    return lst;\n}\n\nvar lst = [\"aa\", \"a\", \"aaa\"];",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.103337473138455,
        "bleu-0": 0.000973576492487168,
        "bleu-8": 0.0013081284403132101,
        "bleu-7": 0.01397829880131142,
        "bleu-16": 0.12784474307123422,
        "bleu-2": 0.014875891418875733,
        "bleu-11": 0.034970753099329996,
        "bleu-1": 0.005088130941138647,
        "bleu-10": 0.046167935475481314,
        "bleu-17": 0.010477176144848964,
        "bleu-12": 0.05892375558756179,
        "bleu-6": 0.0007853369469059276,
        "bleu-18": 0.10080558679929691,
        "bleu-15": 0.016554024549344334,
        "bleu-13": 0.021195458058321317,
        "bleu-9": 0.018545866303242474,
        "bleu-4": 1.2809447313344777e-06,
        "bleu-14": 0.26988358936816315,
        "bleu-5": 0.02054243896439911,
        "bleu-19": 0.08343069309814558,
        "codebleu-3": 0.25982166812124485,
        "codebleu-0": 0.07351658072484994,
        "codebleu-8": 0.05429887261674051,
        "codebleu-7": 0.13934972793246012,
        "codebleu-16": 0.29444897659427677,
        "codebleu-2": 0.1353471838247723,
        "codebleu-11": 0.17164078968288832,
        "codebleu-1": 0.10506589841490944,
        "codebleu-10": 0.19158039588538295,
        "codebleu-17": 0.09531785547909338,
        "codebleu-12": 0.24708856221418982,
        "codebleu-6": 0.04143116451783822,
        "codebleu-18": 0.25382446854851654,
        "codebleu-15": 0.14717713702826868,
        "codebleu-13": 0.1530708759814678,
        "codebleu-9": 0.14293955847502854,
        "codebleu-4": 0.03932096797814376,
        "codebleu-14": 0.5113184912341119,
        "codebleu-5": 0.15236417081350997,
        "codebleu-19": 0.2234708864362042,
        "chrf-3": 0.28308185060355273,
        "chrf-0": 0.10476695475949693,
        "chrf-8": 0.05210454572306919,
        "chrf-7": 0.14782704431106458,
        "chrf-16": 0.2979595731853745,
        "chrf-2": 0.2057510768591656,
        "chrf-11": 0.17722914132977494,
        "chrf-1": 0.1282343964108152,
        "chrf-10": 0.20944636066440148,
        "chrf-17": 0.05385150783440922,
        "chrf-12": 0.23042616228314666,
        "chrf-6": 0.04877653107701848,
        "chrf-18": 0.2672102140934797,
        "chrf-15": 0.15593883615405685,
        "chrf-13": 0.1732375778232295,
        "chrf-9": 0.19480539760190463,
        "chrf-4": 0.03876069541763212,
        "chrf-14": 0.3306441414741398,
        "chrf-5": 0.16013681296028173,
        "chrf-19": 0.2258721674258631,
        "rougel-3": 0.3298969072164948,
        "rougel-0": 0.14375000000000002,
        "rougel-8": 0.13333333333333333,
        "rougel-7": 0.24561403508771928,
        "rougel-16": 0.3604938271604939,
        "rougel-2": 0.2942942942942942,
        "rougel-11": 0.22691292875989444,
        "rougel-1": 0.20238095238095236,
        "rougel-10": 0.33053221288515405,
        "rougel-17": 0.04967320261437908,
        "rougel-12": 0.2756892230576441,
        "rougel-6": 0.09467455621301775,
        "rougel-18": 0.378238341968912,
        "rougel-15": 0.25000000000000006,
        "rougel-13": 0.2296918767507003,
        "rougel-9": 0.23163841807909605,
        "rougel-4": 0.08000000000000002,
        "rougel-14": 0.44223107569721115,
        "rougel-5": 0.1693121693121693,
        "rougel-19": 0.3237597911227154,
        "meteor-3": 0.18407767726764143,
        "meteor-0": 0.05914826498422712,
        "meteor-8": 0.04880905896134323,
        "meteor-7": 0.11488747633750666,
        "meteor-16": 0.21083876661784703,
        "meteor-2": 0.10938250294233036,
        "meteor-11": 0.1306522789563697,
        "meteor-1": 0.07836990595611285,
        "meteor-10": 0.14151317072773736,
        "meteor-17": 0.051212344850721236,
        "meteor-12": 0.1914814684595156,
        "meteor-6": 0.03719655442443227,
        "meteor-18": 0.20079029720816513,
        "meteor-15": 0.114797720496618,
        "meteor-13": 0.12202086276778398,
        "meteor-9": 0.1049446710857991,
        "meteor-4": 0.02782193958664547,
        "meteor-14": 0.32437324996836875,
        "meteor-5": 0.08288357748650733,
        "meteor-19": 0.18890765611291344,
        "ruby-3": 0.1985559566787004,
        "ruby-0": 0.0830324909747292,
        "ruby-8": 0.07581227436823101,
        "ruby-7": 0.1407942238267148,
        "ruby-16": 0.21299638989169678,
        "ruby-2": 0.17689530685920574,
        "ruby-11": 0.14440433212996395,
        "ruby-1": 0.1155234657039711,
        "ruby-10": 0.18411552346570392,
        "ruby-17": 0.018442622950819665,
        "ruby-12": 0.17689530685920574,
        "ruby-6": 0.054151624548736454,
        "ruby-18": 0.25270758122743686,
        "ruby-15": 0.1407942238267148,
        "ruby-13": 0.1407942238267148,
        "ruby-9": 0.148014440433213,
        "ruby-4": 0.04332129963898912,
        "ruby-14": 0.2815884476534296,
        "ruby-5": 0.11191335740072206,
        "ruby-19": 0.22021660649819497,
        "codebertscore_f1-3": 0.7747542262077332,
        "codebertscore_f3-3": 0.7417190670967102,
        "codebertscore_f1-0": 0.6591188311576843,
        "codebertscore_f3-0": 0.6048328876495361,
        "codebertscore_f1-8": 0.6030495762825012,
        "codebertscore_f3-8": 0.5625631213188171,
        "codebertscore_f1-7": 0.7306172251701355,
        "codebertscore_f3-7": 0.6788119673728943,
        "codebertscore_f1-16": 0.7722076177597046,
        "codebertscore_f3-16": 0.7524152398109436,
        "codebertscore_f1-2": 0.7615228295326233,
        "codebertscore_f3-2": 0.6942354440689087,
        "codebertscore_f1-11": 0.669744610786438,
        "codebertscore_f3-11": 0.6492182016372681,
        "codebertscore_f1-1": 0.6668456792831421,
        "codebertscore_f3-1": 0.6164445877075195,
        "codebertscore_f1-10": 0.7617818713188171,
        "codebertscore_f3-10": 0.7103809118270874,
        "codebertscore_f1-17": 0.6459186673164368,
        "codebertscore_f3-17": 0.6510174870491028,
        "codebertscore_f1-12": 0.7398860454559326,
        "codebertscore_f3-12": 0.7261449098587036,
        "codebertscore_f1-6": 0.5911674499511719,
        "codebertscore_f3-6": 0.5604312419891357,
        "codebertscore_f1-18": 0.7817716002464294,
        "codebertscore_f3-18": 0.735769510269165,
        "codebertscore_f1-15": 0.7376599311828613,
        "codebertscore_f3-15": 0.6811967492103577,
        "codebertscore_f1-13": 0.6761936545372009,
        "codebertscore_f3-13": 0.6521586179733276,
        "codebertscore_f1-9": 0.6896849870681763,
        "codebertscore_f3-9": 0.6571410298347473,
        "codebertscore_f1-4": 0.5982044339179993,
        "codebertscore_f3-4": 0.542701244354248,
        "codebertscore_f1-14": 0.7922574281692505,
        "codebertscore_f3-14": 0.7877231240272522,
        "codebertscore_f1-5": 0.6507180333137512,
        "codebertscore_f3-5": 0.629724383354187,
        "codebertscore_f1-19": 0.7897988557815552,
        "codebertscore_f3-19": 0.7528905272483826,
        "codebertscore_s_f1-3": 0.8015992641448975,
        "codebertscore_s_f3-3": 0.7723966240882874,
        "codebertscore_s_f1-0": 0.7173095941543579,
        "codebertscore_s_f3-0": 0.6804705262184143,
        "codebertscore_s_f1-8": 0.6561034321784973,
        "codebertscore_s_f3-8": 0.6241998076438904,
        "codebertscore_s_f1-7": 0.7708826661109924,
        "codebertscore_s_f3-7": 0.7379380464553833,
        "codebertscore_s_f1-16": 0.7822521924972534,
        "codebertscore_s_f3-16": 0.7584589123725891,
        "codebertscore_s_f1-2": 0.809937059879303,
        "codebertscore_s_f3-2": 0.7631515860557556,
        "codebertscore_s_f1-11": 0.7149815559387207,
        "codebertscore_s_f3-11": 0.7086629271507263,
        "codebertscore_s_f1-1": 0.7267500162124634,
        "codebertscore_s_f3-1": 0.6931801438331604,
        "codebertscore_s_f1-10": 0.8003416061401367,
        "codebertscore_s_f3-10": 0.7654800415039062,
        "codebertscore_s_f1-17": 0.6653273105621338,
        "codebertscore_s_f3-17": 0.6793988943099976,
        "codebertscore_s_f1-12": 0.7603059411048889,
        "codebertscore_s_f3-12": 0.749494194984436,
        "codebertscore_s_f1-6": 0.6406078338623047,
        "codebertscore_s_f3-6": 0.6235047578811646,
        "codebertscore_s_f1-18": 0.8113197684288025,
        "codebertscore_s_f3-18": 0.7762093544006348,
        "codebertscore_s_f1-15": 0.782239556312561,
        "codebertscore_s_f3-15": 0.7460365891456604,
        "codebertscore_s_f1-13": 0.7294890880584717,
        "codebertscore_s_f3-13": 0.7141597867012024,
        "codebertscore_s_f1-9": 0.7286334037780762,
        "codebertscore_s_f3-9": 0.7106919884681702,
        "codebertscore_s_f1-4": 0.6610203981399536,
        "codebertscore_s_f3-4": 0.6238552331924438,
        "codebertscore_s_f1-14": 0.7981799840927124,
        "codebertscore_s_f3-14": 0.7895443439483643,
        "codebertscore_s_f1-5": 0.6904968619346619,
        "codebertscore_s_f3-5": 0.686088502407074,
        "codebertscore_s_f1-19": 0.8193811774253845,
        "codebertscore_s_f3-19": 0.793502926826477,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 1,
        "raw_gpt35_nsnr-7": "1",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 1,
        "raw_gpt35_nsnr-17": "1",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-18": 2,
        "raw_gpt35_nsnr-18": "2",
        "gpt35_nsnr-15": 2,
        "raw_gpt35_nsnr-15": "2",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "Score: 0",
        "gpt35_nsnr-14": 2,
        "raw_gpt35_nsnr-14": "2",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 1,
        "raw_gpt35_nswr-8": "1",
        "gpt35_nswr-7": 1,
        "raw_gpt35_nswr-7": "1",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "0",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-18": 1,
        "raw_gpt35_nswr-18": "1",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "0",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 0,
        "raw_gpt35_nswr-4": "0",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nfunction even_odd_count(num){\n",
        "snippet": [
            "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n"
        ],
        "simplified": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
        "task_id": "155",
        "3": "// let even = 0;\n    // let odd = 0;\n    // while(num !== 0){\n    //     if(num % 2 === 0){\n    //         even++\n    //     }else{\n    //         odd++\n    //     }\n    //     num = Math.floor(num / 10)\n    // }\n    // return [even, odd]\n    num = num.toString().split('')\n    let even = num.filter(num => num % 2 === 0).length\n    let odd = num.filter(num => num % 2 !== 0).length\n    return [even, odd]\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let even = 0;\n    let odd = 0;\n    for(let i = 0; i < Math.abs(num).toString().length; i++){\n        if(Math.abs(num).toString()[i] % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var result = [];\n    var count = 0;\n    var even = 0;\n    var odd = 0;\n    result = (num.toString()).split(\"\");\n    while(count < result.length){\n        if(result[count] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n        count++;\n    }\n    return (even, odd);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let even = 0, odd = 0\n    if(num == 0){\n        return(0,0)\n    }\n    while(num != 0){\n        if(num % 2 == 0){\n            even = even + 1\n        }\n        else{\n            odd = odd + 1\n        }\n        num = Math.floor(num / 10)\n    }\n    return (even, odd)\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var odd = 0;\n    var even = 0;\n    var num = num.toString();\n    for(var i = 0; i < num.length; i++){\n        if(num[i] % 2 === 0){\n            even ++;\n        }\n        else{\n            odd ++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let even = 0;\n    let odd = 0;\n    let newNum = Math.abs(num);\n    let numString = newNum.toString();\n    for(let i = 0; i < numString.length; i++){\n        if(numString[i] % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var even = 0, odd = 0;\n    while(num != 0){\n        if(num % 2 == 0){\n            even += 1;\n        }else{\n            odd += 1;\n        }\n        num = parseInt(num / 10);\n    }\n    return [even, odd];\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let count = [0, 0];\n    for (let x = Math.abs(num); x >= 1; x = Math.floor(x / 10)){\n        if (x % 2 === 0){\n            count[0]++;\n        }\n        else{\n            count[1]++;\n        }\n    }\n    return [count[0], count[1]];\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let even=0;\n  let odd=0;\n  let numString=num.toString().split('');\n  for(let i=0;i<numString.length;i++){\n    if(numString[i]%2===0){\n      even++;\n    }\n    else{\n      odd++;\n    }\n  }\n  return [even,odd];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var str = num.toString();\n    var even_nums = 0;\n    var odd_nums = 0;\n    for(var i = 0; i < str.length; i++){\n        if(parseInt(str[i]) % 2 == 0){\n            even_nums++;\n        }else{\n            odd_nums++;\n        }\n    }\n    return [even_nums, odd_nums];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "// code here\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var arr = String(num).split('');\n    var even = 0;\n    var odd = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var arr = num.toString().split('');\n    var newArr = [];\n    var x = 0;\n    var y = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            x++;\n        }\n        else if(arr[i] % 2 != 0){\n            y++;\n        }\n    }\n    return newArr = [x, y];\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let even = 0;\n    let odd = 0;\n    let strNum = Math.abs(num).toString();\n    strNum.split('').forEach(e => e % 2 === 0 ? even++ : odd++);\n    return [even, odd];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let evens = 0;\n\tlet odds = 0;\n\tlet counter = 0;\n\twhile(num > 0){\n\t\tif(counter % 2 === 0){\n\t\t\tevens++;\n\t\t}else{\n\t\t\todds++;\n\t\t}\n\t\tnum = Math.floor(num / 10);\n\t\tcounter++;\n\t}\n\treturn [evens, odds];\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let number = Math.abs(num)\n    let even = 0\n    let odd = 0\n    while(number > 0){\n        let digit = number % 10\n        if(digit % 2 === 0){\n            even += 1\n        }else{\n            odd += 1\n        }\n        number = Math.floor(number / 10)\n    }\n    return [even, odd]\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var even = 0;\n    var odd = 0;\n    var nums = Math.abs(num).toString();\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] % 2 == 0){\n            even += 1;\n        }else{\n            odd += 1;\n        }\n    }\n    return [even, odd];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let even = 0;\n    let odd = 0;\n    for(let n of num.toString()){\n        if(n % 2 === 0){\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [even, odd]\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let even = 0, odd = 0\n    let newNum = num.toString().split('')\n    for(let i = 0; i < newNum.length; i++){\n        if(newNum[i] % 2 === 0){\n            even++\n        }else{\n            odd++\n        }\n    }\n    return [even, odd]\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var even = 0;\n    var odd = 0;\n    while(num > 0){\n        if(num % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n        num = parseInt(num / 10);\n    }\n    return [even, odd];\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.13054371780336724,
        "bleu-0": 0.15303867812166227,
        "bleu-8": 0.16938207884128917,
        "bleu-7": 0.35434735470192635,
        "bleu-16": 0.1852738889423488,
        "bleu-2": 0.15701955849654825,
        "bleu-11": 0.2924318976528425,
        "bleu-1": 0.15274185481515345,
        "bleu-10": 0.16633118975239458,
        "bleu-17": 0.16652830653467252,
        "bleu-12": 6.390348080278327e-07,
        "bleu-6": 0.16907145896087175,
        "bleu-18": 0.1338866254685304,
        "bleu-15": 0.08839374326825919,
        "bleu-13": 0.2870508926515179,
        "bleu-9": 0.19434126260762125,
        "bleu-4": 0.16008068044261467,
        "bleu-14": 0.21451788228192703,
        "bleu-5": 0.20402355809126912,
        "bleu-19": 0.3504149821418765,
        "codebleu-3": 0.5913756524305551,
        "codebleu-0": 0.521183250169949,
        "codebleu-8": 0.5341933756923913,
        "codebleu-7": 0.5946869920329089,
        "codebleu-16": 0.49957307809146473,
        "codebleu-2": 0.5154364738221736,
        "codebleu-11": 0.4318924760043413,
        "codebleu-1": 0.5019030103880949,
        "codebleu-10": 0.5169884123648146,
        "codebleu-17": 0.5009210862709844,
        "codebleu-12": 0.02564104513891559,
        "codebleu-6": 0.5013449450086842,
        "codebleu-18": 0.5577944614302053,
        "codebleu-15": 0.4306535785590212,
        "codebleu-13": 0.559618798149135,
        "codebleu-9": 0.561459977876464,
        "codebleu-4": 0.4934362255120517,
        "codebleu-14": 0.4500124060325155,
        "codebleu-5": 0.4918154946252294,
        "codebleu-19": 0.5183314749993448,
        "chrf-3": 0.33383305626352383,
        "chrf-0": 0.26917064475556746,
        "chrf-8": 0.28844046027948356,
        "chrf-7": 0.48188753267902756,
        "chrf-16": 0.28285676103714397,
        "chrf-2": 0.2954615437134469,
        "chrf-11": 0.39348629707314037,
        "chrf-1": 0.24001377381454855,
        "chrf-10": 0.2865622324587746,
        "chrf-17": 0.2733721805715753,
        "chrf-12": 0.017924112067063756,
        "chrf-6": 0.2452402403214629,
        "chrf-18": 0.21675545545001537,
        "chrf-15": 0.186914006353381,
        "chrf-13": 0.3774546490405829,
        "chrf-9": 0.36498203916939026,
        "chrf-4": 0.28799584918434795,
        "chrf-14": 0.29021805787670796,
        "chrf-5": 0.3034003776079206,
        "chrf-19": 0.4320335880970488,
        "rougel-3": 0.4077669902912621,
        "rougel-0": 0.4563758389261745,
        "rougel-8": 0.45033112582781454,
        "rougel-7": 0.6618705035971223,
        "rougel-16": 0.474820143884892,
        "rougel-2": 0.4805194805194805,
        "rougel-11": 0.5714285714285713,
        "rougel-1": 0.44594594594594594,
        "rougel-10": 0.47297297297297297,
        "rougel-17": 0.4225352112676056,
        "rougel-12": 0.05633802816901409,
        "rougel-6": 0.4225352112676056,
        "rougel-18": 0.3614457831325301,
        "rougel-15": 0.3787878787878788,
        "rougel-13": 0.6074074074074075,
        "rougel-9": 0.510948905109489,
        "rougel-4": 0.4137931034482758,
        "rougel-14": 0.5423728813559322,
        "rougel-5": 0.4507042253521127,
        "rougel-19": 0.6290322580645162,
        "meteor-3": 0.47029400438256563,
        "meteor-0": 0.4831908144843364,
        "meteor-8": 0.42370673784977914,
        "meteor-7": 0.6027162200149925,
        "meteor-16": 0.4295497680522619,
        "meteor-2": 0.4827992838273431,
        "meteor-11": 0.4075495353545622,
        "meteor-1": 0.4788691152422068,
        "meteor-10": 0.4565001543023521,
        "meteor-17": 0.405056528896787,
        "meteor-12": 0.01669449081803005,
        "meteor-6": 0.405056528896787,
        "meteor-18": 0.41325663300545407,
        "meteor-15": 0.33820908042361325,
        "meteor-13": 0.5019916191296586,
        "meteor-9": 0.41567779994203197,
        "meteor-4": 0.39526838781575035,
        "meteor-14": 0.4337579140197328,
        "meteor-5": 0.48823907672521744,
        "meteor-19": 0.5191574003067485,
        "ruby-3": 0.24285714285714288,
        "ruby-0": 0.27710843373493976,
        "ruby-8": 0.3176470588235294,
        "ruby-7": 0.589041095890411,
        "ruby-16": 0.28767123287671237,
        "ruby-2": 0.2727272727272727,
        "ruby-11": 0.43939393939393945,
        "ruby-1": 0.30487804878048785,
        "ruby-10": 0.2804878048780488,
        "ruby-17": 0.22368421052631582,
        "ruby-12": 0.030303030303030276,
        "ruby-6": 0.22368421052631582,
        "ruby-18": 0.24,
        "ruby-15": 0.1515151515151515,
        "ruby-13": 0.49275362318840576,
        "ruby-9": 0.3802816901408451,
        "ruby-4": 0.25316455696202533,
        "ruby-14": 0.43939393939393945,
        "ruby-5": 0.2763157894736842,
        "ruby-19": 0.5151515151515151,
        "codebertscore_f1-3": 0.8108265995979309,
        "codebertscore_f3-3": 0.8536177277565002,
        "codebertscore_f1-0": 0.8093527555465698,
        "codebertscore_f3-0": 0.8237510919570923,
        "codebertscore_f1-8": 0.7958934903144836,
        "codebertscore_f3-8": 0.8002771735191345,
        "codebertscore_f1-7": 0.8385195136070251,
        "codebertscore_f3-7": 0.8480077981948853,
        "codebertscore_f1-16": 0.8077633380889893,
        "codebertscore_f3-16": 0.8142849802970886,
        "codebertscore_f1-2": 0.8022217750549316,
        "codebertscore_f3-2": 0.8162124156951904,
        "codebertscore_f1-11": 0.8620336651802063,
        "codebertscore_f3-11": 0.8681608438491821,
        "codebertscore_f1-1": 0.8090280294418335,
        "codebertscore_f3-1": 0.8244396448135376,
        "codebertscore_f1-10": 0.8073287010192871,
        "codebertscore_f3-10": 0.816743791103363,
        "codebertscore_f1-17": 0.7710387110710144,
        "codebertscore_f3-17": 0.788227379322052,
        "codebertscore_f1-12": 0.606478750705719,
        "codebertscore_f3-12": 0.5846825242042542,
        "codebertscore_f1-6": 0.797053337097168,
        "codebertscore_f3-6": 0.8033183813095093,
        "codebertscore_f1-18": 0.7681280970573425,
        "codebertscore_f3-18": 0.7818506360054016,
        "codebertscore_f1-15": 0.8006640076637268,
        "codebertscore_f3-15": 0.8034672141075134,
        "codebertscore_f1-13": 0.8517724871635437,
        "codebertscore_f3-13": 0.8638971447944641,
        "codebertscore_f1-9": 0.8478327989578247,
        "codebertscore_f3-9": 0.8563546538352966,
        "codebertscore_f1-4": 0.7887111902236938,
        "codebertscore_f3-4": 0.8063552379608154,
        "codebertscore_f1-14": 0.828758180141449,
        "codebertscore_f3-14": 0.8236488699913025,
        "codebertscore_f1-5": 0.8055825233459473,
        "codebertscore_f3-5": 0.8153403997421265,
        "codebertscore_f1-19": 0.8789230585098267,
        "codebertscore_f3-19": 0.8796399235725403,
        "codebertscore_s_f1-3": 0.8193585276603699,
        "codebertscore_s_f3-3": 0.861466646194458,
        "codebertscore_s_f1-0": 0.8156759738922119,
        "codebertscore_s_f3-0": 0.8299928903579712,
        "codebertscore_s_f1-8": 0.7877689599990845,
        "codebertscore_s_f3-8": 0.7947242259979248,
        "codebertscore_s_f1-7": 0.8448308110237122,
        "codebertscore_s_f3-7": 0.856802225112915,
        "codebertscore_s_f1-16": 0.8051722645759583,
        "codebertscore_s_f3-16": 0.8105286955833435,
        "codebertscore_s_f1-2": 0.803836464881897,
        "codebertscore_s_f3-2": 0.816265344619751,
        "codebertscore_s_f1-11": 0.8640264868736267,
        "codebertscore_s_f3-11": 0.8708063960075378,
        "codebertscore_s_f1-1": 0.8159881234169006,
        "codebertscore_s_f3-1": 0.8343656063079834,
        "codebertscore_s_f1-10": 0.8131545186042786,
        "codebertscore_s_f3-10": 0.8207176327705383,
        "codebertscore_s_f1-17": 0.7698490023612976,
        "codebertscore_s_f3-17": 0.7853494882583618,
        "codebertscore_s_f1-12": 0.5936459898948669,
        "codebertscore_s_f3-12": 0.5724797248840332,
        "codebertscore_s_f1-6": 0.7999173402786255,
        "codebertscore_s_f3-6": 0.8070529103279114,
        "codebertscore_s_f1-18": 0.7624322772026062,
        "codebertscore_s_f3-18": 0.7780548334121704,
        "codebertscore_s_f1-15": 0.8111360669136047,
        "codebertscore_s_f3-15": 0.8156082630157471,
        "codebertscore_s_f1-13": 0.8581954836845398,
        "codebertscore_s_f3-13": 0.8715836405754089,
        "codebertscore_s_f1-9": 0.8487378358840942,
        "codebertscore_s_f3-9": 0.8579677939414978,
        "codebertscore_s_f1-4": 0.7900896072387695,
        "codebertscore_s_f3-4": 0.8071299195289612,
        "codebertscore_s_f1-14": 0.8368871808052063,
        "codebertscore_s_f3-14": 0.8334116339683533,
        "codebertscore_s_f1-5": 0.8074018359184265,
        "codebertscore_s_f3-5": 0.8163679838180542,
        "codebertscore_s_f1-19": 0.8749830722808838,
        "codebertscore_s_f3-19": 0.8769987225532532,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 0,
        "raw_gpt35_nsnr-12": "0",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n",
        "snippet": [
            "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
        "task_id": "33",
        "3": "var newlist = l;\n    var oldlist = l;\n    var i;\n    var j;\n    var k;\n    var m;\n    var z;\n    var x;\n    var e;\n    for (i = 0; i < newlist.length; i = i + 3){\n        for (j = i; j < (i + 3); j++){\n            for (k = i; k < (i + 3); k++){\n                if (newlist[j] < newlist[k]){\n                    m = newlist[j];\n                    newlist[j] = newlist[k];\n                    newlist[k] = m;\n                }\n            }\n        }\n    }\n    for (x = 0; x < oldlist.length; x = x + 3){\n        for (z = 0; z < (i + 3); z++){\n            if (newlist[x] == oldlist[z]){\n                e = z;\n                break;\n            }\n        }\n        oldlist[e] = newlist[x];\n    }\n    return oldlist;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var output = [];\n  for (var i = 0; i < l.length; i++){\n    if ((i + 1) % 3 == 0){\n      var temp = l.slice(i, i + 3);\n      temp.sort();\n      output.push(temp[0]);\n      output.push(temp[1]);\n      output.push(temp[2]);\n    }\n    else{\n      output.push(l[i]);\n    }\n  }\n  return output;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return l.reduce(function(acc, next, index){\n    if (index % 3 == 0){\n      return acc.concat([next.sort()]);\n    }\n    else{\n      return acc.concat([next]);\n    }\n  }, []);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "}",
        "grade-7": {
            "execution": 0
        },
        "16": "let threes = [];\n  let notThrees = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 == 0){\n      threes.push(l[i]);\n    }else{\n      notThrees.push(l[i]);\n    }\n  }\n  threes.sort();\n  let ans = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 == 0){\n      ans.push(threes[i/3]);\n    }else{\n      ans.push(notThrees[i - i/3]);\n    }\n  }\n  return ans;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return l.map(function(e,i){\n        if(i%3==0){\n            return [...e].sort((a,b)=>a-b);\n        }\n        return e;\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return l.map(function(e, i){\n    if(i % 3 === 0){\n      return e.sort();\n    }\n    return e;\n  });\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return l.map(function(element, index){\n        if (index % 3 == 0){\n            return order(element);\n        } else {\n            return element;\n        }\n    });\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var l_prime = []\n\t//Iterate through each index of l (i)\n\tfor (var i = 0; i < l.length; i++){\n\t\t//If the index (i) is not divisible by three\n\t\tif (i % 3 != 0){\n\t\t\t//Append the value in l at the index i to l_prime\n\t\t\tl_prime.push(l[i])\n\t\t}\n\t\t//If the index (i) is divisible by three\n\t\telse{\n\t\t\t//Create a list of the values in l that are divisible by three\n\t\t\tvar l_three = []\n\t\t\tfor (var j = 0; j < l.length; j++){\n\t\t\t\tif (j % 3 == 0){\n\t\t\t\t\tl_three.push(l[j])\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Sort the list of values in l that are divisible by three\n\t\t\tl_three.sort()\n\t\t\t//Append the next value of l_three to l_prime\n\t\t\tl_prime.push(l_three[0])\n\t\t\t//Delete the first value of l_three so that the next value will be pushed to l_prime next\n\t\t\tl_three.shift()\n\t\t}\n\t}\n\treturn l_prime\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var list = l.slice(0); //copy of list\n\tvar newList = [];\n\tvar num = 0;\n\tvar tempList = [];\n\twhile(num < list.length){\n\t\tif(num % 3 != 0){\n\t\t\tnewList.push(list[num]);\n\t\t}\n\t\telse{\n\t\t\ttempList.push(list[num]);\n\t\t\tnewList.push(tempList.sort());\n\t\t\ttempList = [];\n\t\t}\n\t\tnum += 1;\n\t}\n\treturn newList;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var l2 = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l2.push(l[i]);\n        }\n    }\n    l2.sort();\n    var j = 0;\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l[i] = l2[j];\n            j++;\n        }\n    }\n    return l;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var ans = [];\n  var temp = [];\n  for(i=0; i<l.length; i++){\n    if(i%3 != 2){\n      ans.push(l[i]);\n    }\n    else{\n      temp.push(l[i]);\n    }\n  }\n  temp.sort();\n  for(i=0; i<temp.length; i++){\n    ans.push(temp[i]);\n  }\n  return ans;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "l.forEach(function(elem, index, array){\n    if(index % 3 == 0){\n      var low = index;\n      var high = index + 2;\n      while(low < high){\n        var temp = array[low];\n        array[low] = array[high];\n        array[high] = temp;\n        low += 1;\n        high -= 1;\n      }\n    }\n  });\n  return l;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return l.map(function(i, x){\n        return (x+1)%3 === 0 ? i.sort() : i;\n    });\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var res = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 3 == 0){\n\t\t\tres[i] = sortList(l[i]);\n\t\t}else{\n\t\t\tres[i] = l[i];\n\t\t}\n\t}\n\treturn res;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let l1 = []\n  let l2 = []\n  let l3 = []\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      l1.push(l[i])\n    }\n    else if (i % 3 == 1){\n      l2.push(l[i])\n    }\n    else{\n      l3.push(l[i])\n    }\n  }\n  l1.sort()\n  l2.sort()\n  l3.sort()\n  let res = []\n  let x = 0\n  let y = 0\n  let z = 0\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      res.push(l1[x])\n      x++\n    }\n    else if (i % 3 == 1){\n      res.push(l2[y])\n      y++\n    }\n    else{\n      res.push(l3[z])\n      z++\n    }\n  }\n  return res\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "const indicies = [];\n  const values = [];\n  l.forEach((val, idx) => {\n    if ((idx + 1) % 3 === 0) {\n      indicies.push(idx);\n      values.push(val);\n    }\n  });\n  const sorted = values.sort((a, b) => a - b);\n  return l.map((val, idx) => indicies.includes(idx) ? sorted.shift() : val);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let l_new = [];\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      let l_partial = l.slice(i, i + 3);\n      l_partial.sort();\n      l_new = l_new.concat(l_partial);\n    } else {\n      l_new.push(l[i]);\n    }\n  }\n  return l_new;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return l.map(function(e, i){\n    if (i % 3 == 0){\n      return merge_sort(e);\n    } else {\n      return e;\n    }\n  });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if (l.length == 0){\n        return [];\n    }\n    else{\n        let l_new = l.slice(0);\n        for (let i = 2; i < l.length; i += 3){\n            l_new[i] = Array.from(l_new[i]).sort();\n        }\n        return l_new;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.012496188165863707,
        "bleu-0": 0.10269580728067952,
        "bleu-8": 0.1819477687868116,
        "bleu-7": 1.4624862272512316e-31,
        "bleu-16": 0.10218272416923911,
        "bleu-2": 0.2878630785089107,
        "bleu-11": 0.12075780279973898,
        "bleu-1": 0.15010233010446203,
        "bleu-10": 0.044047987031292174,
        "bleu-17": 0.05809614686066582,
        "bleu-12": 0.11034180878680604,
        "bleu-6": 0.04364266333728713,
        "bleu-18": 0.14418417590236915,
        "bleu-15": 0.11708980157913709,
        "bleu-13": 0.11408387639521994,
        "bleu-9": 0.061037345770961274,
        "bleu-4": 0.2699799489587349,
        "bleu-14": 0.12908449559861718,
        "bleu-5": 0.11603738317097552,
        "bleu-19": 0.09618958626518047,
        "codebleu-3": 0.4768893387314439,
        "codebleu-0": 0.5068258194320701,
        "codebleu-8": 0.41769134896023025,
        "codebleu-7": 0.01282051282051282,
        "codebleu-16": 0.5689872691429163,
        "codebleu-2": 0.42969440449952223,
        "codebleu-11": 0.2832986365322365,
        "codebleu-1": 0.2693116853047402,
        "codebleu-10": 0.5596355282029212,
        "codebleu-17": 0.4789136302294196,
        "codebleu-12": 0.5187276833807969,
        "codebleu-6": 0.4617071524966261,
        "codebleu-18": 0.4536865664290723,
        "codebleu-15": 0.27583104473069714,
        "codebleu-13": 0.3790148777000333,
        "codebleu-9": 0.5385129719334867,
        "codebleu-4": 0.665779384205673,
        "codebleu-14": 0.4832212350963957,
        "codebleu-5": 0.2617523432678297,
        "codebleu-19": 0.4272081585913285,
        "chrf-3": 0.14420169007279718,
        "chrf-0": 0.20346619364245672,
        "chrf-8": 0.264817480502715,
        "chrf-7": 0.009596928982725529,
        "chrf-16": 0.22397454219801938,
        "chrf-2": 0.27046674059343456,
        "chrf-11": 0.2030594373069582,
        "chrf-1": 0.27638105071012303,
        "chrf-10": 0.22470181267450964,
        "chrf-17": 0.1863396276328601,
        "chrf-12": 0.18647875923465868,
        "chrf-6": 0.18983777605172922,
        "chrf-18": 0.2747415316017644,
        "chrf-15": 0.1895103216831269,
        "chrf-13": 0.15943916598210567,
        "chrf-9": 0.1695472813812424,
        "chrf-4": 0.33559934134300207,
        "chrf-14": 0.19651238026226225,
        "chrf-5": 0.19804108102260742,
        "chrf-19": 0.17522607963771367,
        "rougel-3": 0.2028985507246377,
        "rougel-0": 0.3463687150837989,
        "rougel-8": 0.44274809160305345,
        "rougel-7": 0.0273972602739726,
        "rougel-16": 0.32558139534883723,
        "rougel-2": 0.5000000000000001,
        "rougel-11": 0.3818181818181819,
        "rougel-1": 0.3783783783783784,
        "rougel-10": 0.2328767123287671,
        "rougel-17": 0.29834254143646405,
        "rougel-12": 0.3575418994413408,
        "rougel-6": 0.29885057471264365,
        "rougel-18": 0.32704402515723274,
        "rougel-15": 0.34862385321100914,
        "rougel-13": 0.28776978417266186,
        "rougel-9": 0.24727272727272726,
        "rougel-4": 0.5280898876404494,
        "rougel-14": 0.33766233766233766,
        "rougel-5": 0.34234234234234234,
        "rougel-19": 0.32167832167832167,
        "meteor-3": 0.26954679220083433,
        "meteor-0": 0.34349232363265325,
        "meteor-8": 0.3391738590768698,
        "meteor-7": 0.007704160246533127,
        "meteor-16": 0.42441755463247255,
        "meteor-2": 0.34106751539183977,
        "meteor-11": 0.25643148688046646,
        "meteor-1": 0.2756550218340611,
        "meteor-10": 0.3222566372407322,
        "meteor-17": 0.31258549396949964,
        "meteor-12": 0.3366887417218543,
        "meteor-6": 0.2845434623813002,
        "meteor-18": 0.3318446492170275,
        "meteor-15": 0.2795642033429793,
        "meteor-13": 0.23483659197944912,
        "meteor-9": 0.2981039010024517,
        "meteor-4": 0.5913955019957574,
        "meteor-14": 0.31020542942053486,
        "meteor-5": 0.2586403936145897,
        "meteor-19": 0.26170245132127956,
        "ruby-3": 0.12254901960784315,
        "ruby-0": 0.20560747663551404,
        "ruby-8": 0.2777777777777778,
        "ruby-7": 0.01388888888888884,
        "ruby-16": 0.22377622377622375,
        "ruby-2": 0.3055555555555556,
        "ruby-11": 0.23611111111111116,
        "ruby-1": 0.25,
        "ruby-10": 0.13636363636363635,
        "ruby-17": 0.2018348623853211,
        "ruby-12": 0.25233644859813087,
        "ruby-6": 0.196078431372549,
        "ruby-18": 0.2183908045977011,
        "ruby-15": 0.23611111111111116,
        "ruby-13": 0.13888888888888884,
        "ruby-9": 0.1576354679802956,
        "ruby-4": 0.3867924528301887,
        "ruby-14": 0.1707317073170732,
        "ruby-5": 0.2222222222222222,
        "ruby-19": 0.125,
        "codebertscore_f1-3": 0.6310902237892151,
        "codebertscore_f3-3": 0.665155827999115,
        "codebertscore_f1-0": 0.7362141609191895,
        "codebertscore_f3-0": 0.7521452307701111,
        "codebertscore_f1-8": 0.7798976302146912,
        "codebertscore_f3-8": 0.7945460081100464,
        "codebertscore_f1-7": 0.0,
        "codebertscore_f3-7": 0.0,
        "codebertscore_f1-16": 0.735450267791748,
        "codebertscore_f3-16": 0.7651774883270264,
        "codebertscore_f1-2": 0.8289487957954407,
        "codebertscore_f3-2": 0.8176672458648682,
        "codebertscore_f1-11": 0.807328999042511,
        "codebertscore_f3-11": 0.792427659034729,
        "codebertscore_f1-1": 0.8142166137695312,
        "codebertscore_f3-1": 0.8059290647506714,
        "codebertscore_f1-10": 0.6747782826423645,
        "codebertscore_f3-10": 0.7336530089378357,
        "codebertscore_f1-17": 0.730796217918396,
        "codebertscore_f3-17": 0.7493030428886414,
        "codebertscore_f1-12": 0.7490904331207275,
        "codebertscore_f3-12": 0.7601314783096313,
        "codebertscore_f1-6": 0.7392957210540771,
        "codebertscore_f3-6": 0.7489882707595825,
        "codebertscore_f1-18": 0.7518250346183777,
        "codebertscore_f3-18": 0.7718750238418579,
        "codebertscore_f1-15": 0.7997223734855652,
        "codebertscore_f3-15": 0.7881408929824829,
        "codebertscore_f1-13": 0.7638081908226013,
        "codebertscore_f3-13": 0.7633856534957886,
        "codebertscore_f1-9": 0.6941537261009216,
        "codebertscore_f3-9": 0.7340167164802551,
        "codebertscore_f1-4": 0.7905964851379395,
        "codebertscore_f3-4": 0.8223916888237,
        "codebertscore_f1-14": 0.7437686920166016,
        "codebertscore_f3-14": 0.7538071274757385,
        "codebertscore_f1-5": 0.7933908700942993,
        "codebertscore_f3-5": 0.7877564430236816,
        "codebertscore_f1-19": 0.7314680814743042,
        "codebertscore_f3-19": 0.7319456338882446,
        "codebertscore_s_f1-3": 0.6475885510444641,
        "codebertscore_s_f3-3": 0.6714947819709778,
        "codebertscore_s_f1-0": 0.7453475594520569,
        "codebertscore_s_f3-0": 0.7624342441558838,
        "codebertscore_s_f1-8": 0.7818725109100342,
        "codebertscore_s_f3-8": 0.7933982014656067,
        "codebertscore_s_f1-7": 0.0,
        "codebertscore_s_f3-7": 0.0,
        "codebertscore_s_f1-16": 0.7462525963783264,
        "codebertscore_s_f3-16": 0.7731031775474548,
        "codebertscore_s_f1-2": 0.8395671248435974,
        "codebertscore_s_f3-2": 0.8264504075050354,
        "codebertscore_s_f1-11": 0.8086645603179932,
        "codebertscore_s_f3-11": 0.79362952709198,
        "codebertscore_s_f1-1": 0.8156762719154358,
        "codebertscore_s_f3-1": 0.8079878687858582,
        "codebertscore_s_f1-10": 0.7050049901008606,
        "codebertscore_s_f3-10": 0.7566776275634766,
        "codebertscore_s_f1-17": 0.7435725927352905,
        "codebertscore_s_f3-17": 0.7602538466453552,
        "codebertscore_s_f1-12": 0.7629685401916504,
        "codebertscore_s_f3-12": 0.772330641746521,
        "codebertscore_s_f1-6": 0.7473579049110413,
        "codebertscore_s_f3-6": 0.7562050223350525,
        "codebertscore_s_f1-18": 0.7668969035148621,
        "codebertscore_s_f3-18": 0.7883018851280212,
        "codebertscore_s_f1-15": 0.799541175365448,
        "codebertscore_s_f3-15": 0.786261796951294,
        "codebertscore_s_f1-13": 0.7729960083961487,
        "codebertscore_s_f3-13": 0.7697558403015137,
        "codebertscore_s_f1-9": 0.7162541151046753,
        "codebertscore_s_f3-9": 0.7459670901298523,
        "codebertscore_s_f1-4": 0.7961366176605225,
        "codebertscore_s_f3-4": 0.8268822431564331,
        "codebertscore_s_f1-14": 0.7521998882293701,
        "codebertscore_s_f3-14": 0.7611534595489502,
        "codebertscore_s_f1-5": 0.79304438829422,
        "codebertscore_s_f3-5": 0.7882443070411682,
        "codebertscore_s_f1-19": 0.7312473654747009,
        "codebertscore_s_f3-19": 0.7329352498054504,
        "gpt35_nsnr-3": 2,
        "raw_gpt35_nsnr-3": "2",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 1,
        "raw_gpt35_nswr-3": "1",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "Score: 3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Create a function that returns True if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and False otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n// check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n// check_if_last_char_is_a_letter(\"\") \u279e False\nfunction check_if_last_char_is_a_letter(txt){\n",
        "snippet": [
            "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n"
        ],
        "simplified": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
        "task_id": "134",
        "3": "if(txt.length === 0){\n        return false;\n    }\n    if(txt[txt.length-1].match(/[a-z]/i) && txt[txt.length-2] === ' '){\n        return true;\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let t = txt.split(\" \");\n    let last = t[t.length-1];\n    if(isNaN(last) && last.length===1){\n        return true;\n    }\n    return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let result = txt.match(/\\s?([a-z])$/i);\n  return result ? true : false;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let str = txt.charAt(txt.length-1);\n  let res = str.charCodeAt(0);\n  if((res>64 && res<91) || (res>96 && res<123))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (txt.length < 1){\n    return false;\n  }\n  if (txt[txt.length - 1].match(/[A-Za-z]/)){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return txt.slice(-1).match(/[a-z]/i) ? txt.match(/\\s/g) ? (txt.match(/\\s/g).length === 1) : true : false;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let words = txt.split(\" \");\n    if(words[words.length-1].length >= 1){\n        return false;\n    }\n    if(words[words.length-1].length === 0){\n        return false;\n    }\n    if(!(words[words.length-1].length - 1)){\n        return false;\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var txt2 = txt.trim();\n    var last = txt2.slice(-1);\n    if (/[A-Za-z]/.test(last)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if (txt.length === 0) return false;\n    else if (!txt.match(/\\w\\s$/)) return true;\n    else return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let lastChar = txt.slice(-1)\n    if (lastChar.match(/[a-z]/i) && lastChar.match(/\\W/)){\n        return true\n    } else {\n        return false\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let lastChar = txt.slice(-1);\n    let arr = txt.split(\" \");\n    if(/[a-z]/i.test(lastChar) && arr.length > 1 && arr[arr.length-1].length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var words=txt.split(\" \");\n    var lastLetter=words[words.length-1];\n    var letter=lastLetter[lastLetter.length-1];\n    var result=false;\n    if(letter>='a' && letter<='z' || letter>='A' && letter<='Z'){\n        if(lastLetter.length===1){\n            result=true;\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return txt.match(/[a-z]\\s$/i) ? true : false;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(txt.length == 0){\n        return false;\n    }\n    let splitStr = txt.split(\" \");\n    if(splitStr[splitStr.length-1].length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return /^[a-z]$/i.test(txt.charAt(txt.length - 1));\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let arr=txt.split(\" \");\n    console.log(arr);\n    if(arr[arr.length-1].length!=0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let str = txt.trim();\n    let lastChar = str[str.length - 1];\n    let isLetter = false;\n    if(lastChar >= 'a' && lastChar <= 'z'){\n        isLetter = true;\n    }\n    return isLetter;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let txtSplit = txt.split(\" \")\n    let lastTxt = txtSplit[txtSplit.length-1]\n    return lastTxt.match(/[a-z]/i) && lastTxt.length == 1 ? true : false\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(!txt){\n        return false;\n    }\n    var txtArray = txt.split(\" \");\n    for(var i = 0; i < txtArray.length; i++){\n        if(txtArray[i].charAt(txtArray[i].length - 1) && txtArray[i].charAt(txtArray[i].length - 1).match(/[a-z]/i)){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if (txt[txt.length-1] != \" \"){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.13495683242853784,
        "bleu-0": 0.04895317479051883,
        "bleu-8": 0.0031160945428674964,
        "bleu-7": 0.09690818509410942,
        "bleu-16": 0.06601311692089504,
        "bleu-2": 0.02440373533341952,
        "bleu-11": 0.1413287268147859,
        "bleu-1": 0.03330801950566638,
        "bleu-10": 0.016077928397517458,
        "bleu-17": 0.04941248728671757,
        "bleu-12": 0.09248662252432098,
        "bleu-6": 0.10378118839890788,
        "bleu-18": 0.0005725873361596817,
        "bleu-15": 0.09786381069769488,
        "bleu-13": 0.0033223367442140415,
        "bleu-9": 0.043258654033531345,
        "bleu-4": 0.028669209443960925,
        "bleu-14": 0.024073452774402905,
        "bleu-5": 0.12313552078891993,
        "bleu-19": 0.00850077991889404,
        "codebleu-3": 0.26816863916924805,
        "codebleu-0": 0.21295386946076741,
        "codebleu-8": 0.09615049442900461,
        "codebleu-7": 0.272536331566986,
        "codebleu-16": 0.19757439211472466,
        "codebleu-2": 0.16855620869235766,
        "codebleu-11": 0.34737450675052994,
        "codebleu-1": 0.19664032723686564,
        "codebleu-10": 0.11032162686294619,
        "codebleu-17": 0.1962573567529525,
        "codebleu-12": 0.3070282201493901,
        "codebleu-6": 0.3610744328166609,
        "codebleu-18": 0.06763552024716517,
        "codebleu-15": 0.22844056084839295,
        "codebleu-13": 0.09195332114153983,
        "codebleu-9": 0.1814672550180337,
        "codebleu-4": 0.1960895710718968,
        "codebleu-14": 0.19627079347518564,
        "codebleu-5": 0.36048946004582955,
        "codebleu-19": 0.10551182540617579,
        "chrf-3": 0.30424382520018517,
        "chrf-0": 0.2111950957657711,
        "chrf-8": 0.08823133710246904,
        "chrf-7": 0.2781852083089565,
        "chrf-16": 0.2758876098646533,
        "chrf-2": 0.12817455335961897,
        "chrf-11": 0.3305581782563488,
        "chrf-1": 0.18219241279757892,
        "chrf-10": 0.22443826357489433,
        "chrf-17": 0.191609047842245,
        "chrf-12": 0.23844997700997916,
        "chrf-6": 0.2135152684184056,
        "chrf-18": 0.06984417000690349,
        "chrf-15": 0.2956629815029751,
        "chrf-13": 0.10537038368783268,
        "chrf-9": 0.2063890229606164,
        "chrf-4": 0.17089984879300335,
        "chrf-14": 0.15949118540419346,
        "chrf-5": 0.280750773109332,
        "chrf-19": 0.18651850503309414,
        "rougel-3": 0.40425531914893614,
        "rougel-0": 0.32954545454545453,
        "rougel-8": 0.19108280254777069,
        "rougel-7": 0.4105263157894737,
        "rougel-16": 0.30857142857142855,
        "rougel-2": 0.21978021978021978,
        "rougel-11": 0.357487922705314,
        "rougel-1": 0.2857142857142857,
        "rougel-10": 0.25609756097560976,
        "rougel-17": 0.29545454545454547,
        "rougel-12": 0.33830845771144274,
        "rougel-6": 0.36444444444444446,
        "rougel-18": 0.14765100671140938,
        "rougel-15": 0.3516483516483516,
        "rougel-13": 0.16883116883116883,
        "rougel-9": 0.26744186046511625,
        "rougel-4": 0.31351351351351353,
        "rougel-14": 0.27777777777777773,
        "rougel-5": 0.3189655172413793,
        "rougel-19": 0.23529411764705882,
        "meteor-3": 0.3020624303232999,
        "meteor-0": 0.21525837580660243,
        "meteor-8": 0.06866952789699571,
        "meteor-7": 0.30155815247634954,
        "meteor-16": 0.22477314945263663,
        "meteor-2": 0.13402412094445387,
        "meteor-11": 0.2895670781893004,
        "meteor-1": 0.15245204167888624,
        "meteor-10": 0.153976168467956,
        "meteor-17": 0.17974028716216214,
        "meteor-12": 0.2457760088560747,
        "meteor-6": 0.27576220024282905,
        "meteor-18": 0.05185825410544511,
        "meteor-15": 0.21361344537815122,
        "meteor-13": 0.09399688186859033,
        "meteor-9": 0.16156779661016943,
        "meteor-4": 0.17698758907931791,
        "meteor-14": 0.18846094407617842,
        "meteor-5": 0.33554875457917516,
        "meteor-19": 0.13297642831207693,
        "ruby-3": 0.24603174603174605,
        "ruby-0": 0.2063492063492064,
        "ruby-8": 0.10317460317460314,
        "ruby-7": 0.2936507936507936,
        "ruby-16": 0.16666666666666663,
        "ruby-2": 0.1507936507936508,
        "ruby-11": 0.2222222222222222,
        "ruby-1": 0.17460317460317465,
        "ruby-10": 0.1428571428571429,
        "ruby-17": 0.17460317460317465,
        "ruby-12": 0.19841269841269837,
        "ruby-6": 0.19841269841269837,
        "ruby-18": 0.07936507936507942,
        "ruby-15": 0.2142857142857143,
        "ruby-13": 0.08730158730158732,
        "ruby-9": 0.15873015873015872,
        "ruby-4": 0.18253968253968256,
        "ruby-14": 0.16666666666666663,
        "ruby-5": 0.18253968253968256,
        "ruby-19": 0.11904761904761907,
        "codebertscore_f1-3": 0.8149861097335815,
        "codebertscore_f3-3": 0.7934936285018921,
        "codebertscore_f1-0": 0.7928177714347839,
        "codebertscore_f3-0": 0.7774718999862671,
        "codebertscore_f1-8": 0.7202960848808289,
        "codebertscore_f3-8": 0.7026010751724243,
        "codebertscore_f1-7": 0.8468610048294067,
        "codebertscore_f3-7": 0.8397491574287415,
        "codebertscore_f1-16": 0.7897939085960388,
        "codebertscore_f3-16": 0.7711296081542969,
        "codebertscore_f1-2": 0.7125856280326843,
        "codebertscore_f3-2": 0.709807276725769,
        "codebertscore_f1-11": 0.807410478591919,
        "codebertscore_f3-11": 0.7811505198478699,
        "codebertscore_f1-1": 0.7616317868232727,
        "codebertscore_f3-1": 0.7539613842964172,
        "codebertscore_f1-10": 0.7536224722862244,
        "codebertscore_f3-10": 0.7286195158958435,
        "codebertscore_f1-17": 0.7498650550842285,
        "codebertscore_f3-17": 0.7597596049308777,
        "codebertscore_f1-12": 0.7865259647369385,
        "codebertscore_f3-12": 0.7897677421569824,
        "codebertscore_f1-6": 0.7773216962814331,
        "codebertscore_f3-6": 0.7776556015014648,
        "codebertscore_f1-18": 0.6964292526245117,
        "codebertscore_f3-18": 0.68099445104599,
        "codebertscore_f1-15": 0.8029909729957581,
        "codebertscore_f3-15": 0.7761046290397644,
        "codebertscore_f1-13": 0.71868497133255,
        "codebertscore_f3-13": 0.6980893611907959,
        "codebertscore_f1-9": 0.773726761341095,
        "codebertscore_f3-9": 0.7537460327148438,
        "codebertscore_f1-4": 0.7881295680999756,
        "codebertscore_f3-4": 0.7817274332046509,
        "codebertscore_f1-14": 0.7763153314590454,
        "codebertscore_f3-14": 0.7671192288398743,
        "codebertscore_f1-5": 0.7956087589263916,
        "codebertscore_f3-5": 0.7932304739952087,
        "codebertscore_f1-19": 0.7898968458175659,
        "codebertscore_f3-19": 0.7431591749191284,
        "codebertscore_s_f1-3": 0.9145563244819641,
        "codebertscore_s_f3-3": 0.8922908902168274,
        "codebertscore_s_f1-0": 0.9074532389640808,
        "codebertscore_s_f3-0": 0.8816261887550354,
        "codebertscore_s_f1-8": 0.87957364320755,
        "codebertscore_s_f3-8": 0.8413525819778442,
        "codebertscore_s_f1-7": 0.9275984764099121,
        "codebertscore_s_f3-7": 0.9162417650222778,
        "codebertscore_s_f1-16": 0.904009222984314,
        "codebertscore_s_f3-16": 0.8788875937461853,
        "codebertscore_s_f1-2": 0.8694495558738708,
        "codebertscore_s_f3-2": 0.8481340408325195,
        "codebertscore_s_f1-11": 0.9047152996063232,
        "codebertscore_s_f3-11": 0.8822683095932007,
        "codebertscore_s_f1-1": 0.8871527910232544,
        "codebertscore_s_f3-1": 0.8680272102355957,
        "codebertscore_s_f1-10": 0.888666033744812,
        "codebertscore_s_f3-10": 0.8511691093444824,
        "codebertscore_s_f1-17": 0.892680287361145,
        "codebertscore_s_f3-17": 0.8759737610816956,
        "codebertscore_s_f1-12": 0.9005367159843445,
        "codebertscore_s_f3-12": 0.8909153342247009,
        "codebertscore_s_f1-6": 0.8922461271286011,
        "codebertscore_s_f3-6": 0.8833171725273132,
        "codebertscore_s_f1-18": 0.874607503414154,
        "codebertscore_s_f3-18": 0.8308055400848389,
        "codebertscore_s_f1-15": 0.9101736545562744,
        "codebertscore_s_f3-15": 0.8825691938400269,
        "codebertscore_s_f1-13": 0.8842595815658569,
        "codebertscore_s_f3-13": 0.8449641466140747,
        "codebertscore_s_f1-9": 0.9040039777755737,
        "codebertscore_s_f3-9": 0.8736190795898438,
        "codebertscore_s_f1-4": 0.9082009792327881,
        "codebertscore_s_f3-4": 0.8866663575172424,
        "codebertscore_s_f1-14": 0.891726553440094,
        "codebertscore_s_f3-14": 0.8732820153236389,
        "codebertscore_s_f1-5": 0.8939669728279114,
        "codebertscore_s_f3-5": 0.8916442394256592,
        "codebertscore_s_f1-19": 0.9062128663063049,
        "codebertscore_s_f3-19": 0.8601179122924805,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 2,
        "raw_gpt35_nsnr-11": "2",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string, substring){\n",
        "snippet": [
            "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n"
        ],
        "simplified": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "task_id": "18",
        "3": "var count = 0;\n  var index = string.indexOf(substring);\n  while (index >= 0) {\n    count++;\n    index = string.indexOf(substring, index + 1);\n  }\n  return count;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var index = 0;\n  var count = 0;\n  while (true){\n    index = string.indexOf(substring, index);\n    if (index === -1){\n      break;\n    }\n    index++;\n    count++;\n  }\n  return count;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substring(i, substring.length + i) == substring) {\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let count = 0;\n    let i = 0;\n    while (i < string.length) {\n        if (string.slice(i, i + substring.length) === substring) {\n            count ++;\n            i = i + substring.length;\n        } else {\n            i ++;\n        }\n    }\n    return count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var count = 0;\n    var currentIndex = 0;\n    while(currentIndex >= 0){\n        currentIndex = string.indexOf(substring, currentIndex);\n        if(currentIndex >= 0){\n            count += 1;\n            currentIndex += 1;\n        }\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let count = 0;\n    let end = substring.length - 1;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === substring[0]){\n            for(let j = 0; j < substring.length; j++){\n                if(string[i + j] !== substring[j]){\n                    break;\n                }\n                if(string[i + j] === substring[end]){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var index = 0;\n    var count = 0;\n    var substring_length = substring.length;\n    while (index < string.length){\n        if (string.substring(index, index + substring_length) == substring){\n            count += 1;\n            index += substring_length;\n        } else {\n            index += 1;\n        }\n    }\n    return count;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let count = 0;\n    let subLength = substring.length;\n    let strLength = string.length;\n    if(subLength <= strLength){\n        for(let i = 0; i <= strLength - subLength; i++){\n            let temp = string.substring(i, i + subLength);\n            if(temp === substring){\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "// your code here\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var sizeString = string.length;\n  var sizeSubString = substring.length;\n  var count = 0;\n  var index = 0;\n  while(index < sizeString){\n    if(substring === string.substring(index,index+sizeSubString)){\n      count++;\n      index += sizeSubString;\n    }else{\n      index++;\n    }\n  }\n  return count;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var count = 0;\n    var index = string.indexOf(substring);\n    while (index >= 0) {\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (substring === ''){\n        return 0;\n    }\n    let subLength = substring.length;\n    let result = 0;\n    for (i = 0; i < string.length; i++){\n        if (string.substring(i, i + subLength) === substring){\n            result += 1;\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var times = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.slice(i, substring.length + i) === substring) {\n      times += 1;\n    }\n  }\n  return times;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let counter = 0;\n    for (let i = 0; i < string.length; i++){\n        if (string.substring(i,i+substring.length) === substring){\n            counter += 1;\n        }\n    }\n    return counter;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if (string.length < substring.length) {\n    return 0;\n  }\n  var match = string.match(new RegExp(substring, 'g'));\n  if (match) {\n    return match.length;\n  }\n  return 0;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        for (let j = 0; j < substring.length; j++) {\n            if (string[i + j] !== substring[j]) {\n                break;\n            }\n            if (j === substring.length - 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var times = 0;\n    for (var i = 0; i < string.length; i++){\n        for (var j = 0; j < substring.length; j++){\n            if (string[i+j] != substring[j]){\n                break;\n            }\n            if (j == substring.length - 1){\n                times++;\n            }\n        }\n    }\n    return times;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var count = 0;\n  var index = 0;\n  while (index <= string.length - substring.length){\n    if (string.slice(index,index+substring.length) == substring){\n      count += 1;\n      index += substring.length;\n    }\n    else{\n      index += 1;\n    }\n  }\n  return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var i = 0;\n    var count = 0;\n    while (i < string.length){\n        if (string.substring(i, i + substring.length) == substring){\n            count++;\n            i += substring.length;\n        }\n        else{\n            i++;\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.06388551205338396,
        "bleu-0": 0.08066612626083035,
        "bleu-8": 0.5342913469110222,
        "bleu-7": 0.541669232337911,
        "bleu-16": 0.18993836923874752,
        "bleu-2": 0.2602268429783039,
        "bleu-11": 0.3439626064650914,
        "bleu-1": 0.3065727258970851,
        "bleu-10": 1.1833452118292994e-05,
        "bleu-17": 0.14148012354532646,
        "bleu-12": 0.06388551205338396,
        "bleu-6": 0.4713040784657418,
        "bleu-18": 0.7475324153565331,
        "bleu-15": 0.7001922164539084,
        "bleu-13": 0.14746703429372984,
        "bleu-9": 0.3603076111794692,
        "bleu-4": 0.7001922164539084,
        "bleu-14": 0.4095021573793234,
        "bleu-5": 0.4497142913255275,
        "bleu-19": 0.5090621445942874,
        "codebleu-3": 0.43236284225048804,
        "codebleu-0": 0.4811200475091256,
        "codebleu-8": 0.6645354286363148,
        "codebleu-7": 0.7208393500353034,
        "codebleu-16": 0.47151778543874046,
        "codebleu-2": 0.67538544856703,
        "codebleu-11": 0.6476467970310139,
        "codebleu-1": 0.6569528207369275,
        "codebleu-10": 0.03174637397949913,
        "codebleu-17": 0.6036157907675029,
        "codebleu-12": 0.43236284225048804,
        "codebleu-6": 0.713806660070693,
        "codebleu-18": 0.7377279148675808,
        "codebleu-15": 0.7472279350836509,
        "codebleu-13": 0.4462388160769967,
        "codebleu-9": 0.69765466669669,
        "codebleu-4": 0.7472279350836509,
        "codebleu-14": 0.7128960112511258,
        "codebleu-5": 0.7302173047581445,
        "codebleu-19": 0.7209939255074986,
        "chrf-3": 0.3102907287167806,
        "chrf-0": 0.2491253823583175,
        "chrf-8": 0.5996140857392872,
        "chrf-7": 0.6701541794160903,
        "chrf-16": 0.2531467428869332,
        "chrf-2": 0.5673040398285483,
        "chrf-11": 0.5403649185484399,
        "chrf-1": 0.5605255568316108,
        "chrf-10": 0.017916242379066985,
        "chrf-17": 0.45011703814929827,
        "chrf-12": 0.3102907287167806,
        "chrf-6": 0.6347945040067613,
        "chrf-18": 0.7728335408957437,
        "chrf-15": 0.6900002719244074,
        "chrf-13": 0.42688850749476975,
        "chrf-9": 0.6130094756973072,
        "chrf-4": 0.6913207155153016,
        "chrf-14": 0.7021564853111752,
        "chrf-5": 0.6321293735468738,
        "chrf-19": 0.6273896842904692,
        "rougel-3": 0.41509433962264153,
        "rougel-0": 0.4285714285714286,
        "rougel-8": 0.7927927927927929,
        "rougel-7": 0.6829268292682927,
        "rougel-16": 0.43697478991596644,
        "rougel-2": 0.4855491329479769,
        "rougel-11": 0.5555555555555555,
        "rougel-1": 0.5342465753424658,
        "rougel-10": 0.030769230769230767,
        "rougel-17": 0.42028985507246386,
        "rougel-12": 0.41509433962264153,
        "rougel-6": 0.6616541353383459,
        "rougel-18": 0.8849557522123893,
        "rougel-15": 0.8495575221238938,
        "rougel-13": 0.38888888888888884,
        "rougel-9": 0.5833333333333334,
        "rougel-4": 0.8495575221238938,
        "rougel-14": 0.6338028169014085,
        "rougel-5": 0.671875,
        "rougel-19": 0.6611570247933884,
        "meteor-3": 0.3564585775973004,
        "meteor-0": 0.4380707762557078,
        "meteor-8": 0.7718696397941682,
        "meteor-7": 0.6992948834927348,
        "meteor-16": 0.4862513832048197,
        "meteor-2": 0.5782676253382871,
        "meteor-11": 0.6071244713784238,
        "meteor-1": 0.6676825816309138,
        "meteor-10": 0.00931098696461825,
        "meteor-17": 0.4980893526851021,
        "meteor-12": 0.3564585775973004,
        "meteor-6": 0.8071669421487603,
        "meteor-18": 0.8802154453042028,
        "meteor-15": 0.832868783306101,
        "meteor-13": 0.45513661854194004,
        "meteor-9": 0.5879188311688313,
        "meteor-4": 0.832868783306101,
        "meteor-14": 0.6633894311328291,
        "meteor-5": 0.6449254918981482,
        "meteor-19": 0.7087882271249935,
        "ruby-3": 0.288135593220339,
        "ruby-0": 0.27118644067796616,
        "ruby-8": 0.711864406779661,
        "ruby-7": 0.46875,
        "ruby-16": 0.2833333333333333,
        "ruby-2": 0.32456140350877194,
        "ruby-11": 0.4029850746268657,
        "ruby-1": 0.3908045977011494,
        "ruby-10": 0.016949152542372836,
        "ruby-17": 0.2911392405063291,
        "ruby-12": 0.288135593220339,
        "ruby-6": 0.5,
        "ruby-18": 0.7966101694915254,
        "ruby-15": 0.7966101694915254,
        "ruby-13": 0.2542372881355932,
        "ruby-9": 0.43529411764705883,
        "ruby-4": 0.7966101694915254,
        "ruby-14": 0.4819277108433735,
        "ruby-5": 0.5072463768115942,
        "ruby-19": 0.4516129032258065,
        "codebertscore_f1-3": 0.8339374661445618,
        "codebertscore_f3-3": 0.823896586894989,
        "codebertscore_f1-0": 0.8097209930419922,
        "codebertscore_f3-0": 0.8076114654541016,
        "codebertscore_f1-8": 0.9251136779785156,
        "codebertscore_f3-8": 0.9123268127441406,
        "codebertscore_f1-7": 0.8920776844024658,
        "codebertscore_f3-7": 0.8824407458305359,
        "codebertscore_f1-16": 0.8110280632972717,
        "codebertscore_f3-16": 0.8127604722976685,
        "codebertscore_f1-2": 0.8363466262817383,
        "codebertscore_f3-2": 0.8466084599494934,
        "codebertscore_f1-11": 0.8652601838111877,
        "codebertscore_f3-11": 0.8643169403076172,
        "codebertscore_f1-1": 0.8681415915489197,
        "codebertscore_f3-1": 0.8785040974617004,
        "codebertscore_f1-10": 0.6115608215332031,
        "codebertscore_f3-10": 0.5879378914833069,
        "codebertscore_f1-17": 0.840431809425354,
        "codebertscore_f3-17": 0.8506737947463989,
        "codebertscore_f1-12": 0.8348608613014221,
        "codebertscore_f3-12": 0.8252778053283691,
        "codebertscore_f1-6": 0.8941497206687927,
        "codebertscore_f3-6": 0.8919068574905396,
        "codebertscore_f1-18": 0.9529139399528503,
        "codebertscore_f3-18": 0.9400631189346313,
        "codebertscore_f1-15": 0.9464251399040222,
        "codebertscore_f3-15": 0.9358540177345276,
        "codebertscore_f1-13": 0.7923359870910645,
        "codebertscore_f3-13": 0.7776926755905151,
        "codebertscore_f1-9": 0.8679727911949158,
        "codebertscore_f3-9": 0.8665903210639954,
        "codebertscore_f1-4": 0.9447963237762451,
        "codebertscore_f3-4": 0.9337179064750671,
        "codebertscore_f1-14": 0.8710570931434631,
        "codebertscore_f3-14": 0.8736882209777832,
        "codebertscore_f1-5": 0.9082459211349487,
        "codebertscore_f3-5": 0.9114810228347778,
        "codebertscore_f1-19": 0.8883559703826904,
        "codebertscore_f3-19": 0.8813750743865967,
        "codebertscore_s_f1-3": 0.8388808369636536,
        "codebertscore_s_f3-3": 0.8287415504455566,
        "codebertscore_s_f1-0": 0.8150787949562073,
        "codebertscore_s_f3-0": 0.8113740682601929,
        "codebertscore_s_f1-8": 0.9293308258056641,
        "codebertscore_s_f3-8": 0.9155628085136414,
        "codebertscore_s_f1-7": 0.8926301598548889,
        "codebertscore_s_f3-7": 0.883072018623352,
        "codebertscore_s_f1-16": 0.8138739466667175,
        "codebertscore_s_f3-16": 0.8148208260536194,
        "codebertscore_s_f1-2": 0.8474552631378174,
        "codebertscore_s_f3-2": 0.8584322333335876,
        "codebertscore_s_f1-11": 0.873653769493103,
        "codebertscore_s_f3-11": 0.8704221844673157,
        "codebertscore_s_f1-1": 0.8708103895187378,
        "codebertscore_s_f3-1": 0.8778960108757019,
        "codebertscore_s_f1-10": 0.6080135703086853,
        "codebertscore_s_f3-10": 0.5820271372795105,
        "codebertscore_s_f1-17": 0.8482667803764343,
        "codebertscore_s_f3-17": 0.8561804294586182,
        "codebertscore_s_f1-12": 0.8399397134780884,
        "codebertscore_s_f3-12": 0.8297049403190613,
        "codebertscore_s_f1-6": 0.8957082629203796,
        "codebertscore_s_f3-6": 0.8932927250862122,
        "codebertscore_s_f1-18": 0.957230806350708,
        "codebertscore_s_f3-18": 0.9444001317024231,
        "codebertscore_s_f1-15": 0.9499906897544861,
        "codebertscore_s_f3-15": 0.9386157393455505,
        "codebertscore_s_f1-13": 0.8064017295837402,
        "codebertscore_s_f3-13": 0.7929897904396057,
        "codebertscore_s_f1-9": 0.8752428293228149,
        "codebertscore_s_f3-9": 0.8734338283538818,
        "codebertscore_s_f1-4": 0.9477120041847229,
        "codebertscore_s_f3-4": 0.9361337423324585,
        "codebertscore_s_f1-14": 0.8833408355712891,
        "codebertscore_s_f3-14": 0.8849467635154724,
        "codebertscore_s_f1-5": 0.9101298451423645,
        "codebertscore_s_f3-5": 0.9116223454475403,
        "codebertscore_s_f1-19": 0.896321177482605,
        "codebertscore_s_f3-19": 0.8879404067993164,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 0,
        "raw_gpt35_nsnr-10": "0- The code snippet does not contain any implementation to solve the given problem.",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return True else return False.\n// If the given array is empty then return True.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n",
        "snippet": [
            "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n"
        ],
        "simplified": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
        "task_id": "109",
        "3": "if(arr.length<2) return true;\n    let i = arr.length-1;\n    while(i>0){\n        if(arr[i]<arr[i-1]){\n            [arr[i],arr[i-1]]=[arr[i-1],arr[i]];\n            i--;\n        }\n        else break;\n    }\n    for(let i=0;i<arr.length-1;i++){\n        if(arr[i]>arr[i+1]) return false;\n    }\n    return true;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//your code here\n  if(arr.length < 2) {\n    return true;\n  }\n  let seen = new Set();\n  for(let i = 0; i < arr.length; i++) {\n    seen.add(arr[i]);\n  }\n  let nums = Array.from(seen);\n  nums.sort((a, b) => a - b);\n  let left = 0;\n  let right = nums.length - 1;\n  while(left < right) {\n    if(nums[left] != arr[left]) {\n      return false;\n    }\n    if(nums[right] != arr[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(arr.length==0) return true;\n    var a = arr.slice(0);\n    var b = arr.slice(0);\n    var c = arr.slice(0);\n    var d = arr.slice(0);\n    var e = arr.slice(0);\n    var f = arr.slice(0);\n    a.unshift(a.pop());\n    b.unshift(b.pop());\n    b.unshift(b.pop());\n    c.unshift(c.pop());\n    c.unshift(c.pop());\n    c.unshift(c.pop());\n    d.unshift(d.pop());\n    d.unshift(d.pop());\n    d.unshift(d.pop());\n    d.unshift(d.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    var res = (a.join()==arr.sort().join())||(b.join()==arr.sort().join())||(c.join()==arr.sort().join())||(d.join()==arr.sort().join())||(e.join()==arr.sort().join())||(f.join()==arr.sort().join());\n    return res;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(arr.length===0){\n    return true;\n  }\n  arr.sort(function(a,b){return a-b;});\n  if(arr[0]===1){\n    return true;\n  }\n  return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(arr.length === 0) return true;\n    var res = [...arr].sort((a,b)=>a-b);\n    var count = 0;\n    var map = new Map();\n    arr.forEach(v=>{\n        if(!map.has(v))\n            map.set(v, 1);\n        else\n            map.set(v, map.get(v)+1);\n    });\n    for(var i=0; i<arr.length; i++){\n        var val = arr[i];\n        var expected_val = res[i];\n        if(val !== expected_val){\n            var c1 = map.get(val);\n            var c2 = map.get(expected_val);\n            var change = c1 - c2;\n            if(change < 0)\n                return false;\n            map.set(val, c1-c2);\n            map.set(expected_val, 0);\n            count += change;\n        }\n    }\n    return count < 2;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(arr.length === 0) return true;\n    let min = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] >= min) min = arr[i];\n        else return false;\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(arr.length == 0) return true;\n    if(arr.length == 1) return true;\n    arr = arr.sort((a,b)=>a-b);\n    let copy = [...arr];\n    copy.shift();\n    copy.push(arr[0]);\n    if(copy.every((element, index)=>element == arr[index])){\n        return true;\n    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] != copy[i]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(arr.length < 1) return true;\n    let shift = 0;\n    let index = 0;\n    while(arr[0] < arr[1]){\n        if(index === arr.length - 1) break;\n        shift++;\n        index++;\n    }\n    while(shift > 0){\n        let temp = arr.pop();\n        arr.unshift(temp);\n        shift--;\n    }\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]) return false;\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(arr.length===0){\n        return true;\n    }\n    let sorted=arr.sort((a,b)=>a-b);\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]!==sorted[i]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var flag=0;\n    if(arr.length==0){\n        return true;\n    }\n    while(arr.length>0){\n        var temp=arr.shift();\n        if(temp<arr[0]){\n            flag=1;\n            break;\n        }\n    }\n    if(flag==1){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return arr.join(\"\")===arr.sort((a,b)=>a-b).join(\"\")\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(arr.length==0) return true;\n    let arr2 = arr.map(x=>x);\n    let len = arr.length;\n    let n = 0;\n    while(n<len){\n        let temp = arr2.pop();\n        arr2.unshift(temp);\n        if(isIncrease(arr2)) return true;\n        n++;\n    }\n    return false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(arr.length === 0) return true;\n    let newArr = [];\n    while(arr.length > 0){\n        let num = arr.shift();\n        let i = 0;\n        while(i < newArr.length && newArr[i] < num){\n            i++;\n        }\n        newArr.splice(i, 0, num);\n    }\n    return arr.toString() === newArr.toString();\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "//your code here\n  // //Version 1\n  // let len = arr.length;\n  // for(let i = 0; i < len - 1; i++){\n  //   if(arr[i] > arr[i + 1]){\n  //     return false;\n  //   }\n  // }\n  // return true;\n  //Version 2\n  let len = arr.length;\n  for(let i = 0; i < len - 1; i++){\n    if(arr[i] > arr[i + 1]){\n      let cache = arr[i];\n      arr[i] = arr[i + 1];\n      arr[i + 1] = cache;\n    }\n  }\n  return true;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//Write your code here\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(arr.length == 0){\n\t\treturn true;\n\t}\n\tvar min = Math.min(...arr);\n\tvar minIndex = arr.indexOf(min);\n\tvar numShifts = 0;\n\twhile(minIndex != 0){\n\t\tnumShifts++;\n\t\tminIndex = (minIndex - 1 + arr.length) % arr.length;\n\t}\n\tfor(var i = 1; i < arr.length; i++){\n\t\tif(arr[i] < arr[i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//your code here\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "//YOUR CODE GOES HERE\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(arr.length===0){\n        return true;\n    }\n    else{\n        let shift = 0;\n        let min = arr[0];\n        let max = arr[0];\n        for(let i=0; i<arr.length; i++){\n            if(arr[i]<min){\n                min = arr[i];\n            }\n            if(arr[i]>max){\n                max = arr[i];\n            }\n        }\n        if(min===max){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let sorted=arr.sort((a,b)=>a-b)\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]!==sorted[i]) return false\n    }\n    return true\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.2951567045773267,
        "bleu-0": 0.24233016742538982,
        "bleu-8": 0.03544265607900819,
        "bleu-7": 0.12881322988572033,
        "bleu-16": 0.15593283727261528,
        "bleu-2": 0.18471314442761716,
        "bleu-11": 0.37175410803537035,
        "bleu-1": 0.3521246697066552,
        "bleu-10": 0.2563063327337183,
        "bleu-17": 0.2542521625045138,
        "bleu-12": 0.004968890263461541,
        "bleu-6": 0.15192257185036379,
        "bleu-18": 0.19069063194516897,
        "bleu-15": 0.277965542903011,
        "bleu-13": 2.043124609633486e-09,
        "bleu-9": 0.31115644175795276,
        "bleu-4": 1.198739775532231e-10,
        "bleu-14": 2.043124609633486e-09,
        "bleu-5": 0.37055922137005415,
        "bleu-19": 0.12021348867270917,
        "codebleu-3": 0.5307429721331406,
        "codebleu-0": 0.587932870991377,
        "codebleu-8": 0.4319548987663838,
        "codebleu-7": 0.22819007082261428,
        "codebleu-16": 0.5932432571874837,
        "codebleu-2": 0.30635088743356204,
        "codebleu-11": 0.6050844971778858,
        "codebleu-1": 0.6103170940631756,
        "codebleu-10": 0.36778739083609496,
        "codebleu-17": 0.38937715602582257,
        "codebleu-12": 0.10753414916257661,
        "codebleu-6": 0.3724250645737601,
        "codebleu-18": 0.40829835358709343,
        "codebleu-15": 0.5533660946153625,
        "codebleu-13": 0.021978022008167997,
        "codebleu-9": 0.5920782449489771,
        "codebleu-4": 0.0183150183164494,
        "codebleu-14": 0.021978022008167997,
        "codebleu-5": 0.5619194865894845,
        "codebleu-19": 0.2485626454478944,
        "chrf-3": 0.4278078999396324,
        "chrf-0": 0.4171439334625983,
        "chrf-8": 0.1916495066846013,
        "chrf-7": 0.33645669169967185,
        "chrf-16": 0.3344630593296409,
        "chrf-2": 0.39322737750489417,
        "chrf-11": 0.4969864602446545,
        "chrf-1": 0.4847583190292751,
        "chrf-10": 0.43180613177791616,
        "chrf-17": 0.4547738832131693,
        "chrf-12": 0.07782400878851203,
        "chrf-6": 0.39882868316440423,
        "chrf-18": 0.3331399135082029,
        "chrf-15": 0.45456085691030007,
        "chrf-13": 0.016041839527257896,
        "chrf-9": 0.41741663760155523,
        "chrf-4": 0.012341032585113381,
        "chrf-14": 0.0009437523593808983,
        "chrf-5": 0.47975596349921334,
        "chrf-19": 0.303523274380383,
        "rougel-3": 0.41767068273092367,
        "rougel-0": 0.4372759856630824,
        "rougel-8": 0.1867145421903052,
        "rougel-7": 0.43956043956043955,
        "rougel-16": 0.35502958579881655,
        "rougel-2": 0.45595854922279794,
        "rougel-11": 0.393939393939394,
        "rougel-1": 0.42352941176470593,
        "rougel-10": 0.4607843137254902,
        "rougel-17": 0.49504950495049505,
        "rougel-12": 0.1987577639751553,
        "rougel-6": 0.4326923076923077,
        "rougel-18": 0.4052863436123348,
        "rougel-15": 0.4357142857142857,
        "rougel-13": 0.014814814814814815,
        "rougel-9": 0.45161290322580644,
        "rougel-4": 0.014925373134328358,
        "rougel-14": 0.014814814814814815,
        "rougel-5": 0.5619834710743801,
        "rougel-19": 0.3586956521739131,
        "meteor-3": 0.37176310908862714,
        "meteor-0": 0.4176961120694282,
        "meteor-8": 0.21127586542761814,
        "meteor-7": 0.31722295892936075,
        "meteor-16": 0.3776693792568087,
        "meteor-2": 0.2925956358988405,
        "meteor-11": 0.42256058542427405,
        "meteor-1": 0.4492589906668416,
        "meteor-10": 0.3733066525485833,
        "meteor-17": 0.37378905453456357,
        "meteor-12": 0.08438818565400842,
        "meteor-6": 0.3233861341560884,
        "meteor-18": 0.35795795714713646,
        "meteor-15": 0.38786213867186714,
        "meteor-13": 0.004314063848144953,
        "meteor-9": 0.40796838893500553,
        "meteor-4": 0.004317789291882556,
        "meteor-14": 0.004314063848144953,
        "meteor-5": 0.4581966492097173,
        "meteor-19": 0.24597946581704827,
        "ruby-3": 0.2265625,
        "ruby-0": 0.2781456953642384,
        "ruby-8": 0.1165501165501166,
        "ruby-7": 0.28125,
        "ruby-16": 0.24285714285714288,
        "ruby-2": 0.3203125,
        "ruby-11": 0.2279411764705882,
        "ruby-1": 0.21875,
        "ruby-10": 0.3203125,
        "ruby-17": 0.3359375,
        "ruby-12": 0.125,
        "ruby-6": 0.2890625,
        "ruby-18": 0.2734375,
        "ruby-15": 0.23026315789473684,
        "ruby-13": 0.0078125,
        "ruby-9": 0.265625,
        "ruby-4": 0.0078125,
        "ruby-14": 0.0078125,
        "ruby-5": 0.3828125,
        "ruby-19": 0.234375,
        "codebertscore_f1-3": 0.8452341556549072,
        "codebertscore_f3-3": 0.8369179964065552,
        "codebertscore_f1-0": 0.7971304655075073,
        "codebertscore_f3-0": 0.8167973160743713,
        "codebertscore_f1-8": 0.6928050518035889,
        "codebertscore_f3-8": 0.7183420062065125,
        "codebertscore_f1-7": 0.7627760171890259,
        "codebertscore_f3-7": 0.7390122413635254,
        "codebertscore_f1-16": 0.735248863697052,
        "codebertscore_f3-16": 0.7717748284339905,
        "codebertscore_f1-2": 0.8351926207542419,
        "codebertscore_f3-2": 0.812603771686554,
        "codebertscore_f1-11": 0.8259990215301514,
        "codebertscore_f3-11": 0.8233582973480225,
        "codebertscore_f1-1": 0.8457257747650146,
        "codebertscore_f3-1": 0.8449207544326782,
        "codebertscore_f1-10": 0.8163648247718811,
        "codebertscore_f3-10": 0.8000648021697998,
        "codebertscore_f1-17": 0.8222382068634033,
        "codebertscore_f3-17": 0.8017832040786743,
        "codebertscore_f1-12": 0.6600698232650757,
        "codebertscore_f3-12": 0.6336841583251953,
        "codebertscore_f1-6": 0.8228753209114075,
        "codebertscore_f3-6": 0.8162870407104492,
        "codebertscore_f1-18": 0.797113835811615,
        "codebertscore_f3-18": 0.7939808964729309,
        "codebertscore_f1-15": 0.8176904916763306,
        "codebertscore_f3-15": 0.8293461799621582,
        "codebertscore_f1-13": 0.5542408227920532,
        "codebertscore_f3-13": 0.5340545773506165,
        "codebertscore_f1-9": 0.8094922304153442,
        "codebertscore_f3-9": 0.8154706954956055,
        "codebertscore_f1-4": 0.5450966358184814,
        "codebertscore_f3-4": 0.5327532887458801,
        "codebertscore_f1-14": 0.5361926555633545,
        "codebertscore_f3-14": 0.5199900269508362,
        "codebertscore_f1-5": 0.823488175868988,
        "codebertscore_f3-5": 0.8140627145767212,
        "codebertscore_f1-19": 0.782557487487793,
        "codebertscore_f3-19": 0.76697838306427,
        "codebertscore_s_f1-3": 0.9633716344833374,
        "codebertscore_s_f3-3": 0.962138295173645,
        "codebertscore_s_f1-0": 0.9501543641090393,
        "codebertscore_s_f3-0": 0.9581058025360107,
        "codebertscore_s_f1-8": 0.8970016241073608,
        "codebertscore_s_f3-8": 0.9335969686508179,
        "codebertscore_s_f1-7": 0.9607291221618652,
        "codebertscore_s_f3-7": 0.9460070133209229,
        "codebertscore_s_f1-16": 0.9291064143180847,
        "codebertscore_s_f3-16": 0.9460053443908691,
        "codebertscore_s_f1-2": 0.9701341986656189,
        "codebertscore_s_f3-2": 0.9602469801902771,
        "codebertscore_s_f1-11": 0.9597861766815186,
        "codebertscore_s_f3-11": 0.9575521945953369,
        "codebertscore_s_f1-1": 0.9605938792228699,
        "codebertscore_s_f3-1": 0.9611933827400208,
        "codebertscore_s_f1-10": 0.9680607914924622,
        "codebertscore_s_f3-10": 0.9606853723526001,
        "codebertscore_s_f1-17": 0.9670451283454895,
        "codebertscore_s_f3-17": 0.9567487239837646,
        "codebertscore_s_f1-12": 0.9548497796058655,
        "codebertscore_s_f3-12": 0.9343945980072021,
        "codebertscore_s_f1-6": 0.9647912979125977,
        "codebertscore_s_f3-6": 0.9603013396263123,
        "codebertscore_s_f1-18": 0.9584127068519592,
        "codebertscore_s_f3-18": 0.9569462537765503,
        "codebertscore_s_f1-15": 0.9539874196052551,
        "codebertscore_s_f3-15": 0.9611953496932983,
        "codebertscore_s_f1-13": 0.9548065662384033,
        "codebertscore_s_f3-13": 0.9305464029312134,
        "codebertscore_s_f1-9": 0.9536516666412354,
        "codebertscore_s_f3-9": 0.9550114274024963,
        "codebertscore_s_f1-4": 0.9553511142730713,
        "codebertscore_s_f3-4": 0.9305505752563477,
        "codebertscore_s_f1-14": 0.9531019926071167,
        "codebertscore_s_f3-14": 0.9302152991294861,
        "codebertscore_s_f1-5": 0.9598104953765869,
        "codebertscore_s_f3-5": 0.9555468559265137,
        "codebertscore_s_f1-19": 0.9638077020645142,
        "codebertscore_s_f3-19": 0.9539462327957153,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "Version 1: 4\nVersion 2: 3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "Version 1: 4\nVersion 2: 3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunction check_dict_case(dict){\n",
        "snippet": [
            "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n"
        ],
        "simplified": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
        "task_id": "95",
        "3": "return dict.every( (element, index, array) => {\n        return (typeof(element) === 'string' && element.toLowerCase() === element) ||\n        (typeof(element) === 'string' && element.toUpperCase() === element);\n    });\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if (Object.keys(dict).length == 0) return false;\n\tlet check = Object.keys(dict)[0];\n\tfor (let key in dict){\n\t\tif(check != key && check.toLowerCase() != key.toLowerCase()) return false;\n\t}\n\treturn true;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let caseCheck = true;\n  let lowerCheck = true;\n  let upperCheck = true;\n  //if the dictionary is empty\n  if(dict.length==0){\n    return false;\n  }\n  for(var key in dict){\n    if(key != key.toLowerCase()){\n      lowerCheck = false;\n    }\n    if(key != key.toUpperCase()){\n      upperCheck = false;\n    }\n  }\n  if(lowerCheck == false && upperCheck == false){\n    caseCheck = false;\n  }\n  return caseCheck;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let lower = 0;\n    let upper = 0;\n    let length = Object.keys(dict).length;\n    if(length == 0){\n        return false;\n    }\n    for(let key in dict){\n        if(key.toLowerCase() == key){\n            lower++;\n        }\n        else if(key.toUpperCase() == key){\n            upper++;\n        }\n    }\n    if(lower == length || upper == length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var keys = Object.keys(dict);\n    var lowercase = true;\n    var uppercase = true;\n    for(var i = 0; i < keys.length; i++){\n        if(keys[i] != keys[i].toLowerCase()){\n            lowercase = false;\n        }\n        if(keys[i] != keys[i].toUpperCase()){\n            uppercase = false;\n        }\n    }\n    return lowercase || uppercase;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let keys = Object.keys(dict);\n    if(!keys.length) return false;\n    let isUpperCase = !!keys[0].match(/[A-Z]/);\n    for(let i = 1; i < keys.length; i++){\n        if(isUpperCase !== !!keys[i].match(/[A-Z]/)){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(Object.keys(dict).length === 0){\n        return false;\n    }\n\n    let lowerCase = 0;\n    let upperCase = 0;\n\n    for(key in dict){\n        if(key === key.toLowerCase()){\n            lowerCase += 1;\n        }else if(key === key.toUpperCase()){\n            upperCase += 1;\n        }\n    }\n\n    if(lowerCase === Object.keys(dict).length || upperCase === Object.keys(dict).length){\n        return true;\n    }\n\n    return false;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var firstKey = Object.keys(dict)[0];\n    if(firstKey == firstKey.toLowerCase()){\n        for(var key in dict){\n            if(key.toLowerCase() != key){\n                return false;\n            }\n        }\n    }else{\n        for(var key in dict){\n            if(key.toUpperCase() != key){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return dict;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let keys = Object.keys(dict);\n    let lowercase = keys.filter(key => key.charCodeAt(0) > 96 && key.charCodeAt(0) < 123);\n    let uppercase = keys.filter(key => key.charCodeAt(0) > 64 && key.charCodeAt(0) < 91);\n    if (lowercase.length == keys.length || uppercase.length == keys.length){\n        return true;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "//write your code here\n    return true\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let flag = true;\n    let countUpper = 0;\n    let countLower = 0;\n    if(!Object.keys(dict).length) {\n        return false;\n    }\n    for(let key in dict) {\n        if(key.charCodeAt(0) > 64 && key.charCodeAt(0) < 91) {\n            countUpper++;\n        }\n        if(key.charCodeAt(0) > 96 && key.charCodeAt(0) < 123) {\n            countLower++;\n        }\n    }\n    if(countUpper == Object.keys(dict).length || countLower == Object.keys(dict).length) {\n        flag = true;\n    } else {\n        flag = false;\n    }\n    return flag;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return Object.keys(dict).every(key => key === key.toLowerCase()) || Object.keys(dict).every(key => key === key.toUpperCase());\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(!Object.keys(dict).length)\n        return false;\n    var allLower = false;\n    var allUpper = false;\n    Object.keys(dict).forEach(function(k){\n        if(k.toLowerCase() == k)\n            allLower = true;\n        if(k.toUpperCase() == k)\n            allUpper = true;\n    });\n    return allLower || allUpper;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return dict.size === 0 ? false :\n        dict.keys().next().value === dict.keys().next().value.toLowerCase()\n        ? dict.keys().next().value === dict.keys().next().value.toUpperCase()\n            ? false\n            : dict.keys().length === dict.keys().filter(key => key.toLowerCase() === key).length\n        : dict.keys().length === dict.keys().filter(key => key.toUpperCase() === key).length\n    ;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (Object.keys(dict).length == 0) {\n        return false;\n    }\n    var firstkey = Object.keys(dict)[0];\n    var firstvalue = dict[firstkey];\n    var isUp = firstkey.toUpperCase() == firstkey;\n    for (var key in dict) {\n        if (isUp) {\n            if (key.toUpperCase() != key) {\n                return false;\n            }\n        } else {\n            if (key.toLowerCase() != key) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var keys = Object.keys(dict);\n    var upper = \"A\";\n    var lower = \"a\";\n    var flag = false;\n    if(keys.length === 0){\n        flag = false;\n    }\n    else{\n        for(var i=0; i<keys.length; i++){\n            if(keys[i].charAt(0) === upper || keys[i].charAt(0) === lower){\n                flag = true;\n            }\n            else{\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(Object.keys(dict).length == 0){\n\t\treturn false;\n\t}\n\tvar result = Object.keys(dict).every(key => key == key.toLowerCase());\n\tif(result){\n\t\treturn true;\n\t}\n\tresult = Object.keys(dict).every(key => key == key.toUpperCase());\n\tif(result){\n\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "//YOUR CODE GOES HERE\n    if (Object.keys(dict).length == 0) {\n        return false;\n    }\n    var keys = Object.keys(dict);\n    var lower = /^[a-z]+$/;\n    var upper = /^[A-Z]+$/;\n    if (lower.test(keys[0])) {\n        for (var i = 0; i < keys.length; i++) {\n            if (!lower.test(keys[i])) {\n                return false;\n            }\n        }\n    } else if (upper.test(keys[0])) {\n        for (var i = 0; i < keys.length; i++) {\n            if (!upper.test(keys[i])) {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// your code here\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.021812373635159418,
        "bleu-0": 0.09312094984384336,
        "bleu-8": 0.1670313811100249,
        "bleu-7": 0.20019225023665296,
        "bleu-16": 0.1793368339669209,
        "bleu-2": 0.1608415536604378,
        "bleu-11": 0.17905712480472402,
        "bleu-1": 0.11454764342407797,
        "bleu-10": 4.971396814206776e-16,
        "bleu-17": 0.16333896751177035,
        "bleu-12": 9.46220495047505e-08,
        "bleu-6": 0.2685015320850306,
        "bleu-18": 0.0146705947986082,
        "bleu-15": 0.03896689651851417,
        "bleu-13": 0.03433780496729702,
        "bleu-9": 0.15664841321089035,
        "bleu-4": 0.22684335799661945,
        "bleu-14": 0.08608830424162361,
        "bleu-5": 0.17729630223710416,
        "bleu-19": 1.916542109277219e-11,
        "codebleu-3": 0.21679885757334544,
        "codebleu-0": 0.26654877175855485,
        "codebleu-8": 0.4187223049619616,
        "codebleu-7": 0.43195592916111863,
        "codebleu-16": 0.4101065072194771,
        "codebleu-2": 0.3502248774293216,
        "codebleu-11": 0.46990037120992084,
        "codebleu-1": 0.3368494703080618,
        "codebleu-10": 0.010152284263959407,
        "codebleu-17": 0.3920451208664191,
        "codebleu-12": 0.02030457216546201,
        "codebleu-6": 0.582826268844304,
        "codebleu-18": 0.17409276326819217,
        "codebleu-15": 0.2908625687486201,
        "codebleu-13": 0.3354607613223696,
        "codebleu-9": 0.43705837177192153,
        "codebleu-4": 0.4622541885510806,
        "codebleu-14": 0.3278250383178158,
        "codebleu-5": 0.522548661370169,
        "codebleu-19": 0.01353637901884266,
        "chrf-3": 0.1508916641379079,
        "chrf-0": 0.27720425912010194,
        "chrf-8": 0.29967043702594687,
        "chrf-7": 0.3413850914959472,
        "chrf-16": 0.27393744429753175,
        "chrf-2": 0.304403771835316,
        "chrf-11": 0.31370495054173436,
        "chrf-1": 0.2680095362390524,
        "chrf-10": 0.032930282955194304,
        "chrf-17": 0.39057295456725527,
        "chrf-12": 0.06377751857648373,
        "chrf-6": 0.43758704632729317,
        "chrf-18": 0.12446411366495802,
        "chrf-15": 0.2049323458272542,
        "chrf-13": 0.1857634990474546,
        "chrf-9": 0.2896782386838197,
        "chrf-4": 0.31332705043175196,
        "chrf-14": 0.24295225370869244,
        "chrf-5": 0.304419329731222,
        "chrf-19": 0.01675258736444564,
        "rougel-3": 0.25471698113207547,
        "rougel-0": 0.29523809523809524,
        "rougel-8": 0.40944881889763785,
        "rougel-7": 0.42276422764227645,
        "rougel-16": 0.45957446808510644,
        "rougel-2": 0.3474576271186441,
        "rougel-11": 0.3939393939393939,
        "rougel-1": 0.33766233766233766,
        "rougel-10": 0.04195804195804196,
        "rougel-17": 0.4453441295546559,
        "rougel-12": 0.04054054054054055,
        "rougel-6": 0.4794520547945206,
        "rougel-18": 0.2604166666666667,
        "rougel-15": 0.2620087336244542,
        "rougel-13": 0.26297577854671284,
        "rougel-9": 0.3241106719367589,
        "rougel-4": 0.4108527131782946,
        "rougel-14": 0.2918454935622318,
        "rougel-5": 0.3682539682539682,
        "rougel-19": 0.01379310344827586,
        "meteor-3": 0.2074854560435445,
        "meteor-0": 0.24812375233866563,
        "meteor-8": 0.3115849194729136,
        "meteor-7": 0.364100147275405,
        "meteor-16": 0.4214808057377281,
        "meteor-2": 0.33218338510756684,
        "meteor-11": 0.41751776007981284,
        "meteor-1": 0.3460991147513857,
        "meteor-10": 0.01593625498007968,
        "meteor-17": 0.41754296459815216,
        "meteor-12": 0.02976190476190476,
        "meteor-6": 0.5220373514834156,
        "meteor-18": 0.19099428048224645,
        "meteor-15": 0.22768680089485457,
        "meteor-13": 0.21588420570260466,
        "meteor-9": 0.3592890782686701,
        "meteor-4": 0.4263762315418688,
        "meteor-14": 0.3000678893191339,
        "meteor-5": 0.4482013548236393,
        "meteor-19": 0.007955449482895782,
        "ruby-3": 0.15107913669064743,
        "ruby-0": 0.18705035971223016,
        "ruby-8": 0.25899280575539574,
        "ruby-7": 0.28776978417266186,
        "ruby-16": 0.3597122302158273,
        "ruby-2": 0.17985611510791366,
        "ruby-11": 0.19424460431654678,
        "ruby-1": 0.2086330935251799,
        "ruby-10": 0.021582733812949617,
        "ruby-17": 0.3165467625899281,
        "ruby-12": 0.021582733812949617,
        "ruby-6": 0.30718954248366015,
        "ruby-18": 0.17985611510791366,
        "ruby-15": 0.16546762589928055,
        "ruby-13": 0.1333333333333333,
        "ruby-9": 0.20143884892086328,
        "ruby-4": 0.2517985611510791,
        "ruby-14": 0.18705035971223016,
        "ruby-5": 0.15909090909090906,
        "ruby-19": 0.007194244604316502,
        "codebertscore_f1-3": 0.7032516598701477,
        "codebertscore_f3-3": 0.6873865127563477,
        "codebertscore_f1-0": 0.7750466465950012,
        "codebertscore_f3-0": 0.7507212162017822,
        "codebertscore_f1-8": 0.7890745401382446,
        "codebertscore_f3-8": 0.7868542075157166,
        "codebertscore_f1-7": 0.8091058731079102,
        "codebertscore_f3-7": 0.7971283793449402,
        "codebertscore_f1-16": 0.7883809804916382,
        "codebertscore_f3-16": 0.7830774188041687,
        "codebertscore_f1-2": 0.7673044204711914,
        "codebertscore_f3-2": 0.7610706686973572,
        "codebertscore_f1-11": 0.7904400825500488,
        "codebertscore_f3-11": 0.7879086136817932,
        "codebertscore_f1-1": 0.7658511400222778,
        "codebertscore_f3-1": 0.7429345846176147,
        "codebertscore_f1-10": 0.6527543663978577,
        "codebertscore_f3-10": 0.5809750556945801,
        "codebertscore_f1-17": 0.8162366151809692,
        "codebertscore_f3-17": 0.8060087561607361,
        "codebertscore_f1-12": 0.6188319325447083,
        "codebertscore_f3-12": 0.5873184204101562,
        "codebertscore_f1-6": 0.818483829498291,
        "codebertscore_f3-6": 0.8301247954368591,
        "codebertscore_f1-18": 0.700226366519928,
        "codebertscore_f3-18": 0.6731736660003662,
        "codebertscore_f1-15": 0.7463420629501343,
        "codebertscore_f3-15": 0.7446349263191223,
        "codebertscore_f1-13": 0.7243797183036804,
        "codebertscore_f3-13": 0.7045227289199829,
        "codebertscore_f1-9": 0.7486482858657837,
        "codebertscore_f3-9": 0.7336789965629578,
        "codebertscore_f1-4": 0.7871527075767517,
        "codebertscore_f3-4": 0.7909414768218994,
        "codebertscore_f1-14": 0.739470899105072,
        "codebertscore_f3-14": 0.7165831923484802,
        "codebertscore_f1-5": 0.7295695543289185,
        "codebertscore_f3-5": 0.7304947376251221,
        "codebertscore_f1-19": 0.5707716941833496,
        "codebertscore_f3-19": 0.5466293096542358,
        "codebertscore_s_f1-3": 0.7020416855812073,
        "codebertscore_s_f3-3": 0.6899157762527466,
        "codebertscore_s_f1-0": 0.7828537821769714,
        "codebertscore_s_f3-0": 0.7568544149398804,
        "codebertscore_s_f1-8": 0.7862051725387573,
        "codebertscore_s_f3-8": 0.784129798412323,
        "codebertscore_s_f1-7": 0.8129677176475525,
        "codebertscore_s_f3-7": 0.8009417653083801,
        "codebertscore_s_f1-16": 0.7882604002952576,
        "codebertscore_s_f3-16": 0.7841753363609314,
        "codebertscore_s_f1-2": 0.7688707709312439,
        "codebertscore_s_f3-2": 0.762347400188446,
        "codebertscore_s_f1-11": 0.7918199896812439,
        "codebertscore_s_f3-11": 0.7898904085159302,
        "codebertscore_s_f1-1": 0.7652174830436707,
        "codebertscore_s_f3-1": 0.7392786741256714,
        "codebertscore_s_f1-10": 0.6498075723648071,
        "codebertscore_s_f3-10": 0.5670344233512878,
        "codebertscore_s_f1-17": 0.8115806579589844,
        "codebertscore_s_f3-17": 0.802564263343811,
        "codebertscore_s_f1-12": 0.5972899794578552,
        "codebertscore_s_f3-12": 0.569007933139801,
        "codebertscore_s_f1-6": 0.8193345069885254,
        "codebertscore_s_f3-6": 0.8308284282684326,
        "codebertscore_s_f1-18": 0.6974372267723083,
        "codebertscore_s_f3-18": 0.6664764285087585,
        "codebertscore_s_f1-15": 0.7397570013999939,
        "codebertscore_s_f3-15": 0.73719722032547,
        "codebertscore_s_f1-13": 0.7191742658615112,
        "codebertscore_s_f3-13": 0.6952309012413025,
        "codebertscore_s_f1-9": 0.7578432559967041,
        "codebertscore_s_f3-9": 0.7415552139282227,
        "codebertscore_s_f1-4": 0.7910126447677612,
        "codebertscore_s_f3-4": 0.7933217883110046,
        "codebertscore_s_f1-14": 0.741085410118103,
        "codebertscore_s_f3-14": 0.7167472839355469,
        "codebertscore_s_f1-5": 0.7372637987136841,
        "codebertscore_s_f3-5": 0.7374547123908997,
        "codebertscore_s_f1-19": 0.5453190207481384,
        "codebertscore_s_f3-19": 0.5250517129898071,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 2,
        "raw_gpt35_nsnr-10": "2",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 0,
        "raw_gpt35_nsnr-19": "0",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 0,
        "raw_gpt35_nswr-10": "0",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes(string){\n",
        "snippet": [
            "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n"
        ],
        "simplified": "Return list of all prefixes from shortest to longest of the input string",
        "task_id": "14",
        "3": "//First, create a list to store the results\n    var prefixes = [];\n    //Then, loop through the input string\n    for (var i = 0; i < string.length; i++){\n        //Add to the prefixes list each character and each pair of characters\n        prefixes.push(string.slice(0, i + 1));\n    }\n    //Finally, return the list of all prefixes\n    return prefixes;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var list = [];\n  for (var i = 1; i <= string.length; i++){\n    list.push(string.slice(0, i));\n  }\n  return list;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "// return a list of all prefixes of the input string shortest to longest\n    var list_prefixes = [];\n    for (var x = 0; x < string.length; x++){\n        list_prefixes.push(string.slice(0,x+1));\n    }\n    return list_prefixes;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return _.range(1, string.length + 1).map(function(num){\n        return string.slice(0, num);\n    });\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = [];\n    for (var i = 0; i < string.length; i++){\n        result.push(string.slice(0, i+1));\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var prefixes = [];\n  for (var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0,i+1));\n  }\n  return prefixes;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var myPrefixes = []\n  var j = 1\n  for (var i = 0; i < string.length; i++){\n    myPrefixes.push(string.slice(0, j))\n    j++\n  }\n  return myPrefixes\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var outList = [];\n    for (var i = 1; i <= string.length; i++){\n        outList.push(string.slice(0,i));\n    }\n    return outList;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var prefixes = [];\n    for (var i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let prefixes = [];\n    for (let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i+1));\n    }\n    return prefixes;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var result = [];\n  for (var i = 1; i < string.length+1; i++){\n    result.push(string.slice(0,i));\n  }\n  return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let prefixes = [];\n  for (let i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i+1));\n  }\n  return prefixes;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return string.split('').map(function(item,i,array){\n        return array.slice(0, i+1).join('');\n    });\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var list = [];\n    for (var i = 1; i <= string.length; i++){\n        list.push(string.slice(0, i));\n    }\n    return list;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var results = [];\n    for (var i = 0; i < string.length; i++) {\n        results.push(string.slice(0, i + 1));\n    }\n    return results;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n    for (var i = 0; i < string.length; i++) {\n      result.push(string.slice(0, i + 1));\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var prefixes = [];\n\tfor (var i = 1; i <= string.length; i++){\n\t\tprefixes.push(string.slice(0, i));\n\t}\n\treturn prefixes;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var all_pref = [];\n    for (var i = 0; i < string.length; i++){\n        all_pref.push(string.slice(0,i+1));\n    }\n    return all_pref;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var result = [];\n    for (i = 0; i < string.length; i++){\n        result.push(string.slice(0, i+1));\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var prefixes = [];\n\tfor (var i = 0; i < string.length; i++){\n\t\tprefixes.push(string.slice(0, i+1));\n\t}\n\treturn prefixes;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.3659619510196792,
        "bleu-0": 0.6069985474202483,
        "bleu-8": 0.4238469560718514,
        "bleu-7": 0.19979552797439648,
        "bleu-16": 0.941435681721808,
        "bleu-2": 0.7867067009166735,
        "bleu-11": 0.5112555400132276,
        "bleu-1": 0.5799844245260677,
        "bleu-10": 0.6069985474202483,
        "bleu-17": 0.8422511746243515,
        "bleu-12": 0.7811837045489237,
        "bleu-6": 0.8422511746243515,
        "bleu-18": 0.2517199493191187,
        "bleu-15": 0.6069985474202483,
        "bleu-13": 0.7867067009166735,
        "bleu-9": 0.941435681721808,
        "bleu-4": 0.6069985474202483,
        "bleu-14": 0.7867067009166735,
        "bleu-5": 0.9419492177147059,
        "bleu-19": 0.7867067009166735,
        "codebleu-3": 0.7921961366784418,
        "codebleu-0": 0.7630569233333321,
        "codebleu-8": 0.8688670112180205,
        "codebleu-7": 0.4453626369572079,
        "codebleu-16": 0.9870946261989176,
        "codebleu-2": 0.951872500467244,
        "codebleu-11": 0.7341813771982996,
        "codebleu-1": 0.7618757482160925,
        "codebleu-10": 0.7630569233333321,
        "codebleu-17": 0.9611299127518573,
        "codebleu-12": 0.8278880754178741,
        "codebleu-6": 0.9611299127518573,
        "codebleu-18": 0.45931428276151165,
        "codebleu-15": 0.7630569233333321,
        "codebleu-13": 0.951872500467244,
        "codebleu-9": 0.9870946261989176,
        "codebleu-4": 0.7630569233333321,
        "codebleu-14": 0.951872500467244,
        "codebleu-5": 0.933754476168701,
        "codebleu-19": 0.951872500467244,
        "chrf-3": 0.5073595732381523,
        "chrf-0": 0.624158797372505,
        "chrf-8": 0.5170125949426355,
        "chrf-7": 0.3811563109632283,
        "chrf-16": 0.9388485294500392,
        "chrf-2": 0.6924804887447419,
        "chrf-11": 0.5631775903880868,
        "chrf-1": 0.6136269922779483,
        "chrf-10": 0.5966741684642356,
        "chrf-17": 0.7439037988107651,
        "chrf-12": 0.8383908966888386,
        "chrf-6": 0.7439037988107651,
        "chrf-18": 0.3078643721530501,
        "chrf-15": 0.624158797372505,
        "chrf-13": 0.860457610494802,
        "chrf-9": 0.9388485294500392,
        "chrf-4": 0.5966741684642356,
        "chrf-14": 0.6871156811961463,
        "chrf-5": 0.9451142647196181,
        "chrf-19": 0.6924804887447419,
        "rougel-3": 0.6119402985074627,
        "rougel-0": 0.853932584269663,
        "rougel-8": 0.7047619047619048,
        "rougel-7": 0.47500000000000003,
        "rougel-16": 0.9777777777777777,
        "rougel-2": 0.9111111111111111,
        "rougel-11": 0.7368421052631577,
        "rougel-1": 0.8260869565217391,
        "rougel-10": 0.853932584269663,
        "rougel-17": 0.9111111111111111,
        "rougel-12": 0.9111111111111111,
        "rougel-6": 0.9111111111111111,
        "rougel-18": 0.4367816091954023,
        "rougel-15": 0.853932584269663,
        "rougel-13": 0.9111111111111111,
        "rougel-9": 0.9777777777777777,
        "rougel-4": 0.853932584269663,
        "rougel-14": 0.9111111111111111,
        "rougel-5": 0.9887640449438202,
        "rougel-19": 0.9111111111111111,
        "meteor-3": 0.8444646414571227,
        "meteor-0": 0.8485069458172079,
        "meteor-8": 0.7916774664813025,
        "meteor-7": 0.5021109532828283,
        "meteor-16": 0.9776228191000919,
        "meteor-2": 0.9102848833366383,
        "meteor-11": 0.7489705327543166,
        "meteor-1": 0.8428752625485096,
        "meteor-10": 0.8485069458172079,
        "meteor-17": 0.910932645911825,
        "meteor-12": 0.9475572381467461,
        "meteor-6": 0.910932645911825,
        "meteor-18": 0.4106562125998571,
        "meteor-15": 0.8485069458172079,
        "meteor-13": 0.9776228191000919,
        "meteor-9": 0.9776228191000919,
        "meteor-4": 0.8485069458172079,
        "meteor-14": 0.9102848833366383,
        "meteor-5": 0.9799094406302343,
        "meteor-19": 0.9102848833366383,
        "ruby-3": 0.4606741573033708,
        "ruby-0": 0.8222222222222222,
        "ruby-8": 0.6166666666666667,
        "ruby-7": 0.33333333333333337,
        "ruby-16": 0.9777777777777777,
        "ruby-2": 0.9111111111111111,
        "ruby-11": 0.6599999999999999,
        "ruby-1": 0.7659574468085106,
        "ruby-10": 0.8222222222222222,
        "ruby-17": 0.9111111111111111,
        "ruby-12": 0.8666666666666667,
        "ruby-6": 0.9111111111111111,
        "ruby-18": 0.28888888888888886,
        "ruby-15": 0.8222222222222222,
        "ruby-13": 0.9111111111111111,
        "ruby-9": 0.9777777777777777,
        "ruby-4": 0.8222222222222222,
        "ruby-14": 0.9111111111111111,
        "ruby-5": 0.9777777777777777,
        "ruby-19": 0.9111111111111111,
        "codebertscore_f1-3": 0.8038028478622437,
        "codebertscore_f3-3": 0.877479076385498,
        "codebertscore_f1-0": 0.9265145659446716,
        "codebertscore_f3-0": 0.9169428944587708,
        "codebertscore_f1-8": 0.8400508761405945,
        "codebertscore_f3-8": 0.8846262097358704,
        "codebertscore_f1-7": 0.8069350719451904,
        "codebertscore_f3-7": 0.7929819822311401,
        "codebertscore_f1-16": 0.9823927283287048,
        "codebertscore_f3-16": 0.9823927283287048,
        "codebertscore_f1-2": 0.9399389028549194,
        "codebertscore_f3-2": 0.9494391679763794,
        "codebertscore_f1-11": 0.8792309165000916,
        "codebertscore_f3-11": 0.9007583260536194,
        "codebertscore_f1-1": 0.9100519418716431,
        "codebertscore_f3-1": 0.9100469946861267,
        "codebertscore_f1-10": 0.904321551322937,
        "codebertscore_f3-10": 0.9045010209083557,
        "codebertscore_f1-17": 0.9417975544929504,
        "codebertscore_f3-17": 0.9516193270683289,
        "codebertscore_f1-12": 0.9578741788864136,
        "codebertscore_f3-12": 0.9575439691543579,
        "codebertscore_f1-6": 0.9445074796676636,
        "codebertscore_f3-6": 0.954204261302948,
        "codebertscore_f1-18": 0.8242030143737793,
        "codebertscore_f3-18": 0.8211154937744141,
        "codebertscore_f1-15": 0.9233486652374268,
        "codebertscore_f3-15": 0.9141420125961304,
        "codebertscore_f1-13": 0.9722042679786682,
        "codebertscore_f3-13": 0.9722042679786682,
        "codebertscore_f1-9": 0.9812002182006836,
        "codebertscore_f3-9": 0.9812002182006836,
        "codebertscore_f1-4": 0.9057371020317078,
        "codebertscore_f3-4": 0.9055313467979431,
        "codebertscore_f1-14": 0.9148364663124084,
        "codebertscore_f3-14": 0.9363835453987122,
        "codebertscore_f1-5": 0.9798924922943115,
        "codebertscore_f3-5": 0.9743118286132812,
        "codebertscore_f1-19": 0.9411933422088623,
        "codebertscore_f3-19": 0.9510330557823181,
        "codebertscore_s_f1-3": 0.8047327995300293,
        "codebertscore_s_f3-3": 0.8814651370048523,
        "codebertscore_s_f1-0": 0.9287837743759155,
        "codebertscore_s_f3-0": 0.9173405766487122,
        "codebertscore_s_f1-8": 0.8495609164237976,
        "codebertscore_s_f3-8": 0.8948465585708618,
        "codebertscore_s_f1-7": 0.8154956102371216,
        "codebertscore_s_f3-7": 0.7987881898880005,
        "codebertscore_s_f1-16": 0.984269380569458,
        "codebertscore_s_f3-16": 0.9822119474411011,
        "codebertscore_s_f1-2": 0.9426612257957458,
        "codebertscore_s_f3-2": 0.9507781863212585,
        "codebertscore_s_f1-11": 0.881344735622406,
        "codebertscore_s_f3-11": 0.9033675193786621,
        "codebertscore_s_f1-1": 0.9120535254478455,
        "codebertscore_s_f3-1": 0.9115654230117798,
        "codebertscore_s_f1-10": 0.9092717170715332,
        "codebertscore_s_f3-10": 0.9079343676567078,
        "codebertscore_s_f1-17": 0.9410675764083862,
        "codebertscore_s_f3-17": 0.9493501782417297,
        "codebertscore_s_f1-12": 0.9620636701583862,
        "codebertscore_s_f3-12": 0.959551215171814,
        "codebertscore_s_f1-6": 0.9448526501655579,
        "codebertscore_s_f3-6": 0.9534335136413574,
        "codebertscore_s_f1-18": 0.8312225937843323,
        "codebertscore_s_f3-18": 0.8258311748504639,
        "codebertscore_s_f1-15": 0.9254098534584045,
        "codebertscore_s_f3-15": 0.9142292141914368,
        "codebertscore_s_f1-13": 0.974014937877655,
        "codebertscore_s_f3-13": 0.9719071984291077,
        "codebertscore_s_f1-9": 0.9838428497314453,
        "codebertscore_s_f3-9": 0.9817500710487366,
        "codebertscore_s_f1-4": 0.9104151129722595,
        "codebertscore_s_f3-4": 0.9090281128883362,
        "codebertscore_s_f1-14": 0.9136137366294861,
        "codebertscore_s_f3-14": 0.9360132813453674,
        "codebertscore_s_f1-5": 0.9813759922981262,
        "codebertscore_s_f3-5": 0.9769466519355774,
        "codebertscore_s_f1-19": 0.943488597869873,
        "codebertscore_s_f3-19": 0.9521438479423523,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n",
        "snippet": [
            "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n"
        ],
        "simplified": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "task_id": "21",
        "3": "let min = null, max = null;\n    numbers.forEach(num => {\n        if (min === null || num < min) min = num;\n        if (max === null || num > max) max = num;\n    });\n    let div = max - min;\n    return numbers.map(num => (num - min) / div);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "// TODO: implement this function\n    var i;\n    var length = numbers.length;\n    var min = numbers[0];\n    var max = numbers[0];\n    var step_size;\n    var result = [];\n    for (i = 0; i < length; i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    if (min == max){\n        return numbers;\n    }\n    step_size = 1.0 / (max - min);\n    for (i = 0; i < length; i++){\n        result.push((numbers[i] - min) * step_size);\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "const min = Math.min(...numbers);\n\tconst max = Math.max(...numbers);\n\tconst range = max - min;\n\treturn numbers.map(n => (n - min) / range);\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var min = numbers[0];\n    var max = numbers[0];\n    for (var i=1; i<numbers.length; i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    var diff = max - min;\n    var transformed = [];\n    for (var i=0; i<numbers.length; i++){\n        transformed.push((numbers[i] - min) / diff);\n    }\n    return transformed;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "//we want the smallest number in the list to become 0 and the largest to become 1\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let scale = max - min;\n  return numbers.map(x => (x - min) / scale);\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var tmp = [];\n    for (var i = 0; i < numbers.length; i++){\n        tmp.push((numbers[i] - min) / (max - min));\n    }\n    return tmp;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let n = numbers.length;\n    if(n<2){\n        throw new Error(\"need at least two values\");\n    }\n    let x_min = Math.min(...numbers);\n    let x_max = Math.max(...numbers);\n    let result = numbers.map(x => (x-x_min)/(x_max-x_min));\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var max = Math.max.apply(null, numbers);\n  var min = Math.min.apply(null, numbers);\n  return numbers.map(function(number){\n    return (number - min) / (max - min);\n  });\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var c = d3.scale.linear()\n        .domain([d3.min(numbers), d3.max(numbers)])\n        .range([0, 1]);\n    var output = [];\n    for (var x = 0; x < numbers.length; x++){\n        output.push(c(numbers[x]));\n    }\n    return output;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let min = Math.min(...numbers);\n\tlet max = Math.max(...numbers);\n\tlet scale = 1/(max-min);\n\tlet scaled_numbers = numbers.map(function(value){\n\t\treturn scale*(value-min);\n\t});\n\treturn scaled_numbers;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return numbers.map(function(n){return n/max(numbers)});\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const difference = max - min;\n  const result = numbers.map(val => (val - min) / difference);\n  return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var min = numbers[0], max = numbers[0];\n    numbers.forEach(function(number){\n        if(number < min) min = number;\n        if(number > max) max = number;\n    });\n    return numbers.map(function(number){\n        return (number - min) / (max - min);\n    });\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var delta = max - min;\n    var rescaled = [];\n    for (var i = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i] - min) / delta);\n    }\n    return rescaled;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let min = numbers[0];\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    return numbers.map(function(n){\n        return (n - min) / (max - min);\n    });\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var min = Math.min.apply(null, numbers);\n  var max = Math.max.apply(null, numbers);\n  var dif = max - min;\n  return numbers.map(function(v) { return ((v - min) / dif); });\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var max = _.max(numbers);\n    var min = _.min(numbers);\n    return _.map(numbers, function(n){\n        return (n - min) / (max - min);\n    });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let res = [];\n  let sorted = numbers.sort();\n  let largest = sorted[sorted.length - 1];\n  let smallest = sorted[0];\n  for (let i = 0; i < numbers.length; i++){\n    res.push((numbers[i] - smallest) / (largest - smallest));\n  }\n  return res;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(numbers.length < 2){\n        throw 'List of numbers must contain at least two elements';\n    }\n    var minValue = Math.min.apply(null, numbers);\n    var maxValue = Math.max.apply(null, numbers);\n    var diff = maxValue - minValue;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i] - minValue) / diff);\n    }\n    return rescaled;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var min = math.min(numbers);\n  var max = math.max(numbers);\n  var range = max - min;\n  return numbers.map(function(num){\n    return (num - min) / range;\n  });\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.11090220869253403,
        "bleu-0": 0.021332724952622374,
        "bleu-8": 0.538986119438712,
        "bleu-7": 0.02461583698131984,
        "bleu-16": 0.45718047141999785,
        "bleu-2": 0.1656927584859814,
        "bleu-11": 0.3968268713693488,
        "bleu-1": 0.3128384316903283,
        "bleu-10": 0.08688027267478841,
        "bleu-17": 0.392011085448302,
        "bleu-12": 0.07904426028060317,
        "bleu-6": 0.4619157222053945,
        "bleu-18": 0.13450580179321353,
        "bleu-15": 0.1359332338390616,
        "bleu-13": 0.07470381463652825,
        "bleu-9": 0.2546951187287069,
        "bleu-4": 0.20469879855080464,
        "bleu-14": 0.06437678523243191,
        "bleu-5": 0.1008789101876595,
        "bleu-19": 0.25048886668987064,
        "codebleu-3": 0.5872158951809493,
        "codebleu-0": 0.5598290598290598,
        "codebleu-8": 0.7953153503907824,
        "codebleu-7": 0.5505698005698005,
        "codebleu-16": 0.7880913321312532,
        "codebleu-2": 0.6002650323972362,
        "codebleu-11": 0.7659241366812163,
        "codebleu-1": 0.6401027015780176,
        "codebleu-10": 0.5376281935939462,
        "codebleu-17": 0.7925431581160275,
        "codebleu-12": 0.21519451025106043,
        "codebleu-6": 0.7824702841852295,
        "codebleu-18": 0.5883008245153931,
        "codebleu-15": 0.5860458523634903,
        "codebleu-13": 0.5751286984508174,
        "codebleu-9": 0.642876536882135,
        "codebleu-4": 0.6092589165675841,
        "codebleu-14": 0.5577380112139522,
        "codebleu-5": 0.5648900747748662,
        "codebleu-19": 0.6200957227958901,
        "chrf-3": 0.3161237117840181,
        "chrf-0": 0.3547991347796918,
        "chrf-8": 0.5274841106274197,
        "chrf-7": 0.3608787992365722,
        "chrf-16": 0.5561286087067252,
        "chrf-2": 0.45144121815230387,
        "chrf-11": 0.5312942519648259,
        "chrf-1": 0.5714221008864178,
        "chrf-10": 0.3056362333588759,
        "chrf-17": 0.548356682678652,
        "chrf-12": 0.23140973156674977,
        "chrf-6": 0.5022276742943734,
        "chrf-18": 0.4710331629770306,
        "chrf-15": 0.41831933511849845,
        "chrf-13": 0.4075726861626163,
        "chrf-9": 0.4739731083574992,
        "chrf-4": 0.4199288751851259,
        "chrf-14": 0.2113412828834527,
        "chrf-5": 0.4041648332549712,
        "chrf-19": 0.4816826905355227,
        "rougel-3": 0.359375,
        "rougel-0": 0.2376237623762376,
        "rougel-8": 0.7272727272727272,
        "rougel-7": 0.26900584795321636,
        "rougel-16": 0.6440677966101694,
        "rougel-2": 0.49599999999999994,
        "rougel-11": 0.6201550387596899,
        "rougel-1": 0.6019417475728155,
        "rougel-10": 0.37209302325581395,
        "rougel-17": 0.6017699115044248,
        "rougel-12": 0.37681159420289856,
        "rougel-6": 0.6730769230769231,
        "rougel-18": 0.39024390243902435,
        "rougel-15": 0.4375,
        "rougel-13": 0.3424657534246575,
        "rougel-9": 0.5740740740740741,
        "rougel-4": 0.577319587628866,
        "rougel-14": 0.34920634920634913,
        "rougel-5": 0.358974358974359,
        "rougel-19": 0.5918367346938774,
        "meteor-3": 0.44276252229488705,
        "meteor-0": 0.306399395757137,
        "meteor-8": 0.6855285703699334,
        "meteor-7": 0.3144795185810811,
        "meteor-16": 0.6972177038067324,
        "meteor-2": 0.48146480632564453,
        "meteor-11": 0.7915030155864247,
        "meteor-1": 0.5347022587268994,
        "meteor-10": 0.39633210009149855,
        "meteor-17": 0.6557279967896018,
        "meteor-12": 0.26583272013735587,
        "meteor-6": 0.6547348190015447,
        "meteor-18": 0.4695757829512733,
        "meteor-15": 0.38005310812114207,
        "meteor-13": 0.4211320754716981,
        "meteor-9": 0.5404606418749373,
        "meteor-4": 0.4754770779744766,
        "meteor-14": 0.3761504601840736,
        "meteor-5": 0.36962638313989665,
        "meteor-19": 0.5651821993137015,
        "ruby-3": 0.23750000000000004,
        "ruby-0": 0.1558441558441559,
        "ruby-8": 0.6274509803921569,
        "ruby-7": 0.16260162601626016,
        "ruby-16": 0.48571428571428577,
        "ruby-2": 0.36363636363636365,
        "ruby-11": 0.49382716049382713,
        "ruby-1": 0.5272727272727273,
        "ruby-10": 0.2716049382716049,
        "ruby-17": 0.49230769230769234,
        "ruby-12": 0.20833333333333337,
        "ruby-6": 0.5892857142857143,
        "ruby-18": 0.30666666666666664,
        "ruby-15": 0.3125,
        "ruby-13": 0.24489795918367352,
        "ruby-9": 0.44999999999999996,
        "ruby-4": 0.44897959183673475,
        "ruby-14": 0.2564102564102564,
        "ruby-5": 0.2314814814814815,
        "ruby-19": 0.42000000000000004,
        "codebertscore_f1-3": 0.8182406425476074,
        "codebertscore_f3-3": 0.840388298034668,
        "codebertscore_f1-0": 0.7200518846511841,
        "codebertscore_f3-0": 0.7627106308937073,
        "codebertscore_f1-8": 0.9205623269081116,
        "codebertscore_f3-8": 0.9166259765625,
        "codebertscore_f1-7": 0.78239506483078,
        "codebertscore_f3-7": 0.8120413422584534,
        "codebertscore_f1-16": 0.8631094694137573,
        "codebertscore_f3-16": 0.9058159589767456,
        "codebertscore_f1-2": 0.8531562685966492,
        "codebertscore_f3-2": 0.8800590634346008,
        "codebertscore_f1-11": 0.8464714288711548,
        "codebertscore_f3-11": 0.8808624148368835,
        "codebertscore_f1-1": 0.8951049447059631,
        "codebertscore_f3-1": 0.9103848338127136,
        "codebertscore_f1-10": 0.7795343995094299,
        "codebertscore_f3-10": 0.7973164319992065,
        "codebertscore_f1-17": 0.8772882223129272,
        "codebertscore_f3-17": 0.8902393579483032,
        "codebertscore_f1-12": 0.8123114109039307,
        "codebertscore_f3-12": 0.7815059423446655,
        "codebertscore_f1-6": 0.9083617925643921,
        "codebertscore_f3-6": 0.9107406735420227,
        "codebertscore_f1-18": 0.8589594960212708,
        "codebertscore_f3-18": 0.8736416697502136,
        "codebertscore_f1-15": 0.8312429785728455,
        "codebertscore_f3-15": 0.8629247546195984,
        "codebertscore_f1-13": 0.8151888251304626,
        "codebertscore_f3-13": 0.8355305790901184,
        "codebertscore_f1-9": 0.8745831847190857,
        "codebertscore_f3-9": 0.8940595388412476,
        "codebertscore_f1-4": 0.9028202295303345,
        "codebertscore_f3-4": 0.8913982510566711,
        "codebertscore_f1-14": 0.7864847183227539,
        "codebertscore_f3-14": 0.8057337403297424,
        "codebertscore_f1-5": 0.7962262630462646,
        "codebertscore_f3-5": 0.8423925042152405,
        "codebertscore_f1-19": 0.9100142121315002,
        "codebertscore_f3-19": 0.9110593199729919,
        "codebertscore_s_f1-3": 0.8127445578575134,
        "codebertscore_s_f3-3": 0.8328502774238586,
        "codebertscore_s_f1-0": 0.7367644309997559,
        "codebertscore_s_f3-0": 0.780113160610199,
        "codebertscore_s_f1-8": 0.9186665415763855,
        "codebertscore_s_f3-8": 0.9153518676757812,
        "codebertscore_s_f1-7": 0.7834347486495972,
        "codebertscore_s_f3-7": 0.8149429559707642,
        "codebertscore_s_f1-16": 0.8671320676803589,
        "codebertscore_s_f3-16": 0.9080157279968262,
        "codebertscore_s_f1-2": 0.8538694977760315,
        "codebertscore_s_f3-2": 0.8812242150306702,
        "codebertscore_s_f1-11": 0.8463595509529114,
        "codebertscore_s_f3-11": 0.878840982913971,
        "codebertscore_s_f1-1": 0.9005510807037354,
        "codebertscore_s_f3-1": 0.9146402478218079,
        "codebertscore_s_f1-10": 0.7815320491790771,
        "codebertscore_s_f3-10": 0.8025878071784973,
        "codebertscore_s_f1-17": 0.8761283755302429,
        "codebertscore_s_f3-17": 0.8886237144470215,
        "codebertscore_s_f1-12": 0.8095955848693848,
        "codebertscore_s_f3-12": 0.7748000025749207,
        "codebertscore_s_f1-6": 0.9063704013824463,
        "codebertscore_s_f3-6": 0.9096503853797913,
        "codebertscore_s_f1-18": 0.8578320741653442,
        "codebertscore_s_f3-18": 0.8715669512748718,
        "codebertscore_s_f1-15": 0.8326632380485535,
        "codebertscore_s_f3-15": 0.865341305732727,
        "codebertscore_s_f1-13": 0.8233175873756409,
        "codebertscore_s_f3-13": 0.845209538936615,
        "codebertscore_s_f1-9": 0.8788644075393677,
        "codebertscore_s_f3-9": 0.8985705375671387,
        "codebertscore_s_f1-4": 0.9166199564933777,
        "codebertscore_s_f3-4": 0.9052966237068176,
        "codebertscore_s_f1-14": 0.7887560725212097,
        "codebertscore_s_f3-14": 0.8092442750930786,
        "codebertscore_s_f1-5": 0.8007849454879761,
        "codebertscore_s_f3-5": 0.847689151763916,
        "codebertscore_s_f1-19": 0.9132367372512817,
        "codebertscore_s_f3-19": 0.9137322306632996,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n",
        "snippet": [
            "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n"
        ],
        "simplified": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "task_id": "4",
        "0": "var sum = numbers.reduce(function(a, b){return a + b;});\n\tvar mean = sum / numbers.length;\n\tvar mean_absolute_differences = numbers.map(function(x){\n\t\treturn Math.abs(x - mean);\n\t});\n\treturn mean_absolute_differences.reduce(function(a, b){return a + b;}) / numbers.length;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var mean = _.mean(numbers);\n  var deviations = _.map(numbers, function(n){\n    return Math.abs(n - mean);\n  });\n  return _.mean(deviations);\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "var mean_value = mean(numbers);\n\tvar absolute_deviations = numbers.map(function(x){\n\t\treturn Math.abs(x - mean_value);\n\t});\n\treturn mean(absolute_deviations);\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var n = numbers.length;\n\tvar m = mean(numbers);\n\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tsum += Math.abs(numbers[i] - m);\n\t}\n\treturn sum / n;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "//Calculate mean\n    let sum = 0;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    let mean = sum / numbers.length;\n\n    //Calculate deviations\n    let deviations = [];\n    for(let i = 0; i < numbers.length; i++){\n        deviations.push(Math.abs(numbers[i] - mean));\n    }\n\n    //Calculate average deviation\n    let deviations_sum = 0;\n    for(let i = 0; i < deviations.length; i++){\n        deviations_sum += deviations[i];\n    }\n    let average_deviation = deviations_sum / deviations.length;\n\n    return average_deviation;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "var mean = mean_value(numbers);\n    var abs_diffs = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return mean_value(abs_diffs);\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "var center_point = mean(numbers);\n\tvar deviation_list = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\tdeviation_list.push(Math.abs(numbers[i] - center_point));\n\t}\n\treturn mean(deviation_list);\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "var sum = 0;\n\tvar mean = mean_of_numbers(numbers);\n\tvar absolute_deviations = map(numbers, function(n){\n\t\tvar deviation = Math.abs(n - mean);\n\t\tsum += deviation;\n\t\treturn deviation;\n\t});\n\tvar average_absolute_deviation = sum / absolute_deviations.length;\n\treturn average_absolute_deviation;\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "var mean_value = mean(numbers);\n  var squared_absolute_differences = [];\n  for (var i = 0; i < numbers.length; i++){\n    squared_absolute_differences.push(Math.abs(numbers[i] - mean_value));\n  }\n  return mean(squared_absolute_differences);\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "var sum = sum_of_numbers(numbers);\n\tvar mean = sum / numbers.length;\n\tvar deviants = [];\n\tfor (i=0; i<numbers.length; i++){\n\t\tdeviants.push(numbers[i] - mean);\n\t}\n\tvar abs_deviants = [];\n\tfor (i=0; i<deviants.length; i++){\n\t\tabs_deviants.push(Math.abs(deviants[i]));\n\t}\n\tvar MAD = mean_of_numbers(abs_deviants);\n\treturn MAD;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "var mean = average(numbers);\n    var deviations = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return average(deviations);\n}\n\nmodule.exports = mean_absolute_deviation;",
        "grade-10": {
            "execution": 0
        },
        "11": "var sum = 0;\n\tvar mean = mean(numbers);\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum / numbers.length;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "var sum = 0;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n  }\n  var mean = sum / numbers.length;\n  var diffs = [];\n  for(var i = 0; i < numbers.length; i++){\n    diffs.push(Math.abs(numbers[i] - mean));\n  }\n  var sum = 0;\n  for(var i = 0; i < diffs.length; i++){\n    sum += diffs[i];\n  }\n  return sum / diffs.length;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var mean = math.mean(numbers);\n\t//now subtract this mean from each number and return the sum of these\n\tvar sum = 0;\n\tfor(i=0; i<numbers.length; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum/numbers.length;\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "var sum = 0;\n\tvar mean = jStat.mean(numbers);\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum / numbers.length;\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var mean = arithmetic_mean(numbers);\n  var abs_devs = [];\n  for(var i = 0; i < numbers.length; i++){\n    abs_devs.push(Math.abs(numbers[i] - mean));\n  }\n  return arithmetic_mean(abs_devs);\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "var sum = 0;\n\tvar mean = mean(numbers);\n\tvar l = numbers.length;\n\tfor(var i = 0; i < l; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum / l;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var mean = compute_mean(numbers);\n\tvar absolute_diffs = numbers.map(function(element){\n\t\treturn Math.abs(element - mean);\n\t});\n\treturn compute_mean(absolute_diffs);\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "var mean_absolute_deviation = 0;\n    var mean = numbers.mean();\n    numbers.forEach(function(number){\n        mean_absolute_deviation += Math.abs(number - mean);\n    });\n    return mean_absolute_deviation / numbers.length;\n}",
        "grade-18": {
            "execution": 0
        },
        "bleu-0": 0.29367362049214035,
        "bleu-1": 0.14070806109472955,
        "bleu-2": 0.08462550091766852,
        "bleu-3": 0.1266290619452174,
        "bleu-4": 0.10441018606394263,
        "bleu-5": 0.13933912762043066,
        "bleu-6": 0.1210798335679986,
        "bleu-7": 0.15821900724804436,
        "bleu-8": 0.1210798335679986,
        "bleu-9": 0.15037633128388161,
        "bleu-10": 0.15085201971165663,
        "bleu-11": 0.2406618204166721,
        "bleu-12": 0.12344677242820565,
        "bleu-13": 0.22246846161736042,
        "bleu-14": 0.24363380290564687,
        "bleu-15": 0.14438731318610432,
        "bleu-16": 0.18263623956937602,
        "bleu-17": 0.13933912762043066,
        "bleu-18": 0.2418221631039765,
        "codebleu-0": 0.6611009918865347,
        "codebleu-1": 0.4666829393066196,
        "codebleu-2": 0.38757269969535807,
        "codebleu-3": 0.45481515456266247,
        "codebleu-4": 0.5738374298649356,
        "codebleu-5": 0.39669163747915176,
        "codebleu-6": 0.47385113954294217,
        "codebleu-7": 0.5107004777069231,
        "codebleu-8": 0.47385113954294217,
        "codebleu-9": 0.5883011751566941,
        "codebleu-10": 0.4532853184507021,
        "codebleu-11": 0.47699460698909063,
        "codebleu-12": 0.5724004556266844,
        "codebleu-13": 0.5300963368717799,
        "codebleu-14": 0.5046114178823713,
        "codebleu-15": 0.47773571947929316,
        "codebleu-16": 0.4661271461455551,
        "codebleu-17": 0.39669163747915176,
        "codebleu-18": 0.4551407871153716,
        "chrf-0": 0.5324674638263273,
        "chrf-1": 0.2918786194137548,
        "chrf-2": 0.2901131670068856,
        "chrf-3": 0.30560069675239576,
        "chrf-4": 0.34123429788827897,
        "chrf-5": 0.30041604847695763,
        "chrf-6": 0.3049410026627199,
        "chrf-7": 0.34086972115027103,
        "chrf-8": 0.32988379083965896,
        "chrf-9": 0.38436490624371106,
        "chrf-10": 0.31854893825840347,
        "chrf-11": 0.4120732572293123,
        "chrf-12": 0.38445385762873385,
        "chrf-13": 0.42395715682561547,
        "chrf-14": 0.4120673220038719,
        "chrf-15": 0.3331243308248085,
        "chrf-16": 0.33466251330116636,
        "chrf-17": 0.3211721658742853,
        "chrf-18": 0.39612941349535397,
        "rougel-0": 0.6068965517241379,
        "rougel-1": 0.4727272727272727,
        "rougel-2": 0.4423076923076923,
        "rougel-3": 0.3934426229508197,
        "rougel-4": 0.3317073170731707,
        "rougel-5": 0.4807692307692308,
        "rougel-6": 0.39669421487603307,
        "rougel-7": 0.4,
        "rougel-8": 0.39669421487603307,
        "rougel-9": 0.32142857142857145,
        "rougel-10": 0.45454545454545453,
        "rougel-11": 0.48739495798319327,
        "rougel-12": 0.36363636363636365,
        "rougel-13": 0.4592592592592592,
        "rougel-14": 0.4918032786885246,
        "rougel-15": 0.4297520661157025,
        "rougel-16": 0.4262295081967213,
        "rougel-17": 0.4807692307692308,
        "rougel-18": 0.5585585585585585,
        "meteor-0": 0.619007610350076,
        "meteor-1": 0.3588713715105865,
        "meteor-2": 0.29725022636052817,
        "meteor-3": 0.3249732773678859,
        "meteor-4": 0.3724779172477917,
        "meteor-5": 0.3178338311012609,
        "meteor-6": 0.3771678685217817,
        "meteor-7": 0.4087912087912087,
        "meteor-8": 0.3771678685217817,
        "meteor-9": 0.37306826434277407,
        "meteor-10": 0.3505162705688868,
        "meteor-11": 0.48463891998393216,
        "meteor-12": 0.4575568392329308,
        "meteor-13": 0.5004395285935086,
        "meteor-14": 0.49186998086283285,
        "meteor-15": 0.4126292297164591,
        "meteor-16": 0.35207885343783085,
        "meteor-17": 0.3178338311012609,
        "meteor-18": 0.502299835734394,
        "ruby-0": 0.4320987654320988,
        "ruby-1": 0.34375,
        "ruby-2": 0.328125,
        "ruby-3": 0.25,
        "ruby-4": 0.2056737588652482,
        "ruby-5": 0.359375,
        "ruby-6": 0.234375,
        "ruby-7": 0.1875,
        "ruby-8": 0.234375,
        "ruby-9": 0.22115384615384615,
        "ruby-10": 0.265625,
        "ruby-11": 0.34375,
        "ruby-12": 0.2357723577235772,
        "ruby-13": 0.323943661971831,
        "ruby-14": 0.3125,
        "ruby-15": 0.265625,
        "ruby-16": 0.25,
        "ruby-17": 0.359375,
        "ruby-18": 0.375,
        "codebertscore_f1-0": 0.8620677590370178,
        "codebertscore_f3-0": 0.881426215171814,
        "codebertscore_f1-1": 0.818132221698761,
        "codebertscore_f3-1": 0.7993118166923523,
        "codebertscore_f1-2": 0.8026155233383179,
        "codebertscore_f3-2": 0.795387864112854,
        "codebertscore_f1-3": 0.8074852228164673,
        "codebertscore_f3-3": 0.8092812299728394,
        "codebertscore_f1-4": 0.7487009763717651,
        "codebertscore_f3-4": 0.7859712839126587,
        "codebertscore_f1-5": 0.8081288933753967,
        "codebertscore_f3-5": 0.7997696995735168,
        "codebertscore_f1-6": 0.7793760299682617,
        "codebertscore_f3-6": 0.7764908671379089,
        "codebertscore_f1-7": 0.7952209115028381,
        "codebertscore_f3-7": 0.8067874908447266,
        "codebertscore_f1-8": 0.7774648070335388,
        "codebertscore_f3-8": 0.7819918990135193,
        "codebertscore_f1-9": 0.7764274477958679,
        "codebertscore_f3-9": 0.7972601056098938,
        "codebertscore_f1-10": 0.7944044470787048,
        "codebertscore_f3-10": 0.7956893444061279,
        "codebertscore_f1-11": 0.8261735439300537,
        "codebertscore_f3-11": 0.8210886120796204,
        "codebertscore_f1-12": 0.7951546311378479,
        "codebertscore_f3-12": 0.819025993347168,
        "codebertscore_f1-13": 0.7956626415252686,
        "codebertscore_f3-13": 0.8105466365814209,
        "codebertscore_f1-14": 0.821510910987854,
        "codebertscore_f3-14": 0.8200979232788086,
        "codebertscore_f1-15": 0.7941837906837463,
        "codebertscore_f3-15": 0.7930075526237488,
        "codebertscore_f1-16": 0.8139923214912415,
        "codebertscore_f3-16": 0.8146138787269592,
        "codebertscore_f1-17": 0.8029067516326904,
        "codebertscore_f3-17": 0.7932047247886658,
        "codebertscore_f1-18": 0.8253483176231384,
        "codebertscore_f3-18": 0.8312113881111145,
        "codebertscore_s_f1-0": 0.8639430403709412,
        "codebertscore_s_f3-0": 0.8825668096542358,
        "codebertscore_s_f1-1": 0.8121901154518127,
        "codebertscore_s_f3-1": 0.7899606227874756,
        "codebertscore_s_f1-2": 0.8015176057815552,
        "codebertscore_s_f3-2": 0.7902950048446655,
        "codebertscore_s_f1-3": 0.8141597509384155,
        "codebertscore_s_f3-3": 0.8114255666732788,
        "codebertscore_s_f1-4": 0.7566238045692444,
        "codebertscore_s_f3-4": 0.7952466607093811,
        "codebertscore_s_f1-5": 0.8040822744369507,
        "codebertscore_s_f3-5": 0.7940933704376221,
        "codebertscore_s_f1-6": 0.7776137590408325,
        "codebertscore_s_f3-6": 0.7745285034179688,
        "codebertscore_s_f1-7": 0.8027580380439758,
        "codebertscore_s_f3-7": 0.810205340385437,
        "codebertscore_s_f1-8": 0.7793478965759277,
        "codebertscore_s_f3-8": 0.7844138145446777,
        "codebertscore_s_f1-9": 0.7825196385383606,
        "codebertscore_s_f3-9": 0.8015151619911194,
        "codebertscore_s_f1-10": 0.7960375547409058,
        "codebertscore_s_f3-10": 0.7947297096252441,
        "codebertscore_s_f1-11": 0.8339516520500183,
        "codebertscore_s_f3-11": 0.826459527015686,
        "codebertscore_s_f1-12": 0.7982335090637207,
        "codebertscore_s_f3-12": 0.8190611600875854,
        "codebertscore_s_f1-13": 0.8016494512557983,
        "codebertscore_s_f3-13": 0.8126113414764404,
        "codebertscore_s_f1-14": 0.8272815942764282,
        "codebertscore_s_f3-14": 0.8256096839904785,
        "codebertscore_s_f1-15": 0.7962785363197327,
        "codebertscore_s_f3-15": 0.7961269021034241,
        "codebertscore_s_f1-16": 0.8222175240516663,
        "codebertscore_s_f3-16": 0.8200858235359192,
        "codebertscore_s_f1-17": 0.8040003776550293,
        "codebertscore_s_f3-17": 0.7923473119735718,
        "codebertscore_s_f1-18": 0.8314225077629089,
        "codebertscore_s_f3-18": 0.838206946849823,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3"
    },
    {
        "intent": "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n",
        "snippet": [
            "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n"
        ],
        "simplified": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
        "task_id": "139",
        "3": "if (n < 0){\n        return null;\n    }\n    else if (n == 0 || n == 1){\n        return 1;\n    }\n    else{\n        let factor = 1;\n        for (let i = n; i > 0; i--){\n            factor *= i;\n        }\n        return factor;\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var product = 1;\n  for (i = n; i > 0; i--){\n    product *= i;\n  }\n  for (i = n-1; i > 0; i--){\n    product *= i;\n  }\n  return product;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var factor = 1;\n    for (var i = n; i > 0; i--) {\n        factor *= i;\n    }\n    return factor;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let factoria = 1;\n    for(let i = 1; i <= n; i++){\n        factoria *= i;\n    }\n    return factoria * (n-1);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (n < 0) {\n    return \"n should be positive\"\n  }\n  else if (n === 0 || n === 1) {\n    return 1\n  }\n  else {\n    let output = 1\n    for (let i = n; i > 0; i--) {\n      output *= i\n    }\n    for (let i = n - 1; i > 0; i--) {\n      output *= i\n    }\n    return output\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var factorial = 1;\n    var current = 1;\n    while(current <= n){\n        factorial *= factorial_helper(current);\n        current += 1;\n    }\n    return factorial;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (n == 0){\n    return 1;\n  }\n  else{\n    return n * special_factorial(n-1);\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (n <= 0) return;\n  let result = 1;\n  while (n > 0) {\n    result *= factorial(n);\n    n--;\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return n==0 ? 1 : n * special_factorial(n-1);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return factorial(n) * factorial(n-1);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return 0;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *= i;\n    }\n    return factorial;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let value = 1;\n    for(let i = 1; i <= n; i++){\n        value *= factorial(i);\n    }\n    return value;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *= i;\n    }\n    return factorial;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return n > 0 ? n * special_factorial(n-1) : 1;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var a = 1, b = 2, c = 1;\n    while (b <= n) {\n      a *= b;\n      b++;\n      c *= b;\n      b++;\n    }\n    return a * c;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return n == 0 ? 1 : n*special_factorial(n-1);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = 1;\n    var i = 1;\n    while (i <= n){\n        result *= i;\n        i++;\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// solution 1\n  // let special_factorial = 1;\n  // for (let i = 1; i <= n; i++){\n  //   let factorial = 1;\n  //   for (let k = 1; k <= i; k++){\n  //     factorial *= k;\n  //   }\n  //   special_factorial *= factorial;\n  // }\n  // return special_factorial;\n\n  // solution 2\n  if (n === 1) return 1;\n  return n * special_factorial(n-1);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result= 1;\n  for(var i=n; i>=1; i--){\n    result*=i;\n  }\n  return result;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.10008346799998984,
        "bleu-0": 0.10138396363357409,
        "bleu-8": 0.07677610521578154,
        "bleu-7": 0.1048108944023055,
        "bleu-16": 0.062471144217901564,
        "bleu-2": 0.1400558447424492,
        "bleu-11": 0.04784281351146812,
        "bleu-1": 0.2946806449629246,
        "bleu-10": 0.016072210013362672,
        "bleu-17": 0.008945367951694374,
        "bleu-12": 2.9972952697019067e-06,
        "bleu-6": 0.07677610521578154,
        "bleu-18": 0.09358375615314013,
        "bleu-15": 0.07854222720146152,
        "bleu-13": 0.01637751510583602,
        "bleu-9": 0.14910390090451522,
        "bleu-4": 0.016072210013362672,
        "bleu-14": 0.14127421761037334,
        "bleu-5": 0.04900004542244234,
        "bleu-19": 0.08685371530431643,
        "codebleu-3": 0.45950345950345944,
        "codebleu-0": 0.5081400081400081,
        "codebleu-8": 0.3081985807754374,
        "codebleu-7": 0.3678212757472709,
        "codebleu-16": 0.47069597069597063,
        "codebleu-2": 0.40393769617571235,
        "codebleu-11": 0.22287725767959363,
        "codebleu-1": 0.4311188158765864,
        "codebleu-10": 0.1191473946442174,
        "codebleu-17": 0.1141230760299717,
        "codebleu-12": 0.0341882011578718,
        "codebleu-6": 0.3081985807754374,
        "codebleu-18": 0.3477156876994956,
        "codebleu-15": 0.3109741253571305,
        "codebleu-13": 0.1261026569551012,
        "codebleu-9": 0.4317477524962139,
        "codebleu-4": 0.1191473946442174,
        "codebleu-14": 0.38361457871112603,
        "codebleu-5": 0.5022385022385021,
        "codebleu-19": 0.30294288322244617,
        "chrf-3": 0.23521941452639575,
        "chrf-0": 0.21124582906485312,
        "chrf-8": 0.16867342666493837,
        "chrf-7": 0.21516292754507052,
        "chrf-16": 0.22250756487481227,
        "chrf-2": 0.25988943484196825,
        "chrf-11": 0.16049649475217356,
        "chrf-1": 0.37723098792190224,
        "chrf-10": 0.12184138077648406,
        "chrf-17": 0.1128304615676308,
        "chrf-12": 0.07405748568988696,
        "chrf-6": 0.17143147624620816,
        "chrf-18": 0.21276722088135358,
        "chrf-15": 0.20061783456590274,
        "chrf-13": 0.1275970343574163,
        "chrf-9": 0.24085322706802612,
        "chrf-4": 0.12184138077648406,
        "chrf-14": 0.27833444859144535,
        "chrf-5": 0.16066234925129133,
        "chrf-19": 0.2031329089728989,
        "rougel-3": 0.3826086956521739,
        "rougel-0": 0.40384615384615385,
        "rougel-8": 0.3902439024390244,
        "rougel-7": 0.449438202247191,
        "rougel-16": 0.3285714285714286,
        "rougel-2": 0.4597701149425288,
        "rougel-11": 0.33766233766233766,
        "rougel-1": 0.5393258426966293,
        "rougel-10": 0.2608695652173913,
        "rougel-17": 0.24615384615384614,
        "rougel-12": 0.10909090909090909,
        "rougel-6": 0.3902439024390244,
        "rougel-18": 0.41860465116279066,
        "rougel-15": 0.4390243902439025,
        "rougel-13": 0.23529411764705882,
        "rougel-9": 0.4536082474226804,
        "rougel-4": 0.2608695652173913,
        "rougel-14": 0.4819277108433735,
        "rougel-5": 0.34177215189873417,
        "rougel-19": 0.3855421686746988,
        "meteor-3": 0.5047404182683083,
        "meteor-0": 0.47861699826989623,
        "meteor-8": 0.3568920952123761,
        "meteor-7": 0.4072521865889213,
        "meteor-16": 0.4375837926411441,
        "meteor-2": 0.2714821829405163,
        "meteor-11": 0.3075104370793219,
        "meteor-1": 0.41545569714583797,
        "meteor-10": 0.15723270440251574,
        "meteor-17": 0.12684989429175475,
        "meteor-12": 0.04319654427645788,
        "meteor-6": 0.3568920952123761,
        "meteor-18": 0.3441445272261217,
        "meteor-15": 0.3795918367346939,
        "meteor-13": 0.1763741210770022,
        "meteor-9": 0.34629133990903815,
        "meteor-4": 0.15723270440251574,
        "meteor-14": 0.3738560632019066,
        "meteor-5": 0.3503001699536601,
        "meteor-19": 0.3363953815176004,
        "ruby-3": 0.234375,
        "ruby-0": 0.24528301886792447,
        "ruby-8": 0.2941176470588235,
        "ruby-7": 0.33333333333333337,
        "ruby-16": 0.2134831460674157,
        "ruby-2": 0.3529411764705882,
        "ruby-11": 0.21568627450980393,
        "ruby-1": 0.37254901960784315,
        "ruby-10": 0.13725490196078427,
        "ruby-17": 0.13725490196078427,
        "ruby-12": 0.05882352941176472,
        "ruby-6": 0.2941176470588235,
        "ruby-18": 0.2941176470588235,
        "ruby-15": 0.33333333333333337,
        "ruby-13": 0.13725490196078427,
        "ruby-9": 0.2941176470588235,
        "ruby-4": 0.13725490196078427,
        "ruby-14": 0.37254901960784315,
        "ruby-5": 0.2429906542056075,
        "ruby-19": 0.27450980392156865,
        "codebertscore_f1-3": 0.8113951086997986,
        "codebertscore_f3-3": 0.8231905698776245,
        "codebertscore_f1-0": 0.8253453373908997,
        "codebertscore_f3-0": 0.8279573917388916,
        "codebertscore_f1-8": 0.8416940569877625,
        "codebertscore_f3-8": 0.8331687450408936,
        "codebertscore_f1-7": 0.8187357187271118,
        "codebertscore_f3-7": 0.820044755935669,
        "codebertscore_f1-16": 0.800835371017456,
        "codebertscore_f3-16": 0.8188284039497375,
        "codebertscore_f1-2": 0.8104606866836548,
        "codebertscore_f3-2": 0.8160371780395508,
        "codebertscore_f1-11": 0.7534410953521729,
        "codebertscore_f3-11": 0.7415035963058472,
        "codebertscore_f1-1": 0.8536455631256104,
        "codebertscore_f3-1": 0.854188084602356,
        "codebertscore_f1-10": 0.7500796914100647,
        "codebertscore_f3-10": 0.7321254014968872,
        "codebertscore_f1-17": 0.7203414440155029,
        "codebertscore_f3-17": 0.7081390023231506,
        "codebertscore_f1-12": 0.6861855983734131,
        "codebertscore_f3-12": 0.6352918744087219,
        "codebertscore_f1-6": 0.8297812938690186,
        "codebertscore_f3-6": 0.8277116417884827,
        "codebertscore_f1-18": 0.8286489844322205,
        "codebertscore_f3-18": 0.8261924982070923,
        "codebertscore_f1-15": 0.8424525856971741,
        "codebertscore_f3-15": 0.8408458828926086,
        "codebertscore_f1-13": 0.7548404932022095,
        "codebertscore_f3-13": 0.7353176474571228,
        "codebertscore_f1-9": 0.8364986777305603,
        "codebertscore_f3-9": 0.8313364386558533,
        "codebertscore_f1-4": 0.7479827404022217,
        "codebertscore_f3-4": 0.7302752137184143,
        "codebertscore_f1-14": 0.8556131720542908,
        "codebertscore_f3-14": 0.8442226052284241,
        "codebertscore_f1-5": 0.7879881858825684,
        "codebertscore_f3-5": 0.8148724436759949,
        "codebertscore_f1-19": 0.8275972008705139,
        "codebertscore_f3-19": 0.8205808997154236,
        "codebertscore_s_f1-3": 0.9222251772880554,
        "codebertscore_s_f3-3": 0.9297699928283691,
        "codebertscore_s_f1-0": 0.9313432574272156,
        "codebertscore_s_f3-0": 0.9319764971733093,
        "codebertscore_s_f1-8": 0.9427610635757446,
        "codebertscore_s_f3-8": 0.9335346221923828,
        "codebertscore_s_f1-7": 0.9328356385231018,
        "codebertscore_s_f3-7": 0.9315928220748901,
        "codebertscore_s_f1-16": 0.9083225727081299,
        "codebertscore_s_f3-16": 0.9269447326660156,
        "codebertscore_s_f1-2": 0.929743766784668,
        "codebertscore_s_f3-2": 0.9272855520248413,
        "codebertscore_s_f1-11": 0.9203284978866577,
        "codebertscore_s_f3-11": 0.9004736542701721,
        "codebertscore_s_f1-1": 0.9490155577659607,
        "codebertscore_s_f3-1": 0.9437345266342163,
        "codebertscore_s_f1-10": 0.9169747829437256,
        "codebertscore_s_f3-10": 0.8905025124549866,
        "codebertscore_s_f1-17": 0.9136062264442444,
        "codebertscore_s_f3-17": 0.8845973610877991,
        "codebertscore_s_f1-12": 0.9176618456840515,
        "codebertscore_s_f3-12": 0.8756289482116699,
        "codebertscore_s_f1-6": 0.9383108615875244,
        "codebertscore_s_f3-6": 0.9303013682365417,
        "codebertscore_s_f1-18": 0.9409265518188477,
        "codebertscore_s_f3-18": 0.933086633682251,
        "codebertscore_s_f1-15": 0.9446840286254883,
        "codebertscore_s_f3-15": 0.9371957778930664,
        "codebertscore_s_f1-13": 0.9184355139732361,
        "codebertscore_s_f3-13": 0.8921478390693665,
        "codebertscore_s_f1-9": 0.9390377402305603,
        "codebertscore_s_f3-9": 0.9379258155822754,
        "codebertscore_s_f1-4": 0.9157509803771973,
        "codebertscore_s_f3-4": 0.889559268951416,
        "codebertscore_s_f1-14": 0.9475094079971313,
        "codebertscore_s_f3-14": 0.9386227130889893,
        "codebertscore_s_f1-5": 0.903928279876709,
        "codebertscore_s_f3-5": 0.9267026782035828,
        "codebertscore_s_f1-19": 0.9363804459571838,
        "codebertscore_s_f3-19": 0.9273470640182495,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 2,
        "raw_gpt35_nsnr-17": "2",
        "gpt35_nsnr-12": 2,
        "raw_gpt35_nsnr-12": "2",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 0,
        "raw_gpt35_nswr-12": "0",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 0,
        "raw_gpt35_nswr-5": "Solution 1: 4\nSolution 2: 4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nfunction valid_date(date){\n",
        "snippet": [
            "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n"
        ],
        "simplified": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "task_id": "124",
        "3": "var d = date.split('-');\n  if (d.length != 3) return false;\n  if (d[0] < 1 || d[0] > 12) return false;\n  if (d[1] < 1 || d[1] > 31) return false;\n  if ((d[0] == 4 || d[0] == 6 || d[0] == 9 || d[0] == 11) && d[1] > 30) return false;\n  if (d[0] == 2 && d[1] > 29) return false;\n  return true;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let dateArray = date.split('-');\n  if (dateArray.length !== 3) {\n    return false;\n  }\n  let month = parseInt(dateArray[0]);\n  let day = parseInt(dateArray[1]);\n  let year = parseInt(dateArray[2]);\n  if (dateArray[0].length != 2 || dateArray[1].length != 2 || dateArray[2].length != 4) {\n    return false;\n  }\n  if (month > 12 || month < 1) {\n    return false;\n  }\n  if ((month == 2 && day > 29) || (month == 2 && day < 1)) {\n    return false;\n  }\n  if ((month == 4 || month == 6 || month == 9 || month == 11) && (day > 30 || day < 1)) {\n    return false;\n  }\n  if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day > 31 || day < 1)) {\n    return false;\n  }\n  return true;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let day = date.slice(0,2);\n  let month = date.slice(3,5);\n  let year = date.slice(6,10);\n  return date.length > 0 && date.includes('-') && Number(year) >= 2000 && Number(month) >= 1 && Number(month) <= 12 && Number(day) >= 1 && Number(day) <= 31 && (Number(month) === 1 || Number(month) === 3 || Number(month) === 5 || Number(month) === 7 || Number(month) === 8 || Number(month) === 10 || Number(month) === 12 ? Number(day) <= 31 : Number(month) === 4 || Number(month) === 6 || Number(month) === 9 || Number(month) === 11 ? Number(day) <= 30 : Number(month) === 2 ? Number(day) <= 29 : false)\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if (date === '') return false;\n    const dateParts = date.split('-');\n    if (dateParts.length !== 3) return false;\n    for (let d of dateParts) {\n        if (isNaN(d)) return false;\n    }\n    let [m, d, y] = dateParts;\n    if (m < 1 || m > 12) return false;\n    if (m === 2) {\n        if (d < 1 || d > 29) return false;\n    } else if (m % 2 === 0) {\n        if (d < 1 || d > 30) return false;\n    } else {\n        if (d < 1 || d > 31) return false;\n    }\n    return true;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return date.match(/\\d{2}-\\d{2}-\\d{4}/) ? true : false;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let valid = true;\n    if(date.length == 0){\n        valid = false;\n    }\n    let date_split = date.split('-');\n    if(date_split.length != 3){\n        valid = false;\n    }\n    else{\n        if(isNaN(date_split[0]) || isNaN(date_split[1]) || isNaN(date_split[2])){\n            valid = false;\n        }\n        else{\n            date_split[0] = parseInt(date_split[0]);\n            date_split[1] = parseInt(date_split[1]);\n            date_split[2] = parseInt(date_split[2]);\n            if(date_split[0] < 1 || date_split[0] > 12){\n                valid = false;\n            }\n            else{\n                if(date_split[0] == 2){\n                    if(date_split[1] < 1 || date_split[1] > 29){\n                        valid = false;\n                    }\n                }\n                else if(date_split[0] == 1 || date_split[0] == 3 || date_split[0] == 5 || date_split[0] == 7 || date_split[0] == 8 || date_split[0] == 10 || date_split[0] == 12){\n                    if(date_split[1] < 1 || date_split[1] > 31){\n                        valid = false;\n                    }\n                }\n                else{\n                    if(date_split[1] < 1 || date_split[1] > 30){\n                        valid = false;\n                    }\n                }\n            }\n        }\n    }\n    return valid;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "// your code here\n\tvar arr = date.split('-');\n\tvar months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"];\n\tvar days = [\"04\", \"06\", \"09\", \"11\"];\n\tif (arr.length !== 3 || arr[2].length !== 4) {\n\t\treturn false;\n\t} else if (arr[0] < 1 || arr[0] > 12) {\n\t\treturn false;\n\t} else if (months.indexOf(arr[0]) !== -1 && (arr[1] < 1 || arr[1] > 31)) {\n\t\treturn false;\n\t} else if (days.indexOf(arr[0]) !== -1 && (arr[1] < 1 || arr[1] > 30)) {\n\t\treturn false;\n\t} else if (arr[0] === \"02\" && (arr[1] < 1 || arr[1] > 29)) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var month = date.slice(0,2);\n    var day = date.slice(3,5);\n    var year = date.slice(6,10);\n    if (date.length < 10 || date.length > 10) return false;\n    if (date.slice(2,3) != '-' || date.slice(5,6) != '-') return false;\n    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(date.length == 0){\n        return false;\n    }\n    var parts = date.split('-');\n    if(parts.length != 3){\n        return false;\n    }\n    var month = parts[0];\n    var day = parts[1];\n    var year = parts[2];\n    if(month.length == 0 || day.length == 0 || year.length == 0){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let check = true;\n    if (date === \"\") {\n        check = false;\n    } else {\n        let arrDate = date.split(\"-\");\n        if (arrDate.length !== 3) {\n            check = false;\n        } else {\n            if (arrDate[1] > 31) {\n                check = false;\n            } else if (arrDate[1] > 30 && arrDate[0] % 2 === 0) {\n                check = false;\n            } else if (arrDate[1] > 29 && arrDate[0] % 2 === 1) {\n                check = false;\n            } else if (arrDate[0] > 12) {\n                check = false;\n            }\n        }\n    }\n    return check;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "}\n\n\n  //Write a function named get_string_length which returns the length of a given string.\n  // The length is equal to the number of Unicode characters in the string.\n  // For example, the length of the string \"hello world\" is 11.\n  // Please note that white spaces are included in the length of the string.\n  // For example, the length of the string \"hello world\" is 11.\n  // Please note that white spaces are included in the length of the string.\n  function get_string_length(str){\n    \n  }\n\n\n  //Write a function named great_than which takes two arguments,\n  // a and b, and returns True if a is greater than b and False otherwise.\n  function great_than(a,b){\n    \n  }\n\n\n  //Write a function named less_than which takes two arguments,\n  // a and b, and returns True if a is less than b and False otherwise.\n  function less_than(a,b){\n    \n  }\n\n\n  //Write a function named equal_to which takes two arguments,\n  // a and b, and returns True if a is equal to b and False otherwise.\n  function equal_to(a,b){\n    \n  }\n\n\n  //Write a function named greater_than_or_equal_to which takes two arguments,\n  // a and b, and returns True if a is greater than or equal to b and False otherwise.\n  function greater_than_or_equal_to(a,b){\n    \n  }\n\n\n  //Write a function named less_than_or_equal_to which takes two arguments,\n  // a and b, and returns True if a is less than or equal to b and False otherwise.\n  function less_than_or_equal_to(a,b){\n    \n  }\n\n\n  //Write a function named is_even which takes one argument, a, and returns True if a is even and False otherwise.\n  function is_even(a){\n    \n  }\n\n\n  //Write a function named is_odd which takes one argument, a, and returns True if a is odd and False otherwise.\n  function is_odd(a){\n    \n  }\n\n\n  //Write a",
        "grade-6": {
            "execution": 0
        },
        "18": "date = date.split('-');\n    if (date.length !== 3) return false;\n    let [month, day, year] = date;\n    if (day.charAt(0) === '0') day = day.charAt(1);\n    if (month.charAt(0) === '0') month = month.charAt(1);\n    if (month > 12 || day > 31 || month < 1 || day < 1) return false;\n    if (month === '2' && day > 29) return false;\n    if (['4', '6', '9', '11'].includes(month) && day > 30) return false;\n    return true;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-(\\d{4})$/.test(date);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var dateArr = date.split('-');\n    if (dateArr.length !== 3){\n        return false;\n    }\n    var month = Number(dateArr[0]);\n    var day = Number(dateArr[1]);\n    var year = Number(dateArr[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(year < 1000 || year > 10000){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n}\nvalid_date('04-30-2020');",
        "grade-13": {
            "execution": 1
        },
        "9": "let a = date.split('-')\n    if(a.length !== 3)\n        return false\n    let mon = a[0]\n    let day = a[1]\n    let year = a[2]\n    if(mon <= 0 || mon > 12)\n        return false\n    if(mon === '02'){\n        if(day < 1 || day > 29)\n            return false\n    }\n    else if(mon === '01' || mon === '03' || mon === '05' || mon === '07' || mon === '08' || mon === '10' || mon === '12'){\n        if(day < 1 || day > 31)\n            return false\n    }\n    else{\n        if(day < 1 || day > 30)\n            return false\n    }\n    if(year.length !== 4)\n        return false\n    return true\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if (date.length === 0){\n        return false;\n    }\n    var dateArr = date.split('-');\n    if (dateArr.length !== 3){\n        return false;\n    }\n    if (dateArr[0] > 12 || dateArr[0] < 1 || isNaN(dateArr[0])){\n        return false;\n    }\n    if (dateArr[1] > 31 || dateArr[1] < 1 || isNaN(dateArr[1])){\n        return false;\n    }\n    if (dateArr[0] == 2 && dateArr[1] > 29 || dateArr[0] == 2 && dateArr[1] < 1){\n        return false;\n    }\n    if (dateArr[0] == 4 && dateArr[1] > 30 || dateArr[0] == 6 && dateArr[1] > 30 || dateArr[0] == 9 && dateArr[1] > 30 || dateArr[0] == 11 && dateArr[1] > 30){\n        return false;\n    }\n    if (dateArr[2].length !== 4 || isNaN(dateArr[2])){\n        return false;\n    }\n    if (dateArr[0] > 12 || dateArr[0] < 1 || isNaN(dateArr[0])){\n        return false;\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var check_date = date.split('-');\n    var day = parseInt(check_date[0]);\n    var month = parseInt(check_date[1]);\n    var year = parseInt(check_date[2]);\n    if (day<1 || day>31 || month<1 || month>12 || year<1 || year>9999){\n        return false;\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return /^(?:(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[12][0-9]{3})$/.test(date);\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var dateArray = date.split('-');\n\tif (dateArray.length != 3) return false;\n\tvar month = dateArray[0];\n\tvar day = dateArray[1];\n\tvar year = dateArray[2];\n\tif (day < 1 || day > 31) return false;\n\tif (month < 1 || month > 12) return false;\n\tif (year < 1) return false;\n\tif (month === \"02\" && day > 29) return false;\n\tif (month === \"04\" && day > 30) return false;\n\tif (month === \"06\" && day > 30) return false;\n\tif (month === \"09\" && day > 30) return false;\n\tif (month === \"11\" && day > 30) return false;\n\treturn true;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.3333177912443619,
        "bleu-0": 0.308986989710069,
        "bleu-8": 0.16986251761269455,
        "bleu-7": 0.1064804986626536,
        "bleu-16": 0.00018967695780944195,
        "bleu-2": 0.3216794656919275,
        "bleu-11": 0.2550035344133694,
        "bleu-1": 0.2205550671479476,
        "bleu-10": 3.4303365279297034e-90,
        "bleu-17": 0.28816746217930583,
        "bleu-12": 0.1719767037263891,
        "bleu-6": 0.005832461951642598,
        "bleu-18": 0.11177066796268853,
        "bleu-15": 0.0023346019436718507,
        "bleu-13": 0.27438694489579696,
        "bleu-9": 0.1580007682298455,
        "bleu-4": 0.312114124518107,
        "bleu-14": 0.3205600507770779,
        "bleu-5": 0.004329194648276279,
        "bleu-19": 0.12689894641407684,
        "codebleu-3": 0.5047489333875286,
        "codebleu-0": 0.641004539087983,
        "codebleu-8": 0.41512066653708113,
        "codebleu-7": 0.3274999463577619,
        "codebleu-16": 0.053192364026769016,
        "codebleu-2": 0.7234941073033325,
        "codebleu-11": 0.5987971419876545,
        "codebleu-1": 0.5099677926740891,
        "codebleu-10": 0.004830917874396135,
        "codebleu-17": 0.509450314294363,
        "codebleu-12": 0.3585282758397755,
        "codebleu-6": 0.20034836499412972,
        "codebleu-18": 0.3243294523482158,
        "codebleu-15": 0.11057997591173897,
        "codebleu-13": 0.49184349915175907,
        "codebleu-9": 0.44763461042627917,
        "codebleu-4": 0.7630781658152808,
        "codebleu-14": 0.5472869826915353,
        "codebleu-5": 0.13949976868537992,
        "codebleu-19": 0.3707180037880771,
        "chrf-3": 0.4777384923205225,
        "chrf-0": 0.4271373740121384,
        "chrf-8": 0.20487626201952458,
        "chrf-7": 0.32802586821938656,
        "chrf-16": 0.05679085302724922,
        "chrf-2": 0.39493037906913725,
        "chrf-11": 0.4072801917975215,
        "chrf-1": 0.35143950829180454,
        "chrf-10": 0.0043668122270742364,
        "chrf-17": 0.4153863597594843,
        "chrf-12": 0.2595798301136433,
        "chrf-6": 0.10505528636300906,
        "chrf-18": 0.3043411384930175,
        "chrf-15": 0.059283317101895244,
        "chrf-13": 0.40349449047009656,
        "chrf-9": 0.3642815769775379,
        "chrf-4": 0.4643739508357107,
        "chrf-14": 0.38526649661429135,
        "chrf-5": 0.06824326633689647,
        "chrf-19": 0.3206179330642499,
        "rougel-3": 0.5953757225433526,
        "rougel-0": 0.4631578947368421,
        "rougel-8": 0.3547671840354767,
        "rougel-7": 0.36612021857923494,
        "rougel-16": 0.1176470588235294,
        "rougel-2": 0.531548757170172,
        "rougel-11": 0.44736842105263164,
        "rougel-1": 0.46085011185682323,
        "rougel-10": 0.009615384615384614,
        "rougel-17": 0.44897959183673475,
        "rougel-12": 0.3833333333333333,
        "rougel-6": 0.10562180579216354,
        "rougel-18": 0.36461126005361927,
        "rougel-15": 0.21374045801526717,
        "rougel-13": 0.4411764705882353,
        "rougel-9": 0.4538653366583541,
        "rougel-4": 0.5384615384615385,
        "rougel-14": 0.49528301886792453,
        "rougel-5": 0.26373626373626374,
        "rougel-19": 0.38874680306905374,
        "meteor-3": 0.47708385550240484,
        "meteor-0": 0.5935170903792663,
        "meteor-8": 0.3878753963965887,
        "meteor-7": 0.34039149601299284,
        "meteor-16": 0.0501583949313622,
        "meteor-2": 0.5715081518934275,
        "meteor-11": 0.45165947849960714,
        "meteor-1": 0.4664533922515847,
        "meteor-10": 0.0026824034334763944,
        "meteor-17": 0.4991319444444445,
        "meteor-12": 0.31605780370943326,
        "meteor-6": 0.13102191906881056,
        "meteor-18": 0.34289767956491213,
        "meteor-15": 0.10688216892596454,
        "meteor-13": 0.45145471977573776,
        "meteor-9": 0.4862771905016836,
        "meteor-4": 0.6628266123580313,
        "meteor-14": 0.49238933727170603,
        "meteor-5": 0.12960082944530843,
        "meteor-19": 0.3630749411002115,
        "ruby-3": 0.4879227053140096,
        "ruby-0": 0.32835820895522383,
        "ruby-8": 0.27459016393442626,
        "ruby-7": 0.17391304347826086,
        "ruby-16": 0.06763285024154586,
        "ruby-2": 0.37341772151898733,
        "ruby-11": 0.2530120481927711,
        "ruby-1": 0.2666666666666667,
        "ruby-10": 0.004830917874396157,
        "ruby-17": 0.28985507246376807,
        "ruby-12": 0.18840579710144922,
        "ruby-6": 0.044736842105263186,
        "ruby-18": 0.24637681159420288,
        "ruby-15": 0.13526570048309183,
        "ruby-13": 0.2560386473429952,
        "ruby-9": 0.26086956521739135,
        "ruby-4": 0.42172523961661346,
        "ruby-14": 0.2995391705069125,
        "ruby-5": 0.17391304347826086,
        "ruby-19": 0.2560386473429952,
        "codebertscore_f1-3": 0.9237285256385803,
        "codebertscore_f3-3": 0.916292667388916,
        "codebertscore_f1-0": 0.8381629586219788,
        "codebertscore_f3-0": 0.8518071174621582,
        "codebertscore_f1-8": 0.8083628416061401,
        "codebertscore_f3-8": 0.8062154650688171,
        "codebertscore_f1-7": 0.8012634515762329,
        "codebertscore_f3-7": 0.7891749739646912,
        "codebertscore_f1-16": 0.678983211517334,
        "codebertscore_f3-16": 0.6420883536338806,
        "codebertscore_f1-2": 0.7765359878540039,
        "codebertscore_f3-2": 0.7964479923248291,
        "codebertscore_f1-11": 0.8281737565994263,
        "codebertscore_f3-11": 0.8493173122406006,
        "codebertscore_f1-1": 0.8222830295562744,
        "codebertscore_f3-1": 0.8259426355361938,
        "codebertscore_f1-10": 0.0,
        "codebertscore_f3-10": 0.0,
        "codebertscore_f1-17": 0.8165143728256226,
        "codebertscore_f3-17": 0.8165769577026367,
        "codebertscore_f1-12": 0.7787928581237793,
        "codebertscore_f3-12": 0.7726026773452759,
        "codebertscore_f1-6": 0.6527581214904785,
        "codebertscore_f3-6": 0.6818011999130249,
        "codebertscore_f1-18": 0.8178303241729736,
        "codebertscore_f3-18": 0.8218210339546204,
        "codebertscore_f1-15": 0.6908100247383118,
        "codebertscore_f3-15": 0.6751145720481873,
        "codebertscore_f1-13": 0.7962372899055481,
        "codebertscore_f3-13": 0.8081116080284119,
        "codebertscore_f1-9": 0.822463870048523,
        "codebertscore_f3-9": 0.8254972696304321,
        "codebertscore_f1-4": 0.806449830532074,
        "codebertscore_f3-4": 0.83139568567276,
        "codebertscore_f1-14": 0.81308913230896,
        "codebertscore_f3-14": 0.8225136399269104,
        "codebertscore_f1-5": 0.6889376044273376,
        "codebertscore_f3-5": 0.66879802942276,
        "codebertscore_f1-19": 0.8313469290733337,
        "codebertscore_f3-19": 0.8212970495223999,
        "codebertscore_s_f1-3": 0.9050837159156799,
        "codebertscore_s_f3-3": 0.8892697691917419,
        "codebertscore_s_f1-0": 0.8416593670845032,
        "codebertscore_s_f3-0": 0.8526548147201538,
        "codebertscore_s_f1-8": 0.8021484017372131,
        "codebertscore_s_f3-8": 0.7977175116539001,
        "codebertscore_s_f1-7": 0.8007030487060547,
        "codebertscore_s_f3-7": 0.7848133444786072,
        "codebertscore_s_f1-16": 0.6861346364021301,
        "codebertscore_s_f3-16": 0.648665189743042,
        "codebertscore_s_f1-2": 0.8043028116226196,
        "codebertscore_s_f3-2": 0.8193986415863037,
        "codebertscore_s_f1-11": 0.8239740133285522,
        "codebertscore_s_f3-11": 0.8429058790206909,
        "codebertscore_s_f1-1": 0.8150158524513245,
        "codebertscore_s_f3-1": 0.8100661635398865,
        "codebertscore_s_f1-10": 0.0,
        "codebertscore_s_f3-10": 0.0,
        "codebertscore_s_f1-17": 0.8201602697372437,
        "codebertscore_s_f3-17": 0.8171853423118591,
        "codebertscore_s_f1-12": 0.7800254225730896,
        "codebertscore_s_f3-12": 0.768696665763855,
        "codebertscore_s_f1-6": 0.6700421571731567,
        "codebertscore_s_f3-6": 0.6894723773002625,
        "codebertscore_s_f1-18": 0.8141019344329834,
        "codebertscore_s_f3-18": 0.8138885498046875,
        "codebertscore_s_f1-15": 0.6887273192405701,
        "codebertscore_s_f3-15": 0.6737642884254456,
        "codebertscore_s_f1-13": 0.8016886711120605,
        "codebertscore_s_f3-13": 0.8101577758789062,
        "codebertscore_s_f1-9": 0.8182479739189148,
        "codebertscore_s_f3-9": 0.8127383589744568,
        "codebertscore_s_f1-4": 0.8273453712463379,
        "codebertscore_s_f3-4": 0.8446244597434998,
        "codebertscore_s_f1-14": 0.8128436803817749,
        "codebertscore_s_f3-14": 0.8192126154899597,
        "codebertscore_s_f1-5": 0.690973699092865,
        "codebertscore_s_f3-5": 0.6735384464263916,
        "codebertscore_s_f1-19": 0.8254518508911133,
        "codebertscore_s_f3-19": 0.8136727809906006,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 0,
        "raw_gpt35_nsnr-10": "0- The code snippet is empty and does not provide any implementation for the required function.",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "get_string_length: 4\ngreat_than: 4\nless_than: 4\nequal_to: 4\ngreater_than_or_equal_to: 4\nless_than_or_equal_to: 4\nis_even: 4\nis_odd: 4\n\nNote: None of the provided code snippets are related to the given problem. Therefore, all functions are evaluated independently based on their own functionality.",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search(lst){\n",
        "snippet": [
            "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n"
        ],
        "simplified": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "task_id": "69",
        "3": "lst.sort((a,b)=>a-b);\n    if(lst[0]>lst.length) return -1;\n    let ans = 0;\n    let count = 0;\n    let last = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]>lst.length) break;\n        if(lst[i]===last){\n            count++;\n        }\n        else{\n            last = lst[i];\n            count = 1;\n        }\n        if(count >= last){\n            ans = last;\n        }\n    }\n    return ans;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let freq = lst.reduce((count, item) => {\n    count[item] = count[item] === undefined ? 1 : count[item] + 1;\n    return count;\n  }, {});\n  let keys = Object.keys(freq);\n  let filtered = keys.filter(key => {\n    return parseInt(key) <= freq[key];\n  });\n  if (filtered.length === 0) {\n    return -1;\n  }\n  return Math.max(...filtered);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let obj = {}\n  for(let i=0; i<lst.length; i++){\n    obj[lst[i]] ? obj[lst[i]]++ : obj[lst[i]] = 1\n  }\n  let ans = -1\n  let keys = Object.keys(obj)\n  for(let i=0; i<keys.length; i++){\n    if(Number(keys[i]) <= obj[keys[i]] && Number(keys[i]) > ans){\n      ans = Number(keys[i])\n    }\n  }\n  return ans\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let lstSort = lst.sort((a,b) => a - b);\n  for (let i = 0; i < lstSort.length; i++) {\n    let val = lstSort[i];\n    let valIndex = i;\n    let valCount = 0;\n    for (let j = i; j < lstSort.length; j++) {\n      if (lstSort[j] === val) {\n        valCount++;\n      }\n    }\n    if (valCount >= val) {\n      return val;\n    }\n  }\n  return -1;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(!lst.length) return -1;\n    let frequencies = lst.reduce((a,b) => {\n        a[b] = a[b] ? a[b] + 1 : 1;\n        return a;\n    }, {});\n    let maxValue = -1;\n    Object.keys(frequencies).forEach(key => {\n        if(frequencies[key] >= parseInt(key) && parseInt(key) > maxValue) maxValue = parseInt(key);\n    });\n    return maxValue;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "//loop through array\n    //if a number is greater than zero and appears in the array more than its self, return the greatest number in the array\n    //if no such number exists return -1\n    let frequency = {};\n    let maxFreq = 0;\n    let maxInt = -1;\n    for(let i = 0; i < lst.length; i++){\n        frequency[lst[i]] = frequency[lst[i]] + 1 || 1;\n        if(frequency[lst[i]] >= lst[i] && lst[i] > maxInt){\n            maxInt = lst[i];\n        }\n    }\n    return maxInt;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if (lst.length === 0) return -1;\n    let lstSorted = lst.sort((a, b) => a - b);\n    let maxFrequency = 0;\n    let value = -1;\n    for (let i = 0; i < lstSorted.length; i++) {\n        let element = lstSorted[i];\n        let freq = lstSorted.filter(v => v === element).length;\n        if (freq >= element && freq >= maxFrequency) {\n            maxFrequency = freq;\n            value = element;\n        }\n    }\n    return value;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let counts = {};\n    for (let i = 0; i < lst.length; i++) {\n        counts[lst[i]] = (counts[lst[i]] || 0) + 1;\n    }\n    let keys = Object.keys(counts);\n    keys.sort(function(a, b){return counts[b]-counts[a]});\n    let winner = parseInt(keys[0]);\n    if (winner >= counts[winner]) {\n        return winner;\n    } else {\n        return -1;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let myObj = {};\n  let myArray = [];\n  for (i=0; i<lst.length; i++){\n    if (myObj[lst[i]] === undefined){\n      myObj[lst[i]] = 1;\n    } else {\n      myObj[lst[i]]++;\n    }\n  }\n  for (var key in myObj){\n    myArray.push(key);\n  }\n  let myArrayInt = myArray.map(x => parseInt(x));\n  let sortedArray = myArrayInt.sort((a,b) => b-a);\n  for (i=0; i<sortedArray.length; i++){\n    if (myObj[sortedArray[i]] >= sortedArray[i]){\n      return sortedArray[i];\n    }\n  }\n  return -1;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return Math.max(...lst.filter(item => lst.filter(i => i == item).length >= item)) || -1;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let sortedArray = lst.sort((a,b) => a - b);\n  let finalArray = [];\n  let count = 0;\n  let mostFrequent;\n  for(let i = 0; i < sortedArray.length; i++){\n    count = 0;\n    for(let j = 0; j < sortedArray.length; j++){\n      if(sortedArray[i] === sortedArray[j]){\n        count++;\n      }\n    }\n    if(count >= sortedArray[i]){\n      finalArray.push(sortedArray[i]);\n    }\n  }\n  if(finalArray.length === 0){\n    return -1;\n  }else{\n    let max = Math.max(...finalArray);\n    return max;\n  }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "// get count of the highest number in the list\n  let highestNum = Math.max(...lst);\n  //count the frequency of the highest number in the list\n  let numCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === highestNum) {\n      numCount++;\n    }\n  }\n  // the value of the frequency must be greater than or equal to the value of the highest number\n  if (numCount >= highestNum) {\n    return highestNum;\n  } else {\n    return -1;\n  }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let numCount = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (numCount[lst[i]] === undefined) {\n      numCount[lst[i]] = 1;\n    } else {\n      numCount[lst[i]] += 1;\n    }\n  }\n  for (let i = lst.length; i > 0; i--) {\n    if (numCount[i] >= i) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let obj = {}\n    let ans = -1;\n    lst.forEach(ele => {\n        if(obj[ele]){\n            obj[ele] = obj[ele] + 1\n        } else {\n            obj[ele] = 1\n        }\n    })\n    Object.keys(obj).forEach(ele => {\n        if(obj[ele] >= parseInt(ele) && parseInt(ele) > ans){\n            ans = parseInt(ele)\n        }\n    })\n    return ans\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// your code here\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var sortedList = lst.sort(function(a, b){return a-b});\n    for (var i = 0; i < sortedList.length; i++) {\n        if (sortedList[i] === sortedList[i+1]) {\n            var item = sortedList[i];\n            var counter = 0;\n            var index = sortedList.indexOf(item);\n            while (index != -1) {\n                counter++;\n                index = sortedList.indexOf(item, index + 1);\n            }\n            if (counter >= item) {\n                return item;\n            }\n        }\n    }\n    return -1;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let hash = {};\n  let result = -1;\n  for (let x of lst) {\n    if (hash[x]) {\n      hash[x]++;\n    } else {\n      hash[x] = 1;\n    }\n  }\n  for (let key in hash) {\n    if (key <= hash[key] && result < key) {\n      result = key;\n    }\n  }\n  return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (lst.length == 0) return -1;\n    let result = -1;\n    let counts = {};\n    for (let i = 0; i < lst.length; i++) {\n        counts[lst[i]] = (counts[lst[i]] || 0) + 1;\n    }\n    for (const i in counts) {\n        if (counts[i] >= i && i > result) {\n            result = i;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var counts = {};\n    var greatest = -1;\n    for(var i = 0; i < lst.length; i++){\n        var num = lst[i];\n        counts[num] = counts[num] ? counts[num]+1 : 1;\n        if(counts[num] >= num && num > greatest){\n            greatest = num;\n        }\n    }\n    return greatest;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst.filter(a => a == lst[i]).length >= lst[i] && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.18400903395651647,
        "bleu-0": 0.10869699519089139,
        "bleu-8": 0.1513159786309203,
        "bleu-7": 0.1755010546313923,
        "bleu-16": 0.0598504427302986,
        "bleu-2": 0.16184832955482176,
        "bleu-11": 0.16942128800507547,
        "bleu-1": 0.1683388144433011,
        "bleu-10": 0.1006844013239964,
        "bleu-17": 0.10525854732672835,
        "bleu-12": 0.15577218525094055,
        "bleu-6": 0.20167709372634146,
        "bleu-18": 0.24568724623495483,
        "bleu-15": 0.0808968241477246,
        "bleu-13": 3.5733929082574056e-07,
        "bleu-9": 0.1328085171510698,
        "bleu-4": 0.14045544454957376,
        "bleu-14": 0.26763333086035507,
        "bleu-5": 0.21296538645984925,
        "bleu-19": 0.27070619665890516,
        "codebleu-3": 0.6588128264141364,
        "codebleu-0": 0.611112759156553,
        "codebleu-8": 0.601968543608298,
        "codebleu-7": 0.6322375971555464,
        "codebleu-16": 0.5687080402454061,
        "codebleu-2": 0.5685758746323025,
        "codebleu-11": 0.6190715249400492,
        "codebleu-1": 0.6269165319669652,
        "codebleu-10": 0.6633674735959281,
        "codebleu-17": 0.24680536693492308,
        "codebleu-12": 0.6753658568709638,
        "codebleu-6": 0.6101327650969478,
        "codebleu-18": 0.6278844571817167,
        "codebleu-15": 0.522982279915606,
        "codebleu-13": 0.02515724034766732,
        "codebleu-9": 0.6233860631310482,
        "codebleu-4": 0.524228161093692,
        "codebleu-14": 0.655618395814252,
        "codebleu-5": 0.5432575958565157,
        "codebleu-19": 0.5204243865395389,
        "chrf-3": 0.30731219933112564,
        "chrf-0": 0.2603738691690418,
        "chrf-8": 0.2839515940113161,
        "chrf-7": 0.2772314839492759,
        "chrf-16": 0.21739100575604473,
        "chrf-2": 0.2735797681027802,
        "chrf-11": 0.28669267084256245,
        "chrf-1": 0.2613669092337339,
        "chrf-10": 0.24618350724122096,
        "chrf-17": 0.2411465700099519,
        "chrf-12": 0.30670873363297824,
        "chrf-6": 0.29675931620816265,
        "chrf-18": 0.29183113372471753,
        "chrf-15": 0.19964312013334876,
        "chrf-13": 0.022085427336196194,
        "chrf-9": 0.24937091624684676,
        "chrf-4": 0.20565182909149338,
        "chrf-14": 0.3207317370573595,
        "chrf-5": 0.25830832659918446,
        "chrf-19": 0.29393842122579245,
        "rougel-3": 0.4368932038834951,
        "rougel-0": 0.27083333333333337,
        "rougel-8": 0.4423076923076923,
        "rougel-7": 0.4141414141414142,
        "rougel-16": 0.32653061224489793,
        "rougel-2": 0.3454545454545454,
        "rougel-11": 0.39215686274509803,
        "rougel-1": 0.3045685279187817,
        "rougel-10": 0.3533834586466166,
        "rougel-17": 0.3666666666666667,
        "rougel-12": 0.326530612244898,
        "rougel-6": 0.4019607843137255,
        "rougel-18": 0.4338624338624339,
        "rougel-15": 0.29670329670329665,
        "rougel-13": 0.023255813953488372,
        "rougel-9": 0.34579439252336447,
        "rougel-4": 0.3602484472049689,
        "rougel-14": 0.4530386740331492,
        "rougel-5": 0.4171779141104294,
        "rougel-19": 0.4605263157894737,
        "meteor-3": 0.5276595744680851,
        "meteor-0": 0.3241680344837784,
        "meteor-8": 0.42588628792219574,
        "meteor-7": 0.40073547318688807,
        "meteor-16": 0.3591331562407211,
        "meteor-2": 0.38933370885974083,
        "meteor-11": 0.37984077921508214,
        "meteor-1": 0.34017196762229734,
        "meteor-10": 0.522973731990543,
        "meteor-17": 0.25085526315789475,
        "meteor-12": 0.37743180027238904,
        "meteor-6": 0.388648815866962,
        "meteor-18": 0.5451774018283504,
        "meteor-15": 0.2902604675284551,
        "meteor-13": 0.006887052341597796,
        "meteor-9": 0.4319948607858444,
        "meteor-4": 0.37217448240831175,
        "meteor-14": 0.4663062070124163,
        "meteor-5": 0.3484740863736297,
        "meteor-19": 0.3662102006941301,
        "ruby-3": 0.2777777777777778,
        "ruby-0": 0.1696428571428571,
        "ruby-8": 0.3359375,
        "ruby-7": 0.2966101694915254,
        "ruby-16": 0.2068965517241379,
        "ruby-2": 0.2571428571428571,
        "ruby-11": 0.27419354838709675,
        "ruby-1": 0.19658119658119655,
        "ruby-10": 0.24731182795698925,
        "ruby-17": 0.275,
        "ruby-12": 0.21212121212121215,
        "ruby-6": 0.2338709677419355,
        "ruby-18": 0.33944954128440363,
        "ruby-15": 0.17647058823529416,
        "ruby-13": 0.012499999999999956,
        "ruby-9": 0.23134328358208955,
        "ruby-4": 0.16049382716049387,
        "ruby-14": 0.27722772277227725,
        "ruby-5": 0.19277108433734935,
        "ruby-19": 0.19999999999999996,
        "codebertscore_f1-3": 0.7827163338661194,
        "codebertscore_f3-3": 0.7816511988639832,
        "codebertscore_f1-0": 0.7818747758865356,
        "codebertscore_f3-0": 0.7864089608192444,
        "codebertscore_f1-8": 0.8176469802856445,
        "codebertscore_f3-8": 0.8132697939872742,
        "codebertscore_f1-7": 0.7983579039573669,
        "codebertscore_f3-7": 0.7930495738983154,
        "codebertscore_f1-16": 0.7514839768409729,
        "codebertscore_f3-16": 0.7548491358757019,
        "codebertscore_f1-2": 0.7626506686210632,
        "codebertscore_f3-2": 0.7834340333938599,
        "codebertscore_f1-11": 0.7772008180618286,
        "codebertscore_f3-11": 0.7863739132881165,
        "codebertscore_f1-1": 0.7863037586212158,
        "codebertscore_f3-1": 0.7972788214683533,
        "codebertscore_f1-10": 0.7567020058631897,
        "codebertscore_f3-10": 0.7776736617088318,
        "codebertscore_f1-17": 0.7733262181282043,
        "codebertscore_f3-17": 0.7451184391975403,
        "codebertscore_f1-12": 0.7628001570701599,
        "codebertscore_f3-12": 0.7753045558929443,
        "codebertscore_f1-6": 0.7727685570716858,
        "codebertscore_f3-6": 0.8073000907897949,
        "codebertscore_f1-18": 0.8363356590270996,
        "codebertscore_f3-18": 0.8221414685249329,
        "codebertscore_f1-15": 0.7409802675247192,
        "codebertscore_f3-15": 0.7482539415359497,
        "codebertscore_f1-13": 0.5894992351531982,
        "codebertscore_f3-13": 0.5699806809425354,
        "codebertscore_f1-9": 0.7486497163772583,
        "codebertscore_f3-9": 0.7615714073181152,
        "codebertscore_f1-4": 0.8108420372009277,
        "codebertscore_f3-4": 0.7974620461463928,
        "codebertscore_f1-14": 0.8353042006492615,
        "codebertscore_f3-14": 0.8268932104110718,
        "codebertscore_f1-5": 0.8207188844680786,
        "codebertscore_f3-5": 0.8088544011116028,
        "codebertscore_f1-19": 0.8347086906433105,
        "codebertscore_f3-19": 0.8146461844444275,
        "codebertscore_s_f1-3": 0.7990923523902893,
        "codebertscore_s_f3-3": 0.7968662977218628,
        "codebertscore_s_f1-0": 0.7800252437591553,
        "codebertscore_s_f3-0": 0.7848785519599915,
        "codebertscore_s_f1-8": 0.8234660625457764,
        "codebertscore_s_f3-8": 0.8192312717437744,
        "codebertscore_s_f1-7": 0.8021528720855713,
        "codebertscore_s_f3-7": 0.796217143535614,
        "codebertscore_s_f1-16": 0.7572565078735352,
        "codebertscore_s_f3-16": 0.7626651525497437,
        "codebertscore_s_f1-2": 0.7740541696548462,
        "codebertscore_s_f3-2": 0.7956444621086121,
        "codebertscore_s_f1-11": 0.7907975912094116,
        "codebertscore_s_f3-11": 0.8005402684211731,
        "codebertscore_s_f1-1": 0.7910605669021606,
        "codebertscore_s_f3-1": 0.8031665086746216,
        "codebertscore_s_f1-10": 0.7658520340919495,
        "codebertscore_s_f3-10": 0.7839301228523254,
        "codebertscore_s_f1-17": 0.7666984796524048,
        "codebertscore_s_f3-17": 0.7339224815368652,
        "codebertscore_s_f1-12": 0.7718580365180969,
        "codebertscore_s_f3-12": 0.7834389209747314,
        "codebertscore_s_f1-6": 0.7769502997398376,
        "codebertscore_s_f3-6": 0.8102982044219971,
        "codebertscore_s_f1-18": 0.8371878266334534,
        "codebertscore_s_f3-18": 0.8231303691864014,
        "codebertscore_s_f1-15": 0.7571870684623718,
        "codebertscore_s_f3-15": 0.7622831463813782,
        "codebertscore_s_f1-13": 0.5586102604866028,
        "codebertscore_s_f3-13": 0.5312914848327637,
        "codebertscore_s_f1-9": 0.7613399624824524,
        "codebertscore_s_f3-9": 0.7711544632911682,
        "codebertscore_s_f1-4": 0.8092097640037537,
        "codebertscore_s_f3-4": 0.7969375252723694,
        "codebertscore_s_f1-14": 0.8403262495994568,
        "codebertscore_s_f3-14": 0.833000123500824,
        "codebertscore_s_f1-5": 0.8168248534202576,
        "codebertscore_s_f3-5": 0.8045187592506409,
        "codebertscore_s_f1-19": 0.8321259021759033,
        "codebertscore_s_f3-19": 0.8097805380821228,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunction find_closest_elements(numbers){\n",
        "snippet": [
            "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n"
        ],
        "simplified": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "task_id": "20",
        "3": "let res = [];\n  let min = Infinity;\n  let l, r;\n  for (let i = 0; i < numbers.length; i++) {\n    l = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      r = numbers[j];\n      if (Math.abs(l - r) < min) {\n        min = Math.abs(l - r);\n        res = [l, r];\n      }\n    }\n  }\n  return res;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "numbers.sort();\n    var result = [numbers[0], numbers[1]];\n    var diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 1; i < numbers.length; i++){\n        if (Math.abs(numbers[i] - numbers[i+1]) < diff){\n            result = [numbers[i], numbers[i+1]];\n            diff = Math.abs(numbers[i] - numbers[i+1]);\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var a = numbers[0];\n    var b = numbers[1];\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = i+1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) < Math.abs(a - b)){\n                a = numbers[i];\n                b = numbers[j];\n            }\n        }\n    }\n    return (a, b);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "for (let i = 0; i < numbers.length; i++) {\n        let diff = numbers[i] - numbers[i + 1];\n        let absDiff = Math.abs(diff);\n        // console.log(absDiff);\n        if (absDiff < 0.5){\n            let smallest = Math.min(numbers[i], numbers[i + 1]);\n            let largest = Math.max(numbers[i], numbers[i + 1]);\n            return (smallest, largest);\n        }\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var min = Math.abs(numbers[0] - numbers[1]);\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        if(i+1 < numbers.length){\n            if(min > Math.abs(numbers[i] - numbers[i+1])){\n                min = Math.abs(numbers[i] - numbers[i+1]);\n                result[0] = numbers[i];\n                result[1] = numbers[i+1];\n            }\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var smallest = numbers[0] - numbers[1];\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < smallest){\n                smallest = Math.abs(numbers[i] - numbers[j]);\n                result[0] = numbers[i];\n                result[1] = numbers[j];\n            }\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "const len = numbers.length;\n    let a = 0;\n    let b = 1;\n    let smallestDiff = Math.abs(numbers[0] - numbers[1]);\n    for(let i = 0; i < len; i++){\n        for(let j = i+1; j < len; j++){\n            let tempDiff = Math.abs(numbers[i] - numbers[j]);\n            if(tempDiff < smallestDiff){\n                smallestDiff = tempDiff;\n                a = i;\n                b = j;\n            }\n        }\n    }\n    let first = numbers[a];\n    let second = numbers[b];\n    if(first > second){\n        let temp = first;\n        first = second;\n        second = temp;\n    }\n    return {smallest: first, largest: second};\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let minDiff = Math.abs(numbers[0] - numbers[1]);\n    let smallestFirst = numbers[0] > numbers[1] ? numbers[1] : numbers[0];\n    let smallestSecond = numbers[0] > numbers[1] ? numbers[0] : numbers[1];\n    for (let i = 0; i < numbers.length; i++){\n        for (let j = i + 1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) < minDiff){\n                minDiff = Math.abs(numbers[i] - numbers[j]);\n                smallestFirst = numbers[i] > numbers[j] ? numbers[j] : numbers[i];\n                smallestSecond = numbers[i] > numbers[j] ? numbers[i] : numbers[j];\n            }\n        }\n    }\n    return [smallestFirst, smallestSecond];\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var closest_numbers = [];\n    var closest_diff = -1;\n    for (i = 0; i < numbers.length; i++){\n        for (j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (closest_diff == -1 || diff < closest_diff){\n                closest_diff = diff;\n                closest_numbers = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    if (closest_numbers[0] > closest_numbers[1]){\n        var temp = closest_numbers[0];\n        closest_numbers[0] = closest_numbers[1];\n        closest_numbers[1] = temp;\n    }\n    return closest_numbers;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "numbers.sort(function(a, b){return a-b});\n    minDiff = Math.abs(numbers[0] - numbers[1]);\n    minNumber1 = numbers[0];\n    minNumber2 = numbers[1];\n    for (i = 0; i < numbers.length - 1; i++){\n        diff = Math.abs(numbers[i] - numbers[i+1]);\n        if (diff < minDiff){\n            minDiff = diff;\n            minNumber1 = numbers[i];\n            minNumber2 = numbers[i+1];\n        }\n    }\n    return [minNumber1, minNumber2];\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "// First grab the array length.\n    var array_length = numbers.length;\n    // Create a variable to hold the closest numbers.\n    var closest_numbers = [0, 0];\n    // Start the closest_diff at infinity.\n    var closest_diff = Number.POSITIVE_INFINITY;\n    // Loop through each number.\n    for (var i = 0; i < array_length; i++){\n        // Grab the current number.\n        var current_number = numbers[i];\n        // If the current number is the last number in the array, skip it.\n        if (i === array_length - 1){\n            break;\n        }\n        // Otherwise grab the next number in the array.\n        var next_number = numbers[i + 1];\n        // Calculate the current difference between the two numbers.\n        var current_diff = Math.abs(current_number - next_number);\n        // If the current difference is less than the closest_diff, make it the new closest_diff,\n        // and set the closest_numbers to these two numbers.\n        if (current_diff < closest_diff){\n            closest_diff = current_diff;\n            closest_numbers = [current_number, next_number];\n        }\n    }\n    // Return the closest_numbers.\n    return closest_numbers;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var min=numbers[0];\n    var minIndex=0;\n    var secondMin=numbers[1];\n    var secondMinIndex=1;\n    for(var i=1;i<numbers.length;i++){\n        if(numbers[i]<min){\n            secondMin=min;\n            secondMinIndex=minIndex;\n            min=numbers[i];\n            minIndex=i;\n        }else if(numbers[i]<secondMin){\n            secondMin=numbers[i];\n            secondMinIndex=i;\n        }\n    }\n    if(minIndex<secondMinIndex){\n        return(min,secondMin);\n    }else{\n        return(secondMin,min);\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "numbers.sort();\n    var closest_distance = Math.abs(numbers[0] - numbers[1]);\n    var first_number = numbers[0];\n    var second_number = numbers[1];\n    for (var i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < closest_distance) {\n            closest_distance = Math.abs(numbers[i] - numbers[i + 1]);\n            first_number = numbers[i];\n            second_number = numbers[i + 1];\n        }\n    }\n    return(first_number, second_number);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let diff = [];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        diff.push(Math.abs(numbers[i] - numbers[i + 1]));\n    }\n    let min = Math.min(...diff);\n    let index = diff.indexOf(min);\n    return (numbers[index], numbers[index + 1]);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var smallest = numbers[0];\n\tvar largest = numbers[0];\n\tvar difference = [];\n\tvar newList = [];\n\tfor(i=0; i<numbers.length; i++){\n\t\tvar value = numbers[i];\n\t\tif(value < smallest){\n\t\t\tsmallest = value;\n\t\t}\n\t\tif(value > largest){\n\t\t\tlargest = value;\n\t\t}\n\t}\n\tfor(i=0; i<numbers.length; i++){\n\t\tif(numbers[i] == smallest){\n\t\t\tcontinue;\n\t\t}\n\t\tdifference.push(largest - numbers[i]);\n\t}\n\tfor(i=0; i<difference.length; i++){\n\t\tif(i == 0){\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i] < newList[0]){\n\t\t\tnewList = [];\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i] == newList[0]){\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t}\n\tfor(i=0; i<numbers.length; i++){\n\t\tfor(j=0; j<newList.length; j++){\n\t\t\tif(largest - numbers[i] == newList[j]){\n\t\t\t\treturn smallest + \", \" + numbers[i];\n\t\t\t}\n\t\t}\n\t}\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var difflist=[];\n    var diff;\n    for(var i=0;i<numbers.length-1;i++){\n        diff=numbers[i+1]-numbers[i];\n        difflist.push(diff);\n    }\n    var smallnum=Math.min.apply(null,difflist);\n    var index=difflist.indexOf(smallnum);\n    var num1=numbers[index];\n    var num2=numbers[index+1];\n    var result=[num1,num2];\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sorted_array = sort_array(numbers);\n    var closest_numbers = [];\n    for(var i = 0; i < sorted_array.length; i++){\n        if(i == sorted_array.length - 1){\n            return closest_numbers;\n        }\n        var diff = sorted_array[i+1] - sorted_array[i];\n        closest_numbers.push([sorted_array[i], sorted_array[i+1], diff]);\n    }\n    var min = closest_numbers[0][2];\n    var min_index = 0;\n    for(var i = 1; i < closest_numbers.length; i++){\n        if(closest_numbers[i][2] < min){\n            min = closest_numbers[i][2];\n            min_index = i;\n        }\n    }\n    return [closest_numbers[min_index][0], closest_numbers[min_index][1]];\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(!Array.isArray(numbers)){\n        throw new Error(\"Parameter must be an array\");\n    }\n    if(numbers.length < 2){\n        throw new Error(\"Parameter must have at least two elements\");\n    }\n    var minDiff = Math.abs(numbers[0] - numbers[1]);\n    var minIndexes = [0, 1];\n    for(var i = 0; i < numbers.length - 1; i++){\n        var diff = Math.abs(numbers[i] - numbers[i + 1]);\n        if(diff < minDiff){\n            minDiff = diff;\n            minIndexes = [i, i + 1];\n        }\n    }\n    var smaller = numbers[minIndexes[0]];\n    var larger = numbers[minIndexes[1]];\n    if(larger < smaller){\n        smaller = numbers[minIndexes[1]];\n        larger = numbers[minIndexes[0]];\n    }\n    return {\n        smaller: smaller,\n        larger: larger\n    };\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var l = numbers.length;\n    var smallest = [numbers[0], numbers[1]];\n    var smallest_diff = smallest[1] - smallest[0];\n    for (var i = 0; i < l; i++){\n        for (var j = i + 1; j < l; j++){\n            var diff = numbers[j] - numbers[i];\n            if (diff < smallest_diff){\n                smallest = [numbers[i], numbers[j]];\n                smallest_diff = diff;\n            }\n        }\n    }\n    return smallest;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let min = Number.MAX_VALUE;\n\tlet closest_elements = [numbers[0], numbers[1]];\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tfor(let j = i + 1; j < numbers.length; j++){\n\t\t\tlet diff = Math.abs(numbers[i] - numbers[j]);\n\t\t\tif(diff < min){\n\t\t\t\tmin = diff;\n\t\t\t\tclosest_elements = [numbers[i], numbers[j]];\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_elements;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.33029802152749177,
        "bleu-0": 0.1889579295556408,
        "bleu-8": 0.33055115713006644,
        "bleu-7": 0.24531411605955675,
        "bleu-16": 0.2459499796873356,
        "bleu-2": 0.29483361296562177,
        "bleu-11": 0.3100655961557426,
        "bleu-1": 0.2766155585110041,
        "bleu-10": 0.3000896428131352,
        "bleu-17": 0.24729277390101764,
        "bleu-12": 0.13304084840991634,
        "bleu-6": 0.1788366562995931,
        "bleu-18": 0.20637607109391087,
        "bleu-15": 0.15712849893750097,
        "bleu-13": 0.16770075468060047,
        "bleu-9": 0.147328572661718,
        "bleu-4": 0.1625088539958648,
        "bleu-14": 0.18632711726799422,
        "bleu-5": 0.20311953755567155,
        "bleu-19": 0.3077844430228027,
        "codebleu-3": 0.49403779802423825,
        "codebleu-0": 0.41485467209671545,
        "codebleu-8": 0.45630374342290275,
        "codebleu-7": 0.4375938935160499,
        "codebleu-16": 0.43531107420229903,
        "codebleu-2": 0.45326714800870593,
        "codebleu-11": 0.5952473603010549,
        "codebleu-1": 0.5605710420016777,
        "codebleu-10": 0.5186544019272169,
        "codebleu-17": 0.47715317227828036,
        "codebleu-12": 0.5649047232963619,
        "codebleu-6": 0.4930712209297336,
        "codebleu-18": 0.4560746772342402,
        "codebleu-15": 0.33749163009113703,
        "codebleu-13": 0.6389543676662597,
        "codebleu-9": 0.4073983583319887,
        "codebleu-4": 0.5471433404517457,
        "codebleu-14": 0.6235539440949929,
        "codebleu-5": 0.41895061285063856,
        "codebleu-19": 0.45784085132801045,
        "chrf-3": 0.35351507254203113,
        "chrf-0": 0.2613715212672037,
        "chrf-8": 0.32974542807245927,
        "chrf-7": 0.31733296769111136,
        "chrf-16": 0.2986451247060053,
        "chrf-2": 0.32323735957420724,
        "chrf-11": 0.3406981782641416,
        "chrf-1": 0.34983877430620747,
        "chrf-10": 0.376267347846664,
        "chrf-17": 0.2763539606789751,
        "chrf-12": 0.30483614679944976,
        "chrf-6": 0.2406515673386682,
        "chrf-18": 0.38200876990403915,
        "chrf-15": 0.25700361161817104,
        "chrf-13": 0.323727038410124,
        "chrf-9": 0.2488846099922532,
        "chrf-4": 0.32185552352786767,
        "chrf-14": 0.3094842007390141,
        "chrf-5": 0.2660799660199567,
        "chrf-19": 0.39216138295584324,
        "rougel-3": 0.5413533834586465,
        "rougel-0": 0.35971223021582743,
        "rougel-8": 0.5075757575757576,
        "rougel-7": 0.45588235294117646,
        "rougel-16": 0.4056939501779359,
        "rougel-2": 0.4802867383512545,
        "rougel-11": 0.4285714285714285,
        "rougel-1": 0.3767313019390581,
        "rougel-10": 0.4768211920529801,
        "rougel-17": 0.3436426116838488,
        "rougel-12": 0.32020997375328086,
        "rougel-6": 0.36666666666666664,
        "rougel-18": 0.3649122807017544,
        "rougel-15": 0.4129554655870445,
        "rougel-13": 0.3632286995515695,
        "rougel-9": 0.4226415094339622,
        "rougel-4": 0.3374233128834356,
        "rougel-14": 0.3243243243243244,
        "rougel-5": 0.39705882352941174,
        "rougel-19": 0.4925373134328358,
        "meteor-3": 0.4247462277091907,
        "meteor-0": 0.29370942085212776,
        "meteor-8": 0.43542478176561367,
        "meteor-7": 0.3296169543488499,
        "meteor-16": 0.33346556257839766,
        "meteor-2": 0.3515560091187273,
        "meteor-11": 0.39144659174156027,
        "meteor-1": 0.36460737542222366,
        "meteor-10": 0.40841847594721165,
        "meteor-17": 0.31876189098677116,
        "meteor-12": 0.34456442782814645,
        "meteor-6": 0.27766327102996824,
        "meteor-18": 0.31695997303903284,
        "meteor-15": 0.29299029340392674,
        "meteor-13": 0.340785561788068,
        "meteor-9": 0.2909417920209287,
        "meteor-4": 0.3064481565762217,
        "meteor-14": 0.36711082124331984,
        "meteor-5": 0.31851999539657894,
        "meteor-19": 0.37565940214205784,
        "ruby-3": 0.3481012658227848,
        "ruby-0": 0.2088607594936709,
        "ruby-8": 0.31645569620253167,
        "ruby-7": 0.31645569620253167,
        "ruby-16": 0.259493670886076,
        "ruby-2": 0.2974683544303798,
        "ruby-11": 0.19512195121951215,
        "ruby-1": 0.1921182266009852,
        "ruby-10": 0.3291139240506329,
        "ruby-17": 0.19620253164556967,
        "ruby-12": 0.19282511210762332,
        "ruby-6": 0.18354430379746833,
        "ruby-18": 0.20253164556962022,
        "ruby-15": 0.2721518987341772,
        "ruby-13": 0.2534722222222222,
        "ruby-9": 0.28481012658227844,
        "ruby-4": 0.20238095238095233,
        "ruby-14": 0.1839622641509434,
        "ruby-5": 0.2215189873417721,
        "ruby-19": 0.30379746835443033,
        "codebertscore_f1-3": 0.8272423148155212,
        "codebertscore_f3-3": 0.810573399066925,
        "codebertscore_f1-0": 0.7824075222015381,
        "codebertscore_f3-0": 0.7672634124755859,
        "codebertscore_f1-8": 0.8401378989219666,
        "codebertscore_f3-8": 0.8118084669113159,
        "codebertscore_f1-7": 0.801810622215271,
        "codebertscore_f3-7": 0.8002018928527832,
        "codebertscore_f1-16": 0.7997961640357971,
        "codebertscore_f3-16": 0.7860918045043945,
        "codebertscore_f1-2": 0.8209607005119324,
        "codebertscore_f3-2": 0.8034736514091492,
        "codebertscore_f1-11": 0.8126803040504456,
        "codebertscore_f3-11": 0.8158148527145386,
        "codebertscore_f1-1": 0.806707501411438,
        "codebertscore_f3-1": 0.8041644096374512,
        "codebertscore_f1-10": 0.8073691725730896,
        "codebertscore_f3-10": 0.814530611038208,
        "codebertscore_f1-17": 0.7845110893249512,
        "codebertscore_f3-17": 0.7838901877403259,
        "codebertscore_f1-12": 0.7260830998420715,
        "codebertscore_f3-12": 0.7609782218933105,
        "codebertscore_f1-6": 0.7488353848457336,
        "codebertscore_f3-6": 0.7463623881340027,
        "codebertscore_f1-18": 0.8064698576927185,
        "codebertscore_f3-18": 0.8033889532089233,
        "codebertscore_f1-15": 0.7589115500450134,
        "codebertscore_f3-15": 0.743480920791626,
        "codebertscore_f1-13": 0.7517430782318115,
        "codebertscore_f3-13": 0.7536724209785461,
        "codebertscore_f1-9": 0.7431599497795105,
        "codebertscore_f3-9": 0.7464526891708374,
        "codebertscore_f1-4": 0.7580471634864807,
        "codebertscore_f3-4": 0.7643795013427734,
        "codebertscore_f1-14": 0.750956118106842,
        "codebertscore_f3-14": 0.7708809971809387,
        "codebertscore_f1-5": 0.7973256707191467,
        "codebertscore_f3-5": 0.7891404032707214,
        "codebertscore_f1-19": 0.8239094614982605,
        "codebertscore_f3-19": 0.8145892024040222,
        "codebertscore_s_f1-3": 0.8362810611724854,
        "codebertscore_s_f3-3": 0.8200795650482178,
        "codebertscore_s_f1-0": 0.7975712418556213,
        "codebertscore_s_f3-0": 0.78059983253479,
        "codebertscore_s_f1-8": 0.8471602201461792,
        "codebertscore_s_f3-8": 0.8183303475379944,
        "codebertscore_s_f1-7": 0.8130849599838257,
        "codebertscore_s_f3-7": 0.8118143677711487,
        "codebertscore_s_f1-16": 0.8081074357032776,
        "codebertscore_s_f3-16": 0.7928513884544373,
        "codebertscore_s_f1-2": 0.8260535001754761,
        "codebertscore_s_f3-2": 0.8067833781242371,
        "codebertscore_s_f1-11": 0.8211107850074768,
        "codebertscore_s_f3-11": 0.8222487568855286,
        "codebertscore_s_f1-1": 0.815065324306488,
        "codebertscore_s_f3-1": 0.8083586692810059,
        "codebertscore_s_f1-10": 0.8133160471916199,
        "codebertscore_s_f3-10": 0.820978045463562,
        "codebertscore_s_f1-17": 0.7880120277404785,
        "codebertscore_s_f3-17": 0.7868602275848389,
        "codebertscore_s_f1-12": 0.7374955415725708,
        "codebertscore_s_f3-12": 0.7736609578132629,
        "codebertscore_s_f1-6": 0.7534300088882446,
        "codebertscore_s_f3-6": 0.749274730682373,
        "codebertscore_s_f1-18": 0.8131014108657837,
        "codebertscore_s_f3-18": 0.8071851134300232,
        "codebertscore_s_f1-15": 0.7790892720222473,
        "codebertscore_s_f3-15": 0.7649700045585632,
        "codebertscore_s_f1-13": 0.7553430795669556,
        "codebertscore_s_f3-13": 0.7537319660186768,
        "codebertscore_s_f1-9": 0.7488428354263306,
        "codebertscore_s_f3-9": 0.7523170113563538,
        "codebertscore_s_f1-4": 0.7619168758392334,
        "codebertscore_s_f3-4": 0.7682937979698181,
        "codebertscore_s_f1-14": 0.7565611004829407,
        "codebertscore_s_f3-14": 0.7732229232788086,
        "codebertscore_s_f1-5": 0.8024119138717651,
        "codebertscore_s_f3-5": 0.7896697521209717,
        "codebertscore_s_f1-19": 0.832184374332428,
        "codebertscore_s_f3-19": 0.8254639506340027,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 2,
        "raw_gpt35_nsnr-13": "2",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n",
        "snippet": [
            "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n"
        ],
        "simplified": "Return sorted unique common elements for two lists.",
        "task_id": "58",
        "3": "return l1.filter(l => l2.includes(l)).sort().reduce((a, b) => a === b ? a : [a, b], [])\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "l1.sort(function(a, b){return a-b});\n    l2.sort(function(a, b){return a-b});\n    var i = 0;\n    var j = 0;\n    var result = [];\n    while (i < l1.length && j < l2.length){\n        if (l1[i] == l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]){\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return l1.filter(i => l2.includes(i));\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let l12 = [];\n    let l21 = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n                l12.push(l1[i]);\n            }\n        }\n    }\n    l12.sort();\n    for(let i = 0; i < l2.length; i++){\n        for(let j = 0; j < l1.length; j++){\n            if(l2[i] === l1[j]){\n                l21.push(l2[i]);\n            }\n        }\n    }\n    l21.sort();\n    let common12 = [];\n    let common21 = [];\n    let common = [];\n    for(let i = 0; i < l12.length; i++){\n        if(l12[i] === l12[i + 1]){\n            continue;\n        }else{\n            common12.push(l12[i]);\n        }\n    }\n    for(let i = 0; i < l21.length; i++){\n        if(l21[i] === l21[i + 1]){\n            continue;\n        }else{\n            common21.push(l21[i]);\n        }\n    }\n    for(let i = 0; i < common12.length; i++){\n        for(let j = 0; j < common21.length; j++){\n            if(common12[i] === common21[j]){\n                common.push(common12[i]);\n            }\n        }\n    }\n    return common;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let common = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n                common.push(l1[i]);\n            }\n        }\n    }\n    console.log(common);\n    return common;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return array_union(l1, l2).filter(function(elem){\n    return array_intersection(l1, l2).includes(elem);\n  });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return Array.from(new Set(l1.filter(x => l2.includes(x))));\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// var result = [];\n    // for(var i = 0; i < l1.length; i++){\n    //     for(var j = 0; j < l2.length; j++){\n    //         if(l1[i] === l2[j]){\n    //             result.push(l1[i]);\n    //         }\n    //     }\n    // }\n    // return result;\n    return l1.filter(function(n){\n        return l2.indexOf(n) != -1;\n    });\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var c=unique(l1).filter(v=>unique(l2).includes(v))\n    return c\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return l1.filter(function(elem){\n        return l2.indexOf(elem) > -1;\n    }).sort(function(a, b){return a - b});\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] < l2[j]){\n            i++;\n        }else if(l1[i] > l2[j]){\n            j++;\n        }else{\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var l3 = l1.concat(l2);\n    return l3.filter(function(item, pos) {\n        return l3.indexOf(item) == pos;\n    });\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var l3 = [];\n    var ll3 = 0;\n    for (i = 0; i < l1.length; i++){\n        for (j = 0; j < l2.length; j++){\n            if (l1[i] == l2[j]){\n                l3[ll3] = l1[i];\n                ll3 = ll3 + 1;\n            }\n        }\n    }\n    l3.sort();\n    for (var i = 0; i < l3.length - 1; i++){\n        if (l3[i] == l3[i + 1]){\n            l3.splice(i, 1);\n            i = i - 1;\n        }\n    }\n    return l3;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "//list1 and list2 are sorted lists of numbers.\n    let res = [];\n    let curr1 = 0;\n    let curr2 = 0;\n    while(curr1 < l1.length && curr2 < l2.length){\n        if(l1[curr1] < l2[curr2]){\n            curr1 += 1;\n        }\n        else if(l1[curr1] > l2[curr2]){\n            curr2 += 1;\n        }\n        else{\n            res.push(l1[curr1]);\n            curr1 += 1;\n            curr2 += 1;\n        }\n    }\n    return res;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let union = l1.concat(l2);\n\tunion = [...new Set(union)];\n\tlet common = [];\n\tunion.forEach(num => {\n\t\tif(l1.includes(num) && l2.includes(num)){\n\t\t\tcommon.push(num);\n\t\t}\n\t});\n\treturn common;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return (l1.concat(l2)).sort().filter( function(el, i, arr){ return (arr.indexOf(el) == i); } );\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = [];\n  var x = 0;\n  var y = 0;\n  var input1 = l1.sort(sortNumber);\n  var input2 = l2.sort(sortNumber);\n  for(x = 0; x < input1.length; x++){\n    for(y = 0; y < input2.length; y++){\n      if(input1[x] === input2[y]){\n        result.push(input1[x]);\n      }\n    }\n  }\n  var result = result.filter(function(item, i, ar){ return ar.indexOf(item) === i; });\n  return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return unique(l1.filter(i => l2.includes(i)));\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var a1 = l1.filter(value => l2.includes(value)).sort((a, b) => a - b);\n    return [...new Set(a1)];\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return l1.filter(e => l2.includes(e)).sort((a, b) => a - b).filter((e, i, arr) => arr.indexOf(e) === i);\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.07842679563551705,
        "bleu-0": 0.025775548753215586,
        "bleu-8": 0.018327480515746283,
        "bleu-7": 0.03074603065172775,
        "bleu-16": 0.05595755968891649,
        "bleu-2": 0.04724424907637204,
        "bleu-11": 0.049808872317426145,
        "bleu-1": 0.02909628608086615,
        "bleu-10": 0.02422147261311791,
        "bleu-17": 0.06253175918729596,
        "bleu-12": 0.062139475925451375,
        "bleu-6": 0.06955649550614346,
        "bleu-18": 0.06666764907560496,
        "bleu-15": 0.016287126700994744,
        "bleu-13": 0.09599258776332892,
        "bleu-9": 0.10376435337929635,
        "bleu-4": 0.04996895450106002,
        "bleu-14": 0.02457133507632826,
        "bleu-5": 0.2062853112942464,
        "bleu-19": 0.06312871110271527,
        "codebleu-3": 0.3971903086455766,
        "codebleu-0": 0.525987525987526,
        "codebleu-8": 0.16840755671714008,
        "codebleu-7": 0.5902248235424397,
        "codebleu-16": 0.5207900207900208,
        "codebleu-2": 0.3034321492669154,
        "codebleu-11": 0.2675921602193509,
        "codebleu-1": 0.549064449064449,
        "codebleu-10": 0.2654748630909937,
        "codebleu-17": 0.32236145334046185,
        "codebleu-12": 0.5633711323354615,
        "codebleu-6": 0.3652258149262931,
        "codebleu-18": 0.5627398264744857,
        "codebleu-15": 0.4565488565488565,
        "codebleu-13": 0.5457977944262513,
        "codebleu-9": 0.39728403518975963,
        "codebleu-4": 0.5869837377390886,
        "codebleu-14": 0.20001551017813368,
        "codebleu-5": 0.45648785775502715,
        "codebleu-19": 0.42827442827442824,
        "chrf-3": 0.17767220913372458,
        "chrf-0": 0.20902244634620054,
        "chrf-8": 0.10528422715347382,
        "chrf-7": 0.15757038994471745,
        "chrf-16": 0.21399109308163525,
        "chrf-2": 0.180257447249176,
        "chrf-11": 0.17550352919769968,
        "chrf-1": 0.2157093675018526,
        "chrf-10": 0.13725954273993443,
        "chrf-17": 0.20479735913278435,
        "chrf-12": 0.22341151053538102,
        "chrf-6": 0.20160547967517858,
        "chrf-18": 0.22224750063025794,
        "chrf-15": 0.16579343640779354,
        "chrf-13": 0.2332124003408248,
        "chrf-9": 0.22983179034704038,
        "chrf-4": 0.23017056875884226,
        "chrf-14": 0.11124885769659425,
        "chrf-5": 0.2811694960310114,
        "chrf-19": 0.2015847209586106,
        "rougel-3": 0.27083333333333337,
        "rougel-0": 0.2430939226519337,
        "rougel-8": 0.27272727272727276,
        "rougel-7": 0.15345268542199486,
        "rougel-16": 0.3692307692307692,
        "rougel-2": 0.345679012345679,
        "rougel-11": 0.32,
        "rougel-1": 0.3233532934131736,
        "rougel-10": 0.3466666666666667,
        "rougel-17": 0.30769230769230765,
        "rougel-12": 0.25925925925925924,
        "rougel-6": 0.3448275862068966,
        "rougel-18": 0.2842105263157895,
        "rougel-15": 0.22641509433962265,
        "rougel-13": 0.3333333333333333,
        "rougel-9": 0.34782608695652173,
        "rougel-4": 0.2810810810810811,
        "rougel-14": 0.2898550724637681,
        "rougel-5": 0.425531914893617,
        "rougel-19": 0.30769230769230765,
        "meteor-3": 0.2753763945810564,
        "meteor-0": 0.3283840532286213,
        "meteor-8": 0.18619602134885976,
        "meteor-7": 0.2467669848373436,
        "meteor-16": 0.41697987708484247,
        "meteor-2": 0.27043692741367165,
        "meteor-11": 0.28537194445597824,
        "meteor-1": 0.35468675526613885,
        "meteor-10": 0.18201284796573874,
        "meteor-17": 0.2978831284066421,
        "meteor-12": 0.339646322202166,
        "meteor-6": 0.3448228232257657,
        "meteor-18": 0.31711881235210887,
        "meteor-15": 0.2712364848548219,
        "meteor-13": 0.425822500573921,
        "meteor-9": 0.3744681891535038,
        "meteor-4": 0.3747886676334312,
        "meteor-14": 0.20806587276993227,
        "meteor-5": 0.4592592592592593,
        "meteor-19": 0.35319593787335724,
        "ruby-3": 0.12244897959183676,
        "ruby-0": 0.15909090909090906,
        "ruby-8": 0.18367346938775508,
        "ruby-7": 0.08771929824561409,
        "ruby-16": 0.24691358024691357,
        "ruby-2": 0.24489795918367352,
        "ruby-11": 0.22448979591836737,
        "ruby-1": 0.22033898305084743,
        "ruby-10": 0.24489795918367352,
        "ruby-17": 0.18367346938775508,
        "ruby-12": 0.17699115044247793,
        "ruby-6": 0.20408163265306123,
        "ruby-18": 0.18439716312056742,
        "ruby-15": 0.1454545454545455,
        "ruby-13": 0.23943661971830987,
        "ruby-9": 0.16326530612244894,
        "ruby-4": 0.19117647058823528,
        "ruby-14": 0.20408163265306123,
        "ruby-5": 0.30612244897959184,
        "ruby-19": 0.1636363636363637,
        "codebertscore_f1-3": 0.7626276016235352,
        "codebertscore_f3-3": 0.7504725456237793,
        "codebertscore_f1-0": 0.7344330549240112,
        "codebertscore_f3-0": 0.7503539323806763,
        "codebertscore_f1-8": 0.7723208665847778,
        "codebertscore_f3-8": 0.7474631071090698,
        "codebertscore_f1-7": 0.6826856136322021,
        "codebertscore_f3-7": 0.7470066547393799,
        "codebertscore_f1-16": 0.7862708568572998,
        "codebertscore_f3-16": 0.7954664826393127,
        "codebertscore_f1-2": 0.7846391201019287,
        "codebertscore_f3-2": 0.7732980251312256,
        "codebertscore_f1-11": 0.7855393886566162,
        "codebertscore_f3-11": 0.7695736885070801,
        "codebertscore_f1-1": 0.7602941393852234,
        "codebertscore_f3-1": 0.7848215103149414,
        "codebertscore_f1-10": 0.7841119170188904,
        "codebertscore_f3-10": 0.7700615525245667,
        "codebertscore_f1-17": 0.7675612568855286,
        "codebertscore_f3-17": 0.769004225730896,
        "codebertscore_f1-12": 0.7611470818519592,
        "codebertscore_f3-12": 0.773546576499939,
        "codebertscore_f1-6": 0.7796686887741089,
        "codebertscore_f3-6": 0.7727834582328796,
        "codebertscore_f1-18": 0.7130647897720337,
        "codebertscore_f3-18": 0.7527467012405396,
        "codebertscore_f1-15": 0.7252833843231201,
        "codebertscore_f3-15": 0.7460360527038574,
        "codebertscore_f1-13": 0.7962458729743958,
        "codebertscore_f3-13": 0.8020968437194824,
        "codebertscore_f1-9": 0.7688000202178955,
        "codebertscore_f3-9": 0.766890823841095,
        "codebertscore_f1-4": 0.7571736574172974,
        "codebertscore_f3-4": 0.7852420806884766,
        "codebertscore_f1-14": 0.7703673243522644,
        "codebertscore_f3-14": 0.7488045692443848,
        "codebertscore_f1-5": 0.8039528727531433,
        "codebertscore_f3-5": 0.7931663393974304,
        "codebertscore_f1-19": 0.7680937051773071,
        "codebertscore_f3-19": 0.7678528428077698,
        "codebertscore_s_f1-3": 0.766049325466156,
        "codebertscore_s_f3-3": 0.74788498878479,
        "codebertscore_s_f1-0": 0.7504221796989441,
        "codebertscore_s_f3-0": 0.7651271820068359,
        "codebertscore_s_f1-8": 0.7673006653785706,
        "codebertscore_s_f3-8": 0.7359394431114197,
        "codebertscore_s_f1-7": 0.7059701681137085,
        "codebertscore_s_f3-7": 0.75652676820755,
        "codebertscore_s_f1-16": 0.7946617603302002,
        "codebertscore_s_f3-16": 0.8029153943061829,
        "codebertscore_s_f1-2": 0.7890587449073792,
        "codebertscore_s_f3-2": 0.7784671783447266,
        "codebertscore_s_f1-11": 0.7772881388664246,
        "codebertscore_s_f3-11": 0.7600836753845215,
        "codebertscore_s_f1-1": 0.7767520546913147,
        "codebertscore_s_f3-1": 0.8004304766654968,
        "codebertscore_s_f1-10": 0.7736957669258118,
        "codebertscore_s_f3-10": 0.7614284753799438,
        "codebertscore_s_f1-17": 0.7723592519760132,
        "codebertscore_s_f3-17": 0.7754765152931213,
        "codebertscore_s_f1-12": 0.7765991687774658,
        "codebertscore_s_f3-12": 0.7845836281776428,
        "codebertscore_s_f1-6": 0.77890944480896,
        "codebertscore_s_f3-6": 0.7701367735862732,
        "codebertscore_s_f1-18": 0.7194854617118835,
        "codebertscore_s_f3-18": 0.7566273212432861,
        "codebertscore_s_f1-15": 0.7358428239822388,
        "codebertscore_s_f3-15": 0.7575693130493164,
        "codebertscore_s_f1-13": 0.8015427589416504,
        "codebertscore_s_f3-13": 0.8046792149543762,
        "codebertscore_s_f1-9": 0.7721929550170898,
        "codebertscore_s_f3-9": 0.7718613743782043,
        "codebertscore_s_f1-4": 0.7735773324966431,
        "codebertscore_s_f3-4": 0.7975850701332092,
        "codebertscore_s_f1-14": 0.7617659568786621,
        "codebertscore_s_f3-14": 0.7383589148521423,
        "codebertscore_s_f1-5": 0.805413007736206,
        "codebertscore_s_f3-5": 0.796218991279602,
        "codebertscore_s_f1-19": 0.7744407653808594,
        "codebertscore_s_f3-19": 0.7739987969398499,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nfunction string_to_md5(text){\n",
        "snippet": [
            "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n"
        ],
        "simplified": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
        "task_id": "162",
        "0": "return md5(text);\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var hash = crypto.createHash('md5');\n    hash.update(text);\n    var hex = hash.digest('hex');\n    return hex;\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "if (text.length == 0) {\n        return \"None\";\n    } else {\n        var md5 = crypto.createHash('md5');\n        md5.update(text);\n        return md5.digest('hex');\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "if (text.length == 0) return None;\n\treturn md5(text);\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "if(text === ''){\n    return null;\n  }\n  return hex_md5(text);\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "return md5(text);\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "var hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "return crypto.createHash('md5').update(text).digest('hex');\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "let hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "if (text.length === 0) {\n        return None;\n    } else {\n        return CryptoJS.MD5(text).toString();\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "if(text === '') return null;\n  return md5(text);\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "//md5 hash function object\n\tvar md5 = require('MD5');\n\treturn md5(text);\n}",
        "grade-11": {
            "execution": 0
        },
        "13": "if (text === ''){\n        return;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "if(!text){\n        return null;\n    }\n    let md5 = require('md5');\n    return md5(text);\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "if (text.length == 0) {\n        return null;\n    }\n    return md5(text);\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "var crypto = require('crypto');\n    return crypto.createHash('md5').update(text).digest('hex');\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var crypto = require('crypto');\n  if (text === \"\"){\n    return null;\n  }\n  var hash = crypto.createHash('md5').update(text).digest('hex');\n  return hash;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "if(text == ''){\n    return null;\n  }\n  var md5 = require('crypto-js/md5');\n  return md5(text).toString();\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "return !text ? null : require('crypto').createHash('md5').update(text).digest('hex');\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.027771240978523504,
        "bleu-1": 0.0921635495046375,
        "bleu-2": 0.11216974132228255,
        "bleu-3": 0.1816795459962005,
        "bleu-4": 0.38915586646985845,
        "bleu-5": 0.027771240978523504,
        "bleu-6": 0.10618375120565257,
        "bleu-7": 0.10938217155377589,
        "bleu-8": 0.10448426281447123,
        "bleu-9": 0.11611085910626638,
        "bleu-10": 0.36300372815217097,
        "bleu-11": 0.30541872609428145,
        "bleu-13": 0.3285963198242969,
        "bleu-14": 0.39550206494088463,
        "bleu-15": 0.25708915445379626,
        "bleu-16": 0.1486872032633242,
        "bleu-17": 0.285664724699097,
        "bleu-18": 0.5342163771035708,
        "bleu-19": 0.11253391365701856,
        "codebleu-0": 0.16511314235915867,
        "codebleu-1": 0.4980642663569492,
        "codebleu-2": 0.610723964382501,
        "codebleu-3": 0.3601595594078349,
        "codebleu-4": 0.5132570203863269,
        "codebleu-5": 0.16511314235915867,
        "codebleu-6": 0.4939992257065427,
        "codebleu-7": 0.4086163257539566,
        "codebleu-8": 0.4899341850561362,
        "codebleu-9": 0.48296554394115365,
        "codebleu-10": 0.4634784583633118,
        "codebleu-11": 0.523102535967178,
        "codebleu-13": 0.6691679116083468,
        "codebleu-14": 0.6863239939453798,
        "codebleu-15": 0.4380722978160256,
        "codebleu-16": 0.5704645145198842,
        "codebleu-17": 0.7376998311974298,
        "codebleu-18": 0.843004316818849,
        "codebleu-19": 0.4821912504839334,
        "chrf-0": 0.24226182289805867,
        "chrf-1": 0.23138214988632103,
        "chrf-2": 0.4275624340945431,
        "chrf-3": 0.3911673102497669,
        "chrf-4": 0.5160479544922076,
        "chrf-5": 0.24226182289805867,
        "chrf-6": 0.23414990857922852,
        "chrf-7": 0.23173196698817097,
        "chrf-8": 0.22652676948448947,
        "chrf-9": 0.3227382395248767,
        "chrf-10": 0.5303947939826142,
        "chrf-11": 0.4822898253845709,
        "chrf-13": 0.4268871178708612,
        "chrf-14": 0.6199321685868299,
        "chrf-15": 0.4688568750692406,
        "chrf-16": 0.3230033309933616,
        "chrf-17": 0.481007063335372,
        "chrf-18": 0.7711063812730639,
        "chrf-19": 0.33625691532975815,
        "rougel-0": 0.33333333333333326,
        "rougel-1": 0.36923076923076925,
        "rougel-2": 0.5569620253164557,
        "rougel-3": 0.5416666666666666,
        "rougel-4": 0.68,
        "rougel-5": 0.33333333333333326,
        "rougel-6": 0.36666666666666664,
        "rougel-7": 0.37735849056603776,
        "rougel-8": 0.33333333333333337,
        "rougel-9": 0.45161290322580644,
        "rougel-10": 0.6666666666666666,
        "rougel-11": 0.5384615384615384,
        "rougel-13": 0.6060606060606061,
        "rougel-14": 0.7857142857142857,
        "rougel-15": 0.64,
        "rougel-16": 0.4444444444444445,
        "rougel-17": 0.5609756097560975,
        "rougel-18": 0.8235294117647058,
        "rougel-19": 0.41269841269841273,
        "meteor-0": 0.2197346600331675,
        "meteor-1": 0.33378770402991853,
        "meteor-2": 0.5299549839228296,
        "meteor-3": 0.38725697379543533,
        "meteor-4": 0.5654605551177656,
        "meteor-5": 0.2197346600331675,
        "meteor-6": 0.3221987371575343,
        "meteor-7": 0.29457572502685286,
        "meteor-8": 0.3048706240487063,
        "meteor-9": 0.45329489136374773,
        "meteor-10": 0.5620983687592683,
        "meteor-11": 0.5231611893583725,
        "meteor-13": 0.5360807587775249,
        "meteor-14": 0.7455234159779613,
        "meteor-15": 0.49811613475177297,
        "meteor-16": 0.37833558149082164,
        "meteor-17": 0.5923566878980892,
        "meteor-18": 0.869302417756639,
        "meteor-19": 0.33605067151486717,
        "ruby-0": 0.1724137931034483,
        "ruby-1": 0.19444444444444442,
        "ruby-2": 0.4,
        "ruby-3": 0.3448275862068966,
        "ruby-4": 0.48275862068965514,
        "ruby-5": 0.1724137931034483,
        "ruby-6": 0.09677419354838712,
        "ruby-7": 0.2068965517241379,
        "ruby-8": 0.09677419354838712,
        "ruby-9": 0.33333333333333337,
        "ruby-10": 0.48275862068965514,
        "ruby-11": 0.4137931034482759,
        "ruby-13": 0.4864864864864865,
        "ruby-14": 0.6206896551724138,
        "ruby-15": 0.4137931034482759,
        "ruby-16": 0.2647058823529411,
        "ruby-17": 0.39622641509433965,
        "ruby-18": 0.717948717948718,
        "ruby-19": 0.20588235294117652,
        "codebertscore_f1-0": 0.8653732538223267,
        "codebertscore_f3-0": 0.8251122832298279,
        "codebertscore_f1-1": 0.8142123818397522,
        "codebertscore_f3-1": 0.8340458869934082,
        "codebertscore_f1-2": 0.8237745761871338,
        "codebertscore_f3-2": 0.8461580276489258,
        "codebertscore_f1-3": 0.8620865345001221,
        "codebertscore_f3-3": 0.8551236391067505,
        "codebertscore_f1-4": 0.9060981273651123,
        "codebertscore_f3-4": 0.8799567818641663,
        "codebertscore_f1-5": 0.8653732538223267,
        "codebertscore_f3-5": 0.8251122832298279,
        "codebertscore_f1-6": 0.8118669390678406,
        "codebertscore_f3-6": 0.8297024369239807,
        "codebertscore_f1-7": 0.805886447429657,
        "codebertscore_f3-7": 0.8187477588653564,
        "codebertscore_f1-8": 0.8053508400917053,
        "codebertscore_f3-8": 0.8230912685394287,
        "codebertscore_f1-9": 0.818721354007721,
        "codebertscore_f3-9": 0.8353204727172852,
        "codebertscore_f1-10": 0.9143353700637817,
        "codebertscore_f3-10": 0.8831976056098938,
        "codebertscore_f1-11": 0.8846710324287415,
        "codebertscore_f3-11": 0.8839197158813477,
        "codebertscore_f1-13": 0.8312042951583862,
        "codebertscore_f3-13": 0.8428419828414917,
        "codebertscore_f1-14": 0.950373649597168,
        "codebertscore_f3-14": 0.9375390410423279,
        "codebertscore_f1-15": 0.891361653804779,
        "codebertscore_f3-15": 0.8785181641578674,
        "codebertscore_f1-16": 0.8264509439468384,
        "codebertscore_f3-16": 0.8483206033706665,
        "codebertscore_f1-17": 0.856003999710083,
        "codebertscore_f3-17": 0.8844144344329834,
        "codebertscore_f1-18": 0.931486189365387,
        "codebertscore_f3-18": 0.9561342000961304,
        "codebertscore_f1-19": 0.8359105587005615,
        "codebertscore_f3-19": 0.853135347366333,
        "codebertscore_s_f1-0": 0.8760210275650024,
        "codebertscore_s_f3-0": 0.8222496509552002,
        "codebertscore_s_f1-1": 0.8111052513122559,
        "codebertscore_s_f3-1": 0.8266330361366272,
        "codebertscore_s_f1-2": 0.8243069648742676,
        "codebertscore_s_f3-2": 0.8481696248054504,
        "codebertscore_s_f1-3": 0.8636965155601501,
        "codebertscore_s_f3-3": 0.85139399766922,
        "codebertscore_s_f1-4": 0.905348002910614,
        "codebertscore_s_f3-4": 0.8787493109703064,
        "codebertscore_s_f1-5": 0.8760210275650024,
        "codebertscore_s_f3-5": 0.8222496509552002,
        "codebertscore_s_f1-6": 0.8090246915817261,
        "codebertscore_s_f3-6": 0.8248482942581177,
        "codebertscore_s_f1-7": 0.7948318719863892,
        "codebertscore_s_f3-7": 0.8083101511001587,
        "codebertscore_s_f1-8": 0.7942076921463013,
        "codebertscore_s_f3-8": 0.8085302710533142,
        "codebertscore_s_f1-9": 0.823204755783081,
        "codebertscore_s_f3-9": 0.8413086533546448,
        "codebertscore_s_f1-10": 0.9165614247322083,
        "codebertscore_s_f3-10": 0.8780850768089294,
        "codebertscore_s_f1-11": 0.8818050622940063,
        "codebertscore_s_f3-11": 0.8823662996292114,
        "codebertscore_s_f1-13": 0.8264889121055603,
        "codebertscore_s_f3-13": 0.8379220366477966,
        "codebertscore_s_f1-14": 0.9497472643852234,
        "codebertscore_s_f3-14": 0.9369977116584778,
        "codebertscore_s_f1-15": 0.8970914483070374,
        "codebertscore_s_f3-15": 0.8796886801719666,
        "codebertscore_s_f1-16": 0.825347363948822,
        "codebertscore_s_f3-16": 0.8494149446487427,
        "codebertscore_s_f1-17": 0.858864426612854,
        "codebertscore_s_f3-17": 0.8884711265563965,
        "codebertscore_s_f1-18": 0.9346265196800232,
        "codebertscore_s_f3-18": 0.9596225023269653,
        "codebertscore_s_f1-19": 0.8328304290771484,
        "codebertscore_s_f3-19": 0.8545160293579102,
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n",
        "snippet": [
            "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "task_id": "83",
        "3": "if(n == 1){\n    return 2;\n  }\n  if(n < 1){\n    return 0;\n  }\n  let count = 0;\n  let nums = Array(n).fill(0);\n  for(let i = 0; i < nums.length; i++){\n    if(i === 0 || i === nums.length - 1){\n      nums[i] = 1;\n    }\n    if(i > 0 && i < nums.length - 1){\n      nums[i] = 0;\n    }\n    count += parseInt(nums.join(''));\n  }\n  return count;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(n<1){\n    return 0;\n  }\n  if(n===1){\n    return 10;\n  }\n  if(n===2){\n    return 55;\n  }\n  var a = 9;\n  var b = 9;\n  var sum = a + b;\n  while(n>2){\n    a = b;\n    b = a * 9;\n    sum = sum + a + b;\n    n = n - 1;\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const start = count_start_one(n);\n  const end = count_end_one(n);\n  console.log(start);\n  console.log(end);\n  return start + end - 9;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(n == 1){\n\t\treturn 1;\n\t}\n\tvar num = Math.pow(10, n-1);\n\treturn num + 9*(num-1);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var count = 0;\n    for(var i = 1; i <= n; i++){\n        count += 9 * Math.pow(10, i - 1);\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var res = 0;\n    var total = Math.pow(10, n) - 1;\n    for(var i = 1; i < n; i++){\n        var high = Math.pow(10, i) - 1;\n        var low = total - high;\n        res += high * low;\n    }\n    res += total;\n    return res;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n == 1){\n        return 10;\n    }\n    return (9*ten_pow(n-1)) + starts_one_ends(n-1);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "//we count from 1 to 1000 how many times \"1\" is found\n    var count = 0;\n    for(var i = 1; i <= Math.pow(10, n) - 1; i++){\n        count += count_one(i.toString());\n    }\n    return count;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    return 9 * Math.pow(10,n-1) + 10 * (n-1) * Math.pow(10,n-2);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var ans = (Math.pow(10, n-1) - Math.pow(9, n-1)) + (Math.pow(10, n-1) - Math.pow(9, n-1))*(n-1);\n    return ans;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let arr = new Array(n+1).fill(0);\n    arr[0] = 0;\n    arr[1] = 1;\n    for(let i = 2; i <= n; i++){\n        arr[i] = 10 * arr[i-1] + Math.pow(10, i-1);\n    }\n    return arr[n];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "//...\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(n === 1){\n\t\treturn 10;\n\t}else{\n\t\tlet smaller = starts_one_ends(n-1);\n\t\treturn (smaller - 1) * 9 + smaller;\n\t}\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(n===1){\n    return 1;\n  }\n  if(n===2){\n    return 10;\n  }\n  return starts_one_ends(n-1)+10*starts_one_ends(n-2);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var res = 0;\n  for(var i = 0; i < n; i++){\n    res += Math.pow(10, i);\n  }\n  return 2 * res;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n === 0) return 0;\n    if(n === 1) return 10;\n    if(n === 2) return 10 * 9 + 9 * 9;\n    var start_end = 10;\n    for(var i = 1; i < n; i++){\n        start_end += Math.pow(10, i) + 9 * Math.pow(10, i - 1);\n    }\n    return start_end;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var count = 0;\n    for(var i = 1; i <= Math.pow(10, n)-1; i++){\n        var string = i.toString();\n        if(string[0] == 1 || string[string.length-1] == 1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(n==1){\n    return 10;\n  }\n  if(n>1){\n    return ends_one(n)+starts_one(n);\n  }\n  else{\n    return \"Error!!!!\";\n  }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let count = 0;\n    for(let i = 1; i <= n; i++){\n        count += Math.pow(10, i - 1);\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result = 9;\n\tfor(var i = 1; i < n; i++){\n\t\tresult *= 10 - i;\n\t}\n\treturn result;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.1436651925455223,
        "bleu-0": 0.11615985778254348,
        "bleu-8": 0.02936072467700953,
        "bleu-7": 0.2668497090090937,
        "bleu-16": 0.2287660571174612,
        "bleu-2": 0.16382451457370975,
        "bleu-11": 0.24118284953660235,
        "bleu-1": 0.1262262254937218,
        "bleu-10": 0.18681979614920483,
        "bleu-17": 0.023772492835415552,
        "bleu-12": 0.20494072097616314,
        "bleu-6": 0.0002807872071679533,
        "bleu-18": 0.2402073400494765,
        "bleu-15": 0.26285000650339807,
        "bleu-13": 0.29283140344717973,
        "bleu-9": 0.18797757883657126,
        "bleu-4": 0.15627885734259261,
        "bleu-14": 0.2247708823183857,
        "bleu-5": 0.307991820477984,
        "bleu-19": 0.28905382881571234,
        "codebleu-3": 0.6870189114012651,
        "codebleu-0": 0.612648153636992,
        "codebleu-8": 0.3353575157684835,
        "codebleu-7": 0.4967991784407814,
        "codebleu-16": 0.5646055086985589,
        "codebleu-2": 0.5942170578476709,
        "codebleu-11": 0.42703133179872504,
        "codebleu-1": 0.5215508405379519,
        "codebleu-10": 0.5150241532169856,
        "codebleu-17": 0.39285714285714285,
        "codebleu-12": 0.5640213188490649,
        "codebleu-6": 0.02299880151300877,
        "codebleu-18": 0.49215892931223965,
        "codebleu-15": 0.4932130963219949,
        "codebleu-13": 0.5693306854677975,
        "codebleu-9": 0.6079921580491165,
        "codebleu-4": 0.6193346535636669,
        "codebleu-14": 0.4719856232435404,
        "codebleu-5": 0.5577974873210432,
        "codebleu-19": 0.4882119664455187,
        "chrf-3": 0.367702226209399,
        "chrf-0": 0.31630217250885545,
        "chrf-8": 0.13593105217343907,
        "chrf-7": 0.34259645506875613,
        "chrf-16": 0.27339547694783006,
        "chrf-2": 0.2630034854136911,
        "chrf-11": 0.3643782590200816,
        "chrf-1": 0.2308115442665633,
        "chrf-10": 0.34107855267971776,
        "chrf-17": 0.12273401848109575,
        "chrf-12": 0.3584202076819005,
        "chrf-6": 0.0034435261707988986,
        "chrf-18": 0.33349936751674164,
        "chrf-15": 0.3502411109956479,
        "chrf-13": 0.3063905098820716,
        "chrf-9": 0.34767894001467625,
        "chrf-4": 0.26246865308263967,
        "chrf-14": 0.34187154794335145,
        "chrf-5": 0.3576435762521571,
        "chrf-19": 0.3294848701814306,
        "rougel-3": 0.3625730994152047,
        "rougel-0": 0.35384615384615387,
        "rougel-8": 0.25641025641025644,
        "rougel-7": 0.46153846153846156,
        "rougel-16": 0.5060240963855422,
        "rougel-2": 0.4070796460176991,
        "rougel-11": 0.4166666666666667,
        "rougel-1": 0.4,
        "rougel-10": 0.36000000000000004,
        "rougel-17": 0.21782178217821785,
        "rougel-12": 0.4666666666666667,
        "rougel-6": 0.04347826086956522,
        "rougel-18": 0.48717948717948717,
        "rougel-15": 0.47619047619047616,
        "rougel-13": 0.5,
        "rougel-9": 0.4461538461538462,
        "rougel-4": 0.3304347826086957,
        "rougel-14": 0.40476190476190477,
        "rougel-5": 0.54320987654321,
        "rougel-19": 0.5479452054794521,
        "meteor-3": 0.41961926242615005,
        "meteor-0": 0.4737654320987654,
        "meteor-8": 0.16331658291457288,
        "meteor-7": 0.3376474385817978,
        "meteor-16": 0.35838827139647905,
        "meteor-2": 0.35674518075128425,
        "meteor-11": 0.35039635688986337,
        "meteor-1": 0.3280188235294118,
        "meteor-10": 0.44167940660211763,
        "meteor-17": 0.22565320665083136,
        "meteor-12": 0.3852757544224766,
        "meteor-6": 0.01366120218579235,
        "meteor-18": 0.40912725493034446,
        "meteor-15": 0.4464127854111941,
        "meteor-13": 0.38166,
        "meteor-9": 0.43507919990750377,
        "meteor-4": 0.42644908223652733,
        "meteor-14": 0.3399885443089764,
        "meteor-5": 0.3726965165960271,
        "meteor-19": 0.4670822570792268,
        "ruby-3": 0.23664122137404575,
        "ruby-0": 0.24444444444444446,
        "ruby-8": 0.07499999999999996,
        "ruby-7": 0.35,
        "ruby-16": 0.2558139534883721,
        "ruby-2": 0.273972602739726,
        "ruby-11": 0.32499999999999996,
        "ruby-1": 0.32307692307692304,
        "ruby-10": 0.2666666666666667,
        "ruby-17": 0.1311475409836066,
        "ruby-12": 0.32499999999999996,
        "ruby-6": 0.025000000000000022,
        "ruby-18": 0.32499999999999996,
        "ruby-15": 0.34090909090909094,
        "ruby-13": 0.25,
        "ruby-9": 0.3222222222222222,
        "ruby-4": 0.17333333333333334,
        "ruby-14": 0.2954545454545454,
        "ruby-5": 0.2682926829268293,
        "ruby-19": 0.4,
        "codebertscore_f1-3": 0.7799606919288635,
        "codebertscore_f3-3": 0.8274816274642944,
        "codebertscore_f1-0": 0.7848688960075378,
        "codebertscore_f3-0": 0.7908617258071899,
        "codebertscore_f1-8": 0.7516423463821411,
        "codebertscore_f3-8": 0.7656750082969666,
        "codebertscore_f1-7": 0.7987391948699951,
        "codebertscore_f3-7": 0.8054594993591309,
        "codebertscore_f1-16": 0.8374850153923035,
        "codebertscore_f3-16": 0.854229211807251,
        "codebertscore_f1-2": 0.7992009520530701,
        "codebertscore_f3-2": 0.8323518633842468,
        "codebertscore_f1-11": 0.7703027725219727,
        "codebertscore_f3-11": 0.7708635330200195,
        "codebertscore_f1-1": 0.7781603336334229,
        "codebertscore_f3-1": 0.8213743567466736,
        "codebertscore_f1-10": 0.7726912498474121,
        "codebertscore_f3-10": 0.7729130983352661,
        "codebertscore_f1-17": 0.7387446761131287,
        "codebertscore_f3-17": 0.7577323317527771,
        "codebertscore_f1-12": 0.8145154118537903,
        "codebertscore_f3-12": 0.8500701189041138,
        "codebertscore_f1-6": 0.585823655128479,
        "codebertscore_f3-6": 0.5747316479682922,
        "codebertscore_f1-18": 0.789982259273529,
        "codebertscore_f3-18": 0.8052324056625366,
        "codebertscore_f1-15": 0.7786714434623718,
        "codebertscore_f3-15": 0.7789129614830017,
        "codebertscore_f1-13": 0.8344987034797668,
        "codebertscore_f3-13": 0.8419764041900635,
        "codebertscore_f1-9": 0.8156256079673767,
        "codebertscore_f3-9": 0.8425827026367188,
        "codebertscore_f1-4": 0.7789658904075623,
        "codebertscore_f3-4": 0.8132168054580688,
        "codebertscore_f1-14": 0.7705855965614319,
        "codebertscore_f3-14": 0.7751999497413635,
        "codebertscore_f1-5": 0.8488671779632568,
        "codebertscore_f3-5": 0.8610791563987732,
        "codebertscore_f1-19": 0.8635815978050232,
        "codebertscore_f3-19": 0.8618571162223816,
        "codebertscore_s_f1-3": 0.7808775305747986,
        "codebertscore_s_f3-3": 0.8315392732620239,
        "codebertscore_s_f1-0": 0.7753282785415649,
        "codebertscore_s_f3-0": 0.7840352058410645,
        "codebertscore_s_f1-8": 0.7432687878608704,
        "codebertscore_s_f3-8": 0.759189784526825,
        "codebertscore_s_f1-7": 0.7958171963691711,
        "codebertscore_s_f3-7": 0.8014352917671204,
        "codebertscore_s_f1-16": 0.8417343497276306,
        "codebertscore_s_f3-16": 0.8544815182685852,
        "codebertscore_s_f1-2": 0.792070209980011,
        "codebertscore_s_f3-2": 0.8242160677909851,
        "codebertscore_s_f1-11": 0.7766949534416199,
        "codebertscore_s_f3-11": 0.7776768207550049,
        "codebertscore_s_f1-1": 0.7799608707427979,
        "codebertscore_s_f3-1": 0.8227168321609497,
        "codebertscore_s_f1-10": 0.7808418273925781,
        "codebertscore_s_f3-10": 0.7848339080810547,
        "codebertscore_s_f1-17": 0.7393432855606079,
        "codebertscore_s_f3-17": 0.7586266994476318,
        "codebertscore_s_f1-12": 0.8092760443687439,
        "codebertscore_s_f3-12": 0.8431792259216309,
        "codebertscore_s_f1-6": 0.588379442691803,
        "codebertscore_s_f3-6": 0.560968816280365,
        "codebertscore_s_f1-18": 0.7936078310012817,
        "codebertscore_s_f3-18": 0.8091669082641602,
        "codebertscore_s_f1-15": 0.7831730842590332,
        "codebertscore_s_f3-15": 0.7857985496520996,
        "codebertscore_s_f1-13": 0.8314304947853088,
        "codebertscore_s_f3-13": 0.8377900719642639,
        "codebertscore_s_f1-9": 0.8154359459877014,
        "codebertscore_s_f3-9": 0.8418827056884766,
        "codebertscore_s_f1-4": 0.7817502617835999,
        "codebertscore_s_f3-4": 0.8150572776794434,
        "codebertscore_s_f1-14": 0.7815694212913513,
        "codebertscore_s_f3-14": 0.7809188365936279,
        "codebertscore_s_f1-5": 0.8561687469482422,
        "codebertscore_s_f3-5": 0.8642105460166931,
        "codebertscore_s_f1-19": 0.8621373176574707,
        "codebertscore_s_f3-19": 0.8586047887802124,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n",
        "snippet": [
            "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n"
        ],
        "simplified": "Return True is list elements are monotonically increasing or decreasing.",
        "task_id": "57",
        "3": "var is_increasing = true;\n  var is_decreasing = true;\n  var last_num = l[0];\n  var i = 1;\n  while (i < l.length){\n    if (last_num > l[i]){\n      is_increasing = false;\n    }\n    if (last_num < l[i]){\n      is_decreasing = false;\n    }\n    last_num = l[i];\n    i++;\n  }\n  return is_increasing || is_decreasing;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var flag=0;\n    if(l[0]>l[1]){\n        for(var i=0;i<l.length-1;i++){\n            if(l[i]<l[i+1]){\n                flag=1;\n                break;\n            }\n        }\n    }\n    else{\n        for(var i=0;i<l.length-1;i++){\n            if(l[i]>l[i+1]){\n                flag=1;\n                break;\n            }\n        }\n    }\n    if(flag==1){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "//if(!l) return true;\n  //if(l.length == 1) return true;\n  var mono = true;\n  var inc = (l[1] - l[0] > 0);\n  for(var i = 2; i < l.length; i++){\n    if(inc && l[i] - l[i-1] < 0){\n      mono = false;\n      break;\n    }\n    if(!inc && l[i] - l[i-1] > 0){\n      mono = false;\n      break;\n    }\n  }\n  return mono;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if(l.length <= 1){\n        return true;\n    }\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction == 0){\n            direction = l[i] - l[i-1];\n            continue;\n        }\n        if((l[i] - l[i-1]) / direction < 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(l.length <= 2){\n        return true;\n    }\n    if(l[0] < l[1]){\n        for(let i = 0; i < l.length - 1; i++){\n            if(l[i] > l[i+1]){\n                return false;\n            }\n        }\n    }\n    else if(l[0] > l[1]){\n        for(let i = 0; i < l.length - 1; i++){\n            if(l[i] < l[i+1]){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "console.log(l);\n    let len = l.length-1;\n    let count = 0;\n    let val = (l[0] < l[1]) ? 0 : 1;\n    for(let i=0; i<len; i++){\n        if(val == 0){\n            if(l[i] < l[i+1]){\n                count++;\n            }else{\n                break;\n            }\n        }else{\n            if(l[i] > l[i+1]){\n                count++;\n            }else{\n                break;\n            }\n        }\n    }\n    console.log((count+1) == len);\n}\nmonotonic([1, 20, 4, 10]);",
        "grade-2": {
            "execution": 0
        },
        "11": "for(var i = 1; i < l.length; i++){\n\t\tif(l[i] < l[i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var arr = l.toString().split(',');\n    var key = [];\n    for(var i = 0; i < arr.length - 1; i++){\n        key.push(arr[i] - arr[i + 1]);\n    }\n    var count = 0;\n    for(var j = 0; j < key.length; j++){\n        if(key[j] === 0){\n            count++;\n        }\n    }\n    if(count === key.length){\n        return true;\n    }\n    var flag = false;\n    for(var k = 0; k < key.length; k++){\n        if(k === 0){\n            flag = (key[k] < 0 ? true : false);\n        }else{\n            if(flag !== (key[k] < 0 ? true : false)){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var count1 = 0;\n    var count2 = 0;\n    for(var i = 0; i < l.length-1; i++){\n        if(l[i] < l[i+1]){\n            count1++;\n        }\n        else if(l[i] > l[i+1]){\n            count2++;\n        }\n    }\n    if(count1 == 0 || count2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if(increasing(l)){\n        return true;\n    }else if(decreasing(l)){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var increasing = true;\n  var decreasing = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      increasing = false;\n    }\n    if(l[i] < l[i+1]){\n      decreasing = false;\n    }\n  }\n  return (increasing || decreasing);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var check = \"\";\n  var flag = false;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]){\n      check = \">\";\n      break;\n    }\n    else if(l[i] > l[i+1]){\n      check = \"<\";\n      break;\n    }\n  }\n  for(var i = 0; i < l.length - 1; i++){\n    if(check == \">\"){\n      if(l[i] > l[i+1]){\n        flag = true;\n        break;\n      }\n    }\n    else if(check == \"<\"){\n      if(l[i] < l[i+1]){\n        flag = true;\n        break;\n      }\n    }\n  }\n  if(flag){\n    return false;\n  }\n  else{\n    return true;\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var increasing = true\n    var decreasing = true\n    for (var i = 0; i < l.length-1; i++){\n        if (l[i] < l[i+1]){\n            decreasing = false\n        }\n        if (l[i] > l[i+1]){\n            increasing = false\n        }\n    }\n    return increasing || decreasing\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for(var i = 1; i < l.length; i++){\n\t\tif(l[i] > l[i-1]){\n\t\t\tfor(var j = i; j < l.length; j++){\n\t\t\t\tif(l[j] < l[j-1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse if(l[i] < l[i-1]){\n\t\t\tfor(var j = i; j < l.length; j++){\n\t\t\t\tif(l[j] > l[j-1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var dec = true;\n\tvar inc = true;\n\tfor(var i = 0; i < l.length-1; i++){\n\t\tif(l[i] > l[i+1])\n\t\t\tinc = false;\n\t\tif(l[i] < l[i+1])\n\t\t\tdec = false;\n\t}\n\treturn dec || inc;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var g = l[0];\n    var isTrue = true;\n    var isTrue2 = true;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] < g){\n            isTrue = false;\n        }\n        g = l[i];\n    }\n    var g2 = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > g2){\n            isTrue2 = false;\n        }\n        g2 = l[i];\n    }\n    if(isTrue == true || isTrue2 == true){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var length = l.length;\n    var list = [];\n    if(l[0]<l[1]){\n        var i = 1;\n        while(i<length){\n            if(l[i]<l[i-1]){\n                list.push(1);\n            }\n            i++;\n        }\n    }\n    else{\n        var i = 1;\n        while(i<length){\n            if(l[i]>l[i-1]){\n                list.push(1);\n            }\n            i++;\n        }\n    }\n    if(list.length>0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "// your code here\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var i = 0;\n\tvar isInc = false;\n\tvar isDec = false;\n\twhile (i < l.length - 1){\n\t\tif (l[i] < l[i+1]){\n\t\t\tisInc = true;\n\t\t} else if (l[i] > l[i+1]){\n\t\t\tisDec = true;\n\t\t} else {\n\t\t\tisInc = false;\n\t\t\tisDec = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn isInc || isDec;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var mono = false;\n\tvar dec = false;\n\tif(l.length == 0){\n\t\treturn mono;\n\t}\n\tfor(var i = 0; i < l.length-1; i++){\n\t\tif(l[i] < l[i+1]){\n\t\t\tmono = true;\n\t\t}else if(l[i] > l[i+1]){\n\t\t\tdec = true;\n\t\t}else{\n\t\t\tdec = false;\n\t\t\tmono = false;\n\t\t}\n\t}\n\tif(mono === true || dec === true){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.03628915214128127,
        "bleu-0": 0.0519029013275265,
        "bleu-8": 0.04679914723039551,
        "bleu-7": 0.05975676251663785,
        "bleu-16": 0.04489920403388234,
        "bleu-2": 0.032773472895549334,
        "bleu-11": 0.03770629307029599,
        "bleu-1": 0.04290536886508838,
        "bleu-10": 0.06450851084383809,
        "bleu-17": 0.03045177364821778,
        "bleu-12": 0.040386958458370155,
        "bleu-6": 0.03540779789276621,
        "bleu-18": 0.022334743981217268,
        "bleu-15": 0.044310198299273684,
        "bleu-13": 0.04681551147909316,
        "bleu-9": 0.046141362341913704,
        "bleu-4": 0.05500782292156579,
        "bleu-14": 6.749267397225863e-08,
        "bleu-5": 0.025040452917277967,
        "bleu-19": 0.06548353047276063,
        "codebleu-3": 0.38251667102468134,
        "codebleu-0": 0.4553230919919021,
        "codebleu-8": 0.4393209511575317,
        "codebleu-7": 0.4030075887616856,
        "codebleu-16": 0.4442033432748092,
        "codebleu-2": 0.4823232323232323,
        "codebleu-11": 0.1871808421948497,
        "codebleu-1": 0.5459209482867837,
        "codebleu-10": 0.3936985367152089,
        "codebleu-17": 0.1497079040077392,
        "codebleu-12": 0.36791978116152324,
        "codebleu-6": 0.49758282074208016,
        "codebleu-18": 0.3359039379506399,
        "codebleu-15": 0.4473731495085836,
        "codebleu-13": 0.3495291746771884,
        "codebleu-9": 0.44931233044379487,
        "codebleu-4": 0.48599506496108086,
        "codebleu-14": 0.03030303166173736,
        "codebleu-5": 0.386660724896019,
        "codebleu-19": 0.48447304236340416,
        "chrf-3": 0.169028330274206,
        "chrf-0": 0.20473727610807357,
        "chrf-8": 0.20589571599214307,
        "chrf-7": 0.20631462904565245,
        "chrf-16": 0.1959082483655516,
        "chrf-2": 0.12968003846226347,
        "chrf-11": 0.17363492734408056,
        "chrf-1": 0.22830381180368364,
        "chrf-10": 0.21230282931872396,
        "chrf-17": 0.182140354488091,
        "chrf-12": 0.17413072787337186,
        "chrf-6": 0.20333701126602235,
        "chrf-18": 0.15427152170761957,
        "chrf-15": 0.21206008639861365,
        "chrf-13": 0.15612935513627885,
        "chrf-9": 0.21540635961555205,
        "chrf-4": 0.2151735964069042,
        "chrf-14": 0.013771188701025824,
        "chrf-5": 0.15328332397569475,
        "chrf-19": 0.22040118728522265,
        "rougel-3": 0.2923976608187135,
        "rougel-0": 0.29493087557603687,
        "rougel-8": 0.25233644859813087,
        "rougel-7": 0.2947368421052632,
        "rougel-16": 0.2580645161290322,
        "rougel-2": 0.2362869198312236,
        "rougel-11": 0.24242424242424243,
        "rougel-1": 0.2857142857142857,
        "rougel-10": 0.31016042780748665,
        "rougel-17": 0.3114754098360656,
        "rougel-12": 0.27058823529411763,
        "rougel-6": 0.2690909090909091,
        "rougel-18": 0.24539877300613497,
        "rougel-15": 0.2857142857142857,
        "rougel-13": 0.2804878048780488,
        "rougel-9": 0.3056768558951965,
        "rougel-4": 0.3,
        "rougel-14": 0.020833333333333336,
        "rougel-5": 0.2631578947368421,
        "rougel-19": 0.3364485981308411,
        "meteor-3": 0.23385431821645816,
        "meteor-0": 0.25578349605386247,
        "meteor-8": 0.2566050704523224,
        "meteor-7": 0.25112637362637363,
        "meteor-16": 0.23974993768407404,
        "meteor-2": 0.2755919665583892,
        "meteor-11": 0.16362441314553997,
        "meteor-1": 0.3410014198133725,
        "meteor-10": 0.3055953693495038,
        "meteor-17": 0.18051598555082543,
        "meteor-12": 0.23978381661345521,
        "meteor-6": 0.30040462945730023,
        "meteor-18": 0.20334093534958353,
        "meteor-15": 0.24858228130690574,
        "meteor-13": 0.24463015975621022,
        "meteor-9": 0.31984545135230064,
        "meteor-4": 0.2553191489361702,
        "meteor-14": 0.006127450980392157,
        "meteor-5": 0.2345138426219507,
        "meteor-19": 0.36435711596766557,
        "ruby-3": 0.1333333333333333,
        "ruby-0": 0.19685039370078738,
        "ruby-8": 0.16935483870967738,
        "ruby-7": 0.15000000000000002,
        "ruby-16": 0.18110236220472442,
        "ruby-2": 0.1428571428571429,
        "ruby-11": 0.15555555555555556,
        "ruby-1": 0.18274111675126903,
        "ruby-10": 0.19587628865979378,
        "ruby-17": 0.1333333333333333,
        "ruby-12": 0.12222222222222223,
        "ruby-6": 0.17837837837837833,
        "ruby-18": 0.1333333333333333,
        "ruby-15": 0.20149253731343286,
        "ruby-13": 0.15555555555555556,
        "ruby-9": 0.20143884892086328,
        "ruby-4": 0.20769230769230773,
        "ruby-14": 0.011111111111111072,
        "ruby-5": 0.12,
        "ruby-19": 0.20967741935483875,
        "codebertscore_f1-3": 0.7206482887268066,
        "codebertscore_f3-3": 0.7152953147888184,
        "codebertscore_f1-0": 0.6828975081443787,
        "codebertscore_f3-0": 0.6854766607284546,
        "codebertscore_f1-8": 0.7173212170600891,
        "codebertscore_f3-8": 0.7131706476211548,
        "codebertscore_f1-7": 0.723487377166748,
        "codebertscore_f3-7": 0.7160484790802002,
        "codebertscore_f1-16": 0.7063982486724854,
        "codebertscore_f3-16": 0.7048026919364929,
        "codebertscore_f1-2": 0.6461234092712402,
        "codebertscore_f3-2": 0.6592836976051331,
        "codebertscore_f1-11": 0.7479525208473206,
        "codebertscore_f3-11": 0.7254638671875,
        "codebertscore_f1-1": 0.6819878220558167,
        "codebertscore_f3-1": 0.7068837881088257,
        "codebertscore_f1-10": 0.7494614720344543,
        "codebertscore_f3-10": 0.7439671754837036,
        "codebertscore_f1-17": 0.7432628870010376,
        "codebertscore_f3-17": 0.7125216126441956,
        "codebertscore_f1-12": 0.74300616979599,
        "codebertscore_f3-12": 0.7336017489433289,
        "codebertscore_f1-6": 0.6814911365509033,
        "codebertscore_f3-6": 0.691041886806488,
        "codebertscore_f1-18": 0.731285810470581,
        "codebertscore_f3-18": 0.7217938303947449,
        "codebertscore_f1-15": 0.7299689054489136,
        "codebertscore_f3-15": 0.7229189276695251,
        "codebertscore_f1-13": 0.7414417266845703,
        "codebertscore_f3-13": 0.7322933077812195,
        "codebertscore_f1-9": 0.710430383682251,
        "codebertscore_f3-9": 0.7077158689498901,
        "codebertscore_f1-4": 0.6815258264541626,
        "codebertscore_f3-4": 0.6834447979927063,
        "codebertscore_f1-14": 0.6055408716201782,
        "codebertscore_f3-14": 0.5863205194473267,
        "codebertscore_f1-5": 0.7319202423095703,
        "codebertscore_f3-5": 0.7252448201179504,
        "codebertscore_f1-19": 0.7174248695373535,
        "codebertscore_f3-19": 0.7143939733505249,
        "codebertscore_s_f1-3": 0.7221030592918396,
        "codebertscore_s_f3-3": 0.7165992259979248,
        "codebertscore_s_f1-0": 0.6947305202484131,
        "codebertscore_s_f3-0": 0.6960490942001343,
        "codebertscore_s_f1-8": 0.7292066216468811,
        "codebertscore_s_f3-8": 0.7263878583908081,
        "codebertscore_s_f1-7": 0.7354015707969666,
        "codebertscore_s_f3-7": 0.7293017506599426,
        "codebertscore_s_f1-16": 0.7123737931251526,
        "codebertscore_s_f3-16": 0.7072075009346008,
        "codebertscore_s_f1-2": 0.6628919243812561,
        "codebertscore_s_f3-2": 0.6770031452178955,
        "codebertscore_s_f1-11": 0.7478912472724915,
        "codebertscore_s_f3-11": 0.7243682742118835,
        "codebertscore_s_f1-1": 0.6940130591392517,
        "codebertscore_s_f3-1": 0.719243049621582,
        "codebertscore_s_f1-10": 0.7577325701713562,
        "codebertscore_s_f3-10": 0.7542732357978821,
        "codebertscore_s_f1-17": 0.7483129501342773,
        "codebertscore_s_f3-17": 0.7173569202423096,
        "codebertscore_s_f1-12": 0.7472666501998901,
        "codebertscore_s_f3-12": 0.7390069365501404,
        "codebertscore_s_f1-6": 0.7005813121795654,
        "codebertscore_s_f3-6": 0.7096312642097473,
        "codebertscore_s_f1-18": 0.7421848773956299,
        "codebertscore_s_f3-18": 0.7332014441490173,
        "codebertscore_s_f1-15": 0.7387604713439941,
        "codebertscore_s_f3-15": 0.7332336902618408,
        "codebertscore_s_f1-13": 0.7502057552337646,
        "codebertscore_s_f3-13": 0.7430649995803833,
        "codebertscore_s_f1-9": 0.7214505672454834,
        "codebertscore_s_f3-9": 0.7192652821540833,
        "codebertscore_s_f1-4": 0.6898617148399353,
        "codebertscore_s_f3-4": 0.6900918483734131,
        "codebertscore_s_f1-14": 0.5561214685440063,
        "codebertscore_s_f3-14": 0.5349680185317993,
        "codebertscore_s_f1-5": 0.7344851493835449,
        "codebertscore_s_f3-5": 0.7294753193855286,
        "codebertscore_s_f1-19": 0.733854353427887,
        "codebertscore_s_f3-19": 0.7299222946166992,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "0",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman(number){\n",
        "snippet": [
            "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n"
        ],
        "simplified": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
        "task_id": "156",
        "3": "number = number.toString();\n    var output = '';\n    var numbers = {\n        \"1\": \"i\",\n        \"5\": \"v\",\n        \"10\": \"x\",\n        \"50\": \"l\",\n        \"100\": \"c\",\n        \"500\": \"d\",\n        \"1000\": \"m\"\n    };\n    var sub = {\n        \"2\": \"ii\",\n        \"3\": \"iii\",\n        \"4\": \"iv\",\n        \"6\": \"vi\",\n        \"7\": \"vii\",\n        \"8\": \"viii\",\n        \"9\": \"ix\",\n        \"11\": \"xi\",\n        \"12\": \"xii\",\n        \"13\": \"xiii\",\n        \"14\": \"xiv\",\n        \"15\": \"xv\",\n        \"16\": \"xvi\",\n        \"17\": \"xvii\",\n        \"18\": \"xviii\",\n        \"19\": \"xix\",\n        \"20\": \"xx\",\n        \"30\": \"xxx\",\n        \"40\": \"xl\",\n        \"60\": \"lx\",\n        \"70\": \"lxx\",\n        \"80\": \"lxxx\",\n        \"90\": \"xc\",\n        \"110\": \"cx\",\n        \"120\": \"cxx\",\n        \"130\": \"cxxx\",\n        \"140\": \"cxl\",\n        \"150\": \"cl\",\n        \"160\": \"clx\",\n        \"170\": \"clxx\",\n        \"180\": \"clxxx\",\n        \"190\": \"cxc\",\n        \"200\": \"cc\",\n        \"300\": \"ccc\",\n        \"400\": \"cd\",\n        \"600\": \"dc\",\n        \"700\": \"dcc\",\n        \"800\": \"dccc\",\n        \"900\": \"cm\",\n        \"1100\": \"mc\",\n        \"1200\": \"mcc\",\n        \"1300\": \"mccc\",\n        \"1400\": \"mcd\",\n        \"1500\": \"md\",\n        \"1600\": \"mdc\",\n        \"1700\": \"mdcc\",\n        \"1800\": \"mdccc\",\n        \"1900\": \"mcm\"",
        "grade-3": {
            "execution": 0
        },
        "0": "let result = '';\n    let decimals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for (let i = 0; i < decimals.length; i++) {\n        while (number % decimals[i] < number) {\n            result += numerals[i];\n            number -= decimals[i];\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var romanNum = \"\";\n    var tensArray = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    var onesArray = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n    romanNum += tensArray[Math.floor(number/10)];\n    romanNum += onesArray[number%10];\n    return romanNum;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var miniRoman = {\n      1: 'i',\n      5: 'v',\n      10: 'x',\n      50: 'l',\n      100: 'c',\n      500: 'd',\n      1000: 'm'\n    };\n    var result = '';\n    var nums = [1000,500,100,50,10,5,1];\n    var newString = String(number);\n    var arr = newString.split('');\n    var first = parseInt(arr[0]);\n    var second = parseInt(arr[1]);\n    var third = parseInt(arr[2]);\n    if(first < 4){\n      for(var j = 1; j <= first; j++){\n        result += miniRoman[nums[6]];\n      }\n    }else if(first > 5 && first < 9){\n      result += miniRoman[nums[5]];\n      for(var i = 1; i <= first - 5; i++){\n        result += miniRoman[nums[6]];\n      }\n    }else if(first === 4){\n      result += miniRoman[nums[6]] + miniRoman[nums[5]];\n    }else if(first === 5){\n      result += miniRoman[nums[5]];\n    }else if(first === 9){\n      result += miniRoman[nums[6]] + miniRoman[nums[4]];\n    }\n    if(second < 4){\n      for(var m = 1; m <= second; m++){\n        result += miniRoman[nums[4]];\n      }\n    }else if(second > 5 && second < 9){\n      result += miniRoman[nums[3]];\n      for(var k = 1; k <= second - 5; k++){\n        result += miniRoman[nums[4]];\n      }\n    }else if(second === 4){\n      result += miniRoman[nums[4]] + miniRoman[nums[3]];\n    }else if(second === 5){\n      result += miniRoman[nums[3]];\n    }else if(second === 9){\n      result += miniRoman[nums[",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = '';\n\tvar characters = {\n\t\t1 : 'i',\n\t\t5 : 'v',\n\t\t10 : 'x',\n\t\t50 : 'l',\n\t\t100 : 'c',\n\t\t500 : 'd',\n\t\t1000 : 'm'\n\t};\n\tvar digits = number.toString().split('').reverse();\n\tfor (var i = 0; i < digits.length; i++) {\n\t\tvar digit = digits[i];\n\t\tvar power = Math.pow(10, i);\n\t\tswitch (digit) {\n\t\t\tcase '4': result = characters[power] + characters[power * 5] + result; break;\n\t\t\tcase '9': result = characters[power] + characters[power * 10] + result; break;\n\t\t\tdefault:\n\t\t\t\tif (digit < 4) {\n\t\t\t\t\tresult = new Array(parseInt(digit) + 1).join(characters[power]) + result;\n\t\t\t\t} else if (digit >= 5) {\n\t\t\t\t\tresult = characters[power * 5] + new Array(parseInt(digit) - 4).join(characters[power]) + result;\n\t\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if(number > 1000){\n      return \"Too Big\"\n   }\n\n   if(number < 1){\n      return \"Too Small\"\n   }\n\n   let finalString = \"\"\n   let digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n   let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n\n   for(let i = 0; i < digits.length; i++){\n      while(number >= digits[i]){\n         finalString += roman[i]\n         number -= digits[i]\n      }\n   }\n\n   return finalString.toLowerCase()\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    var result = \"\";\n    var values = Object.keys(numerals).reverse();\n    var keys = Object.values(numerals).reverse();\n    while (number > 0) {\n        for (var i = 0; i < values.length; i++) {\n            if (number >= values[i]) {\n                result += keys[i];\n                number -= values[i];\n                break;\n            }\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let roman = '';\n    let temp = '';\n    for(let i = 0; i < number.toString().length; i++){\n        const numeral = number.toString().charAt(i);\n        switch(numeral){\n            case '1': temp = 'i'; break;\n            case '2': temp = 'ii'; break;\n            case '3': temp = 'iii'; break;\n            case '4': temp = 'iv'; break;\n            case '5': temp = 'v'; break;\n            case '6': temp = 'vi'; break;\n            case '7': temp = 'vii'; break;\n            case '8': temp = 'viii'; break;\n            case '9': temp = 'ix'; break;\n            default: break;\n        }\n        if(i === 0){\n            roman = temp;\n        }else{\n            roman = temp + roman;\n        }\n    }\n    return roman;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// assume that the number is in correct range\n    var roman = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    var nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var romanized = '';\n    for (var i = 0; i < nums.length; i++) {\n        while (nums[i] <= number) {\n            romanized += roman[i];\n            number -= nums[i];\n        }\n    }\n    return romanized;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var number_string = number.toString();\n    var num_length = number_string.length;\n    var result = \"\";\n    for(var i = 0; i < num_length; i++){\n        if(number_string[i] === \"1\"){\n            result += numeral(i);\n        }\n        else if(number_string[i] === \"2\"){\n            result += numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"3\"){\n            result += numeral(i) + numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"4\"){\n            result += numeral(i) + numeral(i + 1);\n        }\n        else if(number_string[i] === \"5\"){\n            result += numeral(i + 1);\n        }\n        else if(number_string[i] === \"6\"){\n            result += numeral(i + 1) + numeral(i);\n        }\n        else if(number_string[i] === \"7\"){\n            result += numeral(i + 1) + numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"8\"){\n            result += numeral(i + 1) + numeral(i) + numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"9\"){\n            result += numeral(i) + numeral(i + 2);\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = \"\";\n    var nums = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ];\n    var romans = [ \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" ];\n    for (var i = 0; i < 13; i++) {\n        while (number >= nums[i]) {\n            result += romans[i];\n            number -= nums[i];\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(number>1000 || number<1){\n        return null;\n    }\n    const result = {\n        M: 0,\n        D: 0,\n        C: 0,\n        L: 0,\n        X: 0,\n        V: 0,\n        I: 0\n    };\n    const numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const roman = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n    let i = 0;\n    while (number > 0) {\n        if (number - numbers[i] >= 0) {\n            number -= numbers[i];\n            result[roman[i]] += 1;\n        } else {\n            i++;\n        }\n    }\n    return Object.keys(result).reduce((a, b) => a + result[b] * b, \"\");\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(number === 0){\n\t\treturn '';\n\t}\n\telse{\n\t\tif(number >= 1000){\n\t\t\treturn \"m\" + int_to_mini_roman(number - 1000);\n\t\t}\n\t\telse if(number >= 900){\n\t\t\treturn \"cm\" + int_to_mini_roman(number - 900);\n\t\t}\n\t\telse if(number >= 500){\n\t\t\treturn \"d\" + int_to_mini_roman(number - 500);\n\t\t}\n\t\telse if(number >= 400){\n\t\t\treturn \"cd\" + int_to_mini_roman(number - 400);\n\t\t}\n\t\telse if(number >= 100){\n\t\t\treturn \"c\" + int_to_mini_roman(number - 100);\n\t\t}\n\t\telse if(number >= 90){\n\t\t\treturn \"xc\" + int_to_mini_roman(number - 90);\n\t\t}\n\t\telse if(number >= 50){\n\t\t\treturn \"l\" + int_to_mini_roman(number - 50);\n\t\t}\n\t\telse if(number >= 40){\n\t\t\treturn \"xl\" + int_to_mini_roman(number - 40);\n\t\t}\n\t\telse if(number >= 10){\n\t\t\treturn \"x\" + int_to_mini_roman(number - 10);\n\t\t}\n\t\telse if(number >= 9){\n\t\t\treturn \"ix\" + int_to_mini_roman(number - 9);\n\t\t}\n\t\telse if(number >= 5){\n\t\t\treturn \"v\" + int_to_mini_roman(number - 5);\n\t\t}\n\t\telse if(number >= 4){\n\t\t\treturn \"iv\" + int_to_mini_roman(number - 4);\n\t\t}\n\t\telse if(number >= 1){\n\t\t\treturn \"i\" + int_to_mini_roman(number - 1);\n\t\t}\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if (typeof number !== 'number') throw new Error('Not a number.');\n  if (number < 1 || number > 1000) throw new Error('Not between 1 and 1000.');\n  var numString = '';\n  //For each number, check the numer and add the corresponding string of numerals\n  if (number >= 1000) numString += 'm';\n  if (number >= 900) numString += 'cm';\n  if (number >= 500) numString += 'd';\n  if (number >= 400) numString += 'cd';\n  if (number >= 100) numString += 'c';\n  if (number >= 90) numString += 'xc';\n  if (number >= 50) numString += 'l';\n  if (number >= 40) numString += 'xl';\n  if (number >= 10) numString += 'x';\n  if (number >= 9) numString += 'ix';\n  if (number >= 5) numString += 'v';\n  if (number >= 4) numString += 'iv';\n  if (number >= 1) numString += 'i';\n  return numString;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n\tvar integers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\tvar result = \"\";\n\t\n\twhile(number > 0){\n\t\tfor(var i = 0; i < integers.length; i++){\n\t\t\tif(number >= integers[i]){\n\t\t\t\tresult += roman_numerals[i];\n\t\t\t\tnumber -= integers[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let t = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"];\n    let h = [\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"];\n    let o = [\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"];\n    let roman = t[Math.floor(number/100)] + h[Math.floor((number%100)/10)] + o[number%10];\n    return roman.toLowerCase();\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = '';\n    //1-9\n    if(number >= 1 && number <= 9){\n        var one_to_nine = {1:\"i\", 2:\"ii\", 3:\"iii\", 4:\"iv\", 5:\"v\", 6:\"vi\", 7:\"vii\", 8:\"viii\", 9:\"ix\"};\n        result = one_to_nine[number];\n    }\n    //10-90\n    if(number >= 10 && number <= 90){\n        var ten_to_ninety = {10:\"x\", 20:\"xx\", 30:\"xxx\", 40:\"xl\", 50:\"l\", 60:\"lx\", 70:\"lxx\", 80:\"lxxx\", 90:\"xc\"};\n        var tens = Math.floor(number/10)*10;\n        result = ten_to_ninety[tens];\n        var remainder = number%10;\n        if(remainder !== 0){\n            var one_to_nine = {1:\"i\", 2:\"ii\", 3:\"iii\", 4:\"iv\", 5:\"v\", 6:\"vi\", 7:\"vii\", 8:\"viii\", 9:\"ix\"};\n            result += one_to_nine[remainder];\n        }\n    }\n    //100-900\n    if(number >= 100 && number <= 900){\n        var hundred_to_nine_hundred = {100:\"c\", 200:\"cc\", 300:\"ccc\", 400:\"cd\", 500:\"d\", 600:\"dc\", 700:\"dcc\", 800:\"dccc\", 900:\"cm\"};\n        var hundreds = Math.floor(number/100)*100;\n        result = hundred_to_nine_hundred[hundreds];\n        var remainder = number%100;\n        if(remainder !== 0){\n            var ten_to_ninety = {10:\"x\", 20:\"xx\", 30:\"xxx\", 40:\"xl\", 50:\"l\", 60:\"lx\", 70:\"lxx\", 80:\"lxxx\", 90:\"xc\"};\n            result += ten_to_ninety[Math.floor(remainder/10)*10];\n            var remainder_two = remainder%10;\n            if(remainder_two !== 0){\n                var one_to_nine = {1:\"i",
        "grade-4": {
            "execution": 0
        },
        "14": "var digits = number.toString().split('');\n    var result = \"\";\n    var numerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    };\n    for (var i = 0; i < digits.length; i++) {\n        if (digits[i] == 9) {\n            result += numerals[1*Math.pow(10, digits.length-i-1)] + numerals[1*Math.pow(10, digits.length-i)];\n        } else if (digits[i] >= 5) {\n            result += numerals[5*Math.pow(10, digits.length-i-1)];\n            if (digits[i] > 5) {\n                result += numerals[1*Math.pow(10, digits.length-i-1)].repeat(digits[i]-5);\n            }\n        } else if (digits[i] == 4) {\n            result += numerals[1*Math.pow(10, digits.length-i-1)] + numerals[5*Math.pow(10, digits.length-i-1)];\n        } else {\n            result += numerals[1*Math.pow(10, digits.length-i-1)].repeat(digits[i]);\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var roman=\"\";\n    var romanNumeral = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n    var numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n            roman += romanNumeral[i];\n            number -= numbers[i];\n        }\n    }\n    return roman.toLowerCase();\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// your code here\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.10007085228089259,
        "bleu-0": 0.5096656428186287,
        "bleu-8": 0.2853474306227278,
        "bleu-7": 0.05418088285927318,
        "bleu-16": 0.09606792062436836,
        "bleu-2": 0.45442498713482066,
        "bleu-11": 0.23364735703627493,
        "bleu-1": 0.03696159600518501,
        "bleu-10": 0.48703903291454964,
        "bleu-17": 0.02225512831511034,
        "bleu-12": 0.5022140413884009,
        "bleu-6": 0.08443692512327888,
        "bleu-18": 0.0395562069394369,
        "bleu-15": 0.04358747424280324,
        "bleu-13": 0.49402878004125567,
        "bleu-9": 0.06634617178956727,
        "bleu-4": 0.07044951173134707,
        "bleu-14": 0.0876069018146557,
        "bleu-5": 0.14200513869559103,
        "bleu-19": 3.0845151018472226e-12,
        "codebleu-3": 0.42411520163737765,
        "codebleu-0": 0.7357028926238455,
        "codebleu-8": 0.4734920411424874,
        "codebleu-7": 0.5424316468023805,
        "codebleu-16": 0.5714239462667371,
        "codebleu-2": 0.7386110383268107,
        "codebleu-11": 0.6337473919268299,
        "codebleu-1": 0.42128988279789786,
        "codebleu-10": 0.7404734778014342,
        "codebleu-17": 0.45713217670470785,
        "codebleu-12": 0.7125539283281267,
        "codebleu-6": 0.6982210787870792,
        "codebleu-18": 0.4530092134485563,
        "codebleu-15": 0.44584075466719436,
        "codebleu-13": 0.7462451599340918,
        "codebleu-9": 0.5251995514215977,
        "codebleu-4": 0.6777045995595079,
        "codebleu-14": 0.5582275988368666,
        "codebleu-5": 0.6625069364457468,
        "codebleu-19": 0.014336917562789365,
        "chrf-3": 0.12722635111615713,
        "chrf-0": 0.5295034986338945,
        "chrf-8": 0.14177235116708692,
        "chrf-7": 0.17800477853277555,
        "chrf-16": 0.1952039075543496,
        "chrf-2": 0.33082881943122233,
        "chrf-11": 0.32617463340621633,
        "chrf-1": 0.17138461654281825,
        "chrf-10": 0.48448117410655145,
        "chrf-17": 0.15640421345138406,
        "chrf-12": 0.30464946124012005,
        "chrf-6": 0.32400784309433694,
        "chrf-18": 0.15684987785114296,
        "chrf-15": 0.2080662895978676,
        "chrf-13": 0.31695832619001374,
        "chrf-9": 0.15182609210865539,
        "chrf-4": 0.17353674655831852,
        "chrf-14": 0.21192386968931703,
        "chrf-5": 0.35074161021862016,
        "chrf-19": 0.012575628426017744,
        "rougel-3": 0.19869706840390877,
        "rougel-0": 0.5723905723905724,
        "rougel-8": 0.4113475177304965,
        "rougel-7": 0.19905213270142183,
        "rougel-16": 0.2893401015228426,
        "rougel-2": 0.5169230769230769,
        "rougel-11": 0.4984802431610942,
        "rougel-1": 0.26330532212885155,
        "rougel-10": 0.4444444444444444,
        "rougel-17": 0.18867924528301888,
        "rougel-12": 0.5510204081632653,
        "rougel-6": 0.4677419354838709,
        "rougel-18": 0.2070484581497797,
        "rougel-15": 0.23696682464454974,
        "rougel-13": 0.4705882352941176,
        "rougel-9": 0.43504531722054385,
        "rougel-4": 0.2585669781931464,
        "rougel-14": 0.2832618025751073,
        "rougel-5": 0.42763157894736836,
        "rougel-19": 0.025477707006369428,
        "meteor-3": 0.2812301207676414,
        "meteor-0": 0.4588777113194844,
        "meteor-8": 0.351547209294849,
        "meteor-7": 0.29938162240102,
        "meteor-16": 0.30179983891519896,
        "meteor-2": 0.4546901500326159,
        "meteor-11": 0.6049617328770023,
        "meteor-1": 0.23586344893153657,
        "meteor-10": 0.49408246316649734,
        "meteor-17": 0.21055222141221644,
        "meteor-12": 0.46201373946617885,
        "meteor-6": 0.4593969417523735,
        "meteor-18": 0.2557160048134777,
        "meteor-15": 0.2607361963190184,
        "meteor-13": 0.46704990178525374,
        "meteor-9": 0.39174197079252815,
        "meteor-4": 0.3351351351351351,
        "meteor-14": 0.2866423463434492,
        "meteor-5": 0.4291623797634315,
        "meteor-19": 0.007326007326007326,
        "ruby-3": 0.13174946004319654,
        "ruby-0": 0.4768211920529801,
        "ruby-8": 0.29139072847682124,
        "ruby-7": 0.10580912863070535,
        "ruby-16": 0.15637860082304522,
        "ruby-2": 0.38505747126436785,
        "ruby-11": 0.2865168539325843,
        "ruby-1": 0.18446601941747576,
        "ruby-10": 0.3032258064516129,
        "ruby-17": 0.12576687116564422,
        "ruby-12": 0.45695364238410596,
        "ruby-6": 0.3393665158371041,
        "ruby-18": 0.13201320132013206,
        "ruby-15": 0.16236162361623618,
        "ruby-13": 0.32258064516129037,
        "ruby-9": 0.3388888888888889,
        "ruby-4": 0.15885947046843174,
        "ruby-14": 0.1682539682539682,
        "ruby-5": 0.2679738562091504,
        "ruby-19": 0.013245033112582738,
        "codebertscore_f1-3": 0.6901241540908813,
        "codebertscore_f3-3": 0.7227805256843567,
        "codebertscore_f1-0": 0.8485311269760132,
        "codebertscore_f3-0": 0.8531798720359802,
        "codebertscore_f1-8": 0.7546058893203735,
        "codebertscore_f3-8": 0.7378183007240295,
        "codebertscore_f1-7": 0.6965925097465515,
        "codebertscore_f3-7": 0.7437926530838013,
        "codebertscore_f1-16": 0.7578569650650024,
        "codebertscore_f3-16": 0.7899441719055176,
        "codebertscore_f1-2": 0.8110625147819519,
        "codebertscore_f3-2": 0.8234876990318298,
        "codebertscore_f1-11": 0.7835941314697266,
        "codebertscore_f3-11": 0.7980186343193054,
        "codebertscore_f1-1": 0.6963018774986267,
        "codebertscore_f3-1": 0.7138853073120117,
        "codebertscore_f1-10": 0.8114848732948303,
        "codebertscore_f3-10": 0.8260692358016968,
        "codebertscore_f1-17": 0.6881577372550964,
        "codebertscore_f3-17": 0.6939257383346558,
        "codebertscore_f1-12": 0.8610550761222839,
        "codebertscore_f3-12": 0.8602708578109741,
        "codebertscore_f1-6": 0.7502288818359375,
        "codebertscore_f3-6": 0.7741538882255554,
        "codebertscore_f1-18": 0.703491747379303,
        "codebertscore_f3-18": 0.7236207127571106,
        "codebertscore_f1-15": 0.7438436150550842,
        "codebertscore_f3-15": 0.7599257826805115,
        "codebertscore_f1-13": 0.830611526966095,
        "codebertscore_f3-13": 0.8385769128799438,
        "codebertscore_f1-9": 0.7430370450019836,
        "codebertscore_f3-9": 0.734616756439209,
        "codebertscore_f1-4": 0.6999413967132568,
        "codebertscore_f3-4": 0.7399783730506897,
        "codebertscore_f1-14": 0.7250427603721619,
        "codebertscore_f3-14": 0.7628939151763916,
        "codebertscore_f1-5": 0.8081148266792297,
        "codebertscore_f3-5": 0.8163296580314636,
        "codebertscore_f1-19": 0.5468047857284546,
        "codebertscore_f3-19": 0.526682436466217,
        "codebertscore_s_f1-3": 0.7147419452667236,
        "codebertscore_s_f3-3": 0.736620306968689,
        "codebertscore_s_f1-0": 0.8436518311500549,
        "codebertscore_s_f3-0": 0.8490355610847473,
        "codebertscore_s_f1-8": 0.7518793940544128,
        "codebertscore_s_f3-8": 0.7333659529685974,
        "codebertscore_s_f1-7": 0.7296715378761292,
        "codebertscore_s_f3-7": 0.7636235356330872,
        "codebertscore_s_f1-16": 0.7602531909942627,
        "codebertscore_s_f3-16": 0.7930855751037598,
        "codebertscore_s_f1-2": 0.8133150935173035,
        "codebertscore_s_f3-2": 0.8283787369728088,
        "codebertscore_s_f1-11": 0.8069242835044861,
        "codebertscore_s_f3-11": 0.8240879774093628,
        "codebertscore_s_f1-1": 0.7057003378868103,
        "codebertscore_s_f3-1": 0.7217472195625305,
        "codebertscore_s_f1-10": 0.8113088607788086,
        "codebertscore_s_f3-10": 0.8280371427536011,
        "codebertscore_s_f1-17": 0.70965975522995,
        "codebertscore_s_f3-17": 0.7090018391609192,
        "codebertscore_s_f1-12": 0.854873538017273,
        "codebertscore_s_f3-12": 0.8544802665710449,
        "codebertscore_s_f1-6": 0.7717444896697998,
        "codebertscore_s_f3-6": 0.7906680703163147,
        "codebertscore_s_f1-18": 0.7225221991539001,
        "codebertscore_s_f3-18": 0.7370092868804932,
        "codebertscore_s_f1-15": 0.7443638443946838,
        "codebertscore_s_f3-15": 0.7576085329055786,
        "codebertscore_s_f1-13": 0.8303996324539185,
        "codebertscore_s_f3-13": 0.8384792804718018,
        "codebertscore_s_f1-9": 0.7429576516151428,
        "codebertscore_s_f3-9": 0.7336198687553406,
        "codebertscore_s_f1-4": 0.7309141159057617,
        "codebertscore_s_f3-4": 0.7591265439987183,
        "codebertscore_s_f1-14": 0.7370620369911194,
        "codebertscore_s_f3-14": 0.7700921893119812,
        "codebertscore_s_f1-5": 0.8103495240211487,
        "codebertscore_s_f3-5": 0.8202950954437256,
        "codebertscore_s_f1-19": 0.5124424695968628,
        "codebertscore_s_f3-19": 0.4888696074485779,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 2,
        "raw_gpt35_nsnr-1": "2",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 0,
        "raw_gpt35_nsnr-19": "0",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "0",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 0,
        "raw_gpt35_nswr-19": "0"
    },
    {
        "intent": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nfunction rounded_avg(n, m){\n",
        "snippet": [
            "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n"
        ],
        "simplified": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
        "task_id": "103",
        "3": "let average = (m+n)/2;\n    if(n>m){\n      return -1;\n    }else{\n      return '0b' + Math.round(average).toString(2);\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (n > m) {\n    return -1;\n  } else {\n    return Math.round((n + m) / 2).toString(2);\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return '0b' + avg.toString(2);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(n > m) return -1;\n    let num = 0;\n    for(let i = n; i <= m; i++){\n        num += i;\n    }\n    num = Math.round(num / (m - n + 1));\n    return \"0b\" + num.toString(2);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var sum = 0;\n\tvar count = 0;\n\tvar round;\n\tvar binary;\n\tif(n > m){\n\t\treturn -1;\n\t}\n\telse{\n\t\tfor(var i = n; i <= m; i++){\n\t\t\tsum += i;\n\t\t\tcount++;\n\t\t}\n\t\tvar avg = sum / count;\n\t\tvar avg2 = Math.round(avg);\n\t\tbinary = avg2.toString(2);\n\t\tbinary = \"0b\" + binary;\n\t\treturn binary;\n\t}\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n > m){\n      return -1;\n   }\n   var i = n;\n   var sum = 0;\n   while(i <= m){\n      sum += i;\n      i++;\n   }\n   var rounded = Math.round(sum/(m-n+1));\n   return rounded.toString(2);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(n > m) return -1;\n    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    return \"0b\" + Math.round(sum / (m - n + 1)).toString(2);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(n>m){\n\t\treturn -1;\n\t}\n\tlet avg = Math.round((n+m)/2);\n\treturn `0b${avg.toString(2)}`;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(n>m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i<=m; i++){\n        sum += i;\n    }\n    return `0b${Math.round(sum/(m-n+1)).toString(2)}`;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var sum = 0;\n  var count = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  var rounded_avg = Math.round(sum/count);\n  return \"0b\" + rounded_avg.toString(2);\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var sum=0;\n  if(n>m){\n    return -1;\n  }\n  for(var i=n;i<=m;i++){\n    sum+=i;\n  }\n  return (Math.round(sum/(m-n+1))).toString(2);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var ans = (n + m) / 2\n  return ans >= 0 ? '0b' + Math.round(ans).toString(2) : -1\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(n>m){\n      return -1;\n    }\n    var total = 0;\n    var count = 0;\n    while(n<=m){\n      total += n;\n      count++;\n      n++;\n    }\n    var rd = Math.round(total/count);\n    return rd.toString(2);\n  }\n  \n  //8. Take a word, and return a dictionary of each letter in the word, \n  // and how many times they appear in the word.\n  // Example:\n  // letter_histogram(\"hello\") => {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n  // letter_histogram(\"peter\") => {\"p\": 1, \"e\": 2, \"t\": 1, \"r\": 1}\n  function letter_histogram(word){\n    var dict = {};\n    for(var i = 0; i<word.length; i++){\n      var ltr = word[i];\n      if(dict[ltr] == undefined){\n        dict[ltr] = 1;\n      }\n      else{\n        dict[ltr]++;\n      }\n    }\n    return dict;\n  }\n  \n  //9. Write a function that takes a dictionary of letters and their frequencies \n  //(such as the one returned by letter_histogram), and returns a string \n  //representing a vertical histogram with the letters in the dictionary, \n  //and the frequency for each letter.\n  // Example:\n  // v_histogram({\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}) =>\n  // \"*\n  // *\n  // ****\n  // *\n  // *\"\n  // v_histogram({\"p\": 1, \"e\": 2, \"t\": 1, \"r\": 1}) =>\n  // \"*\n  // ***\n  // *\n  // *\"\n  function v_histogram(dictionary){\n    var str = \"\";\n    var max = 0;\n    for(var letter in dictionary){\n      if(dictionary[letter] > max){\n        max = dictionary[letter];\n      }",
        "grade-15": {
            "execution": 0
        },
        "13": "if (n > m) {\n    return -1;\n  }\n  return Math.round((n + m) / 2).toString(2);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n>m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i<=m; i++){\n        sum+=i;\n    }\n    return (Math.round(sum/(m-n+1))).toString(2);\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if (n > m) {\n    return -1;\n  } else {\n    return (n + m) / 2;\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let avg = Math.round((n + m) / 2);\n    return (n <= m) ? avg.toString(2) : -1;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if (n>m) {return -1}\n\telse {\n\t\tvar num = Math.round((n+m)/2);\n\t\tvar toBinary = num.toString(2);\n\t\tvar toBinaryString = \"0b\" + toBinary;\n\t\treturn toBinaryString;\n\t}\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n    var avg = 0;\n    var rounded_avg = 0;\n    var binary_avg = \"\";\n    if(n > m){\n        return -1;\n    }\n    else{\n        for(var i = n; i <= m; i++){\n            sum += i;\n        }\n        avg = sum / (m - n + 1);\n        rounded_avg = Math.round(avg);\n        binary_avg = (rounded_avg).toString(2);\n        return \"0b\" + binary_avg;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.3556313146051386,
        "bleu-0": 1.2995814250075037e-24,
        "bleu-8": 0.3234569515493618,
        "bleu-7": 0.4041922316299546,
        "bleu-16": 0.25937976173790595,
        "bleu-2": 0.19246914880755933,
        "bleu-11": 0.27175594229639954,
        "bleu-1": 0.29094053739929904,
        "bleu-10": 0.3963679377595552,
        "bleu-17": 0.31618194057743676,
        "bleu-12": 0.165711008016693,
        "bleu-6": 0.28459869791012943,
        "bleu-18": 0.2569448811331379,
        "bleu-15": 0.04241442242549847,
        "bleu-13": 0.3060284204115794,
        "bleu-9": 0.2898321723498461,
        "bleu-4": 0.18170291515172182,
        "bleu-14": 0.20475990557233215,
        "bleu-5": 0.39474279170015136,
        "bleu-19": 0.2154433212977896,
        "codebleu-3": 0.5260342206446227,
        "codebleu-0": 0.008438818565400843,
        "codebleu-8": 0.4134885428510188,
        "codebleu-7": 0.5149707042937274,
        "codebleu-16": 0.592485703374508,
        "codebleu-2": 0.5720746752935243,
        "codebleu-11": 0.5730411333738256,
        "codebleu-1": 0.5869921992711911,
        "codebleu-10": 0.44424663519051333,
        "codebleu-17": 0.48843890289511427,
        "codebleu-12": 0.4392453180262233,
        "codebleu-6": 0.5667427740773797,
        "codebleu-18": 0.37091609854873603,
        "codebleu-15": 0.6254762434000302,
        "codebleu-13": 0.3840442337045457,
        "codebleu-9": 0.5699298346321472,
        "codebleu-4": 0.255591074506777,
        "codebleu-14": 0.34401283257275966,
        "codebleu-5": 0.6180349566101283,
        "codebleu-19": 0.6127942338121726,
        "chrf-3": 0.46559844536344774,
        "chrf-0": 0.016181229773462785,
        "chrf-8": 0.45279452641295526,
        "chrf-7": 0.5196827438071294,
        "chrf-16": 0.36602548302594395,
        "chrf-2": 0.3237483320005714,
        "chrf-11": 0.3900363647436521,
        "chrf-1": 0.3715456303286056,
        "chrf-10": 0.47161253875931325,
        "chrf-17": 0.44075023359581045,
        "chrf-12": 0.22630973948632715,
        "chrf-6": 0.4129947133063532,
        "chrf-18": 0.33361465454880895,
        "chrf-15": 0.13975683755389393,
        "chrf-13": 0.46323733675104106,
        "chrf-9": 0.42955002301608564,
        "chrf-4": 0.33405473945234493,
        "chrf-14": 0.29911048220724207,
        "chrf-5": 0.40694214042636756,
        "chrf-19": 0.3265006740476997,
        "rougel-3": 0.4950495049504951,
        "rougel-0": 0.03508771929824561,
        "rougel-8": 0.5652173913043479,
        "rougel-7": 0.6734693877551021,
        "rougel-16": 0.5439999999999999,
        "rougel-2": 0.35294117647058826,
        "rougel-11": 0.5,
        "rougel-1": 0.4793388429752066,
        "rougel-10": 0.62,
        "rougel-17": 0.496,
        "rougel-12": 0.3697478991596638,
        "rougel-6": 0.4793388429752066,
        "rougel-18": 0.45652173913043476,
        "rougel-15": 0.152,
        "rougel-13": 0.5842696629213484,
        "rougel-9": 0.512396694214876,
        "rougel-4": 0.5185185185185186,
        "rougel-14": 0.45652173913043476,
        "rougel-5": 0.5172413793103449,
        "rougel-19": 0.38461538461538464,
        "meteor-3": 0.5702357260113788,
        "meteor-0": 0.009900990099009901,
        "meteor-8": 0.4849897119341564,
        "meteor-7": 0.5593368569147115,
        "meteor-16": 0.6461930105433199,
        "meteor-2": 0.5614922976874751,
        "meteor-11": 0.6004709576138147,
        "meteor-1": 0.627394658776273,
        "meteor-10": 0.5697080291970803,
        "meteor-17": 0.625983531111749,
        "meteor-12": 0.4617562907538628,
        "meteor-6": 0.5591173200387362,
        "meteor-18": 0.42592592592592593,
        "meteor-15": 0.2633788127969011,
        "meteor-13": 0.4630672101242732,
        "meteor-9": 0.5689200736445198,
        "meteor-4": 0.2596509865800122,
        "meteor-14": 0.4015998246767478,
        "meteor-5": 0.5422112739536545,
        "meteor-19": 0.6110784073256479,
        "ruby-3": 0.2857142857142857,
        "ruby-0": 0.017857142857142905,
        "ruby-8": 0.4107142857142857,
        "ruby-7": 0.5357142857142857,
        "ruby-16": 0.4347826086956522,
        "ruby-2": 0.23711340206185572,
        "ruby-11": 0.3529411764705882,
        "ruby-1": 0.32307692307692304,
        "ruby-10": 0.4642857142857143,
        "ruby-17": 0.34782608695652173,
        "ruby-12": 0.23809523809523814,
        "ruby-6": 0.3076923076923077,
        "ruby-18": 0.2678571428571429,
        "ruby-15": 0.08333333333333337,
        "ruby-13": 0.4285714285714286,
        "ruby-9": 0.36923076923076925,
        "ruby-4": 0.3392857142857143,
        "ruby-14": 0.25,
        "ruby-5": 0.3833333333333333,
        "ruby-19": 0.26,
        "codebertscore_f1-3": 0.8733567595481873,
        "codebertscore_f3-3": 0.8684784173965454,
        "codebertscore_f1-0": 0.0,
        "codebertscore_f3-0": 0.0,
        "codebertscore_f1-8": 0.8774981498718262,
        "codebertscore_f3-8": 0.8556525707244873,
        "codebertscore_f1-7": 0.9147711992263794,
        "codebertscore_f3-7": 0.9024580717086792,
        "codebertscore_f1-16": 0.8664700388908386,
        "codebertscore_f3-16": 0.8751449584960938,
        "codebertscore_f1-2": 0.7894113063812256,
        "codebertscore_f3-2": 0.8145228624343872,
        "codebertscore_f1-11": 0.8225758075714111,
        "codebertscore_f3-11": 0.8268578052520752,
        "codebertscore_f1-1": 0.8575958013534546,
        "codebertscore_f3-1": 0.8655881881713867,
        "codebertscore_f1-10": 0.8782689571380615,
        "codebertscore_f3-10": 0.8661022186279297,
        "codebertscore_f1-17": 0.843273401260376,
        "codebertscore_f3-17": 0.846201479434967,
        "codebertscore_f1-12": 0.7909878492355347,
        "codebertscore_f3-12": 0.7990943193435669,
        "codebertscore_f1-6": 0.818884551525116,
        "codebertscore_f3-6": 0.8216016888618469,
        "codebertscore_f1-18": 0.8771167397499084,
        "codebertscore_f3-18": 0.871964156627655,
        "codebertscore_f1-15": 0.6535825133323669,
        "codebertscore_f3-15": 0.7617959380149841,
        "codebertscore_f1-13": 0.8825697302818298,
        "codebertscore_f3-13": 0.853836715221405,
        "codebertscore_f1-9": 0.8295475244522095,
        "codebertscore_f3-9": 0.8280131220817566,
        "codebertscore_f1-4": 0.8604393005371094,
        "codebertscore_f3-4": 0.8205745816230774,
        "codebertscore_f1-14": 0.8632432818412781,
        "codebertscore_f3-14": 0.8439128994941711,
        "codebertscore_f1-5": 0.8426530957221985,
        "codebertscore_f3-5": 0.8657999038696289,
        "codebertscore_f1-19": 0.7634437680244446,
        "codebertscore_f3-19": 0.7991997599601746,
        "codebertscore_s_f1-3": 0.8861263394355774,
        "codebertscore_s_f3-3": 0.8808807134628296,
        "codebertscore_s_f1-0": 0.0,
        "codebertscore_s_f3-0": 0.0,
        "codebertscore_s_f1-8": 0.885877788066864,
        "codebertscore_s_f3-8": 0.8651247024536133,
        "codebertscore_s_f1-7": 0.9193228483200073,
        "codebertscore_s_f3-7": 0.9088506698608398,
        "codebertscore_s_f1-16": 0.8660334348678589,
        "codebertscore_s_f3-16": 0.8736034035682678,
        "codebertscore_s_f1-2": 0.7930459380149841,
        "codebertscore_s_f3-2": 0.8217117786407471,
        "codebertscore_s_f1-11": 0.8203505277633667,
        "codebertscore_s_f3-11": 0.8245673179626465,
        "codebertscore_s_f1-1": 0.8581317067146301,
        "codebertscore_s_f3-1": 0.8658035397529602,
        "codebertscore_s_f1-10": 0.887522280216217,
        "codebertscore_s_f3-10": 0.8767947554588318,
        "codebertscore_s_f1-17": 0.8449183106422424,
        "codebertscore_s_f3-17": 0.8477827310562134,
        "codebertscore_s_f1-12": 0.7946546673774719,
        "codebertscore_s_f3-12": 0.802352786064148,
        "codebertscore_s_f1-6": 0.8240835070610046,
        "codebertscore_s_f3-6": 0.8253009915351868,
        "codebertscore_s_f1-18": 0.8786057829856873,
        "codebertscore_s_f3-18": 0.872782826423645,
        "codebertscore_s_f1-15": 0.6866752505302429,
        "codebertscore_s_f3-15": 0.7799903750419617,
        "codebertscore_s_f1-13": 0.8919830918312073,
        "codebertscore_s_f3-13": 0.863913357257843,
        "codebertscore_s_f1-9": 0.8295592069625854,
        "codebertscore_s_f3-9": 0.8283954858779907,
        "codebertscore_s_f1-4": 0.8761961460113525,
        "codebertscore_s_f3-4": 0.8369331359863281,
        "codebertscore_s_f1-14": 0.864465594291687,
        "codebertscore_s_f3-14": 0.8413231372833252,
        "codebertscore_s_f1-5": 0.8452233672142029,
        "codebertscore_s_f3-5": 0.8705298900604248,
        "codebertscore_s_f1-19": 0.780689001083374,
        "codebertscore_s_f3-19": 0.8201162219047546,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "rounded_avg: 4\nletter_histogram: 4\nv_histogram: 4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "Functional Correctness: 2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return True if all numbers in the list l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// True\n// >>> below_threshold([1, 20, 4, 10], 5)\n// False\nfunction below_threshold(l, t){\n",
        "snippet": [
            "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "Return True if all numbers in the list l are below threshold t.",
        "task_id": "52",
        "3": "for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var temp = [];\n  temp = l.filter(function(n){return n < t});\n  if(temp.length == l.length){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var temp = l.every(function(value,index,arr){\n    return (value<t)\n  })\n  return temp\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for(i=0; i<l.length; i++){\n\t\tif(l[i] > t){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "return some(l, function(n){\n        return n < t;\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// YOUR CODE GOES HERE\n    var res = []\n    var flag = 0\n    for(var i=0; i<l.length; i++){\n        if(l[i]<t){\n            res.push(l[i])\n        }else{\n            flag = 1\n        }\n    }\n    if(flag==0){\n        return true\n    }else{\n        return false\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "for(i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "//TODO\n  return l.every(function(a){\n    return a < t;\n  });\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (l.length === 0){\n        return true;\n    }\n    if (l[0] > t){\n        return false;\n    }\n    return below_threshold(l.slice(1), t);\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = true;\n    for(let i=0; i<l.length; i++){\n        if(l[i] > t){\n            result = false;\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "//Check each item in list to see if less than t\n  for(i = 0; i < l.length; i++){\n    if(l[i] > t){\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var i = 0;\n    while (i < l.length) {\n        if (l[i] >= t) {\n            return false;\n        }\n        i = i + 1;\n    }\n    return true;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "return _.every(l, function(n){\n        return n < t;\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "for(var x = 0; x < l.length; x++){\n        if(l[x] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return all(curry(lt)(t), l);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "for(var i=0; i<l.length; i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return l.every(function(v){\n\t\treturn v < t;\n\t});\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.17600429416656616,
        "bleu-0": 0.08911703343001871,
        "bleu-8": 0.04935860893352708,
        "bleu-7": 0.13033894166590243,
        "bleu-16": 0.17600429416656616,
        "bleu-2": 0.055809960275965284,
        "bleu-11": 0.17600429416656616,
        "bleu-1": 0.023555952768576038,
        "bleu-10": 0.13033894166590243,
        "bleu-17": 0.052901657750469226,
        "bleu-12": 0.10320349876910134,
        "bleu-6": 0.04486471497267756,
        "bleu-18": 0.09464371716391798,
        "bleu-15": 0.16007117882584856,
        "bleu-13": 0.05562330953690127,
        "bleu-9": 0.1266637216032922,
        "bleu-4": 0.17600429416656616,
        "bleu-14": 0.06753278782997393,
        "bleu-5": 0.1266637216032922,
        "bleu-19": 0.055809960275965284,
        "codebleu-3": 0.5779826976764095,
        "codebleu-0": 0.5809189049710691,
        "codebleu-8": 0.4588588588588588,
        "codebleu-7": 0.5481495833707435,
        "codebleu-16": 0.5779826976764095,
        "codebleu-2": 0.43259008212669486,
        "codebleu-11": 0.5779826976764095,
        "codebleu-1": 0.544144144144144,
        "codebleu-10": 0.5481495833707435,
        "codebleu-17": 0.46336336336336337,
        "codebleu-12": 0.5877711536987541,
        "codebleu-6": 0.5039039039039038,
        "codebleu-18": 0.5644226015093016,
        "codebleu-15": 0.5750268781526564,
        "codebleu-13": 0.46336336336336337,
        "codebleu-9": 0.5475370466936418,
        "codebleu-4": 0.5779826976764095,
        "codebleu-14": 0.3281418645576425,
        "codebleu-5": 0.5475370466936418,
        "codebleu-19": 0.3881456376822504,
        "chrf-3": 0.5083892007183297,
        "chrf-0": 0.41301385649695244,
        "chrf-8": 0.27298360771445984,
        "chrf-7": 0.4959762682172348,
        "chrf-16": 0.5050423683115421,
        "chrf-2": 0.24571534814285467,
        "chrf-11": 0.5083892007183297,
        "chrf-1": 0.3353310248759317,
        "chrf-10": 0.4959762682172348,
        "chrf-17": 0.23794841486029927,
        "chrf-12": 0.43485585256687626,
        "chrf-6": 0.30764859262869,
        "chrf-18": 0.45233814920997034,
        "chrf-15": 0.4729972784963982,
        "chrf-13": 0.23859003563251172,
        "chrf-9": 0.48972552944902004,
        "chrf-4": 0.5050423683115421,
        "chrf-14": 0.16999181005206296,
        "chrf-5": 0.48972552944902004,
        "chrf-19": 0.24078162453260304,
        "rougel-3": 0.576271186440678,
        "rougel-0": 0.3235294117647059,
        "rougel-8": 0.2916666666666667,
        "rougel-7": 0.5614035087719298,
        "rougel-16": 0.576271186440678,
        "rougel-2": 0.4,
        "rougel-11": 0.576271186440678,
        "rougel-1": 0.22448979591836732,
        "rougel-10": 0.5614035087719298,
        "rougel-17": 0.3255813953488372,
        "rougel-12": 0.4375,
        "rougel-6": 0.4375,
        "rougel-18": 0.45714285714285713,
        "rougel-15": 0.5245901639344264,
        "rougel-13": 0.38095238095238093,
        "rougel-9": 0.5517241379310345,
        "rougel-4": 0.576271186440678,
        "rougel-14": 0.3888888888888889,
        "rougel-5": 0.5517241379310345,
        "rougel-19": 0.35,
        "meteor-3": 0.722756581253906,
        "meteor-0": 0.37721280602636537,
        "meteor-8": 0.23148148148148148,
        "meteor-7": 0.6995001922337563,
        "meteor-16": 0.722756581253906,
        "meteor-2": 0.3301811824539097,
        "meteor-11": 0.722756581253906,
        "meteor-1": 0.35369184680451127,
        "meteor-10": 0.6995001922337563,
        "meteor-17": 0.32548666327210063,
        "meteor-12": 0.5441810344827587,
        "meteor-6": 0.5776030441810345,
        "meteor-18": 0.6612921985403156,
        "meteor-15": 0.613400655021834,
        "meteor-13": 0.3270365997638725,
        "meteor-9": 0.6964050586398015,
        "meteor-4": 0.722756581253906,
        "meteor-14": 0.2862503025901719,
        "meteor-5": 0.6964050586398015,
        "meteor-19": 0.3301811824539097,
        "ruby-3": 0.4473684210526315,
        "ruby-0": 0.23404255319148937,
        "ruby-8": 0.14814814814814814,
        "ruby-7": 0.41666666666666663,
        "ruby-16": 0.4473684210526315,
        "ruby-2": 0.23809523809523814,
        "ruby-11": 0.4473684210526315,
        "ruby-1": 0.1428571428571429,
        "ruby-10": 0.41666666666666663,
        "ruby-17": 0.2272727272727273,
        "ruby-12": 0.2790697674418605,
        "ruby-6": 0.3023255813953488,
        "ruby-18": 0.30612244897959184,
        "ruby-15": 0.375,
        "ruby-13": 0.23809523809523814,
        "ruby-9": 0.4054054054054054,
        "ruby-4": 0.4473684210526315,
        "ruby-14": 0.2857142857142857,
        "ruby-5": 0.4054054054054054,
        "ruby-19": 0.19047619047619047,
        "codebertscore_f1-3": 0.8532561659812927,
        "codebertscore_f3-3": 0.8689656257629395,
        "codebertscore_f1-0": 0.7992744445800781,
        "codebertscore_f3-0": 0.8160319328308105,
        "codebertscore_f1-8": 0.7838667631149292,
        "codebertscore_f3-8": 0.7851940393447876,
        "codebertscore_f1-7": 0.8454627394676208,
        "codebertscore_f3-7": 0.8542811274528503,
        "codebertscore_f1-16": 0.8485649824142456,
        "codebertscore_f3-16": 0.8633581399917603,
        "codebertscore_f1-2": 0.7792060375213623,
        "codebertscore_f3-2": 0.7606776356697083,
        "codebertscore_f1-11": 0.8532561659812927,
        "codebertscore_f3-11": 0.8689656257629395,
        "codebertscore_f1-1": 0.711180567741394,
        "codebertscore_f3-1": 0.7470699548721313,
        "codebertscore_f1-10": 0.8385156989097595,
        "codebertscore_f3-10": 0.8460642099380493,
        "codebertscore_f1-17": 0.7591891288757324,
        "codebertscore_f3-17": 0.7661235332489014,
        "codebertscore_f1-12": 0.7936676144599915,
        "codebertscore_f3-12": 0.7960242033004761,
        "codebertscore_f1-6": 0.796468198299408,
        "codebertscore_f3-6": 0.8127501606941223,
        "codebertscore_f1-18": 0.8070440888404846,
        "codebertscore_f3-18": 0.8429595232009888,
        "codebertscore_f1-15": 0.814446210861206,
        "codebertscore_f3-15": 0.834768533706665,
        "codebertscore_f1-13": 0.7904175519943237,
        "codebertscore_f3-13": 0.7691408395767212,
        "codebertscore_f1-9": 0.847220778465271,
        "codebertscore_f3-9": 0.862040638923645,
        "codebertscore_f1-4": 0.8496949076652527,
        "codebertscore_f3-4": 0.8647506237030029,
        "codebertscore_f1-14": 0.745011568069458,
        "codebertscore_f3-14": 0.7312597632408142,
        "codebertscore_f1-5": 0.8423675298690796,
        "codebertscore_f3-5": 0.8577747941017151,
        "codebertscore_f1-19": 0.7897448539733887,
        "codebertscore_f3-19": 0.7698816061019897,
        "codebertscore_s_f1-3": 0.8615657687187195,
        "codebertscore_s_f3-3": 0.877356767654419,
        "codebertscore_s_f1-0": 0.8096463680267334,
        "codebertscore_s_f3-0": 0.824296772480011,
        "codebertscore_s_f1-8": 0.7716454863548279,
        "codebertscore_s_f3-8": 0.7753520607948303,
        "codebertscore_s_f1-7": 0.8492960333824158,
        "codebertscore_s_f3-7": 0.8586099743843079,
        "codebertscore_s_f1-16": 0.8534419536590576,
        "codebertscore_s_f3-16": 0.868193507194519,
        "codebertscore_s_f1-2": 0.7820270657539368,
        "codebertscore_s_f3-2": 0.7646690011024475,
        "codebertscore_s_f1-11": 0.8615657687187195,
        "codebertscore_s_f3-11": 0.877356767654419,
        "codebertscore_s_f1-1": 0.7196183800697327,
        "codebertscore_s_f3-1": 0.7603848576545715,
        "codebertscore_s_f1-10": 0.8488537669181824,
        "codebertscore_s_f3-10": 0.8580977916717529,
        "codebertscore_s_f1-17": 0.763052225112915,
        "codebertscore_s_f3-17": 0.7715536952018738,
        "codebertscore_s_f1-12": 0.7984701991081238,
        "codebertscore_s_f3-12": 0.8076587319374084,
        "codebertscore_s_f1-6": 0.8175036311149597,
        "codebertscore_s_f3-6": 0.8348609805107117,
        "codebertscore_s_f1-18": 0.8169852495193481,
        "codebertscore_s_f3-18": 0.8555835485458374,
        "codebertscore_s_f1-15": 0.8190902471542358,
        "codebertscore_s_f3-15": 0.8420447111129761,
        "codebertscore_s_f1-13": 0.7887594103813171,
        "codebertscore_s_f3-13": 0.7690296173095703,
        "codebertscore_s_f1-9": 0.8524994254112244,
        "codebertscore_s_f3-9": 0.8674179911613464,
        "codebertscore_s_f1-4": 0.855722963809967,
        "codebertscore_s_f3-4": 0.8704507946968079,
        "codebertscore_s_f1-14": 0.7330951690673828,
        "codebertscore_s_f3-14": 0.7309625744819641,
        "codebertscore_s_f1-5": 0.8493639826774597,
        "codebertscore_s_f3-5": 0.8653125762939453,
        "codebertscore_s_f1-19": 0.7849024534225464,
        "codebertscore_s_f3-19": 0.7659707069396973,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Write a function that takes a string and returns True if the string\n// length is a prime number or False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\nfunction prime_length(string){\n",
        "snippet": [
            "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n"
        ],
        "simplified": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
        "task_id": "82",
        "3": "var len = string.length;\n  var prime = true;\n  for(var i = 2; i < len; i++){\n    if(len % i == 0){\n      prime = false;\n    }\n  }\n  return prime;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var length = string.length;\n    if(length == 0 || length == 1){\n        return false;\n    }\n    for(var i = 2; i < length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "var output = true;\n  for(var i = 2; i < string.length; i++){\n    if(string.length % i === 0){\n      output = false;\n    }\n  }\n  return output;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(is_prime(string.length)){\n    return true;\n  }\n  return false;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(string.length % 2 === 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let string_length = string.length;\n  if (is_prime(string_length)){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(is_prime(string.length)){\n    return true;\n  }\n  return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var n = string.length;\n    //console.log(\"The length of the string is \" + n);\n    var i = 0;\n    var is_prime = true;\n    while(i < n){\n        i++;\n        if(n % i == 0 && i != 1 && i != n){\n            is_prime = false;\n        }\n    }\n    //console.log(is_prime);\n    return is_prime;\n}\nprime_length('Hello');\nprime_length('abcdcba');\nprime_length('kittens');\nprime_length('orange');",
        "grade-10": {
            "execution": 0
        },
        "17": "var result = false;\n    var array = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    if(array.includes(string.length)){\n        result = true;\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(string.length == 2 || string.length == 3){\n        return true;\n    }\n    if(string.length % 2 == 0 || string.length % 3 == 0){\n        return false;\n    }\n    return true;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(var i = 2; i < string.length; i++){\n        if(string.length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return isPrime(string.length);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var length = string.length;\n  var count = 0;\n  for(var i = length; i > 0; i--){\n    if(length % i == 0){\n      count += 1;\n    }\n  }\n  if(count == 2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(string.length < 2){\n\t\treturn false;\n\t}\n\tfor(var i = 2; i < string.length; i++){\n\t\tif(string.length % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var str = string.length;\n    var prime = true;\n    for(var i = 2; i<str; i++){\n        if(str%i==0){\n            prime = false;\n        }\n    }\n    if(prime == true){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return false;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var count = 0;\n  for(var i = 1; i <= string.length; i++){\n    if(string.length % i == 0){\n      count++;\n    }\n  }\n  if(count == 2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let isPrime = true;\n    let stringLength = string.length;\n    for(i = 2; i <= stringLength/2; i++){\n        if(stringLength % i == 0){\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//get length of string\n    var length = string.length;\n    //check to see if it is a prime number\n    if(length == 2 || length == 3 || length == 5 || length == 7){\n        return true;\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.43581886417453136,
        "bleu-0": 0.49892805017064623,
        "bleu-8": 6.470234925645462e-26,
        "bleu-7": 0.3244453474407254,
        "bleu-16": 0.02126548245748215,
        "bleu-2": 0.0952750586402399,
        "bleu-11": 0.06182110929041634,
        "bleu-1": 0.02126548245748215,
        "bleu-10": 0.09267670081228699,
        "bleu-17": 0.03345171022980012,
        "bleu-12": 0.215344317835543,
        "bleu-6": 0.3526286138318449,
        "bleu-18": 0.0014863527853405541,
        "bleu-15": 0.26624626670786056,
        "bleu-13": 0.43786102211588934,
        "bleu-9": 0.3757972429011433,
        "bleu-4": 4.05639804268867e-07,
        "bleu-14": 0.36621859043827887,
        "bleu-5": 0.37033359559712764,
        "bleu-19": 0.10189446728291139,
        "codebleu-3": 0.5880309877166848,
        "codebleu-0": 0.8164076870766337,
        "codebleu-8": 0.017777777777777778,
        "codebleu-7": 0.4985507124306837,
        "codebleu-16": 0.19263622685363527,
        "codebleu-2": 0.2544504509255257,
        "codebleu-11": 0.2955938295884501,
        "codebleu-1": 0.19263622685363527,
        "codebleu-10": 0.5384983256373891,
        "codebleu-17": 0.340669344042838,
        "codebleu-12": 0.4968670137816801,
        "codebleu-6": 0.4589874720976455,
        "codebleu-18": 0.09795721351442654,
        "codebleu-15": 0.6508804018810289,
        "codebleu-13": 0.6119714742436292,
        "codebleu-9": 0.6889247078195345,
        "codebleu-4": 0.053333350485204975,
        "codebleu-14": 0.6606615990757239,
        "codebleu-5": 0.5959632032885072,
        "codebleu-19": 0.4860477694201262,
        "chrf-3": 0.466985900506408,
        "chrf-0": 0.6335780994594767,
        "chrf-8": 0.011037527593818984,
        "chrf-7": 0.3571004664674708,
        "chrf-16": 0.32515921001723563,
        "chrf-2": 0.3657962776514118,
        "chrf-11": 0.3675698338210192,
        "chrf-1": 0.32515921001723563,
        "chrf-10": 0.28300577749709993,
        "chrf-17": 0.22501840624353758,
        "chrf-12": 0.4287156952741779,
        "chrf-6": 0.4628002542130341,
        "chrf-18": 0.16406172267052987,
        "chrf-15": 0.4587538468563955,
        "chrf-13": 0.5563304247079384,
        "chrf-9": 0.46630590275688477,
        "chrf-4": 0.09723233091056917,
        "chrf-14": 0.4640864762763922,
        "chrf-5": 0.3851697520262465,
        "chrf-19": 0.40657954062698637,
        "rougel-3": 0.6728971962616822,
        "rougel-0": 0.7899159663865546,
        "rougel-8": 0.03333333333333333,
        "rougel-7": 0.5523809523809524,
        "rougel-16": 0.2597402597402597,
        "rougel-2": 0.38554216867469876,
        "rougel-11": 0.3764705882352941,
        "rougel-1": 0.2597402597402597,
        "rougel-10": 0.3218390804597701,
        "rougel-17": 0.17142857142857143,
        "rougel-12": 0.5045045045045046,
        "rougel-6": 0.6060606060606061,
        "rougel-18": 0.17391304347826086,
        "rougel-15": 0.4878048780487804,
        "rougel-13": 0.6846846846846847,
        "rougel-9": 0.5573770491803278,
        "rougel-4": 0.12698412698412698,
        "rougel-14": 0.4999999999999999,
        "rougel-5": 0.5811965811965812,
        "rougel-19": 0.376068376068376,
        "meteor-3": 0.6152849740932642,
        "meteor-0": 0.7862312023120653,
        "meteor-8": 0.009398496240601503,
        "meteor-7": 0.5499946945849397,
        "meteor-16": 0.25519818985131826,
        "meteor-2": 0.3569372775421925,
        "meteor-11": 0.23740315994740208,
        "meteor-1": 0.25519818985131826,
        "meteor-10": 0.3537538699690403,
        "meteor-17": 0.24313725490196075,
        "meteor-12": 0.5443343718276333,
        "meteor-6": 0.5788045618989329,
        "meteor-18": 0.11668207024029574,
        "meteor-15": 0.4530952456699283,
        "meteor-13": 0.6713979416809606,
        "meteor-9": 0.5378857444973147,
        "meteor-4": 0.037383177570093455,
        "meteor-14": 0.5222657122515076,
        "meteor-5": 0.5533052876136368,
        "meteor-19": 0.4231259172825624,
        "ruby-3": 0.5593220338983051,
        "ruby-0": 0.7333333333333334,
        "ruby-8": 0.016949152542372836,
        "ruby-7": 0.3728813559322034,
        "ruby-16": 0.15254237288135597,
        "ruby-2": 0.27118644067796616,
        "ruby-11": 0.2542372881355932,
        "ruby-1": 0.15254237288135597,
        "ruby-10": 0.22608695652173916,
        "ruby-17": 0.09876543209876543,
        "ruby-12": 0.38983050847457623,
        "ruby-6": 0.4067796610169492,
        "ruby-18": 0.0847457627118644,
        "ruby-15": 0.265625,
        "ruby-13": 0.5423728813559322,
        "ruby-9": 0.31746031746031744,
        "ruby-4": 0.06779661016949157,
        "ruby-14": 0.24590163934426235,
        "ruby-5": 0.35593220338983056,
        "ruby-19": 0.18644067796610164,
        "codebertscore_f1-3": 0.8902917504310608,
        "codebertscore_f3-3": 0.8833320736885071,
        "codebertscore_f1-0": 0.9312517642974854,
        "codebertscore_f3-0": 0.9244024157524109,
        "codebertscore_f1-8": 0.0,
        "codebertscore_f3-8": 0.0,
        "codebertscore_f1-7": 0.8730033040046692,
        "codebertscore_f3-7": 0.8551409244537354,
        "codebertscore_f1-16": 0.7802135348320007,
        "codebertscore_f3-16": 0.7406333684921265,
        "codebertscore_f1-2": 0.820858895778656,
        "codebertscore_f3-2": 0.7783260345458984,
        "codebertscore_f1-11": 0.8128910064697266,
        "codebertscore_f3-11": 0.786733090877533,
        "codebertscore_f1-1": 0.7802135348320007,
        "codebertscore_f3-1": 0.7406333684921265,
        "codebertscore_f1-10": 0.7587625980377197,
        "codebertscore_f3-10": 0.8043422102928162,
        "codebertscore_f1-17": 0.7035666108131409,
        "codebertscore_f3-17": 0.7279953956604004,
        "codebertscore_f1-12": 0.844897449016571,
        "codebertscore_f3-12": 0.8168955445289612,
        "codebertscore_f1-6": 0.8939607739448547,
        "codebertscore_f3-6": 0.8656758666038513,
        "codebertscore_f1-18": 0.7431122660636902,
        "codebertscore_f3-18": 0.7004876136779785,
        "codebertscore_f1-15": 0.8559996485710144,
        "codebertscore_f3-15": 0.859335720539093,
        "codebertscore_f1-13": 0.8993322253227234,
        "codebertscore_f3-13": 0.8734182715415955,
        "codebertscore_f1-9": 0.8545429110527039,
        "codebertscore_f3-9": 0.8554269671440125,
        "codebertscore_f1-4": 0.7293225526809692,
        "codebertscore_f3-4": 0.6687029004096985,
        "codebertscore_f1-14": 0.8605437278747559,
        "codebertscore_f3-14": 0.8545671701431274,
        "codebertscore_f1-5": 0.8426454663276672,
        "codebertscore_f3-5": 0.8485476970672607,
        "codebertscore_f1-19": 0.7865189909934998,
        "codebertscore_f3-19": 0.796737551689148,
        "codebertscore_s_f1-3": 0.8973366022109985,
        "codebertscore_s_f3-3": 0.8914337754249573,
        "codebertscore_s_f1-0": 0.9218469262123108,
        "codebertscore_s_f3-0": 0.9154602885246277,
        "codebertscore_s_f1-8": 0.0,
        "codebertscore_s_f3-8": 0.0,
        "codebertscore_s_f1-7": 0.8755683302879333,
        "codebertscore_s_f3-7": 0.8594626784324646,
        "codebertscore_s_f1-16": 0.7826039791107178,
        "codebertscore_s_f3-16": 0.7481996417045593,
        "codebertscore_s_f1-2": 0.8369864225387573,
        "codebertscore_s_f3-2": 0.7978012561798096,
        "codebertscore_s_f1-11": 0.8169782161712646,
        "codebertscore_s_f3-11": 0.7927618622779846,
        "codebertscore_s_f1-1": 0.7826039791107178,
        "codebertscore_s_f3-1": 0.7481996417045593,
        "codebertscore_s_f1-10": 0.7632396221160889,
        "codebertscore_s_f3-10": 0.805129885673523,
        "codebertscore_s_f1-17": 0.6971259117126465,
        "codebertscore_s_f3-17": 0.7194947600364685,
        "codebertscore_s_f1-12": 0.852977454662323,
        "codebertscore_s_f3-12": 0.8243499994277954,
        "codebertscore_s_f1-6": 0.9071182608604431,
        "codebertscore_s_f3-6": 0.8802796602249146,
        "codebertscore_s_f1-18": 0.7308031320571899,
        "codebertscore_s_f3-18": 0.6906178593635559,
        "codebertscore_s_f1-15": 0.8558092713356018,
        "codebertscore_s_f3-15": 0.8605363965034485,
        "codebertscore_s_f1-13": 0.907874584197998,
        "codebertscore_s_f3-13": 0.8825829029083252,
        "codebertscore_s_f1-9": 0.8527189493179321,
        "codebertscore_s_f3-9": 0.855051577091217,
        "codebertscore_s_f1-4": 0.7578075528144836,
        "codebertscore_s_f3-4": 0.6722606420516968,
        "codebertscore_s_f1-14": 0.8624706864356995,
        "codebertscore_s_f3-14": 0.8575583696365356,
        "codebertscore_s_f1-5": 0.8444895148277283,
        "codebertscore_s_f3-5": 0.8503965139389038,
        "codebertscore_s_f1-19": 0.7975019812583923,
        "codebertscore_s_f3-19": 0.8092368841171265,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 2,
        "raw_gpt35_nsnr-2": "2",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\nfunction has_close_elements(numbers, threshold){\n",
        "snippet": [
            "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n"
        ],
        "simplified": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "task_id": "0",
        "3": "if(numbers.length <= 1){\n\t\treturn false;\n\t}\n\n\tvar numbersSorted = numbers.sort();\n\tvar currentNumber = numbersSorted[0];\n\tvar closestDifference = threshold + 1;\n\n\tfor(var i = 1; i < numbersSorted.length; i++){\n\t\tvar currentDifference = Math.abs(currentNumber - numbersSorted[i]);\n\t\tif(currentDifference < closestDifference){\n\t\t\tclosestDifference = currentDifference;\n\t\t}\n\t\tcurrentNumber = numbersSorted[i];\n\t}\n\n\treturn closestDifference < threshold;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "//let numbers = [1.0, 2.0, 3.0];\n    //let threshold = 0.5;\n    let bool = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(i === j){\n                continue;\n            }\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return bool;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "for(var i = 0; i < numbers.length; i++){\n    for(var j = i+1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j < numbers.length; j++){\n            if(i !== j){\n                var diff = numbers[i] - numbers[j];\n                if(diff < 0){\n                    diff = -diff;\n                }\n                if(diff < threshold){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(numbers.length <= 1){\n    return false;\n  }\n  numbers.sort();\n  var dist = numbers[1] - numbers[0];\n  if(dist <= threshold){\n    return true;\n  }\n  for(var i = 2; i < numbers.length; i++){\n    dist = numbers[i] - numbers[i-1];\n    if(dist <= threshold){\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let result = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(i !== j){\n                let diff = Math.abs(numbers[i] - numbers[j]);\n                if(diff < threshold){\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let hasClose = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(numbers[i] - numbers[j] == threshold){\n                hasClose = true;\n            }\n        }\n    }\n    return hasClose;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "for(var i = 0; i < numbers.length; i++){\n    for(var j = 0; j < numbers.length; j++){\n      if(i != j){\n        var diff = numbers[i] - numbers[j];\n        diff = diff > 0 ? diff : -diff;\n        if(diff < threshold){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let result = false;\n    numbers.sort(function(a, b){return a-b});\n\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(numbers[i+1] - numbers[i] < threshold){\n            result = true;\n            break;\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j < numbers.length; j++){\n            if(numbers[i] != numbers[j]){\n                if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var closestElement\n    for(var i = 0; i < numbers.length; i++){\n        var difference = numbers[i+1] - numbers[i]\n        if(difference < threshold){\n            closestElement = numbers[i+1]\n        }\n    }\n    return closestElement\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "for(var i = 0; i < numbers.length; i++){\n    for(var j = i+1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "// write your answer between //<...> and //<...>\n    //<...>\n    return false;\n    //<...>\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "for(var i = 0; i < numbers.length; i++){\n    for(var j = i + 1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "//check if empty list\n  if(numbers.length === 0){\n    return false;\n  }\n  //Check if the distance between a given element and the next one is less than threshold.\n  //If so, return true;\n  for(var i = 0; i < numbers.length-1; i++){\n    if(Math.abs(numbers[i] - numbers[i+1]) < threshold){\n      return true;\n    }\n  }\n  //otherwise return false\n  return false;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var len = numbers.length\n    for(var i = 0; i < len; i++){\n        for(var j = i+1; j < len; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true\n            }\n        }\n    }\n    return false\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let result = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                result = true;\n            }\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let already_found = false;\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        already_found = true;\n      }\n    }\n  }\n  return already_found;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var i;\n    for(i = 0; i < numbers.length; i++){\n        for(j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.23910138609319856,
        "bleu-0": 0.5892976673043021,
        "bleu-8": 0.6855359924569799,
        "bleu-7": 0.6823154002128089,
        "bleu-16": 0.37143861252019833,
        "bleu-2": 0.6855359924569799,
        "bleu-11": 0.7976143856600367,
        "bleu-1": 0.6664966132843769,
        "bleu-10": 0.7116402578157225,
        "bleu-17": 0.40279738270282694,
        "bleu-12": 0.7539193566407356,
        "bleu-6": 0.2889819736639778,
        "bleu-18": 0.6855359924569799,
        "bleu-15": 0.016580434186184066,
        "bleu-13": 0.6855359924569799,
        "bleu-9": 0.37652848810612505,
        "bleu-4": 0.525789311104407,
        "bleu-14": 0.704128382746418,
        "bleu-5": 0.704128382746418,
        "bleu-19": 0.6926643061024635,
        "codebleu-3": 0.6802376827967901,
        "codebleu-0": 0.8146475236294554,
        "codebleu-8": 0.7167692847162687,
        "codebleu-7": 0.8280373636161351,
        "codebleu-16": 0.6845947721570423,
        "codebleu-2": 0.7167692847162687,
        "codebleu-11": 0.8606558353227358,
        "codebleu-1": 0.6709901923756555,
        "codebleu-10": 0.8415191217076577,
        "codebleu-17": 0.6024960909621817,
        "codebleu-12": 0.8238748054124394,
        "codebleu-6": 0.45888077865991456,
        "codebleu-18": 0.7167692847162687,
        "codebleu-15": 0.08453727349000549,
        "codebleu-13": 0.7167692847162687,
        "codebleu-9": 0.6602417005931356,
        "codebleu-4": 0.6670724956490087,
        "codebleu-14": 0.750338509756977,
        "codebleu-5": 0.750338509756977,
        "codebleu-19": 0.7212641568716426,
        "chrf-3": 0.45347268024768106,
        "chrf-0": 0.7615413474251421,
        "chrf-8": 0.7301870755814049,
        "chrf-7": 0.717512636279112,
        "chrf-16": 0.5695794469799782,
        "chrf-2": 0.7301870755814049,
        "chrf-11": 0.8292255990366718,
        "chrf-1": 0.6869651871737963,
        "chrf-10": 0.7253905688252645,
        "chrf-17": 0.5268073880379264,
        "chrf-12": 0.7502273747399361,
        "chrf-6": 0.45548165562987547,
        "chrf-18": 0.7301870755814049,
        "chrf-15": 0.10350315455124211,
        "chrf-13": 0.7301870755814049,
        "chrf-9": 0.5817989820779953,
        "chrf-4": 0.5884867970385564,
        "chrf-14": 0.7311122986451025,
        "chrf-5": 0.7080095324089108,
        "chrf-19": 0.7331294963202848,
        "rougel-3": 0.43750000000000006,
        "rougel-0": 0.7329842931937173,
        "rougel-8": 0.8513513513513514,
        "rougel-7": 0.8402366863905325,
        "rougel-16": 0.5287356321839081,
        "rougel-2": 0.8513513513513514,
        "rougel-11": 0.9101796407185629,
        "rougel-1": 0.7682119205298014,
        "rougel-10": 0.8433734939759036,
        "rougel-17": 0.5657894736842105,
        "rougel-12": 0.8819875776397514,
        "rougel-6": 0.5255474452554745,
        "rougel-18": 0.8513513513513514,
        "rougel-15": 0.1680672268907563,
        "rougel-13": 0.8513513513513514,
        "rougel-9": 0.5217391304347826,
        "rougel-4": 0.7432432432432432,
        "rougel-14": 0.818181818181818,
        "rougel-5": 0.818181818181818,
        "rougel-19": 0.8456375838926175,
        "meteor-3": 0.567944236098998,
        "meteor-0": 0.9125656408698276,
        "meteor-8": 0.7703566188134517,
        "meteor-7": 0.813685543805033,
        "meteor-16": 0.6509091032900556,
        "meteor-2": 0.7703566188134517,
        "meteor-11": 0.9518553189194816,
        "meteor-1": 0.6698356638155566,
        "meteor-10": 0.8094191522762952,
        "meteor-17": 0.5652069323583636,
        "meteor-12": 0.8797339786141782,
        "meteor-6": 0.41362812629915535,
        "meteor-18": 0.7703566188134517,
        "meteor-15": 0.09802371541501977,
        "meteor-13": 0.7703566188134517,
        "meteor-9": 0.6354752836345635,
        "meteor-4": 0.6921460800902426,
        "meteor-14": 0.8020204569346766,
        "meteor-5": 0.8020204569346766,
        "meteor-19": 0.7791436992372939,
        "ruby-3": 0.2946428571428571,
        "ruby-0": 0.5855855855855856,
        "ruby-8": 0.7625,
        "ruby-7": 0.752808988764045,
        "ruby-16": 0.32978723404255317,
        "ruby-2": 0.7625,
        "ruby-11": 0.8735632183908046,
        "ruby-1": 0.6125,
        "ruby-10": 0.7674418604651163,
        "ruby-17": 0.36250000000000004,
        "ruby-12": 0.8148148148148149,
        "ruby-6": 0.35,
        "ruby-18": 0.7625,
        "ruby-15": 0.09999999999999998,
        "ruby-13": 0.7625,
        "ruby-9": 0.32692307692307687,
        "ruby-4": 0.5875,
        "ruby-14": 0.6875,
        "ruby-5": 0.6875,
        "ruby-19": 0.725,
        "codebertscore_f1-3": 0.8092496395111084,
        "codebertscore_f3-3": 0.8421899080276489,
        "codebertscore_f1-0": 0.8671916127204895,
        "codebertscore_f3-0": 0.8911617398262024,
        "codebertscore_f1-8": 0.9331790804862976,
        "codebertscore_f3-8": 0.9342220425605774,
        "codebertscore_f1-7": 0.9129932522773743,
        "codebertscore_f3-7": 0.9163239002227783,
        "codebertscore_f1-16": 0.8559525012969971,
        "codebertscore_f3-16": 0.8544679880142212,
        "codebertscore_f1-2": 0.9375896453857422,
        "codebertscore_f3-2": 0.9381497502326965,
        "codebertscore_f1-11": 0.9343687295913696,
        "codebertscore_f3-11": 0.9414354562759399,
        "codebertscore_f1-1": 0.9058851003646851,
        "codebertscore_f3-1": 0.9109472632408142,
        "codebertscore_f1-10": 0.9342018961906433,
        "codebertscore_f3-10": 0.9381868839263916,
        "codebertscore_f1-17": 0.8397727012634277,
        "codebertscore_f3-17": 0.8618829846382141,
        "codebertscore_f1-12": 0.9507725834846497,
        "codebertscore_f3-12": 0.9430899620056152,
        "codebertscore_f1-6": 0.8401647806167603,
        "codebertscore_f3-6": 0.8507954478263855,
        "codebertscore_f1-18": 0.9331790804862976,
        "codebertscore_f3-18": 0.9342220425605774,
        "codebertscore_f1-15": 0.663749635219574,
        "codebertscore_f3-15": 0.6520053148269653,
        "codebertscore_f1-13": 0.9339836239814758,
        "codebertscore_f3-13": 0.9342009425163269,
        "codebertscore_f1-9": 0.8310354351997375,
        "codebertscore_f3-9": 0.8732054233551025,
        "codebertscore_f1-4": 0.9175397157669067,
        "codebertscore_f3-4": 0.9256733655929565,
        "codebertscore_f1-14": 0.9196859002113342,
        "codebertscore_f3-14": 0.927315890789032,
        "codebertscore_f1-5": 0.9084615707397461,
        "codebertscore_f3-5": 0.9243370890617371,
        "codebertscore_f1-19": 0.9209402799606323,
        "codebertscore_f3-19": 0.9185792207717896,
        "codebertscore_s_f1-3": 0.8133335113525391,
        "codebertscore_s_f3-3": 0.8453667759895325,
        "codebertscore_s_f1-0": 0.8855734467506409,
        "codebertscore_s_f3-0": 0.907890260219574,
        "codebertscore_s_f1-8": 0.9393731355667114,
        "codebertscore_s_f3-8": 0.939899206161499,
        "codebertscore_s_f1-7": 0.9222451448440552,
        "codebertscore_s_f3-7": 0.9265540242195129,
        "codebertscore_s_f1-16": 0.8616002202033997,
        "codebertscore_s_f3-16": 0.8595755100250244,
        "codebertscore_s_f1-2": 0.9390840530395508,
        "codebertscore_s_f3-2": 0.9393941760063171,
        "codebertscore_s_f1-11": 0.9459079504013062,
        "codebertscore_s_f3-11": 0.9529068470001221,
        "codebertscore_s_f1-1": 0.9102306962013245,
        "codebertscore_s_f3-1": 0.9160325527191162,
        "codebertscore_s_f1-10": 0.9365721344947815,
        "codebertscore_s_f3-10": 0.9414372444152832,
        "codebertscore_s_f1-17": 0.8451828360557556,
        "codebertscore_s_f3-17": 0.8677857518196106,
        "codebertscore_s_f1-12": 0.9531829953193665,
        "codebertscore_s_f3-12": 0.9456022381782532,
        "codebertscore_s_f1-6": 0.8436805605888367,
        "codebertscore_s_f3-6": 0.8589138388633728,
        "codebertscore_s_f1-18": 0.9393731355667114,
        "codebertscore_s_f3-18": 0.939899206161499,
        "codebertscore_s_f1-15": 0.6595321297645569,
        "codebertscore_s_f3-15": 0.6429740190505981,
        "codebertscore_s_f1-13": 0.9397995471954346,
        "codebertscore_s_f3-13": 0.9397834539413452,
        "codebertscore_s_f1-9": 0.8392386436462402,
        "codebertscore_s_f3-9": 0.8853549361228943,
        "codebertscore_s_f1-4": 0.9229196906089783,
        "codebertscore_s_f3-4": 0.9321380853652954,
        "codebertscore_s_f1-14": 0.9251394271850586,
        "codebertscore_s_f3-14": 0.9330950975418091,
        "codebertscore_s_f1-5": 0.9141623377799988,
        "codebertscore_s_f3-5": 0.9314422011375427,
        "codebertscore_s_f1-19": 0.9300770163536072,
        "codebertscore_s_f3-19": 0.9285429120063782,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 0,
        "raw_gpt35_nsnr-16": "Score: 4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 1,
        "raw_gpt35_nswr-6": "1",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nfunction reverse_delete(s, c){\n",
        "snippet": [
            "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n"
        ],
        "simplified": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
        "task_id": "112",
        "3": "let str = '';\n  s.split('').map(function(e){\n    if (c.indexOf(e) == -1) str += e;\n  });\n  let r = str.split('').reverse().join('');\n  let b = str.localeCompare(r);\n  return (b == 0) ? [str, true] : [str, false];\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var newStr = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(c.indexOf(s[i]) === -1){\n      newStr += s[i];\n    }\n  }\n  var reversed = newStr.split(\"\").reverse().join(\"\");\n  return [newStr, newStr === reversed];\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "const arr = s.split('');\n    c.split('').forEach(i => {\n      if(arr.includes(i)){\n        arr.splice(arr.indexOf(i), 1);\n      }\n    });\n    let ans = arr.join('');\n    let check = true;\n    for(let i = 0; i < ans.length / 2; i++){\n      if(ans[i] !== ans[ans.length - 1 - i]){\n        check = false;\n      }\n    }\n    return [ans, check];\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let found = false;\n  for(let i=0; i<s.length; i++){\n    for(let j=0; j<c.length; j++){\n      if(s[i] === c[j]){\n        found = true;\n        s = s.slice(0,i) + s.slice(i+1,s.length);\n        i = -1;\n        break;\n      }\n    }\n  }\n  return [s, found && s === s.split('').reverse().join('')];\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let str = s.split('');\n    let remover = c.split('');\n    let result = [];\n    for(let el of str){\n        if(!remover.includes(el)){\n            result.push(el);\n        }\n    }\n    return [result.join(''), result.join('') === result.reverse().join('')];\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let output = '';\n    for(let ch of s){\n        if(!c.includes(ch)) output += ch;\n    }\n    let outputReverse = output.split('').reverse().join('');\n    return [output, output === outputReverse];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "s = s.split('').filter(i => !c.includes(i)).join('');\n    return [s, s === s.split('').reverse().join('')];\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let ss = s.split('');\n    let cs = c.split('');\n    let res = [];\n    for(let i=0; i<ss.length; i++){\n        if(cs.indexOf(ss[i])===-1){\n            res.push(ss[i]);\n        }\n    }\n    if(res.join('')===res.reverse().join('')){\n        return [res.join(''), true];\n    }else{\n        return [res.join(''), false];\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let ss = s.split('').filter(item => c.indexOf(item) < 0).join('');\n    return [ss, ss.split('').reverse().join('') === ss];\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let res = '';\n  s.split('').map( x => {\n    if(c.indexOf(x) === -1) res += x;\n  });\n  let rev = res.split('').reverse().join('');\n  return [res, res === rev];\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let result = \"\";\n    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i]) < 0){\n            result += s[i];\n        }\n    }\n    return [result, isPalindrome(result)];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(let i = 0; i < c.length; i++){\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    return [s, s.split('').reverse().join('') === s];\n}\nreverse_delete(\"abcde\", \"ae\");\nreverse_delete(\"abcdef\", \"b\");\nreverse_delete(\"abcdedcba\", \"ab\");",
        "grade-6": {
            "execution": 1
        },
        "18": "let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i]) < 0){\n            result += s[i];\n        }\n    }\n    console.log(result);\n    return [result, (result === result.split('').reverse().join(''))];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let result = s;\n    for(let i = 0; i < s.length; i++){\n        for(let j = 0; j < c.length; j++){\n            if(s[i] === c[j]){\n                result = result.replace(s[i], '');\n            }\n        }\n    }\n    let reverseResult = result.split('').reverse().join('');\n    return [result, result === reverseResult];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let i = s.length - 1;\n    for(let i = 0; i < s.length; i++){\n        for(let j = 0; j < c.length; j++){\n            if(s[i] === c[j]){\n                let temp = s.split('');\n                temp.splice(i, 1);\n                s = temp.join('');\n                i--;\n                break;\n            }\n        }\n    }\n    return [s, s === s.split('').reverse().join('')];\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "c.split('').forEach(ch=>s=s.replace(ch,''))\n    return (s,s==s.split('').reverse().join(''))\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let new_str = \"\";\n    let i = 0;\n    while(i < s.length){\n        if(c.indexOf(s[i]) === -1){\n            new_str += s[i];\n        }\n        i++;\n    }\n    let reverse_str = new_str.split(\"\").reverse().join(\"\");\n    if(reverse_str === new_str){\n        return [new_str, true];\n    }\n    return [new_str, false];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "//You can do it! ;)\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "c = [...new Set(c)];\n    s = s.split('').filter(a => !c.includes(a)).join('');\n    return [s, s === s.split('').reverse().join('')];\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// Write your code here\n    for(let i = 0; i < c.length; i++){\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    let s_back = s.split('').reverse().join('');\n    return [s, s === s_back];\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.060597957578203195,
        "bleu-0": 0.2062370914994723,
        "bleu-8": 0.2015761990474398,
        "bleu-7": 0.38617064854885447,
        "bleu-16": 0.040921876089312886,
        "bleu-2": 0.02887643216279173,
        "bleu-11": 0.00875838175938386,
        "bleu-1": 0.21483369011841,
        "bleu-10": 0.00932114798373388,
        "bleu-17": 0.02509370418058635,
        "bleu-12": 0.1310754946875604,
        "bleu-6": 0.15024561717511814,
        "bleu-18": 0.19824679911464874,
        "bleu-15": 0.3657213812979574,
        "bleu-13": 0.39775329046860625,
        "bleu-9": 0.007210502336218625,
        "bleu-4": 0.16949535661200318,
        "bleu-14": 8.298739273829347e-08,
        "bleu-5": 0.011336286559636139,
        "bleu-19": 0.12717611284149977,
        "codebleu-3": 0.33099647127898396,
        "codebleu-0": 0.3510634635294837,
        "codebleu-8": 0.4958447741465756,
        "codebleu-7": 0.5472619316558234,
        "codebleu-16": 0.2978063434968011,
        "codebleu-2": 0.21025329581186808,
        "codebleu-11": 0.1607327376273465,
        "codebleu-1": 0.4998788046509704,
        "codebleu-10": 0.18089809765025602,
        "codebleu-17": 0.2472712739005414,
        "codebleu-12": 0.2637923326832463,
        "codebleu-6": 0.3249312088580952,
        "codebleu-18": 0.3572205773264919,
        "codebleu-15": 0.48792597158513207,
        "codebleu-13": 0.5427745696387862,
        "codebleu-9": 0.15192155850833455,
        "codebleu-4": 0.39455118053133853,
        "codebleu-14": 0.022764230622666096,
        "codebleu-5": 0.1995025513664219,
        "codebleu-19": 0.2966272376265294,
        "chrf-3": 0.17648141920314628,
        "chrf-0": 0.26104745706766774,
        "chrf-8": 0.28745906813562805,
        "chrf-7": 0.4393053178318776,
        "chrf-16": 0.16730389187889697,
        "chrf-2": 0.1519016574126933,
        "chrf-11": 0.09242406102179318,
        "chrf-1": 0.3117498244712062,
        "chrf-10": 0.09999927455747043,
        "chrf-17": 0.11924395390700455,
        "chrf-12": 0.27368690066698265,
        "chrf-6": 0.21205940068137732,
        "chrf-18": 0.2910474561701646,
        "chrf-15": 0.40773646013705156,
        "chrf-13": 0.44429595078609746,
        "chrf-9": 0.08879786628098017,
        "chrf-4": 0.2661754343308746,
        "chrf-14": 0.01272101326928035,
        "chrf-5": 0.09867386396195915,
        "chrf-19": 0.21377441578410308,
        "rougel-3": 0.3170731707317073,
        "rougel-0": 0.45643153526970953,
        "rougel-8": 0.43478260869565216,
        "rougel-7": 0.5527272727272727,
        "rougel-16": 0.2916666666666667,
        "rougel-2": 0.28837209302325584,
        "rougel-11": 0.2403846153846154,
        "rougel-1": 0.40989399293286216,
        "rougel-10": 0.22748815165876776,
        "rougel-17": 0.30973451327433627,
        "rougel-12": 0.4528301886792453,
        "rougel-6": 0.3228346456692913,
        "rougel-18": 0.45569620253164556,
        "rougel-15": 0.555984555984556,
        "rougel-13": 0.5270758122743683,
        "rougel-9": 0.2277227722772277,
        "rougel-4": 0.465863453815261,
        "rougel-14": 0.0375,
        "rougel-5": 0.23529411764705885,
        "rougel-19": 0.32758620689655177,
        "meteor-3": 0.2551338942677117,
        "meteor-0": 0.28073713691993496,
        "meteor-8": 0.3735534735688081,
        "meteor-7": 0.39498640861346235,
        "meteor-16": 0.22054866850321395,
        "meteor-2": 0.1757293461437374,
        "meteor-11": 0.1587271569242723,
        "meteor-1": 0.3739289781943966,
        "meteor-10": 0.15838967891522,
        "meteor-17": 0.20501683029453016,
        "meteor-12": 0.23956791094945531,
        "meteor-6": 0.23921813329824007,
        "meteor-18": 0.2759497511395569,
        "meteor-15": 0.33396337831130396,
        "meteor-13": 0.36975076753995245,
        "meteor-9": 0.14695653199089848,
        "meteor-4": 0.3555585191053308,
        "meteor-14": 0.023207720588235295,
        "meteor-5": 0.17498735031202564,
        "meteor-19": 0.22530190934614075,
        "ruby-3": 0.22666666666666668,
        "ruby-0": 0.31999999999999995,
        "ruby-8": 0.32666666666666666,
        "ruby-7": 0.43999999999999995,
        "ruby-16": 0.18666666666666665,
        "ruby-2": 0.19333333333333336,
        "ruby-11": 0.16000000000000003,
        "ruby-1": 0.28,
        "ruby-10": 0.16000000000000003,
        "ruby-17": 0.21333333333333337,
        "ruby-12": 0.30666666666666664,
        "ruby-6": 0.22666666666666668,
        "ruby-18": 0.33999999999999997,
        "ruby-15": 0.44666666666666666,
        "ruby-13": 0.42000000000000004,
        "ruby-9": 0.1333333333333333,
        "ruby-4": 0.33999999999999997,
        "ruby-14": 0.020000000000000018,
        "ruby-5": 0.1466666666666666,
        "ruby-19": 0.24,
        "codebertscore_f1-3": 0.7294244170188904,
        "codebertscore_f3-3": 0.7221209406852722,
        "codebertscore_f1-0": 0.7907726764678955,
        "codebertscore_f3-0": 0.7913798093795776,
        "codebertscore_f1-8": 0.8045847415924072,
        "codebertscore_f3-8": 0.8209936022758484,
        "codebertscore_f1-7": 0.8291342854499817,
        "codebertscore_f3-7": 0.8321457505226135,
        "codebertscore_f1-16": 0.7095971703529358,
        "codebertscore_f3-16": 0.6983858942985535,
        "codebertscore_f1-2": 0.711026668548584,
        "codebertscore_f3-2": 0.6980775594711304,
        "codebertscore_f1-11": 0.6724945902824402,
        "codebertscore_f3-11": 0.6482231616973877,
        "codebertscore_f1-1": 0.800545334815979,
        "codebertscore_f3-1": 0.8074908256530762,
        "codebertscore_f1-10": 0.672910213470459,
        "codebertscore_f3-10": 0.6583158373832703,
        "codebertscore_f1-17": 0.7123526334762573,
        "codebertscore_f3-17": 0.6952139139175415,
        "codebertscore_f1-12": 0.8020696640014648,
        "codebertscore_f3-12": 0.7905786633491516,
        "codebertscore_f1-6": 0.7288467288017273,
        "codebertscore_f3-6": 0.744672954082489,
        "codebertscore_f1-18": 0.796724259853363,
        "codebertscore_f3-18": 0.7920660972595215,
        "codebertscore_f1-15": 0.8424544930458069,
        "codebertscore_f3-15": 0.826562762260437,
        "codebertscore_f1-13": 0.8379849791526794,
        "codebertscore_f3-13": 0.8359067440032959,
        "codebertscore_f1-9": 0.6594527959823608,
        "codebertscore_f3-9": 0.6322699785232544,
        "codebertscore_f1-4": 0.7971397638320923,
        "codebertscore_f3-4": 0.8005911707878113,
        "codebertscore_f1-14": 0.5553995370864868,
        "codebertscore_f3-14": 0.525768518447876,
        "codebertscore_f1-5": 0.6629403829574585,
        "codebertscore_f3-5": 0.6391202807426453,
        "codebertscore_f1-19": 0.7590391635894775,
        "codebertscore_f3-19": 0.7623583674430847,
        "codebertscore_s_f1-3": 0.7436687350273132,
        "codebertscore_s_f3-3": 0.738971471786499,
        "codebertscore_s_f1-0": 0.8039960265159607,
        "codebertscore_s_f3-0": 0.806613564491272,
        "codebertscore_s_f1-8": 0.8078023791313171,
        "codebertscore_s_f3-8": 0.8213528990745544,
        "codebertscore_s_f1-7": 0.8360167741775513,
        "codebertscore_s_f3-7": 0.837926983833313,
        "codebertscore_s_f1-16": 0.7209293842315674,
        "codebertscore_s_f3-16": 0.7114704847335815,
        "codebertscore_s_f1-2": 0.7194204926490784,
        "codebertscore_s_f3-2": 0.7097137570381165,
        "codebertscore_s_f1-11": 0.6898928284645081,
        "codebertscore_s_f3-11": 0.6590479016304016,
        "codebertscore_s_f1-1": 0.8032246232032776,
        "codebertscore_s_f3-1": 0.810189425945282,
        "codebertscore_s_f1-10": 0.6885825991630554,
        "codebertscore_s_f3-10": 0.6718465089797974,
        "codebertscore_s_f1-17": 0.7262499928474426,
        "codebertscore_s_f3-17": 0.7128101587295532,
        "codebertscore_s_f1-12": 0.8163228034973145,
        "codebertscore_s_f3-12": 0.8084805011749268,
        "codebertscore_s_f1-6": 0.7474153637886047,
        "codebertscore_s_f3-6": 0.7679861783981323,
        "codebertscore_s_f1-18": 0.8133183717727661,
        "codebertscore_s_f3-18": 0.8105416893959045,
        "codebertscore_s_f1-15": 0.8485616445541382,
        "codebertscore_s_f3-15": 0.8346715569496155,
        "codebertscore_s_f1-13": 0.8443757891654968,
        "codebertscore_s_f3-13": 0.8424240350723267,
        "codebertscore_s_f1-9": 0.6743875741958618,
        "codebertscore_s_f3-9": 0.6399792432785034,
        "codebertscore_s_f1-4": 0.8011720776557922,
        "codebertscore_s_f3-4": 0.8078781962394714,
        "codebertscore_s_f1-14": 0.5463501214981079,
        "codebertscore_s_f3-14": 0.5185627937316895,
        "codebertscore_s_f1-5": 0.6803614497184753,
        "codebertscore_s_f3-5": 0.6521348357200623,
        "codebertscore_s_f1-19": 0.7687280774116516,
        "codebertscore_s_f3-19": 0.7769315242767334,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "0",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u279e True\n// is_nested('[]]]]]]][[[[[]') \u279e False\n// is_nested('[][]') \u279e False\n// is_nested('[]') \u279e False\n// is_nested('[[][]]') \u279e True\n// is_nested('[[]][[') \u279e True\nfunction is_nested(string){\n",
        "snippet": [
            "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n"
        ],
        "simplified": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
        "task_id": "132",
        "3": "let leftBrackets = 0;\n    let rightBrackets = 0;\n    let hasNested = false;\n    let hasError = false;\n    for(let i = 0; i < string.length; i++){\n        let currentBracket = string[i];\n        if(currentBracket === '['){\n            leftBrackets++;\n        }\n        if(currentBracket === ']'){\n            rightBrackets++;\n        }\n        if(leftBrackets < rightBrackets){\n            hasError = true;\n        }\n        if(leftBrackets > rightBrackets){\n            hasNested = true;\n        }\n    }\n    return hasNested && !hasError;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for(let i = 0; i < string.length; i++){\n        if(string[i] == ']' && string[i-1] == '['){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let counter = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            counter++;\n        }\n        if(string[i] === \"]\"){\n            counter--;\n        }\n        if(counter === 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var count = 0;\n    var arr = string.split('');\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === '['){\n            count++;\n        }\n        if(arr[i] === ']'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count === 0;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = 0;\n\tif(string.length%2 === 0){\n\t\tvar left = string.length/2;\n\t\tvar right = string.length/2;\n\t\tfor(var i = 0; i < string.length; i++){\n\t\t\tif(string[i] == '['){\n\t\t\t\tleft--;\n\t\t\t}\n\t\t\tif(string[i] == ']'){\n\t\t\t\tright--;\n\t\t\t}\n\t\t\tif(right < 0 || left < 0){\n\t\t\t\tresult = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult = 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(result == 1){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            count++;\n        }\n        if(string[i] === ']'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count === 0;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let openBracket=['[','{','('];\n    let closingBracket=[')','}',']'];\n    let openingStack=[];\n    let checkingResult=0;\n    for(let i=0;i<string.length;i++){\n        if(openBracket.includes(string[i])){\n            openingStack.push(string[i]);\n        }\n        else if(closingBracket.includes(string[i])){\n            if(openBracket.indexOf(openingStack[openingStack.length-1])===closingBracket.indexOf(string[i])){\n                openingStack.pop();\n            }\n            else{\n                checkingResult=1;\n                break;\n            }\n        }\n    }\n    if(checkingResult==1 || openingStack.length!=0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let i = 0\n    for(i = 0; i < string.length; i++){\n        if(string[i] === \"[\" && string[i+1] === \"]\"){\n            return true\n        }\n    }\n    return false\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            count++;\n        }else if(string[i] === \"]\"){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count === 0;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let i = 0;\n    while(i<string.length){\n        if(string[i]===string[i+1]){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let myString = string.split('');\n    let counter = 0;\n    for(let i = 0; i < myString.length; i++){\n        if(myString[i] === '['){\n            counter++\n        }else if(myString[i] === ']'){\n            counter--\n        }\n        if(counter < 0){\n            return false\n        }\n    }\n    return counter == 0;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let counter = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            counter++;\n        }\n        if(string[i] === ']'){\n            counter--;\n        }\n        if(counter < 0){\n            return false;\n        }\n    }\n    return counter === 0;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(string.indexOf('[][]') !== -1){\n        return false;\n    }else if(string.indexOf('[]') !== -1){\n        return false;\n    }else if(string.indexOf('[[][]]') !== -1){\n        return true;\n    }else if(string.indexOf('[[]][[') !== -1){\n        return true;\n    }else if(string.indexOf('[[]]') !== -1){\n        return true;\n    }else if(string.indexOf('[]]]]]]][[[[[]') !== -1){\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            count++;\n        }else if(string[i] === \"]\"){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count > 0 ? false : true;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(string.length%2===0){\n    while(string.length>0){\n    if(string.includes('[[[[')){\n        return false\n    }\n    else if(string.includes(']]]]')){\n        return false\n    }\n    else if(string.includes('[[')){\n        string=string.replace('[[','')\n    }\n    else if(string.includes(']]')){\n        string=string.replace(']]','')\n    }\n    else if(string.includes('[]')){\n        string=string.replace('[]','')\n    }\n    else {\n        return false\n    }\n}\nreturn true\n}\nelse{\n    return false\n}\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(string.length == 0){\n        return false;\n    }\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(!string){\n        return false;\n    }\n    let right = [];\n    let left = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            left.push(string[i]);\n        }else{\n            right.push(string[i]);\n        }\n    }\n    if(left.length === right.length){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var pareCounter = 0;\n    var bracketCounter = 0;\n    var squareBracketCounter = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == \"{\") pareCounter++;\n        if(string[i] == \"}\") pareCounter--;\n        if(string[i] == \"[\") bracketCounter++;\n        if(string[i] == \"]\") bracketCounter--;\n        if(string[i] == \"(\") squareBracketCounter++;\n        if(string[i] == \")\") squareBracketCounter--;\n        if(pareCounter < 0 || bracketCounter < 0 || squareBracketCounter < 0) return false;\n    }\n    if(pareCounter != 0 || bracketCounter != 0 || squareBracketCounter != 0) return false;\n    return true;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let string2 = string.split('')\n    console.log(string2)\n    let l = 0;\n    let r = 0;\n    for(let i = 0; i < string2.length; i++){\n        if(string2[i] == '['){\n            l++\n        }\n        if(string2[i] == ']'){\n            r++\n        }\n    }\n    if(l == r){\n        return true\n    }else{\n        return false\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.21933158282849607,
        "bleu-0": 0.08558939115672234,
        "bleu-8": 0.17511557289661603,
        "bleu-7": 0.16411851989836918,
        "bleu-16": 0.2692074831874245,
        "bleu-2": 0.1834835876606085,
        "bleu-11": 0.24822912845900377,
        "bleu-1": 0.08715284979766928,
        "bleu-10": 0.174785450183406,
        "bleu-17": 0.0321532587398303,
        "bleu-12": 0.17678351882725024,
        "bleu-6": 0.21575168036250347,
        "bleu-18": 0.1834835876606085,
        "bleu-15": 0.04216937090369385,
        "bleu-13": 0.18695821845772037,
        "bleu-9": 0.08988494004336096,
        "bleu-4": 0.22440126021656126,
        "bleu-14": 0.2508441433752641,
        "bleu-5": 0.20528898695239775,
        "bleu-19": 0.19079324958269175,
        "codebleu-3": 0.38914750654439256,
        "codebleu-0": 0.1711468186455439,
        "codebleu-8": 0.27099997705338075,
        "codebleu-7": 0.3167948658978585,
        "codebleu-16": 0.4614308359090102,
        "codebleu-2": 0.2800965527042833,
        "codebleu-11": 0.5800288766700277,
        "codebleu-1": 0.18738755738128884,
        "codebleu-10": 0.2802505846885373,
        "codebleu-17": 0.13548976246566635,
        "codebleu-12": 0.31247194287252666,
        "codebleu-6": 0.34839347455860903,
        "codebleu-18": 0.2800965527042833,
        "codebleu-15": 0.3243448224074491,
        "codebleu-13": 0.28654867434327946,
        "codebleu-9": 0.3644714673188409,
        "codebleu-4": 0.36076089949991014,
        "codebleu-14": 0.4190097693547595,
        "codebleu-5": 0.48659149256896045,
        "codebleu-19": 0.35625983676057815,
        "chrf-3": 0.2527189259579018,
        "chrf-0": 0.14717774365785155,
        "chrf-8": 0.16014408191686397,
        "chrf-7": 0.13360324710541158,
        "chrf-16": 0.21029181594807664,
        "chrf-2": 0.17118246010656507,
        "chrf-11": 0.36526226670427386,
        "chrf-1": 0.1298120669499974,
        "chrf-10": 0.1533592142792179,
        "chrf-17": 0.10694110334732214,
        "chrf-12": 0.1683769829359491,
        "chrf-6": 0.2056121249404182,
        "chrf-18": 0.1719033624667193,
        "chrf-15": 0.14316336297778545,
        "chrf-13": 0.16826134638917928,
        "chrf-9": 0.17551001933625204,
        "chrf-4": 0.21328636707858903,
        "chrf-14": 0.2104839056393752,
        "chrf-5": 0.243266918358365,
        "chrf-19": 0.17572119010822995,
        "rougel-3": 0.36860068259385664,
        "rougel-0": 0.39449541284403666,
        "rougel-8": 0.4426229508196721,
        "rougel-7": 0.4046692607003891,
        "rougel-16": 0.3841059602649006,
        "rougel-2": 0.44715447154471544,
        "rougel-11": 0.4201680672268907,
        "rougel-1": 0.4072398190045249,
        "rougel-10": 0.42914979757085026,
        "rougel-17": 0.33492822966507174,
        "rougel-12": 0.41860465116279066,
        "rougel-6": 0.47619047619047616,
        "rougel-18": 0.44715447154471544,
        "rougel-15": 0.3003003003003003,
        "rougel-13": 0.44176706827309237,
        "rougel-9": 0.3006134969325154,
        "rougel-4": 0.46274509803921576,
        "rougel-14": 0.5074626865671641,
        "rougel-5": 0.3388888888888889,
        "rougel-19": 0.39846743295019155,
        "meteor-3": 0.3330710232069813,
        "meteor-0": 0.24249273423946602,
        "meteor-8": 0.2778529843184453,
        "meteor-7": 0.2886001853417569,
        "meteor-16": 0.34503661079904396,
        "meteor-2": 0.2840676883780332,
        "meteor-11": 0.36168748778969634,
        "meteor-1": 0.24140168721609342,
        "meteor-10": 0.28060500608070227,
        "meteor-17": 0.20263294474694585,
        "meteor-12": 0.29166877745963277,
        "meteor-6": 0.29781753720982435,
        "meteor-18": 0.2840676883780332,
        "meteor-15": 0.2630502947297087,
        "meteor-13": 0.2951924154308248,
        "meteor-9": 0.21871202916160387,
        "meteor-4": 0.29725026571037705,
        "meteor-14": 0.29498139157870873,
        "meteor-5": 0.34074594380688566,
        "meteor-19": 0.2847400353225018,
        "ruby-3": 0.20606060606060606,
        "ruby-0": 0.2606060606060606,
        "ruby-8": 0.3151515151515152,
        "ruby-7": 0.2545454545454545,
        "ruby-16": 0.21212121212121215,
        "ruby-2": 0.3090909090909091,
        "ruby-11": 0.17708333333333337,
        "ruby-1": 0.2666666666666667,
        "ruby-10": 0.296969696969697,
        "ruby-17": 0.19393939393939397,
        "ruby-12": 0.2545454545454545,
        "ruby-6": 0.32727272727272727,
        "ruby-18": 0.3090909090909091,
        "ruby-15": 0.13690476190476186,
        "ruby-13": 0.296969696969697,
        "ruby-9": 0.12727272727272732,
        "ruby-4": 0.2909090909090909,
        "ruby-14": 0.3090909090909091,
        "ruby-5": 0.23076923076923073,
        "ruby-19": 0.2787878787878788,
        "codebertscore_f1-3": 0.7704673409461975,
        "codebertscore_f3-3": 0.7614681124687195,
        "codebertscore_f1-0": 0.733385443687439,
        "codebertscore_f3-0": 0.6686072945594788,
        "codebertscore_f1-8": 0.7545981407165527,
        "codebertscore_f3-8": 0.6993188858032227,
        "codebertscore_f1-7": 0.7493152618408203,
        "codebertscore_f3-7": 0.709312915802002,
        "codebertscore_f1-16": 0.7427041530609131,
        "codebertscore_f3-16": 0.7107039093971252,
        "codebertscore_f1-2": 0.7572833299636841,
        "codebertscore_f3-2": 0.700488269329071,
        "codebertscore_f1-11": 0.8045294284820557,
        "codebertscore_f3-11": 0.8042563796043396,
        "codebertscore_f1-1": 0.7299569845199585,
        "codebertscore_f3-1": 0.6649189591407776,
        "codebertscore_f1-10": 0.7482329607009888,
        "codebertscore_f3-10": 0.6924951672554016,
        "codebertscore_f1-17": 0.7155600786209106,
        "codebertscore_f3-17": 0.6536627411842346,
        "codebertscore_f1-12": 0.7579181790351868,
        "codebertscore_f3-12": 0.7177634239196777,
        "codebertscore_f1-6": 0.7708890438079834,
        "codebertscore_f3-6": 0.7176440358161926,
        "codebertscore_f1-18": 0.7627569437026978,
        "codebertscore_f3-18": 0.7083120346069336,
        "codebertscore_f1-15": 0.6767114400863647,
        "codebertscore_f3-15": 0.6440030932426453,
        "codebertscore_f1-13": 0.7500408291816711,
        "codebertscore_f3-13": 0.7004023790359497,
        "codebertscore_f1-9": 0.7030742764472961,
        "codebertscore_f3-9": 0.6682189702987671,
        "codebertscore_f1-4": 0.757171630859375,
        "codebertscore_f3-4": 0.7098284959793091,
        "codebertscore_f1-14": 0.7725741267204285,
        "codebertscore_f3-14": 0.7276685833930969,
        "codebertscore_f1-5": 0.7740517258644104,
        "codebertscore_f3-5": 0.7691863179206848,
        "codebertscore_f1-19": 0.7591651678085327,
        "codebertscore_f3-19": 0.725448489189148,
        "codebertscore_s_f1-3": 0.845469057559967,
        "codebertscore_s_f3-3": 0.828312337398529,
        "codebertscore_s_f1-0": 0.8484674096107483,
        "codebertscore_s_f3-0": 0.7795546650886536,
        "codebertscore_s_f1-8": 0.8548079133033752,
        "codebertscore_s_f3-8": 0.7956435084342957,
        "codebertscore_s_f1-7": 0.8483731150627136,
        "codebertscore_s_f3-7": 0.7974562644958496,
        "codebertscore_s_f1-16": 0.8343480825424194,
        "codebertscore_s_f3-16": 0.7973191142082214,
        "codebertscore_s_f1-2": 0.8549785614013672,
        "codebertscore_s_f3-2": 0.7964528799057007,
        "codebertscore_s_f1-11": 0.8655769228935242,
        "codebertscore_s_f3-11": 0.8587099313735962,
        "codebertscore_s_f1-1": 0.8462308049201965,
        "codebertscore_s_f3-1": 0.7785806655883789,
        "codebertscore_s_f1-10": 0.8482144474983215,
        "codebertscore_s_f3-10": 0.7896903157234192,
        "codebertscore_s_f1-17": 0.8424606323242188,
        "codebertscore_s_f3-17": 0.7734028697013855,
        "codebertscore_s_f1-12": 0.8511375784873962,
        "codebertscore_s_f3-12": 0.8027653098106384,
        "codebertscore_s_f1-6": 0.8587749600410461,
        "codebertscore_s_f3-6": 0.8018146753311157,
        "codebertscore_s_f1-18": 0.8558986186981201,
        "codebertscore_s_f3-18": 0.7975788116455078,
        "codebertscore_s_f1-15": 0.7950283885002136,
        "codebertscore_s_f3-15": 0.748564600944519,
        "codebertscore_s_f1-13": 0.850495457649231,
        "codebertscore_s_f3-13": 0.7951778173446655,
        "codebertscore_s_f1-9": 0.8092382550239563,
        "codebertscore_s_f3-9": 0.7576574683189392,
        "codebertscore_s_f1-4": 0.8541372418403625,
        "codebertscore_s_f3-4": 0.8009969592094421,
        "codebertscore_s_f1-14": 0.8595072031021118,
        "codebertscore_s_f3-14": 0.8087729215621948,
        "codebertscore_s_f1-5": 0.8381895422935486,
        "codebertscore_s_f3-5": 0.8299762606620789,
        "codebertscore_s_f1-19": 0.8504783511161804,
        "codebertscore_s_f3-19": 0.8071244955062866,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n",
        "snippet": [
            "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
        "task_id": "37",
        "3": "var new_list = [];\n  var i;\n  var len = l.length;\n  for(i = 0; i < len; i++){\n    if(i % 2 === 0){\n      new_list.push(l[i]);\n    }\n    else{\n      var temp = l.slice(i, i+2);\n      temp.sort();\n      new_list.push(temp[0]);\n      new_list.push(temp[1]);\n      i++;\n    }\n  }\n  return new_list;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var even = [];\n    var odd = [];\n    var n = []\n    var j = 0;\n    for(var i = 0; i < l.length; i++) {\n        if(i % 2 == 0) {\n            odd.push(l[i]);\n        }\n        else {\n            even.push(l[i]);\n        }\n    }\n    even.sort();\n    for(var i = 0; i < odd.length; i++) {\n        n.push(odd[i]);\n        n.push(even[j]);\n        j++;\n    }\n    return n;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var even_list = [];\n\tfor(var i = 0; i < l.length; i += 2){\n\t\teven_list.push(l[i]);\n\t}\n\teven_list.sort();\n\tfor(var i = 0; i < l.length; i += 2){\n\t\tl[i] = even_list[i/2];\n\t}\n\treturn l;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var i = 0;\n    var l2 = [];\n    var l3 = [];\n    var l4 = [];\n    while (i < l.length){\n        if (i % 2 == 0){\n            l2.push(l[i]);\n        }\n        else{\n            l3.push(l[i]);\n        }\n        i += 1;\n    }\n    l3.sort();\n    var j = 0;\n    while (j < l2.length){\n        l4.push(l2[j]);\n        l4.push(l3[j]);\n        j += 1;\n    }\n    return l4;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var list = []\n    for (var i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            list.push(l[i])\n        } else {\n            let a = l[i]\n            for (var j = i-1; j >= 0; j--) {\n                if (l[j] > a) {\n                    list[j+1] = list[j]\n                } else {\n                    list[j+1] = a\n                    break\n                }\n            }\n            if (list[0] > a) {\n                list[0] = a\n            }\n        }\n    }\n    return list\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// return l.filter(function(v, i) {\n    //     return i % 2 == 0;\n    // }).sort().concat(l.filter(function(v, i) {\n    //     return i % 2 == 1;\n    // }));\n    return l.filter(function(v, i) { return i % 2 == 0; }).sort().map(function(v, i) { return [v, l[i * 2 + 1]]; }).flatten();\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]);\n\t}\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tnew_list[i] = l[i];\n\t\t}\n\t\telse{\n\t\t\tnew_list[i] = sort_even_helper(l[i], i);\n\t\t}\n\t}\n\treturn new_list;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(l.length == 0)\n\t\treturn l;\n\tvar evens = [];\n\tvar odds = [];\n\tvar sorted;\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0)\n\t\t\todds.push(l[i]);\n\t\telse\n\t\t\tevens.push(l[i]);\n\t}\n\tsorted = evens.sort();\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0)\n\t\t\tsorted.splice(i, 0, odds[i / 2]);\n\t}\n\treturn sorted;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// base case\n    if (l.length <= 1) {\n        return l;\n    }\n    // recursive case\n    else {\n        var odd = [];\n        var even = [];\n        for (var i = 0; i < l.length; i++) {\n            if (i % 2 == 0) {\n                odd.push(l[i]);\n            }\n            else {\n                even.push(l[i]);\n            }\n        }\n        even = insertion_sort(even);\n        for (var i = 0; i < even.length; i++) {\n            odd.splice(2*i+1, 0, even[i]);\n        }\n        return odd;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var ans = []\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tans.push(l[i])\n\t\t}\n\t\telse{\n\t\t\tvar temp = l.slice(i)\n\t\t\ttemp.sort()\n\t\t\tans.push(temp[0])\n\t\t}\n\t}\n\treturn ans\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var eves = l.filter(function(e, i){return i % 2 === 0;})\n    var odds = l.filter(function(e, i){return i % 2 !== 0;})\n    eves.sort()\n    var lp = [];\n    for(var i = 0; i < eves.length; i++){\n        lp.push(eves[i]);\n        lp.push(odds[i]);\n    }\n    return lp;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return l.filter( function (e,i){ return i%2!=0 }).concat(\n             l.filter( function (e,i){ return i%2==0 }).sort( function (a,b){ return a-b; }));\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (l.length <= 2){\n        return l;\n    }\n    var newList = [];\n    var evenIndicies = [];\n    var oddIndicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            oddIndicies.push(l[i]);\n        }\n        else{\n            evenIndicies.push(l[i]);\n        }\n    }\n    evenIndicies.sort();\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            newList.push(oddIndicies[0]);\n            oddIndicies.shift();\n        }\n        else{\n            newList.push(evenIndicies[0]);\n            evenIndicies.shift();\n        }\n    }\n    return newList;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var evens = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            evens.push(l[i]);\n        }\n    }\n    evens.sort();\n    var ans = []\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            ans.push(evens.shift());\n        }\n        else{\n            ans.push(l[i]);\n        }\n    }\n    return ans;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var l2 = new Array();\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l2.push(l[i]);\n        }\n        else{\n            var temp = l.slice(i, i+2);\n            temp.sort();\n            l2.push(temp[0]);\n            l2.push(temp[1]);\n            i = i + 1;\n        }\n    }\n    return l2;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (l.length == 0){\n        return [];\n    }\n    else{\n        var l_odd = l.filter(function(val, index){\n            return index % 2 == 0;\n        });\n        var l_even = l.filter(function(val, index){\n            return index % 2 == 1;\n        });\n        l_even.sort(function(a, b){\n            return a - b;\n        });\n        var result = [];\n        for (var i = 0; i < l_odd.length; i++){\n            result.push(l_odd[i]);\n            result.push(l_even[i]);\n        }\n        return result;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "// You must not use any loops, and you must utilize recursion.\n    // If you cannot come up with a recursive solution, you will lose credit.\n    // You are free to create any auxiliary functions if needed.\n    var i=0;\n    var temp=0;\n    var counter=0;\n    var right=[];\n    if(length(l)==0)\n    {\n        return [];\n    }\n    else if(length(l)==1)\n    {\n        return l;\n    }\n    else\n    {\n        for(i=0;i<length(l);i++)\n        {\n            if(is_even(i)==true)\n            {\n                var dummy=l[i];\n                if(dummy<l[i+1])\n                {\n                    for(counter=i+1;counter<length(l);counter++)\n                    {\n                        if(dummy>l[counter])\n                        {\n                            temp=l[counter];\n                            l[counter]=dummy;\n                            l[i]=temp;\n                            dummy=l[i];\n                        }\n                    }\n                }\n            }\n        }\n        return l;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var res = [];\n  var index = 0;\n  for(var i = 0; i < l.length; i++){\n    res.push(l[i]);\n    index++;\n    if(index % 2 === 0){\n      res[i] = l[i];\n      res[i] = res[i].sort();\n    }\n  }\n  return res;\n}\nsort_even([1, 2, 3]);\nsort_even([5, 6, 3, 4]);",
        "grade-14": {
            "execution": 0
        },
        "5": "var res = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 2 === 0){\n      res.push(l[i]);\n    }\n    else{\n      res.push(l[i].sort());\n    }\n  }\n  return res;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "for(i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tl.splice(i, 0, l[i]);\n\t\t}\n\t}\n\tfor(i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tl.splice(i, 1);\n\t\t}\n\t}\n\tl.sort(function(a, b){return a-b});\n\treturn l;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.09458950659087342,
        "bleu-0": 0.09888474346364148,
        "bleu-8": 0.06502386939960775,
        "bleu-7": 0.082631937293258,
        "bleu-16": 0.05816369122169082,
        "bleu-2": 0.15922537190187225,
        "bleu-11": 0.09329567921501855,
        "bleu-1": 0.11342681489997677,
        "bleu-10": 0.08065338203478653,
        "bleu-17": 0.12670188919583897,
        "bleu-12": 0.11824413496657424,
        "bleu-6": 0.23138985890039618,
        "bleu-18": 0.08630886667143844,
        "bleu-15": 0.13009012126819902,
        "bleu-13": 0.1077939285382014,
        "bleu-9": 0.18272855857195303,
        "bleu-4": 0.026987650456612028,
        "bleu-14": 0.11745653340488962,
        "bleu-5": 0.14073701368524205,
        "bleu-19": 0.19292550295475588,
        "codebleu-3": 0.5118850257273587,
        "codebleu-0": 0.5277830847743046,
        "codebleu-8": 0.42948717948717946,
        "codebleu-7": 0.5120850799672299,
        "codebleu-16": 0.5015967825450456,
        "codebleu-2": 0.5572393163696102,
        "codebleu-11": 0.46004995463300236,
        "codebleu-1": 0.581657505587243,
        "codebleu-10": 0.544143984725096,
        "codebleu-17": 0.45060416101981926,
        "codebleu-12": 0.5738571533986124,
        "codebleu-6": 0.4865631458062043,
        "codebleu-18": 0.5514968219081277,
        "codebleu-15": 0.5436115114394366,
        "codebleu-13": 0.5226890015849768,
        "codebleu-9": 0.6065343818942458,
        "codebleu-4": 0.5071969970734028,
        "codebleu-14": 0.5180578702773332,
        "codebleu-5": 0.44611507282645313,
        "codebleu-19": 0.5842797565653338,
        "chrf-3": 0.21547548363487892,
        "chrf-0": 0.2477468814797566,
        "chrf-8": 0.20973197504236013,
        "chrf-7": 0.18134331779937657,
        "chrf-16": 0.15093611055031605,
        "chrf-2": 0.26170849562710674,
        "chrf-11": 0.18295781136163827,
        "chrf-1": 0.25068990229621335,
        "chrf-10": 0.2392362525069495,
        "chrf-17": 0.19492523871905612,
        "chrf-12": 0.2628504688471136,
        "chrf-6": 0.24953567492498693,
        "chrf-18": 0.2170654631638757,
        "chrf-15": 0.23808671599057388,
        "chrf-13": 0.2129206703789067,
        "chrf-9": 0.3928596594219443,
        "chrf-4": 0.15788291369336563,
        "chrf-14": 0.2703285662584098,
        "chrf-5": 0.16983824579721507,
        "chrf-19": 0.23291037511685936,
        "rougel-3": 0.3276836158192091,
        "rougel-0": 0.3,
        "rougel-8": 0.3333333333333333,
        "rougel-7": 0.28865979381443296,
        "rougel-16": 0.25870646766169153,
        "rougel-2": 0.4375,
        "rougel-11": 0.29585798816568043,
        "rougel-1": 0.3431372549019608,
        "rougel-10": 0.30476190476190473,
        "rougel-17": 0.3448275862068966,
        "rougel-12": 0.39772727272727276,
        "rougel-6": 0.4411764705882353,
        "rougel-18": 0.2938775510204082,
        "rougel-15": 0.3529411764705882,
        "rougel-13": 0.323699421965318,
        "rougel-9": 0.39423076923076916,
        "rougel-4": 0.20069204152249137,
        "rougel-14": 0.3111111111111111,
        "rougel-5": 0.32857142857142857,
        "rougel-19": 0.3657142857142857,
        "meteor-3": 0.31017314837418125,
        "meteor-0": 0.3605988290696195,
        "meteor-8": 0.3375370566311114,
        "meteor-7": 0.30986247312777926,
        "meteor-16": 0.2702702702702703,
        "meteor-2": 0.4699480975115741,
        "meteor-11": 0.2729105601972332,
        "meteor-1": 0.47125365983497486,
        "meteor-10": 0.3590917223282442,
        "meteor-17": 0.25598217585149424,
        "meteor-12": 0.37744535653226663,
        "meteor-6": 0.4267338555307757,
        "meteor-18": 0.32736584788198664,
        "meteor-15": 0.396204731388986,
        "meteor-13": 0.31855020601921236,
        "meteor-9": 0.44127193088888356,
        "meteor-4": 0.2770741454363805,
        "meteor-14": 0.33556404729244227,
        "meteor-5": 0.30449877136012227,
        "meteor-19": 0.4540426098535287,
        "ruby-3": 0.21904761904761905,
        "ruby-0": 0.203125,
        "ruby-8": 0.20512820512820518,
        "ruby-7": 0.19672131147540983,
        "ruby-16": 0.18604651162790697,
        "ruby-2": 0.33333333333333337,
        "ruby-11": 0.21649484536082475,
        "ruby-1": 0.23484848484848486,
        "ruby-10": 0.1811594202898551,
        "ruby-17": 0.136986301369863,
        "ruby-12": 0.27884615384615385,
        "ruby-6": 0.29166666666666663,
        "ruby-18": 0.18497109826589597,
        "ruby-15": 0.23478260869565215,
        "ruby-13": 0.2178217821782178,
        "ruby-9": 0.2647058823529411,
        "ruby-4": 0.12442396313364057,
        "ruby-14": 0.16666666666666663,
        "ruby-5": 0.125,
        "ruby-19": 0.2524271844660194,
        "codebertscore_f1-3": 0.7353106141090393,
        "codebertscore_f3-3": 0.7560193538665771,
        "codebertscore_f1-0": 0.7349138259887695,
        "codebertscore_f3-0": 0.759703516960144,
        "codebertscore_f1-8": 0.7947507500648499,
        "codebertscore_f3-8": 0.797855019569397,
        "codebertscore_f1-7": 0.7094357013702393,
        "codebertscore_f3-7": 0.734204888343811,
        "codebertscore_f1-16": 0.6811943650245667,
        "codebertscore_f3-16": 0.7112212181091309,
        "codebertscore_f1-2": 0.7929109334945679,
        "codebertscore_f3-2": 0.8103753924369812,
        "codebertscore_f1-11": 0.7569469809532166,
        "codebertscore_f3-11": 0.7716259360313416,
        "codebertscore_f1-1": 0.7603866457939148,
        "codebertscore_f3-1": 0.7844870090484619,
        "codebertscore_f1-10": 0.6860161423683167,
        "codebertscore_f3-10": 0.7225362062454224,
        "codebertscore_f1-17": 0.7607843279838562,
        "codebertscore_f3-17": 0.7687133550643921,
        "codebertscore_f1-12": 0.7775337100028992,
        "codebertscore_f3-12": 0.7982264161109924,
        "codebertscore_f1-6": 0.8204986453056335,
        "codebertscore_f3-6": 0.8226385116577148,
        "codebertscore_f1-18": 0.6830788850784302,
        "codebertscore_f3-18": 0.7316027879714966,
        "codebertscore_f1-15": 0.7593933343887329,
        "codebertscore_f3-15": 0.7828982472419739,
        "codebertscore_f1-13": 0.7303619980812073,
        "codebertscore_f3-13": 0.7511682510375977,
        "codebertscore_f1-9": 0.7795833349227905,
        "codebertscore_f3-9": 0.8318212032318115,
        "codebertscore_f1-4": 0.6051815748214722,
        "codebertscore_f3-4": 0.6222679018974304,
        "codebertscore_f1-14": 0.7637036442756653,
        "codebertscore_f3-14": 0.7850714921951294,
        "codebertscore_f1-5": 0.7666442394256592,
        "codebertscore_f3-5": 0.7687676548957825,
        "codebertscore_f1-19": 0.781661331653595,
        "codebertscore_f3-19": 0.794222891330719,
        "codebertscore_s_f1-3": 0.7431080341339111,
        "codebertscore_s_f3-3": 0.7624800205230713,
        "codebertscore_s_f1-0": 0.7520492076873779,
        "codebertscore_s_f3-0": 0.7724987864494324,
        "codebertscore_s_f1-8": 0.8022801280021667,
        "codebertscore_s_f3-8": 0.8029837012290955,
        "codebertscore_s_f1-7": 0.7208762168884277,
        "codebertscore_s_f3-7": 0.743671178817749,
        "codebertscore_s_f1-16": 0.7200078964233398,
        "codebertscore_s_f3-16": 0.7446088194847107,
        "codebertscore_s_f1-2": 0.7916117906570435,
        "codebertscore_s_f3-2": 0.8115922212600708,
        "codebertscore_s_f1-11": 0.760854959487915,
        "codebertscore_s_f3-11": 0.7735887169837952,
        "codebertscore_s_f1-1": 0.7703829407691956,
        "codebertscore_s_f3-1": 0.7941845655441284,
        "codebertscore_s_f1-10": 0.7125541567802429,
        "codebertscore_s_f3-10": 0.7452707886695862,
        "codebertscore_s_f1-17": 0.7751656174659729,
        "codebertscore_s_f3-17": 0.780504584312439,
        "codebertscore_s_f1-12": 0.7866726517677307,
        "codebertscore_s_f3-12": 0.8078075051307678,
        "codebertscore_s_f1-6": 0.8273690342903137,
        "codebertscore_s_f3-6": 0.830416202545166,
        "codebertscore_s_f1-18": 0.7158607244491577,
        "codebertscore_s_f3-18": 0.7535442113876343,
        "codebertscore_s_f1-15": 0.7667548656463623,
        "codebertscore_s_f3-15": 0.7880105376243591,
        "codebertscore_s_f1-13": 0.7380374670028687,
        "codebertscore_s_f3-13": 0.7570812106132507,
        "codebertscore_s_f1-9": 0.7961070537567139,
        "codebertscore_s_f3-9": 0.8451352715492249,
        "codebertscore_s_f1-4": 0.6412697434425354,
        "codebertscore_s_f3-4": 0.6536911725997925,
        "codebertscore_s_f1-14": 0.7740774154663086,
        "codebertscore_s_f3-14": 0.7917343974113464,
        "codebertscore_s_f1-5": 0.7753956317901611,
        "codebertscore_s_f3-5": 0.7755600214004517,
        "codebertscore_s_f1-19": 0.784442663192749,
        "codebertscore_s_f3-19": 0.7973976135253906,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 2,
        "raw_gpt35_nsnr-2": "2",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 1,
        "raw_gpt35_nswr-4": "1",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279e True\n// any_int(3, 2, 2) \u279e False\n// any_int(3, -2, 1) \u279e True\n// any_int(3.6, -2.2, 2) \u279e False\nfunction any_int(x, y, z){\n",
        "snippet": [
            "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n"
        ],
        "simplified": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "task_id": "92",
        "0": "let num = []\n    for(let i = 0; i < arguments.length; i++){\n        num.push(arguments[i])\n    }\n    let count = 0\n    for(let i = 0; i < num.length; i++){\n        if(num[i] % 1 === 0){\n            count++\n        }\n    }\n    if(count === 3){\n        let arr = [...num]\n        arr.sort((a, b) => a - b)\n        if(arr[0] + arr[1] === arr[2]){\n            return true\n        }\n        return false\n    }\n    return false\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return (x + y === z) || (x + z === y) || (y + z === x) && (x === Math.floor(x)) && (y === Math.floor(y)) && (z === Math.floor(z))\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "return (x === (y + z) || y === (x + z) || z === (x + y)) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ? true : false;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "if(x === y + z || y === x + z || z === x + y){\n        return true;\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "if (x+y === z || x+z === y || y+z === x){\n    return true;\n  }\n  else {\n    return false;\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var a = x + y;\n    var b = x + z;\n    var c = y + z;\n    if ( x == a || y == b || z == c){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "if((x + y == z) || (x + z == y) || (y + z == x)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "let sum = x + y + z;\n    if(x == sum / 2 || y == sum / 2 || z == sum / 2){\n        return true;\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "if(x === y + z || y === x + z || z === x + y){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0){\n        return true;\n    } else if (x % 1 === 0 && y % 1 === 0 && z % 1 !== 0){\n        return true;\n    } else if (x % 1 === 0 && y % 1 !== 0 && z % 1 === 0){\n        return true;\n    } else if (x % 1 !== 0 && y % 1 === 0 && z % 1 === 0){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "if(x%1==0 && y%1==0 && z%1==0){\n        if(x==y+z){\n            return true;\n        }\n        else if(y==x+z){\n            return true;\n        }\n        else if(z==x+y){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "if((x===y+z || y===x+z || z===x+y) && x%1===0 && y%1===0 && z%1===0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z) ? x + y === z || x + z === y || y + z === x : false;\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "return (x+y == z || x+z == y || y+z == x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ? true : false;\n}",
        "grade-13": {
            "execution": 0
        },
        "15": "return (x + y == z || x + z == y || y + z == x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z))\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z){\n        return true;\n    }else if(y === x + z){\n        return true;\n    }else if(z === x + y){\n        return true;\n    }else{\n        return false;\n    }\n}else{\n    return false;\n}\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x===y+z || y===x+z || z===x+y){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "if(x % 1 == 0 && y % 1 == 0 && z % 1 == 0 && (x + y == z || x + z == y || y + z == x)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.11902126304113839,
        "bleu-1": 0.3323120505389129,
        "bleu-2": 0.23948674346596327,
        "bleu-3": 0.24273615162428633,
        "bleu-4": 0.3477136050863167,
        "bleu-5": 0.17315005313022866,
        "bleu-6": 0.2441716197371655,
        "bleu-7": 0.12412544641847964,
        "bleu-8": 0.24828196226686614,
        "bleu-9": 0.2649724540876566,
        "bleu-10": 0.43016319707239536,
        "bleu-11": 0.6378128131882822,
        "bleu-12": 0.3603669380129334,
        "bleu-13": 0.34601381055053876,
        "bleu-15": 0.33890807789220306,
        "bleu-16": 0.32145204899990887,
        "bleu-17": 0.22783486632991043,
        "bleu-18": 0.32145204899990887,
        "bleu-19": 0.7503366580750276,
        "codebleu-0": 0.4658407758090005,
        "codebleu-1": 0.6160578563763685,
        "codebleu-2": 0.5111620205971538,
        "codebleu-3": 0.4160658216093178,
        "codebleu-4": 0.43303689764785913,
        "codebleu-5": 0.4217992009254556,
        "codebleu-6": 0.38407746906357965,
        "codebleu-7": 0.37956365686030674,
        "codebleu-8": 0.4090575497705432,
        "codebleu-9": 0.699181568858664,
        "codebleu-10": 0.649081780408752,
        "codebleu-11": 0.8507465799758247,
        "codebleu-12": 0.48995436959165856,
        "codebleu-13": 0.47921896920657997,
        "codebleu-15": 0.4661580988812709,
        "codebleu-16": 0.5467527294142147,
        "codebleu-17": 0.5075631209965055,
        "codebleu-18": 0.5467527294142147,
        "codebleu-19": 0.7724437672862345,
        "chrf-0": 0.2821692085226802,
        "chrf-1": 0.3036905001050874,
        "chrf-2": 0.2575327120905406,
        "chrf-3": 0.4257599854820547,
        "chrf-4": 0.5044712768042949,
        "chrf-5": 0.3491879625178606,
        "chrf-6": 0.39607456254786977,
        "chrf-7": 0.341867655727307,
        "chrf-8": 0.40788412599994395,
        "chrf-9": 0.49228994325205205,
        "chrf-10": 0.507141607452333,
        "chrf-11": 0.6619471558371379,
        "chrf-12": 0.33689232750786213,
        "chrf-13": 0.3129413507219169,
        "chrf-15": 0.28389689571529925,
        "chrf-16": 0.39276310601837194,
        "chrf-17": 0.32963122930534733,
        "chrf-18": 0.39276310601837194,
        "chrf-19": 0.716514121118276,
        "rougel-0": 0.29,
        "rougel-1": 0.4460431654676259,
        "rougel-2": 0.4360902255639098,
        "rougel-3": 0.594059405940594,
        "rougel-4": 0.5961538461538463,
        "rougel-5": 0.43103448275862066,
        "rougel-6": 0.5794392523364486,
        "rougel-7": 0.42990654205607476,
        "rougel-8": 0.5769230769230769,
        "rougel-9": 0.5048543689320388,
        "rougel-10": 0.6081081081081082,
        "rougel-11": 0.5413533834586465,
        "rougel-12": 0.5166666666666667,
        "rougel-13": 0.41935483870967744,
        "rougel-15": 0.40336134453781514,
        "rougel-16": 0.5190839694656488,
        "rougel-17": 0.42857142857142855,
        "rougel-18": 0.5190839694656488,
        "rougel-19": 0.8661417322834646,
        "meteor-0": 0.39455622491607917,
        "meteor-1": 0.666318629398529,
        "meteor-2": 0.5439847773734817,
        "meteor-3": 0.5321303725405334,
        "meteor-4": 0.559362576199311,
        "meteor-5": 0.4430911217990381,
        "meteor-6": 0.4845618281523385,
        "meteor-7": 0.40261900691345603,
        "meteor-8": 0.5068181818181818,
        "meteor-9": 0.6461491043740908,
        "meteor-10": 0.6459650125515508,
        "meteor-11": 0.8618107285610465,
        "meteor-12": 0.5957835035244967,
        "meteor-13": 0.473651892374679,
        "meteor-15": 0.4593101260767342,
        "meteor-16": 0.6215337133529556,
        "meteor-17": 0.48616272522522536,
        "meteor-18": 0.6215337133529556,
        "meteor-19": 0.8829007869385689,
        "ruby-0": 0.19852941176470584,
        "ruby-1": 0.29333333333333333,
        "ruby-2": 0.24637681159420288,
        "ruby-3": 0.421875,
        "ruby-4": 0.375,
        "ruby-5": 0.296875,
        "ruby-6": 0.328125,
        "ruby-7": 0.296875,
        "ruby-8": 0.375,
        "ruby-9": 0.3661971830985915,
        "ruby-10": 0.44047619047619047,
        "ruby-11": 0.37681159420289856,
        "ruby-12": 0.40625,
        "ruby-13": 0.265625,
        "ruby-15": 0.25,
        "ruby-16": 0.3880597014925373,
        "ruby-17": 0.2777777777777778,
        "ruby-18": 0.3880597014925373,
        "ruby-19": 0.75,
        "codebertscore_f1-0": 0.6898251175880432,
        "codebertscore_f3-0": 0.7115614414215088,
        "codebertscore_f1-1": 0.8360217213630676,
        "codebertscore_f3-1": 0.8251487016677856,
        "codebertscore_f1-2": 0.832225501537323,
        "codebertscore_f3-2": 0.8382830023765564,
        "codebertscore_f1-3": 0.8936028480529785,
        "codebertscore_f3-3": 0.8669711351394653,
        "codebertscore_f1-4": 0.8770784139633179,
        "codebertscore_f3-4": 0.8546985983848572,
        "codebertscore_f1-5": 0.8412209749221802,
        "codebertscore_f3-5": 0.8392201662063599,
        "codebertscore_f1-6": 0.8842878937721252,
        "codebertscore_f3-6": 0.8605760335922241,
        "codebertscore_f1-7": 0.8324607610702515,
        "codebertscore_f3-7": 0.8420195579528809,
        "codebertscore_f1-8": 0.8827201128005981,
        "codebertscore_f3-8": 0.8630949258804321,
        "codebertscore_f1-9": 0.8621253371238708,
        "codebertscore_f3-9": 0.86384516954422,
        "codebertscore_f1-10": 0.8492262959480286,
        "codebertscore_f3-10": 0.8655163645744324,
        "codebertscore_f1-11": 0.8902245759963989,
        "codebertscore_f3-11": 0.8939395546913147,
        "codebertscore_f1-12": 0.8566845059394836,
        "codebertscore_f3-12": 0.8591067790985107,
        "codebertscore_f1-13": 0.831997811794281,
        "codebertscore_f3-13": 0.8363484740257263,
        "codebertscore_f1-15": 0.8336998820304871,
        "codebertscore_f3-15": 0.8342115879058838,
        "codebertscore_f1-16": 0.8666707873344421,
        "codebertscore_f3-16": 0.8732442259788513,
        "codebertscore_f1-17": 0.8220281600952148,
        "codebertscore_f3-17": 0.8344663977622986,
        "codebertscore_f1-18": 0.8534108996391296,
        "codebertscore_f3-18": 0.8596340417861938,
        "codebertscore_f1-19": 0.9650093913078308,
        "codebertscore_f3-19": 0.969174325466156,
        "codebertscore_s_f1-0": 0.8537494540214539,
        "codebertscore_s_f3-0": 0.8902879357337952,
        "codebertscore_s_f1-1": 0.9337320923805237,
        "codebertscore_s_f3-1": 0.931002676486969,
        "codebertscore_s_f1-2": 0.9299960732460022,
        "codebertscore_s_f3-2": 0.932972252368927,
        "codebertscore_s_f1-3": 0.9586689472198486,
        "codebertscore_s_f3-3": 0.944452702999115,
        "codebertscore_s_f1-4": 0.956295371055603,
        "codebertscore_s_f3-4": 0.9435052275657654,
        "codebertscore_s_f1-5": 0.9354756474494934,
        "codebertscore_s_f3-5": 0.9342828989028931,
        "codebertscore_s_f1-6": 0.9558350443840027,
        "codebertscore_s_f3-6": 0.9427796602249146,
        "codebertscore_s_f1-7": 0.9366377592086792,
        "codebertscore_s_f3-7": 0.937082827091217,
        "codebertscore_s_f1-8": 0.9553386569023132,
        "codebertscore_s_f3-8": 0.9433394074440002,
        "codebertscore_s_f1-9": 0.9310581684112549,
        "codebertscore_s_f3-9": 0.9423319697380066,
        "codebertscore_s_f1-10": 0.9359237551689148,
        "codebertscore_s_f3-10": 0.9465922117233276,
        "codebertscore_s_f1-11": 0.9533423185348511,
        "codebertscore_s_f3-11": 0.955041229724884,
        "codebertscore_s_f1-12": 0.9437650442123413,
        "codebertscore_s_f3-12": 0.9446093440055847,
        "codebertscore_s_f1-13": 0.9314496517181396,
        "codebertscore_s_f3-13": 0.9342197179794312,
        "codebertscore_s_f1-15": 0.9325616359710693,
        "codebertscore_s_f3-15": 0.9336858987808228,
        "codebertscore_s_f1-16": 0.9415879249572754,
        "codebertscore_s_f3-16": 0.9458494186401367,
        "codebertscore_s_f1-17": 0.9191824793815613,
        "codebertscore_s_f3-17": 0.9306280016899109,
        "codebertscore_s_f1-18": 0.936187744140625,
        "codebertscore_s_f3-18": 0.940065324306488,
        "codebertscore_s_f1-19": 0.9876285791397095,
        "codebertscore_s_f3-19": 0.9895427227020264,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n",
        "snippet": [
            "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
        "task_id": "116",
        "3": "return arr.sort(function(a, b){\n      var binA = (a >>> 0).toString(2);\n      var binB = (b >>> 0).toString(2);\n      var numOfOnesA = binA.match(/1/g) || [];\n      var numOfOnesB = binB.match(/1/g) || [];\n      if(numOfOnesA.length < numOfOnesB.length){\n        return -1;\n      }else if(numOfOnesA.length > numOfOnesB.length){\n        return 1;\n      }else{\n        return a - b;\n      }\n  });\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//binary_arr holds binary array, binary_sort_arr holds sorted binary array\n  //decimal_arr holds the decimal values in sorted binary order\n  var binary_arr = [], binary_sort_arr = [], decimal_arr = [], sorted_arr = [];\n  //go through every element in array\n  for(var i = 0; i < arr.length; i++){\n    //convert the number to binary and store into binary_arr\n    binary_arr.push(arr[i].toString(2));\n    //check for one's count in binary_arr[i] and push the count into binary_sort_arr\n    binary_sort_arr.push(binary_arr[i].match(/1/g).length);\n  }\n  //sort the binary_sort_arr\n  binary_sort_arr.sort(function(a, b){return a - b});\n  //fill decimal_arr with the sorted binary numbers\n  for(var i = 0; i < binary_sort_arr.length; i++){\n    for(var j = 0; j < binary_arr.length; j++){\n      if(binary_sort_arr[i] == binary_arr[j].match(/1/g).length && !decimal_arr.includes(binary_arr[j])){\n        decimal_arr.push(binary_arr[j]);\n      }\n    }\n  }\n  //convert the binary to decimal and store into sorted_arr\n  for(var i = 0; i < decimal_arr.length; i++){\n    sorted_arr.push(parseInt(decimal_arr[i], 2));\n  }\n  return sorted_arr;\n}\nsort_array([1, 2, 3, 4, 5]);\nsort_array([1, 0, 2, 3, 4]);\nsort_array([-2, -3, -4, -5, -6]);\nsort_array([1, 5, 2, 3, 4]);",
        "grade-0": {
            "execution": 0
        },
        "8": "let number = arr.map(num => {\n    return [num, num.toString(2).split('').reduce((acc, val) => {\n      return val === '1' ? acc + 1 : acc\n    }, 0)]\n  }).sort((a, b) => {\n    if (a[1] === b[1]) {\n      return a[0] - b[0]\n    } else {\n      return a[1] - b[1]\n    }\n  })\n  return number.map(num => num[0])\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var maxOnes = 0;\n    var minOnes = 0;\n    var temp = [];\n    var tempArr = [];\n    var tempObj = {};\n    var count;\n    var maxInt;\n    var newArr = [];\n    var result = [];\n    if(arr.length > 1){\n        maxInt = Math.max.apply(null, arr);\n        count = (maxInt >>> 0).toString(2).split('').length;\n        for(var i = 0; i < arr.length; i++){\n            temp = (arr[i] >>> 0).toString(2).split('');\n            while(temp.length < count){\n                temp.unshift('0');\n            }\n            tempObj = {};\n            tempObj.num = arr[i];\n            tempObj.ones = temp.join('').split('1').length - 1;\n            if(tempObj.ones > maxOnes){\n                maxOnes = tempObj.ones;\n            }\n            if(tempObj.ones < minOnes){\n                minOnes = tempObj.ones;\n            }\n            tempArr.push(tempObj);\n        }\n        for(var j = minOnes; j <= maxOnes; j++){\n            tempArr.forEach(function(item){\n                if(item.ones === j){\n                    newArr.push(item.num);\n                }\n            });\n        }\n        result = newArr;\n    } else {\n        result = arr;\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return arr.sort(function(a, b){\n    if (a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) === null){\n      return a - b;\n    } else if (a.toString(2).match(/1/g) === null){\n      return -1;\n    } else if (b.toString(2).match(/1/g) === null){\n      return 1;\n    } else if (a.toString(2).match(/1/g).length === b.toString(2).match(/1/g).length){\n      return a - b;\n    } else {\n      return a.toString(2).match(/1/g).length - b.toString(2).match(/1/g).length;\n    }\n  });\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let numOfOne = []\n    let num = []\n    for(let i = 0; i < arr.length; i++){\n        let binary = arr[i].toString(2)\n        let count = 0\n        for(let j = 0; j < binary.length; j++){\n            if(binary[j] === '1'){\n                count++\n            }\n        }\n        numOfOne.push(count)\n        num.push(arr[i])\n    }\n    for(let i = 0; i < numOfOne.length; i++){\n        for(let j = i + 1; j < numOfOne.length; j++){\n            if(numOfOne[i] > numOfOne[j]){\n                let temp = numOfOne[i]\n                numOfOne[i] = numOfOne[j]\n                numOfOne[j] = temp\n                let tempNum = num[i]\n                num[i] = num[j]\n                num[j] = tempNum\n            }\n        }\n    }\n    return num\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "//storing number of 1s in binary representation of each number in array\n    var onesArray = [];\n    //storing the decimal values\n    var decArray = [];\n    //storing the values in right order\n    var result = [];\n    //storing the binary representation of each number\n    var binary = [];\n    //storing the binary representation of each number\n    var binRep = [];\n    //storing the unique value for the numbers\n    var unique = [];\n    //storing the number of time each number occurs in the array\n    var occurrences = [];\n    //storing the index from which each number occurs in the array\n    var index = [];\n    for(var i = 0; i < arr.length; i++){\n        //storing the binary representation of each number\n        binary.push(arr[i].toString(2));\n        //finding the number of 1s in the binary representation of each number\n        onesArray.push(binary[i].replace(/0/g, '').length);\n        //storing the decimal value\n        decArray.push(arr[i]);\n    }\n    //Finding the unique values\n    for(var j = 0; j < arr.length; j++){\n        if(unique.indexOf(onesArray[j]) === -1){\n            unique.push(onesArray[j]);\n        }\n    }\n    //sorting the unique values\n    unique.sort();\n    //finding the number of time each number occurs in the array\n    for(var k = 0; k < unique.length; k++){\n        occurrences.push(onesArray.filter(function(elem){\n            return elem === unique[k];\n        }).length);\n    }\n    //finding the index from which each number occurs in the array\n    for(var l = 0; l < unique.length; l++){\n        for(var m = 0; m < arr.length; m++){\n            if(onesArray[m] === unique[l]){\n                index.push(m);\n                break;\n            }\n        }\n    }\n    //sorting the numbers according to the given conditions\n    for(var n = 0; n < occurrences.length; n++){",
        "grade-11": {
            "execution": 0
        },
        "1": "let answer = [];\n  let ones = [];\n  let zeros = [];\n  let len = arr.length;\n  for(let i = 0; i < len; i++){\n    if(arr[i] <= 0){\n      zeros.push(arr[i]);\n    }else{\n      ones.push(arr[i]);\n    }\n  }\n  //sorting the ones array\n  let onesLen = ones.length;\n  for(let i = 0; i < onesLen; i++){\n    let item = ones[i];\n    let bin = item.toString(2);\n    let oneCnt = bin.split('').reduce((a, b) => +a + +b);\n    ones[i] = {'bin': bin, 'num': item, 'oneCnt': oneCnt};\n  }\n  ones.sort((a, b) => {\n    if(a.oneCnt === b.oneCnt){\n      return a.num - b.num;\n    }else{\n      return a.oneCnt - b.oneCnt;\n    }\n  });\n  let len2 = ones.length;\n  for(let i = 0; i < len2; i++){\n    answer.push(ones[i].num);\n  }\n  answer = answer.concat(zeros);\n  return answer;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let map = {};\n    arr.forEach(v => {\n        let t = 0;\n        v.toString(2).split('').forEach(c => {\n            if (c === '1') t++;\n        });\n        if (!map[t]) map[t] = [];\n        map[t].push(v);\n    });\n    let keys = Object.keys(map);\n    return keys.sort((a, b) => a - b).reduce((a, b) => a.concat(map[b].sort((x, y) => x - y)), []);\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return arr.sort((a, b) => {\n        let aOne = countOne(a);\n        let bOne = countOne(b);\n        if (aOne !== bOne) {\n            return aOne - bOne;\n        } else {\n            return a - b;\n        }\n    });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "//code here\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(getOneCount(arr[i]) > getOneCount(arr[j])){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n            else if(getOneCount(arr[i]) == getOneCount(arr[j])){\n                if(arr[i] > arr[j]){\n                    var temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let binArr = arr.map(num => [num, num.toString(2)]);\n  let onesArr = binArr.map(num => num[1].split(\"\").filter(el => el === \"1\").length);\n  let sortedOnesArr = onesArr.slice().sort((a, b) => a - b);\n  let onesIndex = [];\n  for (let i = 0; i < sortedOnesArr.length; i++) {\n    onesIndex.push(onesArr.indexOf(sortedOnesArr[i]));\n  }\n  let sortedArr = [];\n  for (let i = 0; i < onesIndex.length; i++) {\n    sortedArr.push(binArr[onesIndex[i]][0]);\n  }\n  return sortedArr;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let sorted = [...arr].sort((a, b) => a - b);\n  let arr2 = [...arr].sort((a, b) => (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g) || []).length);\n  return arr2.map(i => sorted.includes(i) ? i : i);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var tempArr = [];\n  var finalArr = [];\n  arr.forEach(function(num){\n    var bin = parseInt(num).toString(2);\n    var onesCount = bin.split(1).length - 1;\n    tempArr.push([num, onesCount]);\n  });\n  tempArr.sort(function(a, b){\n    if(a[1] === b[1]){\n      return a[0] - b[0];\n    }\n    return a[1] - b[1];\n  });\n  tempArr.forEach(function(el){\n    finalArr.push(el[0]);\n  });\n  return finalArr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var sorted_array = arr.sort(function(a, b){\n        if (countOnes(a) === countOnes(b)) {\n            return a - b;\n        }\n        return countOnes(a) - countOnes(b);\n    });\n    return sorted_array;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return arr.sort(function(a, b){\n    if(getOnes(a) === getOnes(b)) {\n      return a - b;\n    }\n    return getOnes(a) - getOnes(b);\n  });\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let binarr = arr.map(x => x.toString(2));\n  console.log(binarr);\n  let countarr = [];\n  for (let i = 0; i < binarr.length; i++) {\n    countarr.push(binarr[i].split('').filter(x => x === '1').length);\n  }\n  let newarr = [];\n  let count = 0;\n  while (count < arr.length) {\n    let temp = [];\n    let tempcount = countarr[count];\n    let j = count;\n    while (j < arr.length) {\n      if (countarr[j] === tempcount) {\n        temp.push(arr[j]);\n        countarr[j] = -1;\n      }\n      j++;\n    }\n    count += temp.length;\n    temp.sort((a, b) => a - b);\n    newarr = newarr.concat(temp);\n  }\n  return newarr;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// sort array to descending order first.\n    arr.sort(function(a, b){\n        return b - a;\n    });\n    // create a new array to store the index value of arr(binary arr)\n    var binaryArray = [];\n    // create a new array to store values of arr\n    var valueArray = [];\n    // convert each element of arr to binary and store into binaryArray\n    for(var i = 0; i < arr.length; i++){\n        binaryArray.push(arr[i].toString(2));\n    }\n    //push values of arr into valueArray\n    for(var i = 0; i < arr.length; i++){\n        valueArray.push(arr[i]);\n    }\n    // use bubble sort to sort binaryArray in ascending order\n    for(var i = 0; i < binaryArray.length; i++){\n        for(var j = 0; j < binaryArray.length; j++){\n            if(binaryArray[j].match(/1/g).length > binaryArray[j+1].match(/1/g).length){\n                var tmp = binaryArray[j];\n                binaryArray[j] = binaryArray[j+1];\n                binaryArray[j+1] = tmp;\n                var tmp = valueArray[j];\n                valueArray[j] = valueArray[j+1];\n                valueArray[j+1] = tmp;\n            }else if(binaryArray[j].match(/1/g).length === binaryArray[j+1].match(/1/g).length){\n                if(valueArray[j] > valueArray[j+1]){\n                    var tmp = binaryArray[j];\n                    binaryArray[j] = binaryArray[j+1];\n                    binaryArray[j+1] = tmp;\n                    var tmp = valueArray[j];\n                    valueArray[j] = valueArray[j+1];\n                    valueArray[j+1] = tmp;\n                }\n            }\n        }\n    }\n    return valueArray;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return arr.sort(function(a, b){\n    if (numberOfOnes(a) < numberOfOnes(b)){\n      return -1;\n    } else if (numberOfOnes(a) > numberOfOnes(b)){\n      return 1;\n    } else {\n      return a - b;\n    }\n  });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var newArr = arr.map(function(val) {\n        return {\n            val: val,\n            binary: val.toString(2).split('').filter(function(digit) {\n                return digit === '1';\n            }).length\n        };\n    });\n    return newArr.sort(function(a, b) {\n        if (a.binary === b.binary) {\n            return a.val - b.val;\n        }\n        return a.binary - b.binary;\n    }).map(function(val) {\n        return val.val;\n    });\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.07114937035799024,
        "bleu-0": 0.12476262723916653,
        "bleu-8": 0.0642991343256472,
        "bleu-7": 0.12134653721872622,
        "bleu-16": 0.0978825283728204,
        "bleu-2": 0.3035038516832707,
        "bleu-11": 0.1188663017087733,
        "bleu-1": 0.12189513003699647,
        "bleu-10": 0.08174641964044409,
        "bleu-17": 0.0031462554134894538,
        "bleu-12": 0.14187785743922118,
        "bleu-6": 0.12718508616195723,
        "bleu-18": 0.05278135545405137,
        "bleu-15": 0.06286674507717394,
        "bleu-13": 0.005853347414213136,
        "bleu-9": 0.004260078584929523,
        "bleu-4": 0.15885340004486387,
        "bleu-14": 0.1165592933780828,
        "bleu-5": 0.00951504262687857,
        "bleu-19": 0.06477149929963566,
        "codebleu-3": 0.29949068076553387,
        "codebleu-0": 0.5858519986516825,
        "codebleu-8": 0.30796766810288057,
        "codebleu-7": 0.575949458460595,
        "codebleu-16": 0.38651447302749947,
        "codebleu-2": 0.6438186270211786,
        "codebleu-11": 0.6402892492573043,
        "codebleu-1": 0.6095979375768392,
        "codebleu-10": 0.3709773948846753,
        "codebleu-17": 0.12333899376200069,
        "codebleu-12": 0.42222241019726836,
        "codebleu-6": 0.4472705494360884,
        "codebleu-18": 0.24088277574083214,
        "codebleu-15": 0.3571492669444963,
        "codebleu-13": 0.12109517919939075,
        "codebleu-9": 0.10687608475670797,
        "codebleu-4": 0.5193138593739607,
        "codebleu-14": 0.6393830441081676,
        "codebleu-5": 0.139496016475686,
        "codebleu-19": 0.2914042118116349,
        "chrf-3": 0.20576534805855992,
        "chrf-0": 0.21552737600763947,
        "chrf-8": 0.14273856047428113,
        "chrf-7": 0.2499043138762495,
        "chrf-16": 0.22404224542506568,
        "chrf-2": 0.3713635234277161,
        "chrf-11": 0.2192443890319093,
        "chrf-1": 0.26353324757324237,
        "chrf-10": 0.15894370815390382,
        "chrf-17": 0.07612064232935192,
        "chrf-12": 0.2103093711015111,
        "chrf-6": 0.22959520921946383,
        "chrf-18": 0.1697207406420867,
        "chrf-15": 0.173745068650759,
        "chrf-13": 0.08441569740720987,
        "chrf-9": 0.0788602347591263,
        "chrf-4": 0.269075769151798,
        "chrf-14": 0.2383366862495266,
        "chrf-5": 0.08920442490026147,
        "chrf-19": 0.16761861449272375,
        "rougel-3": 0.25895316804407714,
        "rougel-0": 0.2798634812286689,
        "rougel-8": 0.31486880466472306,
        "rougel-7": 0.2878228782287823,
        "rougel-16": 0.24299065420560748,
        "rougel-2": 0.48858447488584467,
        "rougel-11": 0.2631578947368421,
        "rougel-1": 0.31809145129224653,
        "rougel-10": 0.30894308943089427,
        "rougel-17": 0.19217081850533807,
        "rougel-12": 0.395778364116095,
        "rougel-6": 0.3399014778325123,
        "rougel-18": 0.2606060606060606,
        "rougel-15": 0.28648648648648645,
        "rougel-13": 0.17518248175182483,
        "rougel-9": 0.16356877323420074,
        "rougel-4": 0.3657957244655582,
        "rougel-14": 0.3202416918429003,
        "rougel-5": 0.18245614035087715,
        "rougel-19": 0.25806451612903225,
        "meteor-3": 0.2274866705805506,
        "meteor-0": 0.3097261490551849,
        "meteor-8": 0.21807298502717898,
        "meteor-7": 0.34401780322029557,
        "meteor-16": 0.24205422451447556,
        "meteor-2": 0.4308985599759683,
        "meteor-11": 0.39248979515345805,
        "meteor-1": 0.34719600829940384,
        "meteor-10": 0.2489325886810232,
        "meteor-17": 0.11227068095041669,
        "meteor-12": 0.3166212667795528,
        "meteor-6": 0.30287543588864124,
        "meteor-18": 0.18596567736843403,
        "meteor-15": 0.21359365944736092,
        "meteor-13": 0.08457711442786069,
        "meteor-9": 0.08977556109725686,
        "meteor-4": 0.3077978999718748,
        "meteor-14": 0.39178120094133134,
        "meteor-5": 0.11708422510386501,
        "meteor-19": 0.18848781695329073,
        "ruby-3": 0.15207373271889402,
        "ruby-0": 0.18157181571815717,
        "ruby-8": 0.1981566820276498,
        "ruby-7": 0.1938461538461539,
        "ruby-16": 0.10138248847926268,
        "ruby-2": 0.37104072398190047,
        "ruby-11": 0.16916488222698067,
        "ruby-1": 0.1923076923076923,
        "ruby-10": 0.18894009216589858,
        "ruby-17": 0.11059907834101379,
        "ruby-12": 0.2857142857142857,
        "ruby-6": 0.18433179723502302,
        "ruby-18": 0.16129032258064513,
        "ruby-15": 0.18433179723502302,
        "ruby-13": 0.10138248847926268,
        "ruby-9": 0.10138248847926268,
        "ruby-4": 0.21658986175115202,
        "ruby-14": 0.21123595505617976,
        "ruby-5": 0.11981566820276501,
        "ruby-19": 0.1751152073732719,
        "codebertscore_f1-3": 0.7085293531417847,
        "codebertscore_f3-3": 0.7063348889350891,
        "codebertscore_f1-0": 0.7161886692047119,
        "codebertscore_f3-0": 0.7481604814529419,
        "codebertscore_f1-8": 0.7067521214485168,
        "codebertscore_f3-8": 0.6946287155151367,
        "codebertscore_f1-7": 0.7188202142715454,
        "codebertscore_f3-7": 0.7378321886062622,
        "codebertscore_f1-16": 0.7131831049919128,
        "codebertscore_f3-16": 0.7036437392234802,
        "codebertscore_f1-2": 0.7999605536460876,
        "codebertscore_f3-2": 0.8067272901535034,
        "codebertscore_f1-11": 0.6925305128097534,
        "codebertscore_f3-11": 0.7306071519851685,
        "codebertscore_f1-1": 0.7441921830177307,
        "codebertscore_f3-1": 0.7622572183609009,
        "codebertscore_f1-10": 0.7266217470169067,
        "codebertscore_f3-10": 0.72677081823349,
        "codebertscore_f1-17": 0.6654398441314697,
        "codebertscore_f3-17": 0.6431846022605896,
        "codebertscore_f1-12": 0.7806940674781799,
        "codebertscore_f3-12": 0.7679069638252258,
        "codebertscore_f1-6": 0.7376325130462646,
        "codebertscore_f3-6": 0.745674729347229,
        "codebertscore_f1-18": 0.685843288898468,
        "codebertscore_f3-18": 0.6675127148628235,
        "codebertscore_f1-15": 0.700648844242096,
        "codebertscore_f3-15": 0.6950507164001465,
        "codebertscore_f1-13": 0.6357109546661377,
        "codebertscore_f3-13": 0.6133207082748413,
        "codebertscore_f1-9": 0.6140885949134827,
        "codebertscore_f3-9": 0.5920735001564026,
        "codebertscore_f1-4": 0.7661293745040894,
        "codebertscore_f3-4": 0.7767522931098938,
        "codebertscore_f1-14": 0.7359097599983215,
        "codebertscore_f3-14": 0.7578622102737427,
        "codebertscore_f1-5": 0.6338973641395569,
        "codebertscore_f3-5": 0.6163186430931091,
        "codebertscore_f1-19": 0.6983295679092407,
        "codebertscore_f3-19": 0.6937010288238525,
        "codebertscore_s_f1-3": 0.7154080271720886,
        "codebertscore_s_f3-3": 0.7178981900215149,
        "codebertscore_s_f1-0": 0.7252416610717773,
        "codebertscore_s_f3-0": 0.7596830725669861,
        "codebertscore_s_f1-8": 0.7287966012954712,
        "codebertscore_s_f3-8": 0.722978949546814,
        "codebertscore_s_f1-7": 0.728875994682312,
        "codebertscore_s_f3-7": 0.7479456663131714,
        "codebertscore_s_f1-16": 0.7191071510314941,
        "codebertscore_s_f3-16": 0.7141062021255493,
        "codebertscore_s_f1-2": 0.8061535954475403,
        "codebertscore_s_f3-2": 0.8109266757965088,
        "codebertscore_s_f1-11": 0.7052745223045349,
        "codebertscore_s_f3-11": 0.7432875037193298,
        "codebertscore_s_f1-1": 0.7493906617164612,
        "codebertscore_s_f3-1": 0.7670132517814636,
        "codebertscore_s_f1-10": 0.7317709922790527,
        "codebertscore_s_f3-10": 0.7377843260765076,
        "codebertscore_s_f1-17": 0.7049958109855652,
        "codebertscore_s_f3-17": 0.6935972571372986,
        "codebertscore_s_f1-12": 0.7765605449676514,
        "codebertscore_s_f3-12": 0.7629255652427673,
        "codebertscore_s_f1-6": 0.743321418762207,
        "codebertscore_s_f3-6": 0.7548162341117859,
        "codebertscore_s_f1-18": 0.7214155197143555,
        "codebertscore_s_f3-18": 0.7153535485267639,
        "codebertscore_s_f1-15": 0.7101407647132874,
        "codebertscore_s_f3-15": 0.709984302520752,
        "codebertscore_s_f1-13": 0.6740944385528564,
        "codebertscore_s_f3-13": 0.6629955768585205,
        "codebertscore_s_f1-9": 0.6632254719734192,
        "codebertscore_s_f3-9": 0.6507381200790405,
        "codebertscore_s_f1-4": 0.7692084312438965,
        "codebertscore_s_f3-4": 0.7795164585113525,
        "codebertscore_s_f1-14": 0.7489691972732544,
        "codebertscore_s_f3-14": 0.7721940279006958,
        "codebertscore_s_f1-5": 0.6787357926368713,
        "codebertscore_s_f3-5": 0.6750859618186951,
        "codebertscore_s_f1-19": 0.6991252303123474,
        "codebertscore_s_f3-19": 0.6977956295013428,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n",
        "snippet": [
            "  return l.filter(e => e > 0);\n}\n\n"
        ],
        "simplified": "Return only positive numbers in the list.",
        "task_id": "30",
        "0": "//Your code here\n    var ans = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            ans.push(l[i]);\n        }\n    }\n    return ans;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return l.filter(function(v){return v > 0;});\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return l.filter(function(val){\n        return val >= 0;\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "let new_l = [];\n    for (i=0; i<l.length; i++){\n        if (l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return l.filter(x => x > 0);\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return l.filter(function(number){\n        return number > 0;\n    });\n}",
        "grade-5": {
            "execution": 1
        },
        "7": "return l.filter(function(num){\n    return num > 0;\n  });\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "return l.filter(function(n){\n    return n > 0;\n  });\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "return l.filter(function(value){\n        return value >= 0;\n    });\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "// Your code here\n  return l.filter(num => num > 0);\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "var positives = [];\n    for (var i=0; i<l.length; i++){\n        if (l[i] > 0){\n            positives.push(l[i]);\n        }\n    }\n    return positives;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "return l.filter(function(val){\n        return val > 0;\n    });\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var p=[];\n    for(i=0;i<l.length;i++){\n        if(l[i]>0){\n            p.push(l[i]);\n        }\n    }\n    return p;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "let positive = []\n  for (let i = 0; i < l.length; i++){\n    if (l[i] >= 0){\n      positive.push(l[i])\n    }\n  }\n  return positive\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "return l.filter(v => v > 0);\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return l.filter(i => i > 0);\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "//===YOUR CODE HERE===\n  var result = [];\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "19": "return l.filter(num => num > 0);\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.049714558330151565,
        "bleu-1": 0.2785468517364889,
        "bleu-2": 0.2595865729034343,
        "bleu-3": 0.05599757876912195,
        "bleu-4": 0.5731224484094259,
        "bleu-5": 0.2785468517364889,
        "bleu-7": 0.2785468517364889,
        "bleu-8": 0.2785468517364889,
        "bleu-9": 0.2595865729034343,
        "bleu-10": 0.40856390592219144,
        "bleu-11": 0.05484236895303141,
        "bleu-12": 0.2785468517364889,
        "bleu-13": 0.05599757876912195,
        "bleu-14": 0.027049400360592182,
        "bleu-15": 0.5731224484094259,
        "bleu-16": 0.5731224484094259,
        "bleu-17": 0.04469945504361891,
        "bleu-19": 0.5731224484094259,
        "codebleu-0": 0.5354267310789049,
        "codebleu-1": 0.5818512063683199,
        "codebleu-2": 0.5589649119090265,
        "codebleu-3": 0.5354267310789049,
        "codebleu-4": 0.9103352228830525,
        "codebleu-5": 0.5818512063683199,
        "codebleu-7": 0.5818512063683199,
        "codebleu-8": 0.5818512063683199,
        "codebleu-9": 0.5589649119090265,
        "codebleu-10": 0.8539232918888031,
        "codebleu-11": 0.5354267310789049,
        "codebleu-12": 0.5818512063683199,
        "codebleu-13": 0.5354267310789049,
        "codebleu-14": 0.5064412238325281,
        "codebleu-15": 0.9103352228830525,
        "codebleu-16": 0.9103352228830525,
        "codebleu-17": 0.5354267310789049,
        "codebleu-19": 0.9103352228830525,
        "chrf-0": 0.21664543912111164,
        "chrf-1": 0.561793426281753,
        "chrf-2": 0.5401164710615031,
        "chrf-3": 0.22578288023602366,
        "chrf-4": 0.7105014677669139,
        "chrf-5": 0.5261232839224359,
        "chrf-7": 0.5444886677057104,
        "chrf-8": 0.561793426281753,
        "chrf-9": 0.5357305190458715,
        "chrf-10": 0.6216568048403212,
        "chrf-11": 0.20745038222009018,
        "chrf-12": 0.5444886677057104,
        "chrf-13": 0.23273378029876302,
        "chrf-14": 0.19443566946495938,
        "chrf-15": 0.7105014677669139,
        "chrf-16": 0.7105014677669139,
        "chrf-17": 0.20004464826810725,
        "chrf-19": 0.685242660380309,
        "rougel-0": 0.23188405797101444,
        "rougel-1": 0.6060606060606061,
        "rougel-2": 0.588235294117647,
        "rougel-3": 0.25396825396825395,
        "rougel-4": 0.8571428571428571,
        "rougel-5": 0.6060606060606061,
        "rougel-7": 0.6060606060606061,
        "rougel-8": 0.6060606060606061,
        "rougel-9": 0.588235294117647,
        "rougel-10": 0.7272727272727273,
        "rougel-11": 0.25,
        "rougel-12": 0.6060606060606061,
        "rougel-13": 0.25396825396825395,
        "rougel-14": 0.22580645161290322,
        "rougel-15": 0.8571428571428571,
        "rougel-16": 0.8571428571428571,
        "rougel-17": 0.21333333333333332,
        "rougel-19": 0.8571428571428571,
        "meteor-0": 0.4110497237569062,
        "meteor-1": 0.6465517241379309,
        "meteor-2": 0.6563455224725462,
        "meteor-3": 0.4251428571428571,
        "meteor-4": 0.8504464285714286,
        "meteor-5": 0.6465517241379309,
        "meteor-7": 0.6465517241379309,
        "meteor-8": 0.6465517241379309,
        "meteor-9": 0.6563455224725462,
        "meteor-10": 0.8211206896551725,
        "meteor-11": 0.4227272727272728,
        "meteor-12": 0.6465517241379309,
        "meteor-13": 0.4251428571428571,
        "meteor-14": 0.2873563218390805,
        "meteor-15": 0.8504464285714286,
        "meteor-16": 0.8504464285714286,
        "meteor-17": 0.39786096256684494,
        "meteor-19": 0.8504464285714286,
        "ruby-0": 0.1454545454545455,
        "ruby-1": 0.5263157894736843,
        "ruby-2": 0.5,
        "ruby-3": 0.16326530612244894,
        "ruby-4": 0.8571428571428572,
        "ruby-5": 0.5263157894736843,
        "ruby-7": 0.5263157894736843,
        "ruby-8": 0.5263157894736843,
        "ruby-9": 0.5,
        "ruby-10": 0.631578947368421,
        "ruby-11": 0.16000000000000003,
        "ruby-12": 0.5263157894736843,
        "ruby-13": 0.16326530612244894,
        "ruby-14": 0.14583333333333337,
        "ruby-15": 0.8571428571428572,
        "ruby-16": 0.8571428571428572,
        "ruby-17": 0.1311475409836066,
        "ruby-19": 0.8571428571428572,
        "codebertscore_f1-0": 0.7415825724601746,
        "codebertscore_f3-0": 0.7722325325012207,
        "codebertscore_f1-1": 0.9305329918861389,
        "codebertscore_f3-1": 0.9499285221099854,
        "codebertscore_f1-2": 0.9157911539077759,
        "codebertscore_f3-2": 0.9347865581512451,
        "codebertscore_f1-3": 0.7530673146247864,
        "codebertscore_f3-3": 0.7727399468421936,
        "codebertscore_f1-4": 0.9689716100692749,
        "codebertscore_f3-4": 0.9689717292785645,
        "codebertscore_f1-5": 0.9021155834197998,
        "codebertscore_f3-5": 0.9195716381072998,
        "codebertscore_f1-7": 0.9102937579154968,
        "codebertscore_f3-7": 0.9282737970352173,
        "codebertscore_f1-8": 0.9221367239952087,
        "codebertscore_f3-8": 0.9415774345397949,
        "codebertscore_f1-9": 0.9095202684402466,
        "codebertscore_f3-9": 0.927671492099762,
        "codebertscore_f1-10": 0.857077419757843,
        "codebertscore_f3-10": 0.9059470295906067,
        "codebertscore_f1-11": 0.7581819295883179,
        "codebertscore_f3-11": 0.7776700258255005,
        "codebertscore_f1-12": 0.9188904762268066,
        "codebertscore_f3-12": 0.9380711913108826,
        "codebertscore_f1-13": 0.7606940269470215,
        "codebertscore_f3-13": 0.7755132913589478,
        "codebertscore_f1-14": 0.7619379758834839,
        "codebertscore_f3-14": 0.7832603454589844,
        "codebertscore_f1-15": 0.9665511846542358,
        "codebertscore_f3-15": 0.9665512442588806,
        "codebertscore_f1-16": 0.9630223512649536,
        "codebertscore_f3-16": 0.9630223512649536,
        "codebertscore_f1-17": 0.747943639755249,
        "codebertscore_f3-17": 0.7839180827140808,
        "codebertscore_f1-19": 0.9558051824569702,
        "codebertscore_f3-19": 0.955805242061615,
        "codebertscore_s_f1-0": 0.7345127463340759,
        "codebertscore_s_f3-0": 0.7770790457725525,
        "codebertscore_s_f1-1": 0.9124613404273987,
        "codebertscore_s_f3-1": 0.9372173547744751,
        "codebertscore_s_f1-2": 0.9085130095481873,
        "codebertscore_s_f3-2": 0.9328490495681763,
        "codebertscore_s_f1-3": 0.7498685717582703,
        "codebertscore_s_f3-3": 0.7775304913520813,
        "codebertscore_s_f1-4": 0.9597266316413879,
        "codebertscore_s_f3-4": 0.9597265720367432,
        "codebertscore_s_f1-5": 0.8972861766815186,
        "codebertscore_s_f3-5": 0.9199723601341248,
        "codebertscore_s_f1-7": 0.9004693031311035,
        "codebertscore_s_f3-7": 0.9232193231582642,
        "codebertscore_s_f1-8": 0.9142319560050964,
        "codebertscore_s_f3-8": 0.9386027455329895,
        "codebertscore_s_f1-9": 0.9006426930427551,
        "codebertscore_s_f3-9": 0.9240086078643799,
        "codebertscore_s_f1-10": 0.8608421683311462,
        "codebertscore_s_f3-10": 0.9204258918762207,
        "codebertscore_s_f1-11": 0.7578505873680115,
        "codebertscore_s_f3-11": 0.7844577431678772,
        "codebertscore_s_f1-12": 0.9100505113601685,
        "codebertscore_s_f3-12": 0.9342980980873108,
        "codebertscore_s_f1-13": 0.75856614112854,
        "codebertscore_s_f3-13": 0.780966579914093,
        "codebertscore_s_f1-14": 0.7743180990219116,
        "codebertscore_s_f3-14": 0.8047575354576111,
        "codebertscore_s_f1-15": 0.9525508880615234,
        "codebertscore_s_f3-15": 0.9525508880615234,
        "codebertscore_s_f1-16": 0.9556286931037903,
        "codebertscore_s_f3-16": 0.9556287527084351,
        "codebertscore_s_f1-17": 0.740947425365448,
        "codebertscore_s_f3-17": 0.7852230072021484,
        "codebertscore_s_f1-19": 0.9448597431182861,
        "codebertscore_s_f3-19": 0.9448597431182861,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s){\n",
        "snippet": [
            "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
        "task_id": "86",
        "3": "let strSplit = s.split(' ');\n  let arrSplit = [];\n  let count = 1;\n  let endWord = '';\n  for(let i = 0; i < strSplit.length; i++){\n    let currentWord = strSplit[i];\n    for(let j = 0; j < currentWord.length; j++){\n      let arr = currentWord.split('');\n      arrSplit.push(arr);\n    }\n  }\n  let antiShuffle = arrSplit.map(item => {\n    let asciiSort = item.sort((a, b) => {\n      return a.charCodeAt(0) - b.charCodeAt(0);\n    });\n    let newWord = asciiSort.join('');\n    if(count <= strSplit.length){\n      endWord += newWord + ' ';\n      count++;\n    }\n    return newWord;\n  });\n  return endWord;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var wordArr = s.split(\" \");\n    for(var i = 0; i < wordArr.length; i++){\n        wordArr[i] = wordArr[i].split(\"\").sort().join(\"\");\n    }\n    return wordArr.join(\" \");\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var arr = s.split(\" \");\n    var arr2 = [];\n    for(var i = 0; i < arr.length; i++){\n        var min_val = 255;\n        var word = \"\";\n        for(var j = 0; j < arr[i].length; j++){\n            if(arr[i].charCodeAt(j) < min_val){\n                min_val = arr[i].charCodeAt(j);\n                word = arr[i].charAt(j);\n            }\n        }\n        arr2.push(word);\n    }\n    return arr2.join(\"\");\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code here\n    let words = s.split(' ');\n    let result = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let arr = word.split('');\n        arr.sort(function(a, b) {\n            return a.charCodeAt(0) - b.charCodeAt(0);\n        });\n        result += arr.join('') + ' ';\n    }\n    return result.trim();\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return s.split(' ').map(function(word){\n\t\treturn word.split('').sort().join('');\n\t}).join(' ');\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let finalWord = '';\n    let wordArray = s.split(' ');\n    for (let i = 0; i < wordArray.length; i++) {\n        let charArray = wordArray[i].split('');\n        charArray.sort(function(a, b) {\n            return a.charCodeAt(0) - b.charCodeAt(0);\n        });\n        let orderedWord = charArray.join('');\n        finalWord += (orderedWord + ' ');\n    }\n    return finalWord.trim();\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let words = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        words[i] = words[i].split('').sort().join('');\n    }\n    return words.join(' ');\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return s.split(' ').map(w => w.split('').sort().join('')).join(' ');\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let result = \"\";\n    let word = \"\";\n    let char = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \" \"){\n            result += word + \" \";\n            word = \"\";\n        }\n        else {\n            char = s[i];\n            if (word.length > 0) {\n                let j = 0;\n                while (j < word.length) {\n                    if (char.charCodeAt(0) > word[j].charCodeAt(0)) {\n                        j++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                word = word.slice(0, j) + char + word.slice(j);\n            }\n            else {\n                word += char;\n            }\n        }\n    }\n    result += word;\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let newWord = '';\n  for (let word of s.split(' ')) {\n    let newLetters = [];\n    for (let i = 0; i < word.length; i++) {\n      newLetters.push(word[i]);\n    }\n    newLetters.sort();\n    newWord += newLetters.join('') + ' ';\n  }\n  return newWord.trim();\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return s.split(\" \").map(function(x){\n      return x.split(\"\").sort().join(\"\");\n    }).join(\" \");\n  }",
        "grade-12": {
            "execution": 1
        },
        "6": "var array = s.split(' ');\n  var orderedArray = [];\n  for (var j = 0; j < array.length; j++) {\n    var wordArray = array[j].split('');\n    var orderedWordArray = [];\n    for (var i = 0; i < wordArray.length; i++) {\n      orderedWordArray.push(wordArray[i]);\n    }\n    orderedWordArray.sort();\n    orderedArray.push(orderedWordArray.join(''));\n  }\n  return orderedArray.join(' ');\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var newString = '';\n  for (var i = 0; i < s.length; i++) {\n    var currentWord = s[i];\n    var currentLetters = currentWord.split('');\n    var sortedLetters = currentLetters.sort();\n    var sortedWord = sortedLetters.join('');\n    if (s[i] === ' ') {\n      newString += ' ';\n    } else {\n      newString += sortedWord;\n    }\n  }\n  return newString;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "}",
        "grade-15": {
            "execution": 0
        },
        "13": "let words = s.split(' ');\n\tlet new_s = '';\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet word = words[i];\n\t\tnew_s += word.split('').sort().join('');\n\t\tif (i != words.length - 1) {\n\t\t\tnew_s += ' ';\n\t\t}\n\t}\n\treturn new_s;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return s.split(' ').map(e=>e.split('').sort().join('')).join(' ');\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let arr = s.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    result += sort(arr[i]) + \" \";\n  }\n  return result.trim();\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var wordArray = s.split(\" \");\n  for (var i = 0; i < wordArray.length; i++) {\n    wordArray[i] = wordArray[i].split(\"\").sort().join(\"\");\n  }\n  return wordArray.join(\" \");\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var array = s.split(\" \");\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n        result.push(array[i].split(\"\").sort().join(\"\"));\n    }\n    return result.join(\" \");\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.23383134503053138,
        "bleu-0": 0.031528468319138664,
        "bleu-8": 0.2290894567427481,
        "bleu-7": 0.111644122804197,
        "bleu-16": 0.0014515533135552258,
        "bleu-2": 0.11638371778080232,
        "bleu-11": 0.029830228902136647,
        "bleu-1": 0.0008262212168806271,
        "bleu-10": 0.23734816538752984,
        "bleu-17": 0.06023725730872703,
        "bleu-12": 0.0014515533135552258,
        "bleu-6": 0.11631721584742427,
        "bleu-18": 0.06407110128917443,
        "bleu-15": 1.1808854971746382e-103,
        "bleu-13": 0.05852496903621805,
        "bleu-9": 0.0008262212168806271,
        "bleu-4": 0.02479057393870405,
        "bleu-14": 0.031528468319138664,
        "bleu-5": 0.0014515533135552258,
        "bleu-19": 0.030727687591248755,
        "codebleu-3": 0.4501182080205261,
        "codebleu-0": 0.16023588731808167,
        "codebleu-8": 0.3499715320549935,
        "codebleu-7": 0.26052936899225176,
        "codebleu-16": 0.08943570691792818,
        "codebleu-2": 0.2654509230187196,
        "codebleu-11": 0.1592666789214765,
        "codebleu-1": 0.08311027802779918,
        "codebleu-10": 0.40781916294135934,
        "codebleu-17": 0.19928733288821932,
        "codebleu-12": 0.08943570691792818,
        "codebleu-6": 0.288138472789095,
        "codebleu-18": 0.21300563673679437,
        "codebleu-15": 0.0020202020202020198,
        "codebleu-13": 0.1923597743006272,
        "codebleu-9": 0.08311027802779918,
        "codebleu-4": 0.13707992668720867,
        "codebleu-14": 0.16023588731808167,
        "codebleu-5": 0.08943570691792818,
        "codebleu-19": 0.17055325180628517,
        "chrf-3": 0.3360424623117759,
        "chrf-0": 0.15681147144457558,
        "chrf-8": 0.34426710166797414,
        "chrf-7": 0.252758902461995,
        "chrf-16": 0.07201887318858867,
        "chrf-2": 0.252941891165893,
        "chrf-11": 0.15042001013484416,
        "chrf-1": 0.05895193010912396,
        "chrf-10": 0.3188770227145276,
        "chrf-17": 0.18063942833612587,
        "chrf-12": 0.06422026477542513,
        "chrf-6": 0.2161112926974197,
        "chrf-18": 0.1790759636372819,
        "chrf-15": 0.0034036759700476517,
        "chrf-13": 0.18037501793152566,
        "chrf-9": 0.06003984121151282,
        "chrf-4": 0.17890035950371047,
        "chrf-14": 0.13905036731093093,
        "chrf-5": 0.07201887318858867,
        "chrf-19": 0.1491679938480659,
        "rougel-3": 0.3900226757369614,
        "rougel-0": 0.2912621359223301,
        "rougel-8": 0.46612466124661245,
        "rougel-7": 0.3682719546742209,
        "rougel-16": 0.18374558303886926,
        "rougel-2": 0.3490304709141275,
        "rougel-11": 0.30921052631578944,
        "rougel-1": 0.17266187050359713,
        "rougel-10": 0.39705882352941174,
        "rougel-17": 0.2978723404255319,
        "rougel-12": 0.18374558303886926,
        "rougel-6": 0.32786885245901637,
        "rougel-18": 0.28901734104046245,
        "rougel-15": 0.008368200836820083,
        "rougel-13": 0.34355828220858897,
        "rougel-9": 0.17266187050359713,
        "rougel-4": 0.28378378378378377,
        "rougel-14": 0.2912621359223301,
        "rougel-5": 0.18374558303886926,
        "rougel-19": 0.2838709677419355,
        "meteor-3": 0.33305519159412955,
        "meteor-0": 0.16828823994577496,
        "meteor-8": 0.2908789267283391,
        "meteor-7": 0.24725076770002744,
        "meteor-16": 0.08603752286236853,
        "meteor-2": 0.22899488242176883,
        "meteor-11": 0.16156821242280248,
        "meteor-1": 0.07927525064548228,
        "meteor-10": 0.29328950163648737,
        "meteor-17": 0.18224269099600662,
        "meteor-12": 0.08603752286236853,
        "meteor-6": 0.21519733144794329,
        "meteor-18": 0.19885674931129477,
        "meteor-15": 0.0023331777881474567,
        "meteor-13": 0.20299446479535932,
        "meteor-9": 0.07927525064548228,
        "meteor-4": 0.16234577610010134,
        "meteor-14": 0.15130004049678136,
        "meteor-5": 0.08603752286236853,
        "meteor-19": 0.15278676163533467,
        "ruby-3": 0.22689075630252098,
        "ruby-0": 0.17647058823529416,
        "ruby-8": 0.31512605042016806,
        "ruby-7": 0.2142857142857143,
        "ruby-16": 0.10924369747899154,
        "ruby-2": 0.20588235294117652,
        "ruby-11": 0.19327731092436973,
        "ruby-1": 0.10084033613445376,
        "ruby-10": 0.2184873949579832,
        "ruby-17": 0.18907563025210083,
        "ruby-12": 0.10924369747899154,
        "ruby-6": 0.22689075630252098,
        "ruby-18": 0.18907563025210083,
        "ruby-15": 0.004201680672268893,
        "ruby-13": 0.2184873949579832,
        "ruby-9": 0.10084033613445376,
        "ruby-4": 0.17647058823529416,
        "ruby-14": 0.17647058823529416,
        "ruby-5": 0.10924369747899154,
        "ruby-19": 0.18487394957983194,
        "codebertscore_f1-3": 0.7798535227775574,
        "codebertscore_f3-3": 0.7899859547615051,
        "codebertscore_f1-0": 0.7303045392036438,
        "codebertscore_f3-0": 0.6907739639282227,
        "codebertscore_f1-8": 0.8303318023681641,
        "codebertscore_f3-8": 0.8196631669998169,
        "codebertscore_f1-7": 0.775368332862854,
        "codebertscore_f3-7": 0.7662400603294373,
        "codebertscore_f1-16": 0.6136565804481506,
        "codebertscore_f3-16": 0.5684595704078674,
        "codebertscore_f1-2": 0.7680274248123169,
        "codebertscore_f3-2": 0.7586376667022705,
        "codebertscore_f1-11": 0.7428264021873474,
        "codebertscore_f3-11": 0.6954571008682251,
        "codebertscore_f1-1": 0.5951191186904907,
        "codebertscore_f3-1": 0.5428697466850281,
        "codebertscore_f1-10": 0.795320451259613,
        "codebertscore_f3-10": 0.79539954662323,
        "codebertscore_f1-17": 0.7236640453338623,
        "codebertscore_f3-17": 0.7117418050765991,
        "codebertscore_f1-12": 0.6124348640441895,
        "codebertscore_f3-12": 0.5658326745033264,
        "codebertscore_f1-6": 0.7536275386810303,
        "codebertscore_f3-6": 0.7320318222045898,
        "codebertscore_f1-18": 0.7330708503723145,
        "codebertscore_f3-18": 0.7279642820358276,
        "codebertscore_f1-15": 0.0,
        "codebertscore_f3-15": 0.0,
        "codebertscore_f1-13": 0.7615066766738892,
        "codebertscore_f3-13": 0.734664797782898,
        "codebertscore_f1-9": 0.5990732908248901,
        "codebertscore_f3-9": 0.548409104347229,
        "codebertscore_f1-4": 0.7549008131027222,
        "codebertscore_f3-4": 0.7142928242683411,
        "codebertscore_f1-14": 0.7296512126922607,
        "codebertscore_f3-14": 0.6877777576446533,
        "codebertscore_f1-5": 0.6155049800872803,
        "codebertscore_f3-5": 0.5703085064888,
        "codebertscore_f1-19": 0.7359840273857117,
        "codebertscore_f3-19": 0.6952471733093262,
        "codebertscore_s_f1-3": 0.8032111525535583,
        "codebertscore_s_f3-3": 0.8160494565963745,
        "codebertscore_s_f1-0": 0.7865350246429443,
        "codebertscore_s_f3-0": 0.7519909739494324,
        "codebertscore_s_f1-8": 0.8513790965080261,
        "codebertscore_s_f3-8": 0.8444059491157532,
        "codebertscore_s_f1-7": 0.8133207559585571,
        "codebertscore_s_f3-7": 0.8063250184059143,
        "codebertscore_s_f1-16": 0.690348207950592,
        "codebertscore_s_f3-16": 0.6189572811126709,
        "codebertscore_s_f1-2": 0.8053034543991089,
        "codebertscore_s_f3-2": 0.7993962168693542,
        "codebertscore_s_f1-11": 0.8028573989868164,
        "codebertscore_s_f3-11": 0.7578146457672119,
        "codebertscore_s_f1-1": 0.6853514313697815,
        "codebertscore_s_f3-1": 0.6087727546691895,
        "codebertscore_s_f1-10": 0.8226782083511353,
        "codebertscore_s_f3-10": 0.8238743543624878,
        "codebertscore_s_f1-17": 0.7721102237701416,
        "codebertscore_s_f3-17": 0.7625347971916199,
        "codebertscore_s_f1-12": 0.6970851421356201,
        "codebertscore_s_f3-12": 0.6267958283424377,
        "codebertscore_s_f1-6": 0.7932363152503967,
        "codebertscore_s_f3-6": 0.7789159417152405,
        "codebertscore_s_f1-18": 0.7790943384170532,
        "codebertscore_s_f3-18": 0.7770100831985474,
        "codebertscore_s_f1-15": 0.6849095821380615,
        "codebertscore_s_f3-15": 0.5587645769119263,
        "codebertscore_s_f1-13": 0.8125197291374207,
        "codebertscore_s_f3-13": 0.7868746519088745,
        "codebertscore_s_f1-9": 0.6843756437301636,
        "codebertscore_s_f3-9": 0.6094505190849304,
        "codebertscore_s_f1-4": 0.8111430406570435,
        "codebertscore_s_f3-4": 0.7699957489967346,
        "codebertscore_s_f1-14": 0.7827609777450562,
        "codebertscore_s_f3-14": 0.744574248790741,
        "codebertscore_s_f1-5": 0.6951613426208496,
        "codebertscore_s_f3-5": 0.6248819828033447,
        "codebertscore_s_f1-19": 0.7930790781974792,
        "codebertscore_s_f3-19": 0.7552826404571533,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nfunction compare(game, guess){\n",
        "snippet": [
            "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n"
        ],
        "simplified": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
        "task_id": "152",
        "3": "let result = []\n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            result.push(0)\n        }else{\n            result.push(Math.abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var result = []\n\tfor (var i = 0; i < game.length; i++) {\n\t\tif (game[i] === guess[i]) {\n\t\t\tresult.push(0)\n\t\t} else {\n\t\t\tresult.push(Math.abs(game[i] - guess[i]))\n\t\t}\n\t}\n\treturn result\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return game.map((el, idx) => {\n        if (el === guess[idx]) return 0;\n        return Math.abs(el - guess[idx]);\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var result = [];\n    for(let i = 0; i < game.length; i++){\n        if(game[i] !== guess[i]){\n            result.push(Math.abs(game[i] - guess[i]));\n        }else{\n            result.push(0);\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let result = [];\n  for(let i = 0; i < game.length; i++){\n    if(game[i] === guess[i]){\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var result = [];\n  for(var i = 0; i < game.length; i++){\n    if(game[i] === guess[i]){\n      result.push(0);\n    }else{\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var result = []\n    for(var i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            result.push(0)\n        } else {\n            result.push(Math.abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let result = [];\n    for(let i = 0; i < game.length; i++){\n        let diff = game[i] - guess[i];\n        if(game[i] == guess[i]){\n            result.push(0);\n        } else {\n            result.push(Math.abs(diff));\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//code here\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        if(game[i] == guess[i]){\n            result.push(0);\n        }else{\n            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let result = []\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]))\n    }\n    return result\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return game.map((score, index) => guess[index] > score ? guess[index] - score : score - guess[index]);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var result = [];\n    for(var i = 0; i < game.length; i++){\n        if(game[i] !== guess[i]){\n            result.push(Math.abs(game[i] - guess[i]));\n        } else {\n            result.push(0);\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var result = [];\n    for(var i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            result.push(0);\n        }else{\n            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return game.map((x, i) => x == guess[i] ? 0 : Math.abs(x - guess[i]));\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "return game.map((e,i)=>{\n        return (e-guess[i])===0? 0: Math.abs(e-guess[i])\n    })\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return game.map((a,i)=>{\n       return guess[i]!==a?Math.abs(guess[i]-a):0\n    })\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return game.map((sc,i)=>guess[i]===sc?0:Math.abs(guess[i]-sc))\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let answer = []\n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            answer.push(0)\n        }else if(game[i] !== guess[i]){\n            answer.push(Math.abs(game[i] - guess[i]))\n        }\n    }\n    return answer\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return game.map((score, index) => score - guess[index]);\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.4193365784287655,
        "bleu-0": 0.38093477423201366,
        "bleu-8": 0.05775161225791374,
        "bleu-7": 0.3922184738929107,
        "bleu-16": 0.40455520489715463,
        "bleu-2": 0.3678887639660929,
        "bleu-11": 0.38093477423201366,
        "bleu-1": 0.39245133306814095,
        "bleu-10": 0.3886868358638705,
        "bleu-17": 0.4364264472842767,
        "bleu-12": 0.032677908021846,
        "bleu-6": 0.3550728827002403,
        "bleu-18": 0.3678887639660929,
        "bleu-15": 0.11517715114711954,
        "bleu-13": 0.0945167798831689,
        "bleu-9": 0.11574357243212914,
        "bleu-4": 0.13328778826404616,
        "bleu-14": 0.45597031110331654,
        "bleu-5": 0.3722518247925772,
        "bleu-19": 0.017767224857088454,
        "codebleu-3": 0.711671837145535,
        "codebleu-0": 0.7026673697794096,
        "codebleu-8": 0.41424323398967833,
        "codebleu-7": 0.7190155789821517,
        "codebleu-16": 0.7210717008161924,
        "codebleu-2": 0.7123564606610154,
        "codebleu-11": 0.7026673697794096,
        "codebleu-1": 0.7283136481039494,
        "codebleu-10": 0.7184269726439784,
        "codebleu-17": 0.6062085788240589,
        "codebleu-12": 0.3440091536855888,
        "codebleu-6": 0.71022048045004,
        "codebleu-18": 0.7123564606610154,
        "codebleu-15": 0.3420569656971122,
        "codebleu-13": 0.3939387026482898,
        "codebleu-9": 0.37709322569024917,
        "codebleu-4": 0.3434056646217303,
        "codebleu-14": 0.6282179613043967,
        "codebleu-5": 0.7368104893172813,
        "codebleu-19": 0.20515568820084695,
        "chrf-3": 0.5504328146282187,
        "chrf-0": 0.500348412171928,
        "chrf-8": 0.2651079747438353,
        "chrf-7": 0.5424296136555397,
        "chrf-16": 0.5509697594666767,
        "chrf-2": 0.501297129023675,
        "chrf-11": 0.500348412171928,
        "chrf-1": 0.542812583060028,
        "chrf-10": 0.5410919276310192,
        "chrf-17": 0.4793613260032617,
        "chrf-12": 0.23194922447848693,
        "chrf-6": 0.4927569738396948,
        "chrf-18": 0.501297129023675,
        "chrf-15": 0.255587994822422,
        "chrf-13": 0.2596014715188478,
        "chrf-9": 0.26026626787803564,
        "chrf-4": 0.25165689674363395,
        "chrf-14": 0.48921762854844886,
        "chrf-5": 0.5659128501920998,
        "chrf-19": 0.2004839348570108,
        "rougel-3": 0.6504065040650407,
        "rougel-0": 0.6341463414634145,
        "rougel-8": 0.2916666666666667,
        "rougel-7": 0.6141732283464567,
        "rougel-16": 0.6456692913385826,
        "rougel-2": 0.6299212598425197,
        "rougel-11": 0.6341463414634145,
        "rougel-1": 0.6106870229007635,
        "rougel-10": 0.6307692307692307,
        "rougel-17": 0.6122448979591837,
        "rougel-12": 0.2988505747126437,
        "rougel-6": 0.5984251968503937,
        "rougel-18": 0.6299212598425197,
        "rougel-15": 0.3409090909090909,
        "rougel-13": 0.3578947368421052,
        "rougel-9": 0.32967032967032966,
        "rougel-4": 0.3181818181818182,
        "rougel-14": 0.6138613861386137,
        "rougel-5": 0.6423357664233578,
        "rougel-19": 0.24657534246575344,
        "meteor-3": 0.6654704328887424,
        "meteor-0": 0.6548294738770929,
        "meteor-8": 0.244140625,
        "meteor-7": 0.6868394572012869,
        "meteor-16": 0.654417263380095,
        "meteor-2": 0.6441146469762956,
        "meteor-11": 0.6548294738770929,
        "meteor-1": 0.6496317623681747,
        "meteor-10": 0.6673913079526479,
        "meteor-17": 0.4872627650281902,
        "meteor-12": 0.22716202783300204,
        "meteor-6": 0.6761080185345713,
        "meteor-18": 0.6441146469762956,
        "meteor-15": 0.34697842590092115,
        "meteor-13": 0.3546821987285632,
        "meteor-9": 0.3364014902476441,
        "meteor-4": 0.3358052931916569,
        "meteor-14": 0.49484203739522886,
        "meteor-5": 0.6849005424954792,
        "meteor-19": 0.17168523851258288,
        "ruby-3": 0.5211267605633803,
        "ruby-0": 0.5070422535211268,
        "ruby-8": 0.1923076923076923,
        "ruby-7": 0.4933333333333333,
        "ruby-16": 0.5066666666666666,
        "ruby-2": 0.4933333333333333,
        "ruby-11": 0.5070422535211268,
        "ruby-1": 0.4683544303797469,
        "ruby-10": 0.4871794871794872,
        "ruby-17": 0.4423076923076923,
        "ruby-12": 0.17307692307692313,
        "ruby-6": 0.48,
        "ruby-18": 0.4933333333333333,
        "ruby-15": 0.25,
        "ruby-13": 0.2692307692307693,
        "ruby-9": 0.23076923076923073,
        "ruby-4": 0.21153846153846156,
        "ruby-14": 0.42307692307692313,
        "ruby-5": 0.5058823529411764,
        "ruby-19": 0.15384615384615385,
        "codebertscore_f1-3": 0.8653926253318787,
        "codebertscore_f3-3": 0.8827996253967285,
        "codebertscore_f1-0": 0.8727754950523376,
        "codebertscore_f3-0": 0.8900054693222046,
        "codebertscore_f1-8": 0.7869033813476562,
        "codebertscore_f3-8": 0.7868205308914185,
        "codebertscore_f1-7": 0.8657546639442444,
        "codebertscore_f3-7": 0.8839295506477356,
        "codebertscore_f1-16": 0.8736273646354675,
        "codebertscore_f3-16": 0.8907833099365234,
        "codebertscore_f1-2": 0.8675451278686523,
        "codebertscore_f3-2": 0.8853542804718018,
        "codebertscore_f1-11": 0.8599758148193359,
        "codebertscore_f3-11": 0.8764324188232422,
        "codebertscore_f1-1": 0.8571608662605286,
        "codebertscore_f3-1": 0.8759588003158569,
        "codebertscore_f1-10": 0.8544384241104126,
        "codebertscore_f3-10": 0.8781154751777649,
        "codebertscore_f1-17": 0.8728266358375549,
        "codebertscore_f3-17": 0.8765305280685425,
        "codebertscore_f1-12": 0.7998523116111755,
        "codebertscore_f3-12": 0.7859273552894592,
        "codebertscore_f1-6": 0.8612801432609558,
        "codebertscore_f3-6": 0.8780792951583862,
        "codebertscore_f1-18": 0.8605605959892273,
        "codebertscore_f3-18": 0.8781546950340271,
        "codebertscore_f1-15": 0.8175115585327148,
        "codebertscore_f3-15": 0.8171129822731018,
        "codebertscore_f1-13": 0.8063727617263794,
        "codebertscore_f3-13": 0.8121464848518372,
        "codebertscore_f1-9": 0.8153706789016724,
        "codebertscore_f3-9": 0.821029543876648,
        "codebertscore_f1-4": 0.8100928068161011,
        "codebertscore_f3-4": 0.8130948543548584,
        "codebertscore_f1-14": 0.8732422590255737,
        "codebertscore_f3-14": 0.8776280879974365,
        "codebertscore_f1-5": 0.865566611289978,
        "codebertscore_f3-5": 0.8815034031867981,
        "codebertscore_f1-19": 0.7840002179145813,
        "codebertscore_f3-19": 0.7699998021125793,
        "codebertscore_s_f1-3": 0.866091251373291,
        "codebertscore_s_f3-3": 0.8821645379066467,
        "codebertscore_s_f1-0": 0.8709966540336609,
        "codebertscore_s_f3-0": 0.889314591884613,
        "codebertscore_s_f1-8": 0.7757197618484497,
        "codebertscore_s_f3-8": 0.7773596048355103,
        "codebertscore_s_f1-7": 0.864479124546051,
        "codebertscore_s_f3-7": 0.8850820064544678,
        "codebertscore_s_f1-16": 0.8731476068496704,
        "codebertscore_s_f3-16": 0.8889214992523193,
        "codebertscore_s_f1-2": 0.863580048084259,
        "codebertscore_s_f3-2": 0.8819433450698853,
        "codebertscore_s_f1-11": 0.8571946620941162,
        "codebertscore_s_f3-11": 0.8743343949317932,
        "codebertscore_s_f1-1": 0.8634758591651917,
        "codebertscore_s_f3-1": 0.88433837890625,
        "codebertscore_s_f1-10": 0.8488354682922363,
        "codebertscore_s_f3-10": 0.8746014833450317,
        "codebertscore_s_f1-17": 0.880120038986206,
        "codebertscore_s_f3-17": 0.883804440498352,
        "codebertscore_s_f1-12": 0.7888215184211731,
        "codebertscore_s_f3-12": 0.7721537947654724,
        "codebertscore_s_f1-6": 0.8583564162254333,
        "codebertscore_s_f3-6": 0.8776512742042542,
        "codebertscore_s_f1-18": 0.8562628626823425,
        "codebertscore_s_f3-18": 0.874647855758667,
        "codebertscore_s_f1-15": 0.802806556224823,
        "codebertscore_s_f3-15": 0.8009486794471741,
        "codebertscore_s_f1-13": 0.8032045364379883,
        "codebertscore_s_f3-13": 0.8123083710670471,
        "codebertscore_s_f1-9": 0.8128679394721985,
        "codebertscore_s_f3-9": 0.8202024102210999,
        "codebertscore_s_f1-4": 0.7967782616615295,
        "codebertscore_s_f3-4": 0.8018766641616821,
        "codebertscore_s_f1-14": 0.8797140717506409,
        "codebertscore_s_f3-14": 0.8839452266693115,
        "codebertscore_s_f1-5": 0.8652161359786987,
        "codebertscore_s_f3-5": 0.8806588649749756,
        "codebertscore_s_f1-19": 0.7658597230911255,
        "codebertscore_s_f3-19": 0.742807924747467,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest(strings){\n",
        "snippet": [
            "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n"
        ],
        "simplified": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
        "task_id": "12",
        "3": "let longest = \"\";\n  strings.forEach(function(str){\n    if(str.length > longest.length){\n      longest = str;\n    }\n  });\n  return longest;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//return strings.sort()[strings.length - 1];\n    let long = strings[0];\n    for(let i = 0; i < strings.length; i++){\n        if(strings[i].length > long.length){\n            long = strings[i];\n        }\n    }\n    return long;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var longest = \"\";\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].length > longest.length){\n\t\t\tlongest = strings[i];\n\t\t}\n\t}\n\treturn longest;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(strings.length==0){\n        return null;\n    }\n    var longest = strings[0];\n    for(var i=1; i<strings.length; i++){\n        if(strings[i].length>longest.length){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let longest = 0;\n    let longest_str = null;\n    for (let s of strings){\n        if (s.length > longest){\n            longest = s.length;\n            longest_str = s;\n        }\n    }\n    return longest_str;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var longest_string = 'None';\n  for (var i=0; i<strings.length; i++){\n    if (strings[i].length > longest_string.length){\n      longest_string = strings[i];\n    }\n  }\n  return longest_string;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (strings.length==0){\n\t\treturn null;\n\t}\n\tvar longestString = strings[0];\n\tfor (var i=1; i<strings.length; i++){\n\t\tif (strings[i].length > longestString.length){\n\t\t\tlongestString = strings[i];\n\t\t}\n\t}\n\treturn longestString;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "if(strings.length === 0){\n\t\treturn \"None\";\n\t}else{\n\t\tvar max = strings[0];\n\t\tvar maxLength = strings[0].length;\n\t\tfor(var i = 1; i < strings.length; i++){\n\t\t\tif(strings[i].length > maxLength){\n\t\t\t\tmax = strings[i];\n\t\t\t\tmaxLength = strings[i].length;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(strings.length === 0){\n    return;\n  }\n  var result = strings[0];\n  var longestLength = strings[0].length;\n  for(var i = 1; i < strings.length; i++){\n    if(strings[i].length > longestLength){\n      result = strings[i];\n      longestLength = strings[i].length;\n    }\n  }\n  return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let longest_string = null;\n    if (strings.length > 0){\n        longest_string = strings[0];\n        for (let i = 1; i < strings.length; i++){\n            if (strings[i].length > longest_string.length){\n                longest_string = strings[i];\n            }\n        }\n    }\n    return longest_string;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (strings.length === 0) return;\n    let long = strings[0];\n    for (let word of strings){\n        if (word.length > long.length){\n            long = word;\n        }\n    }\n    return long;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var longest = '';\n    strings.forEach(function(element){\n        if(element.length > longest.length){\n            longest = element;\n        }\n    });\n    return longest;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(strings.length == 0){\n        return undefined;\n    }\n    if(strings.length == 1){\n        return strings[0];\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if (strings.length === 0) {\n        return \"None\";\n    }\n    var length = 0;\n    var longest = \"\";\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].length > length) {\n            length = strings[i].length;\n            longest = strings[i];\n        }\n    }\n    return longest;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(strings.length == 0){\n        return \"None\";\n    }\n    var longest = strings[0];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if (strings.length == 0) {\n    return null;\n  }\n  strings.sort(function(a, b){\n    return b.length - a.length;\n  });\n  return strings[0];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (strings.length == 0) return \"None\";\n    var maxLength = 0;\n    var longStr = \"\";\n    for (var i=0; i<strings.length; i++){\n        if (strings[i].length > maxLength){\n            maxLength = strings[i].length;\n            longStr = strings[i];\n        }\n    }\n    return longStr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(strings.length == 0){\n    return \"None\";\n  }\n  let longestLength = 0;\n  let longestString = \"\";\n  for(let i = 0; i < strings.length; i++){\n    if(strings[i].length > longestLength){\n      longestLength = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//empty list\n    if(strings.length==0){\n        return null;\n    }\n    var maxLength = strings[0].length;\n    var maxIndex = 0;\n    for(var i=1; i<strings.length; i++){\n        if(strings[i].length>maxLength){\n            maxLength = strings[i].length;\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.07189450875878096,
        "bleu-0": 0.11280819074594854,
        "bleu-8": 0.1023448894450881,
        "bleu-7": 0.22573239620891156,
        "bleu-16": 0.19601628582205802,
        "bleu-2": 0.10296156892242203,
        "bleu-11": 0.21918323135096573,
        "bleu-1": 0.15231906024387912,
        "bleu-10": 0.16021629592164957,
        "bleu-17": 0.1466067622865222,
        "bleu-12": 0.23196989541332078,
        "bleu-6": 0.0725760494843434,
        "bleu-18": 0.19040210630907645,
        "bleu-15": 0.17721821524228465,
        "bleu-13": 2.9374821117108042e-30,
        "bleu-9": 0.2144604484498437,
        "bleu-4": 0.14909094222930433,
        "bleu-14": 0.1838615412974125,
        "bleu-5": 0.1672239046892311,
        "bleu-19": 0.16964685342015137,
        "codebleu-3": 0.2994302941455736,
        "codebleu-0": 0.4603675647550405,
        "codebleu-8": 0.3460370228151345,
        "codebleu-7": 0.48368155791277034,
        "codebleu-16": 0.3441253365147635,
        "codebleu-2": 0.3475338331940555,
        "codebleu-11": 0.4856996490179273,
        "codebleu-1": 0.49834187009278064,
        "codebleu-10": 0.49786596134373523,
        "codebleu-17": 0.45158408045545145,
        "codebleu-12": 0.4286193092124039,
        "codebleu-6": 0.30037429532247045,
        "codebleu-18": 0.5383590781070139,
        "codebleu-15": 0.49217349313449393,
        "codebleu-13": 0.006734006734006735,
        "codebleu-9": 0.4763863971050597,
        "codebleu-4": 0.32439997187285136,
        "codebleu-14": 0.5018068355730291,
        "codebleu-5": 0.4887156600136445,
        "codebleu-19": 0.5030219503174999,
        "chrf-3": 0.25325785793830563,
        "chrf-0": 0.38553476628898226,
        "chrf-8": 0.3328048613034948,
        "chrf-7": 0.44287556673106077,
        "chrf-16": 0.3195004130104377,
        "chrf-2": 0.341616193634813,
        "chrf-11": 0.43176764572473175,
        "chrf-1": 0.43643888381911133,
        "chrf-10": 0.4002810601576273,
        "chrf-17": 0.3621282618652613,
        "chrf-12": 0.4074565110953601,
        "chrf-6": 0.24454638234574474,
        "chrf-18": 0.40402974187685536,
        "chrf-15": 0.41298298804413575,
        "chrf-13": 0.007898894154818327,
        "chrf-9": 0.4140251706500832,
        "chrf-4": 0.39355107536319395,
        "chrf-14": 0.4459113753683245,
        "chrf-5": 0.387690178378611,
        "chrf-19": 0.46910055794452565,
        "rougel-3": 0.33333333333333337,
        "rougel-0": 0.37681159420289856,
        "rougel-8": 0.3333333333333333,
        "rougel-7": 0.47058823529411764,
        "rougel-16": 0.42857142857142855,
        "rougel-2": 0.3305785123966942,
        "rougel-11": 0.4571428571428572,
        "rougel-1": 0.40740740740740744,
        "rougel-10": 0.4230769230769231,
        "rougel-17": 0.38235294117647056,
        "rougel-12": 0.5084745762711865,
        "rougel-6": 0.33333333333333337,
        "rougel-18": 0.40764331210191085,
        "rougel-15": 0.4026845637583893,
        "rougel-13": 0.02857142857142857,
        "rougel-9": 0.4492753623188406,
        "rougel-4": 0.4247787610619469,
        "rougel-14": 0.39473684210526316,
        "rougel-5": 0.37662337662337664,
        "rougel-19": 0.41250000000000003,
        "meteor-3": 0.2984370453506256,
        "meteor-0": 0.39081336882579115,
        "meteor-8": 0.35839947089947094,
        "meteor-7": 0.4378526214393834,
        "meteor-16": 0.4041817634742925,
        "meteor-2": 0.3578669308238402,
        "meteor-11": 0.4353216814310633,
        "meteor-1": 0.4104949534840706,
        "meteor-10": 0.406351518361582,
        "meteor-17": 0.4001579098478323,
        "meteor-12": 0.4361065045144647,
        "meteor-6": 0.3066732374768089,
        "meteor-18": 0.42751518884000983,
        "meteor-15": 0.4026838713550005,
        "meteor-13": 0.008038585209003215,
        "meteor-9": 0.41523144245051985,
        "meteor-4": 0.3200187969924812,
        "meteor-14": 0.4086603338068182,
        "meteor-5": 0.3921325323895694,
        "meteor-19": 0.4334186858263906,
        "ruby-3": 0.18840579710144922,
        "ruby-0": 0.17391304347826086,
        "ruby-8": 0.18840579710144922,
        "ruby-7": 0.23188405797101452,
        "ruby-16": 0.21739130434782605,
        "ruby-2": 0.17391304347826086,
        "ruby-11": 0.19718309859154926,
        "ruby-1": 0.20430107526881724,
        "ruby-10": 0.2183908045977011,
        "ruby-17": 0.14492753623188404,
        "ruby-12": 0.34782608695652173,
        "ruby-6": 0.18840579710144922,
        "ruby-18": 0.25,
        "ruby-15": 0.21250000000000002,
        "ruby-13": 0.01449275362318836,
        "ruby-9": 0.18840579710144922,
        "ruby-4": 0.2753623188405797,
        "ruby-14": 0.20481927710843373,
        "ruby-5": 0.18823529411764706,
        "ruby-19": 0.23076923076923073,
        "codebertscore_f1-3": 0.7746858596801758,
        "codebertscore_f3-3": 0.7547886371612549,
        "codebertscore_f1-0": 0.7720568180084229,
        "codebertscore_f3-0": 0.762869119644165,
        "codebertscore_f1-8": 0.7736225128173828,
        "codebertscore_f3-8": 0.7611482739448547,
        "codebertscore_f1-7": 0.8080434203147888,
        "codebertscore_f3-7": 0.7997479438781738,
        "codebertscore_f1-16": 0.8173650503158569,
        "codebertscore_f3-16": 0.8002277612686157,
        "codebertscore_f1-2": 0.7808659076690674,
        "codebertscore_f3-2": 0.7686846256256104,
        "codebertscore_f1-11": 0.8151618838310242,
        "codebertscore_f3-11": 0.809370219707489,
        "codebertscore_f1-1": 0.8116568922996521,
        "codebertscore_f3-1": 0.8040384650230408,
        "codebertscore_f1-10": 0.8069016933441162,
        "codebertscore_f3-10": 0.7963342070579529,
        "codebertscore_f1-17": 0.7871008515357971,
        "codebertscore_f3-17": 0.7785612344741821,
        "codebertscore_f1-12": 0.8336355090141296,
        "codebertscore_f3-12": 0.8140261769294739,
        "codebertscore_f1-6": 0.7671023011207581,
        "codebertscore_f3-6": 0.7481727004051208,
        "codebertscore_f1-18": 0.7933468222618103,
        "codebertscore_f3-18": 0.7852057814598083,
        "codebertscore_f1-15": 0.797432541847229,
        "codebertscore_f3-15": 0.7863625288009644,
        "codebertscore_f1-13": 0.0,
        "codebertscore_f3-13": 0.0,
        "codebertscore_f1-9": 0.7997845411300659,
        "codebertscore_f3-9": 0.78925621509552,
        "codebertscore_f1-4": 0.7952783107757568,
        "codebertscore_f3-4": 0.7755665183067322,
        "codebertscore_f1-14": 0.817267894744873,
        "codebertscore_f3-14": 0.8101699352264404,
        "codebertscore_f1-5": 0.8049083948135376,
        "codebertscore_f3-5": 0.7965407371520996,
        "codebertscore_f1-19": 0.8110893368721008,
        "codebertscore_f3-19": 0.810089111328125,
        "codebertscore_s_f1-3": 0.7848513722419739,
        "codebertscore_s_f3-3": 0.7690489888191223,
        "codebertscore_s_f1-0": 0.7812623381614685,
        "codebertscore_s_f3-0": 0.7749278545379639,
        "codebertscore_s_f1-8": 0.7870654463768005,
        "codebertscore_s_f3-8": 0.7770562767982483,
        "codebertscore_s_f1-7": 0.8192506432533264,
        "codebertscore_s_f3-7": 0.8136062026023865,
        "codebertscore_s_f1-16": 0.8301731944084167,
        "codebertscore_s_f3-16": 0.817456066608429,
        "codebertscore_s_f1-2": 0.795613706111908,
        "codebertscore_s_f3-2": 0.7854043245315552,
        "codebertscore_s_f1-11": 0.8262038230895996,
        "codebertscore_s_f3-11": 0.8221205472946167,
        "codebertscore_s_f1-1": 0.823656439781189,
        "codebertscore_s_f3-1": 0.8194392919540405,
        "codebertscore_s_f1-10": 0.8151770830154419,
        "codebertscore_s_f3-10": 0.807766854763031,
        "codebertscore_s_f1-17": 0.8000581860542297,
        "codebertscore_s_f3-17": 0.7946121692657471,
        "codebertscore_s_f1-12": 0.8407797813415527,
        "codebertscore_s_f3-12": 0.8237246870994568,
        "codebertscore_s_f1-6": 0.7820987701416016,
        "codebertscore_s_f3-6": 0.7671298980712891,
        "codebertscore_s_f1-18": 0.8013980984687805,
        "codebertscore_s_f3-18": 0.7973678708076477,
        "codebertscore_s_f1-15": 0.8164791464805603,
        "codebertscore_s_f3-15": 0.8088551163673401,
        "codebertscore_s_f1-13": 0.0,
        "codebertscore_s_f3-13": 0.0,
        "codebertscore_s_f1-9": 0.810314416885376,
        "codebertscore_s_f3-9": 0.8021172881126404,
        "codebertscore_s_f1-4": 0.8117275238037109,
        "codebertscore_s_f3-4": 0.7938247323036194,
        "codebertscore_s_f1-14": 0.8295507431030273,
        "codebertscore_s_f3-14": 0.8256193995475769,
        "codebertscore_s_f1-5": 0.8159035444259644,
        "codebertscore_s_f3-5": 0.8113402128219604,
        "codebertscore_s_f1-19": 0.8266578912734985,
        "codebertscore_s_f3-19": 0.8301218152046204,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 0,
        "raw_gpt35_nswr-13": "Score: 2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nfunction split_words(txt){\n",
        "snippet": [
            "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n"
        ],
        "simplified": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
        "task_id": "125",
        "3": "if (/\\s/.test(txt)) {\n        let res = txt.split(\" \");\n        return res;\n    } else if (/\\,/.test(txt)) {\n        let res = txt.split(\",\");\n        return res;\n    } else {\n        let count = 0;\n        let arr = [...txt];\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i].charCodeAt(0) % 2 !== 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(txt.match(/\\s/g)){\n        return txt.split(\" \");\n    }else if(txt.match(/\\,/g)){\n        return txt.split(\",\");\n    }else{\n        let count = 0;\n        for(let i = 1; i < txt.length; i+=2){\n            if(txt[i] == txt[i].toLowerCase()){\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let f = txt.split(\" \");\n    let l = txt.split(\",\");\n    if(txt.indexOf(\" \") > -1) {\n        return f;\n    } else if(txt.indexOf(\",\") > -1) {\n        return l;\n    } else {\n        let x = 0;\n        for(let i = 0; i < txt.length; i++) {\n            if(i % 2 != 0) {\n                x++;\n            }\n        }\n        return x;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return txt.includes(\" \") ? txt.split(\" \") : txt.includes(\",\") ? txt.split(\",\") : txt.match(/[a-z]/g).filter((v,i) => i % 2 !== 0).length\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let result = [];\n    if (txt.match(/\\s/)){\n        result = txt.split(/\\s/);\n    } else if (txt.match(/,/)){\n        result = txt.split(/,/);\n    } else {\n        let counter = 0;\n        for (let i = 0; i < txt.length; i++) {\n            if (i % 2 === 0 && txt[i] === txt[i].toLowerCase()){\n                counter ++;\n            }\n        }\n        result = counter;\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(txt.indexOf(\" \") !== -1){\n        return txt.split(\" \");\n    }\n    if(txt.indexOf(\",\") !== -1){\n        return txt.split(\",\");\n    }\n    return txt.split(\"\").filter(x => \"abcdefghijklmnopqrstuvwxyz\".indexOf(x) % 2 == 1).length;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }else {\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var res = [];\n    var txta = txt.split(\" \");\n    var txtb = txt.split(\",\");\n    if(txta.length == 1){\n        if(txtb.length == 1){\n            return Math.floor(txt.length/2);\n        }\n        return txtb;\n    }\n    return txta;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "const obj = {\n        arr: txt.split(''),\n        alphabeth: \"abcdefghijklmnopqrstuvwxyz\".split(''),\n        res: []\n    }\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    for(let i = 0; i < obj.arr.length; i++){\n        let char = obj.arr[i];\n        if(obj.alphabeth.indexOf(char) % 2 !== 0){\n            obj.res.push(char);\n        }\n    }\n    return obj.res.length;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(txt.includes(' ')){\n        return txt.split(' ');\n    }else if(txt.includes(',')){\n        return txt.split(',');\n    }else{\n        let count = 0;\n        let txtArr = txt.split('');\n        for(let i = 0; i < txtArr.length; i++){\n            if(i % 2 != 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let words = /[a-z]+/gi.exec(txt);\n   console.log(words);\n   if(words === null){\n       let letters = [];\n       for(let i = 0; i < txt.length; i++){\n           let num = txt.charCodeAt(i);\n           if(num >= 97 && num <= 122){\n               letters.push(txt[i]);\n           }\n       }\n       let total = 0;\n       for(let i = 0; i < letters.length; i++){\n           if(letters[i].charCodeAt(0) % 2 != 0){\n               total++;\n           }\n       }\n       return total;\n   }\n   let split = txt.split(\" \");\n   console.log(split);\n   let arr = [];\n   for(let i = 0; i < split.length; i++){\n       if(split[i] !== \"\"){\n           arr.push(split[i]);\n       }\n   }\n   return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let words = txt.split(',');\n    if(words.length == 1){\n        let letterCount = 0;\n        let index = 0;\n        while(index < txt.length){\n            if(txt.charCodeAt(index) - 97 % 2 == 1){\n                letterCount++;\n            }\n            index++;\n        }\n        return letterCount;\n    }else{\n        return words;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (txt.includes(' ')) {\n        return txt.split(' ');\n    }\n    else if (txt.includes(',')) {\n        return txt.split(',');\n    }\n    else {\n        return [...txt].filter(x => 'abcdefghijklmnopqrstuvwxyz'.indexOf(x) % 2 !== 0).length;\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let arr = txt.split(',');\n    if(arr.length == 1){\n        arr = txt.split(' ');\n        if(arr.length == 1){\n            let count = 0;\n            for(let i = 0; i < txt.length; i++){\n                if(i % 2 == 0 && txt[i] == txt[i].toLowerCase()){\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (txt.includes(\" \")){\n        return txt.split(\" \")\n    }\n    else if (txt.includes(\",\")){\n        return txt.split(\",\")\n    }\n    else {\n        let charCount = 0\n        for (let i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i) % 2 === 1){\n                charCount += 1\n            }\n        }\n        return charCount\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let temp = [];\n    if(txt.indexOf(' ') > -1){\n        temp = txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        temp = txt.split(',');\n    }\n    else{\n        let sum = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(i % 2 == 1){\n                sum += txt.charCodeAt(i) - 97;\n            }\n        }\n        temp.push(sum);\n    }\n    return temp;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(txt.includes(' ')){\n        return txt.split(' ');\n    }else if(txt.includes(',')){\n        return txt.split(',');\n    }else{\n        let new_txt = txt.toLowerCase();\n        let char_count = 0;\n        for(let i = 0; i < new_txt.length; i++){\n            if(i % 2 !== 0){\n                char_count++;\n            }\n        }\n        return char_count;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "const arr = txt.split(/[\\s,]/);\n    if(arr.length === 1){\n        const value = txt.split('').reduce((acc, current, index) => {\n            if(index % 2){\n                acc++;\n            }\n            return acc;\n        }, 0);\n        return value;\n    }\n    return arr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let result = [];\n    if (txt.includes(' ')){\n        result = txt.split(' ');\n    }\n    else if (txt.includes(',')){\n        result = txt.split(',');\n    }\n    else {\n        let count = 0;\n        for (let index in txt){\n            if (txt[index].toLowerCase().charCodeAt(0) % 2 == 1){\n                count++;\n            }\n        }\n        result = count;\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(txt.indexOf(\" \") != -1){\n        return txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return txt.split(\",\");\n    }\n    else{\n        var counter = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n                counter++;\n            }\n        }\n        return counter;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.36688036778118926,
        "bleu-0": 0.3090298963249707,
        "bleu-8": 0.3453348806162025,
        "bleu-7": 0.07401316775683758,
        "bleu-16": 0.4029951469172229,
        "bleu-2": 0.13062965037127838,
        "bleu-11": 0.30188260606015066,
        "bleu-1": 0.11293001627993265,
        "bleu-10": 0.22991199139522986,
        "bleu-17": 0.2951538727418682,
        "bleu-12": 0.2147541364271635,
        "bleu-6": 0.1708041927856837,
        "bleu-18": 0.1127348384468068,
        "bleu-15": 0.3669205391009591,
        "bleu-13": 0.3470866874060469,
        "bleu-9": 0.3331086781855698,
        "bleu-4": 0.2930485485675925,
        "bleu-14": 0.11761130085657909,
        "bleu-5": 0.2094214288544508,
        "bleu-19": 0.3169263979969127,
        "codebleu-3": 0.6168085590916467,
        "codebleu-0": 0.540672442809234,
        "codebleu-8": 0.5571052940241057,
        "codebleu-7": 0.26144784687543393,
        "codebleu-16": 0.6566498899147599,
        "codebleu-2": 0.33106498568770193,
        "codebleu-11": 0.48489249267790907,
        "codebleu-1": 0.32201278237590303,
        "codebleu-10": 0.5271862990069152,
        "codebleu-17": 0.5016476474666124,
        "codebleu-12": 0.6152599154526701,
        "codebleu-6": 0.37739055158489004,
        "codebleu-18": 0.33146144087232843,
        "codebleu-15": 0.5668218317859596,
        "codebleu-13": 0.4948509733912942,
        "codebleu-9": 0.576693520863438,
        "codebleu-4": 0.5214554685040305,
        "codebleu-14": 0.35777292812821265,
        "codebleu-5": 0.49081420249318425,
        "codebleu-19": 0.5045294543974941,
        "chrf-3": 0.4727050849862217,
        "chrf-0": 0.4468806168239785,
        "chrf-8": 0.4566336092144684,
        "chrf-7": 0.21569188022497754,
        "chrf-16": 0.4763750275659448,
        "chrf-2": 0.30649776392261796,
        "chrf-11": 0.44064770678940257,
        "chrf-1": 0.3440447189815508,
        "chrf-10": 0.38992084905900515,
        "chrf-17": 0.44027612747552164,
        "chrf-12": 0.44950044954133905,
        "chrf-6": 0.36491587363563016,
        "chrf-18": 0.3195579631828629,
        "chrf-15": 0.45051022444088945,
        "chrf-13": 0.492223867768026,
        "chrf-9": 0.453609228501054,
        "chrf-4": 0.4422726814758836,
        "chrf-14": 0.2655162768438666,
        "chrf-5": 0.37440351347199846,
        "chrf-19": 0.4425681938065522,
        "rougel-3": 0.5454545454545455,
        "rougel-0": 0.5535714285714285,
        "rougel-8": 0.5840707964601769,
        "rougel-7": 0.3010752688172043,
        "rougel-16": 0.5327868852459017,
        "rougel-2": 0.33980582524271846,
        "rougel-11": 0.5648148148148148,
        "rougel-1": 0.35294117647058826,
        "rougel-10": 0.4615384615384615,
        "rougel-17": 0.5158371040723981,
        "rougel-12": 0.39169139465875363,
        "rougel-6": 0.49751243781094534,
        "rougel-18": 0.35353535353535354,
        "rougel-15": 0.5866666666666667,
        "rougel-13": 0.5674418604651164,
        "rougel-9": 0.4979253112033195,
        "rougel-4": 0.5181818181818182,
        "rougel-14": 0.41025641025641024,
        "rougel-5": 0.46017699115044247,
        "rougel-19": 0.5511111111111111,
        "meteor-3": 0.586551740444291,
        "meteor-0": 0.49877937780983,
        "meteor-8": 0.48495152950543763,
        "meteor-7": 0.2707972416558934,
        "meteor-16": 0.5580832399495729,
        "meteor-2": 0.29172244081601606,
        "meteor-11": 0.5021075445237937,
        "meteor-1": 0.2718860195903829,
        "meteor-10": 0.4100581871544605,
        "meteor-17": 0.4463914483774106,
        "meteor-12": 0.510847569188185,
        "meteor-6": 0.441047602312528,
        "meteor-18": 0.3044054666814843,
        "meteor-15": 0.5834206597724669,
        "meteor-13": 0.4847958297132928,
        "meteor-9": 0.4564516231375198,
        "meteor-4": 0.47631252936904606,
        "meteor-14": 0.30361488041738827,
        "meteor-5": 0.3985859722985922,
        "meteor-19": 0.5065349762081378,
        "ruby-3": 0.33599999999999997,
        "ruby-0": 0.4017094017094017,
        "ruby-8": 0.36752136752136755,
        "ruby-7": 0.20512820512820518,
        "ruby-16": 0.3779527559055118,
        "ruby-2": 0.23076923076923073,
        "ruby-11": 0.4358974358974359,
        "ruby-1": 0.23076923076923073,
        "ruby-10": 0.3076923076923077,
        "ruby-17": 0.3076923076923077,
        "ruby-12": 0.2545454545454545,
        "ruby-6": 0.29059829059829057,
        "ruby-18": 0.24786324786324787,
        "ruby-15": 0.4273504273504274,
        "ruby-13": 0.4273504273504274,
        "ruby-9": 0.29032258064516125,
        "ruby-4": 0.3162393162393162,
        "ruby-14": 0.23931623931623935,
        "ruby-5": 0.2649572649572649,
        "ruby-19": 0.3589743589743589,
        "codebertscore_f1-3": 0.8602965474128723,
        "codebertscore_f3-3": 0.8521894216537476,
        "codebertscore_f1-0": 0.8520765900611877,
        "codebertscore_f3-0": 0.8394774794578552,
        "codebertscore_f1-8": 0.8543394804000854,
        "codebertscore_f3-8": 0.8394622802734375,
        "codebertscore_f1-7": 0.7550260424613953,
        "codebertscore_f3-7": 0.7195125222206116,
        "codebertscore_f1-16": 0.8797216415405273,
        "codebertscore_f3-16": 0.8698501586914062,
        "codebertscore_f1-2": 0.7244419455528259,
        "codebertscore_f3-2": 0.7330983281135559,
        "codebertscore_f1-11": 0.8644034266471863,
        "codebertscore_f3-11": 0.8384180665016174,
        "codebertscore_f1-1": 0.7788083553314209,
        "codebertscore_f3-1": 0.7501373291015625,
        "codebertscore_f1-10": 0.7645081281661987,
        "codebertscore_f3-10": 0.7876266837120056,
        "codebertscore_f1-17": 0.8494721055030823,
        "codebertscore_f3-17": 0.824834406375885,
        "codebertscore_f1-12": 0.814091682434082,
        "codebertscore_f3-12": 0.829499363899231,
        "codebertscore_f1-6": 0.8294467329978943,
        "codebertscore_f3-6": 0.8183352947235107,
        "codebertscore_f1-18": 0.7307677865028381,
        "codebertscore_f3-18": 0.7406091094017029,
        "codebertscore_f1-15": 0.8764367699623108,
        "codebertscore_f3-15": 0.8513196110725403,
        "codebertscore_f1-13": 0.8644149899482727,
        "codebertscore_f3-13": 0.8464331030845642,
        "codebertscore_f1-9": 0.8490318655967712,
        "codebertscore_f3-9": 0.844791054725647,
        "codebertscore_f1-4": 0.8381289839744568,
        "codebertscore_f3-4": 0.8226528763771057,
        "codebertscore_f1-14": 0.806825578212738,
        "codebertscore_f3-14": 0.7891915440559387,
        "codebertscore_f1-5": 0.8338974118232727,
        "codebertscore_f3-5": 0.8195661306381226,
        "codebertscore_f1-19": 0.8502712249755859,
        "codebertscore_f3-19": 0.8387790322303772,
        "codebertscore_s_f1-3": 0.9176701903343201,
        "codebertscore_s_f3-3": 0.9109777212142944,
        "codebertscore_s_f1-0": 0.9141280055046082,
        "codebertscore_s_f3-0": 0.9026113748550415,
        "codebertscore_s_f1-8": 0.9153674244880676,
        "codebertscore_s_f3-8": 0.9017807841300964,
        "codebertscore_s_f1-7": 0.8683437705039978,
        "codebertscore_s_f3-7": 0.8303468823432922,
        "codebertscore_s_f1-16": 0.9251406192779541,
        "codebertscore_s_f3-16": 0.9182094931602478,
        "codebertscore_s_f1-2": 0.8459239602088928,
        "codebertscore_s_f3-2": 0.8351515531539917,
        "codebertscore_s_f1-11": 0.9211822748184204,
        "codebertscore_s_f3-11": 0.9005454182624817,
        "codebertscore_s_f1-1": 0.8677045106887817,
        "codebertscore_s_f3-1": 0.8415489196777344,
        "codebertscore_s_f1-10": 0.8564864993095398,
        "codebertscore_s_f3-10": 0.8681036829948425,
        "codebertscore_s_f1-17": 0.9121948480606079,
        "codebertscore_s_f3-17": 0.8937098383903503,
        "codebertscore_s_f1-12": 0.8757027983665466,
        "codebertscore_s_f3-12": 0.8917088508605957,
        "codebertscore_s_f1-6": 0.9005759358406067,
        "codebertscore_s_f3-6": 0.888316810131073,
        "codebertscore_s_f1-18": 0.8557881116867065,
        "codebertscore_s_f3-18": 0.8415549397468567,
        "codebertscore_s_f1-15": 0.9253188967704773,
        "codebertscore_s_f3-15": 0.9081860184669495,
        "codebertscore_s_f1-13": 0.9167727828025818,
        "codebertscore_s_f3-13": 0.901934027671814,
        "codebertscore_s_f1-9": 0.9089798331260681,
        "codebertscore_s_f3-9": 0.9049669504165649,
        "codebertscore_s_f1-4": 0.9041321277618408,
        "codebertscore_s_f3-4": 0.8915507793426514,
        "codebertscore_s_f1-14": 0.89169842004776,
        "codebertscore_s_f3-14": 0.8716766834259033,
        "codebertscore_s_f1-5": 0.9015708565711975,
        "codebertscore_s_f3-5": 0.8875139355659485,
        "codebertscore_s_f1-19": 0.9125066995620728,
        "codebertscore_s_f3-19": 0.9005588293075562,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n",
        "snippet": [
            "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n"
        ],
        "simplified": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
        "task_id": "88",
        "3": "if (array.length == 0) {return array}\n  else if (array.length == 1) {return array}\n  else if (array.length % 2 == 0) {\n    var first = array[0];\n    var last = array[array.length - 1];\n    var array_odd = [];\n    var array_even = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] % 2 == 0) {\n        array_even.push(array[i]);\n      }\n      else {\n        array_odd.push(array[i]);\n      }\n    }\n    array_even.sort(function(a, b){return a-b});\n    array_odd.sort(function(a, b){return b-a});\n    var array_sorted = [];\n    var count = 0;\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] % 2 == 0) {\n        array_sorted.push(array_even[count]);\n        count += 1;\n      }\n      else {\n        array_sorted.push(array_odd[count]);\n        count += 1;\n      }\n    }\n    array_sorted.splice(0, 1, first);\n    array_sorted.splice(array_sorted.length - 1, 1, last);\n    return array_sorted;\n  }\n  else {\n    var first = array[0];\n    var last = array[array.length - 1];\n    var array_odd = [];\n    var array_even = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] % 2 == 0) {\n        array_even.push(array[i]);\n      }\n      else {\n        array_odd.push(array[i]);\n      }\n    }\n    array_even.sort(function(a, b){return b-a});\n    array_odd.sort(function(a, b){return a-b});\n    var array_sorted = [];\n    var count = 0;\n    for (var i",
        "grade-3": {
            "execution": 0
        },
        "0": "if (array.length == 0) {\n        return array;\n    }\n    if (array.length == 1) {\n        return array;\n    }\n    if (array.length % 2 == 0) {\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let first = array[0];\n    let last = array[array.length - 1];\n    let newArray = [];\n    if ((first + last) % 2 !== 0) {\n        newArray = array.sort(function(a, b){return a - b});\n    } else {\n        newArray = array.sort(function(a, b){return b - a});\n    }\n    return newArray;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if(array.length <= 1) return array;\n  return array.slice(0,1).concat(array.slice(array.length-1,array.length),array.slice(1,array.length-1)).sort((a,b)=>(a+b)%2?1:-1);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "}",
        "grade-16": {
            "execution": 0
        },
        "2": "let sum = array[0] + array[array.length - 1];\n    let sorted;\n    if (sum % 2 === 0) {\n        sorted = array.sort(function(a, b){return b - a});\n    } else {\n        sorted = array.sort(function(a, b){return a - b});\n    }\n    return sorted;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return array.map((x, i) => (i+1) % 2 === (array[0] + array[array.length-1]) % 2 ? x : x * -1).sort((a, b) => a - b).map((x, i) => (i+1) % 2 === (array[0] + array[array.length-1]) % 2 ? x : x * -1);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let firstIndex = array[0];\n    let lastIndex = array[array.length - 1];\n    let sumOfFirstAndLastIndex = firstIndex + lastIndex;\n    let sortedArray = [];\n    if (sumOfFirstAndLastIndex % 2 === 0) {\n        sortedArray = array.sort((a, b) => {\n            return b - a;\n        });\n    } else {\n        sortedArray = array.sort((a, b) => {\n            return a - b;\n        });\n    }\n    return sortedArray;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var i = 0;\n    var j = array.length-1;\n    var temp;\n    if(array.length==0){\n        return array;\n    }else if(array.length==1){\n        return array;\n    }else if((array[i]+array[j])%2!=0){\n        //ascending\n        for(var m=0;m<array.length;m++){\n            for(var n=m+1;n<array.length;n++){\n                if(array[m]>array[n]){\n                    temp = array[m];\n                    array[m] = array[n];\n                    array[n] = temp;\n                }\n            }\n        }\n        return array;\n    }else{\n        //descending\n        for(var m=0;m<array.length;m++){\n            for(var n=m+1;n<array.length;n++){\n                if(array[m]<array[n]){\n                    temp = array[m];\n                    array[m] = array[n];\n                    array[n] = temp;\n                }\n            }\n        }\n        return array;\n    }\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = array[0] + array[array.length - 1];\n    let arr = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return arr;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(array.length == 0 || array.length == 1) return array;\n    return (array[0] + array[array.length - 1]) % 2 != 0 ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if (array.length === 0 || array.length === 1) {\n        return array;\n    } else {\n        let arr = [];\n        let even = [];\n        let odd = [];\n        for (let i = 0; i < array.length; i++) {\n            if (array[i] % 2 !== 0) {\n                odd.push(array[i]);\n            } else {\n                even.push(array[i]);\n            }\n        }\n        odd.sort((a, b) => a - b);\n        even.sort((a, b) => b - a);\n        if (array[0] % 2 !== 0) {\n            arr = odd.concat(even);\n        } else {\n            arr = even.concat(odd);\n        }\n        return arr;\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var sum = array[0] + array[array.length - 1];\n  if (sum % 2 == 0) {\n    return array.sort(function(a, b){return b - a});\n  } else {\n    return array.sort(function(a, b){return a - b});\n  }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort(function(a, b) {\n      return b - a;\n    });\n  } else {\n    return array.sort(function(a, b) {\n      return a - b;\n    });\n  }\n}\nsort_array([2, 4, 3, 0, 1, 5, 6]);",
        "grade-13": {
            "execution": 1
        },
        "9": "var sum = 0;\n    var array_length = array.length;\n    var i = 0;\n    while(i<array_length){\n        sum += array[i];\n        i++;\n    }\n    if(sum%2===0){\n        array.sort(function(a,b){\n            return b-a;\n        });\n    }else{\n        array.sort(function(a,b){\n            return a-b;\n        });\n    }\n    return array;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(array.length<=1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum%2===0){\n    return array.sort((a,b)=>b-a);\n  }\n  return array.sort((a,b)=>a-b);\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let result = [];\n    if(!array.length){\n        return array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0){\n        result = array.sort(function(a, b){\n            return b - a;\n        });\n    }\n    else{\n        result = array.sort(function(a, b){\n            return a - b;\n        });\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(array.length == 0 || array.length == 1) return array;\n    let first = array[0];\n    let last = array[array.length - 1];\n    if(sum(first, last) % 2 == 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let oddEven = array.length > 0 ? array[0] + array[array.length - 1] : 0;\n    if (oddEven % 2 == 0) {\n        return array.sort((a, b) => a < b ? 1 : -1);\n    } else {\n        return array.sort((a, b) => a > b ? 1 : -1);\n    }\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.06551908648740412,
        "bleu-0": 0.05241068021280746,
        "bleu-8": 0.06774176745776503,
        "bleu-7": 0.031032489594053695,
        "bleu-16": 8.628801156620962e-60,
        "bleu-2": 0.07943729903290549,
        "bleu-11": 0.10234626859070638,
        "bleu-1": 0.06832361431497067,
        "bleu-10": 0.08546762634816962,
        "bleu-17": 0.09662943992050063,
        "bleu-12": 0.07722732092542121,
        "bleu-6": 0.06891162573598396,
        "bleu-18": 0.10210461866975719,
        "bleu-15": 0.07244503383050345,
        "bleu-13": 0.08901902476666758,
        "bleu-9": 0.053582174090313385,
        "bleu-4": 0.07779998766251098,
        "bleu-14": 0.10941084678086437,
        "bleu-5": 0.09487599870194609,
        "bleu-19": 0.08918216619534673,
        "codebleu-3": 0.636731107924486,
        "codebleu-0": 0.24162612990800855,
        "codebleu-8": 0.34607106472816956,
        "codebleu-7": 0.2226524825449711,
        "codebleu-16": 0.0035087719298245606,
        "codebleu-2": 0.32971103578853844,
        "codebleu-11": 0.3435635176461271,
        "codebleu-1": 0.2829654754615143,
        "codebleu-10": 0.3914123671810232,
        "codebleu-17": 0.6359879475890893,
        "codebleu-12": 0.28395575929888567,
        "codebleu-6": 0.2718320055963182,
        "codebleu-18": 0.5709562049348116,
        "codebleu-15": 0.27818432184637426,
        "codebleu-13": 0.34413655974428775,
        "codebleu-9": 0.3345683557019092,
        "codebleu-4": 0.2919598949671481,
        "codebleu-14": 0.4002977725360515,
        "codebleu-5": 0.350474878294823,
        "codebleu-19": 0.3117346836217432,
        "chrf-3": 0.21923748999818934,
        "chrf-0": 0.21109443369999975,
        "chrf-8": 0.21208826259176283,
        "chrf-7": 0.19404283489619759,
        "chrf-16": 0.0054288816503800215,
        "chrf-2": 0.2111557446547338,
        "chrf-11": 0.19914515436011943,
        "chrf-1": 0.19304841317945287,
        "chrf-10": 0.2200481178844697,
        "chrf-17": 0.3063043530646713,
        "chrf-12": 0.2157328838097153,
        "chrf-6": 0.22259881155035713,
        "chrf-18": 0.29191349495181745,
        "chrf-15": 0.19598790356533674,
        "chrf-13": 0.20562565355686563,
        "chrf-9": 0.22364969393354583,
        "chrf-4": 0.21735333488138442,
        "chrf-14": 0.27257239288613594,
        "chrf-5": 0.24906568541552251,
        "chrf-19": 0.21589892526406554,
        "rougel-3": 0.25136612021857924,
        "rougel-0": 0.25352112676056343,
        "rougel-8": 0.29565217391304344,
        "rougel-7": 0.21495327102803735,
        "rougel-16": 0.014492753623188404,
        "rougel-2": 0.3055555555555556,
        "rougel-11": 0.2775510204081633,
        "rougel-1": 0.33497536945812806,
        "rougel-10": 0.2868525896414343,
        "rougel-17": 0.35013262599469497,
        "rougel-12": 0.3482587064676617,
        "rougel-6": 0.2452830188679245,
        "rougel-18": 0.33440514469453375,
        "rougel-15": 0.2608695652173913,
        "rougel-13": 0.26200873362445415,
        "rougel-9": 0.2597402597402597,
        "rougel-4": 0.27230046948356806,
        "rougel-14": 0.2764227642276423,
        "rougel-5": 0.26839826839826836,
        "rougel-19": 0.2780269058295964,
        "meteor-3": 0.3013220306896226,
        "meteor-0": 0.2137698176913863,
        "meteor-8": 0.21405649178903804,
        "meteor-7": 0.15135106579677224,
        "meteor-16": 0.004051863857374392,
        "meteor-2": 0.21897951564896737,
        "meteor-11": 0.23148183985910314,
        "meteor-1": 0.21541546678831766,
        "meteor-10": 0.26059697921072006,
        "meteor-17": 0.4192413666539616,
        "meteor-12": 0.23307957598288073,
        "meteor-6": 0.19394986219654917,
        "meteor-18": 0.3634637710809328,
        "meteor-15": 0.18697335723568398,
        "meteor-13": 0.21421804385831283,
        "meteor-9": 0.2415867503071058,
        "meteor-4": 0.21561962853323144,
        "meteor-14": 0.24041157539767027,
        "meteor-5": 0.2431291139289175,
        "meteor-19": 0.19309300237974897,
        "ruby-3": 0.1601941747572816,
        "ruby-0": 0.16058394160583944,
        "ruby-8": 0.16058394160583944,
        "ruby-7": 0.12408759124087587,
        "ruby-16": 0.007299270072992692,
        "ruby-2": 0.2043795620437956,
        "ruby-11": 0.13138686131386856,
        "ruby-1": 0.2043795620437956,
        "ruby-10": 0.16058394160583944,
        "ruby-17": 0.22916666666666663,
        "ruby-12": 0.21897810218978098,
        "ruby-6": 0.16058394160583944,
        "ruby-18": 0.22988505747126442,
        "ruby-15": 0.17518248175182483,
        "ruby-13": 0.18248175182481752,
        "ruby-9": 0.17518248175182483,
        "ruby-4": 0.16058394160583944,
        "ruby-14": 0.17518248175182483,
        "ruby-5": 0.16788321167883213,
        "ruby-19": 0.17518248175182483,
        "codebertscore_f1-3": 0.7273369431495667,
        "codebertscore_f3-3": 0.7664629220962524,
        "codebertscore_f1-0": 0.7607208490371704,
        "codebertscore_f3-0": 0.7415094971656799,
        "codebertscore_f1-8": 0.7799457907676697,
        "codebertscore_f3-8": 0.7803105711936951,
        "codebertscore_f1-7": 0.7495161294937134,
        "codebertscore_f3-7": 0.7251149415969849,
        "codebertscore_f1-16": 0.0,
        "codebertscore_f3-16": 0.0,
        "codebertscore_f1-2": 0.7802045345306396,
        "codebertscore_f3-2": 0.7785966396331787,
        "codebertscore_f1-11": 0.7536752223968506,
        "codebertscore_f3-11": 0.7420806884765625,
        "codebertscore_f1-1": 0.7838127017021179,
        "codebertscore_f3-1": 0.7735161185264587,
        "codebertscore_f1-10": 0.7671600580215454,
        "codebertscore_f3-10": 0.7799423933029175,
        "codebertscore_f1-17": 0.7725580930709839,
        "codebertscore_f3-17": 0.7824505567550659,
        "codebertscore_f1-12": 0.7976243495941162,
        "codebertscore_f3-12": 0.7833952307701111,
        "codebertscore_f1-6": 0.763067364692688,
        "codebertscore_f3-6": 0.7436483502388,
        "codebertscore_f1-18": 0.7645002603530884,
        "codebertscore_f3-18": 0.7828472256660461,
        "codebertscore_f1-15": 0.762632429599762,
        "codebertscore_f3-15": 0.7557685375213623,
        "codebertscore_f1-13": 0.7669684290885925,
        "codebertscore_f3-13": 0.7667277455329895,
        "codebertscore_f1-9": 0.7741672396659851,
        "codebertscore_f3-9": 0.773059070110321,
        "codebertscore_f1-4": 0.7781726717948914,
        "codebertscore_f3-4": 0.7649053335189819,
        "codebertscore_f1-14": 0.7866817116737366,
        "codebertscore_f3-14": 0.7835075259208679,
        "codebertscore_f1-5": 0.7784811854362488,
        "codebertscore_f3-5": 0.7720308899879456,
        "codebertscore_f1-19": 0.7773958444595337,
        "codebertscore_f3-19": 0.7682074308395386,
        "codebertscore_s_f1-3": 0.7657389044761658,
        "codebertscore_s_f3-3": 0.7977374196052551,
        "codebertscore_s_f1-0": 0.7645463943481445,
        "codebertscore_s_f3-0": 0.7450695633888245,
        "codebertscore_s_f1-8": 0.7825083136558533,
        "codebertscore_s_f3-8": 0.7857913970947266,
        "codebertscore_s_f1-7": 0.7593061923980713,
        "codebertscore_s_f3-7": 0.7343917489051819,
        "codebertscore_s_f1-16": 0.0,
        "codebertscore_s_f3-16": 0.0,
        "codebertscore_s_f1-2": 0.7882868647575378,
        "codebertscore_s_f3-2": 0.7872992753982544,
        "codebertscore_s_f1-11": 0.7692800760269165,
        "codebertscore_s_f3-11": 0.7574406266212463,
        "codebertscore_s_f1-1": 0.7960460186004639,
        "codebertscore_s_f3-1": 0.7854970693588257,
        "codebertscore_s_f1-10": 0.7724717855453491,
        "codebertscore_s_f3-10": 0.7854700088500977,
        "codebertscore_s_f1-17": 0.8078690767288208,
        "codebertscore_s_f3-17": 0.8123388290405273,
        "codebertscore_s_f1-12": 0.8075796365737915,
        "codebertscore_s_f3-12": 0.7922714352607727,
        "codebertscore_s_f1-6": 0.7739366292953491,
        "codebertscore_s_f3-6": 0.753212034702301,
        "codebertscore_s_f1-18": 0.7795767188072205,
        "codebertscore_s_f3-18": 0.7923645377159119,
        "codebertscore_s_f1-15": 0.7770316004753113,
        "codebertscore_s_f3-15": 0.7694960832595825,
        "codebertscore_s_f1-13": 0.7720508575439453,
        "codebertscore_s_f3-13": 0.7773516774177551,
        "codebertscore_s_f1-9": 0.7759469151496887,
        "codebertscore_s_f3-9": 0.7810481786727905,
        "codebertscore_s_f1-4": 0.78934246301651,
        "codebertscore_s_f3-4": 0.7766762375831604,
        "codebertscore_s_f1-14": 0.785676896572113,
        "codebertscore_s_f3-14": 0.7866578102111816,
        "codebertscore_s_f1-5": 0.7822162508964539,
        "codebertscore_s_f3-5": 0.7769585847854614,
        "codebertscore_s_f1-19": 0.78586345911026,
        "codebertscore_s_f3-19": 0.7796844840049744,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 0,
        "raw_gpt35_nsnr-16": "3 - The code snippet correctly sorts the given array in ascending or descending order based on the sum of the first and last index values. However, it does not return a copy of the given array, but rather modifies the original array.",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n",
        "snippet": [
            "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
        "task_id": "143",
        "3": "let words = sentence.split(' ');\n  let prime_word = '';\n  for(let i = 0; i < words.length; i++){\n    if(is_prime(words[i].length)){\n      prime_word += words[i] + ' ';\n    }\n  }\n  return prime_word.trim();\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return sentence.split(' ').filter(word => is_prime(word.length)).join(' ');\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var words = sentence.split(\" \");\n    var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(prime(words[i].length)){\n            result.push(words[i]);\n        }\n    }\n    return result.join(\" \");\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var words = sentence.split(\" \");\n    var r = [];\n    for(var i=0; i<words.length; i++){\n        if(is_prime(words[i].length)){\n            r.push(words[i]);\n        }\n    }\n    return r.join(\" \");\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var sent_arr = sentence.split(\" \");\n  var new_sent = [];\n  for(var word of sent_arr){\n    if(is_prime(word.length)){\n      new_sent.push(word);\n    }\n  }\n  return new_sent.join(\" \");\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var words = sentence.split(\" \");\n    var output = \"\";\n    for(var i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            output += words[i] + \" \";\n        }\n    }\n    return output.substring(0, output.length - 1);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var words = sentence.split(\" \");\n\tvar new_sentence = [];\n\tfor(var i = 0; i < words.length; i++){\n\t\tif(is_prime(words[i].length)){\n\t\t\tnew_sentence.push(words[i]);\n\t\t}\n\t}\n\treturn new_sentence.join(\" \");\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = [];\n    const words = sentence.split(' ');\n    for(let i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            result.push(words[i]);\n        }\n    }\n    return result.join(' ');\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// Your code here\n}\nwords_in_sentence(\"lets go for swimming\")",
        "grade-10": {
            "execution": 0
        },
        "17": "var result = '';\n    var words = sentence.split(' ');\n    for(var i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n    return result.trim();\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let newSentence = \"\";\n    let sentenceArr = sentence.split(\" \");\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(let i = 0; i < sentenceArr.length; i++){\n        for(let j = 0; j < primeNumbers.length; j++){\n            if(sentenceArr[i].length === primeNumbers[j]){\n                newSentence += sentenceArr[i] + \" \";\n            }\n        }\n    }\n    return newSentence;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return sentence.split(' ').filter(w => is_prime(w.length)).join(' ');\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let words = sentence.split(' ');\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    let prime_words = [];\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        if(primes.includes(word.length)) prime_words.push(word);\n    }\n    return prime_words.join(' ');\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "const words = sentence.split(' ')\n  const prime_words = words.filter(word => is_prime(word.length))\n  return prime_words.join(' ')\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let new_sentence = '';\n    let word_list = sentence.split(' ');\n    for(let i = 0; i < word_list.length; i++){\n        if(is_prime(word_list[i].length)){\n            new_sentence += word_list[i];\n            new_sentence += ' ';\n        }\n    }\n    return new_sentence.trim();\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let is_prime = [false, false];\n    for(let i = 2; i < 101; i++){\n        is_prime[i] = true;\n    }\n    for(let i = 2; i < 101; i++){\n        if(is_prime[i]){\n            for(let j = i * i; j < 101; j += i){\n                is_prime[j] = false;\n            }\n        }\n    }\n    let result = [];\n    for(let i = 0; i < sentence.length; i++){\n        if(sentence[i] !== ' '){\n            let word = '';\n            while(i < sentence.length && sentence[i] !== ' '){\n                word += sentence[i];\n                i++;\n            }\n            if(is_prime[word.length]){\n                result.push(word);\n            }\n        }\n    }\n    return result.join(' ');\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let words = sentence.split(' ');\n    let is_prime = word => word.length === 1 || word.length === 2;\n    let answer = '';\n    for(let i = 0; i < words.length; i++){\n        if(is_prime(words[i])){\n            answer += words[i] + ' ';\n        }\n    }\n    return answer.trim();\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var sentence_arr = sentence.split(\" \");\n    var answer = [];\n    var prime_num = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(var i = 0; i < sentence_arr.length; i++){\n        if(prime_num.includes(sentence_arr[i].length)){\n            answer.push(sentence_arr[i]);\n        }\n    }\n    return answer.join(\" \");\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let res = [];\n    let words = sentence.split(\" \");\n    for(let i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            res.push(words[i]);\n        }\n    }\n    return res.join(\" \");\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let res = [];\n    sentence.split(' ').forEach(v => {\n        if(is_prime(v.length)){\n            res.push(v);\n        }\n    });\n    return res.join(' ');\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.12041271545161612,
        "bleu-0": 0.003198784277459351,
        "bleu-8": 0.09862837526953187,
        "bleu-7": 0.09862837526953187,
        "bleu-16": 0.03763904656756734,
        "bleu-2": 0.11572495241613912,
        "bleu-11": 0.09862837526953187,
        "bleu-1": 0.1132596833117458,
        "bleu-10": 1.368458030089558e-05,
        "bleu-17": 0.10445571270385619,
        "bleu-12": 0.2640995762753379,
        "bleu-6": 0.003198784277459351,
        "bleu-18": 0.14350452805515082,
        "bleu-15": 0.008943400019796276,
        "bleu-13": 0.12629983520460372,
        "bleu-9": 0.22219036764778619,
        "bleu-4": 0.18075713615354314,
        "bleu-14": 0.13675212028917708,
        "bleu-5": 0.11473023002781037,
        "bleu-19": 0.0217308772965725,
        "codebleu-3": 0.29887758319449664,
        "codebleu-0": 0.10659017177852069,
        "codebleu-8": 0.2913347690796342,
        "codebleu-7": 0.2913347690796342,
        "codebleu-16": 0.20954679505436,
        "codebleu-2": 0.31545925109475115,
        "codebleu-11": 0.2913347690796342,
        "codebleu-1": 0.29440275357132006,
        "codebleu-10": 0.03300530147996417,
        "codebleu-17": 0.2953016661060379,
        "codebleu-12": 0.48469137004502866,
        "codebleu-6": 0.10659017177852069,
        "codebleu-18": 0.3748986959837727,
        "codebleu-15": 0.1380217165429676,
        "codebleu-13": 0.30213462844456496,
        "codebleu-9": 0.5882944629104467,
        "codebleu-4": 0.38821816763213574,
        "codebleu-14": 0.3703987064912751,
        "codebleu-5": 0.29496256126632264,
        "codebleu-19": 0.18311367323574995,
        "chrf-3": 0.28615455345628693,
        "chrf-0": 0.14681770796350957,
        "chrf-8": 0.24445015533124193,
        "chrf-7": 0.23406243100060958,
        "chrf-16": 0.19531871997169736,
        "chrf-2": 0.25158210511556245,
        "chrf-11": 0.25313688127529443,
        "chrf-1": 0.2795337503074783,
        "chrf-10": 0.0727910515566823,
        "chrf-17": 0.25212170298649017,
        "chrf-12": 0.3348094116111115,
        "chrf-6": 0.14418843065409617,
        "chrf-18": 0.26591885008943367,
        "chrf-15": 0.1676597071288418,
        "chrf-13": 0.307056109131027,
        "chrf-9": 0.352113075525927,
        "chrf-4": 0.3002703680028386,
        "chrf-14": 0.2411666962074881,
        "chrf-5": 0.2693787022573366,
        "chrf-19": 0.17086569799126017,
        "rougel-3": 0.40375586854460094,
        "rougel-0": 0.20809248554913296,
        "rougel-8": 0.35514018691588783,
        "rougel-7": 0.35514018691588783,
        "rougel-16": 0.2828282828282829,
        "rougel-2": 0.36363636363636365,
        "rougel-11": 0.35514018691588783,
        "rougel-1": 0.3644859813084112,
        "rougel-10": 0.0880503144654088,
        "rougel-17": 0.3661971830985915,
        "rougel-12": 0.35690235690235694,
        "rougel-6": 0.20809248554913296,
        "rougel-18": 0.30036630036630035,
        "rougel-15": 0.22222222222222227,
        "rougel-13": 0.37962962962962965,
        "rougel-9": 0.4047619047619048,
        "rougel-4": 0.4444444444444444,
        "rougel-14": 0.2878228782287822,
        "rougel-5": 0.3644859813084112,
        "rougel-19": 0.2755102040816327,
        "meteor-3": 0.2968023850901378,
        "meteor-0": 0.10366443162326526,
        "meteor-8": 0.23840797578664294,
        "meteor-7": 0.23840797578664294,
        "meteor-16": 0.18067097568482607,
        "meteor-2": 0.2834882139110756,
        "meteor-11": 0.23840797578664294,
        "meteor-1": 0.25512655190187344,
        "meteor-10": 0.034324942791762014,
        "meteor-17": 0.26046801683165316,
        "meteor-12": 0.3640793791636738,
        "meteor-6": 0.10366443162326526,
        "meteor-18": 0.25531481677477236,
        "meteor-15": 0.10695714618209892,
        "meteor-13": 0.3000393951459132,
        "meteor-9": 0.42569797131376275,
        "meteor-4": 0.3797353762638428,
        "meteor-14": 0.23599179657808309,
        "meteor-5": 0.2588678034507295,
        "meteor-19": 0.17553947992204094,
        "ruby-3": 0.2569444444444444,
        "ruby-0": 0.125,
        "ruby-8": 0.23611111111111116,
        "ruby-7": 0.23611111111111116,
        "ruby-16": 0.1875,
        "ruby-2": 0.22916666666666663,
        "ruby-11": 0.23611111111111116,
        "ruby-1": 0.2152777777777778,
        "ruby-10": 0.04166666666666663,
        "ruby-17": 0.2222222222222222,
        "ruby-12": 0.20261437908496727,
        "ruby-6": 0.125,
        "ruby-18": 0.13888888888888884,
        "ruby-15": 0.13888888888888884,
        "ruby-13": 0.24305555555555558,
        "ruby-9": 0.29166666666666663,
        "ruby-4": 0.3125,
        "ruby-14": 0.14583333333333337,
        "ruby-5": 0.2152777777777778,
        "ruby-19": 0.14583333333333337,
        "codebertscore_f1-3": 0.7983934879302979,
        "codebertscore_f3-3": 0.7771770358085632,
        "codebertscore_f1-0": 0.671627402305603,
        "codebertscore_f3-0": 0.6355149149894714,
        "codebertscore_f1-8": 0.7795979380607605,
        "codebertscore_f3-8": 0.7477018237113953,
        "codebertscore_f1-7": 0.7851424217224121,
        "codebertscore_f3-7": 0.7560288906097412,
        "codebertscore_f1-16": 0.7198106050491333,
        "codebertscore_f3-16": 0.69953852891922,
        "codebertscore_f1-2": 0.7901363968849182,
        "codebertscore_f3-2": 0.7750621438026428,
        "codebertscore_f1-11": 0.7663589715957642,
        "codebertscore_f3-11": 0.74677973985672,
        "codebertscore_f1-1": 0.7913066148757935,
        "codebertscore_f3-1": 0.7635351419448853,
        "codebertscore_f1-10": 0.6069300174713135,
        "codebertscore_f3-10": 0.5892019271850586,
        "codebertscore_f1-17": 0.790623128414154,
        "codebertscore_f3-17": 0.7667121887207031,
        "codebertscore_f1-12": 0.7699719667434692,
        "codebertscore_f3-12": 0.782379686832428,
        "codebertscore_f1-6": 0.6732831597328186,
        "codebertscore_f3-6": 0.6347212195396423,
        "codebertscore_f1-18": 0.7536360621452332,
        "codebertscore_f3-18": 0.7697557806968689,
        "codebertscore_f1-15": 0.7076501846313477,
        "codebertscore_f3-15": 0.676118016242981,
        "codebertscore_f1-13": 0.7845603227615356,
        "codebertscore_f3-13": 0.7775888442993164,
        "codebertscore_f1-9": 0.774902880191803,
        "codebertscore_f3-9": 0.7761663198471069,
        "codebertscore_f1-4": 0.8131451606750488,
        "codebertscore_f3-4": 0.8008051514625549,
        "codebertscore_f1-14": 0.7457823753356934,
        "codebertscore_f3-14": 0.7591296434402466,
        "codebertscore_f1-5": 0.7945263981819153,
        "codebertscore_f3-5": 0.765728771686554,
        "codebertscore_f1-19": 0.7220907211303711,
        "codebertscore_f3-19": 0.6941214799880981,
        "codebertscore_s_f1-3": 0.8005921244621277,
        "codebertscore_s_f3-3": 0.7807984948158264,
        "codebertscore_s_f1-0": 0.668891191482544,
        "codebertscore_s_f3-0": 0.627347469329834,
        "codebertscore_s_f1-8": 0.7892103791236877,
        "codebertscore_s_f3-8": 0.760968029499054,
        "codebertscore_s_f1-7": 0.7893507480621338,
        "codebertscore_s_f3-7": 0.7639753222465515,
        "codebertscore_s_f1-16": 0.7241148352622986,
        "codebertscore_s_f3-16": 0.7021702527999878,
        "codebertscore_s_f1-2": 0.7887367010116577,
        "codebertscore_s_f3-2": 0.7761685252189636,
        "codebertscore_s_f1-11": 0.771579384803772,
        "codebertscore_s_f3-11": 0.7530835866928101,
        "codebertscore_s_f1-1": 0.7960312366485596,
        "codebertscore_s_f3-1": 0.7720749378204346,
        "codebertscore_s_f1-10": 0.590347409248352,
        "codebertscore_s_f3-10": 0.5676526427268982,
        "codebertscore_s_f1-17": 0.793306827545166,
        "codebertscore_s_f3-17": 0.7724688053131104,
        "codebertscore_s_f1-12": 0.7729416489601135,
        "codebertscore_s_f3-12": 0.7843091487884521,
        "codebertscore_s_f1-6": 0.6658502221107483,
        "codebertscore_s_f3-6": 0.6268962621688843,
        "codebertscore_s_f1-18": 0.750498354434967,
        "codebertscore_s_f3-18": 0.7667309641838074,
        "codebertscore_s_f1-15": 0.7004441618919373,
        "codebertscore_s_f3-15": 0.6662085056304932,
        "codebertscore_s_f1-13": 0.7853493094444275,
        "codebertscore_s_f3-13": 0.7781423330307007,
        "codebertscore_s_f1-9": 0.7819435000419617,
        "codebertscore_s_f3-9": 0.7789496779441833,
        "codebertscore_s_f1-4": 0.8120365738868713,
        "codebertscore_s_f3-4": 0.8004809021949768,
        "codebertscore_s_f1-14": 0.7455618977546692,
        "codebertscore_s_f3-14": 0.7573972940444946,
        "codebertscore_s_f1-5": 0.7996016144752502,
        "codebertscore_s_f3-5": 0.7737244963645935,
        "codebertscore_s_f1-19": 0.7295076847076416,
        "codebertscore_s_f3-19": 0.7052748203277588,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nfunction sum_squares(lst){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
        "task_id": "133",
        "0": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        var number = lst[i];\n        var numberSquared = Math.ceil(number * number);\n        sum += numberSquared;\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return lst.map(num => Math.ceil(num))\n        .map(num => num*num)\n        .reduce((a,b) => a+b);\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "var sum = 0;\nfor(var i = 0; i < lst.length; i++){\n  sum = sum + Math.ceil(lst[i]) * Math.ceil(lst[i]);\n}\nreturn sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "let newArr = lst.map(element => {\n    return Math.ceil(element) ** 2;\n  });\n  return newArr.reduce((acc, curr) => {\n    return acc + curr;\n  });\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return lst.map(item => Math.ceil(item)).reduce((acc, item) => acc + item * item, 0);\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "for(var i = 0; i < lst.length; i++){\n        lst[i] = Math.ceil(lst[i]);\n    }\n    return lst.reduce(function(a,b){\n        return a + (b * b);\n    },0);\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "return lst.map(x => Math.ceil(x)).reduce((a, b) => Math.pow(a, 2) + Math.pow(b, 2));\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "return lst.map(function(value) {\n        return Math.pow(Math.ceil(value), 2);\n    }).reduce(function(a, b) {\n        return a + b;\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "return lst.map(a => Math.ceil(a)).reduce((a, b) => a + b ** 2, 0);\n}",
        "grade-9": {
            "execution": 1
        },
        "11": "var squaredNumber = lst.map(function(num){\n        return Math.ceil(num)\n    })\n    var summed = squaredNumber.reduce(function(acc, curr){\n        return acc + curr**2\n    }, 0)\n    return summed\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "return lst.map(i => Math.ceil(i)).reduce((a,b) => a + b * b, 0);\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "return lst.map(x => Math.ceil(x)**2).reduce((acc, cur) => acc + cur);\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "let squared = lst.map(function(x){\n        return Math.pow(Math.ceil(x), 2);\n    });\n    return squared.reduce(function(a, b){\n        return a + b;\n    });\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "let total = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceilNum = Math.ceil(lst[i]);\n        total += ceilNum * ceilNum;\n    }\n    return total;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "var sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tsum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\t}\n\treturn sum;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "let squares = [];\n  for (let i = 0; i < lst.length; i++) {\n    let element = lst[i];\n    let rounded = Math.ceil(element);\n    let squared = rounded * rounded;\n    squares.push(squared);\n  }\n  let sum = 0;\n  for (let i = 0; i < squares.length; i++) {\n    let element = squares[i];\n    sum += element;\n  }\n  return sum;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return lst.map(Math.ceil).reduce((a,b)=>a+(b*b),0);\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.2315151304134184,
        "bleu-1": 0.011249215556494115,
        "bleu-2": 0.21227383751013273,
        "bleu-3": 0.24315231643178478,
        "bleu-4": 0.016806625467492592,
        "bleu-5": 0.01119693263891704,
        "bleu-6": 0.23180830953610293,
        "bleu-7": 0.01182545908877141,
        "bleu-8": 0.01656610599635263,
        "bleu-9": 0.011603113594691744,
        "bleu-11": 0.020425895689969713,
        "bleu-12": 0.012740839656434723,
        "bleu-13": 0.008922976416362615,
        "bleu-14": 0.019566930623114154,
        "bleu-15": 0.2529017132174837,
        "bleu-16": 0.21254745586729235,
        "bleu-17": 0.26798338100358987,
        "bleu-18": 0.009258076885724434,
        "bleu-19": 6.639677199580737e-36,
        "codebleu-0": 0.39327500515663855,
        "codebleu-1": 0.21911298967406775,
        "codebleu-2": 0.38660614739889004,
        "codebleu-3": 0.37465942594591534,
        "codebleu-4": 0.26521832631505693,
        "codebleu-5": 0.18595041632912263,
        "codebleu-6": 0.40111638659671456,
        "codebleu-7": 0.20833344535494894,
        "codebleu-8": 0.2170256862129857,
        "codebleu-9": 0.18065316570709486,
        "codebleu-11": 0.26235204538061124,
        "codebleu-12": 0.1868036797468983,
        "codebleu-13": 0.17315621172003484,
        "codebleu-14": 0.2632417905882587,
        "codebleu-15": 0.3703846203954492,
        "codebleu-16": 0.36777912543653835,
        "codebleu-17": 0.5045806068807821,
        "codebleu-18": 0.16559861821671637,
        "codebleu-19": 0.005899705014749262,
        "chrf-0": 0.30369256472101214,
        "chrf-1": 0.09408101737543324,
        "chrf-2": 0.32018353607079447,
        "chrf-3": 0.37892527268766135,
        "chrf-4": 0.12885405157926325,
        "chrf-5": 0.11188504414753223,
        "chrf-6": 0.3316798132043514,
        "chrf-7": 0.09534048226293072,
        "chrf-8": 0.11979704026729136,
        "chrf-9": 0.09568422877449168,
        "chrf-11": 0.11691102259441269,
        "chrf-12": 0.10099006352408041,
        "chrf-13": 0.09115713367830938,
        "chrf-14": 0.12964756397484967,
        "chrf-15": 0.3888682450141266,
        "chrf-16": 0.323636640837435,
        "chrf-17": 0.3417443190005906,
        "chrf-18": 0.09496477204750298,
        "chrf-19": 0.011441647597254006,
        "rougel-0": 0.4817518248175182,
        "rougel-1": 0.21138211382113822,
        "rougel-2": 0.4626865671641791,
        "rougel-3": 0.4962406015037594,
        "rougel-4": 0.22900763358778625,
        "rougel-5": 0.18803418803418806,
        "rougel-6": 0.4195804195804196,
        "rougel-7": 0.1732283464566929,
        "rougel-8": 0.203125,
        "rougel-9": 0.18644067796610173,
        "rougel-11": 0.22556390977443608,
        "rougel-12": 0.2222222222222222,
        "rougel-13": 0.1896551724137931,
        "rougel-14": 0.22556390977443608,
        "rougel-15": 0.5263157894736842,
        "rougel-16": 0.46616541353383456,
        "rougel-17": 0.4444444444444445,
        "rougel-18": 0.17699115044247787,
        "rougel-19": 0.024096385542168676,
        "meteor-0": 0.3328868080130204,
        "meteor-1": 0.1091142490372272,
        "meteor-2": 0.31702919142340474,
        "meteor-3": 0.3439643528020878,
        "meteor-4": 0.15247776365946633,
        "meteor-5": 0.1282470221175754,
        "meteor-6": 0.27703900709219853,
        "meteor-7": 0.09578544061302681,
        "meteor-8": 0.11479591836734694,
        "meteor-9": 0.12808132829055013,
        "meteor-11": 0.13843393755551578,
        "meteor-12": 0.14129932306766102,
        "meteor-13": 0.10362694300518135,
        "meteor-14": 0.1267427122940431,
        "meteor-15": 0.3489336400194025,
        "meteor-16": 0.33003802281368816,
        "meteor-17": 0.407877990430622,
        "meteor-18": 0.12234334362808842,
        "meteor-19": 0.006765899864682003,
        "ruby-0": 0.3780487804878049,
        "ruby-1": 0.13414634146341464,
        "ruby-2": 0.29268292682926833,
        "ruby-3": 0.31707317073170727,
        "ruby-4": 0.14634146341463417,
        "ruby-5": 0.13414634146341464,
        "ruby-6": 0.30487804878048785,
        "ruby-7": 0.12195121951219512,
        "ruby-8": 0.13414634146341464,
        "ruby-9": 0.13414634146341464,
        "ruby-11": 0.14634146341463417,
        "ruby-12": 0.1585365853658537,
        "ruby-13": 0.13414634146341464,
        "ruby-14": 0.1585365853658537,
        "ruby-15": 0.3292682926829268,
        "ruby-16": 0.29268292682926833,
        "ruby-17": 0.3571428571428571,
        "ruby-18": 0.12195121951219512,
        "ruby-19": 0.012195121951219523,
        "codebertscore_f1-0": 0.8321631550788879,
        "codebertscore_f3-0": 0.8195429444313049,
        "codebertscore_f1-1": 0.7073654532432556,
        "codebertscore_f3-1": 0.6977280974388123,
        "codebertscore_f1-2": 0.8193610310554504,
        "codebertscore_f3-2": 0.795366644859314,
        "codebertscore_f1-3": 0.8340116739273071,
        "codebertscore_f3-3": 0.8074454665184021,
        "codebertscore_f1-4": 0.7208300828933716,
        "codebertscore_f3-4": 0.7113943696022034,
        "codebertscore_f1-5": 0.7430808544158936,
        "codebertscore_f3-5": 0.7364507913589478,
        "codebertscore_f1-6": 0.8145044445991516,
        "codebertscore_f3-6": 0.7965297698974609,
        "codebertscore_f1-7": 0.6999413967132568,
        "codebertscore_f3-7": 0.694575846195221,
        "codebertscore_f1-8": 0.7132559418678284,
        "codebertscore_f3-8": 0.7122743129730225,
        "codebertscore_f1-9": 0.7258885502815247,
        "codebertscore_f3-9": 0.7217324376106262,
        "codebertscore_f1-11": 0.7306469082832336,
        "codebertscore_f3-11": 0.7289440631866455,
        "codebertscore_f1-12": 0.7484923005104065,
        "codebertscore_f3-12": 0.7404670119285583,
        "codebertscore_f1-13": 0.7040092349052429,
        "codebertscore_f3-13": 0.6972969770431519,
        "codebertscore_f1-14": 0.7299903035163879,
        "codebertscore_f3-14": 0.7287671566009521,
        "codebertscore_f1-15": 0.8315317034721375,
        "codebertscore_f3-15": 0.8134747743606567,
        "codebertscore_f1-16": 0.8230394721031189,
        "codebertscore_f3-16": 0.795483410358429,
        "codebertscore_f1-17": 0.8358808755874634,
        "codebertscore_f3-17": 0.8194369077682495,
        "codebertscore_f1-18": 0.7179663181304932,
        "codebertscore_f3-18": 0.707027792930603,
        "codebertscore_f1-19": 0.0,
        "codebertscore_f3-19": 0.0,
        "codebertscore_s_f1-0": 0.8340094089508057,
        "codebertscore_s_f3-0": 0.8217884302139282,
        "codebertscore_s_f1-1": 0.7120761871337891,
        "codebertscore_s_f3-1": 0.7055573463439941,
        "codebertscore_s_f1-2": 0.8152122497558594,
        "codebertscore_s_f3-2": 0.7913731932640076,
        "codebertscore_s_f1-3": 0.8321322798728943,
        "codebertscore_s_f3-3": 0.8065637946128845,
        "codebertscore_s_f1-4": 0.7185806632041931,
        "codebertscore_s_f3-4": 0.7138550281524658,
        "codebertscore_s_f1-5": 0.7294874787330627,
        "codebertscore_s_f3-5": 0.7184220552444458,
        "codebertscore_s_f1-6": 0.8230472803115845,
        "codebertscore_s_f3-6": 0.8040015697479248,
        "codebertscore_s_f1-7": 0.6953269839286804,
        "codebertscore_s_f3-7": 0.6887624263763428,
        "codebertscore_s_f1-8": 0.7197617888450623,
        "codebertscore_s_f3-8": 0.7202684283256531,
        "codebertscore_s_f1-9": 0.722277045249939,
        "codebertscore_s_f3-9": 0.7158474922180176,
        "codebertscore_s_f1-11": 0.727871298789978,
        "codebertscore_s_f3-11": 0.7306802868843079,
        "codebertscore_s_f1-12": 0.7442055344581604,
        "codebertscore_s_f3-12": 0.7334253191947937,
        "codebertscore_s_f1-13": 0.6955692768096924,
        "codebertscore_s_f3-13": 0.6838650107383728,
        "codebertscore_s_f1-14": 0.7376464605331421,
        "codebertscore_s_f3-14": 0.7410708665847778,
        "codebertscore_s_f1-15": 0.8303237557411194,
        "codebertscore_s_f3-15": 0.8157780766487122,
        "codebertscore_s_f1-16": 0.8176596760749817,
        "codebertscore_s_f3-16": 0.7894224524497986,
        "codebertscore_s_f1-17": 0.8366395831108093,
        "codebertscore_s_f3-17": 0.8210634589195251,
        "codebertscore_s_f1-18": 0.7176411151885986,
        "codebertscore_s_f3-18": 0.7049576044082642,
        "codebertscore_s_f1-19": 0.0,
        "codebertscore_s_f3-19": 0.0,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n",
        "snippet": [
            "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "task_id": "85",
        "3": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "//TODO:\n    const items = lst.filter((item,index) => index % 2 !== 0);\n    const even = items.filter(item => item % 2 === 0);\n    return even.reduce((sum, item) => sum + item, 0);\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let count = 0;\n  lst.forEach((element, index) => {\n    if (index % 2 === 1) {\n      count += element;\n    }\n  });\n  return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return lst.filter((i, index) => i % 2 === 0 && index % 2 === 1).reduce((a, b) => a + b, 0);\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let num=0;\n    for(let i=0;i<lst.length;i+=2){\n        if(lst[i]%2==0){\n            num+=lst[i];\n        }\n    }\n    return num;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let add = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            add += lst[i];\n        }\n    }\n    return add;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if((lst[i] % 2 == 0) && (i % 2 == 1)){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var retVal = 0;\n    for(var i = 0; i < lst.length; i++)\n    {\n        if((i % 2 != 0) && (lst[i] % 2 == 0))\n        {\n            retVal += lst[i];\n        }\n    }\n    return retVal;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var ans = 0;\n  for(var i = 0; i < lst.length; i++) {\n    if(i % 2 !== 0 && lst[i] % 2 === 0) {\n      ans += lst[i];\n    }\n  }\n  return ans;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return lst.filter((val, index) => index % 2 === 1 && val % 2 === 0).reduce((acc, val) => acc + val);\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let num = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            num += lst[i];\n        }\n    }\n    return num;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let newArr = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i] % 2 === 0){\n            newArr.push(lst[i]);\n        }\n    }\n    return newArr.reduce((acc, cur) => acc + cur);\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let even = []\n  lst.forEach((el, index) => {\n    if (el % 2 === 0 && index % 2 !== 0) {\n      even.push(el)\n    }\n  })\n  return even.reduce((a,b) => a + b)\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 1 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let even = 0;\nfor(let i = 0; i < lst.length; i+=2){\n  if(lst[i] % 2 === 0){\n    even += lst[i];\n  }\n}\nreturn even;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}\n\nmodule.exports = {\n  \"add\": add\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.4863414690868927,
        "bleu-0": 0.5297263160551021,
        "bleu-8": 0.09498525867740101,
        "bleu-7": 0.47966655697851507,
        "bleu-16": 0.5218300666860387,
        "bleu-2": 0.11805557140631509,
        "bleu-11": 0.4975616089406505,
        "bleu-1": 0.10197344841932328,
        "bleu-10": 0.702257244511142,
        "bleu-17": 0.5297263160551021,
        "bleu-12": 0.4973244131227009,
        "bleu-6": 0.43017335841103915,
        "bleu-18": 0.4566888490532018,
        "bleu-15": 0.12598044292377625,
        "bleu-13": 0.68211426930744,
        "bleu-9": 0.3642580348921692,
        "bleu-4": 0.13930133709477202,
        "bleu-14": 0.5041131973393336,
        "bleu-5": 0.68211426930744,
        "bleu-19": 0.002521215402977503,
        "codebleu-3": 0.7691882246457951,
        "codebleu-0": 0.7589947900495876,
        "codebleu-8": 0.4415884522038092,
        "codebleu-7": 0.7652979615166212,
        "codebleu-16": 0.7778807686900973,
        "codebleu-2": 0.46953104874198176,
        "codebleu-11": 0.7738360257325326,
        "codebleu-1": 0.3759642695601121,
        "codebleu-10": 0.8786590357013518,
        "codebleu-17": 0.7791968102516079,
        "codebleu-12": 0.7866752809749956,
        "codebleu-6": 0.7469480849876984,
        "codebleu-18": 0.7614683435290689,
        "codebleu-15": 0.35868977606398667,
        "codebleu-13": 0.8348978327633612,
        "codebleu-9": 0.7139925007648564,
        "codebleu-4": 0.520944162243068,
        "codebleu-14": 0.7777057349100909,
        "codebleu-5": 0.8146958125613408,
        "codebleu-19": 0.09160057796975567,
        "chrf-3": 0.5680452227626687,
        "chrf-0": 0.6616968007948433,
        "chrf-8": 0.1904957111342521,
        "chrf-7": 0.5635221586881177,
        "chrf-16": 0.6377200318488979,
        "chrf-2": 0.23730216644546032,
        "chrf-11": 0.6199685619947503,
        "chrf-1": 0.17530034928934796,
        "chrf-10": 0.7465829647575822,
        "chrf-17": 0.655223967019597,
        "chrf-12": 0.6374489794036834,
        "chrf-6": 0.5657065044085279,
        "chrf-18": 0.5461814521743449,
        "chrf-15": 0.1774454992403448,
        "chrf-13": 0.729906435887085,
        "chrf-9": 0.5492694280635553,
        "chrf-4": 0.22006492764564706,
        "chrf-14": 0.6244672108503556,
        "chrf-5": 0.7237687983326611,
        "chrf-19": 0.04028069899062263,
        "rougel-3": 0.7547169811320755,
        "rougel-0": 0.7777777777777777,
        "rougel-8": 0.2631578947368421,
        "rougel-7": 0.7547169811320755,
        "rougel-16": 0.7924528301886793,
        "rougel-2": 0.4888888888888889,
        "rougel-11": 0.7777777777777777,
        "rougel-1": 0.2736842105263158,
        "rougel-10": 0.888888888888889,
        "rougel-17": 0.7777777777777777,
        "rougel-12": 0.7636363636363636,
        "rougel-6": 0.7079646017699115,
        "rougel-18": 0.7407407407407408,
        "rougel-15": 0.2580645161290323,
        "rougel-13": 0.8799999999999999,
        "rougel-9": 0.6093749999999999,
        "rougel-4": 0.3392857142857143,
        "rougel-14": 0.7777777777777777,
        "rougel-5": 0.8799999999999999,
        "rougel-19": 0.13333333333333333,
        "meteor-3": 0.845365945188243,
        "meteor-0": 0.8535732209173943,
        "meteor-8": 0.29948305619170895,
        "meteor-7": 0.8396982373262989,
        "meteor-16": 0.8780549256739733,
        "meteor-2": 0.4474511323516749,
        "meteor-11": 0.8681571815718157,
        "meteor-1": 0.33321372651356984,
        "meteor-10": 0.9038561076604554,
        "meteor-17": 0.8535732209173943,
        "meteor-12": 0.8012095766481729,
        "meteor-6": 0.8072556485478583,
        "meteor-18": 0.8300135867772955,
        "meteor-15": 0.32347390388720126,
        "meteor-13": 0.8944488081415204,
        "meteor-9": 0.7486979166666666,
        "meteor-4": 0.41897606535997844,
        "meteor-14": 0.8744855967078189,
        "meteor-5": 0.8944488081415204,
        "meteor-19": 0.056306306306306314,
        "ruby-3": 0.6724137931034483,
        "ruby-0": 0.6833333333333333,
        "ruby-8": 0.19696969696969702,
        "ruby-7": 0.6724137931034483,
        "ruby-16": 0.7068965517241379,
        "ruby-2": 0.3125,
        "ruby-11": 0.6833333333333333,
        "ruby-1": 0.10416666666666663,
        "ruby-10": 0.8627450980392157,
        "ruby-17": 0.6833333333333333,
        "ruby-12": 0.6612903225806452,
        "ruby-6": 0.6,
        "ruby-18": 0.65,
        "ruby-15": 0.10416666666666663,
        "ruby-13": 0.8461538461538461,
        "ruby-9": 0.475,
        "ruby-4": 0.1875,
        "ruby-14": 0.6833333333333333,
        "ruby-5": 0.8461538461538461,
        "ruby-19": 0.08333333333333337,
        "codebertscore_f1-3": 0.9325722455978394,
        "codebertscore_f3-3": 0.9352936744689941,
        "codebertscore_f1-0": 0.9360681176185608,
        "codebertscore_f3-0": 0.9370350241661072,
        "codebertscore_f1-8": 0.7765087485313416,
        "codebertscore_f3-8": 0.7930188179016113,
        "codebertscore_f1-7": 0.9302200078964233,
        "codebertscore_f3-7": 0.9296362400054932,
        "codebertscore_f1-16": 0.9393762350082397,
        "codebertscore_f3-16": 0.9391639828681946,
        "codebertscore_f1-2": 0.8588285446166992,
        "codebertscore_f3-2": 0.8557019233703613,
        "codebertscore_f1-11": 0.9390723705291748,
        "codebertscore_f3-11": 0.9387567043304443,
        "codebertscore_f1-1": 0.80220627784729,
        "codebertscore_f3-1": 0.8094401359558105,
        "codebertscore_f1-10": 0.9467004537582397,
        "codebertscore_f3-10": 0.9438197016716003,
        "codebertscore_f1-17": 0.9385480284690857,
        "codebertscore_f3-17": 0.9398297667503357,
        "codebertscore_f1-12": 0.9388762712478638,
        "codebertscore_f3-12": 0.9430319666862488,
        "codebertscore_f1-6": 0.910366952419281,
        "codebertscore_f3-6": 0.9142717123031616,
        "codebertscore_f1-18": 0.9336090087890625,
        "codebertscore_f3-18": 0.9324308037757874,
        "codebertscore_f1-15": 0.7828787565231323,
        "codebertscore_f3-15": 0.785984456539154,
        "codebertscore_f1-13": 0.9600093364715576,
        "codebertscore_f3-13": 0.9573299884796143,
        "codebertscore_f1-9": 0.8749756813049316,
        "codebertscore_f3-9": 0.9033777117729187,
        "codebertscore_f1-4": 0.7999862432479858,
        "codebertscore_f3-4": 0.8113753795623779,
        "codebertscore_f1-14": 0.9432411193847656,
        "codebertscore_f3-14": 0.9460808038711548,
        "codebertscore_f1-5": 0.9548978209495544,
        "codebertscore_f3-5": 0.9522996544837952,
        "codebertscore_f1-19": 0.6343602538108826,
        "codebertscore_f3-19": 0.6468132734298706,
        "codebertscore_s_f1-3": 0.9249691963195801,
        "codebertscore_s_f3-3": 0.9273979663848877,
        "codebertscore_s_f1-0": 0.9338752627372742,
        "codebertscore_s_f3-0": 0.9350072145462036,
        "codebertscore_s_f1-8": 0.7879974842071533,
        "codebertscore_s_f3-8": 0.8075569272041321,
        "codebertscore_s_f1-7": 0.9235950708389282,
        "codebertscore_s_f3-7": 0.922789990901947,
        "codebertscore_s_f1-16": 0.9363740682601929,
        "codebertscore_s_f3-16": 0.9360532760620117,
        "codebertscore_s_f1-2": 0.8685275912284851,
        "codebertscore_s_f3-2": 0.8698369264602661,
        "codebertscore_s_f1-11": 0.938327431678772,
        "codebertscore_s_f3-11": 0.9379817843437195,
        "codebertscore_s_f1-1": 0.8076668381690979,
        "codebertscore_s_f3-1": 0.8139870762825012,
        "codebertscore_s_f1-10": 0.9476619362831116,
        "codebertscore_s_f3-10": 0.9446220397949219,
        "codebertscore_s_f1-17": 0.9372317790985107,
        "codebertscore_s_f3-17": 0.9390389919281006,
        "codebertscore_s_f1-12": 0.9391018152236938,
        "codebertscore_s_f3-12": 0.9433198571205139,
        "codebertscore_s_f1-6": 0.9050459265708923,
        "codebertscore_s_f3-6": 0.9102973341941833,
        "codebertscore_s_f1-18": 0.9302681088447571,
        "codebertscore_s_f3-18": 0.9297260642051697,
        "codebertscore_s_f1-15": 0.7882333397865295,
        "codebertscore_s_f3-15": 0.7916679978370667,
        "codebertscore_s_f1-13": 0.9615378379821777,
        "codebertscore_s_f3-13": 0.9589882493019104,
        "codebertscore_s_f1-9": 0.8708603978157043,
        "codebertscore_s_f3-9": 0.901404082775116,
        "codebertscore_s_f1-4": 0.8120612502098083,
        "codebertscore_s_f3-4": 0.826863706111908,
        "codebertscore_s_f1-14": 0.9443886280059814,
        "codebertscore_s_f3-14": 0.9474563002586365,
        "codebertscore_s_f1-5": 0.9566231966018677,
        "codebertscore_s_f3-5": 0.9543447494506836,
        "codebertscore_s_f1-19": 0.630703330039978,
        "codebertscore_s_f3-19": 0.6340025067329407,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n",
        "snippet": [
            "  return n * (n + 1) / 2;\n}\n\n"
        ],
        "simplified": "sum_to_n is a function that sums numbers from 1 to n.",
        "task_id": "60",
        "0": "var sum = 0;\n  for(var i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum = sum + i;\n\t}\n\treturn sum;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "return (n*(n+1))/2;\n}",
        "grade-3": {
            "execution": 1
        },
        "6": "return n*(n+1)/2;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var sum = 0;\n  for(var i = 0; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "grade-8": {
            "execution": 1
        },
        "10": "var sum = 0;\n\tfor(var i = 1; i <= n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "return n*(n+1)/2;\n}",
        "grade-11": {
            "execution": 1
        },
        "13": "var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var result = 0;\n    for(var i = 1; i <= n; i++){\n        result += i;\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "return (n*(n+1))/2;\n}",
        "grade-15": {
            "execution": 1
        },
        "17": "var acc = 0;\n  for(var i = 1; i <= n; i++){\n    acc += i;\n  }\n  return acc;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var sum = 0;\n    for(var i = 0; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "//solution goes here\n\tvar sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.03280894525012139,
        "bleu-1": 0.03176605498590708,
        "bleu-2": 0.03280894525012139,
        "bleu-3": 0.6997522298221911,
        "bleu-6": 1.0000000000000004,
        "bleu-7": 0.03280894525012139,
        "bleu-8": 0.03173176885393888,
        "bleu-10": 0.03280894525012139,
        "bleu-11": 1.0000000000000004,
        "bleu-13": 0.03280894525012139,
        "bleu-14": 0.03280894525012139,
        "bleu-15": 0.6997522298221911,
        "bleu-17": 0.03280894525012139,
        "bleu-18": 0.03173176885393888,
        "bleu-19": 0.029025207558830604,
        "codebleu-0": 0.44078947368421045,
        "codebleu-1": 0.44078947368421045,
        "codebleu-2": 0.44078947368421045,
        "codebleu-3": 0.8446955470756281,
        "codebleu-6": 1.0,
        "codebleu-7": 0.44078947368421045,
        "codebleu-8": 0.4303728070175438,
        "codebleu-10": 0.44078947368421045,
        "codebleu-11": 1.0,
        "codebleu-13": 0.44078947368421045,
        "codebleu-14": 0.44078947368421045,
        "codebleu-15": 0.8446955470756281,
        "codebleu-17": 0.44078947368421045,
        "codebleu-18": 0.4303728070175438,
        "codebleu-19": 0.45120614035087714,
        "chrf-0": 0.21939557487541322,
        "chrf-1": 0.21357343861137973,
        "chrf-2": 0.21939557487541322,
        "chrf-3": 0.6642786012860704,
        "chrf-6": 1.0,
        "chrf-7": 0.21939557487541322,
        "chrf-8": 0.2122668333268881,
        "chrf-10": 0.21939557487541322,
        "chrf-11": 1.0,
        "chrf-13": 0.21939557487541322,
        "chrf-14": 0.20281100757805354,
        "chrf-15": 0.6642786012860704,
        "chrf-17": 0.21939557487541322,
        "chrf-18": 0.2122668333268881,
        "chrf-19": 0.20091896344248497,
        "rougel-0": 0.2727272727272727,
        "rougel-1": 0.26666666666666666,
        "rougel-2": 0.2727272727272727,
        "rougel-3": 0.923076923076923,
        "rougel-6": 1.0,
        "rougel-7": 0.2727272727272727,
        "rougel-8": 0.2727272727272727,
        "rougel-10": 0.2727272727272727,
        "rougel-11": 1.0,
        "rougel-13": 0.2727272727272727,
        "rougel-14": 0.2727272727272727,
        "rougel-15": 0.923076923076923,
        "rougel-17": 0.2727272727272727,
        "rougel-18": 0.2727272727272727,
        "rougel-19": 0.2448979591836735,
        "meteor-0": 0.3800223214285715,
        "meteor-1": 0.37732712765957444,
        "meteor-2": 0.3800223214285715,
        "meteor-3": 0.9759221311475411,
        "meteor-6": 0.9997106481481481,
        "meteor-7": 0.3800223214285715,
        "meteor-8": 0.3800223214285715,
        "meteor-10": 0.3800223214285715,
        "meteor-11": 0.9997106481481481,
        "meteor-13": 0.3800223214285715,
        "meteor-14": 0.3800223214285715,
        "meteor-15": 0.9759221311475411,
        "meteor-17": 0.3800223214285715,
        "meteor-18": 0.3800223214285715,
        "meteor-19": 0.402724563644104,
        "ruby-0": 0.1875,
        "ruby-1": 0.18181818181818177,
        "ruby-2": 0.1875,
        "ruby-3": 0.8571428571428572,
        "ruby-6": 1.0,
        "ruby-7": 0.1875,
        "ruby-8": 0.1875,
        "ruby-10": 0.1875,
        "ruby-11": 1.0,
        "ruby-13": 0.1875,
        "ruby-14": 0.1875,
        "ruby-15": 0.8571428571428572,
        "ruby-17": 0.1875,
        "ruby-18": 0.1875,
        "ruby-19": 0.16216216216216217,
        "codebertscore_f1-0": 0.7341228127479553,
        "codebertscore_f3-0": 0.7332934737205505,
        "codebertscore_f1-1": 0.7429417371749878,
        "codebertscore_f3-1": 0.7451732754707336,
        "codebertscore_f1-2": 0.7315050363540649,
        "codebertscore_f3-2": 0.7309145331382751,
        "codebertscore_f1-3": 0.9554225206375122,
        "codebertscore_f3-3": 0.9554225206375122,
        "codebertscore_f1-6": 0.9505844712257385,
        "codebertscore_f3-6": 0.9505844712257385,
        "codebertscore_f1-7": 0.7318175435066223,
        "codebertscore_f3-7": 0.7319322228431702,
        "codebertscore_f1-8": 0.7237568497657776,
        "codebertscore_f3-8": 0.725825309753418,
        "codebertscore_f1-10": 0.7341634631156921,
        "codebertscore_f3-10": 0.7333402633666992,
        "codebertscore_f1-11": 0.9505844712257385,
        "codebertscore_f3-11": 0.9505844712257385,
        "codebertscore_f1-13": 0.7315050363540649,
        "codebertscore_f3-13": 0.7309145331382751,
        "codebertscore_f1-14": 0.7234194874763489,
        "codebertscore_f3-14": 0.7246334552764893,
        "codebertscore_f1-15": 0.9554225206375122,
        "codebertscore_f3-15": 0.9554225206375122,
        "codebertscore_f1-17": 0.7315425872802734,
        "codebertscore_f3-17": 0.7295034527778625,
        "codebertscore_f1-18": 0.7208446264266968,
        "codebertscore_f3-18": 0.7224599719047546,
        "codebertscore_f1-19": 0.7193084955215454,
        "codebertscore_f3-19": 0.7320210933685303,
        "codebertscore_s_f1-0": 0.7469839453697205,
        "codebertscore_s_f3-0": 0.7462185621261597,
        "codebertscore_s_f1-1": 0.7518153190612793,
        "codebertscore_s_f3-1": 0.7529606223106384,
        "codebertscore_s_f1-2": 0.7438726425170898,
        "codebertscore_s_f3-2": 0.7428167462348938,
        "codebertscore_s_f1-3": 0.9532637000083923,
        "codebertscore_s_f3-3": 0.9532637000083923,
        "codebertscore_s_f1-6": 0.9550506472587585,
        "codebertscore_s_f3-6": 0.9550505876541138,
        "codebertscore_s_f1-7": 0.7497250437736511,
        "codebertscore_s_f3-7": 0.7497550845146179,
        "codebertscore_s_f1-8": 0.7368510365486145,
        "codebertscore_s_f3-8": 0.7369324564933777,
        "codebertscore_s_f1-10": 0.7491714358329773,
        "codebertscore_s_f3-10": 0.7480987310409546,
        "codebertscore_s_f1-11": 0.9550506472587585,
        "codebertscore_s_f3-11": 0.9550505876541138,
        "codebertscore_s_f1-13": 0.7438726425170898,
        "codebertscore_s_f3-13": 0.7428167462348938,
        "codebertscore_s_f1-14": 0.7346134781837463,
        "codebertscore_s_f3-14": 0.734704852104187,
        "codebertscore_s_f1-15": 0.9532637000083923,
        "codebertscore_s_f3-15": 0.9532637000083923,
        "codebertscore_s_f1-17": 0.7428812980651855,
        "codebertscore_s_f3-17": 0.7412118315696716,
        "codebertscore_s_f1-18": 0.733182430267334,
        "codebertscore_s_f3-18": 0.7323943376541138,
        "codebertscore_s_f1-19": 0.7266837358474731,
        "codebertscore_s_f3-19": 0.7405509352684021,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n",
        "snippet": [
            "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n"
        ],
        "simplified": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "task_id": "24",
        "0": "var largest_divisor = 0;\n    for(var i = 1; i < n; i++){\n        if(n % i == 0){\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var divisor = n - 1;\n    while (n % divisor !== 0){\n        divisor -= 1;\n    }\n    return divisor;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let i = n;\n  while (i > 0){\n    if (n % i === 0){\n      return i;\n    }\n    i -= 1;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var max=0;\n    for(var i=1;i<n;i++){\n        if(n%i==0){\n            max=i;\n        }\n    }\n    return max;\n}\nlargest_divisor(5);",
        "grade-3": {
            "execution": 1
        },
        "4": "for(var i = n-1; i > 0; i--){\n\t\tif(n % i === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "for(var i = n - 1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var largest_divisor = n;\n    for(var i = 0; i < n; i++){\n        if(n % i === 0 && i < n){\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "for(let i = n-1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "for(let i = n - 1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var divisor = n - 1;\n  while (divisor > 0){\n    if (n % divisor === 0){\n      return divisor;\n    }\n    divisor--;\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "for(var i = n - 1; i > 0; i--){\n\t\tif(n % i === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "//iterate through all numbers lower than n\n    for(var i = n - 1; i > 0; i--){\n        //divide n by each number and check if the remainder is 0\n        if(n % i === 0){\n            //if the remainder is 0, return i\n            return i;\n        }\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "}",
        "grade-12": {
            "execution": 0
        },
        "13": "for(var i = n-1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "if(n === 1){\n        return 1;\n    }\n    if(n === 2){\n        return 1;\n    }\n    if(n === 3){\n        return 1;\n    }\n    if(n === 4){\n        return 2;\n    }\n    let i = Math.floor(n/2);\n    let answer = 0;\n    for(i; i>0; i--){\n        if(n%i === 0){\n            answer = i;\n            break;\n        }\n    }\n    return answer;\n}",
        "grade-14": {
            "execution": 1
        },
        "16": "for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var divisor = n - 1;\n  while (divisor > 0){\n    if (n % divisor === 0){\n      return divisor;\n    }\n    divisor -= 1;\n  }\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var largest = 0;\n    for(var i = 1; i < n; i++){\n        if(n % i === 0){\n            largest = i;\n        }\n    }\n    return largest;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var divisor = 2;\n  while (n > divisor){\n    if (n % divisor == 0){\n      return divisor;\n    }\n    else\n      divisor += 1;\n  }\n  return n;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.3231992668997092,
        "bleu-1": 0.25600350588999204,
        "bleu-2": 0.4259889042895652,
        "bleu-3": 0.28686034114077286,
        "bleu-4": 0.6248140881877589,
        "bleu-5": 0.6248140881877589,
        "bleu-6": 0.2546466142977549,
        "bleu-7": 0.6998402896505936,
        "bleu-8": 0.6998402896505936,
        "bleu-9": 0.2830315891825203,
        "bleu-10": 0.6248140881877589,
        "bleu-11": 0.3146250382591333,
        "bleu-12": 9.357622968840179e-14,
        "bleu-13": 0.6248140881877589,
        "bleu-14": 0.1593219014229576,
        "bleu-16": 0.6998402896505936,
        "bleu-17": 0.26605951043542153,
        "bleu-18": 0.30116786627208997,
        "bleu-19": 0.16857365212831063,
        "codebleu-0": 0.6138517788871238,
        "codebleu-1": 0.45260810784080313,
        "codebleu-2": 0.6073584312612545,
        "codebleu-3": 0.6077952912606345,
        "codebleu-4": 0.774862886975553,
        "codebleu-5": 0.774862886975553,
        "codebleu-6": 0.5668043360485183,
        "codebleu-7": 0.7912432228782735,
        "codebleu-8": 0.7912432228782735,
        "codebleu-9": 0.6156473837268024,
        "codebleu-10": 0.774862886975553,
        "codebleu-11": 0.7390377278604645,
        "codebleu-12": 0.015873015873016233,
        "codebleu-13": 0.774862886975553,
        "codebleu-14": 0.6496618082290385,
        "codebleu-16": 0.7912432228782735,
        "codebleu-17": 0.5771967031973395,
        "codebleu-18": 0.5943068629095047,
        "codebleu-19": 0.565194169042426,
        "chrf-0": 0.3448359256481176,
        "chrf-1": 0.26315651969598125,
        "chrf-2": 0.4720358719134494,
        "chrf-3": 0.3698621230163971,
        "chrf-4": 0.6014635509963918,
        "chrf-5": 0.6014635509963918,
        "chrf-6": 0.3100864284988229,
        "chrf-7": 0.7390439718458662,
        "chrf-8": 0.7390439718458662,
        "chrf-9": 0.2972218041677551,
        "chrf-10": 0.6014635509963918,
        "chrf-11": 0.399435108590912,
        "chrf-12": 0.030303030303030304,
        "chrf-13": 0.6014635509963918,
        "chrf-14": 0.31956751187983173,
        "chrf-16": 0.7390439718458662,
        "chrf-17": 0.2890049347839875,
        "chrf-18": 0.3601958105598011,
        "chrf-19": 0.24394352134267033,
        "rougel-0": 0.6111111111111112,
        "rougel-1": 0.5084745762711865,
        "rougel-2": 0.6769230769230768,
        "rougel-3": 0.5714285714285714,
        "rougel-4": 0.8787878787878788,
        "rougel-5": 0.8787878787878788,
        "rougel-6": 0.5384615384615384,
        "rougel-7": 0.909090909090909,
        "rougel-8": 0.909090909090909,
        "rougel-9": 0.5757575757575757,
        "rougel-10": 0.8787878787878788,
        "rougel-11": 0.5858585858585859,
        "rougel-12": 0.0625,
        "rougel-13": 0.8787878787878788,
        "rougel-14": 0.38235294117647056,
        "rougel-16": 0.909090909090909,
        "rougel-17": 0.5671641791044777,
        "rougel-18": 0.6027397260273972,
        "rougel-19": 0.4411764705882353,
        "meteor-0": 0.6776997041420117,
        "meteor-1": 0.4950959603706678,
        "meteor-2": 0.6776097020277759,
        "meteor-3": 0.5230996813837051,
        "meteor-4": 0.9463552724699221,
        "meteor-5": 0.9463552724699221,
        "meteor-6": 0.5559589065959996,
        "meteor-7": 0.9815777089947441,
        "meteor-8": 0.9815777089947441,
        "meteor-9": 0.7035949663835809,
        "meteor-10": 0.9463552724699221,
        "meteor-11": 0.7364713416586616,
        "meteor-12": 0.017857142857142856,
        "meteor-13": 0.9463552724699221,
        "meteor-14": 0.6820167824074074,
        "meteor-16": 0.9815777089947441,
        "meteor-17": 0.5414462081128748,
        "meteor-18": 0.6519244594370405,
        "meteor-19": 0.4385680379746836,
        "ruby-0": 0.46341463414634143,
        "ruby-1": 0.29032258064516125,
        "ruby-2": 0.4117647058823529,
        "ruby-3": 0.4130434782608695,
        "ruby-4": 0.8,
        "ruby-5": 0.8,
        "ruby-6": 0.3829787234042553,
        "ruby-7": 0.8285714285714285,
        "ruby-8": 0.8285714285714285,
        "ruby-9": 0.34285714285714286,
        "ruby-10": 0.8,
        "ruby-11": 0.4117647058823529,
        "ruby-12": 0.032258064516129004,
        "ruby-13": 0.8,
        "ruby-14": 0.23809523809523814,
        "ruby-16": 0.8285714285714285,
        "ruby-17": 0.33333333333333337,
        "ruby-18": 0.45238095238095233,
        "ruby-19": 0.18918918918918914,
        "codebertscore_f1-0": 0.8237662315368652,
        "codebertscore_f3-0": 0.8607105612754822,
        "codebertscore_f1-1": 0.7996229529380798,
        "codebertscore_f3-1": 0.8131389021873474,
        "codebertscore_f1-2": 0.9006521105766296,
        "codebertscore_f3-2": 0.8951978087425232,
        "codebertscore_f1-3": 0.8358449935913086,
        "codebertscore_f3-3": 0.8630369305610657,
        "codebertscore_f1-4": 0.9632441997528076,
        "codebertscore_f3-4": 0.9632442593574524,
        "codebertscore_f1-5": 0.9735686182975769,
        "codebertscore_f3-5": 0.9735685586929321,
        "codebertscore_f1-6": 0.8226631879806519,
        "codebertscore_f3-6": 0.8531131744384766,
        "codebertscore_f1-7": 0.9743219614028931,
        "codebertscore_f3-7": 0.9743218421936035,
        "codebertscore_f1-8": 0.9842575192451477,
        "codebertscore_f3-8": 0.9842575192451477,
        "codebertscore_f1-9": 0.8250032663345337,
        "codebertscore_f3-9": 0.8512560725212097,
        "codebertscore_f1-10": 0.9732664227485657,
        "codebertscore_f3-10": 0.9732664823532104,
        "codebertscore_f1-11": 0.8240199089050293,
        "codebertscore_f3-11": 0.8925061225891113,
        "codebertscore_f1-12": 0.0,
        "codebertscore_f3-12": 0.0,
        "codebertscore_f1-13": 0.9638431072235107,
        "codebertscore_f3-13": 0.9638431072235107,
        "codebertscore_f1-14": 0.7841109037399292,
        "codebertscore_f3-14": 0.8100403547286987,
        "codebertscore_f1-16": 0.9783119559288025,
        "codebertscore_f3-16": 0.9783118963241577,
        "codebertscore_f1-17": 0.8163696527481079,
        "codebertscore_f3-17": 0.8396353125572205,
        "codebertscore_f1-18": 0.8640156984329224,
        "codebertscore_f3-18": 0.8737022280693054,
        "codebertscore_f1-19": 0.7722194194793701,
        "codebertscore_f3-19": 0.7918193936347961,
        "codebertscore_s_f1-0": 0.8341331481933594,
        "codebertscore_s_f3-0": 0.8758164048194885,
        "codebertscore_s_f1-1": 0.8089657425880432,
        "codebertscore_s_f3-1": 0.825299859046936,
        "codebertscore_s_f1-2": 0.9238329529762268,
        "codebertscore_s_f3-2": 0.9173340797424316,
        "codebertscore_s_f1-3": 0.8463982343673706,
        "codebertscore_s_f3-3": 0.8762122988700867,
        "codebertscore_s_f1-4": 0.963890016078949,
        "codebertscore_s_f3-4": 0.963890016078949,
        "codebertscore_s_f1-5": 0.9759698510169983,
        "codebertscore_s_f3-5": 0.9759699106216431,
        "codebertscore_s_f1-6": 0.8262114524841309,
        "codebertscore_s_f3-6": 0.8612864017486572,
        "codebertscore_s_f1-7": 0.9800496101379395,
        "codebertscore_s_f3-7": 0.980049729347229,
        "codebertscore_s_f1-8": 0.9893386960029602,
        "codebertscore_s_f3-8": 0.9893386960029602,
        "codebertscore_s_f1-9": 0.8312084674835205,
        "codebertscore_s_f3-9": 0.8599850535392761,
        "codebertscore_s_f1-10": 0.9733444452285767,
        "codebertscore_s_f3-10": 0.9733443856239319,
        "codebertscore_s_f1-11": 0.8306301832199097,
        "codebertscore_s_f3-11": 0.9065266251564026,
        "codebertscore_s_f1-12": 0.0,
        "codebertscore_s_f3-12": 0.0,
        "codebertscore_s_f1-13": 0.9667357802391052,
        "codebertscore_s_f3-13": 0.9667357802391052,
        "codebertscore_s_f1-14": 0.7855201363563538,
        "codebertscore_s_f3-14": 0.8173134326934814,
        "codebertscore_s_f1-16": 0.9856439232826233,
        "codebertscore_s_f3-16": 0.9856438636779785,
        "codebertscore_s_f1-17": 0.8239954113960266,
        "codebertscore_s_f3-17": 0.849929690361023,
        "codebertscore_s_f1-18": 0.8818281888961792,
        "codebertscore_s_f3-18": 0.8925254940986633,
        "codebertscore_s_f1-19": 0.7772908210754395,
        "codebertscore_s_f3-19": 0.798653244972229,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 0,
        "raw_gpt35_nsnr-12": "0",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 2,
        "raw_gpt35_nsnr-14": "2",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n",
        "snippet": [
            "  return a * h / 2.0;\n}\n\n"
        ],
        "simplified": "Given length of a side and high return area for a triangle.",
        "task_id": "45",
        "0": "return a * h / 2;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return a * h / 2;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return a * h / 2;\n}\ntriangle_area(5, 3);",
        "grade-2": {
            "execution": 1
        },
        "3": "return (1/2)*a*h;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return (a * h) / 2;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "6": "return (a*h)/2;\n}",
        "grade-6": {
            "execution": 1
        },
        "8": "return ((a*h)/2);\n}",
        "grade-8": {
            "execution": 1
        },
        "10": "return (a * h)/2;\n}",
        "grade-10": {
            "execution": 1
        },
        "12": "return 0.5 * a * h;\n}",
        "grade-12": {
            "execution": 1
        },
        "14": "return a*h/2;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "return a * h / 2;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return (a * h) / 2;\n}",
        "grade-16": {
            "execution": 1
        },
        "18": "var area = (a * h)/2;\n  return area;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "return 0.5 * a * h;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.5959429410903774,
        "bleu-1": 0.5959429410903774,
        "bleu-2": 0.3641410562218428,
        "bleu-3": 0.19156928817239652,
        "bleu-4": 0.23736810439041953,
        "bleu-5": 0.00012340980408667962,
        "bleu-6": 0.23736810439041953,
        "bleu-8": 0.19156928817239652,
        "bleu-10": 0.23736810439041953,
        "bleu-12": 0.22089591134157888,
        "bleu-14": 0.5959429410903774,
        "bleu-15": 0.5959429410903774,
        "bleu-16": 0.23736810439041953,
        "bleu-18": 0.14865996369027276,
        "bleu-19": 0.22089591134157888,
        "codebleu-0": 0.6721195397780108,
        "codebleu-1": 0.6721195397780108,
        "codebleu-2": 0.665085780432578,
        "codebleu-3": 0.5531135531135531,
        "codebleu-4": 0.6043956043956044,
        "codebleu-5": 0.10256557172843692,
        "codebleu-6": 0.6043956043956044,
        "codebleu-8": 0.6043956043956044,
        "codebleu-10": 0.6043956043956044,
        "codebleu-12": 0.5531135531135531,
        "codebleu-14": 0.6721195397780108,
        "codebleu-15": 0.6721195397780108,
        "codebleu-16": 0.6043956043956044,
        "codebleu-18": 0.6043956043956044,
        "codebleu-19": 0.5531135531135531,
        "chrf-0": 0.7315024653261979,
        "chrf-1": 0.7315024653261979,
        "chrf-2": 0.557629705472411,
        "chrf-3": 0.39265253911638565,
        "chrf-4": 0.40432622932622936,
        "chrf-5": 0.08196721311475409,
        "chrf-6": 0.40432622932622936,
        "chrf-8": 0.39265253911638565,
        "chrf-10": 0.40432622932622936,
        "chrf-12": 0.3924214674214674,
        "chrf-14": 0.7315024653261979,
        "chrf-15": 0.7315024653261979,
        "chrf-16": 0.40432622932622936,
        "chrf-18": 0.396838275439829,
        "chrf-19": 0.3924214674214674,
        "rougel-0": 0.888888888888889,
        "rougel-1": 0.888888888888889,
        "rougel-2": 0.64,
        "rougel-3": 0.5454545454545454,
        "rougel-4": 0.8000000000000002,
        "rougel-5": 0.18181818181818182,
        "rougel-6": 0.8000000000000002,
        "rougel-8": 0.7272727272727272,
        "rougel-10": 0.8000000000000002,
        "rougel-12": 0.6,
        "rougel-14": 0.888888888888889,
        "rougel-15": 0.888888888888889,
        "rougel-16": 0.8000000000000002,
        "rougel-18": 0.56,
        "rougel-19": 0.6,
        "meteor-0": 0.8099489795918368,
        "meteor-1": 0.8099489795918368,
        "meteor-2": 0.7418154761904764,
        "meteor-3": 0.7352941176470589,
        "meteor-4": 0.7500000000000001,
        "meteor-5": 0.054945054945054944,
        "meteor-6": 0.7500000000000001,
        "meteor-8": 0.7352941176470589,
        "meteor-10": 0.7500000000000001,
        "meteor-12": 0.7023437500000002,
        "meteor-14": 0.8099489795918368,
        "meteor-15": 0.8099489795918368,
        "meteor-16": 0.7500000000000001,
        "meteor-18": 0.7142857142857144,
        "meteor-19": 0.7023437500000002,
        "ruby-0": 0.8,
        "ruby-1": 0.8,
        "ruby-2": 0.4,
        "ruby-3": 0.33333333333333337,
        "ruby-4": 0.6,
        "ruby-5": 0.09999999999999998,
        "ruby-6": 0.6,
        "ruby-8": 0.5833333333333333,
        "ruby-10": 0.6,
        "ruby-12": 0.30000000000000004,
        "ruby-14": 0.8,
        "ruby-15": 0.8,
        "ruby-16": 0.6,
        "ruby-18": 0.4666666666666667,
        "ruby-19": 0.30000000000000004,
        "codebertscore_f1-0": 0.9566091299057007,
        "codebertscore_f3-0": 0.939182460308075,
        "codebertscore_f1-1": 0.9566091299057007,
        "codebertscore_f3-1": 0.939182460308075,
        "codebertscore_f1-2": 0.8996689915657043,
        "codebertscore_f3-2": 0.9200374484062195,
        "codebertscore_f1-3": 0.8659500479698181,
        "codebertscore_f3-3": 0.869000256061554,
        "codebertscore_f1-4": 0.9338043332099915,
        "codebertscore_f3-4": 0.9177901148796082,
        "codebertscore_f1-5": 0.0,
        "codebertscore_f3-5": 0.0,
        "codebertscore_f1-6": 0.9104636907577515,
        "codebertscore_f3-6": 0.8967301845550537,
        "codebertscore_f1-8": 0.9077305793762207,
        "codebertscore_f3-8": 0.8942596316337585,
        "codebertscore_f1-10": 0.9194160103797913,
        "codebertscore_f3-10": 0.9041804075241089,
        "codebertscore_f1-12": 0.8721111416816711,
        "codebertscore_f3-12": 0.8646007180213928,
        "codebertscore_f1-14": 0.9252278208732605,
        "codebertscore_f3-14": 0.9105350971221924,
        "codebertscore_f1-15": 0.9566091299057007,
        "codebertscore_f3-15": 0.939182460308075,
        "codebertscore_f1-16": 0.9338043332099915,
        "codebertscore_f3-16": 0.9177901148796082,
        "codebertscore_f1-18": 0.8795868158340454,
        "codebertscore_f3-18": 0.8758885860443115,
        "codebertscore_f1-19": 0.8721111416816711,
        "codebertscore_f3-19": 0.8646007180213928,
        "codebertscore_s_f1-0": 0.9578401446342468,
        "codebertscore_s_f3-0": 0.9356368780136108,
        "codebertscore_s_f1-1": 0.9578401446342468,
        "codebertscore_s_f3-1": 0.9356368780136108,
        "codebertscore_s_f1-2": 0.8910540342330933,
        "codebertscore_s_f3-2": 0.9186107516288757,
        "codebertscore_s_f1-3": 0.8623358607292175,
        "codebertscore_s_f3-3": 0.8650137782096863,
        "codebertscore_s_f1-4": 0.929455041885376,
        "codebertscore_s_f3-4": 0.9093555212020874,
        "codebertscore_s_f1-5": 0.0,
        "codebertscore_s_f3-5": 0.0,
        "codebertscore_s_f1-6": 0.9100448489189148,
        "codebertscore_s_f3-6": 0.8918070197105408,
        "codebertscore_s_f1-8": 0.9010113477706909,
        "codebertscore_s_f3-8": 0.8830685615539551,
        "codebertscore_s_f1-10": 0.9195559620857239,
        "codebertscore_s_f3-10": 0.9002611637115479,
        "codebertscore_s_f1-12": 0.853071391582489,
        "codebertscore_s_f3-12": 0.8501726984977722,
        "codebertscore_s_f1-14": 0.9294742941856384,
        "codebertscore_s_f3-14": 0.9096058011054993,
        "codebertscore_s_f1-15": 0.9578401446342468,
        "codebertscore_s_f3-15": 0.9356368780136108,
        "codebertscore_s_f1-16": 0.929455041885376,
        "codebertscore_s_f3-16": 0.9093555212020874,
        "codebertscore_s_f1-18": 0.8758336901664734,
        "codebertscore_s_f3-18": 0.8777731657028198,
        "codebertscore_s_f1-19": 0.853071391582489,
        "codebertscore_s_f3-19": 0.8501726984977722,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nfunction get_odd_collatz(n){\n",
        "snippet": [
            "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
        "task_id": "123",
        "3": "if(n === 1) {\n\t\treturn [1];\n\t}\n\tlet nums = [n];\n\twhile(n !== 1) {\n\t\tif(n % 2 === 0) {\n\t\t\tn = n / 2;\n\t\t} else {\n\t\t\tn = (3 * n) + 1;\n\t\t}\n\t\tnums.push(n);\n\t}\n\treturn nums.filter(n => n % 2 !== 0);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var odd_collatz = [n];\n  var i = 1;\n  while(n!=1){\n    n = n%2==0 ? n/2 : n*3+1;\n    if(n%2!=0){\n      odd_collatz.push(n);\n    }\n  }\n  return odd_collatz;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let arr = []\n    while(n > 1){\n        if(n % 2 === 1){\n            arr.push(n)\n        }\n        n = (n % 2 === 0) ? n / 2 : 3 * n + 1\n    }\n    arr.push(1)\n    return arr\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//Math.pow(7,3) = 343\n    let result = [];\n    let step = 0;\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }\n        else{\n            n = 3 * n + 1;\n        }\n        step++;\n        if(step == 1000000){\n            return [1,n];\n        }\n        if(n % 2 != 0){\n            result.push(n);\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let arr = [];\n  while(n>1){\n    if(n%2==1){\n      arr.push(n);\n    }\n    n = n % 2 == 0 ? n/2 : 3*n+1;\n  }\n  arr.push(1);\n  return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let collatz = function(n){\n\t\tlet arr = [n];\n\t\tif(n <= 1){\n\t\t\treturn [1];\n\t\t}\n\t\twhile(n != 1){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn = n / 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn = 3 * n + 1;\n\t\t\t}\n\t\t\tarr.push(n);\n\t\t}\n\t\treturn arr;\n\t}\n\tlet arr = collatz(n);\n\treturn arr.filter(function(x){\n\t\treturn x % 2 != 0;\n\t});\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var seq = [n];\n    var i = 0;\n    while(seq[i] != 1){\n        if(seq[i] % 2 == 0){\n            seq.push(seq[i] / 2);\n        }else{\n            seq.push(seq[i] * 3 + 1);\n        }\n        i++;\n    }\n    var arr = [];\n    for(var x = 0; x < seq.length; x++){\n        if(seq[x] % 2 == 1){\n            arr.push(seq[x]);\n        }\n    }\n    return arr;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var result = [];\n  if(n > 0){\n    result.push(n);\n    while(n != 1){\n      if(n % 2 == 0){\n        n = n / 2;\n      }\n      else{\n        n = 3 * n + 1;\n      }\n      if(n % 2 != 0){\n        result.push(n);\n      }\n    }\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let arr = [];\n  arr.push(n);\n  while(n != 1){\n    if(n % 2 == 0){\n      n = n / 2;\n    }else{\n      n = 3 * n + 1;\n    }\n    if(n % 2 != 0){\n      arr.push(n);\n    }\n  }\n  return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "function isOdd(n){\n        return n % 2;\n    }\n    function collatz(n){\n        var sequence = [n];\n        while(n != 1){\n            if(isOdd(n)){\n                n = 3 * n + 1;\n            }\n            else{\n                n = n / 2;\n            }\n            sequence.push(n);\n        }\n        return sequence;\n    }\n    return collatz(n).filter(isOdd);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var arr = [n];\n\twhile(n != 1){\n\t\tif(n % 2 == 0){\n\t\t\tn = n / 2;\n\t\t}\n\t\telse{\n\t\t\tn = 3 * n + 1;\n\t\t}\n\t\tarr.push(n);\n\t}\n\tvar result = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 == 1){\n\t\t\tresult.push(arr[i]);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var res = [];\n    while(n>1){\n        if(n%2==1){\n            res.push(n);\n        }\n        n = n%2==0?n/2:3*n+1;\n    }\n    res.push(1);\n    return res;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var list = [1];\n\tvar i = 2;\n\tvar sequence = [];\n\tvar odds = [];\n\tvar k = 0;\n\tvar result = [];\n\twhile(i <= n){\n\t\tsequence = collatz(i);\n\t\todds = only_odds(sequence);\n\t\tfor(var j = 0; j < odds.length; j++){\n\t\t\tlist[k] = odds[j];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\tlist.sort(function(a, b){return a-b});\n\treturn list;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(n == 1) return [1];\n    var result = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = n * 3 + 1;\n        }\n        if(n % 2 != 0) result.push(n);\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "var seq = [n];\n\twhile(n > 1){\n\t\tif(n % 2 === 0){\n\t\t\tn = n / 2;\n\t\t} else {\n\t\t\tn = (3 * n) + 1;\n\t\t}\n\t\tseq.push(n);\n\t}\n\tvar result = [];\n\tfor(var i = 0; i < seq.length; i++){\n\t\tif(seq[i] % 2 === 1){\n\t\t\tresult.push(seq[i]);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var collatz_seq = [n];\n  var odd_nums = [];\n  while(n !== 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else{\n      n = 3 * n + 1;\n    }\n    collatz_seq.push(n);\n  }\n  for(var i = 0; i < collatz_seq.length; i++){\n    if(collatz_seq[i] % 2 !== 0){\n      odd_nums.push(collatz_seq[i]);\n    }\n  }\n  return odd_nums;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var c = [n];\n  for(i=0; i<c.length; i++){\n    if(c[i] % 2 == 0){\n      c.push(c[i]/2);\n    }\n    else{\n      c.push(c[i]*3+1);\n    }\n  }\n  var odds = c.filter(function(item){\n    return item % 2 == 1;\n  });\n  return odds;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// TODO: return an array of all the odd numbers in the collatz sequence of n.\n    if(n <= 0) return null;\n    let collatz = [];\n    while(n !== 1){\n        collatz.push(n);\n        if(n % 2 === 0) n = n / 2;\n        else n = 3 * n + 1;\n    }\n    collatz.push(1);\n    let odds = [];\n    for(let i = 0; i < collatz.length; i++){\n        if(collatz[i] % 2 !== 0) odds.push(collatz[i]);\n    }\n    return odds;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "const sequence = [n];\n    let next_num = n;\n    while(next_num !== 1){\n        if(next_num % 2 === 0){\n            next_num = next_num / 2;\n        } else {\n            next_num = next_num * 3 + 1;\n        }\n        sequence.push(next_num);\n    }\n    return sequence.filter(num => num % 2 === 1);\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.071670330373085,
        "bleu-0": 0.023155134954470816,
        "bleu-8": 0.029781536906363648,
        "bleu-7": 0.07688543502937682,
        "bleu-16": 0.03342003923237451,
        "bleu-2": 0.0838129366147111,
        "bleu-11": 0.15017011592152013,
        "bleu-1": 0.05397300946182992,
        "bleu-10": 0.043831344032887284,
        "bleu-17": 0.041970064103406465,
        "bleu-12": 0.15741136580734164,
        "bleu-6": 0.033240836853897365,
        "bleu-18": 0.1175074617615643,
        "bleu-15": 0.04959863649058107,
        "bleu-13": 1.1213829703227862e-83,
        "bleu-9": 0.15451266875750852,
        "bleu-4": 0.15652723683075545,
        "bleu-14": 0.10793114279419842,
        "bleu-5": 0.18380178727126417,
        "bleu-19": 0.05085920692005754,
        "codebleu-3": 0.24238433892404693,
        "codebleu-0": 0.15777625917772412,
        "codebleu-8": 0.1708412650815199,
        "codebleu-7": 0.2905326946587221,
        "codebleu-16": 0.17417925584988986,
        "codebleu-2": 0.311055360024606,
        "codebleu-11": 0.3840875283324306,
        "codebleu-1": 0.2302924909735241,
        "codebleu-10": 0.20470686001816182,
        "codebleu-17": 0.23332549288186966,
        "codebleu-12": 0.32145631748080444,
        "codebleu-6": 0.1740654734269708,
        "codebleu-18": 0.3463086135932279,
        "codebleu-15": 0.21057193979126543,
        "codebleu-13": 0.0048134777376654635,
        "codebleu-9": 0.3334539555377107,
        "codebleu-4": 0.3403926443595427,
        "codebleu-14": 0.28778097796975016,
        "codebleu-5": 0.4152551905381819,
        "codebleu-19": 0.21185269851648922,
        "chrf-3": 0.1614961069059026,
        "chrf-0": 0.11916611108761196,
        "chrf-8": 0.11857834932714258,
        "chrf-7": 0.1862087677808676,
        "chrf-16": 0.12419728382902626,
        "chrf-2": 0.18587598315571033,
        "chrf-11": 0.2152605089132102,
        "chrf-1": 0.16189671191741606,
        "chrf-10": 0.14729144625419469,
        "chrf-17": 0.16172174177278995,
        "chrf-12": 0.2339684692174889,
        "chrf-6": 0.12490650378073412,
        "chrf-18": 0.1961577757404425,
        "chrf-15": 0.15452042752527342,
        "chrf-13": 0.004574565416285453,
        "chrf-9": 0.23332906730381306,
        "chrf-4": 0.23529962425136325,
        "chrf-14": 0.20166800778544108,
        "chrf-5": 0.25595931049351184,
        "chrf-19": 0.15015875242702778,
        "rougel-3": 0.3071428571428571,
        "rougel-0": 0.25196850393700787,
        "rougel-8": 0.2766798418972332,
        "rougel-7": 0.3129251700680272,
        "rougel-16": 0.28346456692913385,
        "rougel-2": 0.3411371237458194,
        "rougel-11": 0.3860759493670886,
        "rougel-1": 0.3161764705882353,
        "rougel-10": 0.3106060606060606,
        "rougel-17": 0.2877697841726619,
        "rougel-12": 0.35810810810810806,
        "rougel-6": 0.2755905511811024,
        "rougel-18": 0.3365695792880259,
        "rougel-15": 0.291044776119403,
        "rougel-13": 0.010362694300518135,
        "rougel-9": 0.35451505016722407,
        "rougel-4": 0.37458193979933113,
        "rougel-14": 0.3693379790940766,
        "rougel-5": 0.3475609756097561,
        "rougel-19": 0.29850746268656714,
        "meteor-3": 0.22113929069430685,
        "meteor-0": 0.13891453899071976,
        "meteor-8": 0.15211236277989518,
        "meteor-7": 0.24470240677107527,
        "meteor-16": 0.15485406324052695,
        "meteor-2": 0.22573707123761977,
        "meteor-11": 0.3020709811359135,
        "meteor-1": 0.22036046309751156,
        "meteor-10": 0.2040018365472911,
        "meteor-17": 0.1879205984166784,
        "meteor-12": 0.28031568371793364,
        "meteor-6": 0.15202738380627515,
        "meteor-18": 0.23265921409214096,
        "meteor-15": 0.17681674492671856,
        "meteor-13": 0.002891844997108155,
        "meteor-9": 0.2842454013180845,
        "meteor-4": 0.2786885699786771,
        "meteor-14": 0.2057048820625343,
        "meteor-5": 0.2907500461911158,
        "meteor-19": 0.18896228687796826,
        "ruby-3": 0.20833333333333337,
        "ruby-0": 0.16145833333333337,
        "ruby-8": 0.171875,
        "ruby-7": 0.21875,
        "ruby-16": 0.18229166666666663,
        "ruby-2": 0.24479166666666663,
        "ruby-11": 0.27604166666666663,
        "ruby-1": 0.21354166666666663,
        "ruby-10": 0.20833333333333337,
        "ruby-17": 0.203125,
        "ruby-12": 0.25,
        "ruby-6": 0.17708333333333337,
        "ruby-18": 0.24479166666666663,
        "ruby-15": 0.19270833333333337,
        "ruby-13": 0.00520833333333337,
        "ruby-9": 0.25,
        "ruby-4": 0.27083333333333337,
        "ruby-14": 0.24479166666666663,
        "ruby-5": 0.23958333333333337,
        "ruby-19": 0.19270833333333337,
        "codebertscore_f1-3": 0.7507898211479187,
        "codebertscore_f3-3": 0.7159313559532166,
        "codebertscore_f1-0": 0.7327927350997925,
        "codebertscore_f3-0": 0.6957537531852722,
        "codebertscore_f1-8": 0.7677235007286072,
        "codebertscore_f3-8": 0.7132523655891418,
        "codebertscore_f1-7": 0.780559778213501,
        "codebertscore_f3-7": 0.7647331953048706,
        "codebertscore_f1-16": 0.7512662410736084,
        "codebertscore_f3-16": 0.6972671747207642,
        "codebertscore_f1-2": 0.7627526521682739,
        "codebertscore_f3-2": 0.7383109331130981,
        "codebertscore_f1-11": 0.8191627264022827,
        "codebertscore_f3-11": 0.7994582653045654,
        "codebertscore_f1-1": 0.7700023055076599,
        "codebertscore_f3-1": 0.7185355424880981,
        "codebertscore_f1-10": 0.7663857340812683,
        "codebertscore_f3-10": 0.7147552371025085,
        "codebertscore_f1-17": 0.7471053600311279,
        "codebertscore_f3-17": 0.7307029366493225,
        "codebertscore_f1-12": 0.8010241389274597,
        "codebertscore_f3-12": 0.7704862356185913,
        "codebertscore_f1-6": 0.7519385814666748,
        "codebertscore_f3-6": 0.6975873112678528,
        "codebertscore_f1-18": 0.7276883721351624,
        "codebertscore_f3-18": 0.7194446921348572,
        "codebertscore_f1-15": 0.7616210579872131,
        "codebertscore_f3-15": 0.717185378074646,
        "codebertscore_f1-13": 0.0,
        "codebertscore_f3-13": 0.0,
        "codebertscore_f1-9": 0.7974749207496643,
        "codebertscore_f3-9": 0.7675132155418396,
        "codebertscore_f1-4": 0.7774947881698608,
        "codebertscore_f3-4": 0.768420934677124,
        "codebertscore_f1-14": 0.7768381834030151,
        "codebertscore_f3-14": 0.7395728826522827,
        "codebertscore_f1-5": 0.7838218808174133,
        "codebertscore_f3-5": 0.7933835983276367,
        "codebertscore_f1-19": 0.7566715478897095,
        "codebertscore_f3-19": 0.7299631834030151,
        "codebertscore_s_f1-3": 0.759655773639679,
        "codebertscore_s_f3-3": 0.7304528951644897,
        "codebertscore_s_f1-0": 0.7298928499221802,
        "codebertscore_s_f3-0": 0.6978349089622498,
        "codebertscore_s_f1-8": 0.7811436057090759,
        "codebertscore_s_f3-8": 0.7327572107315063,
        "codebertscore_s_f1-7": 0.7768403887748718,
        "codebertscore_s_f3-7": 0.7598567008972168,
        "codebertscore_s_f1-16": 0.7679978609085083,
        "codebertscore_s_f3-16": 0.719120442867279,
        "codebertscore_s_f1-2": 0.7624315619468689,
        "codebertscore_s_f3-2": 0.7405188083648682,
        "codebertscore_s_f1-11": 0.8096216320991516,
        "codebertscore_s_f3-11": 0.7885871529579163,
        "codebertscore_s_f1-1": 0.7729434967041016,
        "codebertscore_s_f3-1": 0.7245445847511292,
        "codebertscore_s_f1-10": 0.7769303321838379,
        "codebertscore_s_f3-10": 0.730637788772583,
        "codebertscore_s_f1-17": 0.7380633354187012,
        "codebertscore_s_f3-17": 0.7242104411125183,
        "codebertscore_s_f1-12": 0.8085176348686218,
        "codebertscore_s_f3-12": 0.781121015548706,
        "codebertscore_s_f1-6": 0.7570332288742065,
        "codebertscore_s_f3-6": 0.7072211503982544,
        "codebertscore_s_f1-18": 0.7284096479415894,
        "codebertscore_s_f3-18": 0.7249425649642944,
        "codebertscore_s_f1-15": 0.7642596364021301,
        "codebertscore_s_f3-15": 0.7209723591804504,
        "codebertscore_s_f1-13": 0.0,
        "codebertscore_s_f3-13": 0.0,
        "codebertscore_s_f1-9": 0.8034744262695312,
        "codebertscore_s_f3-9": 0.7767124772071838,
        "codebertscore_s_f1-4": 0.7747804522514343,
        "codebertscore_s_f3-4": 0.7700392603874207,
        "codebertscore_s_f1-14": 0.7805833220481873,
        "codebertscore_s_f3-14": 0.749200165271759,
        "codebertscore_s_f1-5": 0.7819533348083496,
        "codebertscore_s_f3-5": 0.7924939393997192,
        "codebertscore_s_f1-19": 0.7541394233703613,
        "codebertscore_s_f3-19": 0.7288960218429565,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(', ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens(lst){\n",
        "snippet": [
            "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n"
        ],
        "simplified": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
        "task_id": "119",
        "3": "let ct = lst.map(x => {\n    let sum = 0;\n    for (let i = 0; i < x.length; i++) {\n      if (x[i] === '(') {\n        sum += 1;\n      } else {\n        sum -= 1;\n      }\n    }\n    return sum;\n  });\n  return ct[0] > 0 ? 'Yes' : ct[1] > 0 ? 'Yes' : 'No';\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let open = 0;\n  let close = 0;\n  lst[0].split('').forEach(element => {\n    if (element === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  });\n  lst[1].split('').forEach(element => {\n    if (element === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  });\n  if (open === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "//your code here\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let total = 0;\n  let is_good = true;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      total += 1;\n    } else {\n      total -= 1;\n    }\n    if (total < 0) {\n      is_good = false;\n    }\n  }\n  if (is_good) {\n    for (let i = 0; i < lst[1].length; i++) {\n      if (lst[1][i] === '(') {\n        total += 1;\n      } else {\n        total -= 1;\n      }\n      if (total < 0) {\n        is_good = false;\n      }\n    }\n  }\n  if (total !== 0) {\n    is_good = false;\n  }\n  if (is_good) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let str1 = lst[0];\n  let str2 = lst[1];\n  if (str1[0] == ')') return 'No';\n  if (str2[str2.length - 1] == '(') return 'No';\n  // if we got this far, we know for sure that the first and last characters\n  // are balanced.\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] == '(') count++;\n    else count--;\n    if (count < 0) return 'No';\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] == '(') count++;\n    else count--;\n    if (count < 0) return 'No';\n  }\n  if (count === 0) return 'Yes';\n  return 'No';\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var s1 = lst[0].split('');\n  var s2 = lst[1].split('');\n  var result = {\n    left: 0,\n    right: 0\n  };\n  for (var i = 0; i < s1.length; i++) {\n    s1[i] === '(' ? result.left++ : result.right++;\n  }\n  for (var i = 0; i < s2.length; i++) {\n    s2[i] === '(' ? result.left++ : result.right++;\n  }\n  return result.left === result.right ? 'Yes' : 'No';\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var left = 0, right = 0;\n    var str1 = lst[0], str2 = lst[1];\n    for (var i = 0; i < str1.length; i++) {\n        if (str1[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n    }\n    for (var i = 0; i < str2.length; i++) {\n        if (str2[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n    }\n    if (left > right) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var left = [], right = [];\n  for (var i = 0; i < lst[0].length; i++) {\n    lst[0][i] == '(' ? left.push(lst[0][i]) : right.push(lst[0][i]);\n  }\n  for (var i = 0; i < lst[1].length; i++) {\n    lst[1][i] == '(' ? left.push(lst[1][i]) : right.push(lst[1][i]);\n  }\n  while (left.length > 0 && right.length > 0) {\n    left.pop();\n    right.pop();\n  }\n  return left.length == 0 && right.length == 0 ? 'Yes' : 'No';\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  return open === close ? 'Yes' : 'No';\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var lst_good=lst.map(function(val){\n    return (val.split(\"\").filter(function(val){\n      return val=='(';}).length==val.split(\"\").filter(function(val){\n        return val==')';}).length);\n  });\n  return (lst_good[0] && lst_good[1])?'Yes':'No';\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var to_be_matched_pairs = 0;\n  var have_matched_pairs = 0;\n  var unmatched_left_parens = 0;\n  var unmatched_right_parens = 0;\n  var unmatched_left_parens_in_open_string = 0;\n  var unmatched_right_parens_in_open_string = 0;\n  var unmatched_left_parens_in_closed_string = 0;\n  var unmatched_right_parens_in_closed_string = 0;\n  for (var i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      unmatched_left_parens_in_open_string++;\n    } else {\n      unmatched_right_parens_in_open_string++;\n    }\n  }\n  for (var i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      unmatched_left_parens_in_closed_string++;\n    } else {\n      unmatched_right_parens_in_closed_string++;\n    }\n  }\n  if (unmatched_left_parens_in_open_string === unmatched_right_parens_in_open_string) {\n    to_be_matched_pairs += unmatched_left_parens_in_open_string;\n  } else {\n    unmatched_left_parens += Math.max(unmatched_left_parens_in_open_string, unmatched_right_parens_in_open_string) - Math.min(unmatched_left_parens_in_open_string, unmatched_right_parens_in_open_string);\n  }\n  if (unmatched_left_parens_in_closed_string === unmatched_right_parens_in_closed_string) {\n    to_be_matched_pairs += unmatched_left_parens_in_closed_string;\n  } else {\n    unmatched_right_parens += Math.max(unmatched_left_parens_in_closed_string, unmatched_right_parens_in_closed",
        "grade-6": {
            "execution": 0
        },
        "18": "var s = lst[0] + lst[1];\n  var count = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] == '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count == 0 ? 'Yes' : 'No';\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let a = lst[0].split('').reduce((acc, n) => {\n        if (n === '(') acc++;\n        if (n === ')') acc--;\n        return acc;\n    }, 0);\n    let b = lst[1].split('').reduce((acc, n) => {\n        if (n === '(') acc++;\n        if (n === ')') acc--;\n        return acc;\n    }, 0);\n    return a + b === 0 ? 'Yes' : 'No';\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let open = 0;\n    for (let i = 0; i < lst[0].length; i++) {\n        if (lst[0][i] === '(') {\n            open++;\n        } else {\n            open--;\n        }\n    }\n    let closed = 0;\n    for (let i = 0; i < lst[1].length; i++) {\n        if (lst[1][i] === ')') {\n            closed++;\n        } else {\n            closed--;\n        }\n    }\n    if (open < 0 || closed < 0) {\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let string = '';\n  for (let index = 0; index < lst.length; index++) {\n    string += lst[index];\n  }\n  let arr = string.split('');\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  if (count === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let str1 = lst[0];\n  let str2 = lst[1];\n  let count1 = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let count4 = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count2++;\n    } else {\n      count2--;\n    }\n  }\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      count3++;\n    } else {\n      count3--;\n    }\n    if (count3 < 0) {\n      break;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count4++;\n    } else {\n      count4--;\n    }\n    if (count4 < 0) {\n      break;\n    }\n  }\n  if (count1 === 0 && count2 === 0) {\n    return 'Yes';\n  } else if (count3 === 0 && count4 === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let b=lst[0]+lst[1];\n    if (b===\"()\"){\n        return \"Yes\";\n    }\n    else if (b===\"))\"){\n        return \"No\";\n    }\n    else if (b===\"()(\"){\n        return \"Yes\";\n    }\n    else if (b===\"))(\"){\n        return \"No\";\n    }\n    else if (b===\")(\"){\n        return \"No\";\n    }\n    else if (b===\"(()\"){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var s = lst[0]+lst[1];\n  var count = 0;\n  for(var i=0; i<s.length; i++){\n    if(s[i]==='('){\n      count++;\n    }\n    else if(s[i]===')'){\n      count--;\n    }\n    if(count<0){\n      return 'No';\n    }\n  }\n  if(count === 0){\n    return 'Yes';\n  }\n  else{\n    return 'No';\n  }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "function check_balanced(s){\n    var count = 0;\n    for (var i = 0; i < s.length; i++){\n      if (s[i] == '(') {\n        count += 1;\n      } else {\n        count -= 1;\n      }\n      if (count < 0) {\n        return false;\n      }\n    }\n    return count == 0;\n  }\n  var a = lst[0], b = lst[1];\n  return (check_balanced(a + b) || check_balanced(b + a)) ? 'Yes' : 'No';\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.1520310667506074,
        "bleu-0": 0.1768770829625017,
        "bleu-8": 2.794154667194234e-15,
        "bleu-7": 0.4713323318336362,
        "bleu-16": 0.3739168166959604,
        "bleu-2": 0.3848621866977453,
        "bleu-11": 0.25574760334963026,
        "bleu-1": 0.3367606349139883,
        "bleu-10": 0.2947827979174347,
        "bleu-17": 0.34106634398414476,
        "bleu-12": 0.05533743169989504,
        "bleu-6": 0.34426889868953703,
        "bleu-18": 0.16999881240580592,
        "bleu-15": 0.14452590579912264,
        "bleu-13": 0.3791122860635914,
        "bleu-9": 0.28852409118096495,
        "bleu-4": 0.3438912473505848,
        "bleu-14": 0.19625965533211162,
        "bleu-5": 0.27537129975607766,
        "bleu-19": 0.20697665508765384,
        "codebleu-3": 0.28747554991962093,
        "codebleu-0": 0.38555100594805153,
        "codebleu-8": 0.01277139208173693,
        "codebleu-7": 0.6532489276324597,
        "codebleu-16": 0.6366900222681554,
        "codebleu-2": 0.4981947846386533,
        "codebleu-11": 0.43304068813628505,
        "codebleu-1": 0.48741692542815696,
        "codebleu-10": 0.515939774937675,
        "codebleu-17": 0.4531248109241262,
        "codebleu-12": 0.26117734011211863,
        "codebleu-6": 0.6218280676797832,
        "codebleu-18": 0.3203801840111496,
        "codebleu-15": 0.37194150365886447,
        "codebleu-13": 0.49256605927129393,
        "codebleu-9": 0.4535288498468044,
        "codebleu-4": 0.7539718398932236,
        "codebleu-14": 0.33963499452561396,
        "codebleu-5": 0.4261977980632851,
        "codebleu-19": 0.3689986898653418,
        "chrf-3": 0.2597644226329972,
        "chrf-0": 0.26320494540241024,
        "chrf-8": 0.009900510797070652,
        "chrf-7": 0.45351536045936763,
        "chrf-16": 0.41326835462186656,
        "chrf-2": 0.44271496989650383,
        "chrf-11": 0.2956007530442648,
        "chrf-1": 0.4052401729404729,
        "chrf-10": 0.3049267432585961,
        "chrf-17": 0.39741124214909407,
        "chrf-12": 0.20296261280012698,
        "chrf-6": 0.2279456264763738,
        "chrf-18": 0.2862471886473099,
        "chrf-15": 0.2076310449451856,
        "chrf-13": 0.4397577000939339,
        "chrf-9": 0.3942191731052733,
        "chrf-4": 0.48430914833945293,
        "chrf-14": 0.22796967600015244,
        "chrf-5": 0.3606964420105344,
        "chrf-19": 0.2886327159668677,
        "rougel-3": 0.4221453287197232,
        "rougel-0": 0.445859872611465,
        "rougel-8": 0.0101010101010101,
        "rougel-7": 0.6236559139784946,
        "rougel-16": 0.5620253164556962,
        "rougel-2": 0.5914634146341463,
        "rougel-11": 0.45697329376854595,
        "rougel-1": 0.5828220858895706,
        "rougel-10": 0.4485488126649076,
        "rougel-17": 0.5625,
        "rougel-12": 0.29655172413793107,
        "rougel-6": 0.455,
        "rougel-18": 0.49645390070921985,
        "rougel-15": 0.3939393939393939,
        "rougel-13": 0.5792682926829268,
        "rougel-9": 0.5510835913312694,
        "rougel-4": 0.5767634854771785,
        "rougel-14": 0.45454545454545453,
        "rougel-5": 0.5573770491803278,
        "rougel-19": 0.45307443365695793,
        "meteor-3": 0.2823037228403421,
        "meteor-0": 0.35973769913163856,
        "meteor-8": 0.0028835063437139563,
        "meteor-7": 0.5632081962821207,
        "meteor-16": 0.512448103274278,
        "meteor-2": 0.4713714397190792,
        "meteor-11": 0.35860907885077414,
        "meteor-1": 0.38918487988776296,
        "meteor-10": 0.4063984071108861,
        "meteor-17": 0.4391353672417844,
        "meteor-12": 0.2479067122090094,
        "meteor-6": 0.44360733031524263,
        "meteor-18": 0.35109051071312114,
        "meteor-15": 0.3267762823881501,
        "meteor-13": 0.523125619237987,
        "meteor-9": 0.4597527280395116,
        "meteor-4": 0.644056014997674,
        "meteor-14": 0.3240130868700925,
        "meteor-5": 0.3958729837287275,
        "meteor-19": 0.3200254272458139,
        "ruby-3": 0.296875,
        "ruby-0": 0.30729166666666663,
        "ruby-8": 0.00520833333333337,
        "ruby-7": 0.4375,
        "ruby-16": 0.33990147783251234,
        "ruby-2": 0.40104166666666663,
        "ruby-11": 0.27083333333333337,
        "ruby-1": 0.421875,
        "ruby-10": 0.26041666666666663,
        "ruby-17": 0.38541666666666663,
        "ruby-12": 0.203125,
        "ruby-6": 0.25,
        "ruby-18": 0.34895833333333337,
        "ruby-15": 0.27083333333333337,
        "ruby-13": 0.40104166666666663,
        "ruby-9": 0.41666666666666663,
        "ruby-4": 0.46896551724137936,
        "ruby-14": 0.30729166666666663,
        "ruby-5": 0.40104166666666663,
        "ruby-19": 0.328125,
        "codebertscore_f1-3": 0.8019251823425293,
        "codebertscore_f3-3": 0.7878379225730896,
        "codebertscore_f1-0": 0.7740220427513123,
        "codebertscore_f3-0": 0.7524187564849854,
        "codebertscore_f1-8": 0.5313556790351868,
        "codebertscore_f3-8": 0.49775782227516174,
        "codebertscore_f1-7": 0.8400751352310181,
        "codebertscore_f3-7": 0.83521568775177,
        "codebertscore_f1-16": 0.8255615234375,
        "codebertscore_f3-16": 0.8377102017402649,
        "codebertscore_f1-2": 0.8367583751678467,
        "codebertscore_f3-2": 0.810563862323761,
        "codebertscore_f1-11": 0.803246021270752,
        "codebertscore_f3-11": 0.7915734648704529,
        "codebertscore_f1-1": 0.8404046893119812,
        "codebertscore_f3-1": 0.8240160942077637,
        "codebertscore_f1-10": 0.8007693886756897,
        "codebertscore_f3-10": 0.7802982330322266,
        "codebertscore_f1-17": 0.8292891979217529,
        "codebertscore_f3-17": 0.8020069003105164,
        "codebertscore_f1-12": 0.7105585932731628,
        "codebertscore_f3-12": 0.691679060459137,
        "codebertscore_f1-6": 0.6857864856719971,
        "codebertscore_f3-6": 0.7368082404136658,
        "codebertscore_f1-18": 0.8339504599571228,
        "codebertscore_f3-18": 0.808382511138916,
        "codebertscore_f1-15": 0.778283953666687,
        "codebertscore_f3-15": 0.7693608999252319,
        "codebertscore_f1-13": 0.8569214344024658,
        "codebertscore_f3-13": 0.8354219198226929,
        "codebertscore_f1-9": 0.8194759488105774,
        "codebertscore_f3-9": 0.8044519424438477,
        "codebertscore_f1-4": 0.8255231380462646,
        "codebertscore_f3-4": 0.831243634223938,
        "codebertscore_f1-14": 0.7821590304374695,
        "codebertscore_f3-14": 0.7417261600494385,
        "codebertscore_f1-5": 0.8259366154670715,
        "codebertscore_f3-5": 0.8029838800430298,
        "codebertscore_f1-19": 0.793928325176239,
        "codebertscore_f3-19": 0.7949416041374207,
        "codebertscore_s_f1-3": 0.8140787482261658,
        "codebertscore_s_f3-3": 0.8002569079399109,
        "codebertscore_s_f1-0": 0.7855971455574036,
        "codebertscore_s_f3-0": 0.7638689279556274,
        "codebertscore_s_f1-8": 0.5086950063705444,
        "codebertscore_s_f3-8": 0.47848448157310486,
        "codebertscore_s_f1-7": 0.8422825336456299,
        "codebertscore_s_f3-7": 0.8355846405029297,
        "codebertscore_s_f1-16": 0.832831859588623,
        "codebertscore_s_f3-16": 0.8422966599464417,
        "codebertscore_s_f1-2": 0.8423265218734741,
        "codebertscore_s_f3-2": 0.813295304775238,
        "codebertscore_s_f1-11": 0.8116920590400696,
        "codebertscore_s_f3-11": 0.8004608154296875,
        "codebertscore_s_f1-1": 0.8427478671073914,
        "codebertscore_s_f3-1": 0.8248023986816406,
        "codebertscore_s_f1-10": 0.8055176734924316,
        "codebertscore_s_f3-10": 0.7849338054656982,
        "codebertscore_s_f1-17": 0.840411365032196,
        "codebertscore_s_f3-17": 0.8108533024787903,
        "codebertscore_s_f1-12": 0.7219738960266113,
        "codebertscore_s_f3-12": 0.7014622688293457,
        "codebertscore_s_f1-6": 0.7068549394607544,
        "codebertscore_s_f3-6": 0.7537891268730164,
        "codebertscore_s_f1-18": 0.8443949818611145,
        "codebertscore_s_f3-18": 0.8186067342758179,
        "codebertscore_s_f1-15": 0.7806605696678162,
        "codebertscore_s_f3-15": 0.7695488929748535,
        "codebertscore_s_f1-13": 0.8553821444511414,
        "codebertscore_s_f3-13": 0.8298538327217102,
        "codebertscore_s_f1-9": 0.8218904733657837,
        "codebertscore_s_f3-9": 0.8032802939414978,
        "codebertscore_s_f1-4": 0.8367887139320374,
        "codebertscore_s_f3-4": 0.8407875895500183,
        "codebertscore_s_f1-14": 0.7874559164047241,
        "codebertscore_s_f3-14": 0.7465662360191345,
        "codebertscore_s_f1-5": 0.8308863043785095,
        "codebertscore_s_f3-5": 0.8063797950744629,
        "codebertscore_s_f1-19": 0.7949334979057312,
        "codebertscore_s_f3-19": 0.7987334728240967,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 2,
        "raw_gpt35_nsnr-14": "2",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 1,
        "raw_gpt35_nswr-14": "1",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero(l){\n",
        "snippet": [
            "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n"
        ],
        "simplified": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "43",
        "3": "for (var i = 0; i < l.length - 1; i++){\n    var num1 = l[i];\n    for (var j = i + 1; j < l.length; j++){\n      var num2 = l[j];\n      if (num1 + num2 === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var result = []\n\tfor (var i = 0; i < l.length; i++) {\n\t\tfor (var j = i + 1; j < l.length; j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\tresult.push([l[i], l[j]])\n\t\t\t}\n\t\t}\n\t}\n\treturn len(result) > 0\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let store = {};\n    let result = false;\n    for(let num of l){\n        if(store[num]){\n            result = true;\n            break;\n        }\n        else{\n            store[-num] = true;\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for (var i = 0; i < l.length; i++){\n    for (var j = 0; j < l.length; j++){\n      if (l[i] + l[j] == 0 && i != j){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "for(var i = 0; i < l.length; i++){\n\t\tfor(var j = 0; j < l.length; j++){\n\t\t\tif(l[i] == 0 && l[j] == 0 && i != j){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if(l[i] + l[j] == 0 && i != j){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "for(var i = 0; i < l.length - 1; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "l.sort(function(a, b){return a-b});\n\tvar first=0;\n\tvar last=l.length-1;\n\twhile(first<last){\n\t\tvar sum=l[first]+l[last];\n\t\tif(sum==0){\n\t\t\treturn true;\n\t\t}\n\t\telse if(sum>0){\n\t\t\tlast-=1;\n\t\t}\n\t\telse{\n\t\t\tfirst+=1;\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// first, sort the list\n    l.sort();\n    // now, keep going through the list until the end\n    for (var i = 0; i < l.length; i++) {\n        // get the element at the i-th position\n        var elem = l[i];\n        // and use your binary search function to search for\n        // the negative of that element\n        var neg_elem = binary_search(l, elem * -1);\n        // if you find something, return True\n        if (neg_elem) {\n            return true;\n        }\n    }\n    // if you didn't find anything, return False\n    return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if (l.length < 2) {\n        return false;\n    }\n    else {\n        var a = l.length;\n        for (var i = 0; i < a; i++){\n            for (var j = i + 1; j < a; j++){\n                if (l[i] + l[j] == 0){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var l = l.slice(0, l.length);\n    var c = [];\n    l.forEach(function(x){\n        c.push(l.reduce(function(t, y){\n            return t || x + y == 0;\n        }, false));\n    });\n    return c.reduce(function(t, b){\n        return t || b;\n    }, false);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "for(var i = 0; i < l.length; i++){\n        for(var j = i+1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var distinct = [];\n  for (var i = 0; i < l.length; i++){\n    var a = l[i];\n    for (var j = 0; j < l.length; j++){\n      var b = l[j];\n      if (i != j){\n        if (a+b == 0){\n          distinct.push([a,b]);\n        }\n      }\n    }\n  }\n  if (distinct.length > 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "for(var i = 0; i < l.length; i++) {\n\t\tfor(var j = 0; j < l.length; j++) {\n\t\t\tif(i != j && l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "for(var i = 0; i < l.length; i++) {\n\t\tfor(var j = i+1; j < l.length; j++) {\n\t\t\tif(l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let flag = false;\n    for(i = 0; i < l.length; i++){\n        for(j = i+1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if (l.length === 0){\n    return false;\n  }\n  for (var i = 0; i < l.length; i++){\n    for (var j = i + 1; j < l.length; j++){\n      if (l[i] + l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (l.length == 0){\n        return False;\n    }\n    var i = 0;\n    var j = 1;\n    while (i < l.length - 1){\n        while (j < l.length){\n            if (l[i] + l[j] == 0){\n                return True;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    return False;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "for(var i = 0; i < l.length; i++){\n\t\tfor(var j = i + 1; j < l.length; j++){\n\t\t\tif(l[i] + l[j] == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if (l.length < 2) {\n        return false;\n    }\n    for (var i = 0; i < l.length; i++) {\n        for (var j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.5001777146184261,
        "bleu-0": 0.49863045584384524,
        "bleu-8": 0.05479545532930194,
        "bleu-7": 0.6069003749878411,
        "bleu-16": 0.413905882135829,
        "bleu-2": 0.6780279380515282,
        "bleu-11": 0.13289429815728382,
        "bleu-1": 0.17350892977243343,
        "bleu-10": 0.48015347364820793,
        "bleu-17": 0.0525096751363627,
        "bleu-12": 0.7271906201402587,
        "bleu-6": 0.32108143661762406,
        "bleu-18": 0.5977212306440981,
        "bleu-15": 0.8031429972941649,
        "bleu-13": 0.7271906201402587,
        "bleu-9": 0.6594061545254096,
        "bleu-4": 0.57498745976628,
        "bleu-14": 0.3629061912437108,
        "bleu-5": 0.7271906201402587,
        "bleu-19": 0.601948664469656,
        "codebleu-3": 0.8133236823971343,
        "codebleu-0": 0.7758170186859169,
        "codebleu-8": 0.42236333376520224,
        "codebleu-7": 0.8088192701671811,
        "codebleu-16": 0.7856625303675214,
        "codebleu-2": 0.8429653863026512,
        "codebleu-11": 0.6086008861447171,
        "codebleu-1": 0.6298652559091731,
        "codebleu-10": 0.8189953179111069,
        "codebleu-17": 0.5105682605682605,
        "codebleu-12": 0.851159166650773,
        "codebleu-6": 0.7431647624207935,
        "codebleu-18": 0.8072894127765572,
        "codebleu-15": 0.8680914004499284,
        "codebleu-13": 0.851159166650773,
        "codebleu-9": 0.8223057381589473,
        "codebleu-4": 0.8257919732551098,
        "codebleu-14": 0.7244945292174491,
        "codebleu-5": 0.851159166650773,
        "codebleu-19": 0.8392945163813482,
        "chrf-3": 0.616458207465947,
        "chrf-0": 0.5913125460229605,
        "chrf-8": 0.2386902570670809,
        "chrf-7": 0.700095332657671,
        "chrf-16": 0.6540637715396911,
        "chrf-2": 0.7316292056207163,
        "chrf-11": 0.3436228982313072,
        "chrf-1": 0.32889031564883603,
        "chrf-10": 0.6283066506687484,
        "chrf-17": 0.2575875010884022,
        "chrf-12": 0.7620944534109753,
        "chrf-6": 0.5470983287915265,
        "chrf-18": 0.6874518529250966,
        "chrf-15": 0.877780862882426,
        "chrf-13": 0.7620944534109753,
        "chrf-9": 0.6771828624138497,
        "chrf-4": 0.7206953639874473,
        "chrf-14": 0.49554451586353254,
        "chrf-5": 0.7620944534109753,
        "chrf-19": 0.733708505064104,
        "rougel-3": 0.7259259259259259,
        "rougel-0": 0.7083333333333334,
        "rougel-8": 0.38888888888888884,
        "rougel-7": 0.8412698412698414,
        "rougel-16": 0.6751592356687898,
        "rougel-2": 0.9032258064516129,
        "rougel-11": 0.38926174496644295,
        "rougel-1": 0.3333333333333333,
        "rougel-10": 0.7092198581560283,
        "rougel-17": 0.3129251700680273,
        "rougel-12": 0.9180327868852458,
        "rougel-6": 0.5443786982248521,
        "rougel-18": 0.8412698412698414,
        "rougel-15": 0.9508196721311475,
        "rougel-13": 0.9180327868852458,
        "rougel-9": 0.8571428571428571,
        "rougel-4": 0.8115942028985508,
        "rougel-14": 0.5277777777777777,
        "rougel-5": 0.9180327868852458,
        "rougel-19": 0.8296296296296296,
        "meteor-3": 0.8699740852100439,
        "meteor-0": 0.5874353740464194,
        "meteor-8": 0.3443504369430295,
        "meteor-7": 0.8580508474576272,
        "meteor-16": 0.7022238192198665,
        "meteor-2": 0.9509926419547411,
        "meteor-11": 0.5378314197736336,
        "meteor-1": 0.5252152930898198,
        "meteor-10": 0.921065947039973,
        "meteor-17": 0.3372063139954823,
        "meteor-12": 0.9546981655290103,
        "meteor-6": 0.652390146860921,
        "meteor-18": 0.8920043709748668,
        "meteor-15": 0.9894440431308412,
        "meteor-13": 0.9546981655290103,
        "meteor-9": 0.9358758863714978,
        "meteor-4": 0.9256559766763849,
        "meteor-14": 0.7248672775225785,
        "meteor-5": 0.9546981655290103,
        "meteor-19": 0.9339785058430718,
        "ruby-3": 0.6233766233766234,
        "ruby-0": 0.5930232558139534,
        "ruby-8": 0.18965517241379315,
        "ruby-7": 0.75,
        "ruby-16": 0.5151515151515151,
        "ruby-2": 0.8484848484848485,
        "ruby-11": 0.25274725274725274,
        "ruby-1": 0.2265625,
        "ruby-10": 0.5542168674698795,
        "ruby-17": 0.1797752808988764,
        "ruby-12": 0.875,
        "ruby-6": 0.39639639639639634,
        "ruby-18": 0.75,
        "ruby-15": 0.90625,
        "ruby-13": 0.875,
        "ruby-9": 0.7647058823529411,
        "ruby-4": 0.7,
        "ruby-14": 0.34883720930232553,
        "ruby-5": 0.875,
        "ruby-19": 0.7272727272727273,
        "codebertscore_f1-3": 0.9047865271568298,
        "codebertscore_f3-3": 0.9298361539840698,
        "codebertscore_f1-0": 0.9090772271156311,
        "codebertscore_f3-0": 0.9156802296638489,
        "codebertscore_f1-8": 0.7476765513420105,
        "codebertscore_f3-8": 0.7374228835105896,
        "codebertscore_f1-7": 0.9336276650428772,
        "codebertscore_f3-7": 0.9289038181304932,
        "codebertscore_f1-16": 0.8955076336860657,
        "codebertscore_f3-16": 0.8993949294090271,
        "codebertscore_f1-2": 0.9414786100387573,
        "codebertscore_f3-2": 0.945995032787323,
        "codebertscore_f1-11": 0.7921847701072693,
        "codebertscore_f3-11": 0.8087714910507202,
        "codebertscore_f1-1": 0.7175469398498535,
        "codebertscore_f3-1": 0.7866580486297607,
        "codebertscore_f1-10": 0.8621641397476196,
        "codebertscore_f3-10": 0.8771386742591858,
        "codebertscore_f1-17": 0.7483792901039124,
        "codebertscore_f3-17": 0.7582025527954102,
        "codebertscore_f1-12": 0.9463807344436646,
        "codebertscore_f3-12": 0.9463807344436646,
        "codebertscore_f1-6": 0.852053165435791,
        "codebertscore_f3-6": 0.8718971610069275,
        "codebertscore_f1-18": 0.9343146681785583,
        "codebertscore_f3-18": 0.9289953112602234,
        "codebertscore_f1-15": 0.9619423151016235,
        "codebertscore_f3-15": 0.9619422554969788,
        "codebertscore_f1-13": 0.962064266204834,
        "codebertscore_f3-13": 0.9620641469955444,
        "codebertscore_f1-9": 0.9065616726875305,
        "codebertscore_f3-9": 0.9108115434646606,
        "codebertscore_f1-4": 0.9356915950775146,
        "codebertscore_f3-4": 0.9400126338005066,
        "codebertscore_f1-14": 0.8457592725753784,
        "codebertscore_f3-14": 0.8517550826072693,
        "codebertscore_f1-5": 0.9614105224609375,
        "codebertscore_f3-5": 0.9614105224609375,
        "codebertscore_f1-19": 0.9207710027694702,
        "codebertscore_f3-19": 0.9257673025131226,
        "codebertscore_s_f1-3": 0.9079382419586182,
        "codebertscore_s_f3-3": 0.933644711971283,
        "codebertscore_s_f1-0": 0.9170650839805603,
        "codebertscore_s_f3-0": 0.9256236553192139,
        "codebertscore_s_f1-8": 0.7588177919387817,
        "codebertscore_s_f3-8": 0.7529297471046448,
        "codebertscore_s_f1-7": 0.9404505491256714,
        "codebertscore_s_f3-7": 0.9373281598091125,
        "codebertscore_s_f1-16": 0.9045982360839844,
        "codebertscore_s_f3-16": 0.9113205671310425,
        "codebertscore_s_f1-2": 0.9423637986183167,
        "codebertscore_s_f3-2": 0.9473904967308044,
        "codebertscore_s_f1-11": 0.8001773357391357,
        "codebertscore_s_f3-11": 0.8184519410133362,
        "codebertscore_s_f1-1": 0.7383131384849548,
        "codebertscore_s_f3-1": 0.812264084815979,
        "codebertscore_s_f1-10": 0.881871223449707,
        "codebertscore_s_f3-10": 0.8969680070877075,
        "codebertscore_s_f1-17": 0.7494946718215942,
        "codebertscore_s_f3-17": 0.7622193098068237,
        "codebertscore_s_f1-12": 0.9493222236633301,
        "codebertscore_s_f3-12": 0.9494458436965942,
        "codebertscore_s_f1-6": 0.8674455881118774,
        "codebertscore_s_f3-6": 0.8913455009460449,
        "codebertscore_s_f1-18": 0.9398515224456787,
        "codebertscore_s_f3-18": 0.9350384473800659,
        "codebertscore_s_f1-15": 0.968119740486145,
        "codebertscore_s_f3-15": 0.9682379961013794,
        "codebertscore_s_f1-13": 0.9640952348709106,
        "codebertscore_s_f3-13": 0.9640952348709106,
        "codebertscore_s_f1-9": 0.9208192825317383,
        "codebertscore_s_f3-9": 0.9274380803108215,
        "codebertscore_s_f1-4": 0.9398558139801025,
        "codebertscore_s_f3-4": 0.9452535510063171,
        "codebertscore_s_f1-14": 0.8636220693588257,
        "codebertscore_s_f3-14": 0.8679890036582947,
        "codebertscore_s_f1-5": 0.9632933139801025,
        "codebertscore_s_f3-5": 0.9632933139801025,
        "codebertscore_s_f1-19": 0.9253913760185242,
        "codebertscore_s_f3-19": 0.9310024976730347,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\nfunction fruit_distribution(s, n){\n",
        "snippet": [
            "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n"
        ],
        "simplified": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "task_id": "67",
        "3": "var str = s.split(\" \");\n    var len = str.length;\n    var sum = 0;\n    var str1 = [];\n    var str2 = [];\n    for(var i = 0; i < len; i++){\n        if(str[i] == \"apples\"){\n            str1.push(str[i-1]);\n        }\n        if(str[i] == \"oranges\"){\n            str2.push(str[i-1]);\n        }\n    }\n    var str3 = str1.concat(str2);\n    var str4 = str3.join(\" \");\n    var str5 = str4.split(\" \");\n    var len2 = str5.length;\n    for(var j = 0; j < len2; j++){\n        sum += parseInt(str5[j]);\n    }\n    var n1 = n - sum;\n    return n1;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let regex = /\\d+/g;\n    let numbers = s.match(regex);\n    return n - parseInt(numbers[0]) - parseInt(numbers[1]);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let arr = s.split(\" \")\n    let num1 = arr[0]\n    let num2 = arr[3]\n    let str = n - parseInt(num1) - parseInt(num2)\n    return str\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "s=s.split(\" \");\n    return n-(s[0]-0) - (s[4]-0);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "// let a = s.split(' ')\n    // let apple = parseInt(a[0])\n    // let orange = parseInt(a[4])\n    // console.log(apple + orange)\n    // return n - (apple + orange)\n    let apple = s.split(' ')[0]\n    let orange = s.split(' ')[4]\n    let a = parseInt(apple)\n    let o = parseInt(orange)\n    console.log(o)\n    return n - (a + o)\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let sArr = s.split(\" \");\n    return n - parseInt(sArr[0]) - parseInt(sArr[2]);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s.length == 0 || typeof s != \"string\") return \"Invalid input\";\n    let num = \"0123456789\";\n    let fruits = s.split(\" \");\n    let num_of_apples = 0;\n    let num_of_oranges = 0;\n    let total_fruits = 0;\n    for(let i = 0; i < fruits.length; i++){\n        for(let j = 0; j < fruits[i].length; j++){\n            if(num.includes(fruits[i][j])){\n                if(fruits[i-1] == \"apples\"){\n                    num_of_apples = parseInt(fruits[i]);\n                }else if(fruits[i-1] == \"oranges\"){\n                    num_of_oranges = parseInt(fruits[i]);\n                }\n            }\n        }\n    }\n    return n - num_of_apples - num_of_oranges;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "10": "let left = s.split(\" \")[0];\n    let right = s.split(\" \")[2];\n    let result = n - parseInt(left) - parseInt(right);\n    return result;\n\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "12": "var s = s.split(\" \");\n\tvar a = parseInt(s[0]);\n\tvar o = parseInt(s[3]);\n\treturn n - a - o;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var arr = s.split(\" \");\n    var apples = Number(arr[0]);\n    var oranges = Number(arr[2]);\n    var mango = n - apples - oranges;\n    return mango;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var a = s.split(\" \");\n\tvar b = a[0];\n\tvar c = a[2];\n\tvar d = n - b - c;\n\treturn d;\n}\nfruit_distribution(\"5 apples and 6 oranges\", 19);",
        "grade-18": {
            "execution": 0
        },
        "15": "var arr = s.split(\" \");\n    var apple = arr[0];\n    var orange = arr[2];\n    return n - apple - orange;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let apple = +s.split(\" \")[0];\n    let orange = +s.split(\" \")[2];\n    return n - apple - orange;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let x = s.split(\" \");\n    let a = parseInt(x[0]);\n    let o = parseInt(x[3]);\n    let m = n - a - o;\n    return m;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var split = s.split(\" \");\n    return n - split[0] - split[2];\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var arr = s.split(\" \");\n\tvar num = n - arr[0] - arr[3];\n\treturn num;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var arr = s.split(\" \");\n    return n - Number(arr[0]) - Number(arr[4]);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.08535514242243886,
        "bleu-0": 0.048518086840990786,
        "bleu-8": 0.11654658010980189,
        "bleu-7": 0.12596769565734417,
        "bleu-16": 0.09028588513155215,
        "bleu-2": 0.12333784476490221,
        "bleu-11": 0.06791120349799454,
        "bleu-1": 3.221340285992517e-27,
        "bleu-10": 0.13581516460846696,
        "bleu-17": 3.221340285992517e-27,
        "bleu-12": 0.1335662734484294,
        "bleu-6": 0.1321382314077991,
        "bleu-18": 0.1334781568874257,
        "bleu-15": 0.11621427850144983,
        "bleu-13": 0.12424481176790182,
        "bleu-9": 0.1274756433318781,
        "bleu-4": 0.08051704596422928,
        "bleu-14": 0.09488295238302441,
        "bleu-5": 0.11448943490106324,
        "bleu-19": 3.221340285992517e-27,
        "codebleu-3": 0.5948768845299445,
        "codebleu-0": 0.27298834959948304,
        "codebleu-8": 0.3573550883950658,
        "codebleu-7": 0.2263108830526033,
        "codebleu-16": 0.5380972929119963,
        "codebleu-2": 0.2592662705298324,
        "codebleu-11": 0.5614640149128772,
        "codebleu-1": 0.007092198581560283,
        "codebleu-10": 0.39640298415599523,
        "codebleu-17": 0.007092198581560283,
        "codebleu-12": 0.3288514759649115,
        "codebleu-6": 0.35505575995796074,
        "codebleu-18": 0.34572121603183137,
        "codebleu-15": 0.26904183296292394,
        "codebleu-13": 0.29138397207495387,
        "codebleu-9": 0.35352705463875317,
        "codebleu-4": 0.1943331905934591,
        "codebleu-14": 0.23840112506990715,
        "codebleu-5": 0.2530713438440561,
        "codebleu-19": 0.007092198581560283,
        "chrf-3": 0.23975147362244864,
        "chrf-0": 0.1668158250670217,
        "chrf-8": 0.1978402339546076,
        "chrf-7": 0.1793130137053124,
        "chrf-16": 0.1845153033172072,
        "chrf-2": 0.19799561748408764,
        "chrf-11": 0.19895532326751555,
        "chrf-1": 0.01094091903719912,
        "chrf-10": 0.2074774041903745,
        "chrf-17": 0.01094091903719912,
        "chrf-12": 0.20245255453152453,
        "chrf-6": 0.2284180031553383,
        "chrf-18": 0.20570987879366245,
        "chrf-15": 0.19462783818809476,
        "chrf-13": 0.20284755415707964,
        "chrf-9": 0.18205615900152014,
        "chrf-4": 0.20159075513103555,
        "chrf-14": 0.18290529639103467,
        "chrf-5": 0.23079579563553462,
        "chrf-19": 0.01094091903719912,
        "rougel-3": 0.2693877551020408,
        "rougel-0": 0.2692307692307692,
        "rougel-8": 0.26666666666666666,
        "rougel-7": 0.3617021276595745,
        "rougel-16": 0.2937853107344633,
        "rougel-2": 0.32653061224489793,
        "rougel-11": 0.21666666666666667,
        "rougel-1": 0.031746031746031744,
        "rougel-10": 0.32432432432432434,
        "rougel-17": 0.031746031746031744,
        "rougel-12": 0.34285714285714286,
        "rougel-6": 0.33333333333333337,
        "rougel-18": 0.26086956521739135,
        "rougel-15": 0.288659793814433,
        "rougel-13": 0.31999999999999995,
        "rougel-9": 0.29090909090909095,
        "rougel-4": 0.3448275862068966,
        "rougel-14": 0.3043478260869565,
        "rougel-5": 0.3655913978494624,
        "rougel-19": 0.031746031746031744,
        "meteor-3": 0.3707297487201794,
        "meteor-0": 0.24857093663911844,
        "meteor-8": 0.19012063227953413,
        "meteor-7": 0.2772204927168607,
        "meteor-16": 0.32890663694898475,
        "meteor-2": 0.2597593470609344,
        "meteor-11": 0.3310139734756743,
        "meteor-1": 0.008944543828264758,
        "meteor-10": 0.25150576606260294,
        "meteor-17": 0.008944543828264758,
        "meteor-12": 0.2568812533615996,
        "meteor-6": 0.24432027225901398,
        "meteor-18": 0.20348365367707727,
        "meteor-15": 0.24157647157745252,
        "meteor-13": 0.26804037938876246,
        "meteor-9": 0.22665902953931757,
        "meteor-4": 0.21941109205260148,
        "meteor-14": 0.2266474456818739,
        "meteor-5": 0.28042467287799966,
        "meteor-19": 0.008944543828264758,
        "ruby-3": 0.1693989071038251,
        "ruby-0": 0.19354838709677424,
        "ruby-8": 0.22580645161290325,
        "ruby-7": 0.25806451612903225,
        "ruby-16": 0.16521739130434787,
        "ruby-2": 0.22580645161290325,
        "ruby-11": 0.1460674157303371,
        "ruby-1": 0.016129032258064502,
        "ruby-10": 0.24193548387096775,
        "ruby-17": 0.016129032258064502,
        "ruby-12": 0.24193548387096775,
        "ruby-6": 0.24193548387096775,
        "ruby-18": 0.20967741935483875,
        "ruby-15": 0.22580645161290325,
        "ruby-13": 0.20967741935483875,
        "ruby-9": 0.19354838709677424,
        "ruby-4": 0.22580645161290325,
        "ruby-14": 0.20967741935483875,
        "ruby-5": 0.27419354838709675,
        "ruby-19": 0.016129032258064502,
        "codebertscore_f1-3": 0.6812660694122314,
        "codebertscore_f3-3": 0.7171939611434937,
        "codebertscore_f1-0": 0.7304304242134094,
        "codebertscore_f3-0": 0.7212111949920654,
        "codebertscore_f1-8": 0.7494266033172607,
        "codebertscore_f3-8": 0.7341439723968506,
        "codebertscore_f1-7": 0.7416536211967468,
        "codebertscore_f3-7": 0.7082070112228394,
        "codebertscore_f1-16": 0.7177636623382568,
        "codebertscore_f3-16": 0.7101306915283203,
        "codebertscore_f1-2": 0.7526161074638367,
        "codebertscore_f3-2": 0.7293537855148315,
        "codebertscore_f1-11": 0.6413467526435852,
        "codebertscore_f3-11": 0.6679709553718567,
        "codebertscore_f1-1": 0.0,
        "codebertscore_f3-1": 0.0,
        "codebertscore_f1-10": 0.7522110342979431,
        "codebertscore_f3-10": 0.7255407571792603,
        "codebertscore_f1-17": 0.0,
        "codebertscore_f3-17": 0.0,
        "codebertscore_f1-12": 0.7549445033073425,
        "codebertscore_f3-12": 0.7259035706520081,
        "codebertscore_f1-6": 0.7568580508232117,
        "codebertscore_f3-6": 0.7316722273826599,
        "codebertscore_f1-18": 0.7360072731971741,
        "codebertscore_f3-18": 0.7218114733695984,
        "codebertscore_f1-15": 0.7508807182312012,
        "codebertscore_f3-15": 0.7200766205787659,
        "codebertscore_f1-13": 0.7457966804504395,
        "codebertscore_f3-13": 0.7114499807357788,
        "codebertscore_f1-9": 0.7463647723197937,
        "codebertscore_f3-9": 0.7237184643745422,
        "codebertscore_f1-4": 0.7654143571853638,
        "codebertscore_f3-4": 0.72441166639328,
        "codebertscore_f1-14": 0.7669761180877686,
        "codebertscore_f3-14": 0.7305723428726196,
        "codebertscore_f1-5": 0.7764913439750671,
        "codebertscore_f3-5": 0.7325550317764282,
        "codebertscore_f1-19": 0.0,
        "codebertscore_f3-19": 0.0,
        "codebertscore_s_f1-3": 0.7109895348548889,
        "codebertscore_s_f3-3": 0.7312425374984741,
        "codebertscore_s_f1-0": 0.7424418330192566,
        "codebertscore_s_f3-0": 0.7314939498901367,
        "codebertscore_s_f1-8": 0.755338191986084,
        "codebertscore_s_f3-8": 0.7380951642990112,
        "codebertscore_s_f1-7": 0.7453271150588989,
        "codebertscore_s_f3-7": 0.7108483910560608,
        "codebertscore_s_f1-16": 0.7330747246742249,
        "codebertscore_s_f3-16": 0.7292015552520752,
        "codebertscore_s_f1-2": 0.7601805925369263,
        "codebertscore_s_f3-2": 0.7338149547576904,
        "codebertscore_s_f1-11": 0.6629781126976013,
        "codebertscore_s_f3-11": 0.686447024345398,
        "codebertscore_s_f1-1": 0.0,
        "codebertscore_s_f3-1": 0.0,
        "codebertscore_s_f1-10": 0.7597020268440247,
        "codebertscore_s_f3-10": 0.7342022061347961,
        "codebertscore_s_f1-17": 0.0,
        "codebertscore_s_f3-17": 0.0,
        "codebertscore_s_f1-12": 0.7755961418151855,
        "codebertscore_s_f3-12": 0.7417827844619751,
        "codebertscore_s_f1-6": 0.7639437913894653,
        "codebertscore_s_f3-6": 0.7385285496711731,
        "codebertscore_s_f1-18": 0.7445344924926758,
        "codebertscore_s_f3-18": 0.7317028045654297,
        "codebertscore_s_f1-15": 0.7718420624732971,
        "codebertscore_s_f3-15": 0.738715410232544,
        "codebertscore_s_f1-13": 0.7580512166023254,
        "codebertscore_s_f3-13": 0.7230809926986694,
        "codebertscore_s_f1-9": 0.7538994550704956,
        "codebertscore_s_f3-9": 0.730881929397583,
        "codebertscore_s_f1-4": 0.7765669226646423,
        "codebertscore_s_f3-4": 0.7347941994667053,
        "codebertscore_s_f1-14": 0.7740731239318848,
        "codebertscore_s_f3-14": 0.7350465059280396,
        "codebertscore_s_f1-5": 0.7862029075622559,
        "codebertscore_s_f3-5": 0.7427892684936523,
        "codebertscore_s_f1-19": 0.0,
        "codebertscore_s_f3-19": 0.0,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 0,
        "raw_gpt35_nsnr-19": "0",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 0,
        "raw_gpt35_nswr-1": "0",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "0",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 0,
        "raw_gpt35_nswr-19": "0"
    },
    {
        "intent": "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nfunction string_sequence(n){\n",
        "snippet": [
            "  return [...Array(n).keys(), n].join(' ')\n}\n\n"
        ],
        "simplified": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
        "task_id": "15",
        "3": "var output = '';\n    for(var i = 0; i <= n; i++){\n        output += i;\n        if(i != n){\n            output += ' ';\n        }\n    }\n    return output;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var string = \"\";\n\tfor(var i = 0; i <= n; i++){\n\t\tstring += i + \" \";\n\t}\n\treturn string;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var temp = '';\n    for(var i = 0; i < n; i++){\n        temp += i + ' ';\n    }\n    return temp + n;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n === 0) {\n        return '0';\n    } else {\n        return string_sequence(n - 1) + ' ' + n;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var answer = '';\n  var counter = 0;\n  while (counter <= n){\n    answer += counter.toString() + ' ';\n    counter++;\n  }\n  return answer;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// Your code here\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "const sequence = [];\n    for (let i = 0; i <= n; i++) {\n        sequence.push(i.toString());\n    }\n    return sequence.join(' ');\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "10": "var seq=\"\";\n    for(var i=0;i<=n;i++){\n        seq+=i;\n        if(i!=n){\n            seq+=\" \";\n        }\n    }\n    return seq;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if (n == 0) {\n        return \"0\";\n    }\n    else if (n > 0) {\n        return string_sequence(n-1) + \" \" + n;\n    }\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "}",
        "grade-12": {
            "execution": 0
        },
        "6": "let res = '';\n    for(let i = 0; i <= n; i++){\n        res += `${i} `;\n    }\n    return res.trim();\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var range = '';\n    for(var i = 0; i < n; i++){\n        range += i + ' ';\n    }\n    return range + n;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.slice(0, result.length - 1);\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var i;\nvar result = \"\";\nfor (i = 0; i <= n; i++){\nresult += i + \" \";\n}\nreturn result;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var seq_str = '';\n    for(var i = 0; i <= n; i++){\n        seq_str += i.toString() + ' ';\n    }\n    return seq_str.trim();\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var output = \"\";\n    for(var i = 0; i <= n; i++){\n        output += i + \" \";\n    }\n    return output;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var s = \"\";\n    for(var i = 0; i <= n; i++){\n        s += (i).toString() + \" \";\n    }\n    return s;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var a = []\n\tfor (var i = 0; i <= n; i++){\n\t\ta.push(i)\n\t}\n\treturn a.join(' ')\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let result = '';\n    for(i=0; i<=n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.027049400360592182,
        "bleu-0": 0.028048598302198354,
        "bleu-8": 0.028182998883818935,
        "bleu-7": 0.04125506455013979,
        "bleu-16": 0.03524396846737171,
        "bleu-2": 0.004773955310936996,
        "bleu-11": 0.13296045268639284,
        "bleu-1": 2.7894680928689257e-10,
        "bleu-10": 0.027049400360592182,
        "bleu-17": 0.0370909124380632,
        "bleu-12": 2.7894680928689257e-10,
        "bleu-6": 0.03105957907531947,
        "bleu-18": 0.028182998883818935,
        "bleu-15": 0.02433002721900354,
        "bleu-13": 0.026510202602018675,
        "bleu-9": 0.030876289635639046,
        "bleu-4": 0.028048598302198354,
        "bleu-14": 0.03510853679656039,
        "bleu-5": 0.18144138015023187,
        "bleu-19": 0.03354647523072955,
        "codebleu-3": 0.3419354838709677,
        "codebleu-0": 0.2877112135176651,
        "codebleu-8": 0.29308755760368665,
        "codebleu-7": 0.3800307219662058,
        "codebleu-16": 0.39907834101382483,
        "codebleu-2": 0.09555431282757065,
        "codebleu-11": 0.5541109203018028,
        "codebleu-1": 0.0380952380967378,
        "codebleu-10": 0.3419354838709677,
        "codebleu-17": 0.3907834101382488,
        "codebleu-12": 0.0380952380967378,
        "codebleu-6": 0.3800307219662058,
        "codebleu-18": 0.29308755760368665,
        "codebleu-15": 0.40983102918586783,
        "codebleu-13": 0.2877112135176651,
        "codebleu-9": 0.45330261136712746,
        "codebleu-4": 0.2877112135176651,
        "codebleu-14": 0.44792626728110596,
        "codebleu-5": 0.5568147307930877,
        "codebleu-19": 0.3800307219662058,
        "chrf-3": 0.13597331883363878,
        "chrf-0": 0.1359270479596725,
        "chrf-8": 0.14325713458344963,
        "chrf-7": 0.15708893776335503,
        "chrf-16": 0.14890231680450358,
        "chrf-2": 0.045219360297907844,
        "chrf-11": 0.26831399626300484,
        "chrf-1": 0.032679738562091505,
        "chrf-10": 0.13969805117656556,
        "chrf-17": 0.14874705988683498,
        "chrf-12": 0.032679738562091505,
        "chrf-6": 0.15159685334576745,
        "chrf-18": 0.15728351559551595,
        "chrf-15": 0.13880001338933065,
        "chrf-13": 0.130776380732524,
        "chrf-9": 0.15909819177162338,
        "chrf-4": 0.12025717576558723,
        "chrf-14": 0.16101984094378033,
        "chrf-5": 0.3319046976579662,
        "chrf-19": 0.14874705988683498,
        "rougel-3": 0.22535211267605634,
        "rougel-0": 0.20338983050847456,
        "rougel-8": 0.2,
        "rougel-7": 0.2909090909090909,
        "rougel-16": 0.28125,
        "rougel-2": 0.06896551724137931,
        "rougel-11": 0.4057971014492754,
        "rougel-1": 0.08333333333333333,
        "rougel-10": 0.22535211267605634,
        "rougel-17": 0.30000000000000004,
        "rougel-12": 0.08333333333333333,
        "rougel-6": 0.2153846153846154,
        "rougel-18": 0.2,
        "rougel-15": 0.2571428571428572,
        "rougel-13": 0.19672131147540983,
        "rougel-9": 0.29411764705882354,
        "rougel-4": 0.20338983050847456,
        "rougel-14": 0.30303030303030304,
        "rougel-5": 0.4590163934426229,
        "rougel-19": 0.22580645161290322,
        "meteor-3": 0.2492156862745098,
        "meteor-0": 0.1973628957755942,
        "meteor-8": 0.21804559426229506,
        "meteor-7": 0.2658995815899582,
        "meteor-16": 0.25625,
        "meteor-2": 0.023474178403755867,
        "meteor-11": 0.5537699850923862,
        "meteor-1": 0.024038461538461536,
        "meteor-10": 0.2492156862745098,
        "meteor-17": 0.30239640255009115,
        "meteor-12": 0.024038461538461536,
        "meteor-6": 0.20080321285140562,
        "meteor-18": 0.21804559426229506,
        "meteor-15": 0.29049103237095364,
        "meteor-13": 0.19575177009579345,
        "meteor-9": 0.359608340377571,
        "meteor-4": 0.1973628957755942,
        "meteor-14": 0.2951388888888889,
        "meteor-5": 0.5733418367346939,
        "meteor-19": 0.2583333333333333,
        "ruby-3": 0.16666666666666663,
        "ruby-0": 0.16666666666666663,
        "ruby-8": 0.16216216216216217,
        "ruby-7": 0.125,
        "ruby-16": 0.1707317073170732,
        "ruby-2": 0.04347826086956519,
        "ruby-11": 0.28260869565217395,
        "ruby-1": 0.04347826086956519,
        "ruby-10": 0.16666666666666663,
        "ruby-17": 0.18918918918918914,
        "ruby-12": 0.04347826086956519,
        "ruby-6": 0.1428571428571429,
        "ruby-18": 0.16216216216216217,
        "ruby-15": 0.14893617021276595,
        "ruby-13": 0.1578947368421053,
        "ruby-9": 0.19999999999999996,
        "ruby-4": 0.16666666666666663,
        "ruby-14": 0.18604651162790697,
        "ruby-5": 0.3421052631578947,
        "ruby-19": 0.17948717948717952,
        "codebertscore_f1-3": 0.7084215879440308,
        "codebertscore_f3-3": 0.722198486328125,
        "codebertscore_f1-0": 0.7241471409797668,
        "codebertscore_f3-0": 0.7397810816764832,
        "codebertscore_f1-8": 0.7167198061943054,
        "codebertscore_f3-8": 0.7326449751853943,
        "codebertscore_f1-7": 0.7357244491577148,
        "codebertscore_f3-7": 0.7533385753631592,
        "codebertscore_f1-16": 0.7046023607254028,
        "codebertscore_f3-16": 0.7247224450111389,
        "codebertscore_f1-2": 0.6422239542007446,
        "codebertscore_f3-2": 0.6278048753738403,
        "codebertscore_f1-11": 0.7455453276634216,
        "codebertscore_f3-11": 0.772125780582428,
        "codebertscore_f1-1": 0.0,
        "codebertscore_f3-1": 0.0,
        "codebertscore_f1-10": 0.6984632611274719,
        "codebertscore_f3-10": 0.71164470911026,
        "codebertscore_f1-17": 0.7296058535575867,
        "codebertscore_f3-17": 0.7507219910621643,
        "codebertscore_f1-12": 0.0,
        "codebertscore_f3-12": 0.0,
        "codebertscore_f1-6": 0.7265441417694092,
        "codebertscore_f3-6": 0.7404599189758301,
        "codebertscore_f1-18": 0.7189993262290955,
        "codebertscore_f3-18": 0.7340845465660095,
        "codebertscore_f1-15": 0.6996126770973206,
        "codebertscore_f3-15": 0.7241158485412598,
        "codebertscore_f1-13": 0.712779700756073,
        "codebertscore_f3-13": 0.7277231812477112,
        "codebertscore_f1-9": 0.7154625058174133,
        "codebertscore_f3-9": 0.7400975823402405,
        "codebertscore_f1-4": 0.7192363142967224,
        "codebertscore_f3-4": 0.7328822612762451,
        "codebertscore_f1-14": 0.7204666137695312,
        "codebertscore_f3-14": 0.7359605431556702,
        "codebertscore_f1-5": 0.7628738284111023,
        "codebertscore_f3-5": 0.7858362793922424,
        "codebertscore_f1-19": 0.7170736193656921,
        "codebertscore_f3-19": 0.7335280179977417,
        "codebertscore_s_f1-3": 0.7096914649009705,
        "codebertscore_s_f3-3": 0.7254971265792847,
        "codebertscore_s_f1-0": 0.7304362058639526,
        "codebertscore_s_f3-0": 0.7503497004508972,
        "codebertscore_s_f1-8": 0.7389088273048401,
        "codebertscore_s_f3-8": 0.7553066611289978,
        "codebertscore_s_f1-7": 0.7410826683044434,
        "codebertscore_s_f3-7": 0.7602847218513489,
        "codebertscore_s_f1-16": 0.7160117030143738,
        "codebertscore_s_f3-16": 0.7398363947868347,
        "codebertscore_s_f1-2": 0.5820281505584717,
        "codebertscore_s_f3-2": 0.5749768614768982,
        "codebertscore_s_f1-11": 0.7606144547462463,
        "codebertscore_s_f3-11": 0.805576741695404,
        "codebertscore_s_f1-1": 0.0,
        "codebertscore_s_f3-1": 0.0,
        "codebertscore_s_f1-10": 0.7060444355010986,
        "codebertscore_s_f3-10": 0.7238487005233765,
        "codebertscore_s_f1-17": 0.7321276068687439,
        "codebertscore_s_f3-17": 0.7553721070289612,
        "codebertscore_s_f1-12": 0.0,
        "codebertscore_s_f3-12": 0.0,
        "codebertscore_s_f1-6": 0.7385066151618958,
        "codebertscore_s_f3-6": 0.7627923488616943,
        "codebertscore_s_f1-18": 0.742606520652771,
        "codebertscore_s_f3-18": 0.7605528831481934,
        "codebertscore_s_f1-15": 0.7150532007217407,
        "codebertscore_s_f3-15": 0.7488523721694946,
        "codebertscore_s_f1-13": 0.7233821153640747,
        "codebertscore_s_f3-13": 0.7394341230392456,
        "codebertscore_s_f1-9": 0.7297214865684509,
        "codebertscore_s_f3-9": 0.7640392184257507,
        "codebertscore_s_f1-4": 0.7297514081001282,
        "codebertscore_s_f3-4": 0.7471607327461243,
        "codebertscore_s_f1-14": 0.7284883856773376,
        "codebertscore_s_f3-14": 0.7476450204849243,
        "codebertscore_s_f1-5": 0.776480495929718,
        "codebertscore_s_f3-5": 0.8133559226989746,
        "codebertscore_s_f1-19": 0.7346733808517456,
        "codebertscore_s_f3-19": 0.7617257237434387,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0- The code snippet does not contain any implementation for the given problem.",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n",
        "snippet": [
            "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n"
        ],
        "simplified": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "task_id": "75",
        "3": "if(typeof a !== \"number\"){\n        throw \"Error\";\n    }\n    if(a > 100){\n        throw \"Number is too big\";\n    }\n    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(var i = 0; i < primes.length; i++){\n        for(var j = 0; j < primes.length; j++){\n            for(var k = 0; k < primes.length; k++){\n                if(primes[i] * primes[j] * primes[k] === a){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for(var i = 2; i < a; i++){\n\t\tif(is_prime(i) && a % i == 0){\n\t\t\tfor(var j = 2; j < a; j++){\n\t\t\t\tif(is_prime(j) && a % j == 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let a1 = 2;\n    let a2 = 3;\n    let a3 = 5;\n    let res = a1 * a2 * a3;\n    if (a == res) {\n        return true;\n    }\n    return false;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for(let i = 0; i < primes.length; i++){\n    for(let j = 0; j < primes.length; j++){\n      for(let k = 0; k < primes.length; k++){\n        if(primes[i] * primes[j] * primes[k] == a){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var prime=true;\n    for(i=2;i<=a;i++){\n        for(j=2;j<=a;j++){\n            if(i!=j && i*j==a){\n                for(k=2;k<=i;k++){\n                    if(i%k==0){\n                        break;\n                    }\n                }\n                if(k==i){\n                    for(k=2;k<=j;k++){\n                        if(j%k==0){\n                            break;\n                        }\n                    }\n                    if(k==j){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//Write your code here!\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "for(var i = 2; i < a/2; i++){\n        for(var j = 2; j < a/2; j++){\n            for(var k = 2; k < a/2; k++){\n                if((i*j*k) === a && i < 100 && j < 100 && k < 100){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(let i = 2; i < a; i++){\n        if(a % i === 0){\n            for(let j = i; j < a; j++){\n                if(a % j === 0){\n                    for(let k = j; k < a; k++){\n                        if(a % k === 0){\n                            if(i * j * k === a){\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if ( a % 2 != 0 && a % 3 != 0 && a % 5 != 0){\n\t\treturn false;\n\t} else if ( a % 2 === 0 && a % 3 === 0 && a % 5 === 0){\n\t\treturn true;\n\t} else if ( a % 2 === 0 && a % 3 === 0){\n\t\treturn true;\n\t} else if ( a % 2 === 0 && a % 5 === 0){\n\t\treturn true;\n\t} else if ( a % 3 === 0 && a % 5 === 0){\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var primes =[];\n\tfor(var i = 2; i <= a; i++){\n\t\tvar prime = true;\n\t\tfor(var k = 2; k < i; k++){\n\t\t\tif(i % k == 0){\n\t\t\t\tprime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(prime){\n\t\t\tprimes.push(i);\n\t\t}\n\t}\n\tfor(var i = 0; i < primes.length; i++){\n\t\tfor(var k = 0; k < primes.length; k++){\n\t\t\tfor(var j = 0; j < primes.length; j++){\n\t\t\t\tif(primes[i] * primes[k] * primes[j] == a){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(a==0){\n\t\treturn false;\n\t}else if(a==1){\n\t\treturn true;\n\t}else{\n\t\tfor(var i=2;i<=a;i++){\n\t\t\tif(a%i==0){\n\t\t\t\ta/=i;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif(a==1){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var check = a;\n\tvar y = 1;\n\tvar num = 2;\n\tvar nums = [];\n\tvar prime = [];\n\tfor(var i = 0;i < check;i++){\n\t\tnums.push(i);\n\t}\n\tnums.shift();\n\tnums.shift();\n\twhile(true){\n\t\tif(check%num === 0){\n\t\t\ty = y * num;\n\t\t\tprime.push(num);\n\t\t\tcheck = check/num;\n\t\t}\n\t\tif(y === a){\n\t\t\tif(prime.length === 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tnum++;\n\t}\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var i = 1;\n\tif (a%2 == 0){\n\t\ti *= 2;\n\t}\n\tif (a%3 == 0){\n\t\ti *= 3;\n\t}\n\tif (a%5 == 0){\n\t\ti *= 5;\n\t}\n\tif (a%7 == 0){\n\t\ti *= 7;\n\t}\n\tif (a%11 == 0){\n\t\ti *= 11;\n\t}\n\tif (a%13 == 0){\n\t\ti *= 13;\n\t}\n\tif (a%17 == 0){\n\t\ti *= 17;\n\t}\n\tif (a%19 == 0){\n\t\ti *= 19;\n\t}\n\tif (a%23 == 0){\n\t\ti *= 23;\n\t}\n\tif (a%29 == 0){\n\t\ti *= 29;\n\t}\n\tif (a%31 == 0){\n\t\ti *= 31;\n\t}\n\tif (a%37 == 0){\n\t\ti *= 37;\n\t}\n\tif (a%41 == 0){\n\t\ti *= 41;\n\t}\n\tif (a%43 == 0){\n\t\ti *= 43;\n\t}\n\tif (a%47 == 0){\n\t\ti *= 47;\n\t}\n\tif (a%53 == 0){\n\t\ti *= 53;\n\t}\n\tif (a%59 == 0){\n\t\ti *= 59;\n\t}\n\tif (a%61 == 0){\n\t\ti *= 61;\n\t}\n\tif (a%67 == 0){\n\t\ti *= 67;\n\t}\n\tif (a%71 == 0){\n\t\ti *= 71;\n\t}\n\tif (a%73 == 0){\n\t\ti *= 73;\n\t}\n\tif (a%79 == 0){\n\t\ti *= 79;\n\t}\n\tif (a%83 == 0){\n\t\ti *= 83;\n\t}\n\tif (a%89 == 0){\n\t\ti *= 89;\n\t}",
        "grade-18": {
            "execution": 0
        },
        "15": "var l = primes(a);\n  var k = l.length;\n  var j = 0;\n  while (j < k && l[j] < a/3) {\n    if (is_multiply_prime_helper(a, l[j])) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr = prime_numbers(a);\n\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = 0; j < arr.length; j++){\n\t\t\tfor(var k = 0; k < arr.length; k++){\n\t\t\t\tif(arr[i] * arr[j] * arr[k] == a){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (a < 1) {\n\t\treturn \"Not an Interger\";\n\t}\n\tif (a >= 100) {\n\t\treturn \"Out of scope\";\n\t}\n\tlet number = \"\";\n\tlet counter = 0;\n\tlet arr = [];\n\tlet array = [];\n\tfor (let i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tnumber += i + \" \";\n\t\t\tarr.push(i);\n\t\t\tcounter++;\n\t\t}\n\t}\n\tif (counter == 3) {\n\t\tfor (let j = 0; j < arr.length; j++) {\n\t\t\tfor (let i = 2; i <= arr[j]; i++) {\n\t\t\t\tif (arr[j] % i == 0) {\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (counter == 2) {\n\t\t\t\tarray.push(arr[j]);\n\t\t\t}\n\t\t\tcounter = 0;\n\t\t}\n\t\tif (array.length == 3) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var a = 12;\n    var first = 2;\n    var second = 3;\n    var third = 5;\n    return first * second * third == a;\n}\nis_multiply_prime();",
        "grade-4": {
            "execution": 0
        },
        "14": "for(let i = 2; i < a; i++){\n        for(let j = 2; j < a; j++){\n            for(let k = 2; k < a; k++){\n                if(a === i * j * k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let primes = [];\n    let t = 3;\n    if(a === 1) {\n        return true;\n    }\n    for(let i = 2; i < a; i++){\n        for(let j = 2; j <= i; j++){\n            if(i === j){\n                primes.push(i);\n            }\n            if(i % j === 0){\n                break;\n            }\n        }\n    }\n    while(t < a){\n        let primes_two = [];\n        for(let k = 0; k < primes.length; k++){\n            if(t % primes[k] === 0){\n                primes_two.push(primes[k]);\n            }\n        }\n        if(primes_two.length === 3){\n            return true;\n        }\n        t++;\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let primes= getPrimes(a);\n\tlet n;\n\tfor(let i=0; i<primes.length; i++){\n\t\tif(a%primes[i]==0){\n\t\t\ta/=primes[i];\n\t\t\ti=0;\n\t\t\tn++;\n\t\t}\n\t\tif(n==3){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.22442581571253392,
        "bleu-0": 0.23059781658059667,
        "bleu-8": 0.019301566917303437,
        "bleu-7": 0.3162877357178527,
        "bleu-16": 0.4320506034699054,
        "bleu-2": 3.491022220370388e-09,
        "bleu-11": 0.31570928210998056,
        "bleu-1": 0.41709937730269553,
        "bleu-10": 0.10693352098768803,
        "bleu-17": 0.33768903639830183,
        "bleu-12": 0.17549106939750192,
        "bleu-6": 0.19999469772815037,
        "bleu-18": 0.023143157111990834,
        "bleu-15": 0.05979205199631834,
        "bleu-13": 0.2388310394225578,
        "bleu-9": 0.2298409531911424,
        "bleu-4": 0.004705325187652189,
        "bleu-14": 0.2837169892165683,
        "bleu-5": 0.3780710778848875,
        "bleu-19": 0.1571455220726494,
        "codebleu-3": 0.48812775334220626,
        "codebleu-0": 0.32779208384646413,
        "codebleu-8": 0.15046010711424523,
        "codebleu-7": 0.4426517831911282,
        "codebleu-16": 0.5923632764286832,
        "codebleu-2": 0.01683501691483343,
        "codebleu-11": 0.4038756338184748,
        "codebleu-1": 0.4725238124800751,
        "codebleu-10": 0.30649729217298666,
        "codebleu-17": 0.6181615679464454,
        "codebleu-12": 0.30256483644787024,
        "codebleu-6": 0.500100101231655,
        "codebleu-18": 0.44241969241969237,
        "codebleu-15": 0.22334036134077487,
        "codebleu-13": 0.41122070842707253,
        "codebleu-9": 0.6245521617771932,
        "codebleu-4": 0.1321956735733456,
        "codebleu-14": 0.3464221956297296,
        "codebleu-5": 0.6395201728224744,
        "codebleu-19": 0.31062568240006166,
        "chrf-3": 0.2885398011054466,
        "chrf-0": 0.2973169845002009,
        "chrf-8": 0.15048835601714886,
        "chrf-7": 0.3193900166407793,
        "chrf-16": 0.3574448366008303,
        "chrf-2": 0.015343321220690556,
        "chrf-11": 0.29690566227142334,
        "chrf-1": 0.369735658263776,
        "chrf-10": 0.2452120241595408,
        "chrf-17": 0.366000968362687,
        "chrf-12": 0.28826399888463977,
        "chrf-6": 0.26167987737240317,
        "chrf-18": 0.09728501620579594,
        "chrf-15": 0.17647293646624337,
        "chrf-13": 0.26334792761668974,
        "chrf-9": 0.3626931559211997,
        "chrf-4": 0.0978469908297348,
        "chrf-14": 0.3406463121443933,
        "chrf-5": 0.42115642586963126,
        "chrf-19": 0.25954572130930276,
        "rougel-3": 0.43396226415094336,
        "rougel-0": 0.488479262672811,
        "rougel-8": 0.28571428571428575,
        "rougel-7": 0.47349823321554774,
        "rougel-16": 0.5583038869257951,
        "rougel-2": 0.02666666666666667,
        "rougel-11": 0.5400843881856541,
        "rougel-1": 0.608,
        "rougel-10": 0.27777777777777773,
        "rougel-17": 0.513157894736842,
        "rougel-12": 0.4317180616740088,
        "rougel-6": 0.38545454545454544,
        "rougel-18": 0.2523540489642185,
        "rougel-15": 0.3121951219512195,
        "rougel-13": 0.5508474576271187,
        "rougel-9": 0.4376731301939058,
        "rougel-4": 0.20338983050847453,
        "rougel-14": 0.5887850467289719,
        "rougel-5": 0.5367412140575081,
        "rougel-19": 0.4200913242009133,
        "meteor-3": 0.43113775198295734,
        "meteor-0": 0.34212206686074287,
        "meteor-8": 0.18858118361153262,
        "meteor-7": 0.3959464864556001,
        "meteor-16": 0.5466352278460955,
        "meteor-2": 0.007776049766718507,
        "meteor-11": 0.41580834490915,
        "meteor-1": 0.4942764271483994,
        "meteor-10": 0.2651917962657482,
        "meteor-17": 0.4960565380836431,
        "meteor-12": 0.3282883902879963,
        "meteor-6": 0.3390060993287456,
        "meteor-18": 0.24848681806900555,
        "meteor-15": 0.22257436407324552,
        "meteor-13": 0.3848093859392497,
        "meteor-9": 0.4805529426199337,
        "meteor-4": 0.109579246778681,
        "meteor-14": 0.407918504515858,
        "meteor-5": 0.5474954095330801,
        "meteor-19": 0.3342193512638075,
        "ruby-3": 0.2670454545454546,
        "ruby-0": 0.34507042253521125,
        "ruby-8": 0.176056338028169,
        "ruby-7": 0.2535211267605634,
        "ruby-16": 0.352112676056338,
        "ruby-2": 0.014084507042253502,
        "ruby-11": 0.31690140845070425,
        "ruby-1": 0.4577464788732394,
        "ruby-10": 0.14383561643835618,
        "ruby-17": 0.3395061728395061,
        "ruby-12": 0.30281690140845074,
        "ruby-6": 0.2535211267605634,
        "ruby-18": 0.16709511568123392,
        "ruby-15": 0.204225352112676,
        "ruby-13": 0.37323943661971826,
        "ruby-9": 0.29680365296803657,
        "ruby-4": 0.12676056338028174,
        "ruby-14": 0.4295774647887324,
        "ruby-5": 0.32163742690058483,
        "ruby-19": 0.295774647887324,
        "codebertscore_f1-3": 0.7585558295249939,
        "codebertscore_f3-3": 0.7820013165473938,
        "codebertscore_f1-0": 0.8225194215774536,
        "codebertscore_f3-0": 0.8032324314117432,
        "codebertscore_f1-8": 0.7385165095329285,
        "codebertscore_f3-8": 0.7149417400360107,
        "codebertscore_f1-7": 0.7875233888626099,
        "codebertscore_f3-7": 0.8117363452911377,
        "codebertscore_f1-16": 0.8127191662788391,
        "codebertscore_f3-16": 0.7950963973999023,
        "codebertscore_f1-2": 0.5491653084754944,
        "codebertscore_f3-2": 0.5181360840797424,
        "codebertscore_f1-11": 0.8192352652549744,
        "codebertscore_f3-11": 0.8081797361373901,
        "codebertscore_f1-1": 0.8420217037200928,
        "codebertscore_f3-1": 0.8206270337104797,
        "codebertscore_f1-10": 0.7376860976219177,
        "codebertscore_f3-10": 0.72472083568573,
        "codebertscore_f1-17": 0.8220658302307129,
        "codebertscore_f3-17": 0.826256513595581,
        "codebertscore_f1-12": 0.7751170992851257,
        "codebertscore_f3-12": 0.7635191679000854,
        "codebertscore_f1-6": 0.7583823800086975,
        "codebertscore_f3-6": 0.7685587406158447,
        "codebertscore_f1-18": 0.6889304518699646,
        "codebertscore_f3-18": 0.7031434178352356,
        "codebertscore_f1-15": 0.7509258985519409,
        "codebertscore_f3-15": 0.7485809922218323,
        "codebertscore_f1-13": 0.7956802248954773,
        "codebertscore_f3-13": 0.7874957323074341,
        "codebertscore_f1-9": 0.7816726565361023,
        "codebertscore_f3-9": 0.7927474975585938,
        "codebertscore_f1-4": 0.7110673189163208,
        "codebertscore_f3-4": 0.6880868077278137,
        "codebertscore_f1-14": 0.8387529253959656,
        "codebertscore_f3-14": 0.8103021383285522,
        "codebertscore_f1-5": 0.7899184226989746,
        "codebertscore_f3-5": 0.8087003231048584,
        "codebertscore_f1-19": 0.7703717350959778,
        "codebertscore_f3-19": 0.762724757194519,
        "codebertscore_s_f1-3": 0.765705943107605,
        "codebertscore_s_f3-3": 0.7891997694969177,
        "codebertscore_s_f1-0": 0.8395296335220337,
        "codebertscore_s_f3-0": 0.8226578831672668,
        "codebertscore_s_f1-8": 0.7465965747833252,
        "codebertscore_s_f3-8": 0.7187812924385071,
        "codebertscore_s_f1-7": 0.7963516116142273,
        "codebertscore_s_f3-7": 0.8165186047554016,
        "codebertscore_s_f1-16": 0.8199538588523865,
        "codebertscore_s_f3-16": 0.8010473847389221,
        "codebertscore_s_f1-2": 0.5246809124946594,
        "codebertscore_s_f3-2": 0.491436243057251,
        "codebertscore_s_f1-11": 0.8352729678153992,
        "codebertscore_s_f3-11": 0.8247772455215454,
        "codebertscore_s_f1-1": 0.8500261902809143,
        "codebertscore_s_f3-1": 0.8274542093276978,
        "codebertscore_s_f1-10": 0.752187192440033,
        "codebertscore_s_f3-10": 0.7369555830955505,
        "codebertscore_s_f1-17": 0.8270609974861145,
        "codebertscore_s_f3-17": 0.8325104713439941,
        "codebertscore_s_f1-12": 0.7860657572746277,
        "codebertscore_s_f3-12": 0.7723705768585205,
        "codebertscore_s_f1-6": 0.7662785053253174,
        "codebertscore_s_f3-6": 0.77468341588974,
        "codebertscore_s_f1-18": 0.7006841897964478,
        "codebertscore_s_f3-18": 0.7062860727310181,
        "codebertscore_s_f1-15": 0.7555670142173767,
        "codebertscore_s_f3-15": 0.7550433278083801,
        "codebertscore_s_f1-13": 0.8057118654251099,
        "codebertscore_s_f3-13": 0.7995545268058777,
        "codebertscore_s_f1-9": 0.7892976403236389,
        "codebertscore_s_f3-9": 0.8017351031303406,
        "codebertscore_s_f1-4": 0.7177257537841797,
        "codebertscore_s_f3-4": 0.6913134455680847,
        "codebertscore_s_f1-14": 0.8546525835990906,
        "codebertscore_s_f3-14": 0.8239719867706299,
        "codebertscore_s_f1-5": 0.800769031047821,
        "codebertscore_s_f3-5": 0.8187878727912903,
        "codebertscore_s_f1-19": 0.7768588662147522,
        "codebertscore_s_f3-19": 0.7681260704994202,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 2,
        "raw_gpt35_nsnr-12": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n",
        "snippet": [
            "  return number % 1.0;\n}\n\n"
        ],
        "simplified": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
        "task_id": "2",
        "0": "return number - Math.floor(number);\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return number - Math.floor(number);\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return parseFloat(number.toString().split('.')[1]);\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return parseFloat(number - Math.floor(number));\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return number % 1;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "6": "var integer = Math.floor(number);\n    var decimal = number - integer;\n    return decimal;\n}",
        "grade-6": {
            "execution": 1
        },
        "8": "return Math.trunc(number);\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "var parsed = parseInt(number);\n  if(parsed < number){\n    var diff = number - parsed;\n    return diff;\n  }else{\n    return 0;\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var integer = Math.floor(number);\n\tvar decimal = number - integer;\n\treturn decimal;\n}",
        "grade-10": {
            "execution": 1
        },
        "13": "// YOUR CODE HERE\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "let i = parseInt(number);\n    return number - i;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "//YOUR CODE HERE\n  return number - Math.floor(number);\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return Math.floor(number);\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "if(typeof number != \"number\"){\n        return null;\n    }\n    var truncated = number - parseInt(number);\n    return truncated;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var truncated = (number % 1);\n  return truncated\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let num = number - Math.floor(number);\n    return num;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.11208466750961148,
        "bleu-1": 0.11208466750961148,
        "bleu-2": 0.04334264033674369,
        "bleu-3": 0.06608973813188646,
        "bleu-4": 0.4329820146406896,
        "bleu-5": 0.0009118819655545167,
        "bleu-6": 0.04567211833282236,
        "bleu-8": 0.1199014838091355,
        "bleu-9": 0.046037991543980354,
        "bleu-10": 0.04567211833282236,
        "bleu-13": 0.05815868174415823,
        "bleu-14": 0.07432998184513635,
        "bleu-15": 0.07314031826828765,
        "bleu-16": 0.1199014838091355,
        "bleu-17": 0.029527878083787772,
        "bleu-18": 0.14991106946711685,
        "bleu-19": 0.06150343144231885,
        "codebleu-0": 0.4583333333333333,
        "codebleu-1": 0.4583333333333333,
        "codebleu-2": 0.47222222222222215,
        "codebleu-3": 0.4583333333333333,
        "codebleu-4": 0.5716819066864746,
        "codebleu-5": 0.1333459983606327,
        "codebleu-6": 0.4583333333333333,
        "codebleu-8": 0.4583333333333333,
        "codebleu-9": 0.39166666666666666,
        "codebleu-10": 0.4583333333333333,
        "codebleu-13": 0.20995182375796925,
        "codebleu-14": 0.44444444444444436,
        "codebleu-15": 0.4583333333333333,
        "codebleu-16": 0.4583333333333333,
        "codebleu-17": 0.44444444444444436,
        "codebleu-18": 0.5388888888888889,
        "codebleu-19": 0.4583333333333333,
        "chrf-0": 0.5418078944675968,
        "chrf-1": 0.5418078944675968,
        "chrf-2": 0.34110327874789026,
        "chrf-3": 0.3528024346958595,
        "chrf-4": 0.7874826539975058,
        "chrf-5": 0.06849315068493152,
        "chrf-6": 0.28463878344614413,
        "chrf-8": 0.4277730555056767,
        "chrf-9": 0.25362542843033314,
        "chrf-10": 0.28463878344614413,
        "chrf-13": 0.009578544061302683,
        "chrf-14": 0.5067384337642858,
        "chrf-15": 0.47132606272034083,
        "chrf-16": 0.4277730555056767,
        "chrf-17": 0.2902124516645855,
        "chrf-18": 0.45598899665093784,
        "chrf-19": 0.4577587967142332,
        "rougel-0": 0.5263157894736842,
        "rougel-1": 0.5263157894736842,
        "rougel-2": 0.3225806451612903,
        "rougel-3": 0.43478260869565216,
        "rougel-4": 0.8571428571428571,
        "rougel-5": 0.2222222222222222,
        "rougel-6": 0.20689655172413796,
        "rougel-8": 0.47058823529411764,
        "rougel-9": 0.19047619047619047,
        "rougel-10": 0.20689655172413796,
        "rougel-13": 0.14285714285714288,
        "rougel-14": 0.3478260869565218,
        "rougel-15": 0.4166666666666667,
        "rougel-16": 0.47058823529411764,
        "rougel-17": 0.2105263157894737,
        "rougel-18": 0.5,
        "rougel-19": 0.3333333333333333,
        "meteor-0": 0.4481927710843373,
        "meteor-1": 0.4481927710843373,
        "meteor-2": 0.44883040935672514,
        "meteor-3": 0.4275862068965517,
        "meteor-4": 0.754985754985755,
        "meteor-5": 0.0684931506849315,
        "meteor-6": 0.4000000000000001,
        "meteor-8": 0.45925925925925926,
        "meteor-9": 0.3509433962264152,
        "meteor-10": 0.4000000000000001,
        "meteor-13": 0.06410256410256411,
        "meteor-14": 0.5126436781609195,
        "meteor-15": 0.4227272727272728,
        "meteor-16": 0.45925925925925926,
        "meteor-17": 0.309436274509804,
        "meteor-18": 0.6084656084656085,
        "meteor-19": 0.4227272727272728,
        "ruby-0": 0.4545454545454546,
        "ruby-1": 0.4545454545454546,
        "ruby-2": 0.21739130434782605,
        "ruby-3": 0.33333333333333337,
        "ruby-4": 0.75,
        "ruby-5": 0.125,
        "ruby-6": 0.1428571428571429,
        "ruby-8": 0.33333333333333337,
        "ruby-9": 0.11764705882352944,
        "ruby-10": 0.1428571428571429,
        "ruby-13": 0.125,
        "ruby-14": 0.19999999999999996,
        "ruby-15": 0.3125,
        "ruby-16": 0.33333333333333337,
        "ruby-17": 0.1333333333333333,
        "ruby-18": 0.33333333333333337,
        "ruby-19": 0.25,
        "codebertscore_f1-0": 0.8357539176940918,
        "codebertscore_f3-0": 0.8441281318664551,
        "codebertscore_f1-1": 0.8357539176940918,
        "codebertscore_f3-1": 0.8441281318664551,
        "codebertscore_f1-2": 0.7763795852661133,
        "codebertscore_f3-2": 0.8161410689353943,
        "codebertscore_f1-3": 0.8110930323600769,
        "codebertscore_f3-3": 0.8270776271820068,
        "codebertscore_f1-4": 0.9489551782608032,
        "codebertscore_f3-4": 0.9253450632095337,
        "codebertscore_f1-5": 0.0,
        "codebertscore_f3-5": 0.0,
        "codebertscore_f1-6": 0.7897344827651978,
        "codebertscore_f3-6": 0.7939052581787109,
        "codebertscore_f1-8": 0.8360776901245117,
        "codebertscore_f3-8": 0.8403002023696899,
        "codebertscore_f1-9": 0.7409592866897583,
        "codebertscore_f3-9": 0.7805684208869934,
        "codebertscore_f1-10": 0.7962087988853455,
        "codebertscore_f3-10": 0.7993069291114807,
        "codebertscore_f1-13": 0.6534082293510437,
        "codebertscore_f3-13": 0.6551648378372192,
        "codebertscore_f1-14": 0.802370011806488,
        "codebertscore_f3-14": 0.8119608759880066,
        "codebertscore_f1-15": 0.7667248845100403,
        "codebertscore_f3-15": 0.8010574579238892,
        "codebertscore_f1-16": 0.8473164439201355,
        "codebertscore_f3-16": 0.8419668078422546,
        "codebertscore_f1-17": 0.7503186464309692,
        "codebertscore_f3-17": 0.7789384126663208,
        "codebertscore_f1-18": 0.8383936285972595,
        "codebertscore_f3-18": 0.8581247925758362,
        "codebertscore_f1-19": 0.8136588335037231,
        "codebertscore_f3-19": 0.8167955279350281,
        "codebertscore_s_f1-0": 0.818088948726654,
        "codebertscore_s_f3-0": 0.8060619235038757,
        "codebertscore_s_f1-1": 0.818088948726654,
        "codebertscore_s_f3-1": 0.8060619235038757,
        "codebertscore_s_f1-2": 0.7564707398414612,
        "codebertscore_s_f3-2": 0.79296875,
        "codebertscore_s_f1-3": 0.7768495678901672,
        "codebertscore_s_f3-3": 0.7819879055023193,
        "codebertscore_s_f1-4": 0.9272424578666687,
        "codebertscore_s_f3-4": 0.8898642063140869,
        "codebertscore_s_f1-5": 0.0,
        "codebertscore_s_f3-5": 0.0,
        "codebertscore_s_f1-6": 0.7798305749893188,
        "codebertscore_s_f3-6": 0.7796870470046997,
        "codebertscore_s_f1-8": 0.7929702401161194,
        "codebertscore_s_f3-8": 0.7926498651504517,
        "codebertscore_s_f1-9": 0.740423321723938,
        "codebertscore_s_f3-9": 0.7719640731811523,
        "codebertscore_s_f1-10": 0.7824060916900635,
        "codebertscore_s_f3-10": 0.7815902233123779,
        "codebertscore_s_f1-13": 0.613653838634491,
        "codebertscore_s_f3-13": 0.609685480594635,
        "codebertscore_s_f1-14": 0.7807431817054749,
        "codebertscore_s_f3-14": 0.784579873085022,
        "codebertscore_s_f1-15": 0.7587886452674866,
        "codebertscore_s_f3-15": 0.7865712642669678,
        "codebertscore_s_f1-16": 0.8164520859718323,
        "codebertscore_s_f3-16": 0.7988809943199158,
        "codebertscore_s_f1-17": 0.7422897815704346,
        "codebertscore_s_f3-17": 0.7606478929519653,
        "codebertscore_s_f1-18": 0.8206498622894287,
        "codebertscore_s_f3-18": 0.8443830013275146,
        "codebertscore_s_f1-19": 0.7936290502548218,
        "codebertscore_s_f3-19": 0.7867088317871094,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-16": 1,
        "raw_gpt35_nswr-16": "1",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word){\n",
        "snippet": [
            "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n"
        ],
        "simplified": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
        "task_id": "118",
        "3": "var cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var vowels = \"aeiouAEIOU\"\n    for (var i = word.length-1; i > 1; i--){\n      if (cons.indexOf(word[i]) != -1 && vowels.indexOf(word[i-1]) != -1 && cons.indexOf(word[i-2]) != -1){\n        return word[i-1]\n      }\n    }\n    return ''\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let cons='bcdfghjklmnpqrstvwxyz';\n    let w=word.split('').reverse().join('');\n    for(let i=0;i<w.length;i++){\n      if(vowels.includes(w[i])){\n        if(i+1<w.length && cons.includes(w[i+1])){\n          if(i-1>=0 && cons.includes(w[i-1])){\n            return w[i];\n          }\n        }\n      }\n    }\n    return '';\n  }",
        "grade-0": {
            "execution": 1
        },
        "8": "var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  var cons_ind = [];\n  var vowel_ind = [];\n  for (var i = 0; i < word.length; i++) {\n    if (vowels.indexOf(word[i]) !== -1) {\n      vowel_ind.push(i);\n    }\n    if (cons.indexOf(word[i]) !== -1) {\n      cons_ind.push(i);\n    }\n  }\n  var vowel_ind_final = [];\n  for (var i = 0; i < vowel_ind.length; i++) {\n    if (cons_ind.indexOf(vowel_ind[i] - 1) !== -1 && cons_ind.indexOf(vowel_ind[i] + 1) !== -1) {\n      vowel_ind_final.push(vowel_ind[i]);\n    }\n  }\n  if (vowel_ind_final.length === 0) {\n    return \"\";\n  }\n  var min_ind = vowel_ind_final[0];\n  for (var i = 0; i < vowel_ind_final.length; i++) {\n    if (min_ind > vowel_ind_final[i]) {\n      min_ind = vowel_ind_final[i];\n    }\n  }\n  return word[min_ind];\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var closestVowel = \"\";\n  for(var i = word.length-1; i >= 0; i--){\n    if(i === 0){\n      return closestVowel;\n    }else if(vowel.indexOf(word[i]) !== -1 && vowel.indexOf(word[i-1]) === -1){\n      closestVowel = word[i];\n      return closestVowel;\n    }\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "// array of consonants\n    const cons = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    // array of vowels\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    // split word into array\n    const arr = word.split('')\n    // variable to hold closest vowel\n    let vowel = ''\n    // variable to hold distance from end to vowel\n    let dist = ''\n    // variable to hold distance for vowels\n    let distVowel = arr.length\n    // variable to hold furthest vowel position\n    let furthestVowel = 0\n    // iterate through array backwards\n    for (let i = arr.length - 1; i >= 0; i--) {\n        // if current element is a consonant\n        if (cons.includes(arr[i])) {\n            // iterate through vowels array\n            for (let j = 0; j < vowels.length; j++) {\n                // if current element is a vowel\n                if (arr[i + 1] === vowels[j]) {\n                    // find distance from end to current vowel\n                    dist = arr.length - (i + 1)\n                    // if vowel is less than previous vowels\n                    if (dist < distVowel) {\n                        // set vowel to current vowel\n                        vowel = arr[i + 1]\n                        // set distVowel to current vowel\n                        distVowel = dist\n                        // set furthestVowel to current position\n                        furthestVowel = i + 1\n                    }\n                }\n            }\n        }\n    }\n    // if vowel is still empty\n    if (vowel === '') {\n        // return empty string\n        return ''\n    } else {\n        // otherwise return closest vowel\n        return vowel\n    }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var res = '';\n    var last_letter = '';\n    var vowels = \"aeiou\";\n    var index = 0;\n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) != -1){\n            last_letter = word[i];\n            continue;\n        }\n        if(i == 0){\n            res = '';\n            break;\n        }\n        index = vowels.indexOf(last_letter);\n        if(index == -1){\n            index = vowels.indexOf(word[i - 1]);\n            if(index == -1){\n                res = '';\n                break;\n            }else{\n                res = word[i - 1];\n                break;\n            }\n        }else{\n            if(vowels.indexOf(word[i - 1]) == -1){\n                res = last_letter;\n                break;\n            }else{\n                if(word[i - 1] == vowels[index - 1]){\n                    res = last_letter;\n                    break;\n                }else{\n                    res = word[i - 1];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "const vowels = \"aeiou\";\n\tfor (let i = word.length - 2; i >= 0; i--) {\n\t\tconst left = word[i];\n\t\tconst right = word[i + 1];\n\t\tif (vowels.includes(left) && vowels.includes(right)) {\n\t\t\tcontinue;\n\t\t} else if (vowels.includes(left) && !vowels.includes(right)) {\n\t\t\treturn left;\n\t\t} else if (!vowels.includes(left) && vowels.includes(right)) {\n\t\t\treturn right;\n\t\t}\n\t}\n\treturn \"\";\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var vowels = 'aeiouAEIOU';\n    var cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    for(var i = word.length-1; i >= 0; i--){\n        if(cons.indexOf(word[i]) >= 0 && i < word.length-1){\n            if(vowels.indexOf(word[i+1]) >= 0){\n                return word[i+1];\n            }\n        }\n    }\n    return '';\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return \"\";\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let vowels = 'aeiouAEIOU';\n    let arr = word.split('');\n    let index = arr.reverse().findIndex(letter => {\n        if(vowels.includes(letter)){\n            return vowels.includes(letter);\n        }\n    });\n    return index == -1 ? '' : arr[index];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var vowel = 'aeiouAEIOU';\n    var result = '';\n    var min = 10000;\n    for(var i = 0; i < word.length; i++){\n        if(word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i] === 'u' || word[i] === 'A' || word[i] === 'E' || word[i] === 'I' || word[i] === 'O' || word[i] === 'U'){\n            for(var j = i + 1; j < word.length; j++){\n                if(word[j] !== 'a' && word[j] !== 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j] !== 'u' && word[j] !== 'A' && word[j] !== 'E' && word[j] !== 'I' && word[j] !== 'O' && word[j] !== 'U'){\n                    if(j - i < min){\n                        min = j - i;\n                        result = word[i];\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var vowel=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var found=\"\";\n    for(var i=word.length-1;i>=0;i--){\n        if(vowel.indexOf(word[i])==-1){\n            for(var j=0;j<vowel.length;j++){\n                if(word[i+1]==vowel[j]){\n                    found=vowel[j];\n                    return found;\n                }\n            }\n        }\n    }\n    return found;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var cons = \"\";\n    var vow = \"\";\n    var vow2 = \"\";\n    for(var i = 0; i < word.length; i++){\n      if(vowels.indexOf(word[i]) === -1){\n        cons += word[i];\n      }else{\n        vow += word[i];\n      }\n    }\n    vow2 = vow.split(\"\").reverse().join(\"\");\n    return vow2[0];\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "const vowels = \"aeiou\"\n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let result = []\n    let c = 0\n    for(let i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            result.push(i)\n        }\n        if(consonants.includes(word[i])){\n            c = i\n            break\n        }\n    }\n    let closest = 0\n    if(result.length > 0){\n        for(let i = 0; i < result.length; i++){\n            if(result[i] > c){\n                closest = result[i]\n                break\n            }\n        }\n    }\n    return word[closest] || \"\"\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (word.length<2)\n\t\treturn \"\";\n\telse{\n\t\tvar v = \"aeiouAEIOU\";\n\t\tvar vow = [];\n\t\tfor (i = 0; i < word.length; i++){\n\t\t\tif (v.indexOf(word[i]) > -1)\n\t\t\t\tvow.push(i);\n\t\t}\n\t\tfor (i = vow.length - 1; i > 0; i--){\n\t\t\tif (vow[i] - vow[i-1] > 1)\n\t\t\t\treturn word[vow[i]];\n\t\t}\n\t\treturn \"\";\n\t}\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "const vowel = 'aeiouAEIOU';\n  const cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (cons.indexOf(word[i]) === -1) {\n      for (let j = i - 1; j >= 0; j--) {\n        if (cons.indexOf(word[j]) !== -1) {\n          return word[i];\n        }\n      }\n    }\n  }\n  return '';\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let cons = 'bcdfghjklmnpqrstvwxyz';\n    let str = '';\n    for(let i = word.length - 1; i >= 0; i--){\n        let letter = word[i];\n        if(vowels.includes(letter)){\n            if(cons.includes(word[i - 1]) && cons.includes(word[i + 1])){\n                str += letter;\n                return str;\n            }\n        }\n    }\n    return '';\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let res = \"\";\n    let flag = false;\n    for(let i = word.length - 1; i >= 0; i--){\n        if(flag && vowel.includes(word[i])) return word[i];\n        else if(!vowel.includes(word[i])) flag = true;\n    }\n    return res;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let rVowels = ['a', 'e', 'i', 'o', 'u'];\n    let lVowels = ['A', 'E', 'I', 'O', 'U'];\n    if (word.length < 2) {\n        return '';\n    }\n    for (let i = word.length - 1; i > 0; i--) {\n        if (lVowels.includes(word[i])) {\n            if (!rVowels.includes(word[i - 1]) && !lVowels.includes(word[i - 1])) {\n                return word[i];\n            }\n        }\n        if (rVowels.includes(word[i])) {\n            if (!rVowels.includes(word[i - 1]) && !lVowels.includes(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n    return '';\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "word = word.split('').reverse();\n    let regex = /[aeiou]/;\n    let vowel = '';\n    for(let i = 0; i < word.length; i++){\n        if(regex.test(word[i])){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.020941001912362214,
        "bleu-0": 0.037827530227197675,
        "bleu-8": 0.0811568100678559,
        "bleu-7": 0.028550753776203006,
        "bleu-16": 0.0969204129979751,
        "bleu-2": 0.11158408099740219,
        "bleu-11": 0.027210266936787974,
        "bleu-1": 0.016123083577352804,
        "bleu-10": 2.9998128104318784e-36,
        "bleu-17": 0.0009155428318701878,
        "bleu-12": 0.3194830194003311,
        "bleu-6": 0.026651254084758304,
        "bleu-18": 0.020065251136564054,
        "bleu-15": 0.037041316942860926,
        "bleu-13": 0.023604796710523103,
        "bleu-9": 0.021208854505825662,
        "bleu-4": 0.03356551432470379,
        "bleu-14": 0.01733713175384364,
        "bleu-5": 0.12921897769771407,
        "bleu-19": 0.0029590813750351407,
        "codebleu-3": 0.1380647536547452,
        "codebleu-0": 0.16922531093552576,
        "codebleu-8": 0.3874779527827916,
        "codebleu-7": 0.13606086070643345,
        "codebleu-16": 0.3735477683635123,
        "codebleu-2": 0.24700195692851387,
        "codebleu-11": 0.12969557783186697,
        "codebleu-1": 0.11601179063294247,
        "codebleu-10": 0.0078125,
        "codebleu-17": 0.07847875378985429,
        "codebleu-12": 0.47688173143497486,
        "codebleu-6": 0.13949626713023444,
        "codebleu-18": 0.14165064302164773,
        "codebleu-15": 0.15716278073555362,
        "codebleu-13": 0.13862095206687225,
        "codebleu-9": 0.11768983879579767,
        "codebleu-4": 0.14716970001815835,
        "codebleu-14": 0.12039018473921279,
        "codebleu-5": 0.24266349065880238,
        "codebleu-19": 0.08150544112350995,
        "chrf-3": 0.1622071658331855,
        "chrf-0": 0.11514403414142782,
        "chrf-8": 0.14788610575867084,
        "chrf-7": 0.13116164718291523,
        "chrf-16": 0.14227594690641962,
        "chrf-2": 0.19215877062726036,
        "chrf-11": 0.13509308589636923,
        "chrf-1": 0.14957793384408027,
        "chrf-10": 0.00910072535655992,
        "chrf-17": 0.07093271256876754,
        "chrf-12": 0.3736467607929635,
        "chrf-6": 0.1216284343924553,
        "chrf-18": 0.10125919969933501,
        "chrf-15": 0.13530001705621927,
        "chrf-13": 0.13114385181449645,
        "chrf-9": 0.14763093990352152,
        "chrf-4": 0.15252640501227166,
        "chrf-14": 0.13380941765824117,
        "chrf-5": 0.23878213881491775,
        "chrf-19": 0.10499262905550369,
        "rougel-3": 0.25440313111545987,
        "rougel-0": 0.26978417266187055,
        "rougel-8": 0.2895086321381142,
        "rougel-7": 0.2485875706214689,
        "rougel-16": 0.22411693057247256,
        "rougel-2": 0.3052959501557633,
        "rougel-11": 0.19585687382297554,
        "rougel-1": 0.20866141732283466,
        "rougel-10": 0.019277108433734938,
        "rougel-17": 0.09523809523809523,
        "rougel-12": 0.5645161290322581,
        "rougel-6": 0.21804511278195485,
        "rougel-18": 0.24535315985130113,
        "rougel-15": 0.21014492753623185,
        "rougel-13": 0.22264150943396224,
        "rougel-9": 0.2350674373795761,
        "rougel-4": 0.24105461393596986,
        "rougel-14": 0.20743639921722115,
        "rougel-5": 0.3344262295081967,
        "rougel-19": 0.15670103092783505,
        "meteor-3": 0.1785759034555526,
        "meteor-0": 0.17648161394014084,
        "meteor-8": 0.26362574148252416,
        "meteor-7": 0.16624713789439088,
        "meteor-16": 0.20976315612164045,
        "meteor-2": 0.20922511544563432,
        "meteor-11": 0.1234559064691376,
        "meteor-1": 0.14011900026416796,
        "meteor-10": 0.012070365358592693,
        "meteor-17": 0.0706924328992825,
        "meteor-12": 0.43586430551280075,
        "meteor-6": 0.13336831059811122,
        "meteor-18": 0.1226900078122026,
        "meteor-15": 0.1259538390164695,
        "meteor-13": 0.12349209682123069,
        "meteor-9": 0.13998769981704084,
        "meteor-4": 0.15522694674205384,
        "meteor-14": 0.1428067022773235,
        "meteor-5": 0.2551685758354756,
        "meteor-19": 0.10278098167371523,
        "ruby-3": 0.13902439024390245,
        "ruby-0": 0.17317073170731712,
        "ruby-8": 0.1634146341463415,
        "ruby-7": 0.1585365853658537,
        "ruby-16": 0.0948905109489051,
        "ruby-2": 0.20487804878048776,
        "ruby-11": 0.10243902439024388,
        "ruby-1": 0.10487804878048779,
        "ruby-10": 0.007317073170731714,
        "ruby-17": 0.051219512195122,
        "ruby-12": 0.40487804878048783,
        "ruby-6": 0.13902439024390245,
        "ruby-18": 0.15609756097560978,
        "ruby-15": 0.12195121951219512,
        "ruby-13": 0.13414634146341464,
        "ruby-9": 0.11707317073170731,
        "ruby-4": 0.14634146341463417,
        "ruby-14": 0.12926829268292683,
        "ruby-5": 0.23170731707317072,
        "ruby-19": 0.08780487804878045,
        "codebertscore_f1-3": 0.7110029458999634,
        "codebertscore_f3-3": 0.7245801687240601,
        "codebertscore_f1-0": 0.7411539554595947,
        "codebertscore_f3-0": 0.7474554777145386,
        "codebertscore_f1-8": 0.7299227714538574,
        "codebertscore_f3-8": 0.7528303265571594,
        "codebertscore_f1-7": 0.7352517247200012,
        "codebertscore_f3-7": 0.7246884107589722,
        "codebertscore_f1-16": 0.690923273563385,
        "codebertscore_f3-16": 0.7315258979797363,
        "codebertscore_f1-2": 0.7371077537536621,
        "codebertscore_f3-2": 0.7518815398216248,
        "codebertscore_f1-11": 0.7252952456474304,
        "codebertscore_f3-11": 0.7065827250480652,
        "codebertscore_f1-1": 0.7186718583106995,
        "codebertscore_f3-1": 0.7323078513145447,
        "codebertscore_f1-10": 0.4982930123806,
        "codebertscore_f3-10": 0.4067741334438324,
        "codebertscore_f1-17": 0.6347626447677612,
        "codebertscore_f3-17": 0.6005246639251709,
        "codebertscore_f1-12": 0.836586594581604,
        "codebertscore_f3-12": 0.8395107388496399,
        "codebertscore_f1-6": 0.7318844199180603,
        "codebertscore_f3-6": 0.7124589085578918,
        "codebertscore_f1-18": 0.7130711078643799,
        "codebertscore_f3-18": 0.6955918669700623,
        "codebertscore_f1-15": 0.7106391191482544,
        "codebertscore_f3-15": 0.7143407464027405,
        "codebertscore_f1-13": 0.7194949984550476,
        "codebertscore_f3-13": 0.687920868396759,
        "codebertscore_f1-9": 0.6966965198516846,
        "codebertscore_f3-9": 0.6896361708641052,
        "codebertscore_f1-4": 0.753758430480957,
        "codebertscore_f3-4": 0.7618365287780762,
        "codebertscore_f1-14": 0.7435579895973206,
        "codebertscore_f3-14": 0.713066041469574,
        "codebertscore_f1-5": 0.7993188500404358,
        "codebertscore_f3-5": 0.8130558729171753,
        "codebertscore_f1-19": 0.6859124302864075,
        "codebertscore_f3-19": 0.6418949961662292,
        "codebertscore_s_f1-3": 0.7399105429649353,
        "codebertscore_s_f3-3": 0.7729119062423706,
        "codebertscore_s_f1-0": 0.7616169452667236,
        "codebertscore_s_f3-0": 0.775895893573761,
        "codebertscore_s_f1-8": 0.7416012287139893,
        "codebertscore_s_f3-8": 0.764399528503418,
        "codebertscore_s_f1-7": 0.7632613182067871,
        "codebertscore_s_f3-7": 0.7761990427970886,
        "codebertscore_s_f1-16": 0.7133243083953857,
        "codebertscore_s_f3-16": 0.7603402733802795,
        "codebertscore_s_f1-2": 0.7389672994613647,
        "codebertscore_s_f3-2": 0.7547668814659119,
        "codebertscore_s_f1-11": 0.7547776103019714,
        "codebertscore_s_f3-11": 0.7555813193321228,
        "codebertscore_s_f1-1": 0.7380533814430237,
        "codebertscore_s_f3-1": 0.7646942734718323,
        "codebertscore_s_f1-10": 0.5985456109046936,
        "codebertscore_s_f3-10": 0.5030230283737183,
        "codebertscore_s_f1-17": 0.6743737459182739,
        "codebertscore_s_f3-17": 0.6591262221336365,
        "codebertscore_s_f1-12": 0.8419744968414307,
        "codebertscore_s_f3-12": 0.8480377793312073,
        "codebertscore_s_f1-6": 0.7593350410461426,
        "codebertscore_s_f3-6": 0.7553508281707764,
        "codebertscore_s_f1-18": 0.7434947490692139,
        "codebertscore_s_f3-18": 0.7496510744094849,
        "codebertscore_s_f1-15": 0.7283177375793457,
        "codebertscore_s_f3-15": 0.7362560629844666,
        "codebertscore_s_f1-13": 0.7482675313949585,
        "codebertscore_s_f3-13": 0.7328176498413086,
        "codebertscore_s_f1-9": 0.7240020632743835,
        "codebertscore_s_f3-9": 0.7362952828407288,
        "codebertscore_s_f1-4": 0.7698802351951599,
        "codebertscore_s_f3-4": 0.7878173589706421,
        "codebertscore_s_f1-14": 0.7828765511512756,
        "codebertscore_s_f3-14": 0.77543705701828,
        "codebertscore_s_f1-5": 0.8101651668548584,
        "codebertscore_s_f3-5": 0.8305397033691406,
        "codebertscore_s_f1-19": 0.7361416220664978,
        "codebertscore_s_f3-19": 0.7137207388877869,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 2,
        "raw_gpt35_nsnr-10": "2",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction decimal_to_binary(decimal){\n",
        "snippet": [
            "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n"
        ],
        "simplified": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
        "task_id": "79",
        "3": "return 'db' + decimal.toString(2) + 'db';\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let binary_list = [];\n  let binary_string = '';\n  if (decimal == 0){\n    return 'db0db';\n  }\n  while (decimal > 0){\n    binary_list.push(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  for (let j = binary_list.length - 1; j >= 0; j--){\n    binary_string += binary_list[j];\n  }\n  return ('db' + binary_string + 'db');\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var binary = 'db' + (decimal >>> 0).toString(2) + 'db';\n    return binary;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var bin_str = decimal.toString(2);\n    bin_str = 'db' + bin_str + 'db';\n    return bin_str;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let result = \"db\";\n    while(decimal >= 1){\n        result += decimal % 2;\n        decimal = Math.floor(decimal / 2);\n    }\n    return result + \"db\";\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var result = [];\n    var target_num = decimal;\n    var remainder;\n    var index = 0;\n    while(target_num > 0){\n        remainder = target_num % 2;\n        target_num = (target_num - remainder) / 2;\n        result[index] = remainder;\n        index++;\n    }\n    result.reverse();\n    result.unshift(\"db\");\n    result.push(\"db\");\n    return result.join(\"\");\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = [];\n  while (decimal >= 1) {\n    result.unshift(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + result.join('') + 'db';\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var string =\"\";\n    while(decimal != 0){\n        if(decimal%2==0){\n            string = \"0\" + string;\n        }else{\n            string = \"1\" + string;\n        }\n        decimal = Math.floor(decimal/2);\n    }\n    return \"db\" + string + \"db\";\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "const binaryArray = decimal.toString(2).split('')\n  return 'db' + binaryArray.join('') + 'db'\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let binary = Number(decimal).toString(2);\n    return 'db' + binary + 'db';\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return 'db' + decimal.toString(2) + 'db';\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var result = \"db\";\n  var factor = 1;\n  while (factor < decimal){\n    factor = factor * 2;\n  }\n  factor = factor / 2;\n  while (factor > 0){\n    if (decimal - factor >= 0){\n      result += \"1\";\n      decimal = decimal - factor;\n    } else {\n      result += \"0\";\n    }\n    factor = factor / 2;\n  }\n  result += \"db\";\n  return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let x = \"\"\n    while(decimal >= 1){\n        x = (decimal % 2) + x\n        decimal = Math.floor(decimal / 2)\n    }\n    x = \"db\" + x + \"db\"\n    return x\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var binaryNumber = 'db';\n  for (var i = 0; i < 8; i++) {\n    var remainder = decimal % 2;\n    binaryNumber = remainder + binaryNumber;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binaryNumber + 'db';\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return `db${parseInt(decimal, 10).toString(2)}db`;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "// Your code here\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// todo: convert the number to binary\n  if (decimal === 0) {\n    return `db0db`;\n  }\n  let binary = '';\n  while (decimal > 0) {\n    let remainder = Math.floor(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n  return `db${binary}db`;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var binary = (decimal).toString(2);\n  var value = \"db\" + binary + \"db\";\n  return value;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let binary = decimal.toString(2);\n    binary = binary.replace(/^0+|0+$/g, '');\n    return `db${binary}db`;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 1.0000000000000004,
        "bleu-0": 0.06554383274103659,
        "bleu-8": 0.4573889291137308,
        "bleu-7": 0.5198707241967666,
        "bleu-16": 0.45237912327122265,
        "bleu-2": 0.16350681949708384,
        "bleu-11": 0.03457742685707199,
        "bleu-1": 0.18620169406539383,
        "bleu-10": 0.13010283341659237,
        "bleu-17": 0.3593041119630842,
        "bleu-12": 0.49860622311449404,
        "bleu-6": 1.0000000000000004,
        "bleu-18": 0.04867281674751555,
        "bleu-15": 0.12939428393138647,
        "bleu-13": 0.11317455078536573,
        "bleu-9": 0.36852891195185467,
        "bleu-4": 0.01098475607466579,
        "bleu-14": 0.05385587373024551,
        "bleu-5": 0.37229923366849077,
        "bleu-19": 0.2274002285755513,
        "codebleu-3": 1.0,
        "codebleu-0": 0.6424391236386575,
        "codebleu-8": 0.7495648215189551,
        "codebleu-7": 0.7599784540327944,
        "codebleu-16": 0.8020631872118704,
        "codebleu-2": 0.6054329547646654,
        "codebleu-11": 0.6315151515151514,
        "codebleu-1": 0.6358821005260504,
        "codebleu-10": 0.6265322904179168,
        "codebleu-17": 0.7523082610847565,
        "codebleu-12": 0.7564343705190824,
        "codebleu-6": 1.0,
        "codebleu-18": 0.5253848633973133,
        "codebleu-15": 0.5655051079279582,
        "codebleu-13": 0.6237109099793791,
        "codebleu-9": 0.3844517883556121,
        "codebleu-4": 0.10769193396391373,
        "codebleu-14": 0.6138244638035257,
        "codebleu-5": 0.7353832056114151,
        "codebleu-19": 0.7645667047625918,
        "chrf-3": 0.6752445268989384,
        "chrf-0": 0.17351524709426727,
        "chrf-8": 0.5087078884999848,
        "chrf-7": 0.6984274570472258,
        "chrf-16": 0.5213523071313371,
        "chrf-2": 0.3352278670330307,
        "chrf-11": 0.1852143723853232,
        "chrf-1": 0.23180767435114466,
        "chrf-10": 0.37188825252974245,
        "chrf-17": 0.49170964290705255,
        "chrf-12": 0.4822243320697922,
        "chrf-6": 0.6752445268989384,
        "chrf-18": 0.20199884072608276,
        "chrf-15": 0.327363979927437,
        "chrf-13": 0.19899805248482236,
        "chrf-9": 0.5072401946903751,
        "chrf-4": 0.06183674202294806,
        "chrf-14": 0.17323549669611296,
        "chrf-5": 0.5691731598150515,
        "chrf-19": 0.4800645572231922,
        "rougel-3": 1.0,
        "rougel-0": 0.24137931034482757,
        "rougel-8": 0.7234042553191489,
        "rougel-7": 0.6046511627906976,
        "rougel-16": 0.5777777777777777,
        "rougel-2": 0.5,
        "rougel-11": 0.18867924528301888,
        "rougel-1": 0.39436619718309857,
        "rougel-10": 0.3255813953488372,
        "rougel-17": 0.490566037735849,
        "rougel-12": 0.5909090909090908,
        "rougel-6": 1.0,
        "rougel-18": 0.22018348623853212,
        "rougel-15": 0.4,
        "rougel-13": 0.3846153846153846,
        "rougel-9": 0.6829268292682927,
        "rougel-4": 0.08333333333333333,
        "rougel-14": 0.29166666666666663,
        "rougel-5": 0.5416666666666666,
        "rougel-19": 0.4262295081967213,
        "meteor-3": 0.9999142661179699,
        "meteor-0": 0.5606219951923077,
        "meteor-8": 0.9323088358864975,
        "meteor-7": 0.9572852710107611,
        "meteor-16": 0.9421745378535503,
        "meteor-2": 0.7352941176470588,
        "meteor-11": 0.376328125,
        "meteor-1": 0.653343023255814,
        "meteor-10": 0.7133293214984203,
        "meteor-17": 0.711186833646567,
        "meteor-12": 0.9521933280798529,
        "meteor-6": 0.9999142661179699,
        "meteor-18": 0.44110671936758905,
        "meteor-15": 0.6632642211589581,
        "meteor-13": 0.6756756756756758,
        "meteor-9": 0.7269718698290127,
        "meteor-4": 0.02976190476190476,
        "meteor-14": 0.5260416666666666,
        "meteor-5": 0.920138888888889,
        "meteor-19": 0.671484492622704,
        "ruby-3": 1.0,
        "ruby-0": 0.1428571428571429,
        "ruby-8": 0.5862068965517242,
        "ruby-7": 0.48,
        "ruby-16": 0.40740740740740744,
        "ruby-2": 0.33333333333333337,
        "ruby-11": 0.11363636363636365,
        "ruby-1": 0.24528301886792447,
        "ruby-10": 0.19117647058823528,
        "ruby-17": 0.3142857142857143,
        "ruby-12": 0.5,
        "ruby-6": 1.0,
        "ruby-18": 0.13186813186813184,
        "ruby-15": 0.23404255319148937,
        "ruby-13": 0.23333333333333328,
        "ruby-9": 0.5652173913043479,
        "ruby-4": 0.05555555555555558,
        "ruby-14": 0.17948717948717952,
        "ruby-5": 0.4,
        "ruby-19": 0.2558139534883721,
        "codebertscore_f1-3": 0.9988489151000977,
        "codebertscore_f3-3": 0.9988489151000977,
        "codebertscore_f1-0": 0.7264655232429504,
        "codebertscore_f3-0": 0.777890682220459,
        "codebertscore_f1-8": 0.9184775948524475,
        "codebertscore_f3-8": 0.9436556696891785,
        "codebertscore_f1-7": 0.9256288409233093,
        "codebertscore_f3-7": 0.9430747628211975,
        "codebertscore_f1-16": 0.8774625062942505,
        "codebertscore_f3-16": 0.9267321825027466,
        "codebertscore_f1-2": 0.7880314588546753,
        "codebertscore_f3-2": 0.804940402507782,
        "codebertscore_f1-11": 0.6902561187744141,
        "codebertscore_f3-11": 0.7198113203048706,
        "codebertscore_f1-1": 0.791080892086029,
        "codebertscore_f3-1": 0.823845386505127,
        "codebertscore_f1-10": 0.75990891456604,
        "codebertscore_f3-10": 0.7932658195495605,
        "codebertscore_f1-17": 0.8967932462692261,
        "codebertscore_f3-17": 0.9418688416481018,
        "codebertscore_f1-12": 0.9176807403564453,
        "codebertscore_f3-12": 0.9396200180053711,
        "codebertscore_f1-6": 0.9988489151000977,
        "codebertscore_f3-6": 0.9988489151000977,
        "codebertscore_f1-18": 0.7122698426246643,
        "codebertscore_f3-18": 0.7336379885673523,
        "codebertscore_f1-15": 0.7823563814163208,
        "codebertscore_f3-15": 0.8094066381454468,
        "codebertscore_f1-13": 0.765275776386261,
        "codebertscore_f3-13": 0.7976776957511902,
        "codebertscore_f1-9": 0.8803306818008423,
        "codebertscore_f3-9": 0.8825278878211975,
        "codebertscore_f1-4": 0.6295740008354187,
        "codebertscore_f3-4": 0.6138545870780945,
        "codebertscore_f1-14": 0.7362822890281677,
        "codebertscore_f3-14": 0.7618075609207153,
        "codebertscore_f1-5": 0.9003635048866272,
        "codebertscore_f3-5": 0.9318721294403076,
        "codebertscore_f1-19": 0.8147431015968323,
        "codebertscore_f3-19": 0.8668193221092224,
        "codebertscore_s_f1-3": 0.9989839196205139,
        "codebertscore_s_f3-3": 0.9989838600158691,
        "codebertscore_s_f1-0": 0.7379180192947388,
        "codebertscore_s_f3-0": 0.7994936108589172,
        "codebertscore_s_f1-8": 0.918563187122345,
        "codebertscore_s_f3-8": 0.946807861328125,
        "codebertscore_s_f1-7": 0.9392672181129456,
        "codebertscore_s_f3-7": 0.9604838490486145,
        "codebertscore_s_f1-16": 0.8833197951316833,
        "codebertscore_s_f3-16": 0.9373819231987,
        "codebertscore_s_f1-2": 0.7888391017913818,
        "codebertscore_s_f3-2": 0.8089560270309448,
        "codebertscore_s_f1-11": 0.6888116598129272,
        "codebertscore_s_f3-11": 0.7308047413825989,
        "codebertscore_s_f1-1": 0.80323725938797,
        "codebertscore_s_f3-1": 0.8412486910820007,
        "codebertscore_s_f1-10": 0.7669968008995056,
        "codebertscore_s_f3-10": 0.8078691959381104,
        "codebertscore_s_f1-17": 0.9002088308334351,
        "codebertscore_s_f3-17": 0.9538772106170654,
        "codebertscore_s_f1-12": 0.9256067872047424,
        "codebertscore_s_f3-12": 0.9541932940483093,
        "codebertscore_s_f1-6": 0.9989839196205139,
        "codebertscore_s_f3-6": 0.9989838600158691,
        "codebertscore_s_f1-18": 0.7084999084472656,
        "codebertscore_s_f3-18": 0.7382818460464478,
        "codebertscore_s_f1-15": 0.7833545207977295,
        "codebertscore_s_f3-15": 0.8114662766456604,
        "codebertscore_s_f1-13": 0.769792377948761,
        "codebertscore_s_f3-13": 0.8061435222625732,
        "codebertscore_s_f1-9": 0.8836736083030701,
        "codebertscore_s_f3-9": 0.8911482691764832,
        "codebertscore_s_f1-4": 0.5803683400154114,
        "codebertscore_s_f3-4": 0.574617862701416,
        "codebertscore_s_f1-14": 0.7468158602714539,
        "codebertscore_s_f3-14": 0.7765895128250122,
        "codebertscore_s_f1-5": 0.9063643217086792,
        "codebertscore_s_f3-5": 0.9424222111701965,
        "codebertscore_s_f1-19": 0.8173925876617432,
        "codebertscore_s_f3-19": 0.8754170536994934,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0- The code snippet is empty and does not provide any implementation for the required functionality.",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 0,
        "raw_gpt35_nswr-4": "0",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) \u279e True\n// is_sorted([1, 2, 3, 4, 5]) \u279e True\n// is_sorted([1, 3, 2, 4, 5]) \u279e False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\nfunction is_sorted(lst){\n",
        "snippet": [
            "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n"
        ],
        "simplified": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
        "task_id": "126",
        "3": "var index = 0;\n    var element = lst[index];\n    var sorted = true;\n    while(index < lst.length){\n        if(element < lst[index]){\n            sorted = false;\n        }\n        index++;\n        element = lst[index];\n    }\n    return sorted;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let sorted=true;\n\tlst.forEach((v,i)=>{\n\t\tif(i>0 && v<lst[i-1]) sorted=false;\n\t});\n\treturn sorted;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "// sort the array\n    // check each element is larger than the previous\n    // return true or false\n    const sorted = lst.sort((a,b) => a - b);\n    for (let i = 0; i < sorted.length - 1; i++) {\n        if (sorted[i] >= sorted[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return new Set(lst).size === lst.length && lst.every((x,i)=>i===0||lst[i]>lst[i-1]);\n  }",
        "grade-7": {
            "execution": 0
        },
        "16": "let sorted = true;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            sorted = false;\n        }\n    }\n    return sorted;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "for(let i = 1; i < lst.length; i++){\n        if(lst[i] > lst[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return lst.every((x, y) => x >= lst[y - 1] || y === 0) && new Set(lst).size !== lst.length\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return new Set(lst).size !== lst.length && lst.every((val, i) => !i || lst[i-1] <= val);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "for(let i = 1; i < lst.length; i++){\n        if(lst[i] < lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "for(var i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let sorted = true;\n    let counter = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] !== lst[i+1]){\n            counter = 0;\n        }\n        if(lst[i] === lst[i+1]){\n            counter++;\n        }\n        if(counter === 2){\n            sorted = false;\n        }\n    }\n    return sorted;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] < lst[i + 1]){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "for(let i = 0; i < lst.length; i++){\n        if(lst[i] < lst[i+1]){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let result = true;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            result = false;\n        }\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "lst = lst.filter((a,b) => lst.indexOf(a) === b)\n\treturn lst.every((a,b) => b === 0 || a >= lst[b-1])\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let sorted = true;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            sorted = false;\n        }\n    }\n    return sorted;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let sorted = true;\n\tfor(let i = 0; i < lst.length - 1; i++){\n\t\tif(lst[i] >= lst[i + 1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "for(let i = 0; i < lst.length - 1; i++){\n\t\tif(lst[i] >= lst[i + 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let prev = -Infinity;\n    for (let num of lst) {\n        if (num <= prev) return false;\n        prev = num;\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let sorted = [...lst].sort((a,b) => a-b);\n    let sortedSet = new Set(sorted);\n    if(JSON.stringify(sorted) === JSON.stringify(lst) && sortedSet.size === lst.length){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.07939613514597506,
        "bleu-0": 0.02578256936441906,
        "bleu-8": 0.21525053371681926,
        "bleu-7": 0.05282868468803632,
        "bleu-16": 0.18482583443437517,
        "bleu-2": 0.18715023848878348,
        "bleu-11": 0.04116750377456943,
        "bleu-1": 0.02587726398397545,
        "bleu-10": 0.19362245407136086,
        "bleu-17": 0.15886697392400242,
        "bleu-12": 0.3940451127039222,
        "bleu-6": 0.2013165231575631,
        "bleu-18": 0.20109773933286282,
        "bleu-15": 0.19678327914824706,
        "bleu-13": 0.03487342569289426,
        "bleu-9": 0.18482583443437517,
        "bleu-4": 0.19678327914824706,
        "bleu-14": 0.18699012610049986,
        "bleu-5": 0.0223920457658873,
        "bleu-19": 0.08071952045924714,
        "codebleu-3": 0.3356721376106998,
        "codebleu-0": 0.20160462782955776,
        "codebleu-8": 0.4451573995763892,
        "codebleu-7": 0.22455112202585378,
        "codebleu-16": 0.28888837101103726,
        "codebleu-2": 0.25292811095235096,
        "codebleu-11": 0.17960033670336045,
        "codebleu-1": 0.1672494048305735,
        "codebleu-10": 0.2590773455800001,
        "codebleu-17": 0.24821423352488747,
        "codebleu-12": 0.5656041209313151,
        "codebleu-6": 0.2831404001874232,
        "codebleu-18": 0.2804390385932754,
        "codebleu-15": 0.29232891394885974,
        "codebleu-13": 0.23421997288563895,
        "codebleu-9": 0.28888837101103726,
        "codebleu-4": 0.29232891394885974,
        "codebleu-14": 0.25687328583969515,
        "codebleu-5": 0.15291777883758195,
        "codebleu-19": 0.37048542730322276,
        "chrf-3": 0.23906454612461261,
        "chrf-0": 0.13358511077103866,
        "chrf-8": 0.34329018069549333,
        "chrf-7": 0.1654139834074172,
        "chrf-16": 0.2871747335770626,
        "chrf-2": 0.36324625864699633,
        "chrf-11": 0.14178718074638527,
        "chrf-1": 0.14240429501527221,
        "chrf-10": 0.3694466867064914,
        "chrf-17": 0.31963270272922956,
        "chrf-12": 0.39394502283123345,
        "chrf-6": 0.3531084220641985,
        "chrf-18": 0.36642399515516977,
        "chrf-15": 0.30385639474376797,
        "chrf-13": 0.11835240628521677,
        "chrf-9": 0.2871747335770626,
        "chrf-4": 0.2928720112692805,
        "chrf-14": 0.33689890146131213,
        "chrf-5": 0.21199184227667486,
        "chrf-19": 0.2811832544956948,
        "rougel-3": 0.4076433121019108,
        "rougel-0": 0.3055555555555555,
        "rougel-8": 0.4130434782608695,
        "rougel-7": 0.3129251700680272,
        "rougel-16": 0.4966442953020134,
        "rougel-2": 0.524822695035461,
        "rougel-11": 0.23611111111111108,
        "rougel-1": 0.2676056338028169,
        "rougel-10": 0.5390070921985816,
        "rougel-17": 0.5106382978723404,
        "rougel-12": 0.5684210526315788,
        "rougel-6": 0.5205479452054794,
        "rougel-18": 0.5277777777777778,
        "rougel-15": 0.4933333333333333,
        "rougel-13": 0.2597402597402597,
        "rougel-9": 0.4966442953020134,
        "rougel-4": 0.4933333333333333,
        "rougel-14": 0.513888888888889,
        "rougel-5": 0.30303030303030304,
        "rougel-19": 0.2857142857142857,
        "meteor-3": 0.26929863480730554,
        "meteor-0": 0.21465073283920943,
        "meteor-8": 0.3811475409836066,
        "meteor-7": 0.26097114282661005,
        "meteor-16": 0.35368803770771917,
        "meteor-2": 0.3406612533498509,
        "meteor-11": 0.16853790522429574,
        "meteor-1": 0.18756443809977005,
        "meteor-10": 0.34703577170418004,
        "meteor-17": 0.3486557963431572,
        "meteor-12": 0.6131477709889116,
        "meteor-6": 0.4013240674932217,
        "meteor-18": 0.3955861058133785,
        "meteor-15": 0.36856422505307856,
        "meteor-13": 0.21779393007530617,
        "meteor-9": 0.35368803770771917,
        "meteor-4": 0.36856422505307856,
        "meteor-14": 0.3669544740973312,
        "meteor-5": 0.17875555446443916,
        "meteor-19": 0.2787918005931824,
        "ruby-3": 0.2828282828282829,
        "ruby-0": 0.18181818181818177,
        "ruby-8": 0.19191919191919193,
        "ruby-7": 0.19191919191919193,
        "ruby-16": 0.3434343434343434,
        "ruby-2": 0.36363636363636365,
        "ruby-11": 0.16161616161616166,
        "ruby-1": 0.16161616161616166,
        "ruby-10": 0.3737373737373737,
        "ruby-17": 0.3535353535353535,
        "ruby-12": 0.3737373737373737,
        "ruby-6": 0.36363636363636365,
        "ruby-18": 0.38383838383838387,
        "ruby-15": 0.3434343434343434,
        "ruby-13": 0.19191919191919193,
        "ruby-9": 0.3434343434343434,
        "ruby-4": 0.3434343434343434,
        "ruby-14": 0.3434343434343434,
        "ruby-5": 0.19191919191919193,
        "ruby-19": 0.16161616161616166,
        "codebertscore_f1-3": 0.807680070400238,
        "codebertscore_f3-3": 0.7964637279510498,
        "codebertscore_f1-0": 0.7778496146202087,
        "codebertscore_f3-0": 0.7751356363296509,
        "codebertscore_f1-8": 0.7977300882339478,
        "codebertscore_f3-8": 0.8252748847007751,
        "codebertscore_f1-7": 0.7621212601661682,
        "codebertscore_f3-7": 0.7361946105957031,
        "codebertscore_f1-16": 0.8330913186073303,
        "codebertscore_f3-16": 0.8197147250175476,
        "codebertscore_f1-2": 0.8543883562088013,
        "codebertscore_f3-2": 0.8277542591094971,
        "codebertscore_f1-11": 0.7395603656768799,
        "codebertscore_f3-11": 0.7192791104316711,
        "codebertscore_f1-1": 0.7542037963867188,
        "codebertscore_f3-1": 0.7310265898704529,
        "codebertscore_f1-10": 0.8534618020057678,
        "codebertscore_f3-10": 0.8280569911003113,
        "codebertscore_f1-17": 0.8380369544029236,
        "codebertscore_f3-17": 0.8125629425048828,
        "codebertscore_f1-12": 0.8508511781692505,
        "codebertscore_f3-12": 0.8459958434104919,
        "codebertscore_f1-6": 0.8434461355209351,
        "codebertscore_f3-6": 0.8264618515968323,
        "codebertscore_f1-18": 0.8440808653831482,
        "codebertscore_f3-18": 0.8235774040222168,
        "codebertscore_f1-15": 0.835207462310791,
        "codebertscore_f3-15": 0.8195047974586487,
        "codebertscore_f1-13": 0.7346888184547424,
        "codebertscore_f3-13": 0.7186509370803833,
        "codebertscore_f1-9": 0.8330913186073303,
        "codebertscore_f3-9": 0.8197147250175476,
        "codebertscore_f1-4": 0.8239532113075256,
        "codebertscore_f3-4": 0.8127607107162476,
        "codebertscore_f1-14": 0.8348981142044067,
        "codebertscore_f3-14": 0.815423846244812,
        "codebertscore_f1-5": 0.7898731827735901,
        "codebertscore_f3-5": 0.7814316749572754,
        "codebertscore_f1-19": 0.7501828074455261,
        "codebertscore_f3-19": 0.7636133432388306,
        "codebertscore_s_f1-3": 0.9462618231773376,
        "codebertscore_s_f3-3": 0.9344298839569092,
        "codebertscore_s_f1-0": 0.9416206479072571,
        "codebertscore_s_f3-0": 0.9263988733291626,
        "codebertscore_s_f1-8": 0.9363053441047668,
        "codebertscore_s_f3-8": 0.943298876285553,
        "codebertscore_s_f1-7": 0.9343311786651611,
        "codebertscore_s_f3-7": 0.9156751036643982,
        "codebertscore_s_f1-16": 0.9562315344810486,
        "codebertscore_s_f3-16": 0.9434701204299927,
        "codebertscore_s_f1-2": 0.9618703722953796,
        "codebertscore_s_f3-2": 0.9464231133460999,
        "codebertscore_s_f1-11": 0.9305093288421631,
        "codebertscore_s_f3-11": 0.9118115305900574,
        "codebertscore_s_f1-1": 0.9337418079376221,
        "codebertscore_s_f3-1": 0.9135306477546692,
        "codebertscore_s_f1-10": 0.9616311192512512,
        "codebertscore_s_f3-10": 0.9463440775871277,
        "codebertscore_s_f1-17": 0.9584077596664429,
        "codebertscore_s_f3-17": 0.942213773727417,
        "codebertscore_s_f1-12": 0.9532865285873413,
        "codebertscore_s_f3-12": 0.9485971927642822,
        "codebertscore_s_f1-6": 0.9590132236480713,
        "codebertscore_s_f3-6": 0.9460364580154419,
        "codebertscore_s_f1-18": 0.9590556621551514,
        "codebertscore_s_f3-18": 0.9445419311523438,
        "codebertscore_s_f1-15": 0.9556739330291748,
        "codebertscore_s_f3-15": 0.9432781934738159,
        "codebertscore_s_f1-13": 0.9264332056045532,
        "codebertscore_s_f3-13": 0.9086618423461914,
        "codebertscore_s_f1-9": 0.9562315344810486,
        "codebertscore_s_f3-9": 0.9434701204299927,
        "codebertscore_s_f1-4": 0.9531330466270447,
        "codebertscore_s_f3-4": 0.9400221109390259,
        "codebertscore_s_f1-14": 0.9564104080200195,
        "codebertscore_s_f3-14": 0.9419675469398499,
        "codebertscore_s_f1-5": 0.9474475383758545,
        "codebertscore_s_f3-5": 0.9313161969184875,
        "codebertscore_s_f1-19": 0.9253261089324951,
        "codebertscore_s_f3-19": 0.921470582485199,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length(arr){\n",
        "snippet": [
            "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
        "task_id": "105",
        "3": "var res = [];\n  for(var i = 1; i <= 9; i++){\n    for(var j = 0; j < arr.length; j++){\n      if(arr[j] == i){\n        res.push(arr[j]);\n      }\n    }\n  }\n  return res;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let new_arr = [];\n    for(let i = 1; i <= 9; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] == i){\n                new_arr.push(arr[j]);\n            }\n        }\n    }\n    return new_arr;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var sortedArray = [];\n    var sort = arr.sort(function(a, b){return a-b});\n    for(var i = 1; i <= 9; i++){\n      var count = 0;\n      for(var j = 0; j < sort.length; j++){\n          if(sort[j] == i){\n              count++;\n          }\n      }\n      for(var x = 0; x < count; x++){\n          sortedArray.push(i);\n      }\n    }\n    return sortedArray;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var lengths = {};\n\tvar result = [];\n\tvar count = 0;\n\tvar long_word =\"\";\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(!(arr[i].length in lengths)){\n\t\t\tlengths[arr[i].length] = [];\n\t\t}\n\t\tlengths[arr[i].length].push(arr[i]);\n\t}\n\tfor(var key in lengths){\n\t\tfor(var i = 0; i < lengths[key].length; i++){\n\t\t\tresult.push(lengths[key][i]);\n\t\t}\n\t}\n\treturn result;\n}\nvar arr = [\"cat\", \"dog\", \"fish\", \"monkey\", \"pig\", \"whale\", \"emu\", \"kangaroo\", \"bear\", \"mouse\", \"lion\", \"dog\"];",
        "grade-7": {
            "execution": 0
        },
        "16": "const result=[];\n    for(var i=0;i<arr.length;i++){\n        for(var j=0;j<arr.length;j++){\n            if(arr[i].length<arr[j].length){\n                var temp=arr[i];\n                arr[i]=arr[j];\n                arr[j]=temp;\n            }\n        }\n    }\n    return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(arr.length>1){\n\t\tvar flag = arr[0];\n\t\tvar array = [];\n\t\tfor(var i=1;i<arr.length;i++){\n\t\t\tif(arr[i].length<flag.length){\n\t\t\t\tarray.push(flag);\n\t\t\t\tflag = arr[i];\n\t\t\t}else{\n\t\t\t\tarray.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\tarray.push(flag);\n\t\treturn array;\n\t}else{\n\t\treturn arr;\n\t}\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return arr.length;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "arr.sort(function(a, b){\n        return a - b;\n    });\n    return arr;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] > 0 && arr[i] < 10){\n      result.push(arr[i]);\n    }\n  }\n  var numbers = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  }\n  var result2 = [];\n  for(var i = 0; i < result.length; i++){\n    result2.push(numbers[result[i]]);\n  }\n  return result2;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var obj = {}\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i].length] === undefined){\n            obj[arr[i].length] = [arr[i]]\n        }else{\n            obj[arr[i].length].push(arr[i])\n        }\n    }\n    var array = []\n    for(var keys in obj){\n        for(var j = 0; j < obj[keys].length; j++){\n            array.push(obj[keys][j])\n        }\n    }\n    return array\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "arr.sort(function(a, b){\n        return a.length - b.length;\n    });\n    return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let arr1 = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 1 || arr[i] > 9){\n            arr1.push('');\n        }\n        else if(arr[i] == 1){\n            arr1.push('One');\n        }\n        else if(arr[i] == 2){\n            arr1.push('Two');\n        }\n        else if(arr[i] == 3){\n            arr1.push('Three');\n        }\n        else if(arr[i] == 4){\n            arr1.push('Four');\n        }\n        else if(arr[i] == 5){\n            arr1.push('Five');\n        }\n        else if(arr[i] == 6){\n            arr1.push('Six');\n        }\n        else if(arr[i] == 7){\n            arr1.push('Seven');\n        }\n        else if(arr[i] == 8){\n            arr1.push('Eight');\n        }\n        else if(arr[i] == 9){\n            arr1.push('Nine');\n        }\n    }\n    return arr1;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "arr.sort(function(a, b){\n    return a.length - b.length;\n  });\n  return arr;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return arr.sort(function(a, b){\n    return b.length - a.length;\n  });\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr2 = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] < 0 || arr[i] > 9 || arr[i] % 1 != 0){\n\t\t\tarr.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\tarr.sort(function(a, b){return a - b});\n\tfor(var j = 0; j < arr.length; j++){\n\t\tif(arr[j] == 1){\n\t\t\tarr2.push(\"One\");\n\t\t}\n\t\telse if(arr[j] == 2){\n\t\t\tarr2.push(\"Two\");\n\t\t}\n\t\telse if(arr[j] == 3){\n\t\t\tarr2.push(\"Three\");\n\t\t}\n\t\telse if(arr[j] == 4){\n\t\t\tarr2.push(\"Four\");\n\t\t}\n\t\telse if(arr[j] == 5){\n\t\t\tarr2.push(\"Five\");\n\t\t}\n\t\telse if(arr[j] == 6){\n\t\t\tarr2.push(\"Six\");\n\t\t}\n\t\telse if(arr[j] == 7){\n\t\t\tarr2.push(\"Seven\");\n\t\t}\n\t\telse if(arr[j] == 8){\n\t\t\tarr2.push(\"Eight\");\n\t\t}\n\t\telse if(arr[j] == 9){\n\t\t\tarr2.push(\"Nine\");\n\t\t}\n\t}\n\treturn arr2.reverse();\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let newArr = arr.sort(function(a, b){\n      return b.length - a.length;\n    });\n    return newArr;\n  }",
        "grade-9": {
            "execution": 0
        },
        "4": "return arr.sort(function(a, b){\n        return b.length - a.length;\n    });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return arr.sort(function(a, b){\n    return a.length - b.length;\n  });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let arr_map = arr.map(e => e.toString().length);\n    let map_group = group_by(arr_map);\n    let sort_group = sort_by(map_group, 0, 1);\n    let map_sort = sort_group.map(e => e[1]);\n    let output = [];\n    map_sort.forEach(e => {\n        output = output.concat(e);\n    });\n    return output;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.05622234315063663,
        "bleu-0": 0.06450493984324492,
        "bleu-8": 0.1257670191495704,
        "bleu-7": 0.24929619330487626,
        "bleu-16": 0.1227047256650392,
        "bleu-2": 0.11147708334524807,
        "bleu-11": 1.1041199010591732e-16,
        "bleu-1": 1.1020246029373023e-05,
        "bleu-10": 0.29997909627699904,
        "bleu-17": 0.2108210169624581,
        "bleu-12": 7.344532745292572e-05,
        "bleu-6": 0.22273023533356942,
        "bleu-18": 7.344532745292572e-05,
        "bleu-15": 4.009732401452593e-05,
        "bleu-13": 0.22911888691320026,
        "bleu-9": 0.0002258587424906316,
        "bleu-4": 4.009732401452593e-05,
        "bleu-14": 0.042148349234054396,
        "bleu-5": 4.009732401452593e-05,
        "bleu-19": 0.010716282930621997,
        "codebleu-3": 0.1908595154376434,
        "codebleu-0": 0.19245039141791254,
        "codebleu-8": 0.30735085836048215,
        "codebleu-7": 0.5337504165815796,
        "codebleu-16": 0.27247814164709366,
        "codebleu-2": 0.2795637760269707,
        "codebleu-11": 0.01320132013201322,
        "codebleu-1": 0.04840702756475353,
        "codebleu-10": 0.4623856108101273,
        "codebleu-17": 0.3838452624501543,
        "codebleu-12": 0.06161719793448227,
        "codebleu-6": 0.5672323640135642,
        "codebleu-18": 0.06161719793448227,
        "codebleu-15": 0.057210945964987193,
        "codebleu-13": 0.6387494786284182,
        "codebleu-9": 0.07264904889955463,
        "codebleu-4": 0.057210945964987193,
        "codebleu-14": 0.1660914904992393,
        "codebleu-5": 0.057210945964987193,
        "codebleu-19": 0.21846717609349633,
        "chrf-3": 0.18963218705299367,
        "chrf-0": 0.22634900370542976,
        "chrf-8": 0.1960626162558697,
        "chrf-7": 0.3031829132604351,
        "chrf-16": 0.2663757603185509,
        "chrf-2": 0.24630868739502096,
        "chrf-11": 0.045402788539166766,
        "chrf-1": 0.04544720254809242,
        "chrf-10": 0.320498797448068,
        "chrf-17": 0.31537717576952584,
        "chrf-12": 0.08053533477177992,
        "chrf-6": 0.32184310093403584,
        "chrf-18": 0.08053533477177992,
        "chrf-15": 0.07656011286091524,
        "chrf-13": 0.3032613841627707,
        "chrf-9": 0.08809316121932272,
        "chrf-4": 0.07656011286091524,
        "chrf-14": 0.21172405793388818,
        "chrf-5": 0.07656011286091524,
        "chrf-19": 0.13273561406166295,
        "rougel-3": 0.34931506849315064,
        "rougel-0": 0.36301369863013705,
        "rougel-8": 0.3539823008849558,
        "rougel-7": 0.4552058111380145,
        "rougel-16": 0.3821656050955414,
        "rougel-2": 0.31384615384615383,
        "rougel-11": 0.04366812227074236,
        "rougel-1": 0.0975609756097561,
        "rougel-10": 0.5994694960212201,
        "rougel-17": 0.43749999999999994,
        "rougel-12": 0.12000000000000001,
        "rougel-6": 0.3689727463312369,
        "rougel-18": 0.12000000000000001,
        "rougel-15": 0.11290322580645162,
        "rougel-13": 0.3902439024390244,
        "rougel-9": 0.13333333333333333,
        "rougel-4": 0.11290322580645162,
        "rougel-14": 0.3462897526501767,
        "rougel-5": 0.11290322580645162,
        "rougel-19": 0.25161290322580643,
        "meteor-3": 0.22761541639420343,
        "meteor-0": 0.2356034287524041,
        "meteor-8": 0.288567949969603,
        "meteor-7": 0.4445644006216115,
        "meteor-16": 0.2539678846326203,
        "meteor-2": 0.2442884277779158,
        "meteor-11": 0.021181762985041673,
        "meteor-1": 0.046345828201970446,
        "meteor-10": 0.48446207020794546,
        "meteor-17": 0.38018673438434947,
        "meteor-12": 0.056176253687315644,
        "meteor-6": 0.4383108332378818,
        "meteor-18": 0.056176253687315644,
        "meteor-15": 0.05127071789637405,
        "meteor-13": 0.4760730360335762,
        "meteor-9": 0.0634415291234908,
        "meteor-4": 0.05127071789637405,
        "meteor-14": 0.19321730299431844,
        "meteor-5": 0.05127071789637405,
        "meteor-19": 0.14565425023877746,
        "ruby-3": 0.21076233183856508,
        "ruby-0": 0.21973094170403584,
        "ruby-8": 0.2376681614349776,
        "ruby-7": 0.2376681614349776,
        "ruby-16": 0.24215246636771304,
        "ruby-2": 0.2017937219730942,
        "ruby-11": 0.022421524663677084,
        "ruby-1": 0.053811659192825156,
        "ruby-10": 0.4080717488789237,
        "ruby-17": 0.3004484304932735,
        "ruby-12": 0.06726457399103136,
        "ruby-6": 0.2716535433070866,
        "ruby-18": 0.06726457399103136,
        "ruby-15": 0.06278026905829592,
        "ruby-13": 0.2935483870967742,
        "ruby-9": 0.0717488789237668,
        "ruby-4": 0.06278026905829592,
        "ruby-14": 0.2017937219730942,
        "ruby-5": 0.06278026905829592,
        "ruby-19": 0.1434977578475336,
        "codebertscore_f1-3": 0.7872130870819092,
        "codebertscore_f3-3": 0.7407265901565552,
        "codebertscore_f1-0": 0.8028106689453125,
        "codebertscore_f3-0": 0.7658587694168091,
        "codebertscore_f1-8": 0.7774136662483215,
        "codebertscore_f3-8": 0.7668766975402832,
        "codebertscore_f1-7": 0.7565022110939026,
        "codebertscore_f3-7": 0.7597939968109131,
        "codebertscore_f1-16": 0.8043443560600281,
        "codebertscore_f3-16": 0.7701539993286133,
        "codebertscore_f1-2": 0.7636258602142334,
        "codebertscore_f3-2": 0.7326809763908386,
        "codebertscore_f1-11": 0.599174439907074,
        "codebertscore_f3-11": 0.5262534618377686,
        "codebertscore_f1-1": 0.6220998764038086,
        "codebertscore_f3-1": 0.5762530565261841,
        "codebertscore_f1-10": 0.8287902474403381,
        "codebertscore_f3-10": 0.8173588514328003,
        "codebertscore_f1-17": 0.8021649122238159,
        "codebertscore_f3-17": 0.784418523311615,
        "codebertscore_f1-12": 0.6308115720748901,
        "codebertscore_f3-12": 0.5850000977516174,
        "codebertscore_f1-6": 0.7794637680053711,
        "codebertscore_f3-6": 0.7851591110229492,
        "codebertscore_f1-18": 0.6279879808425903,
        "codebertscore_f3-18": 0.5804184079170227,
        "codebertscore_f1-15": 0.6109161376953125,
        "codebertscore_f3-15": 0.5660350918769836,
        "codebertscore_f1-13": 0.8129914999008179,
        "codebertscore_f3-13": 0.8266516923904419,
        "codebertscore_f1-9": 0.6397770643234253,
        "codebertscore_f3-9": 0.5984245538711548,
        "codebertscore_f1-4": 0.6134668588638306,
        "codebertscore_f3-4": 0.5690329074859619,
        "codebertscore_f1-14": 0.7920457720756531,
        "codebertscore_f3-14": 0.7350404858589172,
        "codebertscore_f1-5": 0.6158021688461304,
        "codebertscore_f3-5": 0.5699756741523743,
        "codebertscore_f1-19": 0.6875107884407043,
        "codebertscore_f3-19": 0.6684747934341431,
        "codebertscore_s_f1-3": 0.8798925280570984,
        "codebertscore_s_f3-3": 0.8432239890098572,
        "codebertscore_s_f1-0": 0.8818676471710205,
        "codebertscore_s_f3-0": 0.8507252931594849,
        "codebertscore_s_f1-8": 0.8447845578193665,
        "codebertscore_s_f3-8": 0.8353017568588257,
        "codebertscore_s_f1-7": 0.8221305012702942,
        "codebertscore_s_f3-7": 0.8260125517845154,
        "codebertscore_s_f1-16": 0.8744134902954102,
        "codebertscore_s_f3-16": 0.8463586568832397,
        "codebertscore_s_f1-2": 0.8470501899719238,
        "codebertscore_s_f3-2": 0.8220028281211853,
        "codebertscore_s_f1-11": 0.8282024264335632,
        "codebertscore_s_f3-11": 0.7441684007644653,
        "codebertscore_s_f1-1": 0.8171331286430359,
        "codebertscore_s_f3-1": 0.7531177997589111,
        "codebertscore_s_f1-10": 0.8723883628845215,
        "codebertscore_s_f3-10": 0.8601258993148804,
        "codebertscore_s_f1-17": 0.860040545463562,
        "codebertscore_s_f3-17": 0.8439977765083313,
        "codebertscore_s_f1-12": 0.8154407739639282,
        "codebertscore_s_f3-12": 0.753868579864502,
        "codebertscore_s_f1-6": 0.8424492478370667,
        "codebertscore_s_f3-6": 0.8471220135688782,
        "codebertscore_s_f1-18": 0.8148565292358398,
        "codebertscore_s_f3-18": 0.7530826330184937,
        "codebertscore_s_f1-15": 0.8115383386611938,
        "codebertscore_s_f3-15": 0.7496493458747864,
        "codebertscore_s_f1-13": 0.8564698100090027,
        "codebertscore_s_f3-13": 0.866263210773468,
        "codebertscore_s_f1-9": 0.8111158013343811,
        "codebertscore_s_f3-9": 0.7611839771270752,
        "codebertscore_s_f1-4": 0.8119681477546692,
        "codebertscore_s_f3-4": 0.7501826286315918,
        "codebertscore_s_f1-14": 0.882685124874115,
        "codebertscore_s_f3-14": 0.8384426236152649,
        "codebertscore_s_f1-5": 0.8143080472946167,
        "codebertscore_s_f3-5": 0.7521326541900635,
        "codebertscore_s_f1-19": 0.7933104634284973,
        "codebertscore_s_f3-19": 0.7716449499130249,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "Score: 0",
        "gpt35_nsnr-16": 0,
        "raw_gpt35_nsnr-16": "0",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0",
        "gpt35_nsnr-11": 0,
        "raw_gpt35_nsnr-11": "0",
        "gpt35_nsnr-1": 2,
        "raw_gpt35_nsnr-1": "2",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-12": 0,
        "raw_gpt35_nsnr-12": "0",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 0,
        "raw_gpt35_nsnr-18": "0",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "0",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 0,
        "raw_gpt35_nsnr-9": "0",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0",
        "gpt35_nsnr-19": 2,
        "raw_gpt35_nsnr-19": "2",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-16": 1,
        "raw_gpt35_nswr-16": "1",
        "gpt35_nswr-2": 0,
        "raw_gpt35_nswr-2": "Score: 0",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "0",
        "gpt35_nswr-12": 0,
        "raw_gpt35_nswr-12": "0",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 0,
        "raw_gpt35_nswr-18": "0",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "0",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 0,
        "raw_gpt35_nswr-9": "0",
        "gpt35_nswr-4": 0,
        "raw_gpt35_nswr-4": "0",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 0,
        "raw_gpt35_nswr-5": "0",
        "gpt35_nswr-19": 0,
        "raw_gpt35_nswr-19": "0"
    },
    {
        "intent": "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n",
        "snippet": [
            "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n"
        ],
        "simplified": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
        "task_id": "68",
        "3": "let evens = arr.filter(n => n % 2 === 0);\n    let minEven = Math.min(...evens);\n    let minEvenIndex = arr.indexOf(minEven);\n    return [minEven, minEvenIndex];\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let smallest=Infinity;\n    let index=-1;\n    let lowest=-1;\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]%2===0 && arr[i]<smallest){\n            smallest=arr[i];\n            index=i;\n        }\n        if(arr[i]===0){\n            lowest=i;\n        }\n    }\n    if(smallest===Infinity || lowest===-1){\n        return []\n    }else if(smallest>0){\n        return [smallest,index]\n    }else{\n        return [0,lowest]\n    }\n}\nlet test1=pluck([4,2,3]);\nlet test2=pluck([1,2,3]);\nlet test3=pluck([]);\nlet test4=pluck([5, 0, 3, 0, 4, 2]);",
        "grade-0": {
            "execution": 0
        },
        "8": "let min = Number.MAX_SAFE_INTEGER;\n    let answer = [];\n    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            index = i;\n        }\n    }\n    if(index === -1){\n        return answer;\n    }\n    answer.push(min);\n    answer.push(index);\n    return answer;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return arr.reduce((acc, curr, idx) => {\n    if (curr % 2 === 0) {\n      if (acc[0] === undefined || curr < acc[0]) {\n        acc[0] = curr;\n        acc[1] = idx;\n      }\n    }\n    return acc;\n  }, []);\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let res = [];\n    if(arr.length > 0){\n        let ind = 0;\n        let small = 0;\n        while(ind < arr.length){\n            if(arr[ind]%2 == 0){\n                small = arr[ind];\n                break;\n            }\n            ind++;\n        }\n        if(small == 0){\n            res = [];\n        }\n        else{\n            for(let i = ind+1; i < arr.length; i++){\n                if(arr[i] < small && arr[i]%2 == 0){\n                    small = arr[i];\n                    ind = i;\n                }\n            }\n            res.push(small);\n            res.push(ind);\n        }\n    }\n    else{\n        res = [];\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var even = arr.filter(function(e){return e % 2 === 0})\n  return even.length === 0 ? [] : [Math.min.apply(null, even), arr.indexOf(Math.min.apply(null, even))]\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "// return [value, index]\n    let temp = [];\n    let even = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === min){\n            temp.push(arr[i]);\n            temp.push(i);\n            return temp;\n        }\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let minEven = Infinity;\n    let minIndex = null;\n    arr.forEach((value, index) => {\n        if(value % 2 === 0 && value < minEven){\n            minEven = value;\n            minIndex = index;\n        }\n    });\n    return minEven === Infinity ? [] : [minEven, minIndex];\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "if(arr.length == 0) return [];\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0) {\n            even.push(arr[i]);\n        } else {\n            odd.push(arr[i]);\n        }\n    }\n    if(even.length == 0) return [];\n    for(var i = 0; i < even.length; i++){\n        for(var j = 0; j < odd.length; j++){\n            if(even[i] < odd[j]){\n                var tmp = even[i];\n                even[i] = odd[j];\n                odd[j] = tmp;\n            }\n        }\n    }\n    var res = [even[0], arr.indexOf(even[0])];\n    return res;\n}\nvar test1 = [4,2,3];\nvar test2 = [1,2,3];\nvar test3 = [];\nvar test4 = [5, 0, 3, 0, 4, 2];",
        "grade-10": {
            "execution": 0
        },
        "17": "let index = Infinity;\n    let even = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < even){\n            even = arr[i];\n            index = i;\n        }\n    }\n    if(even === -1){\n        return [];\n    }\n    return [even, index];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let even = []\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i])\n        }\n    }\n    if(even.length === 0){\n        return []\n    }\n    let smallest = even[0]\n    let index = 0\n    for(let i = 0; i < even.length; i++){\n        if(even[i] < smallest){\n            smallest = even[i]\n            index = i\n        }\n    }\n    return [smallest, index]\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let evens = []\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0) evens.push([arr[i], i])\n  }\n  evens.sort((a, b) => a[0] - b[0])\n  return evens[0] || []\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(arr.length === 0) return [];\n    let evens = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push([arr[i], i]);\n        }\n    }\n    if(evens.length === 0) return [];\n    let smallest = evens[0];\n    for(let i = 1; i < evens.length; i++){\n        if(evens[i][0] < smallest[0]){\n            smallest = evens[i];\n        }\n    }\n    return smallest;\n}\nmodule.exports = pluck;",
        "grade-18": {
            "execution": 1
        },
        "15": "let smallestEven = null;\n\tlet smallestEvenIndex = null;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0){\n\t\t\tif(smallestEven === null){\n\t\t\t\tsmallestEven = arr[i];\n\t\t\t\tsmallestEvenIndex = i;\n\t\t\t}\n\t\t\telse if(arr[i] < smallestEven){\n\t\t\t\tsmallestEven = arr[i];\n\t\t\t\tsmallestEvenIndex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn smallestEven === null ? [] : [smallestEven, smallestEvenIndex];\n}\n\nlet arr1 = [4,2,3];\nlet arr2 = [1,2,3];\nlet arr3 = [];\nlet arr4 = [5, 0, 3, 0, 4, 2];",
        "grade-15": {
            "execution": 1
        },
        "13": "if(arr.length === 0){\n        return [];\n    }\n    const even = arr.filter(val => val % 2 === 0).sort((a,b) => a - b)[0];\n    if(even === undefined){\n        return [];\n    }\n    const ind = arr.indexOf(even);\n    return [even, ind];\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "//find the smallest even integer, which is at the same time the first even integer in the array\n    //find its index in the array\n    //if none is found, return []\n    let smallestEven = arr.filter(v => v % 2 === 0).sort((a,b) => a - b)[0];\n    let smallestEvenIndex = arr.indexOf(smallestEven);\n    if(smallestEven === undefined) return [];\n    return [smallestEven, smallestEvenIndex];\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(arr.length == 0){\n        return [];\n    }\n    let small_even_value = null;\n    let small_index = null;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            if(small_even_value == null){\n                small_even_value = arr[i];\n                small_index = i;\n            }\n            else if(arr[i] < small_even_value){\n                small_even_value = arr[i];\n                small_index = i;\n            }\n        }\n    }\n    if(small_even_value == null){\n        return [];\n    }\n    return [small_even_value, small_index];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const smallEven = arr.filter(num => num % 2 === 0).sort((a,b) => a - b)[0];\n  return !smallEven ? [] : [smallEven, arr.indexOf(smallEven)];\n}\n\nmodule.exports = { pluck };",
        "grade-14": {
            "execution": 0
        },
        "5": "let smallestIndex = null;\n\tlet smallestEven = Number.MAX_SAFE_INTEGER;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\t\t\tsmallestEven = arr[i];\n\t\t\tsmallestIndex = i;\n\t\t}\n\t}\n\tif(smallestIndex === null){\n\t\treturn [];\n\t}\n\treturn [smallestEven, smallestIndex];\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// let evens = []\n  // let minEven = Infinity\n  // let minEvenIndex = Infinity\n  // for(let i = 0; i < arr.length; i++){\n  //   if(arr[i] % 2 === 0){\n  //     evens.push(arr[i])\n  //     if(arr[i] < minEven){\n  //       minEven = arr[i]\n  //       minEvenIndex = i\n  //     }\n  //   }\n  // }\n  // return minEvenIndex !== Infinity ? [minEven, minEvenIndex] : []\n  ////////////////\n  return arr.filter(e => e % 2 === 0).sort((a, b) => a - b).length > 0 ? [arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0], arr.indexOf(arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0])] : []\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.32864716396716287,
        "bleu-0": 0.062133828000340445,
        "bleu-8": 0.08391478666093927,
        "bleu-7": 0.11288111066971869,
        "bleu-16": 0.12354093164302343,
        "bleu-2": 0.3273465360373781,
        "bleu-11": 0.16888705735115245,
        "bleu-1": 0.08932163394771639,
        "bleu-10": 0.14916106951596025,
        "bleu-17": 0.12441522047408302,
        "bleu-12": 0.12434018743562865,
        "bleu-6": 0.12313641215619578,
        "bleu-18": 0.2260445292112501,
        "bleu-15": 0.06545997814242793,
        "bleu-13": 0.3342451963970525,
        "bleu-9": 0.20820738061395286,
        "bleu-4": 0.18397056523389246,
        "bleu-14": 0.24548546716086997,
        "bleu-5": 0.11376847422815875,
        "bleu-19": 0.08920380868969818,
        "codebleu-3": 0.4772162799161503,
        "codebleu-0": 0.5544647710149648,
        "codebleu-8": 0.5560324036532164,
        "codebleu-7": 0.4759283934343604,
        "codebleu-16": 0.593104267301627,
        "codebleu-2": 0.5257241931568123,
        "codebleu-11": 0.6819689458011075,
        "codebleu-1": 0.4380668492532632,
        "codebleu-10": 0.6801648533141739,
        "codebleu-17": 0.48057086790793263,
        "codebleu-12": 0.5748918404736034,
        "codebleu-6": 0.4954467475174206,
        "codebleu-18": 0.6639948292642573,
        "codebleu-15": 0.49263672960356136,
        "codebleu-13": 0.6358927983284419,
        "codebleu-9": 0.5838400345602789,
        "codebleu-4": 0.5951790571525296,
        "codebleu-14": 0.4949154628933139,
        "codebleu-5": 0.4855991312887139,
        "codebleu-19": 0.6089474867138787,
        "chrf-3": 0.42050001192693187,
        "chrf-0": 0.2531471793131603,
        "chrf-8": 0.2759019639277617,
        "chrf-7": 0.18025499554814706,
        "chrf-16": 0.2813926194995551,
        "chrf-2": 0.47509254310225585,
        "chrf-11": 0.43855080735522994,
        "chrf-1": 0.20474792010230924,
        "chrf-10": 0.4372695471370984,
        "chrf-17": 0.33014910353302335,
        "chrf-12": 0.34785545142268476,
        "chrf-6": 0.28841347245676224,
        "chrf-18": 0.43691459048449843,
        "chrf-15": 0.21997444158204155,
        "chrf-13": 0.49008992818523445,
        "chrf-9": 0.35947880616084954,
        "chrf-4": 0.3465934233280249,
        "chrf-14": 0.29671387337750993,
        "chrf-5": 0.27612987802323574,
        "chrf-19": 0.3405454636562567,
        "rougel-3": 0.5303030303030303,
        "rougel-0": 0.28030303030303033,
        "rougel-8": 0.34831460674157305,
        "rougel-7": 0.3561643835616438,
        "rougel-16": 0.3418803418803419,
        "rougel-2": 0.5652173913043478,
        "rougel-11": 0.4090909090909091,
        "rougel-1": 0.36000000000000004,
        "rougel-10": 0.3238095238095238,
        "rougel-17": 0.3726708074534162,
        "rougel-12": 0.3298969072164949,
        "rougel-6": 0.32258064516129037,
        "rougel-18": 0.4423963133640553,
        "rougel-15": 0.22594142259414224,
        "rougel-13": 0.5660377358490566,
        "rougel-9": 0.35106382978723405,
        "rougel-4": 0.39795918367346944,
        "rougel-14": 0.4366197183098592,
        "rougel-5": 0.3431952662721893,
        "rougel-19": 0.27794561933534745,
        "meteor-3": 0.44130405004337697,
        "meteor-0": 0.3198506658051357,
        "meteor-8": 0.39929710046897543,
        "meteor-7": 0.3444444444444444,
        "meteor-16": 0.3696464891041162,
        "meteor-2": 0.5652436102026092,
        "meteor-11": 0.5161308187833387,
        "meteor-1": 0.38043314530977806,
        "meteor-10": 0.4037621597311694,
        "meteor-17": 0.4495242171808634,
        "meteor-12": 0.42079153786301604,
        "meteor-6": 0.3908638669905962,
        "meteor-18": 0.37050479733043284,
        "meteor-15": 0.3274717412914952,
        "meteor-13": 0.6359000524073332,
        "meteor-9": 0.5560612957062661,
        "meteor-4": 0.4879655684919778,
        "meteor-14": 0.4284926161402092,
        "meteor-5": 0.45221524634577637,
        "meteor-19": 0.42176946141996213,
        "ruby-3": 0.33783783783783783,
        "ruby-0": 0.17894736842105263,
        "ruby-8": 0.22115384615384615,
        "ruby-7": 0.18918918918918914,
        "ruby-16": 0.22499999999999998,
        "ruby-2": 0.3918918918918919,
        "ruby-11": 0.3013698630136986,
        "ruby-1": 0.10526315789473684,
        "ruby-10": 0.20331950207468885,
        "ruby-17": 0.1724137931034483,
        "ruby-12": 0.23333333333333328,
        "ruby-6": 0.18518518518518523,
        "ruby-18": 0.32167832167832167,
        "ruby-15": 0.1515151515151515,
        "ruby-13": 0.43529411764705883,
        "ruby-9": 0.22807017543859653,
        "ruby-4": 0.30327868852459017,
        "ruby-14": 0.2702702702702703,
        "ruby-5": 0.16842105263157892,
        "ruby-19": 0.1712062256809338,
        "codebertscore_f1-3": 0.8738390803337097,
        "codebertscore_f3-3": 0.8747631907463074,
        "codebertscore_f1-0": 0.6562063694000244,
        "codebertscore_f3-0": 0.7015830874443054,
        "codebertscore_f1-8": 0.7345795035362244,
        "codebertscore_f3-8": 0.7480934262275696,
        "codebertscore_f1-7": 0.7444830536842346,
        "codebertscore_f3-7": 0.7507017850875854,
        "codebertscore_f1-16": 0.6685208678245544,
        "codebertscore_f3-16": 0.6982053518295288,
        "codebertscore_f1-2": 0.8717195391654968,
        "codebertscore_f3-2": 0.8795455098152161,
        "codebertscore_f1-11": 0.7707405090332031,
        "codebertscore_f3-11": 0.8005616664886475,
        "codebertscore_f1-1": 0.7599251866340637,
        "codebertscore_f3-1": 0.763251543045044,
        "codebertscore_f1-10": 0.7154449820518494,
        "codebertscore_f3-10": 0.775380551815033,
        "codebertscore_f1-17": 0.7674285173416138,
        "codebertscore_f3-17": 0.7712490558624268,
        "codebertscore_f1-12": 0.762218713760376,
        "codebertscore_f3-12": 0.7831525206565857,
        "codebertscore_f1-6": 0.8001330494880676,
        "codebertscore_f3-6": 0.8087667226791382,
        "codebertscore_f1-18": 0.7930495142936707,
        "codebertscore_f3-18": 0.8249273896217346,
        "codebertscore_f1-15": 0.7025017142295837,
        "codebertscore_f3-15": 0.7363014817237854,
        "codebertscore_f1-13": 0.8539339900016785,
        "codebertscore_f3-13": 0.8554049730300903,
        "codebertscore_f1-9": 0.7532194256782532,
        "codebertscore_f3-9": 0.7875548601150513,
        "codebertscore_f1-4": 0.7223814725875854,
        "codebertscore_f3-4": 0.7568966150283813,
        "codebertscore_f1-14": 0.8002625107765198,
        "codebertscore_f3-14": 0.8048880696296692,
        "codebertscore_f1-5": 0.7516147494316101,
        "codebertscore_f3-5": 0.7746496796607971,
        "codebertscore_f1-19": 0.7424735426902771,
        "codebertscore_f3-19": 0.7866136431694031,
        "codebertscore_s_f1-3": 0.8601129055023193,
        "codebertscore_s_f3-3": 0.8619281649589539,
        "codebertscore_s_f1-0": 0.6982966661453247,
        "codebertscore_s_f3-0": 0.7282519340515137,
        "codebertscore_s_f1-8": 0.7176578640937805,
        "codebertscore_s_f3-8": 0.7381072044372559,
        "codebertscore_s_f1-7": 0.7192320227622986,
        "codebertscore_s_f3-7": 0.7272080779075623,
        "codebertscore_s_f1-16": 0.7257179021835327,
        "codebertscore_s_f3-16": 0.7399111986160278,
        "codebertscore_s_f1-2": 0.8629481196403503,
        "codebertscore_s_f3-2": 0.8733615279197693,
        "codebertscore_s_f1-11": 0.7675138711929321,
        "codebertscore_s_f3-11": 0.7873200178146362,
        "codebertscore_s_f1-1": 0.7250106334686279,
        "codebertscore_s_f3-1": 0.7385322451591492,
        "codebertscore_s_f1-10": 0.764007031917572,
        "codebertscore_s_f3-10": 0.8021309971809387,
        "codebertscore_s_f1-17": 0.7431695461273193,
        "codebertscore_s_f3-17": 0.7518560290336609,
        "codebertscore_s_f1-12": 0.7492902278900146,
        "codebertscore_s_f3-12": 0.7632933855056763,
        "codebertscore_s_f1-6": 0.7713106870651245,
        "codebertscore_s_f3-6": 0.7843659520149231,
        "codebertscore_s_f1-18": 0.7795668840408325,
        "codebertscore_s_f3-18": 0.8096673488616943,
        "codebertscore_s_f1-15": 0.7082335352897644,
        "codebertscore_s_f3-15": 0.7416821122169495,
        "codebertscore_s_f1-13": 0.8187772035598755,
        "codebertscore_s_f3-13": 0.8303703665733337,
        "codebertscore_s_f1-9": 0.7196195125579834,
        "codebertscore_s_f3-9": 0.7599902749061584,
        "codebertscore_s_f1-4": 0.7549580931663513,
        "codebertscore_s_f3-4": 0.7818057537078857,
        "codebertscore_s_f1-14": 0.7742875814437866,
        "codebertscore_s_f3-14": 0.7814924716949463,
        "codebertscore_s_f1-5": 0.7143082022666931,
        "codebertscore_s_f3-5": 0.7484080791473389,
        "codebertscore_s_f1-19": 0.7666736841201782,
        "codebertscore_s_f3-19": 0.8113940954208374,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3]) = -1\nfunction can_arrange(arr){\n",
        "snippet": [
            "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n"
        ],
        "simplified": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
        "task_id": "135",
        "3": "return arr.findIndex((e, i) => e > arr[i - 1]) - 1;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for (var i = 0; i < arr.length; i++) {\n    for (var j = i + 1; j < arr.length; j++) {\n      if (arr[i] >= arr[j]) {\n        return j - 1;\n      }\n    }\n  }\n  return -1;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(var i = arr.length-1; i > 0; i--){\n        if(arr[i] > arr[i-1]){\n            return i-1;\n        }\n    }\n    return -1;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "for(var i = arr.length - 1; i >= 0; i--){\n\t\tif(arr[i - 1] > arr[i]){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var count = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i+1] < arr[i]){\n      return count;\n    }\n    count++;\n  }\n  return -1;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//your code here\n    let max = arr[0]\n    let index = -1\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <= max){\n            max = arr[i]\n            index = i\n        } else {\n            max = arr[i]\n        }\n    }\n    return index\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var len = arr.length, index = len - 1;\n  for(var i = 0; i < len; i++){\n    if(arr[i] > arr[i + 1]){\n      index = i;\n      break;\n    }\n  }\n  return index;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var indices = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] >= arr[i-1]){\n\t\t\tindices.push(i);\n\t\t}\n\t}\n\tvar max = Math.max(...indices);\n\treturn max;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "for (let i = arr.length-1; i > 0; i--) {\n    if (arr[i] > arr[i-1]) return i-1;\n  }\n  return -1;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let answer = -1;\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n      answer = i - 1;\n    }\n  }\n  return answer;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var newArr = arr.slice();\n    newArr.pop();\n    var s = newArr.length;\n    var a = newArr.indexOf(Math.max(...newArr));\n    if (newArr[a] < arr[s]){\n        return a;\n    }\n    else {\n        return -1;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for (var i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i-1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let i = arr.length - 1;\n  while (i >= 0 && arr[i] <= arr[i - 1]) {\n    i--;\n  }\n  return i - 1;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(arr.length <= 1) return -1;\n  var newArr = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] <= arr[i-1]){\n      newArr.push(i);\n    }\n  }\n  if(newArr.length === 0) return -1;\n  return newArr[newArr.length-1];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let index = -1;\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i - 1]){\n            index = i - 1;\n            break;\n        }\n    }\n    return index;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let index = -1;\n  let track = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > arr[i-1]){\n      index = i;\n    }\n  }\n  if(index !== -1){\n    return index;\n  }else{\n    return index;\n  }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var indice = -1;\n    var valor  = arr[0];\n    for(i=1; i<arr.length; i++){\n        if(arr[i] < valor){\n            indice = i;\n            valor = arr[i];\n        }\n    }\n    return indice;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(arr.length === 1) return -1;\n  var last = arr[0];\n  for(var i = 1; i < arr.length; i++){\n    if(arr[i] <= last){\n      return i - 1;\n    }\n    last = arr[i];\n  }\n  return -1;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i+1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var prev;\n  var largest = -1;\n  var j = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(i > 0){\n      prev = arr[i-1];\n    }\n    if(arr[i] < prev){\n      largest = i;\n    }\n  }\n  return largest;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.10054145748142115,
        "bleu-0": 0.3194432364523841,
        "bleu-8": 0.6194713675421801,
        "bleu-7": 0.5668450520086836,
        "bleu-16": 0.35037895196790414,
        "bleu-2": 0.27542263024345265,
        "bleu-11": 0.31490320091597673,
        "bleu-1": 0.29994218786276505,
        "bleu-10": 0.5961564995589631,
        "bleu-17": 0.6688223700184851,
        "bleu-12": 0.14580806773310914,
        "bleu-6": 0.4527792000826532,
        "bleu-18": 0.3735878092547524,
        "bleu-15": 0.3385813596169539,
        "bleu-13": 0.6694854434959459,
        "bleu-9": 0.35725133714511675,
        "bleu-4": 0.28038036116401843,
        "bleu-14": 0.37873400574102384,
        "bleu-5": 0.39809839013099163,
        "bleu-19": 0.31410305114548825,
        "codebleu-3": 0.2278239841344965,
        "codebleu-0": 0.5985564435481642,
        "codebleu-8": 0.5935345450605312,
        "codebleu-7": 0.5570606933961078,
        "codebleu-16": 0.4868641948601929,
        "codebleu-2": 0.5157415833751191,
        "codebleu-11": 0.5064848530738413,
        "codebleu-1": 0.5334568376527508,
        "codebleu-10": 0.5515508159671065,
        "codebleu-17": 0.6691953636578781,
        "codebleu-12": 0.48924929911262294,
        "codebleu-6": 0.5191234757349216,
        "codebleu-18": 0.42076937848337403,
        "codebleu-15": 0.6734963122963623,
        "codebleu-13": 0.6737195570749376,
        "codebleu-9": 0.6407328844406712,
        "codebleu-4": 0.49470875784590335,
        "codebleu-14": 0.6525437818815528,
        "codebleu-5": 0.4603093776279261,
        "codebleu-19": 0.6013943235811349,
        "chrf-3": 0.17913907510566301,
        "chrf-0": 0.4964470040426707,
        "chrf-8": 0.6209079487745885,
        "chrf-7": 0.5727955991659767,
        "chrf-16": 0.4302451944760207,
        "chrf-2": 0.4139294631909271,
        "chrf-11": 0.38461982781506593,
        "chrf-1": 0.36758408563353745,
        "chrf-10": 0.627559954631468,
        "chrf-17": 0.6254807619708143,
        "chrf-12": 0.3271034894259288,
        "chrf-6": 0.5121815619158938,
        "chrf-18": 0.42608126641805244,
        "chrf-15": 0.5652784867471841,
        "chrf-13": 0.630477923400973,
        "chrf-9": 0.48633889987714324,
        "chrf-4": 0.3689705228844808,
        "chrf-14": 0.5777966172155794,
        "chrf-5": 0.4967256819538448,
        "chrf-19": 0.40503878291091255,
        "rougel-3": 0.38554216867469876,
        "rougel-0": 0.540983606557377,
        "rougel-8": 0.7884615384615385,
        "rougel-7": 0.7572815533980581,
        "rougel-16": 0.6055045871559633,
        "rougel-2": 0.5238095238095238,
        "rougel-11": 0.6017699115044247,
        "rougel-1": 0.5040650406504066,
        "rougel-10": 0.7843137254901961,
        "rougel-17": 0.7818181818181817,
        "rougel-12": 0.3875968992248062,
        "rougel-6": 0.6601941747572816,
        "rougel-18": 0.6262626262626264,
        "rougel-15": 0.5771812080536913,
        "rougel-13": 0.7678571428571429,
        "rougel-9": 0.5468750000000001,
        "rougel-4": 0.5043478260869565,
        "rougel-14": 0.6141732283464566,
        "rougel-5": 0.66,
        "rougel-19": 0.49206349206349204,
        "meteor-3": 0.2927875695732838,
        "meteor-0": 0.736069492372349,
        "meteor-8": 0.7347359576605114,
        "meteor-7": 0.7264298086557223,
        "meteor-16": 0.6105289695339923,
        "meteor-2": 0.5620621673640819,
        "meteor-11": 0.6030407625761285,
        "meteor-1": 0.5139896373056994,
        "meteor-10": 0.7056451612903225,
        "meteor-17": 0.8012651379027033,
        "meteor-12": 0.44146986571228997,
        "meteor-6": 0.6829606440071556,
        "meteor-18": 0.5984377729530084,
        "meteor-15": 0.6075667019360006,
        "meteor-13": 0.7984437817833275,
        "meteor-9": 0.6726720601575829,
        "meteor-4": 0.5917171604465121,
        "meteor-14": 0.7620681205586866,
        "meteor-5": 0.6663644153928934,
        "meteor-19": 0.6694250644735902,
        "ruby-3": 0.24561403508771928,
        "ruby-0": 0.36923076923076925,
        "ruby-8": 0.6491228070175439,
        "ruby-7": 0.5964912280701755,
        "ruby-16": 0.38596491228070173,
        "ruby-2": 0.37681159420289856,
        "ruby-11": 0.49122807017543857,
        "ruby-1": 0.2727272727272727,
        "ruby-10": 0.6491228070175439,
        "ruby-17": 0.6842105263157895,
        "ruby-12": 0.2777777777777778,
        "ruby-6": 0.5087719298245614,
        "ruby-18": 0.42105263157894735,
        "ruby-15": 0.40217391304347827,
        "ruby-13": 0.6491228070175439,
        "ruby-9": 0.352112676056338,
        "ruby-4": 0.31034482758620685,
        "ruby-14": 0.4714285714285714,
        "ruby-5": 0.5263157894736843,
        "ruby-19": 0.3623188405797102,
        "codebertscore_f1-3": 0.8009600639343262,
        "codebertscore_f3-3": 0.7880709171295166,
        "codebertscore_f1-0": 0.8761484622955322,
        "codebertscore_f3-0": 0.8829300999641418,
        "codebertscore_f1-8": 0.9293734431266785,
        "codebertscore_f3-8": 0.9267574548721313,
        "codebertscore_f1-7": 0.9359745979309082,
        "codebertscore_f3-7": 0.9288054704666138,
        "codebertscore_f1-16": 0.8754143118858337,
        "codebertscore_f3-16": 0.877763032913208,
        "codebertscore_f1-2": 0.8264229893684387,
        "codebertscore_f3-2": 0.8453992605209351,
        "codebertscore_f1-11": 0.8661803603172302,
        "codebertscore_f3-11": 0.8689145445823669,
        "codebertscore_f1-1": 0.8373768329620361,
        "codebertscore_f3-1": 0.8439657092094421,
        "codebertscore_f1-10": 0.9383370876312256,
        "codebertscore_f3-10": 0.9345279335975647,
        "codebertscore_f1-17": 0.9335691332817078,
        "codebertscore_f3-17": 0.9374542236328125,
        "codebertscore_f1-12": 0.7803403735160828,
        "codebertscore_f3-12": 0.7944349646568298,
        "codebertscore_f1-6": 0.9025201797485352,
        "codebertscore_f3-6": 0.8975354433059692,
        "codebertscore_f1-18": 0.8934182524681091,
        "codebertscore_f3-18": 0.8820891380310059,
        "codebertscore_f1-15": 0.8800907731056213,
        "codebertscore_f3-15": 0.905865490436554,
        "codebertscore_f1-13": 0.9190933704376221,
        "codebertscore_f3-13": 0.9244586825370789,
        "codebertscore_f1-9": 0.8611215353012085,
        "codebertscore_f3-9": 0.8754160404205322,
        "codebertscore_f1-4": 0.8341007232666016,
        "codebertscore_f3-4": 0.8471331000328064,
        "codebertscore_f1-14": 0.8986359238624573,
        "codebertscore_f3-14": 0.9052609205245972,
        "codebertscore_f1-5": 0.9010513424873352,
        "codebertscore_f3-5": 0.8905390501022339,
        "codebertscore_f1-19": 0.8557049632072449,
        "codebertscore_f3-19": 0.873309314250946,
        "codebertscore_s_f1-3": 0.8052548170089722,
        "codebertscore_s_f3-3": 0.7936936020851135,
        "codebertscore_s_f1-0": 0.8871439099311829,
        "codebertscore_s_f3-0": 0.8923975825309753,
        "codebertscore_s_f1-8": 0.9394891262054443,
        "codebertscore_s_f3-8": 0.9378655552864075,
        "codebertscore_s_f1-7": 0.9465735554695129,
        "codebertscore_s_f3-7": 0.9403637051582336,
        "codebertscore_s_f1-16": 0.8829284310340881,
        "codebertscore_s_f3-16": 0.888972818851471,
        "codebertscore_s_f1-2": 0.8311929106712341,
        "codebertscore_s_f3-2": 0.8543997406959534,
        "codebertscore_s_f1-11": 0.8777994513511658,
        "codebertscore_s_f3-11": 0.8821031451225281,
        "codebertscore_s_f1-1": 0.849881649017334,
        "codebertscore_s_f3-1": 0.8599446415901184,
        "codebertscore_s_f1-10": 0.9479674100875854,
        "codebertscore_s_f3-10": 0.9474478960037231,
        "codebertscore_s_f1-17": 0.9426670670509338,
        "codebertscore_s_f3-17": 0.9476503729820251,
        "codebertscore_s_f1-12": 0.7858276963233948,
        "codebertscore_s_f3-12": 0.7971791625022888,
        "codebertscore_s_f1-6": 0.9163190722465515,
        "codebertscore_s_f3-6": 0.9125080108642578,
        "codebertscore_s_f1-18": 0.9035192131996155,
        "codebertscore_s_f3-18": 0.8957443237304688,
        "codebertscore_s_f1-15": 0.8791976571083069,
        "codebertscore_s_f3-15": 0.9068259596824646,
        "codebertscore_s_f1-13": 0.9258707761764526,
        "codebertscore_s_f3-13": 0.9332000613212585,
        "codebertscore_s_f1-9": 0.8630378246307373,
        "codebertscore_s_f3-9": 0.8789647221565247,
        "codebertscore_s_f1-4": 0.8334470987319946,
        "codebertscore_s_f3-4": 0.8476316332817078,
        "codebertscore_s_f1-14": 0.8996104001998901,
        "codebertscore_s_f3-14": 0.9066784977912903,
        "codebertscore_s_f1-5": 0.9161879420280457,
        "codebertscore_s_f3-5": 0.9072659611701965,
        "codebertscore_s_f1-19": 0.8629381656646729,
        "codebertscore_s_f3-19": 0.882935643196106,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunction f(n){\n",
        "snippet": [
            "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n"
        ],
        "simplified": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "task_id": "106",
        "3": "let array = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            array.push(factorial(i));\n        } else {\n            array.push(sum(i));\n        }\n    }\n    return array;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let result = [];\n  for (let i = 1; i <= n; i++){\n    if (i % 2 === 0){\n      let factorial = 1;\n      for (let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let k = 1; k <= i; k++){\n        sum += k;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let i = 1;\n  let result = [];\n  while (result.length < n) {\n    let next;\n    if (i % 2 === 0) {\n      next = factorial(i);\n    } else {\n      next = sumNumbers(i);\n    }\n    result.push(next);\n    i++;\n  }\n  return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var i = 1;\n    var arr = [];\n    while (i <= n) {\n        if (i % 2 == 0) {\n            arr.push(fakt(i));\n        } else {\n            arr.push(factorial(i));\n        }\n        i++;\n    }\n    return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            var factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            var sum = 0;\n            for (let k = 1; k <= i; k++) {\n                sum += k;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 2; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let arr = []\n    let nFactorial = 1;\n    let sumOfNumber = 0;\n    let currValue = 1;\n    for(let i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            currValue = nFactorial;\n            nFactorial *= i;\n        }\n        else{\n            currValue = sumOfNumber;\n            sumOfNumber += i;\n        }\n        arr.push(currValue);\n    }\n    return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let num = [1];\n  let sum = 0;\n  let factorial = 1;\n  for (let i = 1; i < n; i++) {\n    if (i % 2 !== 0) {\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      num.push(sum);\n      sum = 0;\n    } else {\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      num.push(factorial);\n      factorial = 1;\n    }\n  }\n  return num;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      arr.push(factorial(i));\n    } else {\n      arr.push(sumNums(i));\n    }\n  }\n  return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = [];\n  for (let i = 1; i <= n; i++) {\n    let inner;\n    if (i % 2 === 0) {\n      inner = factorial(i);\n    } else {\n      inner = sumNum(i);\n    }\n    result.push(inner);\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let answer = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            answer.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            answer.push(sum);\n        }\n    }\n    return answer;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var x = [];\n    for (var i = 1; i < n + 1; i++){\n        if (i % 2 === 0){\n            var y = 1;\n            for (var j = 1; j < i + 1; j++){\n                y = y * j;\n            }\n            x.push(y);\n        }\n        else {\n            var y = 0;\n            for (var j = 1; j < i + 1; j++){\n                y = y + j;\n            }\n            x.push(y);\n        }\n    }\n    return x;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let numberArray = []\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        numberArray.push(factorialize(i))\n      } else {\n        numberArray.push(sumOfNumbers(i))\n      }\n    }\n    return numberArray\n  }\n  \n  function factorialize(num) {\n    let factorial = 1\n    for (let i = 1; i <= num; i++) {\n      factorial *= i\n    }\n    return factorial\n  }\n  \n  function sumOfNumbers(num) {\n    let sum = 0\n    for (let i = 1; i <= num; i++) {\n      sum += i\n    }\n    return sum\n  }\n  \n  console.log(f(5))\n  console.log(f(6))",
        "grade-13": {
            "execution": 1
        },
        "9": "var a = [];\n    for (var i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            var j = 1;\n            var factorial = 1;\n            while (j <= i) {\n                factorial *= j;\n                j++;\n            }\n            a.push(factorial);\n        } else {\n            var sum = 0;\n            for (var k = 1; k <= i; k++) {\n                sum += k;\n            }\n            a.push(sum);\n        }\n    }\n    return a;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let k = 1; k <= i; k++) {\n                sum += k;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const temp = [];\n    let cnt = 1;\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            temp.push(factorial(i));\n        }else{\n            temp.push(cnt);\n            cnt += i;\n        }\n    }\n    return temp;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "const list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i%2 === 0 ? i * (i-1) : (i*(i+1))/2);\n  }\n  return list;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let arr = [];\n    for (let i = 1; i <= n; i++) {\n        let value = 0;\n        if (i % 2 == 0) {\n            value = factorial(i);\n        } else {\n            value = sumToN(i);\n        }\n        arr.push(value);\n    }\n    return arr;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.46014879423090865,
        "bleu-0": 0.3278634554980445,
        "bleu-8": 0.3135461158948621,
        "bleu-7": 0.3231469176294554,
        "bleu-16": 0.3050135050128431,
        "bleu-2": 0.3231469176294554,
        "bleu-11": 0.32657516553493693,
        "bleu-1": 0.3163659293809272,
        "bleu-10": 0.38120998873920725,
        "bleu-17": 0.25077759523334836,
        "bleu-12": 0.46349555139986826,
        "bleu-6": 0.4586606335300938,
        "bleu-18": 0.3163659293809272,
        "bleu-15": 0.2225249498685628,
        "bleu-13": 0.2556577266620358,
        "bleu-9": 0.2896251765851627,
        "bleu-4": 0.3348908817547359,
        "bleu-14": 0.4978049949164818,
        "bleu-5": 0.376569778022521,
        "bleu-19": 0.46962650123728644,
        "codebleu-3": 0.6395485087798854,
        "codebleu-0": 0.72301600227293,
        "codebleu-8": 0.6506839053058961,
        "codebleu-7": 0.7211446413103356,
        "codebleu-16": 0.6113351793398084,
        "codebleu-2": 0.7211446413103356,
        "codebleu-11": 0.7208633027829545,
        "codebleu-1": 0.7133478099355809,
        "codebleu-10": 0.729736548510798,
        "codebleu-17": 0.7157497542443177,
        "codebleu-12": 0.6383721169188702,
        "codebleu-6": 0.6644068604757243,
        "codebleu-18": 0.7133478099355809,
        "codebleu-15": 0.669955708699024,
        "codebleu-13": 0.707105745141347,
        "codebleu-9": 0.7155576844696201,
        "codebleu-4": 0.7308539066490451,
        "codebleu-14": 0.7338977317108865,
        "codebleu-5": 0.5313853409476698,
        "codebleu-19": 0.6986586804387724,
        "chrf-3": 0.4875584057157279,
        "chrf-0": 0.47625459484021543,
        "chrf-8": 0.3306148191698287,
        "chrf-7": 0.48017227984254857,
        "chrf-16": 0.35523407720140665,
        "chrf-2": 0.46998434849003345,
        "chrf-11": 0.4674461916121755,
        "chrf-1": 0.4601341472611362,
        "chrf-10": 0.4234203940189138,
        "chrf-17": 0.4110721697304752,
        "chrf-12": 0.5017626685696632,
        "chrf-6": 0.4435394332911654,
        "chrf-18": 0.4601341472611362,
        "chrf-15": 0.3520204998050898,
        "chrf-13": 0.3895443514939829,
        "chrf-9": 0.4124184512771897,
        "chrf-4": 0.4966699131548528,
        "chrf-14": 0.506782670277374,
        "chrf-5": 0.38683988317392864,
        "chrf-19": 0.4644473043057626,
        "rougel-3": 0.6917293233082706,
        "rougel-0": 0.5136612021857924,
        "rougel-8": 0.5035971223021583,
        "rougel-7": 0.5054945054945055,
        "rougel-16": 0.5606060606060607,
        "rougel-2": 0.5054945054945055,
        "rougel-11": 0.5027322404371585,
        "rougel-1": 0.5027322404371585,
        "rougel-10": 0.5487804878048781,
        "rougel-17": 0.5130890052356021,
        "rougel-12": 0.6917293233082706,
        "rougel-6": 0.6376811594202899,
        "rougel-18": 0.5027322404371585,
        "rougel-15": 0.4574468085106383,
        "rougel-13": 0.40888888888888886,
        "rougel-9": 0.49180327868852464,
        "rougel-4": 0.5164835164835165,
        "rougel-14": 0.6428571428571429,
        "rougel-5": 0.5190839694656487,
        "rougel-19": 0.6428571428571429,
        "meteor-3": 0.5713836336673707,
        "meteor-0": 0.588028960401245,
        "meteor-8": 0.48781974248927046,
        "meteor-7": 0.560326819407008,
        "meteor-16": 0.5265833152343146,
        "meteor-2": 0.560326819407008,
        "meteor-11": 0.5809322383058203,
        "meteor-1": 0.5446986690593689,
        "meteor-10": 0.6103245856353592,
        "meteor-17": 0.5236037135670958,
        "meteor-12": 0.5753160173160173,
        "meteor-6": 0.5193197809464064,
        "meteor-18": 0.5595726783310901,
        "meteor-15": 0.5411880661355452,
        "meteor-13": 0.4829480305149228,
        "meteor-9": 0.5595726783310901,
        "meteor-4": 0.588821452261624,
        "meteor-14": 0.6561463990554899,
        "meteor-5": 0.45515713494488225,
        "meteor-19": 0.525425926867721,
        "ruby-3": 0.5,
        "ruby-0": 0.31858407079646023,
        "ruby-8": 0.2571428571428571,
        "ruby-7": 0.3125,
        "ruby-16": 0.3285714285714286,
        "ruby-2": 0.3125,
        "ruby-11": 0.3097345132743363,
        "ruby-1": 0.31858407079646023,
        "ruby-10": 0.4042553191489362,
        "ruby-17": 0.36363636363636365,
        "ruby-12": 0.5,
        "ruby-6": 0.44285714285714284,
        "ruby-18": 0.3097345132743363,
        "ruby-15": 0.2627118644067796,
        "ruby-13": 0.20645161290322578,
        "ruby-9": 0.3008849557522124,
        "ruby-4": 0.3214285714285714,
        "ruby-14": 0.4714285714285714,
        "ruby-5": 0.37142857142857144,
        "ruby-19": 0.4571428571428572,
        "codebertscore_f1-3": 0.8927342295646667,
        "codebertscore_f3-3": 0.8792635202407837,
        "codebertscore_f1-0": 0.86244797706604,
        "codebertscore_f3-0": 0.8749515414237976,
        "codebertscore_f1-8": 0.8453273773193359,
        "codebertscore_f3-8": 0.8529937863349915,
        "codebertscore_f1-7": 0.8452564477920532,
        "codebertscore_f3-7": 0.8592763543128967,
        "codebertscore_f1-16": 0.8573261499404907,
        "codebertscore_f3-16": 0.8527632355690002,
        "codebertscore_f1-2": 0.8662604689598083,
        "codebertscore_f3-2": 0.8783715963363647,
        "codebertscore_f1-11": 0.8354862928390503,
        "codebertscore_f3-11": 0.8501915335655212,
        "codebertscore_f1-1": 0.8398768901824951,
        "codebertscore_f3-1": 0.85361248254776,
        "codebertscore_f1-10": 0.8270882368087769,
        "codebertscore_f3-10": 0.8624057769775391,
        "codebertscore_f1-17": 0.861324667930603,
        "codebertscore_f3-17": 0.8785846829414368,
        "codebertscore_f1-12": 0.8823017477989197,
        "codebertscore_f3-12": 0.8756933808326721,
        "codebertscore_f1-6": 0.8717852830886841,
        "codebertscore_f3-6": 0.8711143732070923,
        "codebertscore_f1-18": 0.8402329087257385,
        "codebertscore_f3-18": 0.8532752990722656,
        "codebertscore_f1-15": 0.8152174949645996,
        "codebertscore_f3-15": 0.8370105624198914,
        "codebertscore_f1-13": 0.8187713027000427,
        "codebertscore_f3-13": 0.8661629557609558,
        "codebertscore_f1-9": 0.8161945343017578,
        "codebertscore_f3-9": 0.8385443091392517,
        "codebertscore_f1-4": 0.8458786010742188,
        "codebertscore_f3-4": 0.8604909777641296,
        "codebertscore_f1-14": 0.8825282454490662,
        "codebertscore_f3-14": 0.8832908272743225,
        "codebertscore_f1-5": 0.8573391437530518,
        "codebertscore_f3-5": 0.8510506749153137,
        "codebertscore_f1-19": 0.8757514953613281,
        "codebertscore_f3-19": 0.8769264221191406,
        "codebertscore_s_f1-3": 0.9295340180397034,
        "codebertscore_s_f3-3": 0.9209299683570862,
        "codebertscore_s_f1-0": 0.899276614189148,
        "codebertscore_s_f3-0": 0.9112874865531921,
        "codebertscore_s_f1-8": 0.893293023109436,
        "codebertscore_s_f3-8": 0.8999303579330444,
        "codebertscore_s_f1-7": 0.888791024684906,
        "codebertscore_s_f3-7": 0.9037712812423706,
        "codebertscore_s_f1-16": 0.8972426652908325,
        "codebertscore_s_f3-16": 0.8941789269447327,
        "codebertscore_s_f1-2": 0.9028255939483643,
        "codebertscore_s_f3-2": 0.914609968662262,
        "codebertscore_s_f1-11": 0.8843353986740112,
        "codebertscore_s_f3-11": 0.9005804061889648,
        "codebertscore_s_f1-1": 0.8865112066268921,
        "codebertscore_s_f3-1": 0.9016956686973572,
        "codebertscore_s_f1-10": 0.8740394115447998,
        "codebertscore_s_f3-10": 0.9078810811042786,
        "codebertscore_s_f1-17": 0.8989601135253906,
        "codebertscore_s_f3-17": 0.9166053533554077,
        "codebertscore_s_f1-12": 0.9212639331817627,
        "codebertscore_s_f3-12": 0.9186934232711792,
        "codebertscore_s_f1-6": 0.9147524833679199,
        "codebertscore_s_f3-6": 0.9150567054748535,
        "codebertscore_s_f1-18": 0.8866624236106873,
        "codebertscore_s_f3-18": 0.9014145731925964,
        "codebertscore_s_f1-15": 0.8633539080619812,
        "codebertscore_s_f3-15": 0.8851059675216675,
        "codebertscore_s_f1-13": 0.8613841533660889,
        "codebertscore_s_f3-13": 0.90330570936203,
        "codebertscore_s_f1-9": 0.8688320517539978,
        "codebertscore_s_f3-9": 0.8890405297279358,
        "codebertscore_s_f1-4": 0.8900021910667419,
        "codebertscore_s_f3-4": 0.9046112298965454,
        "codebertscore_s_f1-14": 0.9189601540565491,
        "codebertscore_s_f3-14": 0.9220831394195557,
        "codebertscore_s_f1-5": 0.9026631116867065,
        "codebertscore_s_f3-5": 0.8989644050598145,
        "codebertscore_s_f1-19": 0.9139792323112488,
        "codebertscore_s_f3-19": 0.9178325533866882,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n",
        "snippet": [
            "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n"
        ],
        "simplified": "Return sorted unique elements in a list",
        "task_id": "34",
        "3": "var s = [];\n\tl.forEach(function(x){\n\t\tif (s.indexOf(x) === -1) s.push(x);\n\t});\n\treturn s.sort(function(a, b){return a - b;});\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return l.sort().filter(function(item, pos, ary) {\n    return !pos || item != ary[pos - 1];\n  })\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return l.sort().filter(function(item, pos, ary) {\n\t\treturn !pos || item != ary[pos - 1];\n\t})\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "l.sort();\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i-1] == l[i])\n\t\t\tl.splice(i--, 1);\n\t}\n\treturn l;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var set = new Set(l);\n  return Array.from(set);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return l.sort().filter(function(item, pos, ary) {\n      return !pos || item != ary[pos - 1];\n  })\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var u = l.sort();\n\tvar ul = [];\n\t\n\tfor(var i = 0; i < u.length; i++){\n\t\tif(u[i] != u[i+1]){\n\t\t\tul.push(u[i]);\n\t\t}\n\t}\n\treturn ul;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var uniq = {};\n  l.forEach(function(i) { uniq[i] = true; });\n  return Object.keys(uniq).map(function(i) { return parseInt(i); });\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let set = new Set(l);\n    return Array.from(set);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return [...new Set(l)]\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) == -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let uniques = [];\n    for(let i = 0; i < l.length; i++){\n        let x = l[i];\n        if(!(x in uniques)){\n            uniques.push(x);\n        }\n    }\n    return uniques.sort();\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "//Without using built-in sort\n    let r = []\n    for(let i = 0; i < l.length; i++){\n        if(r.indexOf(l[i]) < 0){\n            r.push(l[i])\n        }\n    }\n    return r\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return [...new Set(l)];\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var s = l.slice();\n  s.sort();\n  var last = s[0];\n  var res = [last];\n  for(var i = 1; i < s.length; i++){\n    if(s[i] !== last){\n      res.push(s[i]);\n      last = s[i];\n    }\n  }\n  return res;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return Array.from(new Set(l));\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return l.sort().filter(function(e, i, l){\n        return i === 0 || e != l[i-1];\n    });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return l.sort().filter(function(v,i,a){return a.indexOf(v)===i});\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var result = [];\n    l.sort();\n    for(var i = 0; i < l.length; i++){\n        if(l[i] != l[i + 1]){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let newArr = l.sort();\n    let index = 0;\n    for(let i = 0; i < newArr.length; i++){\n        if(newArr[i] != newArr[i+1]){\n            newArr[index] = newArr[i];\n            index++;\n        }\n    }\n    return newArr.slice(0, index);\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.12402667375248749,
        "bleu-0": 0.06897578377232198,
        "bleu-8": 0.06897578377232198,
        "bleu-7": 0.057583984408872364,
        "bleu-16": 0.2608772251026779,
        "bleu-2": 0.06897578377232198,
        "bleu-11": 0.0445490657843673,
        "bleu-1": 0.044509236450155136,
        "bleu-10": 0.2608772251026779,
        "bleu-17": 0.0890551032697166,
        "bleu-12": 0.042104072336563284,
        "bleu-6": 0.05357656987495007,
        "bleu-18": 0.020295486255221436,
        "bleu-15": 0.10620249199191342,
        "bleu-13": 0.030057917460318384,
        "bleu-9": 0.2844751544857204,
        "bleu-4": 0.08133740799712727,
        "bleu-14": 0.10060048640954418,
        "bleu-5": 0.04944146150086,
        "bleu-19": 0.0382654336992466,
        "codebleu-3": 0.6395508616066131,
        "codebleu-0": 0.4524089306698001,
        "codebleu-8": 0.4524089306698001,
        "codebleu-7": 0.49040344692518606,
        "codebleu-16": 0.4161059036489375,
        "codebleu-2": 0.4524089306698001,
        "codebleu-11": 0.4524089306698001,
        "codebleu-1": 0.5293772032902467,
        "codebleu-10": 0.4161059036489375,
        "codebleu-17": 0.17397173799423965,
        "codebleu-12": 0.4669016842929886,
        "codebleu-6": 0.5048962005483745,
        "codebleu-18": 0.4714061887974931,
        "codebleu-15": 0.19553939677120125,
        "codebleu-13": 0.5048962005483745,
        "codebleu-9": 0.364895635587603,
        "codebleu-4": 0.4669016842929886,
        "codebleu-14": 0.5238934586760673,
        "codebleu-5": 0.4524089306698001,
        "codebleu-19": 0.47591069330199753,
        "chrf-3": 0.26034946957918365,
        "chrf-0": 0.2244629977219769,
        "chrf-8": 0.2244629977219769,
        "chrf-7": 0.2175019294378425,
        "chrf-16": 0.5158872034445544,
        "chrf-2": 0.2244629977219769,
        "chrf-11": 0.20284418676813942,
        "chrf-1": 0.17811548460767881,
        "chrf-10": 0.5087031977224726,
        "chrf-17": 0.25798723469988216,
        "chrf-12": 0.1631825002011919,
        "chrf-6": 0.19476234901014117,
        "chrf-18": 0.16563997741304243,
        "chrf-15": 0.26459882097549015,
        "chrf-13": 0.18566630054552552,
        "chrf-9": 0.6140870164887329,
        "chrf-4": 0.23219105289729552,
        "chrf-14": 0.2428851242876738,
        "chrf-5": 0.2036918266615805,
        "chrf-19": 0.19711876186565064,
        "rougel-3": 0.41758241758241765,
        "rougel-0": 0.39999999999999997,
        "rougel-8": 0.39999999999999997,
        "rougel-7": 0.2857142857142857,
        "rougel-16": 0.4255319148936171,
        "rougel-2": 0.39999999999999997,
        "rougel-11": 0.23404255319148937,
        "rougel-1": 0.345679012345679,
        "rougel-10": 0.4255319148936171,
        "rougel-17": 0.3902439024390244,
        "rougel-12": 0.27586206896551724,
        "rougel-6": 0.2727272727272727,
        "rougel-18": 0.22222222222222224,
        "rougel-15": 0.4285714285714286,
        "rougel-13": 0.23214285714285718,
        "rougel-9": 0.6190476190476191,
        "rougel-4": 0.4057971014492754,
        "rougel-14": 0.4444444444444445,
        "rougel-5": 0.24175824175824176,
        "rougel-19": 0.2162162162162162,
        "meteor-3": 0.6109982370141038,
        "meteor-0": 0.316774515993266,
        "meteor-8": 0.316774515993266,
        "meteor-7": 0.32969018596655725,
        "meteor-16": 0.38009289737400337,
        "meteor-2": 0.316774515993266,
        "meteor-11": 0.28859518788343563,
        "meteor-1": 0.3914567142399151,
        "meteor-10": 0.38009289737400337,
        "meteor-17": 0.2139013250124362,
        "meteor-12": 0.2949279976489028,
        "meteor-6": 0.3997395833333333,
        "meteor-18": 0.2639751552795031,
        "meteor-15": 0.27153284671532846,
        "meteor-13": 0.302854938271605,
        "meteor-9": 0.4191681423573619,
        "meteor-4": 0.3890028031561461,
        "meteor-14": 0.41339969012629696,
        "meteor-5": 0.29127563854489164,
        "meteor-19": 0.3404959867544902,
        "ruby-3": 0.29032258064516125,
        "ruby-0": 0.2222222222222222,
        "ruby-8": 0.2222222222222222,
        "ruby-7": 0.19999999999999996,
        "ruby-16": 0.31034482758620685,
        "ruby-2": 0.2222222222222222,
        "ruby-11": 0.15384615384615385,
        "ruby-1": 0.23076923076923073,
        "ruby-10": 0.31034482758620685,
        "ruby-17": 0.27586206896551724,
        "ruby-12": 0.18965517241379315,
        "ruby-6": 0.1694915254237288,
        "ruby-18": 0.14754098360655743,
        "ruby-15": 0.31034482758620685,
        "ruby-13": 0.1325301204819277,
        "ruby-9": 0.4482758620689655,
        "ruby-4": 0.275,
        "ruby-14": 0.23529411764705888,
        "ruby-5": 0.17741935483870963,
        "ruby-19": 0.12195121951219512,
        "codebertscore_f1-3": 0.775550365447998,
        "codebertscore_f3-3": 0.8030019402503967,
        "codebertscore_f1-0": 0.7584905624389648,
        "codebertscore_f3-0": 0.757405698299408,
        "codebertscore_f1-8": 0.7601926922798157,
        "codebertscore_f3-8": 0.7583933472633362,
        "codebertscore_f1-7": 0.7190395593643188,
        "codebertscore_f3-7": 0.7210956811904907,
        "codebertscore_f1-16": 0.8482682108879089,
        "codebertscore_f3-16": 0.8235066533088684,
        "codebertscore_f1-2": 0.7581719160079956,
        "codebertscore_f3-2": 0.7575071454048157,
        "codebertscore_f1-11": 0.7157315015792847,
        "codebertscore_f3-11": 0.7203377485275269,
        "codebertscore_f1-1": 0.7105474472045898,
        "codebertscore_f3-1": 0.7182735800743103,
        "codebertscore_f1-10": 0.8488278985023499,
        "codebertscore_f3-10": 0.8235509991645813,
        "codebertscore_f1-17": 0.8576720952987671,
        "codebertscore_f3-17": 0.7977887988090515,
        "codebertscore_f1-12": 0.698863685131073,
        "codebertscore_f3-12": 0.698931097984314,
        "codebertscore_f1-6": 0.6991910934448242,
        "codebertscore_f3-6": 0.709196925163269,
        "codebertscore_f1-18": 0.6976906657218933,
        "codebertscore_f3-18": 0.7065771818161011,
        "codebertscore_f1-15": 0.8581096529960632,
        "codebertscore_f3-15": 0.7977482080459595,
        "codebertscore_f1-13": 0.6928307414054871,
        "codebertscore_f3-13": 0.7037324905395508,
        "codebertscore_f1-9": 0.8935873508453369,
        "codebertscore_f3-9": 0.8448013067245483,
        "codebertscore_f1-4": 0.7526676058769226,
        "codebertscore_f3-4": 0.7506274580955505,
        "codebertscore_f1-14": 0.7921630144119263,
        "codebertscore_f3-14": 0.7818028926849365,
        "codebertscore_f1-5": 0.7169053554534912,
        "codebertscore_f3-5": 0.7131513357162476,
        "codebertscore_f1-19": 0.6920783519744873,
        "codebertscore_f3-19": 0.7158839702606201,
        "codebertscore_s_f1-3": 0.7865121960639954,
        "codebertscore_s_f3-3": 0.8164398074150085,
        "codebertscore_s_f1-0": 0.7517469525337219,
        "codebertscore_s_f3-0": 0.7499703764915466,
        "codebertscore_s_f1-8": 0.7512192726135254,
        "codebertscore_s_f3-8": 0.7491172552108765,
        "codebertscore_s_f1-7": 0.7200807929039001,
        "codebertscore_s_f3-7": 0.7179163694381714,
        "codebertscore_s_f1-16": 0.850214958190918,
        "codebertscore_s_f3-16": 0.8152110576629639,
        "codebertscore_s_f1-2": 0.7509200572967529,
        "codebertscore_s_f3-2": 0.7490760684013367,
        "codebertscore_s_f1-11": 0.7122945785522461,
        "codebertscore_s_f3-11": 0.7143118977546692,
        "codebertscore_s_f1-1": 0.7196274399757385,
        "codebertscore_s_f3-1": 0.7291547060012817,
        "codebertscore_s_f1-10": 0.8471431136131287,
        "codebertscore_s_f3-10": 0.8158932328224182,
        "codebertscore_s_f1-17": 0.8474850654602051,
        "codebertscore_s_f3-17": 0.7735584378242493,
        "codebertscore_s_f1-12": 0.6854096055030823,
        "codebertscore_s_f3-12": 0.6845333576202393,
        "codebertscore_s_f1-6": 0.6827918291091919,
        "codebertscore_s_f3-6": 0.6950489282608032,
        "codebertscore_s_f1-18": 0.6829838752746582,
        "codebertscore_s_f3-18": 0.6913765072822571,
        "codebertscore_s_f1-15": 0.8490980863571167,
        "codebertscore_s_f3-15": 0.77484530210495,
        "codebertscore_s_f1-13": 0.6856170296669006,
        "codebertscore_s_f3-13": 0.6943649053573608,
        "codebertscore_s_f1-9": 0.8922277092933655,
        "codebertscore_s_f3-9": 0.8345736265182495,
        "codebertscore_s_f1-4": 0.7435432076454163,
        "codebertscore_s_f3-4": 0.7369797229766846,
        "codebertscore_s_f1-14": 0.7753937840461731,
        "codebertscore_s_f3-14": 0.7656840085983276,
        "codebertscore_s_f1-5": 0.7074331641197205,
        "codebertscore_s_f3-5": 0.7026287317276001,
        "codebertscore_s_f1-19": 0.6795786619186401,
        "codebertscore_s_f3-19": 0.7046589851379395,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n",
        "snippet": [
            "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n"
        ],
        "simplified": "Return 2^n modulo p (be aware of numerics).",
        "task_id": "49",
        "0": "var ans = 1;\n\tvar bin = Math.abs(n).toString(2);\n\t\n\tfor(var i = 0; i < bin.length; i++){\n\t\tif(bin[i] == 1){\n\t\t\tans = (ans * Math.pow(2, i)) % p;\n\t\t}\n\t}\n\t\n\treturn ans;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var res = 1;\n\tvar two = 2;\n\twhile(n>0){\n\t\tif(n%2==1){\n\t\t\tres = (res*two)%p;\n\t\t}\n\t\ttwo = (two*two)%p;\n\t\tn = parseInt(n/2);\n\t}\n\treturn res;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return  BigInt(2).pow(n) % p;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var res = 1;\n  for(var i = 0; i < n; i++){\n    res = (res * 2) % p;\n  }\n  return res;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "if(n == 0)\n\t\treturn 1;\n\tif(n == 1)\n\t\treturn 2 % p;\n\telse if(n % 2 == 0)\n\t\treturn (modp(n/2, p) * modp(n/2, p)) % p;\n\telse\n\t\treturn (2 * modp(n/2, p) * modp(n/2, p)) % p;\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "// return Math.pow(2, n) % p;\n    if (n === 0) return 1;\n    if (n === 1) return 2 % p;\n    if (n % 2 === 0) {\n        return Math.pow(modp(n / 2, p), 2) % p;\n    } else {\n        return (2 * modp(n - 1, p)) % p;\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "if(n==0){\n        return 1;\n    }else if(n%2==0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }else{\n        return (modp(n/2, p) * modp(n/2, p) * 2) % p;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\treturn res;\n}\n\nvar crc8 = new CRC8();",
        "grade-7": {
            "execution": 0
        },
        "8": "if(n === 0){\n    return 1;\n  }\n  if(n === 1){\n    return 2;\n  }\n  if(n % 2 === 0){\n    return (2 * modp(n / 2, p)) % p;\n  }\n  else{\n    return (2 * modp(n / 2, p) * 2) % p;\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "10": "return (p <= 1) ? 0 : (n < 1) ? 1 : Math.pow(2, n % (p - 1)) % p;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "if(n<0)\n        return modp(-n, p);\n    if(n==0)\n        return 1;\n    var aux = modp(n/2, p);\n    aux = (aux*aux)%p;\n    if(n%2==1)\n        aux=(aux*2)%p;\n    return aux;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "if(n == 0){\n        return 1;\n    }\n    var x = modp(n/2, p);\n    if(n % 2 == 0){\n        return (x * x) % p;\n    }\n    else{\n        return (x * x * 2) % p;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var n = n.toString(2);\n\tvar y = 1;\n\tfor(var i = 0; i < n.length; i++){\n\t\ty = (y*y) % p;\n\t\tif(n[i] == '1'){\n\t\t\ty = (y*2) % p;\n\t\t}\n\t}\n\treturn y;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var m = n % p;\n    return ((n%p)+p)%p;\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var result = 1;\n\tfor(var i = 1; i <= n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "// O(log n)\n  var base = 1,\n      j = 1;\n  while(j <= n){\n    if(j & n){\n      base = (base * 2) % p;\n    }\n    j = j << 1;\n  }\n  return base;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var sum=1;\n  for(var i=0; i<n; i++){\n    sum = (sum*2)%p;\n  }\n  return sum;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var m = n % p;\n\tif (m < 0) {\n\t\tm += p;\n\t}\n\treturn m;\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "var res = 1,\n        p_inv = p - 2;\n    while (p_inv > 0) {\n        if (p_inv % 2 == 1) {\n            res = (res * n) % p;\n        }\n        n = (n * n) % p;\n        p_inv = Math.floor(p_inv / 2);\n    }\n    return res;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.1931616681288214,
        "bleu-1": 0.0753975376481688,
        "bleu-2": 0.06782750690762535,
        "bleu-3": 0.5212958579275836,
        "bleu-4": 0.059888640232507596,
        "bleu-5": 0.05577289257117016,
        "bleu-6": 0.05216465661234234,
        "bleu-7": 0.42309369637056327,
        "bleu-8": 0.06471293257861661,
        "bleu-10": 0.1062251311026331,
        "bleu-11": 0.08667576579702845,
        "bleu-12": 0.06930497532321182,
        "bleu-13": 0.22576183558264692,
        "bleu-14": 0.1252115836645938,
        "bleu-15": 0.36637577846086516,
        "bleu-16": 0.08730695871088828,
        "bleu-17": 0.5212958579275836,
        "bleu-18": 0.06493091350934604,
        "bleu-19": 0.06348843025540085,
        "codebleu-0": 0.6661984953596874,
        "codebleu-1": 0.5644588081672467,
        "codebleu-2": 0.20756374546553122,
        "codebleu-3": 0.7337080398133274,
        "codebleu-4": 0.4513733814306926,
        "codebleu-5": 0.5187582415579544,
        "codebleu-6": 0.433297284038565,
        "codebleu-7": 0.7173410128871573,
        "codebleu-8": 0.5034594814370954,
        "codebleu-10": 0.3495112703241873,
        "codebleu-11": 0.519024715544926,
        "codebleu-12": 0.45691102458073063,
        "codebleu-13": 0.6716318566019918,
        "codebleu-14": 0.3285605814848928,
        "codebleu-15": 0.6910992597801076,
        "codebleu-16": 0.5368344320684202,
        "codebleu-17": 0.7337080398133274,
        "codebleu-18": 0.30873094134679957,
        "codebleu-19": 0.5368329312940929,
        "chrf-0": 0.2895793388884796,
        "chrf-1": 0.2655622922578735,
        "chrf-2": 0.1507398911656457,
        "chrf-3": 0.5039477744925903,
        "chrf-4": 0.21670920579780817,
        "chrf-5": 0.22784495474123662,
        "chrf-6": 0.18293231542853022,
        "chrf-7": 0.47397967844917205,
        "chrf-8": 0.21629494175923936,
        "chrf-10": 0.15497972016993727,
        "chrf-11": 0.2561128454813281,
        "chrf-12": 0.2198080065961699,
        "chrf-13": 0.3412223159864108,
        "chrf-14": 0.20846790920482172,
        "chrf-15": 0.4373945749896731,
        "chrf-16": 0.19983054732752456,
        "chrf-17": 0.41980990259459694,
        "chrf-18": 0.16727284250880625,
        "chrf-19": 0.2512857632238358,
        "rougel-0": 0.5046728971962616,
        "rougel-1": 0.37113402061855666,
        "rougel-2": 0.326530612244898,
        "rougel-3": 0.7999999999999999,
        "rougel-4": 0.3103448275862069,
        "rougel-5": 0.2764227642276423,
        "rougel-6": 0.3090909090909091,
        "rougel-7": 0.717948717948718,
        "rougel-8": 0.3272727272727273,
        "rougel-10": 0.34285714285714286,
        "rougel-11": 0.34615384615384615,
        "rougel-12": 0.3440860215053763,
        "rougel-13": 0.5233644859813084,
        "rougel-14": 0.39999999999999997,
        "rougel-15": 0.7605633802816901,
        "rougel-16": 0.409090909090909,
        "rougel-17": 0.7999999999999999,
        "rougel-18": 0.41379310344827586,
        "rougel-19": 0.36363636363636365,
        "meteor-0": 0.6198959022899614,
        "meteor-1": 0.3860892106085523,
        "meteor-2": 0.27676939316701427,
        "meteor-3": 0.8352803332151226,
        "meteor-4": 0.3976728148303996,
        "meteor-5": 0.3908497044818263,
        "meteor-6": 0.3192484517991037,
        "meteor-7": 0.5937489383387123,
        "meteor-8": 0.34616115206990306,
        "meteor-10": 0.37402534113060426,
        "meteor-11": 0.5036569148936171,
        "meteor-12": 0.3622837262758985,
        "meteor-13": 0.5981382886938844,
        "meteor-14": 0.3501217000561692,
        "meteor-15": 0.7754767358838579,
        "meteor-16": 0.4288489813064483,
        "meteor-17": 0.8352803332151226,
        "meteor-18": 0.3224431818181819,
        "meteor-19": 0.38400786715513696,
        "ruby-0": 0.36986301369863017,
        "ruby-1": 0.2698412698412699,
        "ruby-2": 0.23529411764705888,
        "ruby-3": 0.7777777777777778,
        "ruby-4": 0.2195121951219512,
        "ruby-5": 0.1910112359550562,
        "ruby-6": 0.22368421052631582,
        "ruby-7": 0.6363636363636364,
        "ruby-8": 0.23684210526315785,
        "ruby-10": 0.16666666666666663,
        "ruby-11": 0.2571428571428571,
        "ruby-12": 0.27118644067796616,
        "ruby-13": 0.3835616438356164,
        "ruby-14": 0.2647058823529411,
        "ruby-15": 0.7297297297297297,
        "ruby-16": 0.2962962962962963,
        "ruby-17": 0.7777777777777778,
        "ruby-18": 0.2647058823529411,
        "ruby-19": 0.2615384615384615,
        "codebertscore_f1-0": 0.8252252340316772,
        "codebertscore_f3-0": 0.8615646958351135,
        "codebertscore_f1-1": 0.7988271117210388,
        "codebertscore_f3-1": 0.8104252815246582,
        "codebertscore_f1-2": 0.7434221506118774,
        "codebertscore_f3-2": 0.7212473154067993,
        "codebertscore_f1-3": 0.9373565912246704,
        "codebertscore_f3-3": 0.9373564720153809,
        "codebertscore_f1-4": 0.7448640465736389,
        "codebertscore_f3-4": 0.7425727248191833,
        "codebertscore_f1-5": 0.7532666921615601,
        "codebertscore_f3-5": 0.748508095741272,
        "codebertscore_f1-6": 0.7325955629348755,
        "codebertscore_f3-6": 0.7316720485687256,
        "codebertscore_f1-7": 0.8919997215270996,
        "codebertscore_f3-7": 0.9240756630897522,
        "codebertscore_f1-8": 0.765576183795929,
        "codebertscore_f3-8": 0.7511271834373474,
        "codebertscore_f1-10": 0.7577490210533142,
        "codebertscore_f3-10": 0.7390753626823425,
        "codebertscore_f1-11": 0.7715397477149963,
        "codebertscore_f3-11": 0.7719210982322693,
        "codebertscore_f1-12": 0.7640433311462402,
        "codebertscore_f3-12": 0.761000394821167,
        "codebertscore_f1-13": 0.8413668870925903,
        "codebertscore_f3-13": 0.8657095432281494,
        "codebertscore_f1-14": 0.7827810049057007,
        "codebertscore_f3-14": 0.7441378235816956,
        "codebertscore_f1-15": 0.9211797118186951,
        "codebertscore_f3-15": 0.9197724461555481,
        "codebertscore_f1-16": 0.781092643737793,
        "codebertscore_f3-16": 0.78787761926651,
        "codebertscore_f1-17": 0.9250025153160095,
        "codebertscore_f3-17": 0.9250026345252991,
        "codebertscore_f1-18": 0.8109024167060852,
        "codebertscore_f3-18": 0.7881709933280945,
        "codebertscore_f1-19": 0.7843816876411438,
        "codebertscore_f3-19": 0.7955871820449829,
        "codebertscore_s_f1-0": 0.8237170577049255,
        "codebertscore_s_f3-0": 0.858330488204956,
        "codebertscore_s_f1-1": 0.8076188564300537,
        "codebertscore_s_f3-1": 0.8200006484985352,
        "codebertscore_s_f1-2": 0.7466226816177368,
        "codebertscore_s_f3-2": 0.7235291600227356,
        "codebertscore_s_f1-3": 0.9387878775596619,
        "codebertscore_s_f3-3": 0.9369322061538696,
        "codebertscore_s_f1-4": 0.7545958757400513,
        "codebertscore_s_f3-4": 0.7589867115020752,
        "codebertscore_s_f1-5": 0.7616139650344849,
        "codebertscore_s_f3-5": 0.7633066177368164,
        "codebertscore_s_f1-6": 0.7386426329612732,
        "codebertscore_s_f3-6": 0.7424262762069702,
        "codebertscore_s_f1-7": 0.889063835144043,
        "codebertscore_s_f3-7": 0.9249321222305298,
        "codebertscore_s_f1-8": 0.7728398442268372,
        "codebertscore_s_f3-8": 0.7645052075386047,
        "codebertscore_s_f1-10": 0.770854115486145,
        "codebertscore_s_f3-10": 0.7511482834815979,
        "codebertscore_s_f1-11": 0.7712252140045166,
        "codebertscore_s_f3-11": 0.7735525965690613,
        "codebertscore_s_f1-12": 0.7678717970848083,
        "codebertscore_s_f3-12": 0.7692157626152039,
        "codebertscore_s_f1-13": 0.8425430059432983,
        "codebertscore_s_f3-13": 0.8643679618835449,
        "codebertscore_s_f1-14": 0.7974867820739746,
        "codebertscore_s_f3-14": 0.7541342973709106,
        "codebertscore_s_f1-15": 0.9220349788665771,
        "codebertscore_s_f3-15": 0.9173985123634338,
        "codebertscore_s_f1-16": 0.7861694097518921,
        "codebertscore_s_f3-16": 0.795436441898346,
        "codebertscore_s_f1-17": 0.925216019153595,
        "codebertscore_s_f3-17": 0.9235533475875854,
        "codebertscore_s_f1-18": 0.8069127202033997,
        "codebertscore_s_f3-18": 0.7831223011016846,
        "codebertscore_s_f1-19": 0.7840836644172668,
        "codebertscore_s_f3-19": 0.7955089807510376,
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums){\n",
        "snippet": [
            "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n"
        ],
        "simplified": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
        "task_id": "114",
        "3": "if(nums.length === 0) return 0;\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        currentSum = Math.min(currentSum + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n    return minSum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let minSubArraySum = nums[0];\n  let currentSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSubArraySum = Math.min(minSubArraySum, currentSum);\n  }\n  return minSubArraySum;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let minSum = nums[0]\n  let sum = nums[0]\n  for(let i = 1; i < nums.length; i++){\n    if(sum < 0){\n      sum = nums[i]\n    } else {\n      sum += nums[i]\n    }\n    if(sum < minSum){\n      minSum = sum\n    }\n  }\n  return minSum\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let sum = 0;\n    let minSum = 0;\n    let min = nums[0];\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(minSum > sum){\n            minSum = sum;\n        }\n        if(nums[i] < min){\n            min = nums[i];\n        }\n    }\n    if(minSum !== 0){\n        return minSum;\n    }\n    return min;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let min = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n        }\n        for(let j = i + 1; j < nums.length; j++){\n            sum += nums[j];\n            if(sum < min){\n                min = sum;\n            }\n        }\n        sum = 0;\n    }\n    return min;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if(nums.length === 0) return null;\n    let min = nums[0];\n    let sum = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        if(sum > 0){\n            sum = nums[i];\n        }else{\n            sum += nums[i];\n        }\n        min = Math.min(min, sum);\n    }\n    return min;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let min = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < min){\n      min = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return min;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "if(nums.length == 0) return 0;\n  let currentSum = nums[0];\n  let smallestSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    if(currentSum < 0){\n      currentSum = nums[i];\n    } else {\n      currentSum += nums[i];\n    }\n    if(currentSum < smallestSum){\n      smallestSum = currentSum;\n    }\n  }\n  return smallestSum;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let minSum = nums[0];\n  let currSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currSum += nums[i];\n    if(currSum < minSum){\n      minSum = currSum;\n    }\n    if(currSum > 0){\n      currSum = 0;\n    }\n  }\n  return minSum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let n = nums.length;\n  let start = 0;\n  let end = 0;\n  let minSum = Infinity;\n  let currSum = 0;\n  while(start < n){\n    while(end < n && currSum >= 0){\n      currSum += nums[end];\n      end += 1;\n    }\n    minSum = Math.min(minSum, currSum);\n    currSum -= nums[start];\n    start += 1;\n  }\n  return minSum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let prev = nums[0];\n    let min = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        let temp = nums[i] + prev;\n        if(temp < nums[i]) prev = temp;\n        else prev = nums[i];\n        if(prev < min) min = prev;\n    }\n    return min;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let length = nums.length;\n\tlet minTotal = Infinity;\n\tfor(let start = 0; start < length; start++){\n\t\tlet total = 0;\n\t\tfor(let stop = start; stop < length; stop++){\n\t\t\ttotal += nums[stop];\n\t\t\tminTotal = Math.min(minTotal, total);\n\t\t}\n\t}\n\treturn minTotal;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let tempMin = nums[0];\n\tlet cumulativeSum = 0;\n\tfor(let i = 0; i < nums.length; i++){\n\t\tcumulativeSum += nums[i];\n\t\tif(cumulativeSum < tempMin){\n\t\t\ttempMin = cumulativeSum;\n\t\t}\n\t}\n\treturn tempMin;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let current = nums[0];\n    let least = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        current = Math.min(nums[i], current + nums[i]);\n        least = Math.min(least, current);\n    }\n    return least;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum < 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var minSum = 0;\n    var currSum = 0;\n    for(var i = 0; i < nums.length; i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n            minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum = 0;\n        }\n    }\n    return minSum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let currentSum = nums[0];\n    let minSum = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        if(currentSum <= 0){\n            currentSum = nums[i];\n        }else{\n            currentSum += nums[i];\n        }\n        if(currentSum < minSum){\n            minSum = currentSum;\n        }\n    }\n    return minSum;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let minSum = Infinity;\n    let tempSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        tempSum += nums[i];\n        if(tempSum < minSum){\n            minSum = tempSum;\n        }\n        if(tempSum > 0){\n            tempSum = 0;\n        }\n    }\n    return minSum;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let minSum = 0;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n            minSum = currentSum;\n        }\n    }\n    return minSum;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let minSum = Number.MAX_SAFE_INTEGER;\n    let start = 0;\n    let end = 0;\n    let total = 0;\n    while(start < nums.length){\n        if(total < 0){\n            total = 0;\n            end = start;\n        }\n        total += nums[end];\n        if(total < minSum){\n            minSum = total;\n        }\n        end++;\n        if(end === nums.length){\n            start++;\n            end = start;\n        }\n    }\n    return minSum;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.30145902180813255,
        "bleu-0": 0.274618059070861,
        "bleu-8": 0.3469121029298405,
        "bleu-7": 0.3968422778783426,
        "bleu-16": 0.5324806143752173,
        "bleu-2": 0.343208090801636,
        "bleu-11": 0.3663873340842286,
        "bleu-1": 0.30192409681928184,
        "bleu-10": 0.3736085990156788,
        "bleu-17": 0.1329364124332424,
        "bleu-12": 0.3265792444209756,
        "bleu-6": 0.2527601558837519,
        "bleu-18": 0.3120053651751718,
        "bleu-15": 0.25385200611513076,
        "bleu-13": 0.31697037807668993,
        "bleu-9": 0.2977981182580164,
        "bleu-4": 0.3414067159519836,
        "bleu-14": 0.3377402741881896,
        "bleu-5": 0.30038070346937173,
        "bleu-19": 0.16568995399170114,
        "codebleu-3": 0.5746416363951338,
        "codebleu-0": 0.5151188902781015,
        "codebleu-8": 0.5800650438383058,
        "codebleu-7": 0.6579241634301741,
        "codebleu-16": 0.7608909132066802,
        "codebleu-2": 0.6182478350924854,
        "codebleu-11": 0.503835563184178,
        "codebleu-1": 0.6299362984188291,
        "codebleu-10": 0.5446333235858749,
        "codebleu-17": 0.5214113239941289,
        "codebleu-12": 0.57269925019599,
        "codebleu-6": 0.5420122689878033,
        "codebleu-18": 0.4577500844005017,
        "codebleu-15": 0.4907118130282026,
        "codebleu-13": 0.4864315664385976,
        "codebleu-9": 0.4887214103913352,
        "codebleu-4": 0.6098572102046053,
        "codebleu-14": 0.5043508994280308,
        "codebleu-5": 0.42074045037683144,
        "codebleu-19": 0.5967200974370552,
        "chrf-3": 0.41684790021407947,
        "chrf-0": 0.3615501433194284,
        "chrf-8": 0.4597029820650819,
        "chrf-7": 0.4968125485907805,
        "chrf-16": 0.6368543723221851,
        "chrf-2": 0.48391492070098674,
        "chrf-11": 0.44209779944617333,
        "chrf-1": 0.40094257433741426,
        "chrf-10": 0.43824072316122487,
        "chrf-17": 0.3118159745573585,
        "chrf-12": 0.44301025429848173,
        "chrf-6": 0.3870107035120014,
        "chrf-18": 0.40610110663159515,
        "chrf-15": 0.3622361095795871,
        "chrf-13": 0.3958349299456975,
        "chrf-9": 0.3452657680365079,
        "chrf-4": 0.4161067779330024,
        "chrf-14": 0.4130059727628073,
        "chrf-5": 0.41537686272743685,
        "chrf-19": 0.3562666252224775,
        "rougel-3": 0.430939226519337,
        "rougel-0": 0.4431818181818181,
        "rougel-8": 0.6024096385542168,
        "rougel-7": 0.5638297872340425,
        "rougel-16": 0.6455026455026455,
        "rougel-2": 0.48888888888888893,
        "rougel-11": 0.5185185185185185,
        "rougel-1": 0.49473684210526314,
        "rougel-10": 0.5325443786982248,
        "rougel-17": 0.35789473684210527,
        "rougel-12": 0.5730994152046783,
        "rougel-6": 0.544378698224852,
        "rougel-18": 0.5161290322580646,
        "rougel-15": 0.4625,
        "rougel-13": 0.4878048780487805,
        "rougel-9": 0.4819277108433735,
        "rougel-4": 0.5810055865921787,
        "rougel-14": 0.5060240963855422,
        "rougel-5": 0.5394736842105263,
        "rougel-19": 0.4397905759162304,
        "meteor-3": 0.42512407650332346,
        "meteor-0": 0.38185376019557876,
        "meteor-8": 0.48694294370981606,
        "meteor-7": 0.5291330773623248,
        "meteor-16": 0.706181842966194,
        "meteor-2": 0.4869718218074707,
        "meteor-11": 0.47395809250782206,
        "meteor-1": 0.49358007502803886,
        "meteor-10": 0.4893058596539266,
        "meteor-17": 0.4179449557600819,
        "meteor-12": 0.4623184169489418,
        "meteor-6": 0.49711505964860764,
        "meteor-18": 0.5136449000515991,
        "meteor-15": 0.3636118817779717,
        "meteor-13": 0.4123297632370009,
        "meteor-9": 0.45248041752999835,
        "meteor-4": 0.5270920725089582,
        "meteor-14": 0.47183747464425235,
        "meteor-5": 0.4863196206126235,
        "meteor-19": 0.5081290571686412,
        "ruby-3": 0.23076923076923073,
        "ruby-0": 0.27472527472527475,
        "ruby-8": 0.46153846153846156,
        "ruby-7": 0.3711340206185567,
        "ruby-16": 0.5306122448979591,
        "ruby-2": 0.3076923076923077,
        "ruby-11": 0.3846153846153846,
        "ruby-1": 0.31313131313131315,
        "ruby-10": 0.37362637362637363,
        "ruby-17": 0.19191919191919193,
        "ruby-12": 0.4285714285714286,
        "ruby-6": 0.4285714285714286,
        "ruby-18": 0.34065934065934067,
        "ruby-15": 0.3626373626373627,
        "ruby-13": 0.3296703296703297,
        "ruby-9": 0.34065934065934067,
        "ruby-4": 0.3846153846153846,
        "ruby-14": 0.3626373626373627,
        "ruby-5": 0.3516483516483516,
        "ruby-19": 0.21999999999999997,
        "codebertscore_f1-3": 0.8577216267585754,
        "codebertscore_f3-3": 0.8674876093864441,
        "codebertscore_f1-0": 0.8423051834106445,
        "codebertscore_f3-0": 0.858999490737915,
        "codebertscore_f1-8": 0.8896744847297668,
        "codebertscore_f3-8": 0.8866872787475586,
        "codebertscore_f1-7": 0.8774802684783936,
        "codebertscore_f3-7": 0.8816871047019958,
        "codebertscore_f1-16": 0.8982715606689453,
        "codebertscore_f3-16": 0.9019144177436829,
        "codebertscore_f1-2": 0.8686500787734985,
        "codebertscore_f3-2": 0.874025821685791,
        "codebertscore_f1-11": 0.8669394850730896,
        "codebertscore_f3-11": 0.8703075647354126,
        "codebertscore_f1-1": 0.8550947904586792,
        "codebertscore_f3-1": 0.8647381067276001,
        "codebertscore_f1-10": 0.8610661625862122,
        "codebertscore_f3-10": 0.8754738569259644,
        "codebertscore_f1-17": 0.8109829425811768,
        "codebertscore_f3-17": 0.8225350379943848,
        "codebertscore_f1-12": 0.8870087265968323,
        "codebertscore_f3-12": 0.8824236392974854,
        "codebertscore_f1-6": 0.8561086654663086,
        "codebertscore_f3-6": 0.8597427010536194,
        "codebertscore_f1-18": 0.8656984567642212,
        "codebertscore_f3-18": 0.8712422847747803,
        "codebertscore_f1-15": 0.8551318645477295,
        "codebertscore_f3-15": 0.8553767204284668,
        "codebertscore_f1-13": 0.8571105599403381,
        "codebertscore_f3-13": 0.8667579889297485,
        "codebertscore_f1-9": 0.8429474234580994,
        "codebertscore_f3-9": 0.8541519641876221,
        "codebertscore_f1-4": 0.8692415952682495,
        "codebertscore_f3-4": 0.8751493096351624,
        "codebertscore_f1-14": 0.8626145124435425,
        "codebertscore_f3-14": 0.8687189817428589,
        "codebertscore_f1-5": 0.8731223940849304,
        "codebertscore_f3-5": 0.8721697330474854,
        "codebertscore_f1-19": 0.7970762848854065,
        "codebertscore_f3-19": 0.8071228265762329,
        "codebertscore_s_f1-3": 0.8609090447425842,
        "codebertscore_s_f3-3": 0.8721415996551514,
        "codebertscore_s_f1-0": 0.8423663377761841,
        "codebertscore_s_f3-0": 0.8595461845397949,
        "codebertscore_s_f1-8": 0.8953671455383301,
        "codebertscore_s_f3-8": 0.8926184773445129,
        "codebertscore_s_f1-7": 0.8836644291877747,
        "codebertscore_s_f3-7": 0.8884397745132446,
        "codebertscore_s_f1-16": 0.9053775668144226,
        "codebertscore_s_f3-16": 0.9075292348861694,
        "codebertscore_s_f1-2": 0.8739396929740906,
        "codebertscore_s_f3-2": 0.8807799220085144,
        "codebertscore_s_f1-11": 0.867297351360321,
        "codebertscore_s_f3-11": 0.8716633915901184,
        "codebertscore_s_f1-1": 0.8626334071159363,
        "codebertscore_s_f3-1": 0.8730954527854919,
        "codebertscore_s_f1-10": 0.8644089102745056,
        "codebertscore_s_f3-10": 0.8792187571525574,
        "codebertscore_s_f1-17": 0.8147652745246887,
        "codebertscore_s_f3-17": 0.8267398476600647,
        "codebertscore_s_f1-12": 0.8888327479362488,
        "codebertscore_s_f3-12": 0.8855493664741516,
        "codebertscore_s_f1-6": 0.8581042885780334,
        "codebertscore_s_f3-6": 0.8622353076934814,
        "codebertscore_s_f1-18": 0.8674739599227905,
        "codebertscore_s_f3-18": 0.8733934164047241,
        "codebertscore_s_f1-15": 0.8556334376335144,
        "codebertscore_s_f3-15": 0.8564638495445251,
        "codebertscore_s_f1-13": 0.8593746423721313,
        "codebertscore_s_f3-13": 0.8695946931838989,
        "codebertscore_s_f1-9": 0.8462862372398376,
        "codebertscore_s_f3-9": 0.8582206964492798,
        "codebertscore_s_f1-4": 0.8766239285469055,
        "codebertscore_s_f3-4": 0.8830626010894775,
        "codebertscore_s_f1-14": 0.8669882416725159,
        "codebertscore_s_f3-14": 0.8742631673812866,
        "codebertscore_s_f1-5": 0.8763293027877808,
        "codebertscore_s_f3-5": 0.8761772513389587,
        "codebertscore_s_f1-19": 0.8048458099365234,
        "codebertscore_s_f3-19": 0.814932107925415,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nfunction strange_sort_list(lst){\n",
        "snippet": [
            "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n"
        ],
        "simplified": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
        "task_id": "70",
        "3": "if(lst.length == 0) return [];\n    let out = [];\n    lst.sort((a,b) => a-b);\n    while(lst.length != 0){\n        out.push(lst.shift());\n        if(lst.length != 0) out.push(lst.pop());\n    }\n    return out;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var res = [];\n    var max = lst.length-1;\n    var min = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i%2==0){\n            res.push(lst[min++]);\n        }\n        else{\n            res.push(lst[max--]);\n        }\n    }\n    return res;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(lst.length <= 0) return [];\n    const newLst = lst.slice();\n    newLst.sort((a, b) => a - b);\n    let evenLst = [];\n    let oddLst = [];\n    while(newLst.length > 0){\n        const minElem = newLst.shift();\n        const maxElem = newLst.pop();\n        if(evenLst.length > oddLst.length){\n            oddLst.push(minElem);\n            evenLst.push(maxElem);\n        }else{\n            evenLst.push(minElem);\n            oddLst.push(maxElem);\n        }\n    }\n    return evenLst.concat(oddLst.reverse());\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "lst.sort((a, b) => a - b);\n    let res = [];\n    for (let i = 0; i < lst.length; i++){\n        if (i % 2 === 0){\n            res.push(lst[i]);\n        } else {\n            res.unshift(lst[i]);\n        }\n    }\n    return res;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var x = [];\n    var y = [];\n    if (lst.length == 0) {\n        return [];\n    }\n    while (lst.length > 0) {\n        x.push(Math.min.apply(null, lst));\n        y.push(Math.max.apply(null, lst));\n        lst.splice(lst.indexOf(Math.min.apply(null, lst)), 1);\n        lst.splice(lst.indexOf(Math.max.apply(null, lst)), 1);\n    }\n    return x.concat(y);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if (lst.length == 0) return [];\n  var result = [lst[0]];\n  lst.splice(0, 1);\n  for (var i = 0; i < lst.length; i++) {\n    if (lst.length == 0) break;\n    result.push(Math.max.apply(Math, lst));\n    result.push(Math.min.apply(Math, lst));\n    var index = lst.indexOf(Math.max.apply(Math, lst));\n    lst.splice(index, 1);\n    index = lst.indexOf(Math.min.apply(Math, lst));\n    lst.splice(index, 1);\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(lst.length === 0) return lst;\n    let min = Math.min(...lst);\n    let idx = lst.indexOf(min);\n    lst.splice(idx, 1);\n    return [min, ...strange_sort_list(lst.reverse())];\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let newLst = lst.slice();\n    newLst.sort(function(a, b){return a-b});\n    let temp = [];\n    for(let i = 0; i < newLst.length; i++){\n        if(i % 2 === 0){\n            temp.push(newLst[i]);\n        }\n        else{\n            temp.push(newLst[newLst.length - i - 1]);\n        }\n    }\n    return temp;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//find min value\n    if (lst.length === 0) return [];\n    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    let newLst = [];\n    newLst.push(min);\n    let lst1 = lst.slice(0, minIndex);\n    let lst2 = lst.slice(minIndex + 1);\n    while (lst1.length > 0) {\n        let max = Math.max(...lst1);\n        let maxIndex = lst1.indexOf(max);\n        newLst.push(max);\n        lst1 = lst1.slice(0, maxIndex);\n        lst2 = lst2.concat(lst1.slice(maxIndex + 1));\n        lst1 = lst2;\n        lst2 = [];\n    }\n    return newLst;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(lst.length > 0){\n        var lst2 = lst.slice(0);\n        lst2.sort(function(a, b){return a-b});\n        var lst_l = lst2.length;\n        for(var i = 0; i < lst_l; i++){\n            if(i % 2 == 0){\n                lst.splice(i, 1, lst2[0]);\n                lst2.splice(0, 1);\n            }\n            else{\n                lst.splice(i, 1, lst2[lst2.length - 1]);\n                lst2.splice(lst2.length - 1, 1);\n            }\n        }\n    }\n    return lst;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(lst.length===0)\n    return lst;\n  var res=[];\n  var lst_copy=lst.slice();\n  lst_copy.sort(function(a,b){return a-b;});\n  var asc=true;\n  while(lst_copy.length!==0){\n    if(asc){\n      res.push(lst_copy.shift());\n      asc=false;\n    }else{\n      res.push(lst_copy.pop());\n      asc=true;\n    }\n  }\n  return res;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return lst.sort((a, b) => a - b).reduce((acc, cur, i) => {\n        let j = i + 1;\n        if (j % 2 === 0) {\n            acc.unshift(cur);\n        } else {\n            acc.push(cur);\n        }\n        return acc;\n    }, []);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var str = 0;\n\tif (lst.length === 0) {\n\t\treturn [];\n\t}\n\tlst.sort(function(a, b) {\n\t\treturn a - b;\n\t});\n\tfor (var i = 0; i < lst.length - 1; i++) {\n\t\tvar temp = lst[i];\n\t\tlst[i] = lst[i + 1];\n\t\tlst[i + 1] = temp;\n\t\tstr++;\n\t}\n\treturn lst;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(lst.length == 0) return lst;\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var newList = [];\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            newList.push(min);\n            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n        }\n        else{\n            newList.push(max);\n            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n        }\n    }\n    return newList;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var res = [];\n    var idx = 0;\n    while(lst.length > 0){\n        var min = Math.min.apply(null, lst);\n        var max = Math.max.apply(null, lst);\n        if(idx%2 === 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min), 1);\n        }else{\n            res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n        }\n        idx += 1;\n    }\n    return res;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let asc = [...lst].sort((a, b) => a - b);\n    let desc = [...lst].sort((a, b) => b - a);\n    let flag = true;\n    let result = [];\n    while (asc.length > 0) {\n        if (flag) {\n            result.push(asc.shift());\n        } else {\n            result.push(desc.shift());\n        }\n        flag = !flag;\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var res = [], odd = false;\n    if(lst.length == 0){\n        return [];\n    }else if(lst.length == 1){\n        return lst;\n    }else{\n        res.push(lst.shift());\n        lst.sort(function(a, b){return a-b});\n        for(var i = 0; i < lst.length; i++){\n            if(odd){\n                res.push(lst.pop());\n                odd = false;\n            }else{\n                res.push(lst.shift());\n                odd = true;\n            }\n        }\n        return res;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(lst.length == 0){\n        return lst;\n    }\n    let result = [];\n    result.push(Math.min(...lst));\n    lst.splice(lst.indexOf(Math.min(...lst)), 1);\n    result.push(Math.max(...lst));\n    lst.splice(lst.indexOf(Math.max(...lst)), 1);\n    let x = 0;\n    let y = lst.length - 1;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            result.push(lst[x]);\n            x++;\n        }else{\n            result.push(lst[y]);\n            y--;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var odd=[], even=[];\n    for(var i=0; i<lst.length; i++){\n        if(i%2==0){\n            odd.push(lst[i]);\n        }\n        else{\n            even.push(lst[i]);\n        }\n    }\n    even.sort(function(a,b){return a-b});\n    odd.sort(function(a,b){return b-a});\n    var sorted_lst=[];\n    for(var i=0; i<odd.length; i++){\n        sorted_lst.push(odd[i]);\n        if(even[i]!=undefined){\n            sorted_lst.push(even[i]);\n        }\n    }\n    return sorted_lst;\n}\nvar list = [2, 5, 7, 9, 6, 5, 4, 1, 2, 5, 7, 9, 0, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7,",
        "grade-5": {
            "execution": 0
        },
        "19": "let result = [];\n    let min, max, minPosition, maxPosition;\n    let lstCopy = lst.slice();\n    while(lstCopy.length > 0){\n        if(result.length % 2 === 0){\n            min = Math.min(...lstCopy);\n            minPosition = lstCopy.indexOf(min);\n            result.push(min);\n            lstCopy.splice(minPosition, 1);\n        } else {\n            max = Math.max(...lstCopy);\n            maxPosition = lstCopy.indexOf(max);\n            result.push(max);\n            lstCopy.splice(maxPosition, 1);\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.16501956079228275,
        "bleu-0": 0.2065030305289088,
        "bleu-8": 0.07136639569171135,
        "bleu-7": 0.1932321372112506,
        "bleu-16": 0.23531651337212744,
        "bleu-2": 0.15504158221871936,
        "bleu-11": 0.3293267352012615,
        "bleu-1": 0.04705016419343813,
        "bleu-10": 0.1694891212088683,
        "bleu-17": 0.08435726370551455,
        "bleu-12": 0.20536924683823288,
        "bleu-6": 0.06007707976121908,
        "bleu-18": 0.06343714290065289,
        "bleu-15": 0.23969644977650262,
        "bleu-13": 0.306636457545244,
        "bleu-9": 0.11636379572858345,
        "bleu-4": 0.18044168213252768,
        "bleu-14": 0.22699688904402604,
        "bleu-5": 0.015380637525661031,
        "bleu-19": 0.19803251407433614,
        "codebleu-3": 0.5844859077034648,
        "codebleu-0": 0.508426416280089,
        "codebleu-8": 0.5749011432389117,
        "codebleu-7": 0.5270905573839619,
        "codebleu-16": 0.624314516265969,
        "codebleu-2": 0.6071845086072647,
        "codebleu-11": 0.5407336312796889,
        "codebleu-1": 0.5348942941577631,
        "codebleu-10": 0.6407737608622341,
        "codebleu-17": 0.5773314996984373,
        "codebleu-12": 0.599242983891846,
        "codebleu-6": 0.4679851481397287,
        "codebleu-18": 0.4493847083284069,
        "codebleu-15": 0.665318810432933,
        "codebleu-13": 0.6465065460612838,
        "codebleu-9": 0.6095659747446404,
        "codebleu-4": 0.6328242388308322,
        "codebleu-14": 0.6694915251536209,
        "codebleu-5": 0.5807085794850811,
        "codebleu-19": 0.6412497169588922,
        "chrf-3": 0.3088343864519607,
        "chrf-0": 0.346931141736559,
        "chrf-8": 0.2679585882684389,
        "chrf-7": 0.3320949567477576,
        "chrf-16": 0.46932452316299694,
        "chrf-2": 0.4139019612135169,
        "chrf-11": 0.42034021261592047,
        "chrf-1": 0.25191634992740614,
        "chrf-10": 0.4142127604368476,
        "chrf-17": 0.28736622885848384,
        "chrf-12": 0.40243989821471887,
        "chrf-6": 0.18398570673729842,
        "chrf-18": 0.24465648912739418,
        "chrf-15": 0.473010174510814,
        "chrf-13": 0.5429318708428996,
        "chrf-9": 0.32600577913279716,
        "chrf-4": 0.36507834021552227,
        "chrf-14": 0.4973595341730422,
        "chrf-5": 0.17273414525048242,
        "chrf-19": 0.4288501555412202,
        "rougel-3": 0.4487179487179487,
        "rougel-0": 0.39743589743589747,
        "rougel-8": 0.3043478260869565,
        "rougel-7": 0.3612903225806451,
        "rougel-16": 0.5472636815920398,
        "rougel-2": 0.4521739130434783,
        "rougel-11": 0.4316546762589928,
        "rougel-1": 0.29213483146067415,
        "rougel-10": 0.3414634146341463,
        "rougel-17": 0.3253588516746412,
        "rougel-12": 0.4175824175824176,
        "rougel-6": 0.26666666666666666,
        "rougel-18": 0.3352601156069364,
        "rougel-15": 0.42105263157894735,
        "rougel-13": 0.5520833333333333,
        "rougel-9": 0.3804347826086957,
        "rougel-4": 0.43062200956937796,
        "rougel-14": 0.416,
        "rougel-5": 0.13978494623655913,
        "rougel-19": 0.44545454545454544,
        "meteor-3": 0.4153433165429544,
        "meteor-0": 0.36564250920826896,
        "meteor-8": 0.4013819607372172,
        "meteor-7": 0.3798676864977286,
        "meteor-16": 0.5117981050963909,
        "meteor-2": 0.48760374832663994,
        "meteor-11": 0.4062724203210323,
        "meteor-1": 0.3260750896569234,
        "meteor-10": 0.45867026879453004,
        "meteor-17": 0.39911909891080205,
        "meteor-12": 0.42816750590713193,
        "meteor-6": 0.31550295857988164,
        "meteor-18": 0.30217367000463163,
        "meteor-15": 0.5817498658078367,
        "meteor-13": 0.5586492921149004,
        "meteor-9": 0.455562126811509,
        "meteor-4": 0.43078228664766277,
        "meteor-14": 0.43402777777777785,
        "meteor-5": 0.23209616676261755,
        "meteor-19": 0.5324373306233061,
        "ruby-3": 0.2098765432098766,
        "ruby-0": 0.23456790123456794,
        "ruby-8": 0.19999999999999996,
        "ruby-7": 0.16249999999999998,
        "ruby-16": 0.40476190476190477,
        "ruby-2": 0.3096774193548387,
        "ruby-11": 0.2666666666666667,
        "ruby-1": 0.16504854368932043,
        "ruby-10": 0.24561403508771928,
        "ruby-17": 0.20895522388059706,
        "ruby-12": 0.25233644859813087,
        "ruby-6": 0.10666666666666669,
        "ruby-18": 0.18367346938775508,
        "ruby-15": 0.27450980392156865,
        "ruby-13": 0.3931623931623932,
        "ruby-9": 0.24770642201834858,
        "ruby-4": 0.30597014925373134,
        "ruby-14": 0.2914285714285715,
        "ruby-5": 0.07660455486542439,
        "ruby-19": 0.303448275862069,
        "codebertscore_f1-3": 0.7935404777526855,
        "codebertscore_f3-3": 0.782637894153595,
        "codebertscore_f1-0": 0.7973644733428955,
        "codebertscore_f3-0": 0.7994953393936157,
        "codebertscore_f1-8": 0.7223549485206604,
        "codebertscore_f3-8": 0.7314053773880005,
        "codebertscore_f1-7": 0.7679956555366516,
        "codebertscore_f3-7": 0.7743210792541504,
        "codebertscore_f1-16": 0.814941942691803,
        "codebertscore_f3-16": 0.8221920728683472,
        "codebertscore_f1-2": 0.8136045932769775,
        "codebertscore_f3-2": 0.8259096145629883,
        "codebertscore_f1-11": 0.8242802023887634,
        "codebertscore_f3-11": 0.8257811665534973,
        "codebertscore_f1-1": 0.7533864974975586,
        "codebertscore_f3-1": 0.7638329863548279,
        "codebertscore_f1-10": 0.7542630434036255,
        "codebertscore_f3-10": 0.7853728532791138,
        "codebertscore_f1-17": 0.7245924472808838,
        "codebertscore_f3-17": 0.737605094909668,
        "codebertscore_f1-12": 0.7848493456840515,
        "codebertscore_f3-12": 0.7893475294113159,
        "codebertscore_f1-6": 0.7280640602111816,
        "codebertscore_f3-6": 0.7416364550590515,
        "codebertscore_f1-18": 0.7614903450012207,
        "codebertscore_f3-18": 0.7618860602378845,
        "codebertscore_f1-15": 0.7948526740074158,
        "codebertscore_f3-15": 0.8056440353393555,
        "codebertscore_f1-13": 0.8202852010726929,
        "codebertscore_f3-13": 0.8412373661994934,
        "codebertscore_f1-9": 0.761067271232605,
        "codebertscore_f3-9": 0.7758337259292603,
        "codebertscore_f1-4": 0.7518645524978638,
        "codebertscore_f3-4": 0.7639296650886536,
        "codebertscore_f1-14": 0.8035881519317627,
        "codebertscore_f3-14": 0.8256058096885681,
        "codebertscore_f1-5": 0.6084818840026855,
        "codebertscore_f3-5": 0.7080857753753662,
        "codebertscore_f1-19": 0.7780267596244812,
        "codebertscore_f3-19": 0.801345705986023,
        "codebertscore_s_f1-3": 0.800594687461853,
        "codebertscore_s_f3-3": 0.7878575325012207,
        "codebertscore_s_f1-0": 0.8007214069366455,
        "codebertscore_s_f3-0": 0.8026779890060425,
        "codebertscore_s_f1-8": 0.7358532547950745,
        "codebertscore_s_f3-8": 0.7417994737625122,
        "codebertscore_s_f1-7": 0.7754029631614685,
        "codebertscore_s_f3-7": 0.7786604166030884,
        "codebertscore_s_f1-16": 0.8275676965713501,
        "codebertscore_s_f3-16": 0.8338820934295654,
        "codebertscore_s_f1-2": 0.8251568078994751,
        "codebertscore_s_f3-2": 0.8359549045562744,
        "codebertscore_s_f1-11": 0.8271222710609436,
        "codebertscore_s_f3-11": 0.8293974995613098,
        "codebertscore_s_f1-1": 0.7540817260742188,
        "codebertscore_s_f3-1": 0.761515200138092,
        "codebertscore_s_f1-10": 0.7697086334228516,
        "codebertscore_s_f3-10": 0.7990279197692871,
        "codebertscore_s_f1-17": 0.7520095109939575,
        "codebertscore_s_f3-17": 0.7620734572410583,
        "codebertscore_s_f1-12": 0.7962662577629089,
        "codebertscore_s_f3-12": 0.8011659979820251,
        "codebertscore_s_f1-6": 0.7323228120803833,
        "codebertscore_s_f3-6": 0.7449091672897339,
        "codebertscore_s_f1-18": 0.7620581388473511,
        "codebertscore_s_f3-18": 0.761530339717865,
        "codebertscore_s_f1-15": 0.8102300763130188,
        "codebertscore_s_f3-15": 0.8189559578895569,
        "codebertscore_s_f1-13": 0.8322844505310059,
        "codebertscore_s_f3-13": 0.8516379594802856,
        "codebertscore_s_f1-9": 0.7709097862243652,
        "codebertscore_s_f3-9": 0.7836349606513977,
        "codebertscore_s_f1-4": 0.7630187273025513,
        "codebertscore_s_f3-4": 0.7752041816711426,
        "codebertscore_s_f1-14": 0.8142526149749756,
        "codebertscore_s_f3-14": 0.8381458520889282,
        "codebertscore_s_f1-5": 0.6402364373207092,
        "codebertscore_s_f3-5": 0.7235671877861023,
        "codebertscore_s_f1-19": 0.7893597483634949,
        "codebertscore_s_f3-19": 0.81305330991745,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n",
        "snippet": [
            "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n"
        ],
        "simplified": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
        "task_id": "147",
        "3": "let sum = 0\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                let val1 = i * i - i + 1\n                let val2 = j * j - j + 1\n                let val3 = k * k - k + 1\n                if((val1 + val2 + val3) % 3 === 0){\n                    sum++\n                }\n            }\n        }\n    }\n    return sum\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let a = [1];\n    let result = 0;\n    for(let i = 1; i < n; i++){\n        a.push(a[i-1] + i + 1);\n    }\n    // since the array has only unique number, we can use the foreach method\n    a.forEach((value, index) => {\n        if(index !== a.length - 1){\n            // need to loop through the rest of array\n            for(let j = index + 1; j < a.length; j++){\n                // check if the rest of the array has the value\n                let k = a.indexOf(3 - value - a[j]);\n                if(k > j){\n                    result += 1;\n                }\n            }\n        }\n    });\n    return result;\n}\nlet result = get_max_triples(4);",
        "grade-0": {
            "execution": 0
        },
        "8": "let arr = [];\n    let max = 0;\n    for(let i = 1; i <= n; i++){\n        let num = i * i - i + 1;\n        arr.push(num);\n        for(let j = 0; j < arr.length; j++){\n            for(let k = 0; k < arr.length; k++){\n                if(k > j && j < i && i % 3 === 0){\n                    let sum = arr[j] + arr[k] + arr[i - 1];\n                    if(sum % 3 === 0){\n                        max++;\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let arr = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr.push(i * i - i + 1);\n    }\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < a.length; i++){\n        for(let j = i + 1; j < a.length; j++){\n            for(let k = j + 1; k < a.length; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var triples=0;\n    var arr=[];\n    for(var i=1;i<=n;i++){\n        arr.push(i*i-i+1);\n    }\n    console.log(arr);\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            for(var k=j+1;k<arr.length;k++){\n                if((arr[i]+arr[j]+arr[k])%3==0){\n                    triples++;\n                }\n            }\n        }\n    }\n    return triples;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var array = [];\n    var count = 0;\n    for(let i = 1; i <= n; i++){\n        array.push(i * i - i + 1);\n    }\n    for(let i = 0; i < array.length; i++){\n        for(let j = 0; j < array.length; j++){\n            for(let k = 0; k < array.length; k++){\n                if(i < j && j < k && (array[i] + array[j] + array[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let arr = []\n    for(let i = 0; i < n; i++){\n        arr.push(i * i - i + 1)\n    }\n    let triple = 0\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    triple++\n                }\n            }\n        }\n    }\n    return triple\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let arr = [];\n    for(let i = 1; i <= n; i++){\n        arr.push(i * i - i + 1);\n    }\n    let num = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    num++;\n                }\n            }\n        }\n    }\n    return num;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let a = [];\n    for(let i = 1; i<=n; i++){\n        a.push(i*i-i+1);\n    }\n    let k = 0;\n    for(let i = 0; i<a.length-2; i++){\n        for(let j = i+1; j<a.length-1; j++){\n            for(let l = j+1; l<a.length; l++){\n                if((a[i]+a[j]+a[l])%3===0){\n                    k++;\n                }\n            }\n        }\n    }\n    return k;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = 0;\n\tfor(let i = 1; i <= n; i++){\n\t\tfor(let j = i+1; j <= n; j++){\n\t\t\tfor(let k = j+1; k <= n; k++){\n\t\t\t\tif(((i*i-i+1)+(j*j-j+1)+(k*k-k+1))%3 === 0){\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(n<3) return 0;\n    let count = 0;\n    let arr = [1];\n    for(let i=2; i<=n; i++){\n        arr.push(i*i-i+1);\n    }\n    for(let i=0; i<arr.length-2; i++){\n        for(let j=i+1; j<arr.length-1; j++){\n            for(let k=j+1; k<arr.length; k++){\n                if((arr[i]+arr[j]+arr[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "const a = Array.from({length: n}, (v, i) => i * i - i + 1);\n    let counter = 0;\n    for(let i = 0; i < a.length; i++){\n        for(let j = i + 1; j < a.length; j++){\n            for(let k = j + 1; k < a.length; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    counter++;\n                }\n            }\n        }\n    }\n    return counter;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var array = [];\n    var count = 0;\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        var j = i * i - i + 1;\n        array.push(j);\n    }\n    for(var i = 0; i < array.length; i++){\n        for(var j = i + 1; j < array.length; j++){\n            for(var k = j + 1; k < array.length; k++){\n                sum = array[i] + array[j] + array[k];\n                if(sum % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let a = [];\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n  }\n  console.log(a);\n  for(let i = 0; i < a.length; i++){\n    for(let j = i + 1; j < a.length; j++){\n      for(let k = j + 1; k < a.length; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// your code here\n    var arr = []\n    for(var i = 1; i<=n; i++){\n        arr.push(i*i-i+1)\n    }\n    var count = 0\n    for(var i = 0; i<arr.length; i++){\n        for(var j = i+1; j<arr.length; j++){\n            for(var k = j+1; k<arr.length; k++){\n                if((arr[i]+arr[j]+arr[k])%3 === 0){\n                    count ++\n                }\n            }\n        }\n    }\n    return count\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var a = [];\n    for(var i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    var count = 0;\n    for(var i = 0; i < a.length; i++){\n        for(var j = i + 1; j < a.length; j++){\n            for(var k = j + 1; k < a.length; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var arr = []\n    var c = 0\n    for(var i = 1; i <= n; i++){\n        arr.push(i*i - i + 1)\n    }\n    for(var i = 0; i < arr.length - 2; i++){\n        for(var j = i + 1; j < arr.length - 1; j++){\n            for(var k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0){\n                    c++\n                }\n            }\n        }\n    }\n    return c\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "const array = [];\n    for(let i = 1; i<=n; i++){\n        array.push(i*i-i+1);\n    }\n    let count = 0;\n    for(let i = 0; i<array.length; i++){\n        for(let j = i+1; j<array.length; j++){\n            for(let k = j+1; k<array.length; k++){\n                if((array[i]+array[j]+array[k])%3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var count = 0;\n    var array = []\n    for(var i = 1; i <= n; i++){\n        array.push(i*i - i + 1)\n    }\n    for(var i = 0; i < array.length - 2; i++){\n        for(var j = i + 1; j < array.length - 1; j++){\n            for(var k = j + 1; k < array.length; k++){\n                if((array[i] + array[j] + array[k]) % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.5553312780854411,
        "bleu-0": 0.2460065362745274,
        "bleu-8": 0.44594917351503516,
        "bleu-7": 0.6699591808069425,
        "bleu-16": 0.6716617591612619,
        "bleu-2": 0.5681778287519045,
        "bleu-11": 0.5749123423590057,
        "bleu-1": 0.7157221501835975,
        "bleu-10": 0.6716617591612619,
        "bleu-17": 0.6354576484315679,
        "bleu-12": 0.5615266082217104,
        "bleu-6": 0.6219245834900573,
        "bleu-18": 0.5726355284874568,
        "bleu-15": 0.49546746964395416,
        "bleu-13": 0.637276210268021,
        "bleu-9": 0.6259236209908184,
        "bleu-4": 0.5906672438065494,
        "bleu-14": 0.6574094712821276,
        "bleu-5": 0.6701968392979575,
        "bleu-19": 0.6477764469831092,
        "codebleu-3": 0.6388673691228246,
        "codebleu-0": 0.6210996280411625,
        "codebleu-8": 0.7226590326861239,
        "codebleu-7": 0.8256286755029341,
        "codebleu-16": 0.8259124385619872,
        "codebleu-2": 0.8021716103335879,
        "codebleu-11": 0.7885610642588966,
        "codebleu-1": 0.854273033497271,
        "codebleu-10": 0.8259124385619872,
        "codebleu-17": 0.8452246208676036,
        "codebleu-12": 0.6353267118241558,
        "codebleu-6": 0.8377671297039168,
        "codebleu-18": 0.7405266719347743,
        "codebleu-15": 0.7621060262183132,
        "codebleu-13": 0.8201815137464471,
        "codebleu-9": 0.8412618390584898,
        "codebleu-4": 0.8059198461760287,
        "codebleu-14": 0.8839876563734305,
        "codebleu-5": 0.8245860341691853,
        "codebleu-19": 0.85659946355748,
        "chrf-3": 0.5432662629361179,
        "chrf-0": 0.3101021935938904,
        "chrf-8": 0.4740791991924458,
        "chrf-7": 0.6504592991974816,
        "chrf-16": 0.6662117103228269,
        "chrf-2": 0.5212892285216814,
        "chrf-11": 0.6002367613591338,
        "chrf-1": 0.6649416574769224,
        "chrf-10": 0.6591757938043051,
        "chrf-17": 0.6509793091354422,
        "chrf-12": 0.5549636305758214,
        "chrf-6": 0.6457169453868946,
        "chrf-18": 0.5252353139139534,
        "chrf-15": 0.47666778061711684,
        "chrf-13": 0.6512389914203557,
        "chrf-9": 0.554108217883006,
        "chrf-4": 0.5332068429128386,
        "chrf-14": 0.5789326010085456,
        "chrf-5": 0.6631148309655824,
        "chrf-19": 0.5888047381627293,
        "rougel-3": 0.6255144032921811,
        "rougel-0": 0.44951140065146583,
        "rougel-8": 0.5992779783393501,
        "rougel-7": 0.835820895522388,
        "rougel-16": 0.8582089552238806,
        "rougel-2": 0.781021897810219,
        "rougel-11": 0.7692307692307693,
        "rougel-1": 0.8625954198473283,
        "rougel-10": 0.8582089552238806,
        "rougel-17": 0.8455882352941176,
        "rougel-12": 0.6502057613168724,
        "rougel-6": 0.8185053380782917,
        "rougel-18": 0.7307692307692306,
        "rougel-15": 0.7168458781362007,
        "rougel-13": 0.8145454545454546,
        "rougel-9": 0.8134328358208954,
        "rougel-4": 0.8134328358208954,
        "rougel-14": 0.8345864661654135,
        "rougel-5": 0.8507462686567164,
        "rougel-19": 0.8283582089552238,
        "meteor-3": 0.6321172267417943,
        "meteor-0": 0.4091771097552174,
        "meteor-8": 0.5745984609075989,
        "meteor-7": 0.8451989501858563,
        "meteor-16": 0.8472387460039427,
        "meteor-2": 0.7918482459939812,
        "meteor-11": 0.7500154008848731,
        "meteor-1": 0.8667729619275505,
        "meteor-10": 0.8472387460039427,
        "meteor-17": 0.8671899085453437,
        "meteor-12": 0.5565911925175371,
        "meteor-6": 0.8875044684161829,
        "meteor-18": 0.7522140127757999,
        "meteor-15": 0.7116383425960439,
        "meteor-13": 0.8292526971759614,
        "meteor-9": 0.8170360792435278,
        "meteor-4": 0.7906537871610081,
        "meteor-14": 0.8610925651795716,
        "meteor-5": 0.8410212434218763,
        "meteor-19": 0.858021912779493,
        "ruby-3": 0.4538461538461539,
        "ruby-0": 0.3389830508474576,
        "ruby-8": 0.5102040816326531,
        "ruby-7": 0.782608695652174,
        "ruby-16": 0.8333333333333334,
        "ruby-2": 0.7430555555555556,
        "ruby-11": 0.6783216783216783,
        "ruby-1": 0.8484848484848485,
        "ruby-10": 0.8333333333333334,
        "ruby-17": 0.8098591549295775,
        "ruby-12": 0.4538461538461539,
        "ruby-6": 0.7350993377483444,
        "ruby-18": 0.676923076923077,
        "ruby-15": 0.6442953020134228,
        "ruby-13": 0.7724137931034483,
        "ruby-9": 0.7898550724637681,
        "ruby-4": 0.7898550724637681,
        "ruby-14": 0.7867647058823529,
        "ruby-5": 0.8260869565217391,
        "ruby-19": 0.7753623188405797,
        "codebertscore_f1-3": 0.8665964007377625,
        "codebertscore_f3-3": 0.8739223480224609,
        "codebertscore_f1-0": 0.7815855145454407,
        "codebertscore_f3-0": 0.8360080718994141,
        "codebertscore_f1-8": 0.8673117160797119,
        "codebertscore_f3-8": 0.8795099258422852,
        "codebertscore_f1-7": 0.9203302264213562,
        "codebertscore_f3-7": 0.9221838116645813,
        "codebertscore_f1-16": 0.9243761897087097,
        "codebertscore_f3-16": 0.9263695478439331,
        "codebertscore_f1-2": 0.8686745762825012,
        "codebertscore_f3-2": 0.8769428730010986,
        "codebertscore_f1-11": 0.8987019658088684,
        "codebertscore_f3-11": 0.9034168720245361,
        "codebertscore_f1-1": 0.9227537512779236,
        "codebertscore_f3-1": 0.9238720536231995,
        "codebertscore_f1-10": 0.9251421689987183,
        "codebertscore_f3-10": 0.9267505407333374,
        "codebertscore_f1-17": 0.9109521508216858,
        "codebertscore_f3-17": 0.917677104473114,
        "codebertscore_f1-12": 0.8695878386497498,
        "codebertscore_f3-12": 0.8635445237159729,
        "codebertscore_f1-6": 0.8841803669929504,
        "codebertscore_f3-6": 0.8925625681877136,
        "codebertscore_f1-18": 0.9001925587654114,
        "codebertscore_f3-18": 0.9050905108451843,
        "codebertscore_f1-15": 0.876771092414856,
        "codebertscore_f3-15": 0.8843424320220947,
        "codebertscore_f1-13": 0.9199994802474976,
        "codebertscore_f3-13": 0.9267249703407288,
        "codebertscore_f1-9": 0.8752607107162476,
        "codebertscore_f3-9": 0.8832417726516724,
        "codebertscore_f1-4": 0.9129148125648499,
        "codebertscore_f3-4": 0.9148797988891602,
        "codebertscore_f1-14": 0.9182490706443787,
        "codebertscore_f3-14": 0.924089789390564,
        "codebertscore_f1-5": 0.9044063091278076,
        "codebertscore_f3-5": 0.9056289196014404,
        "codebertscore_f1-19": 0.9124909043312073,
        "codebertscore_f3-19": 0.9183743000030518,
        "codebertscore_s_f1-3": 0.8727706074714661,
        "codebertscore_s_f3-3": 0.8784867525100708,
        "codebertscore_s_f1-0": 0.7916262745857239,
        "codebertscore_s_f3-0": 0.8475704789161682,
        "codebertscore_s_f1-8": 0.8798390030860901,
        "codebertscore_s_f3-8": 0.8918486833572388,
        "codebertscore_s_f1-7": 0.9254685044288635,
        "codebertscore_s_f3-7": 0.9275805950164795,
        "codebertscore_s_f1-16": 0.9290109276771545,
        "codebertscore_s_f3-16": 0.9311145544052124,
        "codebertscore_s_f1-2": 0.8706125617027283,
        "codebertscore_s_f3-2": 0.8798635601997375,
        "codebertscore_s_f1-11": 0.9033280611038208,
        "codebertscore_s_f3-11": 0.9082267880439758,
        "codebertscore_s_f1-1": 0.9268102645874023,
        "codebertscore_s_f3-1": 0.9280425906181335,
        "codebertscore_s_f1-10": 0.9302554130554199,
        "codebertscore_s_f3-10": 0.9320611357688904,
        "codebertscore_s_f1-17": 0.9109672904014587,
        "codebertscore_s_f3-17": 0.9184949994087219,
        "codebertscore_s_f1-12": 0.8696621656417847,
        "codebertscore_s_f3-12": 0.8632901906967163,
        "codebertscore_s_f1-6": 0.8888995051383972,
        "codebertscore_s_f3-6": 0.8980104327201843,
        "codebertscore_s_f1-18": 0.9091617465019226,
        "codebertscore_s_f3-18": 0.9144198894500732,
        "codebertscore_s_f1-15": 0.8810316920280457,
        "codebertscore_s_f3-15": 0.8883331418037415,
        "codebertscore_s_f1-13": 0.9293554425239563,
        "codebertscore_s_f3-13": 0.9358580112457275,
        "codebertscore_s_f1-9": 0.8781769275665283,
        "codebertscore_s_f3-9": 0.8876623511314392,
        "codebertscore_s_f1-4": 0.9150824546813965,
        "codebertscore_s_f3-4": 0.9172468185424805,
        "codebertscore_s_f1-14": 0.9203252196311951,
        "codebertscore_s_f3-14": 0.9265457391738892,
        "codebertscore_s_f1-5": 0.9068578481674194,
        "codebertscore_s_f3-5": 0.9083407521247864,
        "codebertscore_s_f1-19": 0.9138169884681702,
        "codebertscore_s_f3-19": 0.9203153848648071,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\nfunction multiply(a, b){\n",
        "snippet": [
            "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n"
        ],
        "simplified": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
        "task_id": "97",
        "0": "const str = a * b;\n  return Number(str.toString().split('').pop());\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "let result = ((a%10) * (b%10))\n\n    return result\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "return (a*b)%10;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return (a * b) % 10;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var a = a.toString();\n    var b = b.toString();\n    return (a[a.length-1] * b[b.length-1]);\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "let unitDigitOfA = a % 10;\n    let unitDigitOfB = b % 10;\n    return unitDigitOfA * unitDigitOfB;\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "let unitDigitOfA = Math.abs(a % 10);\n    let unitDigitOfB = Math.abs(b % 10);\n    return unitDigitOfA * unitDigitOfB;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "let numA = a.toString().split('').reverse()[0];\n  let numB = b.toString().split('').reverse()[0];\n  let result = numA * numB;\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let newA = a.toString();\n    let newB = b.toString();\n    let firstNum = newA.split('');\n    let secondNum = newB.split('');\n    let result = (parseInt(firstNum[1]) * parseInt(secondNum[1]));\n    return result;\n  }",
        "grade-8": {
            "execution": 0
        },
        "9": "var product = a * b;\n    var unit = product % 10;\n    return unit;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "let aArr = a.toString().split('');\n    let bArr = b.toString().split('');\n    aArr.pop();\n    bArr.pop();\n    let aArrStr = aArr.join('');\n    let bArrStr = bArr.join('');\n    let aNum = parseInt(aArrStr);\n    let bNum = parseInt(bArrStr);\n    let result = aNum * bNum;\n    return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "let unitA = a % 10;\n    let unitB = b % 10;\n    return unitA * unitB;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return (a % 10) * (b % 10);\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var a = String(a);\n\tvar b = String(b);\n\tvar unitA = a.substr(a.length-1);\n\tvar unitB = b.substr(b.length-1);\n\tvar product = Number(unitA) * Number(unitB);\n\treturn product;\n}",
        "grade-13": {
            "execution": 1
        },
        "15": "return parseInt(a.toString().split('').pop()) \n\t* parseInt(b.toString().split('').pop());\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return (a%10)*(b%10);\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "let aa = Math.abs(a).toString().split('').map(Number);\n    let bb = Math.abs(b).toString().split('').map(Number);\n    return aa[aa.length-1] * bb[bb.length-1];\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return Math.abs(a * b).toString().split('').pop() * 1;\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "let aString = ('' + a);\n    let bString = ('' + b);\n    return parseInt(aString[aString.length - 1]) * parseInt(bString[bString.length - 1]);\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.018888973432337235,
        "bleu-1": 0.23002629780100772,
        "bleu-2": 0.015289057249743268,
        "bleu-3": 0.015289057249743268,
        "bleu-4": 0.06288149902199815,
        "bleu-5": 0.07227646863033925,
        "bleu-6": 0.1809500408851267,
        "bleu-7": 0.01206776832857463,
        "bleu-8": 0.015500688644529621,
        "bleu-9": 0.021771232233648935,
        "bleu-10": 0.013576467781670187,
        "bleu-11": 0.06667684801572989,
        "bleu-12": 0.16548152527979923,
        "bleu-13": 0.0333601181327985,
        "bleu-15": 0.03497478755875881,
        "bleu-16": 0.16548152527979923,
        "bleu-17": 0.020368673117004535,
        "bleu-18": 0.03677201235061978,
        "bleu-19": 0.03264968447628387,
        "codebleu-0": 0.2803824716242945,
        "codebleu-1": 0.31032998970736514,
        "codebleu-2": 0.09653892379401804,
        "codebleu-3": 0.09653892379401804,
        "codebleu-4": 0.3540398615586585,
        "codebleu-5": 0.2541663835092401,
        "codebleu-6": 0.375485944873622,
        "codebleu-7": 0.34043441938178776,
        "codebleu-8": 0.3336316982933524,
        "codebleu-9": 0.19082630917932097,
        "codebleu-10": 0.3306480486931614,
        "codebleu-11": 0.2402088573307904,
        "codebleu-12": 0.214203382263054,
        "codebleu-13": 0.3842343955125909,
        "codebleu-15": 0.28004535147392284,
        "codebleu-16": 0.214203382263054,
        "codebleu-17": 0.36382623224728483,
        "codebleu-18": 0.2524545850842908,
        "codebleu-19": 0.3842343955125909,
        "chrf-0": 0.1295216483965431,
        "chrf-1": 0.34637201703773285,
        "chrf-2": 0.18707615535920882,
        "chrf-3": 0.18707615535920882,
        "chrf-4": 0.18934660419320873,
        "chrf-5": 0.16126402813718696,
        "chrf-6": 0.23296170301219254,
        "chrf-7": 0.10785809340835457,
        "chrf-8": 0.10544369878893999,
        "chrf-9": 0.13733535513912343,
        "chrf-10": 0.09590353194545789,
        "chrf-11": 0.174110794312908,
        "chrf-12": 0.4316153393148092,
        "chrf-13": 0.1389042187403623,
        "chrf-15": 0.12623325763412716,
        "chrf-16": 0.4316153393148092,
        "chrf-17": 0.13239011803386924,
        "chrf-18": 0.14901520509278404,
        "chrf-19": 0.14122437416400427,
        "rougel-0": 0.27272727272727276,
        "rougel-1": 0.5,
        "rougel-2": 0.3404255319148936,
        "rougel-3": 0.3404255319148936,
        "rougel-4": 0.379746835443038,
        "rougel-5": 0.2318840579710145,
        "rougel-6": 0.3037974683544304,
        "rougel-7": 0.22448979591836732,
        "rougel-8": 0.2105263157894737,
        "rougel-9": 0.2545454545454546,
        "rougel-10": 0.23999999999999996,
        "rougel-11": 0.26229508196721313,
        "rougel-12": 0.5098039215686275,
        "rougel-13": 0.3137254901960784,
        "rougel-15": 0.2962962962962963,
        "rougel-16": 0.5098039215686275,
        "rougel-17": 0.22018348623853212,
        "rougel-18": 0.3076923076923077,
        "rougel-19": 0.3516483516483516,
        "meteor-0": 0.19337016574585636,
        "meteor-1": 0.41409579190340906,
        "meteor-2": 0.1702479933772451,
        "meteor-3": 0.1702479933772451,
        "meteor-4": 0.27999999999999997,
        "meteor-5": 0.32992389649923903,
        "meteor-6": 0.4255216989843029,
        "meteor-7": 0.26649746192893403,
        "meteor-8": 0.23170731707317072,
        "meteor-9": 0.16636769723189482,
        "meteor-10": 0.23542600896860988,
        "meteor-11": 0.337317149081855,
        "meteor-12": 0.3739576761079754,
        "meteor-13": 0.3250182861376828,
        "meteor-15": 0.1724137931034483,
        "meteor-16": 0.3739576761079754,
        "meteor-17": 0.20987654320987653,
        "meteor-18": 0.18005540166204986,
        "meteor-19": 0.33425653199689337,
        "ruby-0": 0.1351351351351351,
        "ruby-1": 0.29729729729729726,
        "ruby-2": 0.18918918918918914,
        "ruby-3": 0.18918918918918914,
        "ruby-4": 0.1428571428571429,
        "ruby-5": 0.1351351351351351,
        "ruby-6": 0.16666666666666663,
        "ruby-7": 0.14754098360655743,
        "ruby-8": 0.1558441558441559,
        "ruby-9": 0.18918918918918914,
        "ruby-10": 0.1415929203539823,
        "ruby-11": 0.16216216216216217,
        "ruby-12": 0.32432432432432434,
        "ruby-13": 0.18461538461538463,
        "ruby-15": 0.15909090909090906,
        "ruby-16": 0.32432432432432434,
        "ruby-17": 0.125,
        "ruby-18": 0.16216216216216217,
        "ruby-19": 0.18518518518518523,
        "codebertscore_f1-0": 0.7546544075012207,
        "codebertscore_f3-0": 0.7727420330047607,
        "codebertscore_f1-1": 0.8392072319984436,
        "codebertscore_f3-1": 0.816106915473938,
        "codebertscore_f1-2": 0.8309870958328247,
        "codebertscore_f3-2": 0.7991013526916504,
        "codebertscore_f1-3": 0.8340891003608704,
        "codebertscore_f3-3": 0.8016539812088013,
        "codebertscore_f1-4": 0.7766515612602234,
        "codebertscore_f3-4": 0.7954875230789185,
        "codebertscore_f1-5": 0.795628011226654,
        "codebertscore_f3-5": 0.8227827548980713,
        "codebertscore_f1-6": 0.7988885641098022,
        "codebertscore_f3-6": 0.8355987071990967,
        "codebertscore_f1-7": 0.7668516635894775,
        "codebertscore_f3-7": 0.7964114546775818,
        "codebertscore_f1-8": 0.7491493821144104,
        "codebertscore_f3-8": 0.779349684715271,
        "codebertscore_f1-9": 0.8085710406303406,
        "codebertscore_f3-9": 0.8095918297767639,
        "codebertscore_f1-10": 0.7174786925315857,
        "codebertscore_f3-10": 0.7486882209777832,
        "codebertscore_f1-11": 0.8315439820289612,
        "codebertscore_f3-11": 0.8332508206367493,
        "codebertscore_f1-12": 0.8687433004379272,
        "codebertscore_f3-12": 0.8244897127151489,
        "codebertscore_f1-13": 0.7765983939170837,
        "codebertscore_f3-13": 0.8076440095901489,
        "codebertscore_f1-15": 0.7320835590362549,
        "codebertscore_f3-15": 0.763298749923706,
        "codebertscore_f1-16": 0.8480176329612732,
        "codebertscore_f3-16": 0.8083146810531616,
        "codebertscore_f1-17": 0.7454720139503479,
        "codebertscore_f3-17": 0.786293089389801,
        "codebertscore_f1-18": 0.7560850381851196,
        "codebertscore_f3-18": 0.777601957321167,
        "codebertscore_f1-19": 0.7634279131889343,
        "codebertscore_f3-19": 0.7907617092132568,
        "codebertscore_s_f1-0": 0.7543491125106812,
        "codebertscore_s_f3-0": 0.7782472968101501,
        "codebertscore_s_f1-1": 0.8431355357170105,
        "codebertscore_s_f3-1": 0.8309500217437744,
        "codebertscore_s_f1-2": 0.8537061214447021,
        "codebertscore_s_f3-2": 0.8212857246398926,
        "codebertscore_s_f1-3": 0.8572695851325989,
        "codebertscore_s_f3-3": 0.8259748220443726,
        "codebertscore_s_f1-4": 0.7945719361305237,
        "codebertscore_s_f3-4": 0.8152673244476318,
        "codebertscore_s_f1-5": 0.8050258755683899,
        "codebertscore_s_f3-5": 0.8422009944915771,
        "codebertscore_s_f1-6": 0.805746853351593,
        "codebertscore_s_f3-6": 0.8502376675605774,
        "codebertscore_s_f1-7": 0.7803060412406921,
        "codebertscore_s_f3-7": 0.8093777894973755,
        "codebertscore_s_f1-8": 0.7591152191162109,
        "codebertscore_s_f3-8": 0.7949140071868896,
        "codebertscore_s_f1-9": 0.8123273253440857,
        "codebertscore_s_f3-9": 0.8200833201408386,
        "codebertscore_s_f1-10": 0.7292090058326721,
        "codebertscore_s_f3-10": 0.7699192762374878,
        "codebertscore_s_f1-11": 0.8405927419662476,
        "codebertscore_s_f3-11": 0.8478046655654907,
        "codebertscore_s_f1-12": 0.8971024751663208,
        "codebertscore_s_f3-12": 0.8553927540779114,
        "codebertscore_s_f1-13": 0.7888825535774231,
        "codebertscore_s_f3-13": 0.8210961818695068,
        "codebertscore_s_f1-15": 0.7472781538963318,
        "codebertscore_s_f3-15": 0.7808549404144287,
        "codebertscore_s_f1-16": 0.8724071979522705,
        "codebertscore_s_f3-16": 0.8336188197135925,
        "codebertscore_s_f1-17": 0.7571247220039368,
        "codebertscore_s_f3-17": 0.8003930449485779,
        "codebertscore_s_f1-18": 0.7560911774635315,
        "codebertscore_s_f3-18": 0.7853595614433289,
        "codebertscore_s_f1-19": 0.7793213725090027,
        "codebertscore_s_f3-19": 0.8097637891769409,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
        "task_id": "122",
        "3": "return arr.reduce((acc, curr, i) => {\n        return i < k && curr.toString().length <= 2 ? acc + curr : acc;\n    }, 0);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var sum = 0;\n    for(var i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let arr_len = arr.length\n  let count = 0\n  let sum = 0\n  for(let i = 0; i < arr_len; i++){\n    if(count < k){\n      let s = arr[i].toString()\n      if(s.length === 1 || s.length === 2){\n        sum += arr[i]\n        count++\n      }\n    }else{\n      break\n    }\n  }\n  return sum\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var output = 0;\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var a = arr[i];\n        var temp = arr[i];\n        while(temp >= 10){\n            temp = Math.floor(temp / 10);\n        }\n        count++;\n        if(temp <= 2 && count <= k){\n            output += a;\n        }\n    }\n    return output;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let i = 0, sum = 0;\n    while(i < k){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        let num = arr[i].toString();\n        if(num.length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nlet arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;",
        "grade-1": {
            "execution": 1
        },
        "10": "//set up variables\n  let two_sum = 0;\n\n  //loop through array\n  for(let i = 0; i < k; i++){\n    //determine if elements in array are greater than ten\n    if(arr[i] < 10){\n      //add number to two_sum if less than ten\n      two_sum += arr[i];\n    } else if(arr[i] >= 10 && arr[i] < 100){\n      //add number to two_sum if between ten and one hundred\n      two_sum += arr[i];\n    }\n  }\n  return two_sum;\n}\nadd_elements([111,21,3,4000,5,6,7,8,9], 4); //24",
        "grade-10": {
            "execution": 1
        },
        "17": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nlet arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] >= 10 && arr[i] < 100){\n      result += arr[i];\n    }\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nlet arr = [111,21,3,4000,5,6,7,8,9];",
        "grade-18": {
            "execution": 1
        },
        "15": "// add code here\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return (arr.filter(v => v < 100).length < k) ? arr.reduce((total,v) => total + v, 0) : arr.filter(v => v < 100).reduce((total,v) => total + v, 0);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "// Code goes here\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] > 99){\n            break;\n        }\n        sum += arr[i];\n    }\n    return sum;\n}\n\nlet arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;",
        "grade-14": {
            "execution": 0
        },
        "5": "return arr.slice(0, k).filter(x => x >= 10 && x <= 99).reduce((a, c) => a + c, 0);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let count = 0;\n  let i = 0;\n  while(i < arr.length && count < k){\n    if(arr[i] > 9 && arr[i] < 100){\n      count++;\n    }\n    i++;\n  }\n  return arr.slice(0,i).reduce((a,b) => {\n    if(b > 9 && b < 100){\n      return a + b;\n    }\n    return a;\n  }, 0);\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.048775654844502435,
        "bleu-0": 0.5606334617729857,
        "bleu-8": 0.29148147337190455,
        "bleu-7": 0.2059225781047569,
        "bleu-16": 0.4727956508312932,
        "bleu-2": 0.43947995318774274,
        "bleu-11": 0.6423563302285367,
        "bleu-1": 0.3587726971500643,
        "bleu-10": 0.23775084198940907,
        "bleu-17": 0.4345404297296423,
        "bleu-12": 0.3832392016256643,
        "bleu-6": 0.6836169387584617,
        "bleu-18": 0.4672215587004528,
        "bleu-15": 4.4892187384438806e-05,
        "bleu-13": 0.02855485809026345,
        "bleu-9": 0.6164882029959762,
        "bleu-4": 0.6137412167808178,
        "bleu-14": 0.394599157908061,
        "bleu-5": 0.02492212269360902,
        "bleu-19": 0.2355222898702536,
        "codebleu-3": 0.34179165921091836,
        "codebleu-0": 0.6483287449462098,
        "codebleu-8": 0.6339513309330693,
        "codebleu-7": 0.6403550357187321,
        "codebleu-16": 0.6641703605096341,
        "codebleu-2": 0.6559722415902065,
        "codebleu-11": 0.780375561687596,
        "codebleu-1": 0.7007935905231517,
        "codebleu-10": 0.715586816293244,
        "codebleu-17": 0.7017670342985696,
        "codebleu-12": 0.45497135833881386,
        "codebleu-6": 0.7808888234124105,
        "codebleu-18": 0.7072138891270381,
        "codebleu-15": 0.036037499222200446,
        "codebleu-13": 0.37773487773487774,
        "codebleu-9": 0.6944565206430335,
        "codebleu-4": 0.6618105841091181,
        "codebleu-14": 0.6834556440071278,
        "codebleu-5": 0.3131584379795575,
        "codebleu-19": 0.6452883210129815,
        "chrf-3": 0.15938687599717036,
        "chrf-0": 0.5567256450793752,
        "chrf-8": 0.40905477921736577,
        "chrf-7": 0.331896717739514,
        "chrf-16": 0.48928109719077667,
        "chrf-2": 0.4705392016552112,
        "chrf-11": 0.669840701509964,
        "chrf-1": 0.5817580252586468,
        "chrf-10": 0.4136592082962088,
        "chrf-17": 0.5980365477777002,
        "chrf-12": 0.4361642922297421,
        "chrf-6": 0.7077370426072549,
        "chrf-18": 0.6089650357797077,
        "chrf-15": 0.021832111441388538,
        "chrf-13": 0.187089226581515,
        "chrf-9": 0.6161540166050761,
        "chrf-4": 0.6385185430808517,
        "chrf-14": 0.5351445752775663,
        "chrf-5": 0.15245872083274273,
        "chrf-19": 0.4100741256483076,
        "rougel-3": 0.25,
        "rougel-0": 0.7708333333333334,
        "rougel-8": 0.5285714285714286,
        "rougel-7": 0.4583333333333333,
        "rougel-16": 0.6666666666666666,
        "rougel-2": 0.6605504587155964,
        "rougel-11": 0.8113207547169811,
        "rougel-1": 0.5972222222222222,
        "rougel-10": 0.45918367346938777,
        "rougel-17": 0.6290322580645161,
        "rougel-12": 0.6588235294117647,
        "rougel-6": 0.838095238095238,
        "rougel-18": 0.6554621848739496,
        "rougel-15": 0.03508771929824561,
        "rougel-13": 0.20512820512820512,
        "rougel-9": 0.7722772277227723,
        "rougel-4": 0.8125,
        "rougel-14": 0.5873015873015873,
        "rougel-5": 0.2105263157894737,
        "rougel-19": 0.45333333333333337,
        "meteor-3": 0.2826724577669758,
        "meteor-0": 0.70444479228263,
        "meteor-8": 0.6047445255474453,
        "meteor-7": 0.6132076539855073,
        "meteor-16": 0.72249158440841,
        "meteor-2": 0.6424235280249897,
        "meteor-11": 0.8518854782149203,
        "meteor-1": 0.6029355860198617,
        "meteor-10": 0.5295235606354612,
        "meteor-17": 0.672514619883041,
        "meteor-12": 0.49250734776669286,
        "meteor-6": 0.8740562022573762,
        "meteor-18": 0.6910990202532626,
        "meteor-15": 0.01075268817204301,
        "meteor-13": 0.24639481501485283,
        "meteor-9": 0.7344782733931895,
        "meteor-4": 0.7417647642006617,
        "meteor-14": 0.6173982403019428,
        "meteor-5": 0.23717107784134203,
        "meteor-19": 0.5345611540626204,
        "ruby-3": 0.11764705882352944,
        "ruby-0": 0.6666666666666667,
        "ruby-8": 0.4044943820224719,
        "ruby-7": 0.3548387096774194,
        "ruby-16": 0.537037037037037,
        "ruby-2": 0.603448275862069,
        "ruby-11": 0.7818181818181819,
        "ruby-1": 0.4623655913978495,
        "ruby-10": 0.303448275862069,
        "ruby-17": 0.4657534246575342,
        "ruby-12": 0.5098039215686274,
        "ruby-6": 0.7962962962962963,
        "ruby-18": 0.4852941176470589,
        "ruby-15": 0.019607843137254943,
        "ruby-13": 0.13636363636363635,
        "ruby-9": 0.607843137254902,
        "ruby-4": 0.7058823529411764,
        "ruby-14": 0.41333333333333333,
        "ruby-5": 0.11764705882352944,
        "ruby-19": 0.31313131313131315,
        "codebertscore_f1-3": 0.7881277203559875,
        "codebertscore_f3-3": 0.8012239933013916,
        "codebertscore_f1-0": 0.9334384799003601,
        "codebertscore_f3-0": 0.9233818650245667,
        "codebertscore_f1-8": 0.8361309170722961,
        "codebertscore_f3-8": 0.864141047000885,
        "codebertscore_f1-7": 0.8279702663421631,
        "codebertscore_f3-7": 0.8570963740348816,
        "codebertscore_f1-16": 0.9056025147438049,
        "codebertscore_f3-16": 0.8997247815132141,
        "codebertscore_f1-2": 0.8912174701690674,
        "codebertscore_f3-2": 0.898605465888977,
        "codebertscore_f1-11": 0.9340865612030029,
        "codebertscore_f3-11": 0.9297432899475098,
        "codebertscore_f1-1": 0.8588927984237671,
        "codebertscore_f3-1": 0.8942142128944397,
        "codebertscore_f1-10": 0.7715408205986023,
        "codebertscore_f3-10": 0.8510821461677551,
        "codebertscore_f1-17": 0.8739240169525146,
        "codebertscore_f3-17": 0.9085098505020142,
        "codebertscore_f1-12": 0.9135457873344421,
        "codebertscore_f3-12": 0.8916246294975281,
        "codebertscore_f1-6": 0.9491347670555115,
        "codebertscore_f3-6": 0.94622802734375,
        "codebertscore_f1-18": 0.881680428981781,
        "codebertscore_f3-18": 0.9137207269668579,
        "codebertscore_f1-15": 0.638310968875885,
        "codebertscore_f3-15": 0.6177987456321716,
        "codebertscore_f1-13": 0.761671781539917,
        "codebertscore_f3-13": 0.7645493745803833,
        "codebertscore_f1-9": 0.9101852774620056,
        "codebertscore_f3-9": 0.9193010330200195,
        "codebertscore_f1-4": 0.9470778703689575,
        "codebertscore_f3-4": 0.9360018968582153,
        "codebertscore_f1-14": 0.8553642630577087,
        "codebertscore_f3-14": 0.8905648589134216,
        "codebertscore_f1-5": 0.7622867226600647,
        "codebertscore_f3-5": 0.7640016674995422,
        "codebertscore_f1-19": 0.8496435284614563,
        "codebertscore_f3-19": 0.8770269751548767,
        "codebertscore_s_f1-3": 0.7941170334815979,
        "codebertscore_s_f3-3": 0.8059182167053223,
        "codebertscore_s_f1-0": 0.9311302900314331,
        "codebertscore_s_f3-0": 0.9218656420707703,
        "codebertscore_s_f1-8": 0.8370854258537292,
        "codebertscore_s_f3-8": 0.8626167178153992,
        "codebertscore_s_f1-7": 0.8254254460334778,
        "codebertscore_s_f3-7": 0.8542516231536865,
        "codebertscore_s_f1-16": 0.9015620946884155,
        "codebertscore_s_f3-16": 0.8975905179977417,
        "codebertscore_s_f1-2": 0.8885201811790466,
        "codebertscore_s_f3-2": 0.8954201936721802,
        "codebertscore_s_f1-11": 0.929385244846344,
        "codebertscore_s_f3-11": 0.9250322580337524,
        "codebertscore_s_f1-1": 0.8710396885871887,
        "codebertscore_s_f3-1": 0.9057742953300476,
        "codebertscore_s_f1-10": 0.7867076396942139,
        "codebertscore_s_f3-10": 0.8656004667282104,
        "codebertscore_s_f1-17": 0.8795698881149292,
        "codebertscore_s_f3-17": 0.9155664443969727,
        "codebertscore_s_f1-12": 0.9160750508308411,
        "codebertscore_s_f3-12": 0.893235445022583,
        "codebertscore_s_f1-6": 0.9472152590751648,
        "codebertscore_s_f3-6": 0.9449712038040161,
        "codebertscore_s_f1-18": 0.8870722055435181,
        "codebertscore_s_f3-18": 0.9200942516326904,
        "codebertscore_s_f1-15": 0.6168235540390015,
        "codebertscore_s_f3-15": 0.5942906737327576,
        "codebertscore_s_f1-13": 0.772421658039093,
        "codebertscore_s_f3-13": 0.7740321159362793,
        "codebertscore_s_f1-9": 0.9119899272918701,
        "codebertscore_s_f3-9": 0.9214509725570679,
        "codebertscore_s_f1-4": 0.9478371143341064,
        "codebertscore_s_f3-4": 0.937031626701355,
        "codebertscore_s_f1-14": 0.8588329553604126,
        "codebertscore_s_f3-14": 0.894620954990387,
        "codebertscore_s_f1-5": 0.7697474956512451,
        "codebertscore_s_f3-5": 0.770717203617096,
        "codebertscore_s_f1-19": 0.8496429920196533,
        "codebertscore_s_f3-19": 0.8769970536231995,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 2,
        "raw_gpt35_nsnr-12": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "0",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns True if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\nfunction simplify(x, n){\n",
        "snippet": [
            "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n"
        ],
        "simplified": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
        "task_id": "144",
        "3": "var num1 = x.split('/')[0];\n  var den1 = x.split('/')[1];\n  var num2 = n.split('/')[0];\n  var den2 = n.split('/')[1];\n  var product = (num1 * num2) / (den1 * den2);\n  return product % 1 === 0;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var xn= 1/(n.split(\"/\")[1])*(x.split(\"/\")[0]);\n    var nn= 1/(x.split(\"/\")[1])*(n.split(\"/\")[0]);\n    return xn % 1 === 0 && nn % 1 === 0;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var frac1 = x.split('/').map(Number),\n      frac2 = n.split('/').map(Number),\n      dec1 = (frac1[0] / frac1[1]),\n      dec2 = (frac2[0] / frac2[1]),\n      num = dec1 * dec2,\n      whole = Math.floor(num),\n      rest = num - whole;\n  if (rest === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let x_numerator = x.split('/')[0]\n  let x_denominator = x.split('/')[1]\n  let n_numerator = n.split('/')[0]\n  let n_denominator = n.split('/')[1]\n  if(Number(x_numerator) * Number(n_denominator) === Number(n_numerator) * Number(x_denominator)) {\n    return true\n  } else {\n    return false\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var a = x.split(\"/\");\n    var b = n.split(\"/\");\n    var c = (a[0]*b[1])/(a[1]*b[0]);\n    if(c % 1 === 0){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var xArray = x.split('/');\n  var nArray = n.split('/');\n  var xNum = Number(xArray[0]);\n  var xDen = Number(xArray[1]);\n  var nNum = Number(nArray[0]);\n  var nDen = Number(nArray[1]);\n  var xNumCopy = xNum;\n  var xDenCopy = xDen;\n  if(xNum < 0){\n    xNumCopy = Math.abs(xNum);\n  }\n  if(xDen < 0){\n    xDenCopy = Math.abs(xDen);\n  }\n  if(nNum < 0){\n    nNum = Math.abs(nNum);\n  }\n  if(nDen < 0){\n    nDen = Math.abs(nDen);\n  }\n  var xProduct = (xNumCopy*nDen);\n  var xDenProduct = (xDenCopy*nNum);\n  var gcdProduct = gcd(xProduct, xDenProduct);\n  if(gcdProduct === 1){\n    return false;\n  }\n  else{\n    return true;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let numerator = x.split('/')[0] / n.split('/')[0];\n    let denominator = x.split('/')[1] / n.split('/')[1];\n    return numerator % 1 === 0 && denominator % 1 === 0;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var x_numerator = parseInt(x.split(\"/\")[0]);\n    var x_denominator = parseInt(x.split(\"/\")[1]);\n    var n_numerator = parseInt(n.split(\"/\")[0]);\n    var n_denominator = parseInt(n.split(\"/\")[1]);\n    var result = simplifyFraction(x_numerator * n_numerator, x_denominator * n_denominator);\n    if (result.denominator == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let num = x.split('/');\n    let den = n.split('/');\n    let fract = (num[0]*den[1])/(num[1]*den[0]);\n    return fract % 1 === 0;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "const [xNum, xDen] = x.split('/');\n    const [nNum, nDen] = n.split('/');\n    const resultNum = xNum * nNum;\n    const resultDen = xDen * nDen;\n    if (resultNum % resultDen === 0) {\n        return true;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return x=='1/1'||n=='1/1'||x[2]==n[2]&&+x[0]*+n[2]==+n[0]*+x[2]\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var product = multiply(x, n);\n    var num = product.split(\"/\")[0];\n    var den = product.split(\"/\")[1];\n    var remainder = num % den;\n    if(remainder === 0){\n        return true;\n    }\n    return false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n  return (xNumerator * nDenominator) % (xDenominator * nNumerator) === 0 ? true : false;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let xFraction = x.split('/');\n  let nFraction = n.split('/');\n  let xDecimal = xFraction[0] / xFraction[1];\n  let nDecimal = nFraction[0] / nFraction[1];\n  return xDecimal * nDecimal % 1 === 0;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var x_num = x.split(\"/\")[0] * n.split(\"/\")[1];\n\tvar x_den = x.split(\"/\")[1] * n.split(\"/\")[0];\n\treturn (x_num % x_den) == 0;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n    return (numeratorX / denominatorX) * (numeratorN / denominatorN) % 1 === 0;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let a = x.split('/');\n    let b = n.split('/');\n    return a[0]/a[1] * b[0]/b[1] % 1 === 0 ? true : false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let x1 = Number(x.split('/')[0])\n    let x2 = Number(x.split('/')[1])\n    let n1 = Number(n.split('/')[0])\n    let n2 = Number(n.split('/')[1])\n    return (x1 * n2) % (x2 * n1) === 0 ? true : false\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var xD = parseInt(x.split('/')[1]);\n  var nD = parseInt(n.split('/')[1]);\n  var gcdD = gcd(xD, nD);\n  var x = x.split('/')[0]/gcdD;\n  var n = n.split('/')[0]/gcdD;\n  return x === n;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let xArr = x.split('/')\n  let nArr = n.split('/')\n  let first = xArr[0]*nArr[1]\n  let second = xArr[1]*nArr[0]\n  if(first/second%1 === 0){\n    return true\n  } else {\n    return false\n  }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.16636356594650598,
        "bleu-0": 0.21855752561035793,
        "bleu-8": 0.16286637211405225,
        "bleu-7": 0.21105526474761846,
        "bleu-16": 0.3525107975301796,
        "bleu-2": 0.08488708218107209,
        "bleu-11": 0.17119961229576133,
        "bleu-1": 0.14175704362507913,
        "bleu-10": 0.24258669313393064,
        "bleu-17": 0.12681496213726362,
        "bleu-12": 0.05265497358148537,
        "bleu-6": 0.07995002053729909,
        "bleu-18": 0.1594098621659522,
        "bleu-15": 0.19043324399603417,
        "bleu-13": 0.18195086037036276,
        "bleu-9": 0.15285199778054231,
        "bleu-4": 0.33475111181628814,
        "bleu-14": 0.2476229453832803,
        "bleu-5": 0.16402539297418095,
        "bleu-19": 0.19239838652872546,
        "codebleu-3": 0.5752699960338193,
        "codebleu-0": 0.5285914964336351,
        "codebleu-8": 0.5723723155802622,
        "codebleu-7": 0.5750619173439762,
        "codebleu-16": 0.5916933950299587,
        "codebleu-2": 0.612972633354965,
        "codebleu-11": 0.4729777131604046,
        "codebleu-1": 0.5514039517152909,
        "codebleu-10": 0.5177012836446139,
        "codebleu-17": 0.42676260764965784,
        "codebleu-12": 0.26357479124398864,
        "codebleu-6": 0.41802801164471265,
        "codebleu-18": 0.5810554898481716,
        "codebleu-15": 0.5141106688711338,
        "codebleu-13": 0.47174737207880996,
        "codebleu-9": 0.4519354469235376,
        "codebleu-4": 0.48521519138023655,
        "codebleu-14": 0.6050169296436522,
        "codebleu-5": 0.5487050868632181,
        "codebleu-19": 0.551119104307494,
        "chrf-3": 0.25923119614684287,
        "chrf-0": 0.25617304861591617,
        "chrf-8": 0.2998192038412031,
        "chrf-7": 0.38269631492420264,
        "chrf-16": 0.3246670308005981,
        "chrf-2": 0.2759909349060445,
        "chrf-11": 0.2674387833670785,
        "chrf-1": 0.22100474778884938,
        "chrf-10": 0.2928049370418793,
        "chrf-17": 0.24750010809552406,
        "chrf-12": 0.09095476691428644,
        "chrf-6": 0.2221373520359439,
        "chrf-18": 0.29055152934894996,
        "chrf-15": 0.25629247583144116,
        "chrf-13": 0.24590543780519666,
        "chrf-9": 0.27500774880261575,
        "chrf-4": 0.3449669751244588,
        "chrf-14": 0.4638298131328142,
        "chrf-5": 0.24253871683949638,
        "chrf-19": 0.27468033414134624,
        "rougel-3": 0.43137254901960786,
        "rougel-0": 0.4444444444444445,
        "rougel-8": 0.4117647058823529,
        "rougel-7": 0.46835443037974683,
        "rougel-16": 0.5957446808510637,
        "rougel-2": 0.27450980392156865,
        "rougel-11": 0.46808510638297873,
        "rougel-1": 0.36666666666666664,
        "rougel-10": 0.6201550387596899,
        "rougel-17": 0.33103448275862074,
        "rougel-12": 0.28571428571428575,
        "rougel-6": 0.3484848484848485,
        "rougel-18": 0.44303797468354433,
        "rougel-15": 0.5142857142857143,
        "rougel-13": 0.45112781954887216,
        "rougel-9": 0.391304347826087,
        "rougel-4": 0.5806451612903226,
        "rougel-14": 0.4968152866242038,
        "rougel-5": 0.3636363636363637,
        "rougel-19": 0.5211267605633804,
        "meteor-3": 0.48168344836858223,
        "meteor-0": 0.47407727064402994,
        "meteor-8": 0.4324527542586033,
        "meteor-7": 0.5844907407407407,
        "meteor-16": 0.6411835701061298,
        "meteor-2": 0.2937448406252497,
        "meteor-11": 0.43545273571816373,
        "meteor-1": 0.32411833363773335,
        "meteor-10": 0.5394657264254049,
        "meteor-17": 0.2936945653926786,
        "meteor-12": 0.2155678707056434,
        "meteor-6": 0.34641965606508873,
        "meteor-18": 0.5011737891737893,
        "meteor-15": 0.41297038451770907,
        "meteor-13": 0.4558258556992467,
        "meteor-9": 0.3651855450862895,
        "meteor-4": 0.5067241549957936,
        "meteor-14": 0.547432239657632,
        "meteor-5": 0.3695367413071607,
        "meteor-19": 0.4578118816096322,
        "ruby-3": 0.3176470588235294,
        "ruby-0": 0.2705882352941177,
        "ruby-8": 0.2941176470588235,
        "ruby-7": 0.3222222222222222,
        "ruby-16": 0.410958904109589,
        "ruby-2": 0.16806722689075626,
        "ruby-11": 0.3013698630136986,
        "ruby-1": 0.2678571428571429,
        "ruby-10": 0.5147058823529411,
        "ruby-17": 0.16883116883116878,
        "ruby-12": 0.20588235294117652,
        "ruby-6": 0.17647058823529416,
        "ruby-18": 0.30000000000000004,
        "ruby-15": 0.38888888888888884,
        "ruby-13": 0.2941176470588235,
        "ruby-9": 0.17142857142857137,
        "ruby-4": 0.4117647058823529,
        "ruby-14": 0.3932584269662921,
        "ruby-5": 0.2680412371134021,
        "ruby-19": 0.3783783783783784,
        "codebertscore_f1-3": 0.8204089403152466,
        "codebertscore_f3-3": 0.822585940361023,
        "codebertscore_f1-0": 0.8086820244789124,
        "codebertscore_f3-0": 0.8007128834724426,
        "codebertscore_f1-8": 0.7678767442703247,
        "codebertscore_f3-8": 0.7947734594345093,
        "codebertscore_f1-7": 0.8035674691200256,
        "codebertscore_f3-7": 0.8255005478858948,
        "codebertscore_f1-16": 0.8532571196556091,
        "codebertscore_f3-16": 0.8536864519119263,
        "codebertscore_f1-2": 0.7267031669616699,
        "codebertscore_f3-2": 0.7859134674072266,
        "codebertscore_f1-11": 0.8363802433013916,
        "codebertscore_f3-11": 0.832379162311554,
        "codebertscore_f1-1": 0.7593530416488647,
        "codebertscore_f3-1": 0.7854169011116028,
        "codebertscore_f1-10": 0.8553417325019836,
        "codebertscore_f3-10": 0.850633978843689,
        "codebertscore_f1-17": 0.7962788343429565,
        "codebertscore_f3-17": 0.7992404103279114,
        "codebertscore_f1-12": 0.7482877373695374,
        "codebertscore_f3-12": 0.7370525002479553,
        "codebertscore_f1-6": 0.7912411689758301,
        "codebertscore_f3-6": 0.789081335067749,
        "codebertscore_f1-18": 0.7994143962860107,
        "codebertscore_f3-18": 0.8155094385147095,
        "codebertscore_f1-15": 0.810059130191803,
        "codebertscore_f3-15": 0.8243701457977295,
        "codebertscore_f1-13": 0.8351645469665527,
        "codebertscore_f3-13": 0.8199073076248169,
        "codebertscore_f1-9": 0.7788367867469788,
        "codebertscore_f3-9": 0.8022018074989319,
        "codebertscore_f1-4": 0.8780347108840942,
        "codebertscore_f3-4": 0.8715054988861084,
        "codebertscore_f1-14": 0.8473430275917053,
        "codebertscore_f3-14": 0.8524730801582336,
        "codebertscore_f1-5": 0.7952218651771545,
        "codebertscore_f3-5": 0.7988513112068176,
        "codebertscore_f1-19": 0.8192023038864136,
        "codebertscore_f3-19": 0.831051766872406,
        "codebertscore_s_f1-3": 0.8189685940742493,
        "codebertscore_s_f3-3": 0.8217341303825378,
        "codebertscore_s_f1-0": 0.8050112724304199,
        "codebertscore_s_f3-0": 0.7943562865257263,
        "codebertscore_s_f1-8": 0.7768460512161255,
        "codebertscore_s_f3-8": 0.8044736385345459,
        "codebertscore_s_f1-7": 0.8065252304077148,
        "codebertscore_s_f3-7": 0.8313705325126648,
        "codebertscore_s_f1-16": 0.8598014116287231,
        "codebertscore_s_f3-16": 0.8618469834327698,
        "codebertscore_s_f1-2": 0.7460681796073914,
        "codebertscore_s_f3-2": 0.8033931851387024,
        "codebertscore_s_f1-11": 0.8391305208206177,
        "codebertscore_s_f3-11": 0.8367244005203247,
        "codebertscore_s_f1-1": 0.7678791880607605,
        "codebertscore_s_f3-1": 0.7963509559631348,
        "codebertscore_s_f1-10": 0.8555200099945068,
        "codebertscore_s_f3-10": 0.8518600463867188,
        "codebertscore_s_f1-17": 0.7957289218902588,
        "codebertscore_s_f3-17": 0.7985097169876099,
        "codebertscore_s_f1-12": 0.7525564432144165,
        "codebertscore_s_f3-12": 0.7395111322402954,
        "codebertscore_s_f1-6": 0.7978717684745789,
        "codebertscore_s_f3-6": 0.7984716296195984,
        "codebertscore_s_f1-18": 0.8032853007316589,
        "codebertscore_s_f3-18": 0.8215189576148987,
        "codebertscore_s_f1-15": 0.8276976943016052,
        "codebertscore_s_f3-15": 0.8384130001068115,
        "codebertscore_s_f1-13": 0.8356133699417114,
        "codebertscore_s_f3-13": 0.8220282196998596,
        "codebertscore_s_f1-9": 0.7850976586341858,
        "codebertscore_s_f3-9": 0.8050852417945862,
        "codebertscore_s_f1-4": 0.8759638667106628,
        "codebertscore_s_f3-4": 0.8674875497817993,
        "codebertscore_s_f1-14": 0.850012481212616,
        "codebertscore_s_f3-14": 0.8583409190177917,
        "codebertscore_s_f1-5": 0.7988471388816833,
        "codebertscore_s_f3-5": 0.8017033934593201,
        "codebertscore_s_f1-19": 0.8261903524398804,
        "codebertscore_s_f3-19": 0.8385509848594666,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n",
        "snippet": [
            "  return xs.map((x, i) => x * i).slice(1);\n}\n\n"
        ],
        "simplified": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
        "task_id": "62",
        "3": "xs.shift(); //the first element is x^0 and will be 0, just remove it\n\treturn xs.map(function(e, i){ return (i+1) * e; });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var res = [];\n  for(var i = 1; i < xs.length; i++){\n    res.push(xs[i] * i);\n  }\n  return res;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var ys = [];\n  for (var i = 1; i < xs.length; i++){\n    ys.push(xs[i] * i);\n  }\n  return ys;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var i = 1;\n    var res = [];\n    for(i = 1; i < xs.length; i++){\n    \tres.push(xs[i] * i);\n    }\n    return res;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var result = [];\n  var i = 0;\n  var length = xs.length;\n  var coefficient;\n  for(; i < length; i++){\n    coefficient = i * xs[i];\n    if(coefficient !== 0){\n      result.push(coefficient);\n    }\n  }\n  return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//YOUR CODE HERE\n    let arr=[];\n    for(let i=1;i<xs.length;i++){\n      arr.push(xs[i]*i);\n    }\n    return arr;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let result = [];\n\tfor(let i = 1; i < xs.length; i++){\n\t\tresult.push(xs[i] * i);\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// ...\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var newArr = [];\n\tfor(var i = 0; i < xs.length - 1; i++){\n\t\tnewArr.push(xs[i+1] * (i+1));\n\t}\n\treturn newArr;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//[3, 1, 2, 4, 5]\n\tvar res = [];\n\n\tfor(var i = 1; i < xs.length; i++){\n\t\tres.push(xs[i] * i);\n\t}\n\n\treturn res;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var new_xs = [];\n\tvar n = 0;\n\tfor(var i = 1; i < xs.length; i++){\n\t\tnew_xs[n] = xs[i] * i;\n\t\tn++;\n\t}\n\treturn new_xs;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var list = [];\n\tfor(var i = 1; i < xs.length; i++){\n\t\tlist.push(xs[i] * i);\n\t}\n\treturn list;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return xs.map((v, i) => i * v).slice(1);\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "// todo\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var copy = xs.slice();\n  var deriv = [];\n  for (var i = 0; i < copy.length; i++){\n    deriv.push(copy[i] * i);\n  }\n  return deriv.slice(1);\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var i,\n    solution = [],\n    numberOfCoefficients = xs.length;\n  for(i = 1; i < numberOfCoefficients; i++){\n    solution.push(xs[i] * i);\n  }\n  return solution;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var ret = []\n    for(var i = 1; i < xs.length; i++){\n        ret.push(xs[i] * i)\n    }\n    return ret\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "//slide 8\n    const new_xs = [];\n    for (let i = 1; i < xs.length; i++){\n        new_xs.push(xs[i] * i);\n    }\n    return new_xs;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var dx = [0];\n    for (var i = 0; i < xs.length; i++){\n        dx.push(xs[i] * (i + 1));\n    }\n    return dx.slice(1);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result = [];\n\tfor(var i = 1; i < xs.length; i++){\n\t\tresult.push(xs[i] * i);\n\t}\n\treturn result;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.1383316851117757,
        "bleu-0": 0.07453191893400844,
        "bleu-8": 0.07453191893400844,
        "bleu-7": 0.06767364701766784,
        "bleu-16": 0.035419489582777144,
        "bleu-2": 0.06615191889627807,
        "bleu-11": 0.07453191893400844,
        "bleu-1": 0.006282878523720715,
        "bleu-10": 0.04782828717776111,
        "bleu-17": 0.0569785915131365,
        "bleu-12": 0.030038402582596286,
        "bleu-6": 0.07453191893400844,
        "bleu-18": 0.67331874553513,
        "bleu-15": 0.0013819852475186207,
        "bleu-13": 0.14762932988660696,
        "bleu-9": 0.06168026086725148,
        "bleu-4": 0.059697571322488596,
        "bleu-14": 0.06767364701766784,
        "bleu-5": 0.14317123154555061,
        "bleu-19": 0.07453191893400844,
        "codebleu-3": 0.5909565154198637,
        "codebleu-0": 0.4691358024691358,
        "codebleu-8": 0.4691358024691358,
        "codebleu-7": 0.4691358024691358,
        "codebleu-16": 0.5308641975308641,
        "codebleu-2": 0.4691358024691358,
        "codebleu-11": 0.4691358024691358,
        "codebleu-1": 0.056644749474859805,
        "codebleu-10": 0.5185185185185185,
        "codebleu-17": 0.4938271604938271,
        "codebleu-12": 0.4135802469135802,
        "codebleu-6": 0.4691358024691358,
        "codebleu-18": 0.9332074452435093,
        "codebleu-15": 0.07412747960001927,
        "codebleu-13": 0.5678147648576444,
        "codebleu-9": 0.4938271604938271,
        "codebleu-4": 0.4691358024691358,
        "codebleu-14": 0.4691358024691358,
        "codebleu-5": 0.5670717484674683,
        "codebleu-19": 0.4691358024691358,
        "chrf-3": 0.3263353252535982,
        "chrf-0": 0.21729156662282365,
        "chrf-8": 0.22054794531422106,
        "chrf-7": 0.21309657902371174,
        "chrf-16": 0.14913428192248018,
        "chrf-2": 0.20328567984166682,
        "chrf-11": 0.20423499274340348,
        "chrf-1": 0.017123287671232876,
        "chrf-10": 0.20025998019034325,
        "chrf-17": 0.20799686270003181,
        "chrf-12": 0.17028825551115145,
        "chrf-6": 0.2181753593137382,
        "chrf-18": 0.7262831452228986,
        "chrf-15": 0.011337868480725623,
        "chrf-13": 0.3196469393083783,
        "chrf-9": 0.18303775728835348,
        "chrf-4": 0.2079409104727822,
        "chrf-14": 0.21373098797664367,
        "chrf-5": 0.360443201344725,
        "chrf-19": 0.20807545466968894,
        "rougel-3": 0.39436619718309857,
        "rougel-0": 0.3125,
        "rougel-8": 0.3125,
        "rougel-7": 0.29411764705882354,
        "rougel-16": 0.3218390804597701,
        "rougel-2": 0.2898550724637681,
        "rougel-11": 0.3125,
        "rougel-1": 0.20689655172413793,
        "rougel-10": 0.29333333333333333,
        "rougel-17": 0.2597402597402597,
        "rougel-12": 0.2465753424657534,
        "rougel-6": 0.3125,
        "rougel-18": 0.8695652173913043,
        "rougel-15": 0.07407407407407408,
        "rougel-13": 0.41025641025641024,
        "rougel-9": 0.3287671232876712,
        "rougel-4": 0.2950819672131147,
        "rougel-14": 0.29411764705882354,
        "rougel-5": 0.37837837837837845,
        "rougel-19": 0.3125,
        "meteor-3": 0.6188725490196079,
        "meteor-0": 0.4290574596774193,
        "meteor-8": 0.4290574596774193,
        "meteor-7": 0.4222470238095238,
        "meteor-16": 0.38443578880233253,
        "meteor-2": 0.42057806324110664,
        "meteor-11": 0.4290574596774193,
        "meteor-1": 0.07042253521126761,
        "meteor-10": 0.40224748558081885,
        "meteor-17": 0.427620676397672,
        "meteor-12": 0.35261206916399973,
        "meteor-6": 0.4290574596774193,
        "meteor-18": 0.906881593216997,
        "meteor-15": 0.023696682464454975,
        "meteor-13": 0.6281217604372821,
        "meteor-9": 0.4342762511275968,
        "meteor-4": 0.3840082908163265,
        "meteor-14": 0.4222470238095238,
        "meteor-5": 0.6184908415469518,
        "meteor-19": 0.4290574596774193,
        "ruby-3": 0.27083333333333337,
        "ruby-0": 0.2195121951219512,
        "ruby-8": 0.2195121951219512,
        "ruby-7": 0.19999999999999996,
        "ruby-16": 0.203125,
        "ruby-2": 0.19565217391304346,
        "ruby-11": 0.2195121951219512,
        "ruby-1": 0.13043478260869568,
        "ruby-10": 0.1923076923076923,
        "ruby-17": 0.16666666666666663,
        "ruby-12": 0.16000000000000003,
        "ruby-6": 0.2195121951219512,
        "ruby-18": 0.8695652173913043,
        "ruby-15": 0.04347826086956519,
        "ruby-13": 0.2909090909090909,
        "ruby-9": 0.21999999999999997,
        "ruby-4": 0.21052631578947367,
        "ruby-14": 0.19999999999999996,
        "ruby-5": 0.2549019607843137,
        "ruby-19": 0.2195121951219512,
        "codebertscore_f1-3": 0.8024484515190125,
        "codebertscore_f3-3": 0.8583822846412659,
        "codebertscore_f1-0": 0.8136774301528931,
        "codebertscore_f3-0": 0.8282111287117004,
        "codebertscore_f1-8": 0.8210434913635254,
        "codebertscore_f3-8": 0.8257517218589783,
        "codebertscore_f1-7": 0.7998713254928589,
        "codebertscore_f3-7": 0.8174236416816711,
        "codebertscore_f1-16": 0.745557427406311,
        "codebertscore_f3-16": 0.7698500752449036,
        "codebertscore_f1-2": 0.7565763592720032,
        "codebertscore_f3-2": 0.7807636260986328,
        "codebertscore_f1-11": 0.8114611506462097,
        "codebertscore_f3-11": 0.8293871879577637,
        "codebertscore_f1-1": 0.6029255390167236,
        "codebertscore_f3-1": 0.5674929618835449,
        "codebertscore_f1-10": 0.7838551998138428,
        "codebertscore_f3-10": 0.8158649802207947,
        "codebertscore_f1-17": 0.7934973239898682,
        "codebertscore_f3-17": 0.8211038708686829,
        "codebertscore_f1-12": 0.7962007522583008,
        "codebertscore_f3-12": 0.8184249997138977,
        "codebertscore_f1-6": 0.8115431070327759,
        "codebertscore_f3-6": 0.8279510140419006,
        "codebertscore_f1-18": 0.961242139339447,
        "codebertscore_f3-18": 0.961242139339447,
        "codebertscore_f1-15": 0.606825053691864,
        "codebertscore_f3-15": 0.5832244157791138,
        "codebertscore_f1-13": 0.82133549451828,
        "codebertscore_f3-13": 0.8566874265670776,
        "codebertscore_f1-9": 0.7674396634101868,
        "codebertscore_f3-9": 0.8037565350532532,
        "codebertscore_f1-4": 0.810846745967865,
        "codebertscore_f3-4": 0.8263357281684875,
        "codebertscore_f1-14": 0.7849375009536743,
        "codebertscore_f3-14": 0.8162480592727661,
        "codebertscore_f1-5": 0.8235265016555786,
        "codebertscore_f3-5": 0.8549178838729858,
        "codebertscore_f1-19": 0.8123998045921326,
        "codebertscore_f3-19": 0.8290391564369202,
        "codebertscore_s_f1-3": 0.9260410070419312,
        "codebertscore_s_f3-3": 0.96018385887146,
        "codebertscore_s_f1-0": 0.9412441253662109,
        "codebertscore_s_f3-0": 0.9557653665542603,
        "codebertscore_s_f1-8": 0.9404182434082031,
        "codebertscore_s_f3-8": 0.9541516900062561,
        "codebertscore_s_f1-7": 0.9326639771461487,
        "codebertscore_s_f3-7": 0.9495877623558044,
        "codebertscore_s_f1-16": 0.8975356221199036,
        "codebertscore_s_f3-16": 0.9346137642860413,
        "codebertscore_s_f1-2": 0.9147893190383911,
        "codebertscore_s_f3-2": 0.937755823135376,
        "codebertscore_s_f1-11": 0.9404612183570862,
        "codebertscore_s_f3-11": 0.9556986689567566,
        "codebertscore_s_f1-1": 0.9515197277069092,
        "codebertscore_s_f3-1": 0.9224081039428711,
        "codebertscore_s_f1-10": 0.9100856184959412,
        "codebertscore_s_f3-10": 0.9454495310783386,
        "codebertscore_s_f1-17": 0.9248188734054565,
        "codebertscore_s_f3-17": 0.9427060484886169,
        "codebertscore_s_f1-12": 0.9230373501777649,
        "codebertscore_s_f3-12": 0.9485434889793396,
        "codebertscore_s_f1-6": 0.9400352239608765,
        "codebertscore_s_f3-6": 0.9553542733192444,
        "codebertscore_s_f1-18": 0.9898160696029663,
        "codebertscore_s_f3-18": 0.9898161292076111,
        "codebertscore_s_f1-15": 0.9419232606887817,
        "codebertscore_s_f3-15": 0.9212068319320679,
        "codebertscore_s_f1-13": 0.9335715174674988,
        "codebertscore_s_f3-13": 0.9588571190834045,
        "codebertscore_s_f1-9": 0.9064823985099792,
        "codebertscore_s_f3-9": 0.9420396685600281,
        "codebertscore_s_f1-4": 0.9386138916015625,
        "codebertscore_s_f3-4": 0.9532271027565002,
        "codebertscore_s_f1-14": 0.9222297072410583,
        "codebertscore_s_f3-14": 0.9474772214889526,
        "codebertscore_s_f1-5": 0.933862030506134,
        "codebertscore_s_f3-5": 0.9575966596603394,
        "codebertscore_s_f1-19": 0.9410578608512878,
        "codebertscore_s_f3-19": 0.955925464630127,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "0- The code snippet does not contain any implementation for the given problem.",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "0",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nfunction remove_vowels(text){\n",
        "snippet": [
            "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n"
        ],
        "simplified": "remove_vowels is a function that takes string and returns string without vowels.",
        "task_id": "51",
        "3": "var reg = /[aeiou]/gi;\n\treturn text.replace(reg, '');\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var vowels = \"aeiouAEIOU\";\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n\tvar answer = '';\n\tfor (var i = 0; i < text.length; i++) {\n\t\tif (vowels.indexOf(text[i]) == -1) {\n\t\t\tanswer += text[i];\n\t\t}\n\t}\n\treturn answer;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var vowels = \"aeiouAEIOU\";\n    var newText = \"\";\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            newText += text[i];\n        }\n    }\n    return newText;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var vowels = \"aeiouAEIOU\";\n\tvar result = \"\";\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(vowels.indexOf(text[i]) == -1){\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var result = '';\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (text.length == 0){\n    return '';\n  }\n  else if (text[0] == 'a' || text[0] == 'e' || text[0] == 'i' || text[0] == 'o' || text[0] == 'u' || text[0] == 'A' || text[0] == 'E' || text[0] == 'I' || text[0] == 'O' || text[0] == 'U'){\n    return remove_vowels(text.slice(1));\n  }\n  else{\n    return text[0] + remove_vowels(text.slice(1));\n  }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "text=text.replace(/[aeiou]/g,\"\");\n  return text;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return text.replace(/[aeiou]/gi, '');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    let output = \"\";\n    for (let x of text){\n        if (!vowels.has(x)){\n            output += x;\n        }\n    }\n    return output;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n\tvar text_array = text.split('');\n\tfor (var i = 0; i < text_array.length; i++) {\n\t\tif (vowels.indexOf(text_array[i]) != -1) {\n\t\t\ttext_array.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn text_array.join('');\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = '';\n    for (var i = 0; i < text.length; i++){\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U'){\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return text.replace(/[aeiou]/gi, '');\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "//if the text is empty\n\tif(text.length === 0){\n\t\treturn '';\n\t}\n\t//if the text is just one letter\n\tif(text.length === 1){\n\t\t//if the text is not a vowel then return it\n\t\tif(text !== 'a' && text !== 'e' && text !== 'i' && text !== 'o' && text !== 'u'){\n\t\t\treturn text;\n\t\t}\n\t\t//if the text is a vowel return ''\n\t\telse{\n\t\t\treturn '';\n\t\t}\n\t}\n\t//if the text has more than one letter\n\telse{\n\t\t//if the first letter is not a vowel, then return it + remove_vowels function on the next letter\n\t\tif(text[0] !== 'a' && text[0] !== 'e' && text[0] !== 'i' && text[0] !== 'o' && text[0] !== 'u'){\n\t\t\treturn text[0] + remove_vowels(text.slice(1));\n\t\t}\n\t\t//if the first letter is a vowel, then return remove_vowels function on the next letter\n\t\telse{\n\t\t\treturn remove_vowels(text.slice(1));\n\t\t}\n\t}\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var vowels = \"aeiouAEIOU\";\n    var text = text.split(\"\");\n    for(var i = 0; i < text.length; i++){\n        for(var j = 0; j < vowels.length; j++){\n            if(text[i] == vowels[j]){\n                text[i] = \"\";\n            }\n        }\n    }\n    text = text.join(\"\");\n    return text;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = '';\n    for (const char of text) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(text === ''){\n        return '';\n    }else{\n        return text.replace(/[aeiou]/ig, '');\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//Checking the string for vowels and removing them\n\tvar vowels = /[aeiou]/g;\n\tvar str = text.replace(vowels, '');\n\treturn str;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.03033819208315641,
        "bleu-0": 0.023624514401893917,
        "bleu-8": 0.2849738651494933,
        "bleu-7": 0.022542152587443205,
        "bleu-16": 0.023624514401893917,
        "bleu-2": 0.02117829874750655,
        "bleu-11": 0.2849738651494933,
        "bleu-1": 0.03939512069808294,
        "bleu-10": 0.023813214156588138,
        "bleu-17": 0.02117829874750655,
        "bleu-12": 0.0188415974970363,
        "bleu-6": 0.27111568229785704,
        "bleu-18": 0.3327865699220846,
        "bleu-15": 0.03793998189444206,
        "bleu-13": 0.0188415974970363,
        "bleu-9": 0.024465856198403885,
        "bleu-4": 0.1337706590989244,
        "bleu-14": 0.39697557657549987,
        "bleu-5": 0.06253806733722055,
        "bleu-19": 0.03834966877124918,
        "codebleu-3": 0.19573898742857807,
        "codebleu-0": 0.3096974898090538,
        "codebleu-8": 0.5458507897254448,
        "codebleu-7": 0.3096974898090538,
        "codebleu-16": 0.3096974898090538,
        "codebleu-2": 0.15732338217106487,
        "codebleu-11": 0.5458507897254448,
        "codebleu-1": 0.5490238146320531,
        "codebleu-10": 0.1861682865429589,
        "codebleu-17": 0.15732338217106487,
        "codebleu-12": 0.15643096579614998,
        "codebleu-6": 0.5801569833079564,
        "codebleu-18": 0.7143001574199683,
        "codebleu-15": 0.44486161767860966,
        "codebleu-13": 0.15643096579614998,
        "codebleu-9": 0.5940785239219052,
        "codebleu-4": 0.5177896389208354,
        "codebleu-14": 0.5589037818214404,
        "codebleu-5": 0.26294357777477956,
        "codebleu-19": 0.22187961349460647,
        "chrf-3": 0.1585569570700404,
        "chrf-0": 0.17475159050644343,
        "chrf-8": 0.16823700174856365,
        "chrf-7": 0.16350366675000058,
        "chrf-16": 0.17475159050644343,
        "chrf-2": 0.15097303917524837,
        "chrf-11": 0.16820284422544693,
        "chrf-1": 0.15686650017345907,
        "chrf-10": 0.17377879657373746,
        "chrf-17": 0.15097303917524837,
        "chrf-12": 0.15463807190773232,
        "chrf-6": 0.1562114626704175,
        "chrf-18": 0.2560299729200782,
        "chrf-15": 0.11321203616049058,
        "chrf-13": 0.15463807190773232,
        "chrf-9": 0.11535762738347763,
        "chrf-4": 0.3049989665914446,
        "chrf-14": 0.2179596693975626,
        "chrf-5": 0.176827209706984,
        "chrf-19": 0.16043884386609192,
        "rougel-3": 0.23376623376623376,
        "rougel-0": 0.21848739495798322,
        "rougel-8": 0.4264705882352941,
        "rougel-7": 0.2131147540983607,
        "rougel-16": 0.21848739495798322,
        "rougel-2": 0.273972602739726,
        "rougel-11": 0.4264705882352941,
        "rougel-1": 0.28837209302325584,
        "rougel-10": 0.23684210526315788,
        "rougel-17": 0.273972602739726,
        "rougel-12": 0.2777777777777778,
        "rougel-6": 0.4,
        "rougel-18": 0.4736842105263158,
        "rougel-15": 0.2439024390243902,
        "rougel-13": 0.2777777777777778,
        "rougel-9": 0.20858895705521474,
        "rougel-4": 0.2953020134228188,
        "rougel-14": 0.48275862068965514,
        "rougel-5": 0.26666666666666666,
        "rougel-19": 0.1956521739130435,
        "meteor-3": 0.18314796905222436,
        "meteor-0": 0.19539244495760635,
        "meteor-8": 0.566312358276644,
        "meteor-7": 0.19434942478879355,
        "meteor-16": 0.19539244495760635,
        "meteor-2": 0.1731831875372545,
        "meteor-11": 0.566312358276644,
        "meteor-1": 0.3123797339874394,
        "meteor-10": 0.18350290697674418,
        "meteor-17": 0.1731831875372545,
        "meteor-12": 0.17352143595041322,
        "meteor-6": 0.6335385068806819,
        "meteor-18": 0.643643020566968,
        "meteor-15": 0.2628237704587437,
        "meteor-13": 0.17352143595041322,
        "meteor-9": 0.3114805539274022,
        "meteor-4": 0.4042019048493981,
        "meteor-14": 0.6240632494004795,
        "meteor-5": 0.24135220125786166,
        "meteor-19": 0.160296574770259,
        "ruby-3": 0.12727272727272732,
        "ruby-0": 0.09375,
        "ruby-8": 0.2098765432098766,
        "ruby-7": 0.08955223880597019,
        "ruby-16": 0.09375,
        "ruby-2": 0.18181818181818177,
        "ruby-11": 0.2098765432098766,
        "ruby-1": 0.17500000000000004,
        "ruby-10": 0.1636363636363637,
        "ruby-17": 0.18181818181818177,
        "ruby-12": 0.18181818181818177,
        "ruby-6": 0.2823529411764706,
        "ruby-18": 0.24742268041237114,
        "ruby-15": 0.16666666666666663,
        "ruby-13": 0.18181818181818177,
        "ruby-9": 0.11808118081180807,
        "ruby-4": 0.2021276595744681,
        "ruby-14": 0.2622950819672131,
        "ruby-5": 0.18181818181818177,
        "ruby-19": 0.12727272727272732,
        "codebertscore_f1-3": 0.7030453085899353,
        "codebertscore_f3-3": 0.6914304494857788,
        "codebertscore_f1-0": 0.6981646418571472,
        "codebertscore_f3-0": 0.7000168561935425,
        "codebertscore_f1-8": 0.7593974471092224,
        "codebertscore_f3-8": 0.7787612676620483,
        "codebertscore_f1-7": 0.7000710368156433,
        "codebertscore_f3-7": 0.7006186842918396,
        "codebertscore_f1-16": 0.6988623738288879,
        "codebertscore_f3-16": 0.7008364796638489,
        "codebertscore_f1-2": 0.7056926488876343,
        "codebertscore_f3-2": 0.6949276328086853,
        "codebertscore_f1-11": 0.7587029337882996,
        "codebertscore_f3-11": 0.7795308828353882,
        "codebertscore_f1-1": 0.7139058709144592,
        "codebertscore_f3-1": 0.7309597134590149,
        "codebertscore_f1-10": 0.7035652995109558,
        "codebertscore_f3-10": 0.6900725364685059,
        "codebertscore_f1-17": 0.7056926488876343,
        "codebertscore_f3-17": 0.6949276328086853,
        "codebertscore_f1-12": 0.7032384872436523,
        "codebertscore_f3-12": 0.6902379989624023,
        "codebertscore_f1-6": 0.7453112602233887,
        "codebertscore_f3-6": 0.7560262680053711,
        "codebertscore_f1-18": 0.772042453289032,
        "codebertscore_f3-18": 0.8145462274551392,
        "codebertscore_f1-15": 0.7296020984649658,
        "codebertscore_f3-15": 0.7354112267494202,
        "codebertscore_f1-13": 0.7032384872436523,
        "codebertscore_f3-13": 0.6902379989624023,
        "codebertscore_f1-9": 0.6461589932441711,
        "codebertscore_f3-9": 0.706386148929596,
        "codebertscore_f1-4": 0.7129916548728943,
        "codebertscore_f3-4": 0.718099057674408,
        "codebertscore_f1-14": 0.7775636315345764,
        "codebertscore_f3-14": 0.7963330149650574,
        "codebertscore_f1-5": 0.707268238067627,
        "codebertscore_f3-5": 0.698141872882843,
        "codebertscore_f1-19": 0.6901597380638123,
        "codebertscore_f3-19": 0.700539767742157,
        "codebertscore_s_f1-3": 0.6920095682144165,
        "codebertscore_s_f3-3": 0.6806828379631042,
        "codebertscore_s_f1-0": 0.6997030973434448,
        "codebertscore_s_f3-0": 0.7002496123313904,
        "codebertscore_s_f1-8": 0.7635412216186523,
        "codebertscore_s_f3-8": 0.7822095155715942,
        "codebertscore_s_f1-7": 0.7013629078865051,
        "codebertscore_s_f3-7": 0.6993345022201538,
        "codebertscore_s_f1-16": 0.7021482586860657,
        "codebertscore_s_f3-16": 0.7021603584289551,
        "codebertscore_s_f1-2": 0.6952776908874512,
        "codebertscore_s_f3-2": 0.6875611543655396,
        "codebertscore_s_f1-11": 0.7598955035209656,
        "codebertscore_s_f3-11": 0.78022301197052,
        "codebertscore_s_f1-1": 0.7239826321601868,
        "codebertscore_s_f3-1": 0.7385401725769043,
        "codebertscore_s_f1-10": 0.7112942934036255,
        "codebertscore_s_f3-10": 0.6897158622741699,
        "codebertscore_s_f1-17": 0.6952776908874512,
        "codebertscore_s_f3-17": 0.6875611543655396,
        "codebertscore_s_f1-12": 0.6978152990341187,
        "codebertscore_s_f3-12": 0.6840465664863586,
        "codebertscore_s_f1-6": 0.7491551041603088,
        "codebertscore_s_f3-6": 0.7564069628715515,
        "codebertscore_s_f1-18": 0.778518795967102,
        "codebertscore_s_f3-18": 0.8210150599479675,
        "codebertscore_s_f1-15": 0.7366166114807129,
        "codebertscore_s_f3-15": 0.7384424209594727,
        "codebertscore_s_f1-13": 0.6978152990341187,
        "codebertscore_s_f3-13": 0.6840465664863586,
        "codebertscore_s_f1-9": 0.6666783094406128,
        "codebertscore_s_f3-9": 0.7215360999107361,
        "codebertscore_s_f1-4": 0.7230350375175476,
        "codebertscore_s_f3-4": 0.7272990345954895,
        "codebertscore_s_f1-14": 0.78411865234375,
        "codebertscore_s_f3-14": 0.802188515663147,
        "codebertscore_s_f1-5": 0.7146270275115967,
        "codebertscore_s_f3-5": 0.7071845531463623,
        "codebertscore_s_f1-19": 0.6858574748039246,
        "codebertscore_s_f3-19": 0.6977072358131409,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n",
        "snippet": [
            "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
        "task_id": "101",
        "0": "return s.split(/[ ,]+/);\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return s.split(/[\\s,]+/);\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "return s.replace(/\\s/g,',').split(',')\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var words = s.split(/[\\s,]+/);\n  return words;\n}",
        "grade-3": {
            "execution": 0
        },
        "6": "// convert string to an array with the split method\n    var arr = s.split(\" \");\n    return arr;\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "return s.split(/[ ,]+/);\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "var result = [];\n    if (s) {\n        var ret = s.split(',');\n        ret.forEach(function (i) {\n            if (i) {\n                result.push(i.trim());\n            }\n        });\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "return s.split(' ').filter(a => a);\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "return s.split(/,| /)\n    // return s.split(/[\\s,]+/)\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "return s.split(/[\\s,]+/g);\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return s.split(/[\\s,]+/);\n}",
        "grade-12": {
            "execution": 0
        },
        "15": "return s.split(/,| /)\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "return s.split(/[\\s,]+/);\n}",
        "grade-16": {
            "execution": 0
        },
        "19": "return s.split(/[ ,]+/g);\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.00011093386523574578,
        "bleu-1": 0.0002750470282416715,
        "bleu-2": 0.0028583313099528164,
        "bleu-3": 0.0009063379133818692,
        "bleu-6": 0.0030731823030510606,
        "bleu-7": 0.00011093386523574578,
        "bleu-8": 0.08501416227653827,
        "bleu-9": 0.0007451659346631475,
        "bleu-10": 0.0017281129157597083,
        "bleu-11": 0.0003939983361897029,
        "bleu-12": 0.0002750470282416715,
        "bleu-15": 7.581942181506971e-06,
        "bleu-16": 0.0002750470282416715,
        "bleu-19": 0.00017835508724964338,
        "codebleu-0": 0.04472768391502653,
        "codebleu-1": 0.0488172583598538,
        "codebleu-2": 0.07810881690069728,
        "codebleu-3": 0.07340318071988945,
        "codebleu-6": 0.10218639921934575,
        "codebleu-7": 0.04472768391502653,
        "codebleu-8": 0.3006087316129233,
        "codebleu-9": 0.08138824642605816,
        "codebleu-10": 0.06998712022378002,
        "codebleu-11": 0.05290185511634926,
        "codebleu-12": 0.0488172583598538,
        "codebleu-15": 0.03658638764854193,
        "codebleu-16": 0.0488172583598538,
        "codebleu-19": 0.05286678841618706,
        "chrf-0": 0.054657254031174184,
        "chrf-1": 0.0558285644956572,
        "chrf-2": 0.07193566068939218,
        "chrf-3": 0.06372001703019986,
        "chrf-6": 0.08452074362956408,
        "chrf-7": 0.054657254031174184,
        "chrf-8": 0.2069099152508502,
        "chrf-9": 0.06994008899537,
        "chrf-10": 0.06972612162204121,
        "chrf-11": 0.057085669775732255,
        "chrf-12": 0.0558285644956572,
        "chrf-15": 0.04671348938100452,
        "chrf-16": 0.0558285644956572,
        "chrf-19": 0.05592028731690721,
        "rougel-0": 0.13846153846153847,
        "rougel-1": 0.15151515151515152,
        "rougel-2": 0.2014388489208633,
        "rougel-3": 0.17518248175182483,
        "rougel-6": 0.14084507042253522,
        "rougel-7": 0.13846153846153847,
        "rougel-8": 0.3448275862068966,
        "rougel-9": 0.17910447761194032,
        "rougel-10": 0.15384615384615385,
        "rougel-11": 0.15037593984962408,
        "rougel-12": 0.15151515151515152,
        "rougel-15": 0.09448818897637795,
        "rougel-16": 0.15151515151515152,
        "rougel-19": 0.13740458015267176,
        "meteor-0": 0.06491274664500303,
        "meteor-1": 0.0696082285115304,
        "meteor-2": 0.07029053420805999,
        "meteor-3": 0.06572769953051644,
        "meteor-6": 0.06418475322468525,
        "meteor-7": 0.06491274664500303,
        "meteor-8": 0.22564158329708564,
        "meteor-9": 0.09455197851547265,
        "meteor-10": 0.07469654528478056,
        "meteor-11": 0.06954262226411143,
        "meteor-12": 0.0696082285115304,
        "meteor-15": 0.03791469194312796,
        "meteor-16": 0.0696082285115304,
        "meteor-19": 0.06485145037810502,
        "ruby-0": 0.07758620689655171,
        "ruby-1": 0.08620689655172409,
        "ruby-2": 0.12068965517241381,
        "ruby-3": 0.09482758620689657,
        "ruby-6": 0.08620689655172409,
        "ruby-7": 0.07758620689655171,
        "ruby-8": 0.2068965517241379,
        "ruby-9": 0.10344827586206895,
        "ruby-10": 0.09482758620689657,
        "ruby-11": 0.08620689655172409,
        "ruby-12": 0.08620689655172409,
        "ruby-15": 0.051724137931034475,
        "ruby-16": 0.08620689655172409,
        "ruby-19": 0.07758620689655171,
        "codebertscore_f1-0": 0.6235710978507996,
        "codebertscore_f3-0": 0.6100950837135315,
        "codebertscore_f1-1": 0.6237516403198242,
        "codebertscore_f3-1": 0.6118729114532471,
        "codebertscore_f1-2": 0.618544340133667,
        "codebertscore_f3-2": 0.6129373908042908,
        "codebertscore_f1-3": 0.6631943583488464,
        "codebertscore_f3-3": 0.6447697877883911,
        "codebertscore_f1-6": 0.6622943878173828,
        "codebertscore_f3-6": 0.6544597148895264,
        "codebertscore_f1-7": 0.6235710978507996,
        "codebertscore_f3-7": 0.6100950837135315,
        "codebertscore_f1-8": 0.7643656730651855,
        "codebertscore_f3-8": 0.7516591548919678,
        "codebertscore_f1-9": 0.6426089406013489,
        "codebertscore_f3-9": 0.6176460385322571,
        "codebertscore_f1-10": 0.6441294550895691,
        "codebertscore_f3-10": 0.6399509310722351,
        "codebertscore_f1-11": 0.6213663816452026,
        "codebertscore_f3-11": 0.6118600964546204,
        "codebertscore_f1-12": 0.6237516403198242,
        "codebertscore_f3-12": 0.6118729114532471,
        "codebertscore_f1-15": 0.6207370758056641,
        "codebertscore_f3-15": 0.6077045798301697,
        "codebertscore_f1-16": 0.6237516403198242,
        "codebertscore_f3-16": 0.6118729114532471,
        "codebertscore_f1-19": 0.6206488609313965,
        "codebertscore_f3-19": 0.6094082593917847,
        "codebertscore_s_f1-0": 0.6226199865341187,
        "codebertscore_s_f3-0": 0.6069050431251526,
        "codebertscore_s_f1-1": 0.6270930171012878,
        "codebertscore_s_f3-1": 0.6103178858757019,
        "codebertscore_s_f1-2": 0.6226130127906799,
        "codebertscore_s_f3-2": 0.611846387386322,
        "codebertscore_s_f1-3": 0.6592365503311157,
        "codebertscore_s_f3-3": 0.6406951546669006,
        "codebertscore_s_f1-6": 0.6616989970207214,
        "codebertscore_s_f3-6": 0.6546981930732727,
        "codebertscore_s_f1-7": 0.6226199865341187,
        "codebertscore_s_f3-7": 0.6069050431251526,
        "codebertscore_s_f1-8": 0.771090030670166,
        "codebertscore_s_f3-8": 0.7603695392608643,
        "codebertscore_s_f1-9": 0.6424151062965393,
        "codebertscore_s_f3-9": 0.6165934801101685,
        "codebertscore_s_f1-10": 0.6459078788757324,
        "codebertscore_s_f3-10": 0.640964686870575,
        "codebertscore_s_f1-11": 0.6200835704803467,
        "codebertscore_s_f3-11": 0.6081156134605408,
        "codebertscore_s_f1-12": 0.6270930171012878,
        "codebertscore_s_f3-12": 0.6103178858757019,
        "codebertscore_s_f1-15": 0.6245701313018799,
        "codebertscore_s_f3-15": 0.6087624430656433,
        "codebertscore_s_f1-16": 0.6270930171012878,
        "codebertscore_s_f3-16": 0.6103178858757019,
        "codebertscore_s_f1-19": 0.6158991456031799,
        "codebertscore_s_f3-19": 0.6055866479873657,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13, 12) = -1\nfunction choose_num(x, y){\n",
        "snippet": [
            "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n"
        ],
        "simplified": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "task_id": "102",
        "3": "if(x%2==0 && y%2==0){\n\t\tif(x<y){\n\t\t\treturn y;\n\t\t}\n\t\treturn x;\n\t}\n\tif(x%2==0 && y%2!=0){\n\t\treturn x;\n\t}\n\tif(x%2!=0 && y%2==0){\n\t\treturn y;\n\t}\n\treturn -1;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(x % 2 == 0){\n\t\treturn x;\n\t}\n\telse if(y % 2 == 0){\n\t\treturn y;\n\t}\n\telse if(x > y){\n\t\treturn -1;\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "// Your answer here\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(x % 2 == 0 && y % 2 == 0){\n\t\treturn y;\n\t}\n\telse if(x % 2 == 0 && y % 2 != 0){\n\t\treturn x;\n\t}\n\telse if(x % 2 != 0 && y % 2 == 0){\n\t\treturn y;\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = 0;\n\tvar num = 0;\n\t\n\tif(x<=y){\n\t\tfor(var i=x; i<=y; i++){\n\t\t\tif(i%2 == 0){\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tresult = -1;\n\t}\n\tconsole.log(result);\n}\n\nchoose_num(10, 20);\nchoose_num(20, 10);\nchoose_num(10, 21);\nchoose_num(5, 10);",
        "grade-16": {
            "execution": 0
        },
        "2": "if(x % 2 === 0)\n        return x;\n    if(y % 2 === 0)\n        return y;\n    return -1;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var num = -1;\n\tvar num2 = Math.max(x, y);\n\t\n\tfor(var i = x; i <= num2; i++){\n\t\tif(i % 2 == 0 && i > num){\n\t\t\tnum = i;\n\t\t}\n\t}\n\t\n\treturn num;\n\t\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(x % 2 == 0) return x;\n    if(y % 2 == 0) return y;\n    else return -1;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(x>y){\n\t\treturn -1;\n\t}\n\tif(x%2==0){\n\t\treturn x;\n\t}\n\telse{\n\t\treturn x+1;\n\t}\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(x > y){\n        return -1;\n    }\n    if(x%2 === 0){\n        return x;\n    }\n    return choose_num(x+1, y);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var x = prompt(\"Enter a number\");\n    var y = prompt(\"Enter another number\");\n    var a = x;\n    var b = y;\n    if(x>y){\n        while(a>=b){\n            if(a%2 == 0){\n                return a;\n            }\n            a--;\n        }\n    }\n    else if(y>x){\n        while(b>=a){\n            if(b%2 == 0){\n                return b;\n            }\n            b--;\n        }\n    }\n    else{\n        return \"This is not a valid range\";\n    }\n}\nalert(choose_num());",
        "grade-12": {
            "execution": 0
        },
        "6": "for(var i = y; i >= x; i--){\n        if(i % 2 == 0){\n            return i;\n        }\n    }\n    return -1;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    else{\n        x++;\n        return choose_num(x, y);\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = -1;\n\n\t//your code here\n    for (var i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result = i;\n        }\n    }\n\treturn result;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(x % 2 === 0){\n        for(let i = x; i <= y; i++){\n            if(i % 2 === 0 && i < y){\n                x = i;\n            }\n        }\n        return x;\n    }\n    else if(y % 2 === 0){\n        for(let i = y; i >= x; i--){\n            if(i % 2 === 0 && i > x){\n                y = i;\n            }\n        }\n        return y;\n    }\n    else{\n        return -1;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let evens = [];\n  for (let i = x; i <= y; i++){\n    if (i % 2 === 0){\n      evens.push(i);\n    }\n  }\n  if (evens.length === 0){\n    return -1;\n  }\n  else {\n    return Math.max(...evens);\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "for(var i = y; i >= x; i--){\n    if(i % 2 === 0){\n      return i;\n    }\n  }\n  return -1;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var array = [];\n    for(var i = x; i <= y; i++){\n        if(i % 2 == 0){\n            array.push(i);\n        }\n    }\n    return array[array.length - 1] || -1;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "// Your code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var n = Math.max(x, y);\n    for(i = n; i >= Math.min(x, y); i--){\n        if(i % 2 == 0){\n            return i;\n        }\n    }\n    return -1;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.15813512257504203,
        "bleu-0": 0.2211890717892911,
        "bleu-8": 0.00064608459416459,
        "bleu-7": 0.14122990380130046,
        "bleu-16": 0.1851966358129271,
        "bleu-2": 0.20183992752642474,
        "bleu-11": 0.2613015961448742,
        "bleu-1": 0.22268192284966604,
        "bleu-10": 0.30531837319331667,
        "bleu-17": 0.26771418405951886,
        "bleu-12": 0.10347588400210338,
        "bleu-6": 0.8118264363431513,
        "bleu-18": 0.25250281445230244,
        "bleu-15": 0.39077755361023947,
        "bleu-13": 0.2480668311471428,
        "bleu-9": 0.2908441807595872,
        "bleu-4": 0.7815465097768647,
        "bleu-14": 0.3300747072108217,
        "bleu-5": 0.00064608459416459,
        "bleu-19": 0.4494973136396894,
        "codebleu-3": 0.5472708864422455,
        "codebleu-0": 0.524315825690372,
        "codebleu-8": 0.0533593462217278,
        "codebleu-7": 0.5177866833132886,
        "codebleu-16": 0.6317811386485597,
        "codebleu-2": 0.40842824019601326,
        "codebleu-11": 0.6240731418411392,
        "codebleu-1": 0.4217342319827556,
        "codebleu-10": 0.5152001210224155,
        "codebleu-17": 0.5122007300229917,
        "codebleu-12": 0.6246969610591739,
        "codebleu-6": 0.8453697655343159,
        "codebleu-18": 0.5197308612322464,
        "codebleu-15": 0.7090511608958241,
        "codebleu-13": 0.6746778051911902,
        "codebleu-9": 0.6586701085579704,
        "codebleu-4": 0.7869897777732682,
        "codebleu-14": 0.7155353270187971,
        "codebleu-5": 0.0533593462217278,
        "codebleu-19": 0.7716482450837391,
        "chrf-3": 0.3755186081832841,
        "chrf-0": 0.39019418957330243,
        "chrf-8": 0.046264858432605124,
        "chrf-7": 0.35088386756073897,
        "chrf-16": 0.2919664695121659,
        "chrf-2": 0.3318685158328008,
        "chrf-11": 0.3715497300947572,
        "chrf-1": 0.3469646327027059,
        "chrf-10": 0.4165832505914636,
        "chrf-17": 0.40140582998298835,
        "chrf-12": 0.2737938466128395,
        "chrf-6": 0.8079380225172114,
        "chrf-18": 0.39420407608214864,
        "chrf-15": 0.4607307421282011,
        "chrf-13": 0.6005222663220681,
        "chrf-9": 0.5016507165775363,
        "chrf-4": 0.7829667834558057,
        "chrf-14": 0.4161233217266401,
        "chrf-5": 0.038945227838278966,
        "chrf-19": 0.6221061399893983,
        "rougel-3": 0.3931623931623932,
        "rougel-0": 0.49411764705882355,
        "rougel-8": 0.048780487804878044,
        "rougel-7": 0.3963963963963964,
        "rougel-16": 0.4122137404580153,
        "rougel-2": 0.5454545454545455,
        "rougel-11": 0.5473684210526316,
        "rougel-1": 0.5538461538461538,
        "rougel-10": 0.5142857142857142,
        "rougel-17": 0.4931506849315068,
        "rougel-12": 0.31055900621118016,
        "rougel-6": 0.9444444444444445,
        "rougel-18": 0.4415584415584416,
        "rougel-15": 0.6265060240963857,
        "rougel-13": 0.4473684210526316,
        "rougel-9": 0.5321100917431193,
        "rougel-4": 0.9315068493150684,
        "rougel-14": 0.6086956521739131,
        "rougel-5": 0.048780487804878044,
        "rougel-19": 0.7333333333333334,
        "meteor-3": 0.5949017632241813,
        "meteor-0": 0.6053082191780822,
        "meteor-8": 0.015576323987538939,
        "meteor-7": 0.5555805626598466,
        "meteor-16": 0.45135121842552167,
        "meteor-2": 0.5349442281729648,
        "meteor-11": 0.6789316684009712,
        "meteor-1": 0.551907719609583,
        "meteor-10": 0.5575085714285715,
        "meteor-17": 0.5424971084700874,
        "meteor-12": 0.44664047603495,
        "meteor-6": 0.9596178043409878,
        "meteor-18": 0.5304621848739496,
        "meteor-15": 0.7512549739822468,
        "meteor-13": 0.6441232048374906,
        "meteor-9": 0.6264937138496144,
        "meteor-4": 0.9362532715135713,
        "meteor-14": 0.703805959294194,
        "meteor-5": 0.015576323987538939,
        "meteor-19": 0.9033596745534461,
        "ruby-3": 0.2804878048780488,
        "ruby-0": 0.33999999999999997,
        "ruby-8": 0.02857142857142858,
        "ruby-7": 0.2894736842105263,
        "ruby-16": 0.28125,
        "ruby-2": 0.4,
        "ruby-11": 0.43333333333333335,
        "ruby-1": 0.4285714285714286,
        "ruby-10": 0.34285714285714286,
        "ruby-17": 0.3157894736842105,
        "ruby-12": 0.19841269841269837,
        "ruby-6": 0.9189189189189189,
        "ruby-18": 0.26190476190476186,
        "ruby-15": 0.5416666666666667,
        "ruby-13": 0.29059829059829057,
        "ruby-9": 0.3918918918918919,
        "ruby-4": 0.8947368421052632,
        "ruby-14": 0.49122807017543857,
        "ruby-5": 0.02857142857142858,
        "ruby-19": 0.5818181818181818,
        "codebertscore_f1-3": 0.8131754398345947,
        "codebertscore_f3-3": 0.8027528524398804,
        "codebertscore_f1-0": 0.8253709673881531,
        "codebertscore_f3-0": 0.8099998831748962,
        "codebertscore_f1-8": 0.6445958614349365,
        "codebertscore_f3-8": 0.6438485383987427,
        "codebertscore_f1-7": 0.8052276968955994,
        "codebertscore_f3-7": 0.7998810410499573,
        "codebertscore_f1-16": 0.7922587990760803,
        "codebertscore_f3-16": 0.8534857630729675,
        "codebertscore_f1-2": 0.8673999309539795,
        "codebertscore_f3-2": 0.8388186693191528,
        "codebertscore_f1-11": 0.8623541593551636,
        "codebertscore_f3-11": 0.8939431309700012,
        "codebertscore_f1-1": 0.8578729629516602,
        "codebertscore_f3-1": 0.8377048373222351,
        "codebertscore_f1-10": 0.8356521129608154,
        "codebertscore_f3-10": 0.8290627002716064,
        "codebertscore_f1-17": 0.8297217488288879,
        "codebertscore_f3-17": 0.8270969390869141,
        "codebertscore_f1-12": 0.6937845349311829,
        "codebertscore_f3-12": 0.7267995476722717,
        "codebertscore_f1-6": 0.9703572392463684,
        "codebertscore_f3-6": 0.9703572392463684,
        "codebertscore_f1-18": 0.8298301696777344,
        "codebertscore_f3-18": 0.8330352902412415,
        "codebertscore_f1-15": 0.8694672584533691,
        "codebertscore_f3-15": 0.9031816720962524,
        "codebertscore_f1-13": 0.828857958316803,
        "codebertscore_f3-13": 0.8545852303504944,
        "codebertscore_f1-9": 0.8546693325042725,
        "codebertscore_f3-9": 0.9083982110023499,
        "codebertscore_f1-4": 0.9755759835243225,
        "codebertscore_f3-4": 0.9755759239196777,
        "codebertscore_f1-14": 0.860312819480896,
        "codebertscore_f3-14": 0.8981860876083374,
        "codebertscore_f1-5": 0.6091691255569458,
        "codebertscore_f3-5": 0.6023301482200623,
        "codebertscore_f1-19": 0.8924259543418884,
        "codebertscore_f3-19": 0.9178428053855896,
        "codebertscore_s_f1-3": 0.8081753849983215,
        "codebertscore_s_f3-3": 0.8073610663414001,
        "codebertscore_s_f1-0": 0.8287469744682312,
        "codebertscore_s_f3-0": 0.8188118934631348,
        "codebertscore_s_f1-8": 0.6280072927474976,
        "codebertscore_s_f3-8": 0.630777895450592,
        "codebertscore_s_f1-7": 0.8072064518928528,
        "codebertscore_s_f3-7": 0.8085941076278687,
        "codebertscore_s_f1-16": 0.7844698429107666,
        "codebertscore_s_f3-16": 0.8544373512268066,
        "codebertscore_s_f1-2": 0.8709008097648621,
        "codebertscore_s_f3-2": 0.8414196372032166,
        "codebertscore_s_f1-11": 0.8634706735610962,
        "codebertscore_s_f3-11": 0.8967257738113403,
        "codebertscore_s_f1-1": 0.8582508563995361,
        "codebertscore_s_f3-1": 0.8389714956283569,
        "codebertscore_s_f1-10": 0.8410183191299438,
        "codebertscore_s_f3-10": 0.8318896889686584,
        "codebertscore_s_f1-17": 0.8326459527015686,
        "codebertscore_s_f3-17": 0.8283371329307556,
        "codebertscore_s_f1-12": 0.7142762541770935,
        "codebertscore_s_f3-12": 0.7508058547973633,
        "codebertscore_s_f1-6": 0.9695367813110352,
        "codebertscore_s_f3-6": 0.9695367813110352,
        "codebertscore_s_f1-18": 0.8252044320106506,
        "codebertscore_s_f3-18": 0.8302885890007019,
        "codebertscore_s_f1-15": 0.8676994442939758,
        "codebertscore_s_f3-15": 0.903779923915863,
        "codebertscore_s_f1-13": 0.837100625038147,
        "codebertscore_s_f3-13": 0.8697363138198853,
        "codebertscore_s_f1-9": 0.8557623624801636,
        "codebertscore_s_f3-9": 0.9141261577606201,
        "codebertscore_s_f1-4": 0.9746007919311523,
        "codebertscore_s_f3-4": 0.9746008515357971,
        "codebertscore_s_f1-14": 0.8665647506713867,
        "codebertscore_s_f3-14": 0.9054781794548035,
        "codebertscore_s_f1-5": 0.5935218930244446,
        "codebertscore_s_f3-5": 0.5923601388931274,
        "codebertscore_s_f1-19": 0.8969687819480896,
        "codebertscore_s_f3-19": 0.9232222437858582,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0-4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0- The code snippet does not contain any implementation for the given problem.",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 0,
        "raw_gpt35_nswr-1": "Score: 2",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n",
        "snippet": [
            "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n"
        ],
        "simplified": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "task_id": "39",
        "3": "}",
        "grade-3": {
            "execution": 0
        },
        "0": "return 0;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var counter = 0;\n\tvar fibonacci = fib(0);\n\tvar i = 0;\n\twhile(counter < n){\n\t\tif(prime(fibonacci)){\n\t\t\tcounter++;\n\t\t}\n\t\ti++;\n\t\tfibonacci = fib(i);\n\t}\n\treturn fibonacci;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return FibonacciRecursive(n);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var prime_fib_num = 0;\n\tvar fib_num = 0;\n\tvar count = 0;\n\tvar prime_count = 0;\n\tvar fib_arr = [0,1];\n\twhile(count <= n){\n\t\tfib_num = fib_arr[count-1] + fib_arr[count];\n\t\tfib_arr.push(fib_num);\n\t\tcount++;\n\t\tif(is_prime(fib_num)){\n\t\t\tprime_count++;\n\t\t\tprime_fib_num = fib_num;\n\t\t}\n\t}\n\treturn prime_fib_num;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count = 2;\n    var nth_fib = 1;\n    var fib_1 = 1;\n    var fib_2 = 1;\n    while(count<=n){\n        nth_fib = fib_1 + fib_2;\n        fib_2 = fib_1;\n        fib_1 = nth_fib;\n        if(is_prime(nth_fib)){\n            count += 1;\n        }\n    }\n    return nth_fib;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var prim = 2;\n\tvar fib1 = 1;\n\tvar fib2 = 2;\n\tfor(var i = 0; i<n; i++){\n\t\tvar fib = fib1 + fib2;\n\t\tfib1 = fib2;\n\t\tfib2 = fib;\n\t\tfor(var j = 2; j< fib; j++){\n\t\t\tif(fib%j == 0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(j == fib-1){\n\t\t\t\tprim = fib;\n\t\t\t}\n\t\t}\n\t}\n\treturn prim;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var array = [];\n\tarray.push(2);\n\tarray.push(3);\n\tvar i = 2;\n\tvar j = 0;\n\twhile(i<n){\n\t\tarray.push(array[j]+array[j+1]);\n\t\tif(isPrime(array[j+2])){\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\treturn array[array.length-1];\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(n==1){\n    return 2;\n  }\n  if(n==2){\n    return 3;\n  }\n  let fibn1=2;\n  let fibn2=3;\n  let fibn=5;\n  let fib=5;\n  let num=3;\n  while(num<n){\n    if(is_prime(fibn)){\n      num++;\n      fib=fibn;\n    }\n    fibn=fibn1+fibn2;\n    fibn1=fibn2;\n    fibn2=fibn;\n  }\n  return fib;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(n == 1){\n\t\treturn 2;\n\t}else if(n == 2){\n\t\treturn 3;\n\t}else{\n\t\tvar fN = 2;\n\t\tvar fNm1 = 1;\n\t\tvar fNm2 = 0;\n\t\tvar count = 2;\n\t\twhile(count < n){\n\t\t\tfN = fNm1 + fNm2;\n\t\t\tif(isPrime(fN)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tfNm2 = fNm1;\n\t\t\tfNm1 = fN;\n\t\t}\n\t\treturn fN;\n\t}\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let prime_fib_list = [];\n    let fib_list = fibonacci_num(100);\n    for(let i = 0; i < fib_list.length; i++){\n        if(is_prime(fib_list[i])){\n            prime_fib_list.push(fib_list[i]);\n        }\n    }\n    return prime_fib_list[n - 1];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var a = 2, b = 3, i = 0;\n  while(i < n){\n    var sum = a + b;\n    if(isPrime(sum)){\n      i++;\n    }\n    a = b;\n    b = sum;\n  }\n  return a;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var num = 0;\n    var fibonacci = 0;\n    var fibonacci_prime = 0;\n    var first = 0;\n    var second = 1;\n    var i = 0;\n    while(i < n){\n        fibonacci = first + second;\n        first = second;\n        second = fibonacci;\n        if(is_prime(fibonacci)){\n            i += 1;\n            num = fibonacci;\n        }\n    }\n    return num;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var nth_number = 0;\n    var current_number = 0;\n    var prev_number = 0;\n    var next_number = 1;\n    var count = 0;\n    while(count < n){\n        if(is_prime(current_number)){\n            nth_number = current_number;\n            count++;\n        }\n        current_number = prev_number + next_number;\n        prev_number = next_number;\n        next_number = current_number;\n    }\n    return nth_number;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var i=0;\n  var first = 0;\n  var second = 1;\n  var count = 0;\n  while(count<n){\n    var fib = first + second;\n    if(isPrime(fib)){\n      count++;\n    }\n    first = second;\n    second = fib;\n  }\n  return fib;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var fib = fibonacci(n);\n    if(fib >= 2 && prime(fib)){\n        return fib;\n    }\n    else{\n        return prime_fib(n+1);\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var fib_num = fib(n);\n    var prime_fib_num = 0;\n    var i = 0;\n    while (prime_fib_num < n){\n        if (is_prime(fib_num)){\n            i++;\n            prime_fib_num = i;\n        }\n        fib_num = fib(fib_num);\n    }\n    return fib_num;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var i = 1;\n    var fib1 = 1;\n    var fib2 = 1;\n    var fibN = 1;\n    var count = 0;\n    while(i <= n){\n        if(isPrime(fibN)){\n            count += 1;\n        }\n        if(count == n){\n            return fibN;\n        }\n        fibN = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fibN;\n        i += 1;\n    }\n    return fibN;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var i = 0;\n\tvar j = 1;\n\tvar count = 0;\n\tvar result = 0;\n\twhile(count<n){\n\t\tif(isPrime(i)){\n\t\t\tif(i%2 == 0){\n\t\t\t\tresult = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tvar k = i+j;\n\t\ti = j;\n\t\tj = k;\n\t}\n\treturn result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var i = 2;\n    var count = 0;\n    while(count < n){\n        if(is_prime(fib(i))){\n            count++;\n        }\n        i++;\n    }\n    return fib(i-1);\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 7.868448159078606e-63,
        "bleu-0": 2.3954263582798176e-16,
        "bleu-8": 0.027477980150153854,
        "bleu-7": 1.1200234473111347e-08,
        "bleu-16": 0.09816734656316824,
        "bleu-2": 0.027161552406478533,
        "bleu-11": 0.10169509178344141,
        "bleu-1": 0.09835686506825654,
        "bleu-10": 0.08260764259335808,
        "bleu-17": 0.13565135830200648,
        "bleu-12": 0.06786278756664146,
        "bleu-6": 0.037610714559110046,
        "bleu-18": 0.03191443612157205,
        "bleu-15": 0.037448688872701544,
        "bleu-13": 0.049345185566525174,
        "bleu-9": 0.014348536240185547,
        "bleu-4": 0.02730460884531933,
        "bleu-14": 0.07869070748553392,
        "bleu-5": 0.09581899588267527,
        "bleu-19": 0.03276345281551345,
        "codebleu-3": 0.0031897926634768736,
        "codebleu-0": 0.009569377990430627,
        "codebleu-8": 0.20130306535380113,
        "codebleu-7": 0.025518341667184582,
        "codebleu-16": 0.29555160370614286,
        "codebleu-2": 0.1938412691606993,
        "codebleu-11": 0.3350804525846621,
        "codebleu-1": 0.31164540400312407,
        "codebleu-10": 0.3147918140896206,
        "codebleu-17": 0.31814344450487064,
        "codebleu-12": 0.22838970324856597,
        "codebleu-6": 0.1843449619901554,
        "codebleu-18": 0.22872844429949593,
        "codebleu-15": 0.22890836575702495,
        "codebleu-13": 0.21274809357356167,
        "codebleu-9": 0.12887379528520612,
        "codebleu-4": 0.20430000828345354,
        "codebleu-14": 0.2799393108784569,
        "codebleu-5": 0.274724180848925,
        "codebleu-19": 0.17673029076607705,
        "chrf-3": 0.005291005291005291,
        "chrf-0": 0.022036422499066465,
        "chrf-8": 0.16567644453728722,
        "chrf-7": 0.039590898606910646,
        "chrf-16": 0.21500979701464817,
        "chrf-2": 0.16356586286916472,
        "chrf-11": 0.16913729106140118,
        "chrf-1": 0.19513612235194092,
        "chrf-10": 0.20242518215981142,
        "chrf-17": 0.24224956739241144,
        "chrf-12": 0.19559113834656647,
        "chrf-6": 0.14686275899868093,
        "chrf-18": 0.1770916304568747,
        "chrf-15": 0.15859762168818684,
        "chrf-13": 0.1890366776349727,
        "chrf-9": 0.13479102594043826,
        "chrf-4": 0.1681612253477489,
        "chrf-14": 0.20770183122457145,
        "chrf-5": 0.19840834056398204,
        "chrf-19": 0.15663941490937905,
        "rougel-3": 0.013793103448275862,
        "rougel-0": 0.05405405405405406,
        "rougel-8": 0.2828282828282829,
        "rougel-7": 0.07894736842105264,
        "rougel-16": 0.3333333333333333,
        "rougel-2": 0.2926829268292683,
        "rougel-11": 0.30705394190871366,
        "rougel-1": 0.34334763948497854,
        "rougel-10": 0.2966101694915254,
        "rougel-17": 0.36885245901639346,
        "rougel-12": 0.30769230769230765,
        "rougel-6": 0.2727272727272727,
        "rougel-18": 0.29357798165137616,
        "rougel-15": 0.27358490566037735,
        "rougel-13": 0.2926829268292683,
        "rougel-9": 0.25274725274725274,
        "rougel-4": 0.29292929292929293,
        "rougel-14": 0.3162393162393162,
        "rougel-5": 0.3,
        "rougel-19": 0.28272251308900526,
        "meteor-3": 0.003855050115651503,
        "meteor-0": 0.015384615384615384,
        "meteor-8": 0.18495045520849054,
        "meteor-7": 0.03269853442399454,
        "meteor-16": 0.20931952662721895,
        "meteor-2": 0.16554583022105923,
        "meteor-11": 0.23522837774149744,
        "meteor-1": 0.2534470259904982,
        "meteor-10": 0.2179061759289259,
        "meteor-17": 0.28416954174219833,
        "meteor-12": 0.18653413217138703,
        "meteor-6": 0.1767363735617704,
        "meteor-18": 0.1749409750382986,
        "meteor-15": 0.1846497396612604,
        "meteor-13": 0.18324025408503203,
        "meteor-9": 0.14380564819631,
        "meteor-4": 0.15555555555555556,
        "meteor-14": 0.21928016886694573,
        "meteor-5": 0.2558484919802041,
        "meteor-19": 0.2103289225689598,
        "ruby-3": 0.00694444444444442,
        "ruby-0": 0.02777777777777779,
        "ruby-8": 0.16666666666666663,
        "ruby-7": 0.04166666666666663,
        "ruby-16": 0.20138888888888884,
        "ruby-2": 0.1875,
        "ruby-11": 0.2152777777777778,
        "ruby-1": 0.25,
        "ruby-10": 0.16666666666666663,
        "ruby-17": 0.23611111111111116,
        "ruby-12": 0.2152777777777778,
        "ruby-6": 0.1597222222222222,
        "ruby-18": 0.1875,
        "ruby-15": 0.16666666666666663,
        "ruby-13": 0.18055555555555558,
        "ruby-9": 0.1597222222222222,
        "ruby-4": 0.16666666666666663,
        "ruby-14": 0.1597222222222222,
        "ruby-5": 0.1875,
        "ruby-19": 0.17361111111111116,
        "codebertscore_f1-3": 0.0,
        "codebertscore_f3-3": 0.0,
        "codebertscore_f1-0": 0.6133442521095276,
        "codebertscore_f3-0": 0.5495098829269409,
        "codebertscore_f1-8": 0.6980125308036804,
        "codebertscore_f3-8": 0.6755272746086121,
        "codebertscore_f1-7": 0.6169556975364685,
        "codebertscore_f3-7": 0.5849761962890625,
        "codebertscore_f1-16": 0.7346530556678772,
        "codebertscore_f3-16": 0.7292826175689697,
        "codebertscore_f1-2": 0.7367450594902039,
        "codebertscore_f3-2": 0.7258670926094055,
        "codebertscore_f1-11": 0.7513678073883057,
        "codebertscore_f3-11": 0.7367865443229675,
        "codebertscore_f1-1": 0.7604649066925049,
        "codebertscore_f3-1": 0.744351863861084,
        "codebertscore_f1-10": 0.7399038076400757,
        "codebertscore_f3-10": 0.7253005504608154,
        "codebertscore_f1-17": 0.7541230320930481,
        "codebertscore_f3-17": 0.7457478046417236,
        "codebertscore_f1-12": 0.731536865234375,
        "codebertscore_f3-12": 0.7233777046203613,
        "codebertscore_f1-6": 0.7360298037528992,
        "codebertscore_f3-6": 0.7033120393753052,
        "codebertscore_f1-18": 0.7355148196220398,
        "codebertscore_f3-18": 0.7290305495262146,
        "codebertscore_f1-15": 0.7213233113288879,
        "codebertscore_f3-15": 0.7116921544075012,
        "codebertscore_f1-13": 0.7400065660476685,
        "codebertscore_f3-13": 0.7120776772499084,
        "codebertscore_f1-9": 0.7157290577888489,
        "codebertscore_f3-9": 0.695310115814209,
        "codebertscore_f1-4": 0.7213054895401001,
        "codebertscore_f3-4": 0.7070466876029968,
        "codebertscore_f1-14": 0.7595933675765991,
        "codebertscore_f3-14": 0.7413269281387329,
        "codebertscore_f1-5": 0.7565425634384155,
        "codebertscore_f3-5": 0.7289458513259888,
        "codebertscore_f1-19": 0.7533217668533325,
        "codebertscore_f3-19": 0.7251235246658325,
        "codebertscore_s_f1-3": 0.0,
        "codebertscore_s_f3-3": 0.0,
        "codebertscore_s_f1-0": 0.6161423921585083,
        "codebertscore_s_f3-0": 0.5354946255683899,
        "codebertscore_s_f1-8": 0.7004995346069336,
        "codebertscore_s_f3-8": 0.6789056658744812,
        "codebertscore_s_f1-7": 0.5952157378196716,
        "codebertscore_s_f3-7": 0.5666584968566895,
        "codebertscore_s_f1-16": 0.7380626201629639,
        "codebertscore_s_f3-16": 0.7329497337341309,
        "codebertscore_s_f1-2": 0.7404208779335022,
        "codebertscore_s_f3-2": 0.7278197407722473,
        "codebertscore_s_f1-11": 0.7572090029716492,
        "codebertscore_s_f3-11": 0.7402270436286926,
        "codebertscore_s_f1-1": 0.76402348279953,
        "codebertscore_s_f3-1": 0.7482510209083557,
        "codebertscore_s_f1-10": 0.7417337894439697,
        "codebertscore_s_f3-10": 0.7270029783248901,
        "codebertscore_s_f1-17": 0.7581502199172974,
        "codebertscore_s_f3-17": 0.7489941120147705,
        "codebertscore_s_f1-12": 0.7337267994880676,
        "codebertscore_s_f3-12": 0.7252877354621887,
        "codebertscore_s_f1-6": 0.7385581731796265,
        "codebertscore_s_f3-6": 0.7078500986099243,
        "codebertscore_s_f1-18": 0.7379340529441833,
        "codebertscore_s_f3-18": 0.7278525233268738,
        "codebertscore_s_f1-15": 0.7240856885910034,
        "codebertscore_s_f3-15": 0.7129221558570862,
        "codebertscore_s_f1-13": 0.7474062442779541,
        "codebertscore_s_f3-13": 0.7174281477928162,
        "codebertscore_s_f1-9": 0.7128417491912842,
        "codebertscore_s_f3-9": 0.6961158514022827,
        "codebertscore_s_f1-4": 0.725479006767273,
        "codebertscore_s_f3-4": 0.7105120420455933,
        "codebertscore_s_f1-14": 0.7548195719718933,
        "codebertscore_s_f3-14": 0.7369838953018188,
        "codebertscore_s_f1-5": 0.7577983736991882,
        "codebertscore_s_f3-5": 0.7301141023635864,
        "codebertscore_s_f1-19": 0.7543403506278992,
        "codebertscore_s_f3-19": 0.7273231744766235,
        "gpt35_nsnr-3": 0,
        "raw_gpt35_nsnr-3": "0",
        "gpt35_nsnr-0": 0,
        "raw_gpt35_nsnr-0": "0",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 0,
        "raw_gpt35_nswr-12": "Score: 2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 0,
        "raw_gpt35_nswr-9": "Score: 1",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n// is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunction is_equal_to_sum_even(n){\n",
        "snippet": [
            "  return (n >= 8 && n % 2 == 0)\n}\n\n"
        ],
        "simplified": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "task_id": "138",
        "3": "let x = n - 8;\n    if (x % 2 != 0 || x < 0){\n        return false;\n    } else {\n        return true;\n    }\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if(n===0) return true;\n    if(n%2===1 || n<0) return false;\n    return is_equal_to_sum_even(n-2);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            for(let k = 1; k < n; k++){\n                for(let l = 1; l < n; l++){\n                    if((i * 2) + (j * 2) + (k * 2) + (l * 2) == n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return (n/2) % 1 === 0\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return n%2 === 0 && n !== 0\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if (n % 2 === 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "//write your code here\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// Write your code here...\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let sum = 0;\n  let evenNumber = 2;\n  while(evenNumber <= n){\n    sum += evenNumber;\n    evenNumber += 2;\n  }\n  return sum === n;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let result = n % 2 == 0 ? (n - 2) : n\n    let count = 1\n    for(let i = 0; i < n / 2 - 1; i++) {\n        if (result >= 0) {\n            result -= 4\n            count++\n        }\n    }\n    return count == 4 ? true : false\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return false;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "}",
        "grade-6": {
            "execution": 0
        },
        "18": "// if (n % 2 !== 0) {\n    //     return false;\n    // }\n    // var res = [];\n    // for (let i = 0; i < n; i++) {\n    //     for (let j = 0; j < n; j++) {\n    //         for (let k = 0; k < n; k++) {\n    //             for (let l = 0; l < n; l++) {\n    //                 var sum = i + j + k + l;\n    //                 if (sum === n) {\n    //                     var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;\n    //                     if (!is_odd) {\n    //                         res.push([i, j, k, l]);\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n    // return res.length > 0;\n    var count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            for (let k = 0; k < n; k++) {\n                for (let l = 0; l < n; l++) {\n                    var sum = i + j + k + l;\n                    if (sum === n) {\n                        var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;\n                        if (!is_odd) {\n                            count += 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count === 4;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let answer = false;\n    let list = [2, 4, 6, 8];\n    let i = 0;\n    while (i < list.length) {\n        if (list[i] === n) {\n            answer = true;\n        }\n        i++;\n    }\n    return answer;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//variables\n    let total = 0;\n    let remainder = 0;\n    let count = 0;\n    //loop through and adding\n    for(i = 0; i < n; i++){\n        //checking for the remainder\n        remainder = i % 2;\n        //checking for the remainder\n        if(remainder == 0){\n            //adding to the total\n            total += i;\n            //checking for the total to equal the given number\n            if(total == n){\n                //adding to the count\n                count++;\n            }//end of if statement\n        }//end of if statement\n    }//end of for loop\n    //checking for count to equal four\n    if(count == 4){\n        //returning true\n        return true;\n    }//end of if statement\n    //returning false\n    return false;\n}//end of function",
        "grade-13": {
            "execution": 0
        },
        "9": "// Your code here\n    var isTrue = false;\n    for(var i = 1; i < n; i++){\n        for(var j = i + 1; j < n; j++){\n            for(var k = j + 1; k < n; k++){\n                for(var l = k + 1; l < n; l++){\n                    if(i + j + k + l == n && (i % 2 == 0) && (j % 2 == 0) && (k % 2 == 0) && (l % 2 == 0)){\n                        isTrue = true;\n                    }\n                }\n            }\n        }\n    }\n    return isTrue;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var i = 0, sum = 0;\n    while(sum < n){\n        sum += 2*i;\n        i++;\n    }\n    return sum == n;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return sum_of_numbers(n)\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var result = false;\n  var even = 2;\n  var i = 0;\n  while (even <= n && i < 3) {\n    result = result || is_equal_to_sum_even(n - even);\n    even += 2;\n    i++;\n  }\n  return result || n == 0;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n\tif(n === 0)\n\t\treturn false;\n\tfor(var i = 2; i <= n; i+=2){\n\t\tsum += i;\n\t\tif(sum === n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.045270914910401944,
        "bleu-0": 0.16330657473945517,
        "bleu-8": 0.010118964473800729,
        "bleu-7": 0.17865371220022983,
        "bleu-16": 0.3723909894939822,
        "bleu-2": 0.28479942163807365,
        "bleu-11": 0.01815543108837265,
        "bleu-1": 0.02302876686963141,
        "bleu-10": 0.03261445761657491,
        "bleu-17": 0.09451938728573092,
        "bleu-12": 0.009457497807469652,
        "bleu-6": 3.0590232050182594e-07,
        "bleu-18": 0.010642621838006737,
        "bleu-15": 0.02279658441354004,
        "bleu-13": 0.01868799339245458,
        "bleu-9": 0.037944688212450395,
        "bleu-4": 0.038461875130248735,
        "bleu-14": 0.04584877552694835,
        "bleu-5": 0.03860706699017836,
        "bleu-19": 0.05726137236395372,
        "codebleu-3": 0.5018115942028984,
        "codebleu-0": 0.5373626899928078,
        "codebleu-8": 0.43550724637681154,
        "codebleu-7": 0.41808091193738883,
        "codebleu-16": 0.5722100924518956,
        "codebleu-2": 0.5492781644759107,
        "codebleu-11": 0.14723131162046374,
        "codebleu-1": 0.1495009665326676,
        "codebleu-10": 0.41485507246376807,
        "codebleu-17": 0.5342314920838536,
        "codebleu-12": 0.11843138240390043,
        "codebleu-6": 0.05797101704193962,
        "codebleu-18": 0.5202520311758996,
        "codebleu-15": 0.4438405797101449,
        "codebleu-13": 0.5422451003480178,
        "codebleu-9": 0.5911067233977272,
        "codebleu-4": 0.4438405797101449,
        "codebleu-14": 0.21706422093745484,
        "codebleu-5": 0.5184782608695652,
        "codebleu-19": 0.424398634524427,
        "chrf-3": 0.217475244580417,
        "chrf-0": 0.26404827902038874,
        "chrf-8": 0.11865239451128305,
        "chrf-7": 0.3924714176369106,
        "chrf-16": 0.39999273101053284,
        "chrf-2": 0.3339104790410158,
        "chrf-11": 0.06491195204196328,
        "chrf-1": 0.06306887972032377,
        "chrf-10": 0.16182732681644918,
        "chrf-17": 0.22532816590143157,
        "chrf-12": 0.20753685822705356,
        "chrf-6": 0.0588235294117647,
        "chrf-18": 0.0629972775833296,
        "chrf-15": 0.15062296299545144,
        "chrf-13": 0.060442997729174094,
        "chrf-9": 0.14966106301484638,
        "chrf-4": 0.2084632997770563,
        "chrf-14": 0.23139051083321344,
        "chrf-5": 0.16017615827292114,
        "chrf-19": 0.1835500492729743,
        "rougel-3": 0.326530612244898,
        "rougel-0": 0.4074074074074074,
        "rougel-8": 0.14754098360655737,
        "rougel-7": 0.5517241379310345,
        "rougel-16": 0.625,
        "rougel-2": 0.47368421052631576,
        "rougel-11": 0.08695652173913043,
        "rougel-1": 0.07692307692307693,
        "rougel-10": 0.2456140350877193,
        "rougel-17": 0.2142857142857143,
        "rougel-12": 0.2,
        "rougel-6": 0.11764705882352941,
        "rougel-18": 0.06753246753246753,
        "rougel-15": 0.16216216216216217,
        "rougel-13": 0.1081081081081081,
        "rougel-9": 0.14457831325301204,
        "rougel-4": 0.27450980392156865,
        "rougel-14": 0.45454545454545453,
        "rougel-5": 0.2631578947368421,
        "rougel-19": 0.2535211267605634,
        "meteor-3": 0.4512770229257132,
        "meteor-0": 0.4054105616605618,
        "meteor-8": 0.25420000000000004,
        "meteor-7": 0.5658788229720483,
        "meteor-16": 0.675564236111111,
        "meteor-2": 0.608881808224634,
        "meteor-11": 0.033112582781456956,
        "meteor-1": 0.03246753246753247,
        "meteor-10": 0.3712307348670985,
        "meteor-17": 0.4274589706374903,
        "meteor-12": 0.06756756756756756,
        "meteor-6": 0.034482758620689655,
        "meteor-18": 0.17664971106266653,
        "meteor-15": 0.2722772277227723,
        "meteor-13": 0.2724529641462549,
        "meteor-9": 0.3262529501596557,
        "meteor-4": 0.38367422318666605,
        "meteor-14": 0.24800000000000003,
        "meteor-5": 0.5315291797192251,
        "meteor-19": 0.34511399975082024,
        "ruby-3": 0.21212121212121215,
        "ruby-0": 0.2894736842105263,
        "ruby-8": 0.08490566037735847,
        "ruby-7": 0.4375,
        "ruby-16": 0.4375,
        "ruby-2": 0.18181818181818177,
        "ruby-11": 0.0625,
        "ruby-1": 0.0625,
        "ruby-10": 0.1707317073170732,
        "ruby-17": 0.13235294117647056,
        "ruby-12": 0.125,
        "ruby-6": 0.0625,
        "ruby-18": 0.035230352303523005,
        "ruby-15": 0.10344827586206895,
        "ruby-13": 0.053254437869822535,
        "ruby-9": 0.07999999999999996,
        "ruby-4": 0.17142857142857137,
        "ruby-14": 0.25,
        "ruby-5": 0.16666666666666663,
        "ruby-19": 0.1636363636363637,
        "codebertscore_f1-3": 0.8126035928726196,
        "codebertscore_f3-3": 0.854556143283844,
        "codebertscore_f1-0": 0.7903494834899902,
        "codebertscore_f3-0": 0.8268533945083618,
        "codebertscore_f1-8": 0.667360246181488,
        "codebertscore_f3-8": 0.7025633454322815,
        "codebertscore_f1-7": 0.8664097189903259,
        "codebertscore_f3-7": 0.8706688284873962,
        "codebertscore_f1-16": 0.9261054396629333,
        "codebertscore_f3-16": 0.9159278273582458,
        "codebertscore_f1-2": 0.8215646743774414,
        "codebertscore_f3-2": 0.8491789698600769,
        "codebertscore_f1-11": 0.6507720351219177,
        "codebertscore_f3-11": 0.6469345688819885,
        "codebertscore_f1-1": 0.6488739252090454,
        "codebertscore_f3-1": 0.6460160613059998,
        "codebertscore_f1-10": 0.744592547416687,
        "codebertscore_f3-10": 0.7689516544342041,
        "codebertscore_f1-17": 0.7643517255783081,
        "codebertscore_f3-17": 0.8157747983932495,
        "codebertscore_f1-12": 0.7583417296409607,
        "codebertscore_f3-12": 0.7150638103485107,
        "codebertscore_f1-6": 0.0,
        "codebertscore_f3-6": 0.0,
        "codebertscore_f1-18": 0.624607503414154,
        "codebertscore_f3-18": 0.7248519659042358,
        "codebertscore_f1-15": 0.713126540184021,
        "codebertscore_f3-15": 0.7567859292030334,
        "codebertscore_f1-13": 0.5862856507301331,
        "codebertscore_f3-13": 0.6785637140274048,
        "codebertscore_f1-9": 0.6753665804862976,
        "codebertscore_f3-9": 0.7366810441017151,
        "codebertscore_f1-4": 0.7413336634635925,
        "codebertscore_f3-4": 0.7650187611579895,
        "codebertscore_f1-14": 0.7805792689323425,
        "codebertscore_f3-14": 0.7727600932121277,
        "codebertscore_f1-5": 0.7448445558547974,
        "codebertscore_f3-5": 0.8027604222297668,
        "codebertscore_f1-19": 0.7423858642578125,
        "codebertscore_f3-19": 0.7713515162467957,
        "codebertscore_s_f1-3": 0.8302370309829712,
        "codebertscore_s_f3-3": 0.878928542137146,
        "codebertscore_s_f1-0": 0.8041406869888306,
        "codebertscore_s_f3-0": 0.8403692245483398,
        "codebertscore_s_f1-8": 0.6732141375541687,
        "codebertscore_s_f3-8": 0.7109173536300659,
        "codebertscore_s_f1-7": 0.8666377067565918,
        "codebertscore_s_f3-7": 0.873111367225647,
        "codebertscore_s_f1-16": 0.9217774868011475,
        "codebertscore_s_f3-16": 0.9141356945037842,
        "codebertscore_s_f1-2": 0.8416337966918945,
        "codebertscore_s_f3-2": 0.86321622133255,
        "codebertscore_s_f1-11": 0.6144877076148987,
        "codebertscore_s_f3-11": 0.6063252687454224,
        "codebertscore_s_f1-1": 0.6182593703269958,
        "codebertscore_s_f3-1": 0.6105074286460876,
        "codebertscore_s_f1-10": 0.7577300667762756,
        "codebertscore_s_f3-10": 0.7784153819084167,
        "codebertscore_s_f1-17": 0.7584300637245178,
        "codebertscore_s_f3-17": 0.8178995251655579,
        "codebertscore_s_f1-12": 0.7098078727722168,
        "codebertscore_s_f3-12": 0.6659796237945557,
        "codebertscore_s_f1-6": 0.0,
        "codebertscore_s_f3-6": 0.0,
        "codebertscore_s_f1-18": 0.6503776907920837,
        "codebertscore_s_f3-18": 0.7600055932998657,
        "codebertscore_s_f1-15": 0.7116665840148926,
        "codebertscore_s_f3-15": 0.7577139735221863,
        "codebertscore_s_f1-13": 0.6151778697967529,
        "codebertscore_s_f3-13": 0.7055931091308594,
        "codebertscore_s_f1-9": 0.6746441721916199,
        "codebertscore_s_f3-9": 0.7385111451148987,
        "codebertscore_s_f1-4": 0.7565868496894836,
        "codebertscore_s_f3-4": 0.7768923044204712,
        "codebertscore_s_f1-14": 0.7581060528755188,
        "codebertscore_s_f3-14": 0.7527676820755005,
        "codebertscore_s_f1-5": 0.7419828176498413,
        "codebertscore_s_f3-5": 0.797027587890625,
        "codebertscore_s_f1-19": 0.7587203979492188,
        "codebertscore_s_f3-19": 0.7893211245536804,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "Score: 1",
        "gpt35_nsnr-11": 0,
        "raw_gpt35_nsnr-11": "0",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "0- The code snippet does not contain any implementation to solve the problem.",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 2,
        "raw_gpt35_nsnr-12": "2",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 2,
        "raw_gpt35_nsnr-14": "2",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n",
        "snippet": [
            "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n"
        ],
        "simplified": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
        "task_id": "17",
        "3": "var note = '';\n\tvar beats = [];\n\tvar i = 0;\n\tvar res = [];\n\twhile(i < music_string.length){\n\t\tif(music_string[i] == ' '){\n\t\t\tif(note == 'o'){\n\t\t\t\tbeats.push(4);\n\t\t\t}\n\t\t\telse if(note == 'o|'){\n\t\t\t\tbeats.push(2);\n\t\t\t}\n\t\t\telse if(note == '.|'){\n\t\t\t\tbeats.push(1);\n\t\t\t}\n\t\t\tnote = '';\n\t\t}\n\t\telse{\n\t\t\tnote += music_string[i];\n\t\t}\n\t\ti++;\n\t}\n\tif(note == 'o'){\n\t\tbeats.push(4);\n\t}\n\telse if(note == 'o|'){\n\t\tbeats.push(2);\n\t}\n\telse if(note == '.|'){\n\t\tbeats.push(1);\n\t}\n\treturn beats;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var pattern = /[o.].\\|?/g;\n    var beats = [];\n    var result;\n    while ((result = pattern.exec(music_string)) !== null) {\n        var whole_note = result[0];\n        var dot = whole_note.split(\"|\");\n        var dot_length = dot.length;\n        var beat = whole_note.replace(\"o\", \"4\");\n        beat = beat.replace(\".\", \"1\");\n        beat = parseInt(beat);\n        beats.push(beat);\n    }\n    return beats;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let output = [],\n        i = 0,\n        obj = {\n            'o': '4',\n            'o|': '2',\n            '.|': '1'\n        };\n    while(music_string.length){\n        output.push(Number(obj[music_string.slice(0, 2)]));\n        music_string = music_string.slice(2, music_string.length);\n    }\n    return output;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var beats = [];\n  var new_music_string = music_string.split(' ');\n  for (i=0; i<new_music_string.length; i++){\n    if (new_music_string[i] == 'o'){\n      beats.push(4);\n    }\n    else if (new_music_string[i] == 'o|'){\n      beats.push(2);\n    }\n    else if (new_music_string[i] == '.|'){\n      beats.push(1);\n    }\n  }\n  return beats;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "const note_types = ['whole', 'half', 'quarter'];\n    const music_notes = music_string.split(' ');\n    const values = [4, 2, 1];\n    let result = [];\n    for (let note of music_notes){\n        if (note[0] === 'o') {\n            if (note.length === 1) {\n                result.push(values[0]);\n            } else {\n                result.push(values[1]);\n            }\n        } else {\n            result.push(values[2]);\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let bars = music_string.split(' ');\n    let result = [];\n    for (let i = 0; i < bars.length; i++) {\n        if (bars[i] === 'o') {\n            result.push(4);\n        } else if (bars[i] === 'o|') {\n            result.push(2);\n        } else if (bars[i] === '.|') {\n            result.push(1);\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "//parse the music string and create an array of numbers\n    var array = [];\n    if(music_string === ''){\n        return array;\n    }\n    var temp = music_string.split(\" \");\n    for(var i = 0; i < temp.length; i++){\n        if(temp[i] === 'o'){\n            array.push(4);\n        }\n        else if(temp[i] === 'o|'){\n            array.push(2);\n        }\n        else if(temp[i] === '.|'){\n            array.push(1);\n        }\n    }\n    return array;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let beats = []\n  let split = music_string.split(' ')\n  for (let i = 0; i < split.length; i++) {\n    let note = split[i]\n    if (note == 'o') {\n      beats.push(4)\n    } else if (note == 'o|') {\n      beats.push(2)\n    } else if (note == '.|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n    };\n    var result = [];\n    var notes = music_string.split(' ');\n    notes.forEach(function(note){\n        result.push(beats[note]);\n    });\n    return result;\n}\n\nmodule.exports = {\n    fibonacci: fibonacci,\n    format_date: format_date,\n    find_longest_word: find_longest_word,\n    get_words_with_length: get_words_with_length,\n    find_duplicate_id: find_duplicate_id,\n    get_words_with_two_vowels: get_words_with_two_vowels,\n    get_words_with_x_vowels: get_words_with_x_vowels,\n    get_words_ending_with_ing: get_words_ending_with_ing,\n    get_words_with_b_and_ing: get_words_with_b_and_ing,\n    map_words_to_camel_case: map_words_to_camel_case,\n    map_words_to_snake_case: map_words_to_snake_case,\n    map_words_to_all_caps: map_words_to_all_caps,\n    map_words_to_length: map_words_to_length,\n    map_words_to_first_letter: map_words_to_first_letter,\n    map_words_to_array_of_chars: map_words_to_array_of_chars,\n    map_words_to_length_of_first_and_last_chars: map_words_to_length_of_first_and_last_chars,\n    remove_chars_from_first_and_last: remove_chars_from_first_and_last,\n    get_nth_item: get_nth_item,\n    concat_first_two_strings: concat_first_two_strings,\n    find_first_",
        "grade-10": {
            "execution": 0
        },
        "17": "var notes = music_string.split(' ');\n\tvar note_value = ['o', 'o|', '.|', '..'];\n\tvar note_time = [4, 2, 1, 0.5];\n\tvar time = [];\n\tvar i = 0;\n\twhile(notes[i]){\n\t\tvar j = 0;\n\t\twhile(note_value[j]){\n\t\t\tif(notes[i] == note_value[j]){\n\t\t\t\ttime.push(note_time[j]);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn time;\n}\nparse_music('o o| .| o| o| .| .| .| .| o o');",
        "grade-17": {
            "execution": 1
        },
        "12": "var notes = ['o|', '.|', 'o'];\n    var beats = [2, 1, 4];\n    var parsed_music = music_string.split(' ');\n    var result = [];\n    for (var i = 0; i < parsed_music.length; i++){\n        for (var j = 0; j < notes.length; j++){\n            if (parsed_music[i] == notes[j]){\n                result.push(beats[j]);\n            }\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return music_string.split(' ').map(m => {\n        switch(m) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n        }\n    });\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let result = [];\n\tlet notes = music_string.split(' ');\n\tnotes.forEach(function(item){\n\t\tswitch(item){\n\t\t\tcase 'o':\n\t\t\t\tresult.push(4);\n\t\t\t\tbreak;\n\t\t\tcase 'o|':\n\t\t\t\tresult.push(2);\n\t\t\t\tbreak;\n\t\t\tcase '.|':\n\t\t\t\tresult.push(1);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\treturn result;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var result = [];\n\tvar array_of_notes = music_string.split(' ');\n\tfor (var i = 0; i < array_of_notes.length; i++) {\n\t\tif (array_of_notes[i].charAt(0) == 'o') {\n\t\t\tif (array_of_notes[i].charAt(1) == '|') {\n\t\t\t\tresult.push(2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(4);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult.push(1);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return music_string.split(' ').map(x => {\n        switch(x) {\n            case 'o': return 4;\n            case 'o|': return 2;\n            case '.|': return 1;\n        }\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var countArray = [];\n  for (var i = 0; i < music_string.length; i++){\n    if (music_string[i] == 'o'){\n      countArray.push(4);\n    }\n    else if (music_string[i] == 'o' && music_string[i+1] == '|'){\n      countArray.push(2);\n    }\n    else if (music_string[i] == '.' && music_string[i+1] == '|'){\n      countArray.push(1);\n    }\n  }\n  return countArray;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = [];\n    const map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n    music_string.split(' ').forEach(function(note){\n        result.push(map[note]);\n    });\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = [];\n  var beats = 0;\n  for(var i = 0; i < music_string.length; i++){\n    if(music_string[i] === 'o'){\n      beats = 4;\n    }else if(music_string[i] === '|'){\n      beats = beats/2;\n    }else if(music_string[i] === '.'){\n      beats = 1;\n    }\n    result.push(beats);\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var beats = {'o': 4, 'o|': 2, '.|': 1};\n    var array = music_string.split(' ');\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n        result.push(beats[array[i]]);\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.060340569890829976,
        "bleu-0": 0.05911736952358803,
        "bleu-8": 0.21840213445233417,
        "bleu-7": 0.14040378958660646,
        "bleu-16": 0.10813699480497682,
        "bleu-2": 0.13522705277648725,
        "bleu-11": 0.12132140564251426,
        "bleu-1": 0.14267829162343357,
        "bleu-10": 0.2107638514478788,
        "bleu-17": 0.1285909999466577,
        "bleu-12": 0.1547486591554328,
        "bleu-6": 0.3786162528182391,
        "bleu-18": 0.21203370384870973,
        "bleu-15": 0.10070807314763984,
        "bleu-13": 0.4323518655261942,
        "bleu-9": 0.03790191464705674,
        "bleu-4": 0.5176354112113313,
        "bleu-14": 0.04241205343795187,
        "bleu-5": 0.408660871374828,
        "bleu-19": 1.7587922024243123e-25,
        "codebleu-3": 0.5460070142718685,
        "codebleu-0": 0.5699319207011394,
        "codebleu-8": 0.6179199826367311,
        "codebleu-7": 0.5486305836640974,
        "codebleu-16": 0.5887897711901285,
        "codebleu-2": 0.5477677941957444,
        "codebleu-11": 0.5829550444823286,
        "codebleu-1": 0.5570417958509583,
        "codebleu-10": 0.6090139079227899,
        "codebleu-17": 0.5975751161330969,
        "codebleu-12": 0.5804941248870921,
        "codebleu-6": 0.5551001658750557,
        "codebleu-18": 0.5873534602929608,
        "codebleu-15": 0.5151976857241143,
        "codebleu-13": 0.5687429184636796,
        "codebleu-9": 0.5279181241093405,
        "codebleu-4": 0.7293610514993364,
        "codebleu-14": 0.4609081487239279,
        "codebleu-5": 0.69513437116514,
        "codebleu-19": 0.01606425702811245,
        "chrf-3": 0.21840795258803972,
        "chrf-0": 0.2202937414111753,
        "chrf-8": 0.3051271685720902,
        "chrf-7": 0.28155937691229344,
        "chrf-16": 0.3191817376945414,
        "chrf-2": 0.2907443062093025,
        "chrf-11": 0.26284954718698905,
        "chrf-1": 0.3167680238785159,
        "chrf-10": 0.20199265122646573,
        "chrf-17": 0.3219033721341432,
        "chrf-12": 0.3222763083187924,
        "chrf-6": 0.4246644803205787,
        "chrf-18": 0.34858173758114136,
        "chrf-15": 0.2799488933037096,
        "chrf-13": 0.44971961248397835,
        "chrf-9": 0.21228910536858034,
        "chrf-4": 0.5706607590796304,
        "chrf-14": 0.21207586562169098,
        "chrf-5": 0.45235794661571743,
        "chrf-19": 0.012106537530266338,
        "rougel-3": 0.29508196721311475,
        "rougel-0": 0.25842696629213485,
        "rougel-8": 0.4755244755244755,
        "rougel-7": 0.2926829268292683,
        "rougel-16": 0.34636871508379885,
        "rougel-2": 0.2857142857142857,
        "rougel-11": 0.26804123711340205,
        "rougel-1": 0.29299363057324845,
        "rougel-10": 0.38277511961722493,
        "rougel-17": 0.28431372549019607,
        "rougel-12": 0.37209302325581395,
        "rougel-6": 0.4220183486238533,
        "rougel-18": 0.3380281690140845,
        "rougel-15": 0.26666666666666666,
        "rougel-13": 0.4220183486238533,
        "rougel-9": 0.28415300546448086,
        "rougel-4": 0.6721311475409836,
        "rougel-14": 0.275,
        "rougel-5": 0.5882352941176471,
        "rougel-19": 0.03389830508474576,
        "meteor-3": 0.3413974223163842,
        "meteor-0": 0.40020790896485264,
        "meteor-8": 0.5000549148819331,
        "meteor-7": 0.3767949346097312,
        "meteor-16": 0.40332302386104696,
        "meteor-2": 0.3744101565425811,
        "meteor-11": 0.3750571829982515,
        "meteor-1": 0.3598837954096223,
        "meteor-10": 0.41578705996734727,
        "meteor-17": 0.34379321400465707,
        "meteor-12": 0.4264551274136764,
        "meteor-6": 0.5000169202283747,
        "meteor-18": 0.4072403076119628,
        "meteor-15": 0.3013919081145972,
        "meteor-13": 0.5356075479930191,
        "meteor-9": 0.41115243431221027,
        "meteor-4": 0.606436690830113,
        "meteor-14": 0.3493928209837301,
        "meteor-5": 0.6051007231404959,
        "meteor-19": 0.009560229445506692,
        "ruby-3": 0.18817204301075274,
        "ruby-0": 0.17500000000000004,
        "ruby-8": 0.3764705882352941,
        "ruby-7": 0.18867924528301883,
        "ruby-16": 0.19834710743801653,
        "ruby-2": 0.18181818181818177,
        "ruby-11": 0.16911764705882348,
        "ruby-1": 0.19191919191919193,
        "ruby-10": 0.23178807947019864,
        "ruby-17": 0.1643835616438356,
        "ruby-12": 0.23684210526315785,
        "ruby-6": 0.13793103448275867,
        "ruby-18": 0.19047619047619047,
        "ruby-15": 0.16822429906542058,
        "ruby-13": 0.13793103448275867,
        "ruby-9": 0.18400000000000005,
        "ruby-4": 0.53125,
        "ruby-14": 0.1568627450980392,
        "ruby-5": 0.5,
        "ruby-19": 0.017241379310344862,
        "codebertscore_f1-3": 0.7032902836799622,
        "codebertscore_f3-3": 0.7448598146438599,
        "codebertscore_f1-0": 0.7291668057441711,
        "codebertscore_f3-0": 0.7545871138572693,
        "codebertscore_f1-8": 0.7632325291633606,
        "codebertscore_f3-8": 0.7725833058357239,
        "codebertscore_f1-7": 0.7732690572738647,
        "codebertscore_f3-7": 0.7942558526992798,
        "codebertscore_f1-16": 0.7298469543457031,
        "codebertscore_f3-16": 0.7578623294830322,
        "codebertscore_f1-2": 0.7521670460700989,
        "codebertscore_f3-2": 0.7860231399536133,
        "codebertscore_f1-11": 0.7197928428649902,
        "codebertscore_f3-11": 0.7524793744087219,
        "codebertscore_f1-1": 0.776973307132721,
        "codebertscore_f3-1": 0.8052334785461426,
        "codebertscore_f1-10": 0.6545129418373108,
        "codebertscore_f3-10": 0.7804747223854065,
        "codebertscore_f1-17": 0.7692659497261047,
        "codebertscore_f3-17": 0.8050803542137146,
        "codebertscore_f1-12": 0.7527891993522644,
        "codebertscore_f3-12": 0.7904078364372253,
        "codebertscore_f1-6": 0.8192113637924194,
        "codebertscore_f3-6": 0.8239603638648987,
        "codebertscore_f1-18": 0.787950336933136,
        "codebertscore_f3-18": 0.8203462958335876,
        "codebertscore_f1-15": 0.7387503385543823,
        "codebertscore_f3-15": 0.7778581976890564,
        "codebertscore_f1-13": 0.8576598763465881,
        "codebertscore_f3-13": 0.8667370080947876,
        "codebertscore_f1-9": 0.7555102705955505,
        "codebertscore_f3-9": 0.7734480500221252,
        "codebertscore_f1-4": 0.8653669953346252,
        "codebertscore_f3-4": 0.8713221549987793,
        "codebertscore_f1-14": 0.7440139055252075,
        "codebertscore_f3-14": 0.7596818804740906,
        "codebertscore_f1-5": 0.8234275579452515,
        "codebertscore_f3-5": 0.8450992703437805,
        "codebertscore_f1-19": 0.0,
        "codebertscore_f3-19": 0.0,
        "codebertscore_s_f1-3": 0.8256350159645081,
        "codebertscore_s_f3-3": 0.8788216710090637,
        "codebertscore_s_f1-0": 0.8461239337921143,
        "codebertscore_s_f3-0": 0.8844081163406372,
        "codebertscore_s_f1-8": 0.8784019351005554,
        "codebertscore_s_f3-8": 0.8942771553993225,
        "codebertscore_s_f1-7": 0.8714540600776672,
        "codebertscore_s_f3-7": 0.9009919166564941,
        "codebertscore_s_f1-16": 0.8548671007156372,
        "codebertscore_s_f3-16": 0.893864631652832,
        "codebertscore_s_f1-2": 0.8665780425071716,
        "codebertscore_s_f3-2": 0.8996181488037109,
        "codebertscore_s_f1-11": 0.8405291438102722,
        "codebertscore_s_f3-11": 0.8845269083976746,
        "codebertscore_s_f1-1": 0.8788199424743652,
        "codebertscore_s_f3-1": 0.9078543782234192,
        "codebertscore_s_f1-10": 0.7507806420326233,
        "codebertscore_s_f3-10": 0.8835861086845398,
        "codebertscore_s_f1-17": 0.861762285232544,
        "codebertscore_s_f3-17": 0.8978945016860962,
        "codebertscore_s_f1-12": 0.8610968589782715,
        "codebertscore_s_f3-12": 0.898061215877533,
        "codebertscore_s_f1-6": 0.9203382730484009,
        "codebertscore_s_f3-6": 0.922008216381073,
        "codebertscore_s_f1-18": 0.8849964141845703,
        "codebertscore_s_f3-18": 0.9116653203964233,
        "codebertscore_s_f1-15": 0.8471798300743103,
        "codebertscore_s_f3-15": 0.8901652097702026,
        "codebertscore_s_f1-13": 0.9381688237190247,
        "codebertscore_s_f3-13": 0.9420713782310486,
        "codebertscore_s_f1-9": 0.8533886671066284,
        "codebertscore_s_f3-9": 0.8871371150016785,
        "codebertscore_s_f1-4": 0.9387826323509216,
        "codebertscore_s_f3-4": 0.9431746006011963,
        "codebertscore_s_f1-14": 0.8622257113456726,
        "codebertscore_s_f3-14": 0.8901350498199463,
        "codebertscore_s_f1-5": 0.9079470038414001,
        "codebertscore_s_f3-5": 0.9255921840667725,
        "codebertscore_s_f1-19": 0.9214602112770081,
        "codebertscore_s_f3-19": 0.874067485332489,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 0,
        "raw_gpt35_nsnr-19": "0",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n// True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd', 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunction same_chars(s0, s1){\n",
        "snippet": [
            "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n"
        ],
        "simplified": "Check if two words have the same characters.",
        "task_id": "54",
        "3": "if(s0.length !== s1.length){\n        return false;\n    }\n    var obj = {};\n    for(var i = 0; i < s0.length; i++){\n        var s = s0[i];\n        if(obj[s]){\n            obj[s]++;\n        }else{\n            obj[s] = 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        var s = s1[i];\n        if(obj[s]){\n            obj[s]--;\n        }else{\n            return false;\n        }\n    }\n    for(var key in obj){\n        if(obj[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if (s0.length != s1.length) return false;\n  else{\n    for (let i = 0; i < s0.length; i++){\n      if (!s1.includes(s0[i])) return false;\n    }\n    return true;\n  }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var empty = [];\n\tvar str1 = s0.split(\"\");\n\tvar str2 = s1.split(\"\");\n\tstr1.sort();\n\tstr2.sort();\n\tfor(var i = 0; i < str1.length; i++){\n\t\tif(str1[i] != str2[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var n0 = s0.length, n1 = s1.length;\n\tif(n0 > n1){\n\t\treturn false;\n\t}\n\tvar a0 = s0.split('').sort(), a1 = s1.split('').sort();\n\tfor(var i=0; i<n0; i++){\n\t\tif(a0[i] != a1[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tfor(var j = 0; j < s1.length; j++){\n\t\t\tif(s0[i] == s1[j]){\n\t\t\t\ts1 = s1.substring(0, j) + s1.substring(j + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (s1.length == 0);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let s0_dict = {};\n\tlet s1_dict = {};\n\tfor (let i=0; i<s0.length; i++){\n\t\tlet char = s0[i];\n\t\tif (s0_dict[char]){\n\t\t\ts0_dict[char] += 1;\n\t\t}\n\t\telse{\n\t\t\ts0_dict[char] = 1;\n\t\t}\n\t}\n\tfor (let i=0; i<s1.length; i++){\n\t\tlet char = s1[i];\n\t\tif (s1_dict[char]){\n\t\t\ts1_dict[char] += 1;\n\t\t}\n\t\telse{\n\t\t\ts1_dict[char] = 1;\n\t\t}\n\t}\n\tfor (let key in s0_dict){\n\t\tif (!s1_dict[key] || s0_dict[key] !== s1_dict[key]){\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let key in s1_dict){\n\t\tif (!s0_dict[key] || s0_dict[key] !== s1_dict[key]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s0.length !== s1.length){\n        return false;\n    }\n    let charCount = {};\n    for(let i = 0; i < s0.length; i++){\n        if(charCount[s0[i]] === undefined){\n            charCount[s0[i]] = 1;\n        }else{\n            charCount[s0[i]]++;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(charCount[s1[i]] === undefined){\n            return false;\n        }else{\n            charCount[s1[i]]--;\n        }\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var letters = {};\n    var i = 0;\n    while(i < s0.length){\n        if(letters[s0[i]] === undefined){\n            letters[s0[i]] = 1;\n        } else {\n            letters[s0[i]] += 1;\n        }\n        i++;\n    }\n    i = 0;\n    while(i < s1.length){\n        if(letters[s1[i]] === undefined){\n            return false;\n        } else {\n            letters[s1[i]] -= 1;\n        }\n        i++;\n    }\n    var j = 0;\n    for(var key in letters){\n        if(letters[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//split then sort\n\t// \t-> array of characters\n\t// -> no duplicates\n\t// ->\n\t// \"abcd\"\n\t// s0 = \"eabcdzzzz\"\n\t// s1 = \"dddzzzzzzzddeddabc\"\n\t//   a b c d e z\n\t// d 4 1 1 0 0 5\n\t// e 1 0 0 0 1 0\n\t// a 0 1 0 0 0 0\n\t// b 0 0 1 0 0 0\n\t// c 0 0 0 1 0 0\n\t// z 0 0 0 0 0 5\n\t// dddzzzzzzzddeddabc\n\t// eabcdzzzz\n\t// array of characters\n\t// and count (hash table)\n\t// for each string\n\t// \tfor each character\n\t// \t\tcount++\n\t//\n\t// for each string\n\t// \tfor each character\n\t// \t\tcount--\n\t// \t\tif count < 0\n\t// \t\t\treturn false\n\t// return true\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//",
        "grade-10": {
            "execution": 0
        },
        "17": "if(s0.length !== s1.length){\n\t\treturn false;\n\t}\n\n\tvar hash = {};\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(hash[s0[i]] === undefined){\n\t\t\thash[s0[i]] = 1;\n\t\t} else {\n\t\t\thash[s0[i]]++;\n\t\t}\n\t}\n\n\tfor(var i = 0; i < s1.length; i++){\n\t\tif(hash[s1[i]] === undefined){\n\t\t\treturn false;\n\t\t} else {\n\t\t\thash[s1[i]]--;\n\t\t}\n\t}\n\n\treturn true;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return (new Set(s0)).size === (new Set(s1)).size;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(s0.length !== s1.length){\n        return false;\n    }\n    if(s0.length === 0){\n        return true;\n    }\n    let s0freq = {};\n    let s1freq = {};\n    for(let i = 0; i < s0.length; i++){\n        if(s0freq[s0[i]]){\n            s0freq[s0[i]]++;\n        } else {\n            s0freq[s0[i]] = 1;\n        }\n        if(s1freq[s1[i]]){\n            s1freq[s1[i]]++;\n        } else {\n            s1freq[s1[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s0.length; i++){\n        if(s0freq[s0[i]] !== s1freq[s0[i]]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let tmp = {};\n    for(let i=0; i<s0.length; i++){\n        tmp[s0[i]] = tmp[s0[i]] + 1 || 1;\n    }\n    for(let i=0; i<s1.length; i++){\n        if(tmp[s1[i]]){\n            tmp[s1[i]] = tmp[s1[i]] - 1;\n        }\n    }\n    for(let key in tmp){\n        if(tmp[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tfor(let i = 0; i < s0.length; i++){\n\t\tif(s0.indexOf(s1[i]) < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// TODO: this is your task.\n    var s0 = s0.toLowerCase();\n    var s1 = s1.toLowerCase();\n    if (s0.length != s1.length) {\n        return false;\n    }\n    var a0 = [];\n    var a1 = [];\n    for (var i = 0; i < s0.length; i++) {\n        a0.push(s0[i]);\n        a1.push(s1[i]);\n    }\n    a0.sort();\n    a1.sort();\n    return (a0.join('') == a1.join(''));\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (s0.length != s1.length) {\n    return false;\n  }\n  var chars = {};\n  for (var i = 0; i < s0.length; i++) {\n    if (chars[s0[i]] === undefined) {\n      chars[s0[i]] = 1;\n    } else {\n      chars[s0[i]]++;\n    }\n  }\n  for (var i = 0; i < s1.length; i++) {\n    if (chars[s1[i]] === undefined) {\n      return false;\n    } else {\n      chars[s1[i]]--;\n    }\n  }\n  return true;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(s0.length != s1.length){\n        return false;\n    }\n    if(s0 == \"\" && s1 == \"\"){\n        return true;\n    }\n    var s0 = s0.split(\"\");\n    var s1 = s1.split(\"\");\n    for(var i = 0; i < s0.length; i++){\n        var index = s1.indexOf(s0[i]);\n        if(index == -1){\n            return false;\n        }\n        s1.splice(index, 1);\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var s0a = s0.split('').sort().join('')\n  var s1a = s1.split('').sort().join('')\n  return s0a === s1a\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(s0.length !== s1.length){\n        return false;\n    }\n    for(var i = 0; i < s0.length; i++){\n        if(s0.indexOf(s1[i]) !== -1){\n            var newS0 = s0.slice(0, s0.indexOf(s1[i])) + s0.slice(s0.indexOf(s1[i]) + 1, s0.length);\n            var newS1 = s1.slice(0, i) + s1.slice(i + 1, s1.length);\n            if(same_chars(newS0, newS1)){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var x = s0.split('').sort().join('');\n  var y = s1.split('').sort().join('');\n  if (x == y){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.012684514148027303,
        "bleu-0": 0.030743800560522453,
        "bleu-8": 0.0839578371229794,
        "bleu-7": 0.07433905809927034,
        "bleu-16": 0.03090164166187291,
        "bleu-2": 0.009179684292299007,
        "bleu-11": 0.019113413818039264,
        "bleu-1": 0.0168287557563944,
        "bleu-10": 0.0017061882852162748,
        "bleu-17": 0.019966114477914364,
        "bleu-12": 0.18294632275890538,
        "bleu-6": 0.015374498911607542,
        "bleu-18": 0.012776732821069598,
        "bleu-15": 0.029139152654267985,
        "bleu-13": 0.0768887330834359,
        "bleu-9": 0.02011568383968287,
        "bleu-4": 0.025265207301134414,
        "bleu-14": 0.14987638789869637,
        "bleu-5": 0.016951993543644916,
        "bleu-19": 0.11263733312844551,
        "codebleu-3": 0.517361111111111,
        "codebleu-0": 0.3993055555555555,
        "codebleu-8": 0.5417707506316076,
        "codebleu-7": 0.5540565096832116,
        "codebleu-16": 0.5277777777777778,
        "codebleu-2": 0.48958333333333326,
        "codebleu-11": 0.5,
        "codebleu-1": 0.5104166666666666,
        "codebleu-10": 0.19791666666666663,
        "codebleu-17": 0.5,
        "codebleu-12": 0.3718089476167065,
        "codebleu-6": 0.5312499999999999,
        "codebleu-18": 0.4618055555555555,
        "codebleu-15": 0.42013888888888884,
        "codebleu-13": 0.5787870110694615,
        "codebleu-9": 0.5,
        "codebleu-4": 0.5,
        "codebleu-14": 0.5284516202053383,
        "codebleu-5": 0.545138888888889,
        "codebleu-19": 0.5257173332991852,
        "chrf-3": 0.14224921480860955,
        "chrf-0": 0.16196870916560854,
        "chrf-8": 0.23458988566573932,
        "chrf-7": 0.2315253045849729,
        "chrf-16": 0.21462434421451937,
        "chrf-2": 0.11315872388447568,
        "chrf-11": 0.13595471464971265,
        "chrf-1": 0.1353340224944188,
        "chrf-10": 0.09896584111592929,
        "chrf-17": 0.14571788889033363,
        "chrf-12": 0.290738843569063,
        "chrf-6": 0.12913850166777066,
        "chrf-18": 0.14651910035482982,
        "chrf-15": 0.16630288993233983,
        "chrf-13": 0.2228507675804824,
        "chrf-9": 0.14449136553487504,
        "chrf-4": 0.1663887536666185,
        "chrf-14": 0.22994307100163558,
        "chrf-5": 0.1815088674408641,
        "chrf-19": 0.2461421858546259,
        "rougel-3": 0.2121212121212121,
        "rougel-0": 0.3,
        "rougel-8": 0.28800000000000003,
        "rougel-7": 0.29411764705882354,
        "rougel-16": 0.273972602739726,
        "rougel-2": 0.1680672268907563,
        "rougel-11": 0.19354838709677422,
        "rougel-1": 0.20618556701030927,
        "rougel-10": 0.025380710659898477,
        "rougel-17": 0.19999999999999998,
        "rougel-12": 0.5882352941176471,
        "rougel-6": 0.19555555555555554,
        "rougel-18": 0.20238095238095236,
        "rougel-15": 0.3106796116504854,
        "rougel-13": 0.28571428571428575,
        "rougel-9": 0.2011173184357542,
        "rougel-4": 0.2732919254658385,
        "rougel-14": 0.39560439560439564,
        "rougel-5": 0.28421052631578947,
        "rougel-19": 0.380952380952381,
        "meteor-3": 0.30528756957328385,
        "meteor-0": 0.2639315313145908,
        "meteor-8": 0.3838703132873907,
        "meteor-7": 0.3855820952868852,
        "meteor-16": 0.39314385533810586,
        "meteor-2": 0.2673753886270183,
        "meteor-11": 0.3159988781593014,
        "meteor-1": 0.28892212324164984,
        "meteor-10": 0.05361930294906167,
        "meteor-17": 0.31956277528139876,
        "meteor-12": 0.4230617866981503,
        "meteor-6": 0.2997895960284963,
        "meteor-18": 0.28378739316239315,
        "meteor-15": 0.26219132341581325,
        "meteor-13": 0.4432262749783308,
        "meteor-9": 0.32016458841752193,
        "meteor-4": 0.3371902473848779,
        "meteor-14": 0.3675680529622507,
        "meteor-5": 0.3844357888023325,
        "meteor-19": 0.3380102040816326,
        "ruby-3": 0.12337662337662336,
        "ruby-0": 0.1785714285714286,
        "ruby-8": 0.19753086419753085,
        "ruby-7": 0.19565217391304346,
        "ruby-16": 0.17647058823529416,
        "ruby-2": 0.1030927835051546,
        "ruby-11": 0.11267605633802813,
        "ruby-1": 0.1333333333333333,
        "ruby-10": 0.011428571428571455,
        "ruby-17": 0.11764705882352944,
        "ruby-12": 0.4545454545454546,
        "ruby-6": 0.11049723756906082,
        "ruby-18": 0.12903225806451613,
        "ruby-15": 0.18644067796610164,
        "ruby-13": 0.18320610687022898,
        "ruby-9": 0.11851851851851847,
        "ruby-4": 0.17948717948717952,
        "ruby-14": 0.25531914893617025,
        "ruby-5": 0.17808219178082196,
        "ruby-19": 0.2295081967213115,
        "codebertscore_f1-3": 0.6307909488677979,
        "codebertscore_f3-3": 0.6631971001625061,
        "codebertscore_f1-0": 0.7346317768096924,
        "codebertscore_f3-0": 0.7390466332435608,
        "codebertscore_f1-8": 0.7377669215202332,
        "codebertscore_f3-8": 0.7490763664245605,
        "codebertscore_f1-7": 0.744405210018158,
        "codebertscore_f3-7": 0.7452616691589355,
        "codebertscore_f1-16": 0.7069950103759766,
        "codebertscore_f3-16": 0.716315746307373,
        "codebertscore_f1-2": 0.631162703037262,
        "codebertscore_f3-2": 0.6656288504600525,
        "codebertscore_f1-11": 0.6515733599662781,
        "codebertscore_f3-11": 0.6731798052787781,
        "codebertscore_f1-1": 0.6146548986434937,
        "codebertscore_f3-1": 0.6430373787879944,
        "codebertscore_f1-10": 0.57085120677948,
        "codebertscore_f3-10": 0.6394286751747131,
        "codebertscore_f1-17": 0.690089762210846,
        "codebertscore_f3-17": 0.700843334197998,
        "codebertscore_f1-12": 0.8820637464523315,
        "codebertscore_f3-12": 0.8498507142066956,
        "codebertscore_f1-6": 0.6231285333633423,
        "codebertscore_f3-6": 0.6575819849967957,
        "codebertscore_f1-18": 0.677223801612854,
        "codebertscore_f3-18": 0.6898267865180969,
        "codebertscore_f1-15": 0.7304626703262329,
        "codebertscore_f3-15": 0.7330582737922668,
        "codebertscore_f1-13": 0.7013148665428162,
        "codebertscore_f3-13": 0.7126832604408264,
        "codebertscore_f1-9": 0.6777494549751282,
        "codebertscore_f3-9": 0.6893871426582336,
        "codebertscore_f1-4": 0.681545078754425,
        "codebertscore_f3-4": 0.6940008401870728,
        "codebertscore_f1-14": 0.7955739498138428,
        "codebertscore_f3-14": 0.7824426293373108,
        "codebertscore_f1-5": 0.6648258566856384,
        "codebertscore_f3-5": 0.6825833320617676,
        "codebertscore_f1-19": 0.7638282775878906,
        "codebertscore_f3-19": 0.7679132223129272,
        "codebertscore_s_f1-3": 0.67043536901474,
        "codebertscore_s_f3-3": 0.6869041919708252,
        "codebertscore_s_f1-0": 0.7211214900016785,
        "codebertscore_s_f3-0": 0.7155798077583313,
        "codebertscore_s_f1-8": 0.7304776906967163,
        "codebertscore_s_f3-8": 0.7326926589012146,
        "codebertscore_s_f1-7": 0.7415676116943359,
        "codebertscore_s_f3-7": 0.738016664981842,
        "codebertscore_s_f1-16": 0.7077105641365051,
        "codebertscore_s_f3-16": 0.711935818195343,
        "codebertscore_s_f1-2": 0.6740474700927734,
        "codebertscore_s_f3-2": 0.6777257919311523,
        "codebertscore_s_f1-11": 0.6859796047210693,
        "codebertscore_s_f3-11": 0.7058571577072144,
        "codebertscore_s_f1-1": 0.6537217497825623,
        "codebertscore_s_f3-1": 0.6645958423614502,
        "codebertscore_s_f1-10": 0.601220428943634,
        "codebertscore_s_f3-10": 0.6664379239082336,
        "codebertscore_s_f1-17": 0.6956654191017151,
        "codebertscore_s_f3-17": 0.7050434350967407,
        "codebertscore_s_f1-12": 0.8819783926010132,
        "codebertscore_s_f3-12": 0.848125696182251,
        "codebertscore_s_f1-6": 0.6782454252243042,
        "codebertscore_s_f3-6": 0.6896632313728333,
        "codebertscore_s_f1-18": 0.6825819611549377,
        "codebertscore_s_f3-18": 0.690911591053009,
        "codebertscore_s_f1-15": 0.7225161790847778,
        "codebertscore_s_f3-15": 0.7162216305732727,
        "codebertscore_s_f1-13": 0.7145271301269531,
        "codebertscore_s_f3-13": 0.7174046635627747,
        "codebertscore_s_f1-9": 0.691893994808197,
        "codebertscore_s_f3-9": 0.7013121247291565,
        "codebertscore_s_f1-4": 0.6915808916091919,
        "codebertscore_s_f3-4": 0.6990923285484314,
        "codebertscore_s_f1-14": 0.7957664728164673,
        "codebertscore_s_f3-14": 0.7769870758056641,
        "codebertscore_s_f1-5": 0.6834691762924194,
        "codebertscore_s_f3-5": 0.6936839818954468,
        "codebertscore_s_f1-19": 0.7655917406082153,
        "codebertscore_s_f3-19": 0.7616092562675476,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction find_max(words){\n",
        "snippet": [
            "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n"
        ],
        "simplified": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
        "task_id": "158",
        "3": "var string = \"\";\n  for(var i = 0; i < words.length; i++){\n    var count = 0;\n    for(var j = 0; j < words[i].length; j++){\n      if(words[i].lastIndexOf(words[i][j]) === words[i].indexOf(words[i][j])){\n        count++;\n      }\n    }\n    if(count > string.length){\n      string = words[i];\n    }\n  }\n  return string;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "words.sort();\n    var max = 0;\n    var res = \"\";\n    for(var i = 0; i < words.length; i++){\n        if(get_uniq(words[i]).length > max){\n            max = get_uniq(words[i]).length;\n            res = words[i];\n        }\n    }\n    return res;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var max = 0;\n  var result = '';\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n    var currentMax = getUniqueCount(word);\n    if(currentMax > max){\n      max = currentMax;\n      result = word;\n    }\n  }\n  return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let result = words[0];\n    for(let i = 1; i < words.length; i++){\n        if(words[i].length > result.length){\n            result = words[i];\n        }\n    }\n    return result;\n}\nlet t = find_max([\"name\", \"of\", \"string\"]);",
        "grade-7": {
            "execution": 0
        },
        "16": "var mostUniqueChars = 0;\n  var wordMostUniqueChars = \"\";\n  var charsArray = [];\n  var chars = {};\n  words.forEach(function(word){\n    charsArray = word.split(\"\");\n    charsArray.forEach(function(char){\n      if(chars[char] == undefined){\n        chars[char] = 1;\n      }else{\n        chars[char] += 1;\n      }\n    });\n    console.log(chars);\n    console.log(Object.keys(chars).length);\n    if(Object.keys(chars).length > mostUniqueChars){\n      mostUniqueChars = Object.keys(chars).length;\n      wordMostUniqueChars = word;\n    }\n    chars = {};\n  });\n  return wordMostUniqueChars;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var max=0;\n    var long=\"\";\n    for(var i=0;i<words.length;i++){\n        var count=0;\n        for(var j=0;j<words[i].length;j++){\n            if(words[i].indexOf(words[i][j])==j){\n                count++;\n            }\n        }\n        if(count>max){\n            max=count;\n            long=words[i];\n        }\n    }\n    return long;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var max=0;\n  var result = \"\";\n  for(var i=0; i<words.length; i++){\n    var word=words[i];\n    var temp=0;\n    for(var j=0; j<word.length; j++){\n      for(var k=j+1; k<word.length; k++){\n        if(word[j]===word[k]){\n          temp++;\n        }\n      }\n    }\n    if(temp>max){\n      max=temp;\n      result=word;\n    }\n  }\n  return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let max=0;\n    let maxword=\"\";\n    for(let i=0;i<words.length;i++){\n        if(max<getUnique(words[i])){\n            max=getUnique(words[i]);\n            maxword=words[i];\n        }\n    }\n    return maxword;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var splitWords = [];\n    var max = 0;\n    var index = 0;\n    var word = \"\";\n    var len = words.length;\n    for(var i = 0; i < len; i++){\n        splitWords.push(words[i].split(\"\"));\n    }\n    for(var i = 0; i < len; i++){\n        if(max < new Set(splitWords[i]).size){\n            max = new Set(splitWords[i]).size;\n            index = i;\n        }\n    }\n    for(var i = 0; i < len; i++){\n        if(i !== index){\n            if(max === new Set(splitWords[i]).size){\n                if(words[i] < words[index]){\n                    index = i;\n                }\n            }\n        }\n    }\n    return words[index];\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var map = {};\n\twords.forEach(function(word){\n\t\tvar word_map = {};\n\t\tword.split('').forEach(function(letter){\n\t\t\tword_map[letter] = true;\n\t\t});\n\t\tmap[word] = Object.keys(word_map).length;\n\t});\n\tvar sorted = Object.keys(map).sort(function(a,b){\n\t\treturn map[b] - map[a];\n\t});\n\treturn sorted[0];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let max=0;\n    let maxStr=\"\";\n    for(let i=0;i<words.length;i++){\n        if(max<uniq(words[i])){\n            max=uniq(words[i]);\n            maxStr=words[i];\n        }\n    }\n    return maxStr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let obj = {}\n    let max = 0\n    let maxWord = ''\n    for(let i = 0; i < words.length; i++){\n        obj[words[i]] = 0\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i].indexOf(words[i][j]) == j){\n                obj[words[i]] ++\n            }\n        }\n        if(obj[words[i]] > max){\n            max = obj[words[i]]\n            maxWord = words[i]\n        }\n    }\n    return maxWord\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var result = \"\";\n  if(words.length === 0){\n    return false;\n  }\n\n  var current_longest = get_unique_chars(words[0]);\n  for(var i = 1; i < words.length; i++){\n    var word = words[i];\n    var unique_chars = get_unique_chars(word);\n    if(unique_chars.length > current_longest.length){\n      current_longest = unique_chars;\n      result = word;\n    }else if(unique_chars.length === current_longest.length){\n      if(word < result){\n        result = word;\n      }\n    }\n  }\n  return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var max = words[0];\n  for(var i = 0; i < words.length; i++){\n    if(new Set(words[i]).size > new Set(max).size){\n      max = words[i];\n    }\n  }\n  return max;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return words.sort(function(a,b){\n    if(a.length < b.length){\n      return -1;\n    }\n    if(a.length > b.length){\n      return 1;\n    }\n    if(a.length === b.length){\n      if(a < b){\n        return -1;\n      }\n      if(a > b){\n        return 1;\n      }\n    }\n    return 0;\n  }).pop();\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let words2 = words.map(e => [e, e.split('').filter((v, i, a) => a.indexOf(v) === i).length])\n    console.log(words2)\n    words2.sort((a, b) => b[1] - a[1])\n    console.log(words2)\n    let max_count = words2[0][1]\n    let max_words = []\n    for (let i = 0; i < words2.length; i++){\n        if (words2[i][1] < max_count){\n            break\n        }\n        max_words.push(words2[i][0])\n    }\n    console.log(max_words)\n    max_words.sort()\n    return max_words[0]\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var max_word = \"\";\n  var max_length = 0;\n  for(var i = 0; i < words.length; i++){\n    var current_word = words[i];\n    var seen = [];\n    var current_length = 0;\n    for(var j = 0; j < current_word.length; j++){\n      var current_char = current_word[j];\n      if(seen.indexOf(current_char) == -1){\n        seen.push(current_char);\n        current_length += 1;\n      }\n    }\n    if(current_length > max_length){\n      max_length = current_length;\n      max_word = current_word;\n    }\n  }\n  return max_word;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var count_chars = words.map(function(word){\n\t\tvar count = 0;\n\t\tfor(var i = 0; i < word.length; i++){\n\t\t\tif(word.indexOf(word[i]) == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t});\n\tvar max = Math.max.apply(null, count_chars);\n\treturn words[count_chars.indexOf(max)];\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// your code here..\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result = '';\n  var max_unique = 0;\n  var unique_chars = [];\n  for(var i = 0; i < words.length; i++){\n    var chars = words[i].split('');\n    var uniques = [];\n    for(var j = 0; j < chars.length; j++){\n      if(uniques.indexOf(chars[j]) == -1){\n        uniques.push(chars[j]);\n      }\n    }\n    if(uniques.length > max_unique){\n      max_unique = uniques.length;\n      result = words[i];\n    }else if(uniques.length == max_unique){\n      if(words[i] < result){\n        result = words[i];\n      }\n    }\n  }\n  return result;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.3579617005821439,
        "bleu-0": 0.13741591548591686,
        "bleu-8": 0.09129204766940083,
        "bleu-7": 0.1266897763330046,
        "bleu-16": 0.060162821998903666,
        "bleu-2": 0.31497503972519403,
        "bleu-11": 0.31447281614897055,
        "bleu-1": 0.12464623802684917,
        "bleu-10": 0.26961667480888746,
        "bleu-17": 0.02682128478375033,
        "bleu-12": 0.1273549963997006,
        "bleu-6": 0.39721153650685237,
        "bleu-18": 0.21249989527631588,
        "bleu-15": 0.08440999469607031,
        "bleu-13": 0.0710340019877866,
        "bleu-9": 0.1832154304745323,
        "bleu-4": 0.25151158198655454,
        "bleu-14": 0.11914716974035587,
        "bleu-5": 1.6974819772586768e-10,
        "bleu-19": 0.3650735376715684,
        "codebleu-3": 0.5004294683005795,
        "codebleu-0": 0.28709709133657296,
        "codebleu-8": 0.24513775871105709,
        "codebleu-7": 0.24856620996769543,
        "codebleu-16": 0.4586028491437452,
        "codebleu-2": 0.45456841469905385,
        "codebleu-11": 0.5079888378447986,
        "codebleu-1": 0.25090073992518047,
        "codebleu-10": 0.6422446010809842,
        "codebleu-17": 0.3373860628777376,
        "codebleu-12": 0.2518276636928548,
        "codebleu-6": 0.540138302474475,
        "codebleu-18": 0.44286421899471223,
        "codebleu-15": 0.22287896094989307,
        "codebleu-13": 0.28559086745061874,
        "codebleu-9": 0.4801798543451492,
        "codebleu-4": 0.47677689456927436,
        "codebleu-14": 0.3110503032269651,
        "codebleu-5": 0.017391304353578777,
        "codebleu-19": 0.6324529468265642,
        "chrf-3": 0.4605054263522319,
        "chrf-0": 0.3265758730292855,
        "chrf-8": 0.23606578324964672,
        "chrf-7": 0.3329370231943113,
        "chrf-16": 0.23099576040194092,
        "chrf-2": 0.4071786353699381,
        "chrf-11": 0.4135468686432041,
        "chrf-1": 0.3163287245662075,
        "chrf-10": 0.37814726561482703,
        "chrf-17": 0.21406605614660634,
        "chrf-12": 0.2946088793729726,
        "chrf-6": 0.4911742439517303,
        "chrf-18": 0.3412699693210183,
        "chrf-15": 0.2503821384773045,
        "chrf-13": 0.23989581590046596,
        "chrf-9": 0.3239653348677095,
        "chrf-4": 0.3204658961572499,
        "chrf-14": 0.2817796736294031,
        "chrf-5": 0.01322270626619183,
        "chrf-19": 0.3960200057551084,
        "rougel-3": 0.5543859649122808,
        "rougel-0": 0.4049586776859504,
        "rougel-8": 0.361344537815126,
        "rougel-7": 0.3583333333333333,
        "rougel-16": 0.2874251497005988,
        "rougel-2": 0.5672727272727274,
        "rougel-11": 0.5586206896551724,
        "rougel-1": 0.41880341880341876,
        "rougel-10": 0.4550561797752809,
        "rougel-17": 0.27205882352941174,
        "rougel-12": 0.4170212765957446,
        "rougel-6": 0.568561872909699,
        "rougel-18": 0.42807017543859643,
        "rougel-15": 0.3508771929824561,
        "rougel-13": 0.29457364341085274,
        "rougel-9": 0.3496932515337423,
        "rougel-4": 0.4467353951890034,
        "rougel-14": 0.3488372093023256,
        "rougel-5": 0.03428571428571429,
        "rougel-19": 0.45731707317073167,
        "meteor-3": 0.4613857718002186,
        "meteor-0": 0.2770007477951911,
        "meteor-8": 0.23353103854592144,
        "meteor-7": 0.26372097515044335,
        "meteor-16": 0.2857414422854971,
        "meteor-2": 0.42022561829570476,
        "meteor-11": 0.43586623500149907,
        "meteor-1": 0.25443581809897947,
        "meteor-10": 0.5545764791830838,
        "meteor-17": 0.223320952628958,
        "meteor-12": 0.2475785038103092,
        "meteor-6": 0.46577322876143307,
        "meteor-18": 0.3615372732614024,
        "meteor-15": 0.20743568057214015,
        "meteor-13": 0.2265693677277428,
        "meteor-9": 0.31383291902447963,
        "meteor-4": 0.34299015531589544,
        "meteor-14": 0.2552998299837408,
        "meteor-5": 0.009927200529450694,
        "meteor-19": 0.4677000899142709,
        "ruby-3": 0.43113772455089816,
        "ruby-0": 0.27544910179640714,
        "ruby-8": 0.25149700598802394,
        "ruby-7": 0.25149700598802394,
        "ruby-16": 0.09580838323353291,
        "ruby-2": 0.4491017964071856,
        "ruby-11": 0.4011976047904192,
        "ruby-1": 0.28742514970059885,
        "ruby-10": 0.31746031746031744,
        "ruby-17": 0.17964071856287422,
        "ruby-12": 0.28742514970059885,
        "ruby-6": 0.4251497005988024,
        "ruby-18": 0.29940119760479045,
        "ruby-15": 0.23952095808383234,
        "ruby-13": 0.20958083832335328,
        "ruby-9": 0.17365269461077848,
        "ruby-4": 0.3293413173652695,
        "ruby-14": 0.22754491017964074,
        "ruby-5": 0.017964071856287456,
        "ruby-19": 0.28742514970059885,
        "codebertscore_f1-3": 0.8392362594604492,
        "codebertscore_f3-3": 0.8234197497367859,
        "codebertscore_f1-0": 0.7966684699058533,
        "codebertscore_f3-0": 0.7844998240470886,
        "codebertscore_f1-8": 0.7746928334236145,
        "codebertscore_f3-8": 0.7719167470932007,
        "codebertscore_f1-7": 0.774943470954895,
        "codebertscore_f3-7": 0.7622445225715637,
        "codebertscore_f1-16": 0.7303860783576965,
        "codebertscore_f3-16": 0.743737518787384,
        "codebertscore_f1-2": 0.8516303300857544,
        "codebertscore_f3-2": 0.8397045135498047,
        "codebertscore_f1-11": 0.84991055727005,
        "codebertscore_f3-11": 0.8379297852516174,
        "codebertscore_f1-1": 0.8030694723129272,
        "codebertscore_f3-1": 0.7914369702339172,
        "codebertscore_f1-10": 0.8004342913627625,
        "codebertscore_f3-10": 0.8054823875427246,
        "codebertscore_f1-17": 0.688066303730011,
        "codebertscore_f3-17": 0.6828574538230896,
        "codebertscore_f1-12": 0.8001611828804016,
        "codebertscore_f3-12": 0.7908133268356323,
        "codebertscore_f1-6": 0.8553690314292908,
        "codebertscore_f3-6": 0.8475387692451477,
        "codebertscore_f1-18": 0.7773919701576233,
        "codebertscore_f3-18": 0.790015459060669,
        "codebertscore_f1-15": 0.769882082939148,
        "codebertscore_f3-15": 0.7519689202308655,
        "codebertscore_f1-13": 0.7377927899360657,
        "codebertscore_f3-13": 0.7213796973228455,
        "codebertscore_f1-9": 0.760483980178833,
        "codebertscore_f3-9": 0.7817450165748596,
        "codebertscore_f1-4": 0.813353955745697,
        "codebertscore_f3-4": 0.8266797065734863,
        "codebertscore_f1-14": 0.760175347328186,
        "codebertscore_f3-14": 0.7637194395065308,
        "codebertscore_f1-5": 0.5290334224700928,
        "codebertscore_f3-5": 0.5037650465965271,
        "codebertscore_f1-19": 0.8108190298080444,
        "codebertscore_f3-19": 0.8270679116249084,
        "codebertscore_s_f1-3": 0.8618624210357666,
        "codebertscore_s_f3-3": 0.8455479145050049,
        "codebertscore_s_f1-0": 0.8318538069725037,
        "codebertscore_s_f3-0": 0.816697359085083,
        "codebertscore_s_f1-8": 0.8135839700698853,
        "codebertscore_s_f3-8": 0.8030998110771179,
        "codebertscore_s_f1-7": 0.8227086663246155,
        "codebertscore_s_f3-7": 0.7998794317245483,
        "codebertscore_s_f1-16": 0.7497442960739136,
        "codebertscore_s_f3-16": 0.7654167413711548,
        "codebertscore_s_f1-2": 0.8694452047348022,
        "codebertscore_s_f3-2": 0.8563045263290405,
        "codebertscore_s_f1-11": 0.866683840751648,
        "codebertscore_s_f3-11": 0.8531813025474548,
        "codebertscore_s_f1-1": 0.8388920426368713,
        "codebertscore_s_f3-1": 0.8191503882408142,
        "codebertscore_s_f1-10": 0.8216080665588379,
        "codebertscore_s_f3-10": 0.8260691165924072,
        "codebertscore_s_f1-17": 0.730488121509552,
        "codebertscore_s_f3-17": 0.7197232842445374,
        "codebertscore_s_f1-12": 0.8359269499778748,
        "codebertscore_s_f3-12": 0.8199217319488525,
        "codebertscore_s_f1-6": 0.8739298582077026,
        "codebertscore_s_f3-6": 0.8647488355636597,
        "codebertscore_s_f1-18": 0.7999148368835449,
        "codebertscore_s_f3-18": 0.8115745186805725,
        "codebertscore_s_f1-15": 0.8137099146842957,
        "codebertscore_s_f3-15": 0.7886180877685547,
        "codebertscore_s_f1-13": 0.780350923538208,
        "codebertscore_s_f3-13": 0.7620390057563782,
        "codebertscore_s_f1-9": 0.7864187359809875,
        "codebertscore_s_f3-9": 0.803526759147644,
        "codebertscore_s_f1-4": 0.8307318687438965,
        "codebertscore_s_f3-4": 0.8416728973388672,
        "codebertscore_s_f1-14": 0.7977989912033081,
        "codebertscore_s_f3-14": 0.7969681024551392,
        "codebertscore_s_f1-5": 0.671824038028717,
        "codebertscore_s_f3-5": 0.5962293744087219,
        "codebertscore_s_f1-19": 0.8291107416152954,
        "codebertscore_s_f3-19": 0.8453421592712402,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 2,
        "raw_gpt35_nsnr-13": "2",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfunction file_name_check(file_name){\n",
        "snippet": [
            "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n"
        ],
        "simplified": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
        "task_id": "141",
        "3": "if (file_name.match(/[0-9]/g)===null || file_name.match(/[0-9]/g).length<4){\n\t\tif (file_name.match(/\\./g)===null || file_name.match(/\\./g).length==1){\n\t\t\tif (file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g)===null || file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g).length==1){\n\t\t\t\tvar ext = file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g)[0].split('.')[1];\n\t\t\t\tif (ext==\"txt\" || ext==\"exe\" || ext==\"dll\"){\n\t\t\t\t\treturn \"Yes\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"No\";\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var digits = 0;\n    var dot_counter = 0;\n    var dot_position = 0;\n    var dot_position_before = 0;\n    var dot_position_after = 0;\n    var valid_letters = ['txt', 'exe', 'dll'];\n    var i;\n    for (i = 0; i < file_name.length; i++) {\n        if (file_name[i] == '.') {\n            dot_counter++;\n            dot_position = i;\n        }\n        if ((file_name[i] > '0') && (file_name[i] < '9')) {\n            digits++;\n        }\n    }\n    dot_position_before = file_name.substring(0, dot_position);\n    dot_position_after = file_name.substring(dot_position + 1, file_name.length);\n    //console.log(dot_position_before);\n    //console.log(dot_position_after);\n    if ((digits > 3) || (dot_counter != 1) || (dot_position_before.length == 0) || ((dot_position_before[0] < 'a') || (dot_position_before[0] > 'z')) || ((dot_position_before[0] < 'A') || (dot_position_before[0] > 'Z')) || (valid_letters.indexOf(dot_position_after) == -1)) {\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const file_arr = file_name.split('.');\n    let count_digits = 0;\n    for(let i = 0; i < file_arr[0].length; i++){\n        if(file_arr[0][i] >= '0' && file_arr[0][i] <= '9'){\n            count_digits++;\n        }\n    }\n    if(count_digits >= 4){\n        return 'No';\n    }\n    if(file_arr.length !== 2){\n        return 'No';\n    }\n    if(file_arr[0][0] < 'a' || file_arr[0][0] > 'z'){\n        return 'No';\n    }\n    if(file_arr[1] !== 'txt' && file_arr[1] !== 'exe' && file_arr[1] !== 'dll'){\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//write your code here\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "file_name = file_name.split(\".\")\n    var file_name_check_result = 'Yes'\n    if(file_name.length>2){\n        file_name_check_result = 'No'\n    }else if(file_name[0].match(/[0-9]/gi) == null){\n        file_name_check_result = 'No'\n    }else if(file_name[0].match(/[0-9]/gi).length>3){\n        file_name_check_result = 'No'\n    }else if(file_name[1] != 'txt' && file_name[1] != 'exe' && file_name[1] != 'dll'){\n        file_name_check_result = 'No'\n    }\n    return file_name_check_result\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/\n  return regex.test(file_name) ? 'Yes' : 'No'\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (/^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{3}$/.test(file_name)){\n        return 'Yes';\n    }\n    return 'No';\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// create regular expressions\n    const reg = /^[a-zA-Z]+[0-9]{0,3}\\.txt$|^[a-zA-Z]+[0-9]{0,3}\\.exe$|^[a-zA-Z]+[0-9]{0,3}\\.dll$/\n    if(reg.test(file_name)){\n        return 'Yes'\n    }\n    return 'No'\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (file_name.match(/[a-zA-Z]\\w*\\.[a-zA-Z]{3}/)){\n\t\tif (file_name.match(/[0-9]{4}/)){\n\t\t\treturn 'No';\n\t\t}\n\t\treturn 'Yes';\n\t}\n\treturn 'No';\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(!/^[a-zA-Z]+([\\w.]+)?$/.test(file_name)){\n        return 'No';\n    }\n    const file_name_array = file_name.split('.');\n    const file_name_without_extension = file_name_array[0];\n    const file_extension = file_name_array[1];\n    if(file_name_without_extension.match(/\\d/g).length > 3 || !/^(txt|exe|dll)$/.test(file_extension)){\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var toReturn = false;\n    var digits = 0;\n    var i = 0;\n    while(i < file_name.length && digits <= 3){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digits++;\n        }\n        i++;\n    }\n    if(digits > 3){\n        return toReturn;\n    }\n    var dot = 0;\n    for(var j = 0; j < file_name.length; j++){\n        if(file_name[j] == '.'){\n            dot++;\n        }\n    }\n    if(dot != 1){\n        return toReturn;\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z' && file_name[0] < 'A' || file_name[0] > 'Z'){\n        return toReturn;\n    }\n    var first_dot_index = file_name.indexOf('.');\n    var sub_after_dot = file_name.substring(first_dot_index + 1);\n    if(sub_after_dot != 'txt' && sub_after_dot != 'exe' && sub_after_dot != 'dll'){\n        return toReturn;\n    }\n    toReturn = true;\n    return toReturn;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\tvar alphapet = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar file_types = [\"txt\",\"exe\",\"dll\"];\n\tvar count = 0;\n\tvar file_name_split = file_name.split(\".\");\n\tif(file_name_split.length!=2){\n\t\treturn \"No\";\n\t}\n\tvar file_type = file_name_split[1];\n\tvar count_type = 0;\n\tvar check_type = 0;\n\tfor(var i=0;i<file_types.length;i++){\n\t\tif(file_type===file_types[i]){\n\t\t\tcheck_type = 1;\n\t\t}\n\t}\n\tif(check_type===0){\n\t\treturn \"No\";\n\t}\n\tvar file_name = file_name_split[0];\n\tvar first_char = file_name[0];\n\tvar check_char = 0;\n\tfor(var i=0;i<alphapet.length;i++){\n\t\tif(first_char===alphapet[i]){\n\t\t\tcheck_char = 1;\n\t\t}\n\t}\n\tif(check_char===0){\n\t\treturn \"No\";\n\t}\n\tfor(var i=0;i<file_name.length;i++){\n\t\tvar char = file_name[i];\n\t\tfor(var j=0;j<digits.length;j++){\n\t\t\tif(char===digits[j]){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(count>3){\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let reg = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n    if(reg.test(file_name)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (file_name.match(/[0-9]/g) == null) {\n        return 'No';\n    }\n    if (file_name.match(/[0-9]/g).length > 3) {\n        return 'No';\n    }\n    if (file_name.match(/\\./g) == null) {\n        return 'No';\n    }\n    if (file_name.match(/\\./g).length != 1) {\n        return 'No';\n    }\n    var file_name_split = file_name.split('.');\n    if (file_name_split[0].length == 0) {\n        return 'No';\n    }\n    if (file_name_split[0].match(/[a-zA-Z]/g) == null) {\n        return 'No';\n    }\n    if (file_name_split[1] != 'txt' && file_name_split[1] != 'exe' && file_name_split[1] != 'dll') {\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "}",
        "grade-9": {
            "execution": 0
        },
        "4": "//'^([a-zA-Z][a-zA-Z0-9]{0,2})\\.((txt)|(exe)|(dll))$'\n\tlet reg = /^([a-zA-Z][a-zA-Z0-9]{0,2})\\.((txt)|(exe)|(dll))$/;\n\tlet res = reg.test(file_name);\n\tconsole.log(res);\n\tif(res){\n\t\treturn 'Yes';\n\t}\n\treturn 'No';\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "//your code here\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// Write your code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let regex = /^([a-zA-Z]{1}[a-zA-Z0-9]{0,12})\\.(txt|exe|dll)$/;\n  let str = file_name.match(regex);\n  if(str === null){\n    return \"No\";\n  }\n  return \"Yes\";\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.16310487185685332,
        "bleu-0": 0.1792895086690079,
        "bleu-8": 0.40965144011580457,
        "bleu-7": 3.432247746179523e-15,
        "bleu-16": 0.21038903983493992,
        "bleu-2": 0.004589239083236774,
        "bleu-11": 0.014844345620964624,
        "bleu-1": 0.04907398944954497,
        "bleu-10": 3.860335205164258e-97,
        "bleu-17": 0.03175380225686371,
        "bleu-12": 0.09369038573693364,
        "bleu-6": 0.21452168750070083,
        "bleu-18": 0.203960141246091,
        "bleu-15": 0.017457179564885194,
        "bleu-13": 0.3548440286801985,
        "bleu-9": 3.860335205164258e-97,
        "bleu-4": 0.04931682426934053,
        "bleu-14": 2.0973742551571636e-17,
        "bleu-5": 3.432247746179523e-15,
        "bleu-19": 0.025346822606127795,
        "codebleu-3": 0.45922345734878756,
        "codebleu-0": 0.5440339189305021,
        "codebleu-8": 0.5914354180370487,
        "codebleu-7": 0.013513513513513585,
        "codebleu-16": 0.38760897243856074,
        "codebleu-2": 0.10773504519230334,
        "codebleu-11": 0.12658195493257723,
        "codebleu-1": 0.20920576691808457,
        "codebleu-10": 0.0045045045045045045,
        "codebleu-17": 0.15239376442034255,
        "codebleu-12": 0.27058120564609717,
        "codebleu-6": 0.5957208545506901,
        "codebleu-18": 0.5810531439341355,
        "codebleu-15": 0.13883134666791155,
        "codebleu-13": 0.5829509639839029,
        "codebleu-9": 0.0045045045045045045,
        "codebleu-4": 0.21661943239114756,
        "codebleu-14": 0.01126126126126126,
        "codebleu-5": 0.013513513513513585,
        "codebleu-19": 0.16974071568496943,
        "chrf-3": 0.21823076818245016,
        "chrf-0": 0.25382847788558344,
        "chrf-8": 0.44712050385786234,
        "chrf-7": 0.015471274370302358,
        "chrf-16": 0.2788224318055131,
        "chrf-2": 0.0931590714892449,
        "chrf-11": 0.12121672476033202,
        "chrf-1": 0.15938327984904263,
        "chrf-10": 0.0037622272385252078,
        "chrf-17": 0.16476755832871126,
        "chrf-12": 0.24697457271501388,
        "chrf-6": 0.3090279870865569,
        "chrf-18": 0.28621895530735514,
        "chrf-15": 0.14023576537138352,
        "chrf-13": 0.4247545277567859,
        "chrf-9": 0.0037622272385252078,
        "chrf-4": 0.16877773326322007,
        "chrf-14": 0.012424147439919184,
        "chrf-5": 0.015471274370302358,
        "chrf-19": 0.12749351956714058,
        "rougel-3": 0.2831858407079646,
        "rougel-0": 0.31492842535787324,
        "rougel-8": 0.4223300970873787,
        "rougel-7": 0.026086956521739132,
        "rougel-16": 0.37777777777777777,
        "rougel-2": 0.1726618705035971,
        "rougel-11": 0.18881118881118883,
        "rougel-1": 0.2324159021406728,
        "rougel-10": 0.008928571428571428,
        "rougel-17": 0.23728813559322032,
        "rougel-12": 0.28402366863905326,
        "rougel-6": 0.32051282051282054,
        "rougel-18": 0.4007285974499089,
        "rougel-15": 0.2152777777777778,
        "rougel-13": 0.39631336405529954,
        "rougel-9": 0.008928571428571428,
        "rougel-4": 0.2735042735042736,
        "rougel-14": 0.026200873362445413,
        "rougel-5": 0.026086956521739132,
        "rougel-19": 0.24749163879598662,
        "meteor-3": 0.3602740953931429,
        "meteor-0": 0.4139946228674782,
        "meteor-8": 0.46789301376387465,
        "meteor-7": 0.0099304865938431,
        "meteor-16": 0.30616050868877565,
        "meteor-2": 0.10349543976041471,
        "meteor-11": 0.1335390033630199,
        "meteor-1": 0.18792073911516288,
        "meteor-10": 0.00249003984063745,
        "meteor-17": 0.17435555897094354,
        "meteor-12": 0.261218452193947,
        "meteor-6": 0.4225544225292557,
        "meteor-18": 0.46148067292228,
        "meteor-15": 0.13377836544427762,
        "meteor-13": 0.45645538841183203,
        "meteor-9": 0.00249003984063745,
        "meteor-4": 0.23571816952711672,
        "meteor-14": 0.009935419771485345,
        "meteor-5": 0.0099304865938431,
        "meteor-19": 0.18911997112953713,
        "ruby-3": 0.11790393013100442,
        "ruby-0": 0.19172932330827064,
        "ruby-8": 0.24663677130044848,
        "ruby-7": 0.013452914798206317,
        "ruby-16": 0.2376681614349776,
        "ruby-2": 0.09865470852017932,
        "ruby-11": 0.1076233183856502,
        "ruby-1": 0.1434977578475336,
        "ruby-10": 0.004484304932735439,
        "ruby-17": 0.13452914798206284,
        "ruby-12": 0.18385650224215244,
        "ruby-6": 0.16326530612244894,
        "ruby-18": 0.2668711656441718,
        "ruby-15": 0.12556053811659196,
        "ruby-13": 0.22421524663677128,
        "ruby-9": 0.004484304932735439,
        "ruby-4": 0.17040358744394624,
        "ruby-14": 0.013452914798206317,
        "ruby-5": 0.013452914798206317,
        "ruby-19": 0.15246636771300448,
        "codebertscore_f1-3": 0.738444447517395,
        "codebertscore_f3-3": 0.7409611940383911,
        "codebertscore_f1-0": 0.728602409362793,
        "codebertscore_f3-0": 0.7483459115028381,
        "codebertscore_f1-8": 0.8132049441337585,
        "codebertscore_f3-8": 0.8081710934638977,
        "codebertscore_f1-7": 0.5456023812294006,
        "codebertscore_f3-7": 0.5146041512489319,
        "codebertscore_f1-16": 0.778752326965332,
        "codebertscore_f3-16": 0.7672824263572693,
        "codebertscore_f1-2": 0.6823813319206238,
        "codebertscore_f3-2": 0.6585831046104431,
        "codebertscore_f1-11": 0.669883131980896,
        "codebertscore_f3-11": 0.6555687189102173,
        "codebertscore_f1-1": 0.6988562345504761,
        "codebertscore_f3-1": 0.6957268118858337,
        "codebertscore_f1-10": 0.0,
        "codebertscore_f3-10": 0.0,
        "codebertscore_f1-17": 0.693977415561676,
        "codebertscore_f3-17": 0.6679715514183044,
        "codebertscore_f1-12": 0.7564753293991089,
        "codebertscore_f3-12": 0.7477831840515137,
        "codebertscore_f1-6": 0.7380453944206238,
        "codebertscore_f3-6": 0.7465122938156128,
        "codebertscore_f1-18": 0.7381501793861389,
        "codebertscore_f3-18": 0.7548049092292786,
        "codebertscore_f1-15": 0.7010974884033203,
        "codebertscore_f3-15": 0.6847008466720581,
        "codebertscore_f1-13": 0.7752485871315002,
        "codebertscore_f3-13": 0.7594700455665588,
        "codebertscore_f1-9": 0.0,
        "codebertscore_f3-9": 0.0,
        "codebertscore_f1-4": 0.6978724598884583,
        "codebertscore_f3-4": 0.6976451277732849,
        "codebertscore_f1-14": 0.5345045924186707,
        "codebertscore_f3-14": 0.5087347030639648,
        "codebertscore_f1-5": 0.5465103983879089,
        "codebertscore_f3-5": 0.5151143074035645,
        "codebertscore_f1-19": 0.7166452407836914,
        "codebertscore_f3-19": 0.7049130797386169,
        "codebertscore_s_f1-3": 0.7457731366157532,
        "codebertscore_s_f3-3": 0.7470073699951172,
        "codebertscore_s_f1-0": 0.7460035085678101,
        "codebertscore_s_f3-0": 0.7618098258972168,
        "codebertscore_s_f1-8": 0.8338118195533752,
        "codebertscore_s_f3-8": 0.8247085809707642,
        "codebertscore_s_f1-7": 0.5353727340698242,
        "codebertscore_s_f3-7": 0.5102454423904419,
        "codebertscore_s_f1-16": 0.780852735042572,
        "codebertscore_s_f3-16": 0.7644036412239075,
        "codebertscore_s_f1-2": 0.7063608169555664,
        "codebertscore_s_f3-2": 0.685771644115448,
        "codebertscore_s_f1-11": 0.6962469816207886,
        "codebertscore_s_f3-11": 0.6871368288993835,
        "codebertscore_s_f1-1": 0.7027608752250671,
        "codebertscore_s_f3-1": 0.7006985545158386,
        "codebertscore_s_f1-10": 0.0,
        "codebertscore_s_f3-10": 0.0,
        "codebertscore_s_f1-17": 0.7137777805328369,
        "codebertscore_s_f3-17": 0.6883125901222229,
        "codebertscore_s_f1-12": 0.754594624042511,
        "codebertscore_s_f3-12": 0.747307538986206,
        "codebertscore_s_f1-6": 0.7618763446807861,
        "codebertscore_s_f3-6": 0.7631136775016785,
        "codebertscore_s_f1-18": 0.7639762759208679,
        "codebertscore_s_f3-18": 0.7776767015457153,
        "codebertscore_s_f1-15": 0.7149866819381714,
        "codebertscore_s_f3-15": 0.7003330588340759,
        "codebertscore_s_f1-13": 0.7980533242225647,
        "codebertscore_s_f3-13": 0.7782094478607178,
        "codebertscore_s_f1-9": 0.0,
        "codebertscore_s_f3-9": 0.0,
        "codebertscore_s_f1-4": 0.7045493125915527,
        "codebertscore_s_f3-4": 0.7055157423019409,
        "codebertscore_s_f1-14": 0.5241445899009705,
        "codebertscore_s_f3-14": 0.49901634454727173,
        "codebertscore_s_f1-5": 0.548115611076355,
        "codebertscore_s_f3-5": 0.5196622610092163,
        "codebertscore_s_f1-19": 0.7288221120834351,
        "codebertscore_s_f3-19": 0.7208197116851807,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "0",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nfunction right_angle_triangle(a, b, c){\n",
        "snippet": [
            "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "task_id": "157",
        "3": "// Your code here.\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let a1 = a*a;\n  let b1 = b*b;\n  let c1 = c*c;\n  if (c1 == a1 + b1 || b1 == a1 + c1 || a1 == b1 + c1){\n    return true;\n  }\n  return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(a>b && a>c){\n    return (a*a == b*b + c*c);\n  }\n  else if(b>a && b>c){\n    return (b*b == a*a + c*c);\n  }\n  else if(c>a && c>b){\n    return (c*c == a*a + b*b);\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var hyp = Math.max(a, b, c);\n    var opp = 0;\n    var adj = 0;\n    if (hyp === a) {\n        opp = b;\n        adj = c;\n    } else if (hyp === b) {\n        opp = a;\n        adj = c;\n    } else {\n        opp = a;\n        adj = b;\n    }\n    if (hyp * hyp === opp * opp + adj * adj) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2) || Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2)\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let x = Math.pow(a, 2) + Math.pow(b, 2);\n  let y = Math.pow(c, 2);\n  if (x == y) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let x = [a, b, c];\n    x.sort((a, b) => a - b);\n    return Math.pow(x[0], 2) + Math.pow(x[1], 2) === Math.pow(x[2], 2);\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "//your code here\n\treturn false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let hypotenuse = Math.max(a, b, c);\n    let sum = a + b + c;\n    let angle = (sum - hypotenuse) * (sum - hypotenuse);\n    let cSquare = hypotenuse * hypotenuse;\n    if(angle === cSquare){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var hypotenuse = Math.max(a, b, c);\n    var sumOfSquaresOfOtherSides = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(hypotenuse, 2);\n    return Math.pow(hypotenuse, 2) == sumOfSquaresOfOtherSides;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (is_pythagoras(a, b, c)){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(a > b && a > c){\n    return a*a == b*b + c*c;\n  }\n  if(b > a && b > c){\n    return b*b == a*a + c*c;\n  }\n  if(c > a && c > b){\n    return c*c == a*a + b*b;\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "// Code here\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var ab = Math.pow(a, 2);\n    var bc = Math.pow(b, 2);\n    var ac = Math.pow(c, 2);\n    var result = ab + bc;\n    if(result == ac){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if ((a*a) + (b*b) == (c*c)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(a > b && a > c){\n        return (a * a == (b * b) + (c * c));\n    }\n    else if(b > a && b > c){\n        return (b * b == (a * a) + (c * c));\n    }\n    else if(c > a && c > b){\n        return (c * c == (a * a) + (b * b));\n    }\n    else{\n        return false;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "// your code here\n    //var a = 3, b = 4, c = 5;\n    if(a <= 0 || b <= 0 || c <= 0){\n      return false;\n    }\n    var aSq = Math.pow(a, 2);\n    var bSq = Math.pow(b, 2);\n    var cSq = Math.pow(c, 2);\n    if(aSq + bSq == cSq || bSq + cSq == aSq || cSq + aSq == bSq){\n      return true;\n    }\n    return false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let max = Math.max(a, b, c);\n\tlet min = Math.min(a, b, c);\n\tlet mid = a + b + c - max - min;\n\treturn max * max === min * min + mid * mid;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let cSquare = c * c;\n    let aSquare = a * a;\n    let bSquare = b * b;\n    if (cSquare == aSquare + bSquare){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.0003325283196839315,
        "bleu-0": 0.16820331724686202,
        "bleu-8": 0.3560906894584023,
        "bleu-7": 0.0381811713420879,
        "bleu-16": 0.0246795217801595,
        "bleu-2": 0.02606726173778941,
        "bleu-11": 0.02426286211032334,
        "bleu-1": 0.001160497137440081,
        "bleu-10": 0.06508043809258746,
        "bleu-17": 0.02950992565117161,
        "bleu-12": 0.020731870502974602,
        "bleu-6": 0.021497096995755628,
        "bleu-18": 0.36621700167363275,
        "bleu-15": 4.376860814602419e-05,
        "bleu-13": 0.022611835350335095,
        "bleu-9": 0.14021325746034052,
        "bleu-4": 0.1734751078303976,
        "bleu-14": 0.04494223644231501,
        "bleu-5": 0.06979764932727964,
        "bleu-19": 0.18752563163300665,
        "codebleu-3": 0.042345623627249813,
        "codebleu-0": 0.5660629867369108,
        "codebleu-8": 0.7306447445393633,
        "codebleu-7": 0.44990079365079366,
        "codebleu-16": 0.4745370370370369,
        "codebleu-2": 0.32010582010582,
        "codebleu-11": 0.34804894179894175,
        "codebleu-1": 0.07450049231812303,
        "codebleu-10": 0.4077380952380952,
        "codebleu-17": 0.2332380682843149,
        "codebleu-12": 0.3551587301587301,
        "codebleu-6": 0.1423115962177114,
        "codebleu-18": 0.7429144738239122,
        "codebleu-15": 0.04232946501894156,
        "codebleu-13": 0.33763227513227506,
        "codebleu-9": 0.3059322278374693,
        "codebleu-4": 0.6684627825219974,
        "codebleu-14": 0.505787037037037,
        "codebleu-5": 0.4710648148148147,
        "codebleu-19": 0.4599910444256068,
        "chrf-3": 0.031637235680072914,
        "chrf-0": 0.26570739686549305,
        "chrf-8": 0.5458118767515986,
        "chrf-7": 0.13215543484827483,
        "chrf-16": 0.14051371932993523,
        "chrf-2": 0.11191662224905068,
        "chrf-11": 0.12643556810792522,
        "chrf-1": 0.09284101290266085,
        "chrf-10": 0.13598930540184567,
        "chrf-17": 0.11421285915597831,
        "chrf-12": 0.09673667045085117,
        "chrf-6": 0.10839781302216732,
        "chrf-18": 0.5127831844431824,
        "chrf-15": 0.016203555813294412,
        "chrf-13": 0.1460310103239712,
        "chrf-9": 0.18088316516362113,
        "chrf-4": 0.3053007666831261,
        "chrf-14": 0.15598993669082334,
        "chrf-5": 0.174274258904231,
        "chrf-19": 0.1915809973462311,
        "rougel-3": 0.0392156862745098,
        "rougel-0": 0.4444444444444445,
        "rougel-8": 0.46268656716417905,
        "rougel-7": 0.2638888888888889,
        "rougel-16": 0.31343283582089554,
        "rougel-2": 0.20833333333333331,
        "rougel-11": 0.1981981981981982,
        "rougel-1": 0.07547169811320754,
        "rougel-10": 0.2882882882882883,
        "rougel-17": 0.2168674698795181,
        "rougel-12": 0.18181818181818182,
        "rougel-6": 0.1791044776119403,
        "rougel-18": 0.47619047619047616,
        "rougel-15": 0.04081632653061225,
        "rougel-13": 0.20754716981132076,
        "rougel-9": 0.3896103896103896,
        "rougel-4": 0.40789473684210525,
        "rougel-14": 0.24705882352941178,
        "rougel-5": 0.31683168316831684,
        "rougel-19": 0.3913043478260869,
        "meteor-3": 0.01240694789081886,
        "meteor-0": 0.46400831813589793,
        "meteor-8": 0.6123456790123456,
        "meteor-7": 0.2810645161290324,
        "meteor-16": 0.3940359656171622,
        "meteor-2": 0.16469804067460317,
        "meteor-11": 0.21411435874057408,
        "meteor-1": 0.024691358024691357,
        "meteor-10": 0.26852810452849724,
        "meteor-17": 0.14609195402298847,
        "meteor-12": 0.1989049286469345,
        "meteor-6": 0.08353221957040573,
        "meteor-18": 0.6018763075313808,
        "meteor-15": 0.012468827930174564,
        "meteor-13": 0.18330585509312894,
        "meteor-9": 0.2729366987179487,
        "meteor-4": 0.5278087797619048,
        "meteor-14": 0.4593791539604348,
        "meteor-5": 0.3077439293598235,
        "meteor-19": 0.3139819819819821,
        "ruby-3": 0.022727272727272707,
        "ruby-0": 0.2545454545454545,
        "ruby-8": 0.33333333333333337,
        "ruby-7": 0.18999999999999995,
        "ruby-16": 0.21111111111111114,
        "ruby-2": 0.11538461538461542,
        "ruby-11": 0.14925373134328357,
        "ruby-1": 0.022727272727272707,
        "ruby-10": 0.16417910447761197,
        "ruby-17": 0.11363636363636365,
        "ruby-12": 0.10389610389610393,
        "ruby-6": 0.11363636363636365,
        "ruby-18": 0.3414634146341463,
        "ruby-15": 0.022727272727272707,
        "ruby-13": 0.12903225806451613,
        "ruby-9": 0.25,
        "ruby-4": 0.2870370370370371,
        "ruby-14": 0.16666666666666663,
        "ruby-5": 0.24561403508771928,
        "ruby-19": 0.14583333333333337,
        "codebertscore_f1-3": 0.6023910045623779,
        "codebertscore_f3-3": 0.5883530378341675,
        "codebertscore_f1-0": 0.8264034390449524,
        "codebertscore_f3-0": 0.8440245985984802,
        "codebertscore_f1-8": 0.8514842391014099,
        "codebertscore_f3-8": 0.8634620904922485,
        "codebertscore_f1-7": 0.7355125546455383,
        "codebertscore_f3-7": 0.7799902558326721,
        "codebertscore_f1-16": 0.7850525975227356,
        "codebertscore_f3-16": 0.8116040825843811,
        "codebertscore_f1-2": 0.7451379895210266,
        "codebertscore_f3-2": 0.7669287323951721,
        "codebertscore_f1-11": 0.7543027997016907,
        "codebertscore_f3-11": 0.7756860256195068,
        "codebertscore_f1-1": 0.6398179531097412,
        "codebertscore_f3-1": 0.629019021987915,
        "codebertscore_f1-10": 0.7505332231521606,
        "codebertscore_f3-10": 0.7850003242492676,
        "codebertscore_f1-17": 0.758303701877594,
        "codebertscore_f3-17": 0.7804199457168579,
        "codebertscore_f1-12": 0.729268491268158,
        "codebertscore_f3-12": 0.7735185027122498,
        "codebertscore_f1-6": 0.7462875843048096,
        "codebertscore_f3-6": 0.7602514028549194,
        "codebertscore_f1-18": 0.8630034923553467,
        "codebertscore_f3-18": 0.8705145120620728,
        "codebertscore_f1-15": 0.6182603240013123,
        "codebertscore_f3-15": 0.596504807472229,
        "codebertscore_f1-13": 0.7347416877746582,
        "codebertscore_f3-13": 0.7595888376235962,
        "codebertscore_f1-9": 0.8029863238334656,
        "codebertscore_f3-9": 0.8047400116920471,
        "codebertscore_f1-4": 0.8432061076164246,
        "codebertscore_f3-4": 0.8628886938095093,
        "codebertscore_f1-14": 0.744184672832489,
        "codebertscore_f3-14": 0.7816148996353149,
        "codebertscore_f1-5": 0.8013532757759094,
        "codebertscore_f3-5": 0.8293046355247498,
        "codebertscore_f1-19": 0.7988113164901733,
        "codebertscore_f3-19": 0.8228817582130432,
        "codebertscore_s_f1-3": 0.5649058818817139,
        "codebertscore_s_f3-3": 0.5536929965019226,
        "codebertscore_s_f1-0": 0.835390567779541,
        "codebertscore_s_f3-0": 0.8551786541938782,
        "codebertscore_s_f1-8": 0.8724812269210815,
        "codebertscore_s_f3-8": 0.8865114450454712,
        "codebertscore_s_f1-7": 0.7559047341346741,
        "codebertscore_s_f3-7": 0.8035715818405151,
        "codebertscore_s_f1-16": 0.7934470772743225,
        "codebertscore_s_f3-16": 0.8268798589706421,
        "codebertscore_s_f1-2": 0.7570233345031738,
        "codebertscore_s_f3-2": 0.7820695638656616,
        "codebertscore_s_f1-11": 0.7662068605422974,
        "codebertscore_s_f3-11": 0.7933062314987183,
        "codebertscore_s_f1-1": 0.6077818274497986,
        "codebertscore_s_f3-1": 0.5987969636917114,
        "codebertscore_s_f1-10": 0.7570450901985168,
        "codebertscore_s_f3-10": 0.7978305816650391,
        "codebertscore_s_f1-17": 0.771499752998352,
        "codebertscore_s_f3-17": 0.7918010950088501,
        "codebertscore_s_f1-12": 0.7360727787017822,
        "codebertscore_s_f3-12": 0.7857902646064758,
        "codebertscore_s_f1-6": 0.7576748728752136,
        "codebertscore_s_f3-6": 0.7751043438911438,
        "codebertscore_s_f1-18": 0.8759034276008606,
        "codebertscore_s_f3-18": 0.8862754702568054,
        "codebertscore_s_f1-15": 0.5868920683860779,
        "codebertscore_s_f3-15": 0.5629010200500488,
        "codebertscore_s_f1-13": 0.7460300922393799,
        "codebertscore_s_f3-13": 0.774544358253479,
        "codebertscore_s_f1-9": 0.8345931172370911,
        "codebertscore_s_f3-9": 0.8361276984214783,
        "codebertscore_s_f1-4": 0.8657124638557434,
        "codebertscore_s_f3-4": 0.8893764615058899,
        "codebertscore_s_f1-14": 0.7569307088851929,
        "codebertscore_s_f3-14": 0.8003214001655579,
        "codebertscore_s_f1-5": 0.8143079876899719,
        "codebertscore_s_f3-5": 0.846656322479248,
        "codebertscore_s_f1-19": 0.8119614124298096,
        "codebertscore_s_f3-19": 0.8386184573173523,
        "gpt35_nsnr-3": 0,
        "raw_gpt35_nsnr-3": "0",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 2,
        "raw_gpt35_nsnr-1": "2",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "0- The code snippet is empty and does not provide any implementation to solve the problem.",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "0",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n",
        "snippet": [
            "  return values.filter(x => Number.isInteger(x));\n}\n\n"
        ],
        "simplified": "Filter given list of any python values only for integers",
        "task_id": "22",
        "3": "return values.filter(function(value){\n        return typeof value === 'number' && value % 1 === 0;\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var integers = values.filter(function(v){\n    return typeof v === 'number' && v === parseInt(v, 10);\n  });\n  return integers;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return values.filter(x => typeof x === 'number' && x % 1 === 0);\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return values.filter(function(value){\n        return typeof value === 'number' && value % 1 === 0;\n    });\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "// your code here\n    let temp = [];\n    for(let x of values){\n        if(typeof x === 'number' && !isNaN(x)){\n            temp.push(x);\n        }\n    }\n    return temp;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var i, len = values.length, result = [];\n    for(i = 0; i < len; i++){\n        if(typeof values[i] === 'number' && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var integers = [];\n    for (var i = 0; i < values.length; i++){\n        if (typeof values[i] === 'number' && values[i] % 1 === 0){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return values.filter(isNumber)\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return values.filter(function(item){\n        return typeof item === 'number' && item % 1 === 0;\n    });\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "function filter_fn(val){\n        return isinstance(val, int);\n    }\n    return Array.prototype.filter.call(values, filter_fn);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "function filter_fn(value){\n        return (Number.isInteger(value));\n    }\n    return (values.filter(filter_fn));\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var b = [];\n    for(i in values){\n        if(typeof values[i] == \"number\"){\n            b.push(values[i]);\n        }\n    }\n    return b;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return _.filter(values, function(val){\n\t\treturn typeof val === 'number' && (val%1 === 0);\n\t});\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var results = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i] === 'number' && values[i] % 1 === 0){\n\t\t\tresults.push(values[i]);\n\t\t}\n\t}\n\treturn results;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var integer = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i] === 'number' && isNaN(values[i]) === false){\n\t\t\tinteger.push(values[i]);\n\t\t}\n\t}\n\treturn integer;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "const filteredArr = [];\n    for(let i = 0; i < values.length; i++){\n        if(typeof values[i] === 'number' && Number.isInteger(values[i])){\n            filteredArr.push(values[i]);\n        }\n    }\n    return filteredArr;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const arr = values.filter(value => typeof value === 'number' && !Number.isNaN(value));\n    return arr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "const filtered = values.filter(value => Number.isInteger(value));\n\treturn filtered;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// YOUR CODE HERE\n    return values.filter(n => typeof n == 'number' && Math.floor(n) == n);\n    throw `NotImplementedError: ${inspect(values)}`;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.15227260025365172,
        "bleu-0": 0.08852818280995221,
        "bleu-8": 0.2961516536011624,
        "bleu-7": 0.15227260025365172,
        "bleu-16": 0.07894703307568675,
        "bleu-2": 0.028591470484371433,
        "bleu-11": 0.030774639118157615,
        "bleu-1": 0.19018379497840202,
        "bleu-10": 0.15227260025365172,
        "bleu-17": 0.07077187862619301,
        "bleu-12": 0.28797065314199505,
        "bleu-6": 0.0428656685449481,
        "bleu-18": 0.07258558353107698,
        "bleu-15": 0.36852891195185467,
        "bleu-13": 0.030774639118157615,
        "bleu-9": 0.03007359970426977,
        "bleu-4": 0.07988114675551293,
        "bleu-14": 0.14397786194708664,
        "bleu-5": 0.43600387912116434,
        "bleu-19": 0.10179463955648423,
        "codebleu-3": 0.5447274257127733,
        "codebleu-0": 0.5570918618859498,
        "codebleu-8": 0.5282858119986611,
        "codebleu-7": 0.5447274257127733,
        "codebleu-16": 0.588828336930239,
        "codebleu-2": 0.5193486590038313,
        "codebleu-11": 0.5193486590038313,
        "codebleu-1": 0.35047863626525244,
        "codebleu-10": 0.5447274257127733,
        "codebleu-17": 0.5423371647509578,
        "codebleu-12": 0.6751981739910987,
        "codebleu-6": 0.4908045977011493,
        "codebleu-18": 0.5423371647509578,
        "codebleu-15": 0.6656360447122823,
        "codebleu-13": 0.5193486590038313,
        "codebleu-9": 0.5471264367816091,
        "codebleu-4": 0.5715510723519724,
        "codebleu-14": 0.7027319425084224,
        "codebleu-5": 0.8489125239148301,
        "codebleu-19": 0.6623680721099886,
        "chrf-3": 0.45016123762753224,
        "chrf-0": 0.42777474005044164,
        "chrf-8": 0.5554055109584415,
        "chrf-7": 0.45016123762753224,
        "chrf-16": 0.2966911368687907,
        "chrf-2": 0.2399059226908485,
        "chrf-11": 0.2841673927003244,
        "chrf-1": 0.5488614432714746,
        "chrf-10": 0.458873630354282,
        "chrf-17": 0.2899578919015742,
        "chrf-12": 0.5970428843071046,
        "chrf-6": 0.28062894752958106,
        "chrf-18": 0.3502384506916866,
        "chrf-15": 0.6956054770309692,
        "chrf-13": 0.2430156603393689,
        "chrf-9": 0.28923673648092496,
        "chrf-4": 0.42048527941404307,
        "chrf-14": 0.4761285060979141,
        "chrf-5": 0.6703254270427383,
        "chrf-19": 0.4120567110358397,
        "rougel-3": 0.3921568627450981,
        "rougel-0": 0.33333333333333326,
        "rougel-8": 0.5217391304347826,
        "rougel-7": 0.3921568627450981,
        "rougel-16": 0.3098591549295775,
        "rougel-2": 0.2,
        "rougel-11": 0.21176470588235297,
        "rougel-1": 0.5925925925925926,
        "rougel-10": 0.3921568627450981,
        "rougel-17": 0.33333333333333337,
        "rougel-12": 0.46808510638297873,
        "rougel-6": 0.2622950819672131,
        "rougel-18": 0.36363636363636365,
        "rougel-15": 0.6829268292682927,
        "rougel-13": 0.21176470588235297,
        "rougel-9": 0.22727272727272727,
        "rougel-4": 0.29545454545454547,
        "rougel-14": 0.5283018867924528,
        "rougel-5": 0.7317073170731708,
        "rougel-19": 0.3880597014925374,
        "meteor-3": 0.48557692307692313,
        "meteor-0": 0.47018807523009204,
        "meteor-8": 0.5284957957022736,
        "meteor-7": 0.48557692307692313,
        "meteor-16": 0.4932368296155672,
        "meteor-2": 0.3153193257359925,
        "meteor-11": 0.3444355443011808,
        "meteor-1": 0.3414915890549419,
        "meteor-10": 0.48557692307692313,
        "meteor-17": 0.46272382920110194,
        "meteor-12": 0.5994230152794101,
        "meteor-6": 0.3350131021971377,
        "meteor-18": 0.42853154662199894,
        "meteor-15": 0.7269718698290127,
        "meteor-13": 0.3222040271712761,
        "meteor-9": 0.3618710415200562,
        "meteor-4": 0.43611111111111117,
        "meteor-14": 0.7036661026508743,
        "meteor-5": 0.8516680743243241,
        "meteor-19": 0.454589418705871,
        "ruby-3": 0.2727272727272727,
        "ruby-0": 0.23809523809523814,
        "ruby-8": 0.4285714285714286,
        "ruby-7": 0.2727272727272727,
        "ruby-16": 0.2075471698113207,
        "ruby-2": 0.125,
        "ruby-11": 0.11940298507462688,
        "ruby-1": 0.4444444444444444,
        "ruby-10": 0.2727272727272727,
        "ruby-17": 0.19999999999999996,
        "ruby-12": 0.31034482758620685,
        "ruby-6": 0.16279069767441856,
        "ruby-18": 0.2702702702702703,
        "ruby-15": 0.6086956521739131,
        "ruby-13": 0.11940298507462688,
        "ruby-9": 0.1428571428571429,
        "ruby-4": 0.18571428571428572,
        "ruby-14": 0.4,
        "ruby-5": 0.6521739130434783,
        "ruby-19": 0.24489795918367352,
        "codebertscore_f1-3": 0.8200196027755737,
        "codebertscore_f3-3": 0.8472658395767212,
        "codebertscore_f1-0": 0.8140288591384888,
        "codebertscore_f3-0": 0.8360866904258728,
        "codebertscore_f1-8": 0.8664732575416565,
        "codebertscore_f3-8": 0.8926012516021729,
        "codebertscore_f1-7": 0.8200196027755737,
        "codebertscore_f3-7": 0.8472658395767212,
        "codebertscore_f1-16": 0.7580526471138,
        "codebertscore_f3-16": 0.7990002632141113,
        "codebertscore_f1-2": 0.7273079752922058,
        "codebertscore_f3-2": 0.7418093085289001,
        "codebertscore_f1-11": 0.7353876233100891,
        "codebertscore_f3-11": 0.7477667927742004,
        "codebertscore_f1-1": 0.8870912194252014,
        "codebertscore_f3-1": 0.8663613796234131,
        "codebertscore_f1-10": 0.8240236639976501,
        "codebertscore_f3-10": 0.8516236543655396,
        "codebertscore_f1-17": 0.7882432341575623,
        "codebertscore_f3-17": 0.8206527829170227,
        "codebertscore_f1-12": 0.8540979623794556,
        "codebertscore_f3-12": 0.8869315981864929,
        "codebertscore_f1-6": 0.7510669827461243,
        "codebertscore_f3-6": 0.7612570524215698,
        "codebertscore_f1-18": 0.8170355558395386,
        "codebertscore_f3-18": 0.8424669504165649,
        "codebertscore_f1-15": 0.931179940700531,
        "codebertscore_f3-15": 0.9478760361671448,
        "codebertscore_f1-13": 0.7431632876396179,
        "codebertscore_f3-13": 0.7561719417572021,
        "codebertscore_f1-9": 0.753573477268219,
        "codebertscore_f3-9": 0.7733708620071411,
        "codebertscore_f1-4": 0.7749010920524597,
        "codebertscore_f3-4": 0.8164286613464355,
        "codebertscore_f1-14": 0.8565344214439392,
        "codebertscore_f3-14": 0.8866798281669617,
        "codebertscore_f1-5": 0.9267677664756775,
        "codebertscore_f3-5": 0.9429604411125183,
        "codebertscore_f1-19": 0.7808829545974731,
        "codebertscore_f3-19": 0.8233609795570374,
        "codebertscore_s_f1-3": 0.8139872550964355,
        "codebertscore_s_f3-3": 0.8472028970718384,
        "codebertscore_s_f1-0": 0.8113109469413757,
        "codebertscore_s_f3-0": 0.8413105607032776,
        "codebertscore_s_f1-8": 0.8604612350463867,
        "codebertscore_s_f3-8": 0.8895269632339478,
        "codebertscore_s_f1-7": 0.8139872550964355,
        "codebertscore_s_f3-7": 0.8472028970718384,
        "codebertscore_s_f1-16": 0.7581826448440552,
        "codebertscore_s_f3-16": 0.8070335388183594,
        "codebertscore_s_f1-2": 0.7159056067466736,
        "codebertscore_s_f3-2": 0.7341750264167786,
        "codebertscore_s_f1-11": 0.7282800674438477,
        "codebertscore_s_f3-11": 0.7445424199104309,
        "codebertscore_s_f1-1": 0.8961471319198608,
        "codebertscore_s_f3-1": 0.8735208511352539,
        "codebertscore_s_f1-10": 0.8151552677154541,
        "codebertscore_s_f3-10": 0.84876549243927,
        "codebertscore_s_f1-17": 0.7881197929382324,
        "codebertscore_s_f3-17": 0.828098714351654,
        "codebertscore_s_f1-12": 0.8714674115180969,
        "codebertscore_s_f3-12": 0.9144814610481262,
        "codebertscore_s_f1-6": 0.7536454200744629,
        "codebertscore_s_f3-6": 0.7686995267868042,
        "codebertscore_s_f1-18": 0.8142815828323364,
        "codebertscore_s_f3-18": 0.8465545177459717,
        "codebertscore_s_f1-15": 0.9329884648323059,
        "codebertscore_s_f3-15": 0.9523679614067078,
        "codebertscore_s_f1-13": 0.7420951128005981,
        "codebertscore_s_f3-13": 0.7563831210136414,
        "codebertscore_s_f1-9": 0.7500960826873779,
        "codebertscore_s_f3-9": 0.7737770676612854,
        "codebertscore_s_f1-4": 0.7677256464958191,
        "codebertscore_s_f3-4": 0.8186197280883789,
        "codebertscore_s_f1-14": 0.8581534624099731,
        "codebertscore_s_f3-14": 0.8953177332878113,
        "codebertscore_s_f1-5": 0.9248572587966919,
        "codebertscore_s_f3-5": 0.9484535455703735,
        "codebertscore_s_f1-19": 0.7861762046813965,
        "codebertscore_s_f3-19": 0.8416029214859009,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"hello\",\"ell\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n// cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\") => False\n// cycpattern_check(\"himenss\",\"simen\") => True\nfunction cycpattern_check(a, b){\n",
        "snippet": [
            "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n"
        ],
        "simplified": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
        "task_id": "154",
        "3": "b_arr = b.split('');\n    for(let i = 0; i < b_arr.length; i++){\n        b_arr.push(b_arr.shift());\n        if(a.includes(b_arr.join(''))){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "b = b.split('');\n   for(var i = 0; i < b.length; i++){\n      var temp = b.shift();\n      b.push(temp);\n      if(a.indexOf(b.join('')) != -1){\n         return true;\n      }\n   }\n   return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let i = 0;\n  let rot = b.split('');\n  let final = '';\n  while(i < rot.length){\n    let x = rot.pop();\n    rot.unshift(x);\n    final = rot.join('');\n    if(a.includes(final)) return true;\n    i++;\n  }\n  return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (a.includes(b)) {\n        return true;\n    }\n    for (let i = 0; i < b.length; i++) {\n        let letters = b.split('');\n        let letter = letters.splice(0, 1);\n        let newB = letters.join('') + letter;\n        if (a.includes(newB)) {\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let originalWord = b;\n    let newWord = b;\n    for(let i = 0; i < b.length; i++){\n        if(a.includes(newWord)){\n            return true;\n        }\n        newWord = newWord.substring(1) + newWord.substring(0,1);\n    }\n    return false;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "return a.includes(b) || a.includes(b.slice(1) + b[0]);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let rotate = b.slice(1) + b[0];\n    if(a.indexOf(b) === -1 && a.indexOf(rotate) === -1){\n        return false;\n    }\n    else {\n        return true;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let s = b + b;\n    return s.includes(a);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var c = \"\";\n  var j = 0;\n  if(a.length < b.length){\n    return false;\n  }\n  while(j < b.length){\n    c += b.charAt(j);\n    j++;\n  }\n  while(c != b){\n    if(a.includes(c)){\n      return true;\n    }\n    var d = c.charAt(0);\n    c = c.slice(1, c.length);\n    c += d;\n  }\n  return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (a.length < b.length) {\n        return false;\n    }\n    let bRots = [b];\n    for (let i = 0; i < b.length - 1; i++) {\n        bRots.push(bRots[i].slice(1) + bRots[i][0]);\n    }\n    for (let i = 0; i < bRots.length; i++) {\n        if (a.includes(bRots[i])) {\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return a.includes(b.substring(b.length-1) + b.substring(0, b.length-1));\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var pat = b + b;\n    console.log(pat);\n    return pat.indexOf(a) != -1 ? true : false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (a.length != b.length) {\n    return false;\n  }\n  let aRepeat = a.repeat(2);\n  return aRepeat.includes(b);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var n = a.length;\n    var m = b.length;\n    if(n<m){\n        return false;\n    }\n    if(n==m){\n        if(a==b){\n            return true;\n        }\n        return false;\n    }\n    var bb = b+b;\n    return bb.indexOf(a)>=0;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var long,short;\n  if(a.length > b.length){\n    long = a;\n    short = b;\n  }else{\n    long = b;\n    short = a;\n  }\n  var short_length = short.length;\n  var short_first_letter = short[0];\n  for(var i = 0; i < long.length; i++){\n    if(long[i] == short_first_letter){\n      if(long.substring(i,i+short_length) == short){\n        return true;\n      }\n    }\n  }\n  var short_last_letter = short[short_length-1];\n  for(var i = 0; i < long.length; i++){\n    if(long[i] == short_last_letter){\n      if(long.substring(i-short_length+1,i+1) == short){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var new_b = b.slice(b.length-1) + b.slice(0, b.length-1);\n     if(a.indexOf(b)>-1){\n          return true;\n     }\n     else if(a.indexOf(new_b)>-1){\n          return true;\n     }\n     else{\n          return false;\n     }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return b + b.repeat(2).includes(a);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var c = '';\n    for(var i = 0; i < b.length; i++){\n        c = b.slice(i, b.length) + b.slice(0, i);\n        if(a.includes(c)){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var i = 0;\n    while(i<a.length){\n        var letter = a[i];\n        var j = b.indexOf(letter);\n        if(j==-1){\n            i++;\n            continue;\n        }\n        var sub1 = b.substring(j) + b.substring(0,j);\n        if(a.indexOf(sub1)>-1){\n            return true;\n        }\n        else{\n            i++;\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var length= a.length;\n    for(var i=0; i<length; i++){\n        if(a.indexOf(b)>-1){\n            return true;\n        }\n        else{\n            a=a.charAt(length-1)+a.substring(0,length-1);\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.16162636446813244,
        "bleu-0": 0.17227040398184432,
        "bleu-8": 0.10555466960939665,
        "bleu-7": 0.22019321378213388,
        "bleu-16": 0.19613007558624754,
        "bleu-2": 0.003328621003563788,
        "bleu-11": 0.05026286020992757,
        "bleu-1": 0.0005828599183140748,
        "bleu-10": 0.16362164584236752,
        "bleu-17": 0.30096785919769903,
        "bleu-12": 0.00904920615982432,
        "bleu-6": 0.015064551353919677,
        "bleu-18": 0.023893425646217686,
        "bleu-15": 0.13124640437970703,
        "bleu-13": 0.17680152402896873,
        "bleu-9": 0.08287162651477212,
        "bleu-4": 0.00041214420072171966,
        "bleu-14": 0.15119497812825397,
        "bleu-5": 0.18479387579773074,
        "bleu-19": 0.1853889521950639,
        "codebleu-3": 0.29659239799373166,
        "codebleu-0": 0.3410788380176624,
        "codebleu-8": 0.33662216573247616,
        "codebleu-7": 0.41588523591253734,
        "codebleu-16": 0.3618050033284167,
        "codebleu-2": 0.11525952504071983,
        "codebleu-11": 0.2444944089705503,
        "codebleu-1": 0.08875852303492973,
        "codebleu-10": 0.46220024666291215,
        "codebleu-17": 0.5637150238571157,
        "codebleu-12": 0.12050419548720873,
        "codebleu-6": 0.14881400555350344,
        "codebleu-18": 0.14971364481147453,
        "codebleu-15": 0.34145347471972903,
        "codebleu-13": 0.6074652814765217,
        "codebleu-9": 0.2952737687397218,
        "codebleu-4": 0.07178374258440905,
        "codebleu-14": 0.3288372050871704,
        "codebleu-5": 0.46289731261822853,
        "codebleu-19": 0.37791133931319376,
        "chrf-3": 0.3037562065618989,
        "chrf-0": 0.29200666507005,
        "chrf-8": 0.2799314888709019,
        "chrf-7": 0.3440699284136874,
        "chrf-16": 0.3254328281942344,
        "chrf-2": 0.07198364993515347,
        "chrf-11": 0.22401221363104307,
        "chrf-1": 0.06315029778725399,
        "chrf-10": 0.30481809547344524,
        "chrf-17": 0.40629109995363316,
        "chrf-12": 0.13971109290002043,
        "chrf-6": 0.1354638368673086,
        "chrf-18": 0.236570183198117,
        "chrf-15": 0.2971900454360106,
        "chrf-13": 0.31321453710398944,
        "chrf-9": 0.2685713247802781,
        "chrf-4": 0.06402903916872096,
        "chrf-14": 0.3042281763699437,
        "chrf-5": 0.30645078955868393,
        "chrf-19": 0.3332099489359811,
        "rougel-3": 0.4114285714285715,
        "rougel-0": 0.4108108108108108,
        "rougel-8": 0.34920634920634924,
        "rougel-7": 0.42000000000000004,
        "rougel-16": 0.4065934065934066,
        "rougel-2": 0.17391304347826086,
        "rougel-11": 0.31137724550898205,
        "rougel-1": 0.1732283464566929,
        "rougel-10": 0.3211009174311926,
        "rougel-17": 0.5112107623318386,
        "rougel-12": 0.21126760563380287,
        "rougel-6": 0.2517482517482518,
        "rougel-18": 0.22972972972972974,
        "rougel-15": 0.3333333333333333,
        "rougel-13": 0.4366197183098591,
        "rougel-9": 0.34065934065934067,
        "rougel-4": 0.15748031496062992,
        "rougel-14": 0.3977272727272727,
        "rougel-5": 0.37320574162679426,
        "rougel-19": 0.38251366120218583,
        "meteor-3": 0.2903048958686642,
        "meteor-0": 0.3273714177539609,
        "meteor-8": 0.27110056512718234,
        "meteor-7": 0.3422995174632353,
        "meteor-16": 0.3177708344854283,
        "meteor-2": 0.1023391812865497,
        "meteor-11": 0.23569386236340134,
        "meteor-1": 0.06403940886699507,
        "meteor-10": 0.3494012527500191,
        "meteor-17": 0.44116217177273287,
        "meteor-12": 0.13335473000080236,
        "meteor-6": 0.11639185257032007,
        "meteor-18": 0.14910295681979355,
        "meteor-15": 0.23408239700374533,
        "meteor-13": 0.45912256994782374,
        "meteor-9": 0.2680374797250328,
        "meteor-4": 0.06403940886699507,
        "meteor-14": 0.31552094522019336,
        "meteor-5": 0.39144201982238364,
        "meteor-19": 0.3281976005392295,
        "ruby-3": 0.3063063063063063,
        "ruby-0": 0.33333333333333337,
        "ruby-8": 0.19819819819819817,
        "ruby-7": 0.28828828828828834,
        "ruby-16": 0.29729729729729726,
        "ruby-2": 0.10810810810810811,
        "ruby-11": 0.2072072072072072,
        "ruby-1": 0.09909909909909909,
        "ruby-10": 0.15315315315315314,
        "ruby-17": 0.3125,
        "ruby-12": 0.12612612612612617,
        "ruby-6": 0.15315315315315314,
        "ruby-18": 0.14414414414414412,
        "ruby-15": 0.18018018018018023,
        "ruby-13": 0.3005780346820809,
        "ruby-9": 0.2072072072072072,
        "ruby-4": 0.09009009009009006,
        "ruby-14": 0.3063063063063063,
        "ruby-5": 0.18018018018018023,
        "ruby-19": 0.29729729729729726,
        "codebertscore_f1-3": 0.791199803352356,
        "codebertscore_f3-3": 0.7829483151435852,
        "codebertscore_f1-0": 0.7903863191604614,
        "codebertscore_f3-0": 0.7813693284988403,
        "codebertscore_f1-8": 0.781787633895874,
        "codebertscore_f3-8": 0.7745568752288818,
        "codebertscore_f1-7": 0.8191507458686829,
        "codebertscore_f3-7": 0.8189619183540344,
        "codebertscore_f1-16": 0.8020046949386597,
        "codebertscore_f3-16": 0.8088777661323547,
        "codebertscore_f1-2": 0.6997581124305725,
        "codebertscore_f3-2": 0.6700416803359985,
        "codebertscore_f1-11": 0.7388567328453064,
        "codebertscore_f3-11": 0.7250701189041138,
        "codebertscore_f1-1": 0.7256295680999756,
        "codebertscore_f3-1": 0.680560290813446,
        "codebertscore_f1-10": 0.7892633080482483,
        "codebertscore_f3-10": 0.7866664528846741,
        "codebertscore_f1-17": 0.8268319368362427,
        "codebertscore_f3-17": 0.8365585207939148,
        "codebertscore_f1-12": 0.7084825038909912,
        "codebertscore_f3-12": 0.680375337600708,
        "codebertscore_f1-6": 0.7289353609085083,
        "codebertscore_f3-6": 0.6980377435684204,
        "codebertscore_f1-18": 0.740593671798706,
        "codebertscore_f3-18": 0.7036457657814026,
        "codebertscore_f1-15": 0.7750998735427856,
        "codebertscore_f3-15": 0.744769275188446,
        "codebertscore_f1-13": 0.7705254554748535,
        "codebertscore_f3-13": 0.790096640586853,
        "codebertscore_f1-9": 0.7565093636512756,
        "codebertscore_f3-9": 0.7366947531700134,
        "codebertscore_f1-4": 0.6789016127586365,
        "codebertscore_f3-4": 0.6505793929100037,
        "codebertscore_f1-14": 0.8161509037017822,
        "codebertscore_f3-14": 0.797356903553009,
        "codebertscore_f1-5": 0.7783879041671753,
        "codebertscore_f3-5": 0.7851694226264954,
        "codebertscore_f1-19": 0.7935628294944763,
        "codebertscore_f3-19": 0.7967338562011719,
        "codebertscore_s_f1-3": 0.7973086833953857,
        "codebertscore_s_f3-3": 0.79339599609375,
        "codebertscore_s_f1-0": 0.8015653491020203,
        "codebertscore_s_f3-0": 0.7936498522758484,
        "codebertscore_s_f1-8": 0.7873057723045349,
        "codebertscore_s_f3-8": 0.7816112041473389,
        "codebertscore_s_f1-7": 0.8214602470397949,
        "codebertscore_s_f3-7": 0.8243709802627563,
        "codebertscore_s_f1-16": 0.803143322467804,
        "codebertscore_s_f3-16": 0.811095118522644,
        "codebertscore_s_f1-2": 0.7114580273628235,
        "codebertscore_s_f3-2": 0.6781699657440186,
        "codebertscore_s_f1-11": 0.7516546249389648,
        "codebertscore_s_f3-11": 0.7386906147003174,
        "codebertscore_s_f1-1": 0.7324062585830688,
        "codebertscore_s_f3-1": 0.6799746155738831,
        "codebertscore_s_f1-10": 0.7928432822227478,
        "codebertscore_s_f3-10": 0.7903757095336914,
        "codebertscore_s_f1-17": 0.8276510238647461,
        "codebertscore_s_f3-17": 0.840576708316803,
        "codebertscore_s_f1-12": 0.7243919968605042,
        "codebertscore_s_f3-12": 0.6920492053031921,
        "codebertscore_s_f1-6": 0.7312116622924805,
        "codebertscore_s_f3-6": 0.6970474720001221,
        "codebertscore_s_f1-18": 0.7492883801460266,
        "codebertscore_s_f3-18": 0.711083173751831,
        "codebertscore_s_f1-15": 0.7793087363243103,
        "codebertscore_s_f3-15": 0.752562403678894,
        "codebertscore_s_f1-13": 0.7808051109313965,
        "codebertscore_s_f3-13": 0.7956079840660095,
        "codebertscore_s_f1-9": 0.7660075426101685,
        "codebertscore_s_f3-9": 0.7490942478179932,
        "codebertscore_s_f1-4": 0.6810745596885681,
        "codebertscore_s_f3-4": 0.6430678367614746,
        "codebertscore_s_f1-14": 0.8235496282577515,
        "codebertscore_s_f3-14": 0.8068744540214539,
        "codebertscore_s_f1-5": 0.7854253053665161,
        "codebertscore_s_f3-5": 0.7933458089828491,
        "codebertscore_s_f1-19": 0.800670325756073,
        "codebertscore_s_f3-19": 0.8051514625549316,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunction count_distinct_characters(string){\n",
        "snippet": [
            "  return (new Set(string.toLowerCase())).size;\n\n}\n\n"
        ],
        "simplified": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "task_id": "16",
        "3": "var char_dict = {}\n  for (var i = 0; i < string.length; i++){\n    char_dict[string[i].toLowerCase()] = 0\n  }\n  return Object.keys(char_dict).length\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var strArray = string.split('');\n  var uniqueArray = strArray.filter(function(item, pos) {\n    return strArray.indexOf(item) == pos;\n  })\n  return uniqueArray.length;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const uniq = [...new Set(string.toLowerCase())]\n    return uniq.length\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return new Set(string.toLowerCase()).size;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var str = string.toLowerCase();\n    var out = new Set();\n    for (var i = 0; i < str.length; i++){\n        out.add(str[i]);\n    }\n    return out.size;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var array=string.split(\"\");\n    return new Set(array).size;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let chars = string.toLowerCase().split('');\n    return new Set(chars).size;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var output = 0;\n    var str = string.toLowerCase();\n    for(var i = 0; i < str.length; i++){\n        if(str.lastIndexOf(str[i]) == str.indexOf(str[i])){\n            output++;\n        }\n    }\n    return output;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var count = 0;\n  var letter_list = [];\n  for (var i = 0; i < string.length; i++){\n    if (letter_list.indexOf(string[i].toLowerCase()) < 0){\n      letter_list.push(string[i].toLowerCase());\n      count ++;\n    }\n  }\n  return count;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var distinct = [];\n\tfor (var i = 0; i < string.length; i++) {\n\t\tvar letter = string[i].toLowerCase();\n\t\tif(distinct.indexOf(letter) === -1){\n\t\t\tdistinct.push(letter);\n\t\t}\n\t}\n\treturn distinct.length;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let array = string.split('');\n    let distinctCharacters = new Set(array);\n    return distinctCharacters.size;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return (string.split('').sort().join('').match(/(.)\\1*/g).length);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var allCharacters = string.split('');\n    var distinctCharacters = [];\n    for (var i = 0; i < allCharacters.length; i++){\n        if (distinctCharacters.indexOf(allCharacters[i].toLowerCase()) == -1){\n            distinctCharacters.push(allCharacters[i].toLowerCase());\n        }\n    }\n    return distinctCharacters.length;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var splitString = string.split(\"\");\n\tvar newArray = [];\n\tvar count = 0;\n\tfor(var i = 0; i < splitString.length; i++){\n\t\tif(newArray.indexOf(splitString[i]) === -1){\n\t\t\tnewArray.push(splitString[i]);\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//Convert string to lower case, then split it into array of characters\n    var string_array = string.toLowerCase().split('');\n    //get unique characters\n    var unique_array = string_array.filter(function(item, pos) {\n        return string_array.indexOf(item) == pos;\n    });\n    return unique_array.length;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// Declare a new Set called count_distinct_characters\n  let count_distinct_characters = new Set();\n  // Loop over the characters in the string\n  for (let char of string){\n    // Add each character to the count_distinct_characters set\n    count_distinct_characters.add(char);\n  }\n  // Return the size of the set\n  return count_distinct_characters.size;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//solution 1:\n    // var lower = string.toLowerCase().split('');\n    // return lower.filter(function(elem, index, self){\n    //     return index == self.indexOf(elem);\n    // }).length;\n\n    //solution 2:\n    return string.length == [...new Set(string.toLowerCase())].length;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "//your code goes here, return an integer\n    var allLetters = [];\n    var distinctLetters = [];\n    for (var i = 0; i < string.length; i++) {\n      allLetters.push(string[i].toLowerCase());\n    }\n    for (var i = 0; i < allLetters.length; i++) {\n      if (distinctLetters.indexOf(allLetters[i]) === -1) {\n        distinctLetters.push(allLetters[i]);\n      }\n    }\n    return distinctLetters.length;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var count = 0;\n\tvar characters = [];\n\tfor (var i = 0; i < string.length; i++) {\n\t\tif (characters.indexOf(string[i].toLowerCase()) == -1) {\n\t\t\tcharacters.push(string[i].toLowerCase());\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let count=0;\n    let str=string.toLowerCase();\n    for(let i=0;i<str.length;i++){\n        if(str.indexOf(str[i])===i){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.12546407368904075,
        "bleu-0": 0.02714276075887314,
        "bleu-8": 0.4458819273326583,
        "bleu-7": 0.8166548512478093,
        "bleu-16": 0.17972997260281903,
        "bleu-2": 0.26681730651789676,
        "bleu-11": 0.407933890315047,
        "bleu-1": 0.10072197021467627,
        "bleu-10": 0.09803496283564339,
        "bleu-17": 0.08827717992122507,
        "bleu-12": 0.1477219991186121,
        "bleu-6": 0.06903396668678424,
        "bleu-18": 0.08054744999594668,
        "bleu-15": 0.01758631979186398,
        "bleu-13": 0.0992929277423239,
        "bleu-9": 0.06592309822529722,
        "bleu-4": 0.12165367474442328,
        "bleu-14": 0.06032426578769571,
        "bleu-5": 0.09550449463027313,
        "bleu-19": 0.11191121918143379,
        "codebleu-3": 0.6092945173320118,
        "codebleu-0": 0.590347923681257,
        "codebleu-8": 0.7045044514129064,
        "codebleu-7": 0.7883393122999102,
        "codebleu-16": 0.6657574645696056,
        "codebleu-2": 0.593010516293948,
        "codebleu-11": 0.7531741669043597,
        "codebleu-1": 0.629862191444309,
        "codebleu-10": 0.6047229988564455,
        "codebleu-17": 0.6030967017040425,
        "codebleu-12": 0.5731612983940672,
        "codebleu-6": 0.590347923681257,
        "codebleu-18": 0.6018084133831628,
        "codebleu-15": 0.5485409652076318,
        "codebleu-13": 0.6790067337482997,
        "codebleu-9": 0.6316381370218368,
        "codebleu-4": 0.7472677561162141,
        "codebleu-14": 0.5984378826817875,
        "codebleu-5": 0.6043012541555505,
        "codebleu-19": 0.6317270662721021,
        "chrf-3": 0.3864318801398319,
        "chrf-0": 0.21176725663281565,
        "chrf-8": 0.6734829707060248,
        "chrf-7": 0.8696084495951415,
        "chrf-16": 0.5798215246153573,
        "chrf-2": 0.4420142571569349,
        "chrf-11": 0.6896335212281605,
        "chrf-1": 0.39648926904664283,
        "chrf-10": 0.3537472536962114,
        "chrf-17": 0.3389424725362643,
        "chrf-12": 0.3671260405091634,
        "chrf-6": 0.30374816636515267,
        "chrf-18": 0.2787983663826313,
        "chrf-15": 0.1989911581274768,
        "chrf-13": 0.2993742927094027,
        "chrf-9": 0.2150982326285844,
        "chrf-4": 0.40704412460863393,
        "chrf-14": 0.256614418802202,
        "chrf-5": 0.3523635019269026,
        "chrf-19": 0.43038887977157425,
        "rougel-3": 0.3283582089552239,
        "rougel-0": 0.2647058823529412,
        "rougel-8": 0.619047619047619,
        "rougel-7": 0.9411764705882353,
        "rougel-16": 0.3611111111111111,
        "rougel-2": 0.4615384615384615,
        "rougel-11": 0.5777777777777777,
        "rougel-1": 0.2696629213483146,
        "rougel-10": 0.2947368421052632,
        "rougel-17": 0.29885057471264365,
        "rougel-12": 0.391304347826087,
        "rougel-6": 0.39999999999999997,
        "rougel-18": 0.2385321100917431,
        "rougel-15": 0.19230769230769232,
        "rougel-13": 0.26666666666666666,
        "rougel-9": 0.2682926829268293,
        "rougel-4": 0.29090909090909095,
        "rougel-14": 0.2158273381294964,
        "rougel-5": 0.28865979381443296,
        "rougel-19": 0.27499999999999997,
        "meteor-3": 0.5289099526066351,
        "meteor-0": 0.348041142557652,
        "meteor-8": 0.7355442176870749,
        "meteor-7": 0.8959137991573032,
        "meteor-16": 0.7098765432098766,
        "meteor-2": 0.6549293497591102,
        "meteor-11": 0.8437030504931741,
        "meteor-1": 0.5168335717691941,
        "meteor-10": 0.5598326359832638,
        "meteor-17": 0.4831168831168831,
        "meteor-12": 0.6044845842416693,
        "meteor-6": 0.37077749860413184,
        "meteor-18": 0.5288537549407116,
        "meteor-15": 0.31804733727810647,
        "meteor-13": 0.47692307692307706,
        "meteor-9": 0.518096653761062,
        "meteor-4": 0.6459281257662861,
        "meteor-14": 0.3943462897526502,
        "meteor-5": 0.5551867219917013,
        "meteor-19": 0.49821428571428583,
        "ruby-3": 0.20408163265306123,
        "ruby-0": 0.18000000000000005,
        "ruby-8": 0.5,
        "ruby-7": 0.8888888888888888,
        "ruby-16": 0.20370370370370372,
        "ruby-2": 0.2857142857142857,
        "ruby-11": 0.40740740740740744,
        "ruby-1": 0.16901408450704225,
        "ruby-10": 0.18181818181818177,
        "ruby-17": 0.18840579710144922,
        "ruby-12": 0.25,
        "ruby-6": 0.29729729729729726,
        "ruby-18": 0.1428571428571429,
        "ruby-15": 0.11627906976744184,
        "ruby-13": 0.16666666666666663,
        "ruby-9": 0.171875,
        "ruby-4": 0.17391304347826086,
        "ruby-14": 0.12396694214876036,
        "ruby-5": 0.17721518987341767,
        "ruby-19": 0.17741935483870963,
        "codebertscore_f1-3": 0.7885785698890686,
        "codebertscore_f3-3": 0.8329766988754272,
        "codebertscore_f1-0": 0.7324837446212769,
        "codebertscore_f3-0": 0.7451449632644653,
        "codebertscore_f1-8": 0.903708815574646,
        "codebertscore_f3-8": 0.9383578300476074,
        "codebertscore_f1-7": 0.9881030917167664,
        "codebertscore_f3-7": 0.9881030917167664,
        "codebertscore_f1-16": 0.8154503703117371,
        "codebertscore_f3-16": 0.8809186816215515,
        "codebertscore_f1-2": 0.8556333780288696,
        "codebertscore_f3-2": 0.8530208468437195,
        "codebertscore_f1-11": 0.8984828591346741,
        "codebertscore_f3-11": 0.9304633140563965,
        "codebertscore_f1-1": 0.7475796937942505,
        "codebertscore_f3-1": 0.7943743467330933,
        "codebertscore_f1-10": 0.7610085606575012,
        "codebertscore_f3-10": 0.804378092288971,
        "codebertscore_f1-17": 0.7541796565055847,
        "codebertscore_f3-17": 0.8115339279174805,
        "codebertscore_f1-12": 0.8141564130783081,
        "codebertscore_f3-12": 0.832599937915802,
        "codebertscore_f1-6": 0.7432785034179688,
        "codebertscore_f3-6": 0.7659777998924255,
        "codebertscore_f1-18": 0.7366889715194702,
        "codebertscore_f3-18": 0.7925423979759216,
        "codebertscore_f1-15": 0.7010823488235474,
        "codebertscore_f3-15": 0.7272147536277771,
        "codebertscore_f1-13": 0.7465359568595886,
        "codebertscore_f3-13": 0.7938911318778992,
        "codebertscore_f1-9": 0.7154785990715027,
        "codebertscore_f3-9": 0.7704738974571228,
        "codebertscore_f1-4": 0.7898445725440979,
        "codebertscore_f3-4": 0.8689184188842773,
        "codebertscore_f1-14": 0.7015547752380371,
        "codebertscore_f3-14": 0.7728778719902039,
        "codebertscore_f1-5": 0.7585956454277039,
        "codebertscore_f3-5": 0.8057802319526672,
        "codebertscore_f1-19": 0.7571549415588379,
        "codebertscore_f3-19": 0.8045979738235474,
        "codebertscore_s_f1-3": 0.7960832715034485,
        "codebertscore_s_f3-3": 0.8409856557846069,
        "codebertscore_s_f1-0": 0.7418687343597412,
        "codebertscore_s_f3-0": 0.7506856322288513,
        "codebertscore_s_f1-8": 0.9051704406738281,
        "codebertscore_s_f3-8": 0.9493885040283203,
        "codebertscore_s_f1-7": 0.9904748797416687,
        "codebertscore_s_f3-7": 0.9904748797416687,
        "codebertscore_s_f1-16": 0.8436887264251709,
        "codebertscore_s_f3-16": 0.9167567491531372,
        "codebertscore_s_f1-2": 0.8671177625656128,
        "codebertscore_s_f3-2": 0.8662430047988892,
        "codebertscore_s_f1-11": 0.9198809862136841,
        "codebertscore_s_f3-11": 0.9585189819335938,
        "codebertscore_s_f1-1": 0.7430694103240967,
        "codebertscore_s_f3-1": 0.7876489758491516,
        "codebertscore_s_f1-10": 0.7486400604248047,
        "codebertscore_s_f3-10": 0.7870326638221741,
        "codebertscore_s_f1-17": 0.760500431060791,
        "codebertscore_s_f3-17": 0.8131474852561951,
        "codebertscore_s_f1-12": 0.8232150077819824,
        "codebertscore_s_f3-12": 0.846670925617218,
        "codebertscore_s_f1-6": 0.7237831354141235,
        "codebertscore_s_f3-6": 0.747868537902832,
        "codebertscore_s_f1-18": 0.7384351491928101,
        "codebertscore_s_f3-18": 0.7927793860435486,
        "codebertscore_s_f1-15": 0.7023259401321411,
        "codebertscore_s_f3-15": 0.7223235964775085,
        "codebertscore_s_f1-13": 0.7508952021598816,
        "codebertscore_s_f3-13": 0.805088996887207,
        "codebertscore_s_f1-9": 0.7139645218849182,
        "codebertscore_s_f3-9": 0.7735263705253601,
        "codebertscore_s_f1-4": 0.7921923398971558,
        "codebertscore_s_f3-4": 0.8819054365158081,
        "codebertscore_s_f1-14": 0.6983741521835327,
        "codebertscore_s_f3-14": 0.7734752893447876,
        "codebertscore_s_f1-5": 0.7530094385147095,
        "codebertscore_s_f3-5": 0.7908193469047546,
        "codebertscore_s_f1-19": 0.7529128789901733,
        "codebertscore_s_f3-19": 0.7952606081962585,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "Solution 1: 4\nSolution 2: 4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 0,
        "raw_gpt35_nswr-4": "Solution 1: 3\nSolution 2: 4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// total_match([], []) \u279e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\nfunction total_match(lst1, lst2){\n",
        "snippet": [
            "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n"
        ],
        "simplified": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
        "task_id": "74",
        "0": "let total_lst1 = 0;\n  let total_lst2 = 0;\n  for(let i=0; i<lst1.length; i++){\n    for(let j=0; j<lst1[i].length; j++){\n      total_lst1+=1;\n    }\n  }\n  for(let i=0; i<lst2.length; i++){\n    for(let j=0; j<lst2[i].length; j++){\n      total_lst2+=1;\n    }\n  }\n  if(total_lst1 == total_lst2){\n    return lst1;\n  }\n  else if(total_lst1 > total_lst2){\n    return lst2;\n  }\n  else{\n    return lst1;\n  }\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "const length1 = lst1.reduce((acc, item) => acc + item.length, 0);\n    const length2 = lst2.reduce((acc, item) => acc + item.length, 0);\n    return length1 < length2 ? lst1 : length1 === length2 ? lst1 : lst2;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let sum1 = 0;\n    let sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else if(sum1 > sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "const c1 = lst1.join('').length;\n    const c2 = lst2.join('').length;\n    return c1 <= c2 ? lst1 : lst2;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "if(lst1.length === 0 && lst2.length === 0){\n\t\treturn [];\n\t}\n\tif(lst1.length !== 0 && lst2.length !== 0){\n\t\tlet t1 = 0;\n\t\tlet t2 = 0;\n\t\tlst1.forEach(element => {\n\t\t\tt1 += element.length;\n\t\t});\n\t\tlst2.forEach(element => {\n\t\t\tt2 += element.length;\n\t\t});\n\t\tif(t1 > t2){\n\t\t\treturn lst2;\n\t\t}else if(t1 < t2){\n\t\t\treturn lst1;\n\t\t}else{\n\t\t\treturn lst1;\n\t\t}\n\t}\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "let lst1sum = lst1.reduce((acc, cv) => acc + cv.length, 0);\n    let lst2sum = lst2.reduce((acc, cv) => acc + cv.length, 0);\n    if(lst1sum < lst2sum){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "let lettersLst1 = [];\n    let lettersLst2 = [];\n    lst1.forEach(function(word){\n        lettersLst1.push(word.length);\n    });\n    lst2.forEach(function(word){\n        lettersLst2.push(word.length);\n    });\n    let sumLst1 = lettersLst1.reduce(function(a, b){\n        return a + b;\n    });\n    let sumLst2 = lettersLst2.reduce(function(a, b){\n        return a + b;\n    });\n    if(sumLst1 < sumLst2){\n        return lst1;\n    } else if(sumLst1 > sumLst2){\n        return lst2;\n    } else {\n        return lst1;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "let str1 = lst1.join('')\n    let str2 = lst2.join('')\n    if(str1.length === str2.length){\n        return lst1\n    }else if(str1.length < str2.length){\n        return lst1\n    }else{\n        return lst2\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let total = 0;\n    for(let num of lst1){\n        for(let i = 0; i < num.length; i++){\n            total += num.charCodeAt(i);\n        }\n    }\n    let total2 = 0;\n    for(let num of lst2){\n        for(let i = 0; i < num.length; i++){\n            total2 += num.charCodeAt(i);\n        }\n    }\n    if(total < total2){\n        return lst1;\n    }\n    else if(total2 < total){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "var sum1 = 0;\n  var sum2 = 0;\n  var result;\n  for(var i = 0; i < lst1.length; i++){\n    sum1 += lst1[i].length;\n  }\n  for(var i = 0; i < lst2.length; i++){\n    sum2 += lst2[i].length;\n  }\n  if(sum1 < sum2){\n    result = lst1;\n  }else if(sum1 > sum2){\n    result = lst2;\n  }else{\n    result = lst1;\n  }\n  return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var lst1_total = 0;\n    var lst2_total = 0;\n    for(var i = 0; i < lst1.length; i++){\n        lst1_total += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n        lst2_total += lst2[i].length;\n    }\n    if(lst1_total > lst2_total){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "let lst1_count = 0;\n    let lst2_count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        lst1_count += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        lst2_count += lst2[i].length;\n    }\n    if(lst1_count == lst2_count){\n        return lst1;\n    }\n    else if(lst1_count < lst2_count){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "let count1 = 0;\n  let count2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    count1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    count2 += lst2[i].length;\n  }\n  if(count1 < count2){\n    return lst1;\n  }\n  return lst2;\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var total1 = 0;\n    var total2 = 0;\n    if(lst1.length == 0 && lst2.length == 0){\n        return [];\n    }\n    else{\n        for(var i = 0; i < lst1.length; i++){\n            total1 += lst1[i].length;\n        }\n        for(var i = 0; i < lst2.length; i++){\n            total2 += lst2[i].length;\n        }\n        if(total1 > total2){\n            return lst2;\n        }\n        else if(total1 < total2){\n            return lst1;\n        }\n        else{\n            return lst1;\n        }\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }else{\n        return lst2;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var total1 = 0;\n   var total2 = 0;\n   for(var i = 0; i < lst1.length; i++){\n       total1 += lst1[i].length;\n   }\n   for(var j = 0; j < lst2.length; j++){\n       total2 += lst2[j].length;\n   }\n   if(total1 < total2){\n       return lst1;\n   }\n   else if(total1 > total2){\n       return lst2;\n   }\n   else{\n       return lst1;\n   }\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "if(lst1.length == 0 && lst2.length == 0){\n    return [];\n  }\n  let lst1TotalChar = 0;\n  let lst2TotalChar = 0;\n  for(let i = 0; i < lst1.length; i++){\n    lst1TotalChar += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    lst2TotalChar += lst2[i].length;\n  }\n  if(lst1TotalChar <= lst2TotalChar){\n    return lst1;\n  }\n  return lst2;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "if(lst1.length === 0 && lst2.length === 0){\n        return [];\n    }\n    if(lst1.length > lst2.length){\n        return lst2;\n    }\n    if(lst1.length < lst2.length){\n        return lst1;\n    }\n    return lst1;\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "let matchTotal = 0;\n    let strTotal = 0;\n    let count = 0;\n    let index = 0;\n    for(let i = 0; i < lst1.length; i++){\n        matchTotal += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        strTotal += lst2[i].length;\n    }\n    if(matchTotal < strTotal){\n        return lst1;\n    }else if(matchTotal > strTotal){\n        return lst2;\n    }else{\n        while(count < 2){\n            if(lst1[index] === lst2[index]){\n                index++;\n            }else{\n                count++;\n            }\n        }\n        if(count === 2){\n            return lst1;\n        }else{\n            return lst2;\n        }\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "bleu-0": 0.045308802208522625,
        "bleu-1": 0.41111017685076523,
        "bleu-2": 0.06302652493310418,
        "bleu-3": 0.0555069444565043,
        "bleu-4": 0.07548511913969477,
        "bleu-5": 0.3620171671797575,
        "bleu-6": 0.07927697709052296,
        "bleu-7": 0.07871304714971776,
        "bleu-8": 0.050576457667256235,
        "bleu-9": 0.03627678188394002,
        "bleu-10": 0.07343335356128385,
        "bleu-11": 0.06196550548441748,
        "bleu-12": 0.07258194748277913,
        "bleu-13": 0.057840512952331204,
        "bleu-14": 0.07051377206095721,
        "bleu-15": 0.06513028633973364,
        "bleu-16": 0.05592872453399561,
        "bleu-17": 0.10693147602319032,
        "bleu-18": 0.03811980816788046,
        "codebleu-0": 0.5479456623997093,
        "codebleu-1": 0.6519888179581289,
        "codebleu-2": 0.5075804442139968,
        "codebleu-3": 0.271679904268546,
        "codebleu-4": 0.5620502055832781,
        "codebleu-5": 0.7122461796710003,
        "codebleu-6": 0.6018851275441104,
        "codebleu-7": 0.4173099988678476,
        "codebleu-8": 0.5508812181448892,
        "codebleu-9": 0.49090318388564,
        "codebleu-10": 0.49527982793272857,
        "codebleu-11": 0.4983284506108423,
        "codebleu-12": 0.4646419338505519,
        "codebleu-13": 0.5500342808570107,
        "codebleu-14": 0.4816028476501856,
        "codebleu-15": 0.5120462974525504,
        "codebleu-16": 0.5151044300474138,
        "codebleu-17": 0.4172507469325055,
        "codebleu-18": 0.5719153546426649,
        "chrf-0": 0.26745992536624885,
        "chrf-1": 0.4907601401079177,
        "chrf-2": 0.3038519880617299,
        "chrf-3": 0.23346754627654684,
        "chrf-4": 0.30520768577168167,
        "chrf-5": 0.4619582450691005,
        "chrf-6": 0.3481939650265142,
        "chrf-7": 0.3136522784812301,
        "chrf-8": 0.29992294789883744,
        "chrf-9": 0.2699417396414757,
        "chrf-10": 0.3081337507069944,
        "chrf-11": 0.28144514972701656,
        "chrf-12": 0.2935451993103137,
        "chrf-13": 0.3124148496879618,
        "chrf-14": 0.30574072459076973,
        "chrf-15": 0.31580052524540364,
        "chrf-16": 0.27731657340799676,
        "chrf-17": 0.30709812997980757,
        "chrf-18": 0.2691129108346527,
        "rougel-0": 0.303030303030303,
        "rougel-1": 0.6821705426356589,
        "rougel-2": 0.34355828220858897,
        "rougel-3": 0.43137254901960786,
        "rougel-4": 0.3492063492063492,
        "rougel-5": 0.7131782945736435,
        "rougel-6": 0.34782608695652173,
        "rougel-7": 0.39344262295081966,
        "rougel-8": 0.32432432432432434,
        "rougel-9": 0.3255813953488372,
        "rougel-10": 0.35761589403973515,
        "rougel-11": 0.35365853658536583,
        "rougel-12": 0.3648648648648649,
        "rougel-13": 0.3386243386243386,
        "rougel-14": 0.3708609271523179,
        "rougel-15": 0.36809815950920244,
        "rougel-16": 0.3258426966292135,
        "rougel-17": 0.38709677419354843,
        "rougel-18": 0.2672413793103448,
        "meteor-0": 0.33230376644622567,
        "meteor-1": 0.6005858966310944,
        "meteor-2": 0.31983712073587695,
        "meteor-3": 0.3075328685440588,
        "meteor-4": 0.3802421314155252,
        "meteor-5": 0.6199846499340269,
        "meteor-6": 0.3489496832917282,
        "meteor-7": 0.3070165690599754,
        "meteor-8": 0.3257501658937743,
        "meteor-9": 0.35990829732492696,
        "meteor-10": 0.3255570096313024,
        "meteor-11": 0.3967658981883732,
        "meteor-12": 0.38153580382487623,
        "meteor-13": 0.33652200889758827,
        "meteor-14": 0.3732534444478238,
        "meteor-15": 0.3345900439238654,
        "meteor-16": 0.39442498850330754,
        "meteor-17": 0.31992710846465783,
        "meteor-18": 0.39665574995604014,
        "ruby-0": 0.21052631578947367,
        "ruby-1": 0.5846153846153845,
        "ruby-2": 0.22448979591836737,
        "ruby-3": 0.3384615384615385,
        "ruby-4": 0.25,
        "ruby-5": 0.6461538461538461,
        "ruby-6": 0.2535211267605634,
        "ruby-7": 0.24615384615384617,
        "ruby-8": 0.23333333333333328,
        "ruby-9": 0.22429906542056077,
        "ruby-10": 0.2325581395348837,
        "ruby-11": 0.2525252525252525,
        "ruby-12": 0.2530120481927711,
        "ruby-13": 0.2338709677419355,
        "ruby-14": 0.2558139534883721,
        "ruby-15": 0.24489795918367352,
        "ruby-16": 0.21238938053097345,
        "ruby-17": 0.2615384615384615,
        "ruby-18": 0.17964071856287422,
        "codebertscore_f1-0": 0.7899299263954163,
        "codebertscore_f3-0": 0.7994975447654724,
        "codebertscore_f1-1": 0.9384660720825195,
        "codebertscore_f3-1": 0.9351217746734619,
        "codebertscore_f1-2": 0.8262911438941956,
        "codebertscore_f3-2": 0.8241791725158691,
        "codebertscore_f1-3": 0.8664124608039856,
        "codebertscore_f3-3": 0.8324617743492126,
        "codebertscore_f1-4": 0.8256875276565552,
        "codebertscore_f3-4": 0.824228823184967,
        "codebertscore_f1-5": 0.91204833984375,
        "codebertscore_f3-5": 0.9231901168823242,
        "codebertscore_f1-6": 0.7978493571281433,
        "codebertscore_f3-6": 0.8199381828308105,
        "codebertscore_f1-7": 0.8595201969146729,
        "codebertscore_f3-7": 0.8345187902450562,
        "codebertscore_f1-8": 0.775959849357605,
        "codebertscore_f3-8": 0.7951419949531555,
        "codebertscore_f1-9": 0.8286772966384888,
        "codebertscore_f3-9": 0.8292203545570374,
        "codebertscore_f1-10": 0.8299014568328857,
        "codebertscore_f3-10": 0.8281399011611938,
        "codebertscore_f1-11": 0.8158127665519714,
        "codebertscore_f3-11": 0.814794659614563,
        "codebertscore_f1-12": 0.8488713502883911,
        "codebertscore_f3-12": 0.8440192937850952,
        "codebertscore_f1-13": 0.7979722619056702,
        "codebertscore_f3-13": 0.8043711185455322,
        "codebertscore_f1-14": 0.835961103439331,
        "codebertscore_f3-14": 0.8335892558097839,
        "codebertscore_f1-15": 0.8347453474998474,
        "codebertscore_f3-15": 0.8319936394691467,
        "codebertscore_f1-16": 0.8102644085884094,
        "codebertscore_f3-16": 0.8121296167373657,
        "codebertscore_f1-17": 0.8448259830474854,
        "codebertscore_f3-17": 0.8124871253967285,
        "codebertscore_f1-18": 0.7580251693725586,
        "codebertscore_f3-18": 0.7829177975654602,
        "codebertscore_s_f1-0": 0.9014686942100525,
        "codebertscore_s_f3-0": 0.9202567934989929,
        "codebertscore_s_f1-1": 0.9727283716201782,
        "codebertscore_s_f3-1": 0.9718726873397827,
        "codebertscore_s_f1-2": 0.925004243850708,
        "codebertscore_s_f3-2": 0.9318093657493591,
        "codebertscore_s_f1-3": 0.9487346410751343,
        "codebertscore_s_f3-3": 0.9308730959892273,
        "codebertscore_s_f1-4": 0.924932599067688,
        "codebertscore_s_f3-4": 0.9328335523605347,
        "codebertscore_s_f1-5": 0.9601011276245117,
        "codebertscore_s_f3-5": 0.9672597050666809,
        "codebertscore_s_f1-6": 0.9071707725524902,
        "codebertscore_s_f3-6": 0.9317089319229126,
        "codebertscore_s_f1-7": 0.9450007677078247,
        "codebertscore_s_f3-7": 0.9345552325248718,
        "codebertscore_s_f1-8": 0.9046655893325806,
        "codebertscore_s_f3-8": 0.9229720234870911,
        "codebertscore_s_f1-9": 0.9216553568840027,
        "codebertscore_s_f3-9": 0.9313380718231201,
        "codebertscore_s_f1-10": 0.9263180494308472,
        "codebertscore_s_f3-10": 0.9331509470939636,
        "codebertscore_s_f1-11": 0.9188668727874756,
        "codebertscore_s_f3-11": 0.9294567108154297,
        "codebertscore_s_f1-12": 0.9325425624847412,
        "codebertscore_s_f3-12": 0.9354629516601562,
        "codebertscore_s_f1-13": 0.913502037525177,
        "codebertscore_s_f3-13": 0.9237099885940552,
        "codebertscore_s_f1-14": 0.92833012342453,
        "codebertscore_s_f3-14": 0.9329026937484741,
        "codebertscore_s_f1-15": 0.928260326385498,
        "codebertscore_s_f3-15": 0.9345114827156067,
        "codebertscore_s_f1-16": 0.910768985748291,
        "codebertscore_s_f3-16": 0.9246506094932556,
        "codebertscore_s_f1-17": 0.9392653703689575,
        "codebertscore_s_f3-17": 0.9254968166351318,
        "codebertscore_s_f1-18": 0.8888866901397705,
        "codebertscore_s_f3-18": 0.912997841835022,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2"
    },
    {
        "intent": "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfunction intersection(interval1, interval2){\n",
        "snippet": [
            "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n"
        ],
        "simplified": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
        "task_id": "127",
        "3": "let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let dif = end - start;\n  if (dif < 0) return \"NO\";\n  if (dif < 3) return \"YES\";\n  let prime = true;\n  for (let i = 2; i < dif - 1; i++) {\n    if (dif % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime ? \"YES\" : \"NO\";\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var isPrime = function(num){\n        for(var i = 2; i < num; i++){\n            if(num % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    if(interval1[0] >= interval2[1] || interval2[0] >= interval1[1]){\n        return \"NO\";\n    }\n    var inters = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n    var len = inters[1] - inters[0];\n    return (isPrime(len)) ? \"YES\" : \"NO\";\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(interval1[0] > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n    }\n    let p = interval1[0] > interval2[0] ? interval1[0] : interval2[0];\n    let q = interval1[1] < interval2[1] ? interval1[1] : interval2[1];\n    return isPrime(q - p + 1) ? \"YES\" : \"NO\";\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "function isPrime(number){\n        if(number === 1){\n            return false;\n        }\n        if(number < 0){\n            number = -number;\n        }\n        let arr = [2, 3, 5, 7];\n        if(arr.includes(number)){\n            return true;\n        }\n        for(let i = 0; i < arr.length; i++){\n            if(number % arr[i] === 0){\n                return false;\n            }\n        }\n        for(let i = arr[arr.length - 1] + 2; i < number; i += 2){\n            if(number % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    if(interval1[0] > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n    }\n    if(interval1[0] > interval2[0]){\n        if(interval1[1] < interval2[1]){\n            return isPrime(interval1[1] - interval1[0] + 1) ? \"YES\" : \"NO\";\n        }\n        return isPrime(interval1[1] - interval2[0] + 1) ? \"YES\" : \"NO\";\n    }\n    if(interval1[1] < interval2[1]){\n        return isPrime(interval1[1] - interval2[0] + 1) ? \"YES\" : \"NO\";\n    }\n    return isPrime(interval2[1] - interval2[0] + 1) ? \"YES\" : \"NO\";\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let start = Math.max(interval1[0], interval2[0]);\n\tlet end = Math.min(interval1[1], interval2[1]);\n\tlet newInterval = [start, end];\n\tif (newInterval[0] > newInterval[1]) {\n\t\treturn \"NO\";\n\t}\n\tlet numbers = [...Array(newInterval[1]-newInterval[0]+1).keys()];\n\tfor (let i = 2; i <= Math.sqrt(newInterval[1]); i++) {\n\t\tif (numbers.indexOf(i) !== -1) {\n\t\t\tfor (let j = i * i; j <= newInterval[1]; j += i) {\n\t\t\t\tlet remove = numbers.indexOf(j);\n\t\t\t\tif (remove !== -1) {\n\t\t\t\t\tnumbers.splice(remove, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet length = numbers.length-2;\n\tif (numbers.indexOf(length) !== -1) {\n\t\treturn \"YES\";\n\t} else {\n\t\treturn \"NO\";\n\t}\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end){\n        if (start <= 1){\n            return \"NO\";\n        }\n        for (let i = 2; i < end; i++){\n            if (end % i === 0){\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "//check the intersection\n  let firstIntervalStart = interval1[0];\n  let firstIntervalEnd = interval1[1];\n  let secondIntervalStart = interval2[0];\n  let secondIntervalEnd = interval2[1];\n  let result = [];\n  if(firstIntervalStart > secondIntervalEnd || secondIntervalStart > firstIntervalEnd){\n    return \"NO\";\n  }else if(firstIntervalStart <= secondIntervalStart && firstIntervalEnd >= secondIntervalStart && firstIntervalEnd <= secondIntervalEnd){\n    result.push(secondIntervalStart);\n    result.push(firstIntervalEnd);\n  }else if(firstIntervalStart <= secondIntervalStart && firstIntervalEnd >= secondIntervalEnd){\n    result.push(secondIntervalStart);\n    result.push(secondIntervalEnd);\n  }else if(firstIntervalStart >= secondIntervalStart && firstIntervalEnd <= secondIntervalEnd){\n    result.push(firstIntervalStart);\n    result.push(firstIntervalEnd);\n  }else if(firstIntervalStart >= secondIntervalStart && firstIntervalStart <= secondIntervalEnd && firstIntervalEnd >= secondIntervalEnd){\n    result.push(firstIntervalStart);\n    result.push(secondIntervalEnd);\n  }\n  let intervalLength = result[1] - result[0];\n  //check if it is prime\n  for(let i = 2; i < intervalLength; i++){\n    if(intervalLength % i === 0){\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var a = Math.max(interval1[0], interval2[0]);\n  var b = Math.min(interval1[1], interval2[1]);\n  var l = b - a;\n  if (l <= 0) return \"NO\";\n  if (isPrime(l)) return \"YES\";\n  return \"NO\";\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//interval1\n    let start1 = interval1[0];\n    let end1 = interval1[1];\n    //interval2\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n    //variable to store the start of the interval of the intersection\n    let start;\n    //variable to store the end of the interval of the intersection\n    let end;\n    //variable to store the result of the function\n    let result;\n    //variable to store the length of the intersection\n    let length;\n    //variable to store the test of the current number\n    let test;\n    //the condition that the intervals of the intersection\n    if (start1 >= start2 && start1 <= end2){\n        start = start1;\n    } else if (start2 >= start1 && start2 <= end1){\n        start = start2;\n    } else {\n        return \"NO\";\n    }\n    if (end1 >= start2 && end1 <= end2){\n        end = end1;\n    } else if (end2 >= start1 && end2 <= end1){\n        end = end2;\n    } else {\n        return \"NO\";\n    }\n    //the length of the intersection\n    length = end - start;\n    //the test of the length \n    for (let i = length; i > 0; i--){\n        test = length % i;\n        if (test === 0 && i !== 1 && i !== length){\n            result = \"NO\";\n            return result;\n        } else {\n            result = \"YES\";\n        }\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let arr = []\n  for(let i = interval1[0]; i <= interval1[1]; i++){\n    for(let j = interval2[0]; j <= interval2[1]; j++){\n      if(i === j){\n        arr.push(i)\n      }\n    }\n  }\n  let diff = arr[arr.length - 1] - arr[0]\n  if(diff === 0){\n    return \"NO\"\n  }\n  if(diff === 1){\n    return \"YES\"\n  }\n  if(isPrime(diff)){\n    return \"YES\"\n  }else{\n    return \"NO\"\n  }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "function getIntersection(interval1, interval2){\n        let int1 = [...interval1];\n        let int2 = [...interval2];\n        int1 = int1.sort((a, b) => {\n            return a - b;\n        });\n        int2 = int2.sort((a, b) => {\n            return a - b;\n        });\n        let s = 0;\n        let e = 0;\n        let ints = [];\n        if(int1[0] > int2[0]){\n            s = int1[0];\n        } else {\n            s = int2[0];\n        }\n        if(int1[1] < int2[1]){\n            e = int1[1];\n        } else {\n            e = int2[1];\n        }\n        if(s <= e){\n            ints.push(s, e);\n        }\n        return ints;\n    }\n    function checkPrime(n){\n        let nSqrt = Math.sqrt(n);\n        for(let i = 2; i <= nSqrt; i++){\n            if(n % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    let intersection = getIntersection(interval1, interval2);\n    if(intersection.length === 0){\n        return \"NO\";\n    }\n    if(checkPrime(intersection[1] - intersection[0] + 1)){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let int = 0;\n  let result = 'NO';\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (interval1[0] >= interval2[0] && interval1[0] <= interval2[1]) {\n    int = end1 - start1;\n  } else if (interval1[1] >= interval2[0] && interval1[1] <= interval2[1]) {\n    int = end1 - start2;\n  } else if (interval2[0] >= interval1[0] && interval2[0] <= interval1[1]) {\n    int = end2 - start2;\n  } else if (interval2[1] >= interval1[0] && interval2[1] <= interval1[1]) {\n    int = end2 - start1;\n  }\n  if (int > 1) {\n    result = 'YES';\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "// your code here\n    if(interval1[0] >= interval2[1] || interval2[0] >= interval1[1]){\n        return \"NO\";\n    }\n    let start = interval1[0] > interval2[0] ? interval1[0] : interval2[0];\n    let end = interval1[1] < interval2[1] ? interval1[1] : interval2[1];\n    let val = end - start;\n    if(val <= 1){\n        return \"NO\";\n    }\n    let sq = Math.sqrt(val);\n    for(let i = 2; i <= sq; i++){\n        if(val % i === 0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let a = interval1[0];\n  let b = interval1[1];\n  let c = interval2[0];\n  let d = interval2[1];\n  if (a >= c) {\n    if (a <= d) {\n      if (b <= d) {\n        return isPrime(b - a + 1) ? \"YES\" : \"NO\";\n      } else {\n        return isPrime(d - a + 1) ? \"YES\" : \"NO\";\n      }\n    } else {\n      return \"NO\";\n    }\n  } else {\n    if (b >= c) {\n      if (b <= d) {\n        return isPrime(b - c + 1) ? \"YES\" : \"NO\";\n      } else {\n        return isPrime(d - c + 1) ? \"YES\" : \"NO\";\n      }\n    } else {\n      return \"NO\";\n    }\n  }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let set = new Set();\n  let arr = [];\n  for(let i = interval1[0]; i <= interval1[1]; i++){\n    set.add(i);\n  }\n  for(let i = interval2[0]; i <= interval2[1]; i++){\n    if(set.has(i)){\n      arr.push(i);\n    }\n  }\n  if(arr.length === 0){\n    return \"NO\";\n  }\n  for(let i = 2; i < arr.length; i++){\n    if(arr.length % i === 0){\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (interval1[0] < interval2[0]) {\n        if (interval1[1] < interval2[0]) return \"NO\";\n        else return isPrime(interval2[0] - interval1[1]) ? \"YES\" : \"NO\";\n    } else {\n        if (interval2[1] < interval1[0]) return \"NO\";\n        else return isPrime(interval1[0] - interval2[1]) ? \"YES\" : \"NO\";\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let point1 = interval1[0];\n  let point2 = interval1[1];\n  let point3 = interval2[0];\n  let point4 = interval2[1];\n  if (point1 > point4 || point3 > point2) {\n    return \"NO\";\n  }\n  let max = Math.max(point1, point3);\n  let min = Math.min(point2, point4);\n  if (max === min) {\n    return \"NO\";\n  }\n  for (let i = 2; i < min - max; i++) {\n    if ((min - max) % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = end - start;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    return length < 2 || primes.includes(length) ? \"YES\" : \"NO\";\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let intersection = [];\n    for(let i = interval1[0]; i < interval1[1]; i++){\n        for(let j = interval2[0]; j < interval2[1]; j++){\n            if(i === j){\n                intersection.push(i);\n            }\n        }\n    }\n    // console.log(intersection);\n    if(intersection.length === 0){\n        return \"NO\";\n    } else if(isPrime(intersection.length)){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var i1 = [];\n  var i2 = [];\n  for(let i = interval1[0]; i <= interval1[1]; i++){\n    i1.push(i);\n  }\n  for(let i = interval2[0]; i <= interval2[1]; i++){\n    i2.push(i);\n  }\n  var interSect = [];\n  for(let i = 0; i < i1.length; i++){\n    for(let j = 0; j < i2.length; j++){\n      if(i1[i] === i2[j]){\n        interSect.push(i1[i]);\n      }\n    }\n  }\n  if(interSect.length < 1){\n    return \"NO\";\n  }\n  for(let i = 2; i < interSect.length; i++){\n    if(interSect.length % i === 0){\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.31283192466160514,
        "bleu-0": 0.32893366697137566,
        "bleu-8": 0.21848841599894037,
        "bleu-7": 0.17387104252698368,
        "bleu-16": 0.19721111186088172,
        "bleu-2": 0.3744365331219269,
        "bleu-11": 0.16722192760243054,
        "bleu-1": 0.13491324525254308,
        "bleu-10": 0.12171439543982737,
        "bleu-17": 0.40844286069635766,
        "bleu-12": 0.17784770754007512,
        "bleu-6": 0.17836446222908348,
        "bleu-18": 0.3688789247115886,
        "bleu-15": 0.17617637514443696,
        "bleu-13": 0.3782787837159444,
        "bleu-9": 0.22757838897758384,
        "bleu-4": 0.38390750170459226,
        "bleu-14": 0.10913805023912207,
        "bleu-5": 0.34564842103678506,
        "bleu-19": 0.2616013126649435,
        "codebleu-3": 0.5673688047944221,
        "codebleu-0": 0.6346529308500051,
        "codebleu-8": 0.39653461577456783,
        "codebleu-7": 0.6915150567954328,
        "codebleu-16": 0.6449603802419208,
        "codebleu-2": 0.5482433866498094,
        "codebleu-11": 0.677401266686175,
        "codebleu-1": 0.33249093665394924,
        "codebleu-10": 0.615741385594747,
        "codebleu-17": 0.6692434007593343,
        "codebleu-12": 0.6812555633424491,
        "codebleu-6": 0.5944691257711239,
        "codebleu-18": 0.6506854738067072,
        "codebleu-15": 0.5769626317248525,
        "codebleu-13": 0.6314492417304352,
        "codebleu-9": 0.40161554222413376,
        "codebleu-4": 0.6282206947285431,
        "codebleu-14": 0.3580720557190908,
        "codebleu-5": 0.5807097557799478,
        "codebleu-19": 0.632805871798933,
        "chrf-3": 0.38931179480184014,
        "chrf-0": 0.4642344575256381,
        "chrf-8": 0.3822048826507755,
        "chrf-7": 0.3957889553390757,
        "chrf-16": 0.40435426081639314,
        "chrf-2": 0.4164336176859913,
        "chrf-11": 0.29320172264484423,
        "chrf-1": 0.29970204140891277,
        "chrf-10": 0.3096480338678967,
        "chrf-17": 0.4296836502950457,
        "chrf-12": 0.39577508792757093,
        "chrf-6": 0.3727210395897476,
        "chrf-18": 0.4876520909335823,
        "chrf-15": 0.33147321434027,
        "chrf-13": 0.45581008015613145,
        "chrf-9": 0.38995291300484863,
        "chrf-4": 0.4173736464031502,
        "chrf-14": 0.27835662777969145,
        "chrf-5": 0.42231213388948885,
        "chrf-19": 0.4557773464278813,
        "rougel-3": 0.5267489711934157,
        "rougel-0": 0.3146067415730337,
        "rougel-8": 0.3636363636363636,
        "rougel-7": 0.3,
        "rougel-16": 0.3833333333333333,
        "rougel-2": 0.6233766233766234,
        "rougel-11": 0.3274336283185841,
        "rougel-1": 0.42424242424242425,
        "rougel-10": 0.33255269320843095,
        "rougel-17": 0.46332046332046334,
        "rougel-12": 0.3855421686746988,
        "rougel-6": 0.3800623052959502,
        "rougel-18": 0.5734767025089607,
        "rougel-15": 0.37623762376237624,
        "rougel-13": 0.5661764705882353,
        "rougel-9": 0.375,
        "rougel-4": 0.5791505791505792,
        "rougel-14": 0.3032786885245902,
        "rougel-5": 0.42276422764227645,
        "rougel-19": 0.4698795180722892,
        "meteor-3": 0.5208651084546445,
        "meteor-0": 0.4813804689412037,
        "meteor-8": 0.3736528225762864,
        "meteor-7": 0.4902671555514896,
        "meteor-16": 0.42873938415896445,
        "meteor-2": 0.5419460343417826,
        "meteor-11": 0.5673989514362424,
        "meteor-1": 0.2956504201680672,
        "meteor-10": 0.5355689211902573,
        "meteor-17": 0.5535645268507416,
        "meteor-12": 0.49157116204690837,
        "meteor-6": 0.49081451996500475,
        "meteor-18": 0.6682776647465527,
        "meteor-15": 0.40844342885159207,
        "meteor-13": 0.6676692886131563,
        "meteor-9": 0.2943183852488364,
        "meteor-4": 0.5976526745310055,
        "meteor-14": 0.2133831003206945,
        "meteor-5": 0.4860960473851339,
        "meteor-19": 0.6459337479478253,
        "ruby-3": 0.33870967741935487,
        "ruby-0": 0.15384615384615385,
        "ruby-8": 0.2338709677419355,
        "ruby-7": 0.180379746835443,
        "ruby-16": 0.24152542372881358,
        "ruby-2": 0.44354838709677424,
        "ruby-11": 0.2195121951219512,
        "ruby-1": 0.30645161290322576,
        "ruby-10": 0.21452145214521456,
        "ruby-17": 0.2962962962962963,
        "ruby-12": 0.25773195876288657,
        "ruby-6": 0.2639593908629442,
        "ruby-18": 0.4258064516129032,
        "ruby-15": 0.26815642458100564,
        "ruby-13": 0.44594594594594594,
        "ruby-9": 0.25,
        "ruby-4": 0.49629629629629635,
        "ruby-14": 0.16935483870967738,
        "ruby-5": 0.2016129032258065,
        "ruby-19": 0.35096153846153844,
        "codebertscore_f1-3": 0.8554274439811707,
        "codebertscore_f3-3": 0.8665445446968079,
        "codebertscore_f1-0": 0.8025995492935181,
        "codebertscore_f3-0": 0.8124637603759766,
        "codebertscore_f1-8": 0.8276702165603638,
        "codebertscore_f3-8": 0.8012216687202454,
        "codebertscore_f1-7": 0.7527828812599182,
        "codebertscore_f3-7": 0.7729624509811401,
        "codebertscore_f1-16": 0.8018113374710083,
        "codebertscore_f3-16": 0.8412567377090454,
        "codebertscore_f1-2": 0.8722089529037476,
        "codebertscore_f3-2": 0.8642542362213135,
        "codebertscore_f1-11": 0.7450061440467834,
        "codebertscore_f3-11": 0.7887481451034546,
        "codebertscore_f1-1": 0.8244720101356506,
        "codebertscore_f3-1": 0.8151865005493164,
        "codebertscore_f1-10": 0.722710371017456,
        "codebertscore_f3-10": 0.7695192694664001,
        "codebertscore_f1-17": 0.8222314119338989,
        "codebertscore_f3-17": 0.8264707326889038,
        "codebertscore_f1-12": 0.7346028089523315,
        "codebertscore_f3-12": 0.7661290168762207,
        "codebertscore_f1-6": 0.8104926943778992,
        "codebertscore_f3-6": 0.8148568868637085,
        "codebertscore_f1-18": 0.8375620245933533,
        "codebertscore_f3-18": 0.8358331918716431,
        "codebertscore_f1-15": 0.7846245169639587,
        "codebertscore_f3-15": 0.7977619171142578,
        "codebertscore_f1-13": 0.8386109471321106,
        "codebertscore_f3-13": 0.8380839824676514,
        "codebertscore_f1-9": 0.8203473091125488,
        "codebertscore_f3-9": 0.793677031993866,
        "codebertscore_f1-4": 0.8448166251182556,
        "codebertscore_f3-4": 0.852717936038971,
        "codebertscore_f1-14": 0.7786942720413208,
        "codebertscore_f3-14": 0.8020049929618835,
        "codebertscore_f1-5": 0.8054479956626892,
        "codebertscore_f3-5": 0.8101383447647095,
        "codebertscore_f1-19": 0.8078177571296692,
        "codebertscore_f3-19": 0.8156741857528687,
        "codebertscore_s_f1-3": 0.843453586101532,
        "codebertscore_s_f3-3": 0.8540235757827759,
        "codebertscore_s_f1-0": 0.7926554679870605,
        "codebertscore_s_f3-0": 0.8020492196083069,
        "codebertscore_s_f1-8": 0.8165926337242126,
        "codebertscore_s_f3-8": 0.7882007360458374,
        "codebertscore_s_f1-7": 0.8018304109573364,
        "codebertscore_s_f3-7": 0.8166228532791138,
        "codebertscore_s_f1-16": 0.7944933176040649,
        "codebertscore_s_f3-16": 0.8275262117385864,
        "codebertscore_s_f1-2": 0.8671875596046448,
        "codebertscore_s_f3-2": 0.8584648370742798,
        "codebertscore_s_f1-11": 0.7929709553718567,
        "codebertscore_s_f3-11": 0.8264702558517456,
        "codebertscore_s_f1-1": 0.8078020215034485,
        "codebertscore_s_f3-1": 0.7935718297958374,
        "codebertscore_s_f1-10": 0.7653049230575562,
        "codebertscore_s_f3-10": 0.8065507411956787,
        "codebertscore_s_f1-17": 0.8181486129760742,
        "codebertscore_s_f3-17": 0.82014399766922,
        "codebertscore_s_f1-12": 0.7868302464485168,
        "codebertscore_s_f3-12": 0.81228107213974,
        "codebertscore_s_f1-6": 0.8103528618812561,
        "codebertscore_s_f3-6": 0.8080916404724121,
        "codebertscore_s_f1-18": 0.8284109234809875,
        "codebertscore_s_f3-18": 0.8239926099777222,
        "codebertscore_s_f1-15": 0.7802944183349609,
        "codebertscore_s_f3-15": 0.7882781624794006,
        "codebertscore_s_f1-13": 0.8232852220535278,
        "codebertscore_s_f3-13": 0.8236253261566162,
        "codebertscore_s_f1-9": 0.8044782876968384,
        "codebertscore_s_f3-9": 0.77801513671875,
        "codebertscore_s_f1-4": 0.8326488137245178,
        "codebertscore_s_f3-4": 0.8359449505805969,
        "codebertscore_s_f1-14": 0.7586364150047302,
        "codebertscore_s_f3-14": 0.7821939587593079,
        "codebertscore_s_f1-5": 0.7986539006233215,
        "codebertscore_s_f3-5": 0.8028184771537781,
        "codebertscore_s_f1-19": 0.8080558180809021,
        "codebertscore_s_f3-19": 0.8161717653274536,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n",
        "snippet": [
            "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n"
        ],
        "simplified": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
        "task_id": "46",
        "3": "}\n\nmodule.exports = {\n    sumDigits: sumDigits,\n    countChars: countChars,\n    reverseString: reverseString,\n    removeOdd: removeOdd,\n    sumMatrix: sumMatrix,\n    factorial: factorial,\n    removeEven: removeEven,\n    oddOnly: oddOnly,\n    array2D: array2D,\n    binarySearch: binarySearch,\n    myFind: myFind,\n    myFindIndex: myFindIndex,\n    myIncludes: myIncludes,\n    myConcat: myConcat,\n    myPush: myPush,\n    fib: fib,\n    fib2: fib2,\n    fib3: fib3,\n    fib4: fib4\n};",
        "grade-3": {
            "execution": 0
        },
        "0": "if(n===0){\n    return 0;\n  }else if(n===1){\n    return 0;\n  }else if(n===2){\n    return 2;\n  }else if(n===3){\n    return 0;\n  }else{\n    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n    let i = 3;\n    while(i<n){\n      let t = d;\n      d = d+c+b+a;\n      a = b;\n      b = c;\n      c = t;\n      i++;\n    }\n    return d;\n  }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "//Basic algorithm, pretty straightforward. \n\tvar i = 2;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 2;\n\tvar d = 0;\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\t}\n\tif(n == 2){\n\t\treturn 2;\n\t}\n\tif(n == 3){\n\t\treturn 0;\n\t}\n\twhile(i < n){\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\ti++;\n\t}\n\treturn d;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//base cases\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n  if(n === 3){\n    return 0;\n  }\n  //initialize variables\n  var a = 0;\n  var b = 0;\n  var c = 2;\n  var d = 0;\n  //dynamic programming\n  for(var i = 4; i <= n; i++){\n    var temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return d;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "//YOUR CODE HERE\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let result = [0,0,2,0];\n    for(let i = 4; i <= n; i++){\n        result[0] = result[1];\n        result[1] = result[2];\n        result[2] = result[3];\n        result[3] = result[0] + result[1] + result[2];\n    }\n    return result[3];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var fibs = [0,0,2,0];\n  if(n < 4){\n    return fibs[n];\n  }\n  for(var i = 4; i <= n; i++){\n    fibs[i%4] = fibs[(i-1)%4] + fibs[(i-2)%4] + fibs[(i-3)%4] + fibs[(i-4)%4];\n  }\n  return fibs[n%4];\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var a = 0;\n\tvar b = 0;\n\tvar c = 2;\n\tvar d = 0;\n\tfor(var i = 3; i <= n; i++){\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var array = [0,0,2,0];\n\tvar sum = 0;\n\tvar i = 4;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\twhile(i <= n){\n\t\tx = array[0];\n\t\ty = array[1];\n\t\tz = array[2];\n\t\ta = array[3];\n\t\tsum = x + y + z + a;\n\t\tarray[0] = array[1];\n\t\tarray[1] = array[2];\n\t\tarray[2] = array[3];\n\t\tarray[3] = sum;\n\t\ti++;\n\t}\n\treturn sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var s=0;\n\tfor(var i=0;i<=n;i++){\n\t\ts+=fib4_helper(i);\n\t}\n\treturn s;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(n == 0){\n        return 0;\n    }else if(n == 1){\n        return 0;\n    }else if(n == 2){\n        return 2;\n    }else if(n == 3){\n        return 0;\n    }else{\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(n <= 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    let f4 = [0, 0, 2, 0];\n    for(let i = 3; i < n; i++){\n        f4[i%4] = f4[(i-1)%4] + f4[(i-2)%4] + f4[(i-3)%4] + f4[(i-4)%4];\n    }\n    return f4[(n-1)%4];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vals = [0,0,2,0];\n\tif(n<4){\n\t\treturn vals[n];\n\t}\n\tfor(var i=4;i<=n;i++){\n\t\tvals[i%4] = vals[0] + vals[1] + vals[2] + vals[3];\n\t}\n\treturn vals[n%4];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let n1 = 0;\n    let n2 = 0;\n    let n3 = 2;\n    let n4 = 0;\n    let temp = 0;\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    if(n > 3){\n        for(let i = 4; i < n; i++){\n            temp = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = temp;\n        }\n    }\n    return n1 + n2 + n3 + n4;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var a=0,b=0,c=2,d=0,sum=0;\n    for(var i=0;i<n;i++){\n        sum=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=sum;\n    }\n    return sum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n    let result = 0;\n    for(let i = 4; i <= n; i++){\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(n < 4){\n        if(n == 0){\n            return 0;\n        }else if(n == 1){\n            return 0;\n        }else if(n == 2){\n            return 2;\n        }else if(n == 3){\n            return 0;\n        }\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var n1 = 0;\n    var n2 = 0;\n    var n3 = 2;\n    var n4 = 0;\n    var fib4 = 0;\n    for(var i = 0; i < n; i++){\n        fib4 = n1 + n2 + n3 + n4;\n        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n        n4 = fib4;\n    }\n    return fib4;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let a = 0, b = 0, c = 2, d = 0, e;\n    if (n==0) {\n        return a;\n    } else if (n==1) {\n        return b;\n    } else if (n==2) {\n        return c;\n    } else if (n==3) {\n        return d;\n    } else {\n        for (let i=4; i<=n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if(n < 0) return undefined;\n\tif(n == 0) return 0;\n\tif(n == 1) return 0;\n\tif(n == 2) return 2;\n\tif(n == 3) return 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 2;\n\tvar d = 0;\n\tfor(var i = 4; i <= n; i++){\n\t\tvar tmp = a;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = tmp + b + c + d;\n\t}\n\treturn d;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.005592733877533626,
        "bleu-0": 0.065120705663001,
        "bleu-8": 0.08393693939694385,
        "bleu-7": 0.11570193503399805,
        "bleu-16": 2.9332195195695888e-08,
        "bleu-2": 0.2858881881505067,
        "bleu-11": 0.3437272909345475,
        "bleu-1": 0.0931200387904339,
        "bleu-10": 0.14206397655312672,
        "bleu-17": 0.05640958420096415,
        "bleu-12": 0.12956196373307527,
        "bleu-6": 0.28328290936739103,
        "bleu-18": 0.3260481407065572,
        "bleu-15": 0.15482968269266384,
        "bleu-13": 0.11791491607811291,
        "bleu-9": 0.16323498638484146,
        "bleu-4": 0.17891135642811445,
        "bleu-14": 0.11189030907049247,
        "bleu-5": 0.17116328616164353,
        "bleu-19": 0.15963454188086354,
        "codebleu-3": 0.17742703990470515,
        "codebleu-0": 0.3993982196553681,
        "codebleu-8": 0.4176821641103303,
        "codebleu-7": 0.4256564968157715,
        "codebleu-16": 0.018264840706388823,
        "codebleu-2": 0.39310974560058937,
        "codebleu-11": 0.5493267938732486,
        "codebleu-1": 0.28615686664415524,
        "codebleu-10": 0.40541248924287265,
        "codebleu-17": 0.1692216461565438,
        "codebleu-12": 0.3627172821975904,
        "codebleu-6": 0.5525145924982975,
        "codebleu-18": 0.4407469850942766,
        "codebleu-15": 0.4547904543618208,
        "codebleu-13": 0.3254149412192343,
        "codebleu-9": 0.43357867204091205,
        "codebleu-4": 0.4087626915444502,
        "codebleu-14": 0.3154221619618139,
        "codebleu-5": 0.44381409146966433,
        "codebleu-19": 0.46472368431784494,
        "chrf-3": 0.1118626409864035,
        "chrf-0": 0.17233500065210902,
        "chrf-8": 0.16989866694446543,
        "chrf-7": 0.18493577847946582,
        "chrf-16": 0.0011399908800729594,
        "chrf-2": 0.4247333152442475,
        "chrf-11": 0.2684774847058571,
        "chrf-1": 0.11198557645773494,
        "chrf-10": 0.152472397271253,
        "chrf-17": 0.12518064843749852,
        "chrf-12": 0.16489950642671863,
        "chrf-6": 0.2560078046262385,
        "chrf-18": 0.2622279890666283,
        "chrf-15": 0.2139568053599533,
        "chrf-13": 0.1296257134169699,
        "chrf-9": 0.31033234018197137,
        "chrf-4": 0.18313514375202083,
        "chrf-14": 0.12674090122841783,
        "chrf-5": 0.220407727640576,
        "chrf-19": 0.1977787097515783,
        "rougel-3": 0.05825242718446603,
        "rougel-0": 0.2714932126696833,
        "rougel-8": 0.3018867924528302,
        "rougel-7": 0.3157894736842105,
        "rougel-16": 0.0198019801980198,
        "rougel-2": 0.39344262295081966,
        "rougel-11": 0.6200000000000001,
        "rougel-1": 0.36942675159235666,
        "rougel-10": 0.28695652173913044,
        "rougel-17": 0.4,
        "rougel-12": 0.4245810055865922,
        "rougel-6": 0.48826291079812206,
        "rougel-18": 0.5454545454545455,
        "rougel-15": 0.3318777292576419,
        "rougel-13": 0.40490797546012275,
        "rougel-9": 0.34259259259259256,
        "rougel-4": 0.4021739130434782,
        "rougel-14": 0.3712574850299401,
        "rougel-5": 0.3796296296296296,
        "rougel-19": 0.3286384976525822,
        "meteor-3": 0.05175983436853002,
        "meteor-0": 0.2585998162620656,
        "meteor-8": 0.3057028752129571,
        "meteor-7": 0.31781330699035787,
        "meteor-16": 0.005807200929152149,
        "meteor-2": 0.3550657366059143,
        "meteor-11": 0.49221833795246484,
        "meteor-1": 0.22638064448042924,
        "meteor-10": 0.26713850523374333,
        "meteor-17": 0.2026413093327218,
        "meteor-12": 0.3274321271151343,
        "meteor-6": 0.48203750395630107,
        "meteor-18": 0.35772114275574485,
        "meteor-15": 0.3212841253791709,
        "meteor-13": 0.2761277540141032,
        "meteor-9": 0.36594334776662196,
        "meteor-4": 0.372351303154147,
        "meteor-14": 0.2568230010316025,
        "meteor-5": 0.3255635245901639,
        "meteor-19": 0.3387790339157246,
        "ruby-3": 0.04504504504504503,
        "ruby-0": 0.15873015873015872,
        "ruby-8": 0.14529914529914534,
        "ruby-7": 0.15037593984962405,
        "ruby-16": 0.010526315789473717,
        "ruby-2": 0.28421052631578947,
        "ruby-11": 0.5047619047619047,
        "ruby-1": 0.28421052631578947,
        "ruby-10": 0.19259259259259254,
        "ruby-17": 0.26315789473684215,
        "ruby-12": 0.2315789473684211,
        "ruby-6": 0.3305084745762712,
        "ruby-18": 0.4421052631578948,
        "ruby-15": 0.19402985074626866,
        "ruby-13": 0.2947368421052632,
        "ruby-9": 0.15702479338842978,
        "ruby-4": 0.16842105263157892,
        "ruby-14": 0.26315789473684215,
        "ruby-5": 0.20661157024793386,
        "ruby-19": 0.15254237288135597,
        "codebertscore_f1-3": 0.6425625681877136,
        "codebertscore_f3-3": 0.6415066123008728,
        "codebertscore_f1-0": 0.7529711723327637,
        "codebertscore_f3-0": 0.7442880272865295,
        "codebertscore_f1-8": 0.763968825340271,
        "codebertscore_f3-8": 0.7573599815368652,
        "codebertscore_f1-7": 0.7568273544311523,
        "codebertscore_f3-7": 0.7590221166610718,
        "codebertscore_f1-16": 0.576786458492279,
        "codebertscore_f3-16": 0.5496476292610168,
        "codebertscore_f1-2": 0.8488481640815735,
        "codebertscore_f3-2": 0.8264649510383606,
        "codebertscore_f1-11": 0.8615431189537048,
        "codebertscore_f3-11": 0.853753924369812,
        "codebertscore_f1-1": 0.7862204313278198,
        "codebertscore_f3-1": 0.7698676586151123,
        "codebertscore_f1-10": 0.7884889841079712,
        "codebertscore_f3-10": 0.7881571054458618,
        "codebertscore_f1-17": 0.7522954344749451,
        "codebertscore_f3-17": 0.722866415977478,
        "codebertscore_f1-12": 0.7925810813903809,
        "codebertscore_f3-12": 0.7730010747909546,
        "codebertscore_f1-6": 0.8201927542686462,
        "codebertscore_f3-6": 0.8090885877609253,
        "codebertscore_f1-18": 0.8533956408500671,
        "codebertscore_f3-18": 0.83455890417099,
        "codebertscore_f1-15": 0.7583937644958496,
        "codebertscore_f3-15": 0.7531934380531311,
        "codebertscore_f1-13": 0.7810330390930176,
        "codebertscore_f3-13": 0.7689509987831116,
        "codebertscore_f1-9": 0.7710437774658203,
        "codebertscore_f3-9": 0.762036144733429,
        "codebertscore_f1-4": 0.7788922190666199,
        "codebertscore_f3-4": 0.7595827579498291,
        "codebertscore_f1-14": 0.8004291653633118,
        "codebertscore_f3-14": 0.7895069718360901,
        "codebertscore_f1-5": 0.7620252966880798,
        "codebertscore_f3-5": 0.7625975012779236,
        "codebertscore_f1-19": 0.787325382232666,
        "codebertscore_f3-19": 0.778245210647583,
        "codebertscore_s_f1-3": 0.6348791718482971,
        "codebertscore_s_f3-3": 0.6350873112678528,
        "codebertscore_s_f1-0": 0.7626144289970398,
        "codebertscore_s_f3-0": 0.7523912191390991,
        "codebertscore_s_f1-8": 0.7675960659980774,
        "codebertscore_s_f3-8": 0.7572808265686035,
        "codebertscore_s_f1-7": 0.7695145010948181,
        "codebertscore_s_f3-7": 0.7681174874305725,
        "codebertscore_s_f1-16": 0.5371781587600708,
        "codebertscore_s_f3-16": 0.5055122375488281,
        "codebertscore_s_f1-2": 0.8539822101593018,
        "codebertscore_s_f3-2": 0.8299286961555481,
        "codebertscore_s_f1-11": 0.8601362705230713,
        "codebertscore_s_f3-11": 0.8520286679267883,
        "codebertscore_s_f1-1": 0.7862279415130615,
        "codebertscore_s_f3-1": 0.7659184336662292,
        "codebertscore_s_f1-10": 0.7950966954231262,
        "codebertscore_s_f3-10": 0.7897924184799194,
        "codebertscore_s_f1-17": 0.7410352230072021,
        "codebertscore_s_f3-17": 0.7113596796989441,
        "codebertscore_s_f1-12": 0.7897306084632874,
        "codebertscore_s_f3-12": 0.7710414528846741,
        "codebertscore_s_f1-6": 0.8211865425109863,
        "codebertscore_s_f3-6": 0.8112396001815796,
        "codebertscore_s_f1-18": 0.856195330619812,
        "codebertscore_s_f3-18": 0.836088240146637,
        "codebertscore_s_f1-15": 0.7708423137664795,
        "codebertscore_s_f3-15": 0.7626358866691589,
        "codebertscore_s_f1-13": 0.7788830399513245,
        "codebertscore_s_f3-13": 0.7634398937225342,
        "codebertscore_s_f1-9": 0.7845577597618103,
        "codebertscore_s_f3-9": 0.7739632725715637,
        "codebertscore_s_f1-4": 0.7910105586051941,
        "codebertscore_s_f3-4": 0.7728739976882935,
        "codebertscore_s_f1-14": 0.7986552119255066,
        "codebertscore_s_f3-14": 0.7826218605041504,
        "codebertscore_s_f1-5": 0.7773476839065552,
        "codebertscore_s_f3-5": 0.7730309963226318,
        "codebertscore_s_f1-19": 0.7913936972618103,
        "codebertscore_s_f3-19": 0.7804843783378601,
        "gpt35_nsnr-3": 0,
        "raw_gpt35_nsnr-3": "0",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 0,
        "raw_gpt35_nsnr-16": "0",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 2,
        "raw_gpt35_nsnr-17": "2",
        "gpt35_nsnr-12": 2,
        "raw_gpt35_nsnr-12": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 0,
        "raw_gpt35_nswr-3": "0",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "Score: 0",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\nfunction count_upper(s){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a string s, count the number of uppercase vowels in even indices.",
        "task_id": "98",
        "3": "var num = 0;\n  var list = s.split(\"\");\n  for(var i = 0; i < list.length; i++){\n    if((list[i] == \"A\" || list[i] == \"E\" || list[i] == \"I\" || list[i] == \"O\" || list[i] == \"U\") && i % 2 === 0){\n      num += 1;\n    }\n  }\n  return num;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i % 2 == 0){\n                count ++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\t\tif(i % 2 === 0 && s[i] === s[i].toUpperCase() && (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U')){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var count = 0;\n\tfor(var i = 0; i < s.length; i += 2){\n\t\tif(s[i] == s[i].toUpperCase() && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "s = s.toLowerCase();\n\tvar count = 0;\n\tfor(var i = 0; i < s.length; i++){\n\t\tif(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let result = 0;\n    let vowel = \"AEIOU\";\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && vowel.includes(s[i])){\n            result += 1;\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\t\tif(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n\t\t\tif(i % 2 === 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var count = 0;\n\tvar vowelList = ['A','E','I','O','U'];\n\tfor(var i = 0; i < s.length; i++){\n\t\tif(i % 2 == 0 && vowelList.indexOf(s[i]) >= 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            if(i % 2 === 0){\n                count += 1;\n            }\n        }\n    }\n    return count;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "// count number of uppercase vowels in even indices\n    var count = 0;\n    for (var i = 0; i < s.length; i++) {\n        if ((i % 2 == 0) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n            if(i % 2 === 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var uppercase = 0;\n    for(i=0; i<s.length; i++){\n        if(i%2 ==0 && s[i] == s[i].toUpperCase()){\n            uppercase = uppercase + 1;\n        }\n    }\n    return uppercase;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var string = s.toLowerCase();\n    var count = 0;\n    for(var i = 0; i < string.length; i+=2){\n        if(string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u'){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let cnt = 0;\n  for(let i = 0; i < s.length; i += 2){\n    if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n      cnt++;\n    }\n  }\n  return cnt;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && isVowel(s[i])) count++;\n    }\n    return count;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let count = 0;\n    let upVowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(upVowels.includes(s[i]) && i % 2 == 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var i = 0;\n\tvar count = 0;\n\twhile (i < s.length){\n\t\tif (s[i] === \"A\" || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\"){\n\t\t\tcount = count + 1;\n\t\t}\n\t\ti = i + 2;\n\t}\n\treturn count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n\tvar count = 0;\n\tfor (var i = 0; i < s.length; i++) {\n\t\tfor (var j = 0; j < vowels.length; j++) {\n\t\t\tif (s[i] === vowels[j] && i % 2 === 0) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let count = 0;\n  for(let i = 1; i < s.length; i+=2){\n    if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n      count += 1;\n    }\n  }\n  return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var upperVowels = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i % 2 == 0){\n                upperVowels++;\n            }\n        }\n    }\n    return upperVowels;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.5016255275519999,
        "bleu-0": 0.725499904065251,
        "bleu-8": 0.5823164445500446,
        "bleu-7": 0.6831681091155398,
        "bleu-16": 0.5364747186446749,
        "bleu-2": 0.26382645869598564,
        "bleu-11": 0.6949919651524891,
        "bleu-1": 0.3051281240632222,
        "bleu-10": 0.6666136546591592,
        "bleu-17": 0.6371852482065622,
        "bleu-12": 0.718280101467483,
        "bleu-6": 0.2608448901506085,
        "bleu-18": 0.40548111017894684,
        "bleu-15": 0.8095667040577997,
        "bleu-13": 0.21718548905559115,
        "bleu-9": 0.33909178314560606,
        "bleu-4": 0.6721539974574919,
        "bleu-14": 0.3108540580617755,
        "bleu-5": 0.774095078559255,
        "bleu-19": 0.7042631955640715,
        "codebleu-3": 0.8249086024180868,
        "codebleu-0": 0.870554331836962,
        "codebleu-8": 0.8384295523525434,
        "codebleu-7": 0.880890337026503,
        "codebleu-16": 0.8365139023828082,
        "codebleu-2": 0.4103898304594023,
        "codebleu-11": 0.8514117043370091,
        "codebleu-1": 0.5412576122968801,
        "codebleu-10": 0.849145754037396,
        "codebleu-17": 0.8558352225271806,
        "codebleu-12": 0.8693510314040008,
        "codebleu-6": 0.3993944842328901,
        "codebleu-18": 0.8121454024211288,
        "codebleu-15": 0.8878987985023867,
        "codebleu-13": 0.3299970223278749,
        "codebleu-9": 0.5430743630670621,
        "codebleu-4": 0.828474941605234,
        "codebleu-14": 0.609924951705948,
        "codebleu-5": 0.8670593246874121,
        "codebleu-19": 0.8670148804200988,
        "chrf-3": 0.3501262054476879,
        "chrf-0": 0.7509472823509168,
        "chrf-8": 0.7004388680056762,
        "chrf-7": 0.7656250875732572,
        "chrf-16": 0.5757523142579243,
        "chrf-2": 0.3567676052504485,
        "chrf-11": 0.7512172242718854,
        "chrf-1": 0.33975362605968096,
        "chrf-10": 0.696215411628619,
        "chrf-17": 0.6824447509630107,
        "chrf-12": 0.5103507810867167,
        "chrf-6": 0.3185973243318768,
        "chrf-18": 0.4371710551420507,
        "chrf-15": 0.8167596697939085,
        "chrf-13": 0.3467322822018704,
        "chrf-9": 0.3858119095163701,
        "chrf-4": 0.44813874286693584,
        "chrf-14": 0.32859518112237224,
        "chrf-5": 0.7730222817161585,
        "chrf-19": 0.734012744811507,
        "rougel-3": 0.7363184079601991,
        "rougel-0": 0.8571428571428572,
        "rougel-8": 0.7793427230046949,
        "rougel-7": 0.8341708542713568,
        "rougel-16": 0.7638190954773869,
        "rougel-2": 0.4800000000000001,
        "rougel-11": 0.8512820512820513,
        "rougel-1": 0.4161849710982659,
        "rougel-10": 0.8163265306122449,
        "rougel-17": 0.7960199004975125,
        "rougel-12": 0.8526315789473684,
        "rougel-6": 0.5333333333333333,
        "rougel-18": 0.7384615384615385,
        "rougel-15": 0.9239130434782609,
        "rougel-13": 0.5035971223021583,
        "rougel-9": 0.4378698224852071,
        "rougel-4": 0.7914438502673797,
        "rougel-14": 0.43157894736842106,
        "rougel-5": 0.8972972972972973,
        "rougel-19": 0.84375,
        "meteor-3": 0.7266837025655554,
        "meteor-0": 0.8692355195007964,
        "meteor-8": 0.8855248610445525,
        "meteor-7": 0.9065996202719055,
        "meteor-16": 0.859609434013523,
        "meteor-2": 0.3557781090607873,
        "meteor-11": 0.8655730511795112,
        "meteor-1": 0.5153387298924771,
        "meteor-10": 0.8437267140852569,
        "meteor-17": 0.8765042196343116,
        "meteor-12": 0.8441228323985683,
        "meteor-6": 0.39636034606228354,
        "meteor-18": 0.8347786166088553,
        "meteor-15": 0.9435097727485271,
        "meteor-13": 0.3154289867170452,
        "meteor-9": 0.515593587091194,
        "meteor-4": 0.8410879784654107,
        "meteor-14": 0.5926622036667846,
        "meteor-5": 0.9175637593130734,
        "meteor-19": 0.8663251327167535,
        "ruby-3": 0.6460176991150443,
        "ruby-0": 0.7920792079207921,
        "ruby-8": 0.656,
        "ruby-7": 0.7477477477477478,
        "ruby-16": 0.6756756756756757,
        "ruby-2": 0.28409090909090906,
        "ruby-11": 0.7663551401869159,
        "ruby-1": 0.18181818181818177,
        "ruby-10": 0.7314814814814814,
        "ruby-17": 0.6991150442477876,
        "ruby-12": 0.7843137254901961,
        "ruby-6": 0.40909090909090906,
        "ruby-18": 0.6728971962616823,
        "ruby-15": 0.8854166666666666,
        "ruby-13": 0.375,
        "ruby-9": 0.19318181818181823,
        "ruby-4": 0.6868686868686869,
        "ruby-14": 0.20588235294117652,
        "ruby-5": 0.8556701030927836,
        "ruby-19": 0.7692307692307692,
        "codebertscore_f1-3": 0.9096872806549072,
        "codebertscore_f3-3": 0.9252145290374756,
        "codebertscore_f1-0": 0.9377548098564148,
        "codebertscore_f3-0": 0.9420908093452454,
        "codebertscore_f1-8": 0.9329075217247009,
        "codebertscore_f3-8": 0.9514567255973816,
        "codebertscore_f1-7": 0.9409528374671936,
        "codebertscore_f3-7": 0.9558903574943542,
        "codebertscore_f1-16": 0.9163953065872192,
        "codebertscore_f3-16": 0.9301231503486633,
        "codebertscore_f1-2": 0.8617573976516724,
        "codebertscore_f3-2": 0.8653443455696106,
        "codebertscore_f1-11": 0.956391453742981,
        "codebertscore_f3-11": 0.9609998464584351,
        "codebertscore_f1-1": 0.8713356256484985,
        "codebertscore_f3-1": 0.8895872831344604,
        "codebertscore_f1-10": 0.9352837800979614,
        "codebertscore_f3-10": 0.9422997236251831,
        "codebertscore_f1-17": 0.8905121684074402,
        "codebertscore_f3-17": 0.9214509725570679,
        "codebertscore_f1-12": 0.9401906132698059,
        "codebertscore_f3-12": 0.9446470141410828,
        "codebertscore_f1-6": 0.8310503959655762,
        "codebertscore_f3-6": 0.8432248830795288,
        "codebertscore_f1-18": 0.911664605140686,
        "codebertscore_f3-18": 0.9240795373916626,
        "codebertscore_f1-15": 0.9716034531593323,
        "codebertscore_f3-15": 0.9769312143325806,
        "codebertscore_f1-13": 0.8674506545066833,
        "codebertscore_f3-13": 0.8629165291786194,
        "codebertscore_f1-9": 0.8757043480873108,
        "codebertscore_f3-9": 0.8946552872657776,
        "codebertscore_f1-4": 0.9278374910354614,
        "codebertscore_f3-4": 0.9333339929580688,
        "codebertscore_f1-14": 0.8589745163917542,
        "codebertscore_f3-14": 0.8723943829536438,
        "codebertscore_f1-5": 0.9639866352081299,
        "codebertscore_f3-5": 0.9683843851089478,
        "codebertscore_f1-19": 0.9116998314857483,
        "codebertscore_f3-19": 0.9331509470939636,
        "codebertscore_s_f1-3": 0.912976086139679,
        "codebertscore_s_f3-3": 0.9287827610969543,
        "codebertscore_s_f1-0": 0.9369959235191345,
        "codebertscore_s_f3-0": 0.9419001340866089,
        "codebertscore_s_f1-8": 0.9291085600852966,
        "codebertscore_s_f3-8": 0.9479129314422607,
        "codebertscore_s_f1-7": 0.9376574158668518,
        "codebertscore_s_f3-7": 0.9522527456283569,
        "codebertscore_s_f1-16": 0.9213271737098694,
        "codebertscore_s_f3-16": 0.9344586133956909,
        "codebertscore_s_f1-2": 0.8648688197135925,
        "codebertscore_s_f3-2": 0.8704320192337036,
        "codebertscore_s_f1-11": 0.9573596715927124,
        "codebertscore_s_f3-11": 0.962466835975647,
        "codebertscore_s_f1-1": 0.8717531561851501,
        "codebertscore_s_f3-1": 0.8915225863456726,
        "codebertscore_s_f1-10": 0.9345493316650391,
        "codebertscore_s_f3-10": 0.9419811367988586,
        "codebertscore_s_f1-17": 0.893928050994873,
        "codebertscore_s_f3-17": 0.9251325726509094,
        "codebertscore_s_f1-12": 0.9396187663078308,
        "codebertscore_s_f3-12": 0.9446412920951843,
        "codebertscore_s_f1-6": 0.8290532827377319,
        "codebertscore_s_f3-6": 0.8448638916015625,
        "codebertscore_s_f1-18": 0.9118973016738892,
        "codebertscore_s_f3-18": 0.9238292574882507,
        "codebertscore_s_f1-15": 0.9707409143447876,
        "codebertscore_s_f3-15": 0.976806640625,
        "codebertscore_s_f1-13": 0.8686696290969849,
        "codebertscore_s_f3-13": 0.8654382228851318,
        "codebertscore_s_f1-9": 0.8726248741149902,
        "codebertscore_s_f3-9": 0.8926228880882263,
        "codebertscore_s_f1-4": 0.9269641637802124,
        "codebertscore_s_f3-4": 0.9323039650917053,
        "codebertscore_s_f1-14": 0.8607224822044373,
        "codebertscore_s_f3-14": 0.8743021488189697,
        "codebertscore_s_f1-5": 0.9655714631080627,
        "codebertscore_s_f3-5": 0.9699890613555908,
        "codebertscore_s_f1-19": 0.9056253433227539,
        "codebertscore_s_f3-19": 0.9303703308105469,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nfunction separate_paren_groups(paren_string){\n",
        "snippet": [
            "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n"
        ],
        "simplified": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "task_id": "1",
        "3": "var paren_groups = [];\n  var paren_stack = [];\n  var last_paren = null;\n  var paren_count = 0;\n  var last_paren_idx = 0;\n  for (var i = 0; i < paren_string.length; i++) {\n    var c = paren_string[i];\n    if (c === '(' || c === ')') {\n      if (last_paren && c !== last_paren) {\n        paren_stack.push(c);\n        last_paren = c;\n        paren_count++;\n      } else if (last_paren && c === last_paren) {\n        paren_stack.pop();\n        last_paren = paren_stack[paren_stack.length - 1];\n        paren_count++;\n      } else {\n        last_paren = c;\n        paren_count++;\n      }\n    }\n\n    if (paren_count % 2 === 0) {\n      paren_groups.push(paren_string.slice(last_paren_idx, i + 1));\n      last_paren_idx = i + 1;\n    }\n  }\n  return paren_groups;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let groups = [];\n    let open_parens = 0;\n    let start_idx = 0;\n    let end_idx = 0;\n    for (let idx = 0; idx < paren_string.length; idx++){\n        let paren = paren_string[idx];\n        if (paren === '('){\n            open_parens++;\n            if (open_parens === 1){\n                start_idx = idx;\n            }\n        }\n        else if (paren === ')'){\n            open_parens--;\n            if (open_parens === 0){\n                end_idx = idx;\n                groups.push(paren_string.slice(start_idx, end_idx + 1));\n            }\n        }\n    }\n    return groups;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let regex_pattern = /\\([^()]*\\)/g;\n    let regex_match = regex_pattern.exec(paren_string);\n    let result = [];\n    while (regex_match !== null){\n        result.push(regex_match[0]);\n        regex_match = regex_pattern.exec(paren_string);\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(!paren_string){\n        return paren_string;\n    }\n    let list = [];\n    let open = [];\n    let close = [];\n    let t = paren_string.replace(/\\s/g, '');\n    for(let i = 0; i < t.length; i++){\n        if(t[i] === '('){\n            open.push(i);\n        }\n        if(t[i] === ')'){\n            close.push(i);\n        }\n    }\n    for(let i = 0; i < open.length; i++){\n        if(close[i] < open[i+1]){\n            list.push(t.slice(open[i], close[i]+1));\n        }\n    }\n    return list;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "//validate arguments\n    if (paren_string === '') {\n        return [];\n    }\n    if (paren_string.match(/[^()]/)) {\n        throw new Error('Invalid characters passed to separate_paren_groups()');\n    }\n    var groups = [];\n    var group = '';\n    var is_in_group = false;\n    for (var i = 0; i < paren_string.length; i++) {\n        var paren = paren_string[i];\n        if (paren === '(') {\n            if (is_in_group) {\n                group += paren;\n            } else {\n                is_in_group = true;\n                group = paren;\n            }\n        } else if (paren === ')') {\n            if (is_in_group) {\n                group += paren;\n                groups.push(group);\n                is_in_group = false;\n            } else {\n                throw new Error('Unbalanced right parenthesis at index ' + i);\n            }\n        }\n    }\n    if (is_in_group) {\n        throw new Error('Unbalanced left parenthesis at index ' + i);\n    }\n    return groups;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// write your code here\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return paren_string.replace(/\\s/g, '').split(/\\)(\\()/).map(e => e.replace(/\\(/g, '').replace(/\\)/g, ''));\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var results = []\n  var counter = 0\n  var last = 0\n  for(var i = 0; i < paren_string.length; i++){\n    var current = paren_string[i]\n    if(current === '('){\n      counter += 1\n    }\n    if(current === ')'){\n      counter -= 1\n    }\n    if(counter === 0){\n      results.push(paren_string.slice(last, i + 1))\n      last = i + 1\n    }\n  }\n  return results\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var paren_list = [];\n  var temp_paren_list = [];\n  var i = 0;\n  for (i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === '('){\n      temp_paren_list.push(paren_string[i]);\n    } else if (paren_string[i] === ')'){\n      temp_paren_list.push(paren_string[i]);\n      if (temp_paren_list.length === 2){\n        paren_list.push(temp_paren_list.join(''));\n        temp_paren_list = [];\n      }\n    }\n  }\n  return paren_list;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "//check that the strings are balanced.\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            open++;\n        }else if(paren_string[i] === ')'){\n            close++;\n        }\n    }\n    if(open !== close){\n        return 'Not balanced';\n    }\n    //create a new list that splits on spaces.\n    let split_paren_string = paren_string.split(' ');\n    //create an empty array to hold our groups.\n    let groups = [];\n    //loop through our split string.\n    for(let i = 0; i < split_paren_string.length; i++){\n        let current_group = '';\n        //if we see an open paren, start adding to our current group.\n        if(split_paren_string[i][0] === '('){\n            current_group += split_paren_string[i];\n            //if the current group is not balanced, add the next item to it.\n            if(current_group.length % 2 !== 0){\n                current_group += split_paren_string[i + 1];\n                i++;\n            }\n            //push the current group to our groups list.\n            groups.push(current_group);\n        }\n    }\n    return groups;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var paren_array = paren_string.split(\" \").join(\"\").split(\"\")\n  var paren_counter = 0\n  var paren_strings = []\n  var count = 0\n  while (count < paren_array.length){\n    if (paren_array[count] === \"(\"){\n      paren_counter++\n    } else if (paren_array[count] === \")\"){\n      paren_counter--\n    }\n    if (paren_counter === 0){\n      paren_strings.push(paren_array.slice(0, count + 1).join(\"\"))\n      paren_array = paren_array.slice(count + 1)\n      count = 0\n    } else {\n      count++\n    }\n  }\n  return paren_strings\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var bal_paren = [];\n    var temp = [];\n    var front = 0;\n    var back = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            temp.push(paren_string[i]);\n            front++;\n        }\n        else if(paren_string[i] == ')'){\n            temp.push(paren_string[i]);\n            back++;\n        }\n        if(front == back){\n            bal_paren.push(temp.join(''));\n            temp = [];\n            front = 0;\n            back = 0;\n        }\n    }\n    return bal_paren;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var acc = [];\n    var result = [];\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            acc.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            acc.push(paren_string[i]);\n            result.push(acc.join(''));\n            acc = [];\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let stack = [], result = [], start = 0, end = 0;\n\tfor(let i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] === '('){\n\t\t\tstack.push(paren_string[i]);\n\t\t}else if(paren_string[i] === ')'){\n\t\t\tstack.pop();\n\t\t}\n\t\tif(stack.length === 0){\n\t\t\tresult.push(paren_string.slice(start, i + 1));\n\t\t\tstart = i + 1;\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr = [],\n      left_paren = '(',\n      right_paren = ')',\n      open_paren = 0,\n      close_paren = 0,\n      temp_string = '';\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === left_paren){\n      open_paren += 1;\n    }else if(paren_string[i] === right_paren){\n      close_paren += 1;\n    }\n\n    if(open_paren === close_paren){\n      arr.push(temp_string);\n      temp_string = '';\n      open_paren = 0;\n      close_paren = 0;\n    }else{\n      temp_string += paren_string[i];\n    }\n  }\n  return arr;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let paren_array = paren_string.split(\" \").join(\"\").split(\"\");\n    let result = [];\n    let cur_paren_string = \"\";\n    let count = 0;\n    for (let i = 0; i < paren_array.length; i++){\n        if (paren_array[i] === \"(\"){\n            count++;\n        }\n        if (paren_array[i] === \")\"){\n            count--;\n        }\n        cur_paren_string += paren_array[i];\n        if (count === 0){\n            result.push(cur_paren_string);\n            cur_paren_string = \"\";\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "const groups = [];\n    let group = '';\n    for (const paren of paren_string) {\n        if (paren === '(' || paren === ')') {\n            group += paren;\n        }\n        if (group.length === 2) {\n            groups.push(group);\n            group = '';\n        }\n    }\n    return groups;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// your code here\n    var i;\n    var arr = [];\n    var cur = '';\n    var count = 0;\n    var list = [];\n    for (i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] == '(') {\n            count += 1;\n        }\n        else if (paren_string[i] == ')') {\n            count -= 1;\n        }\n        cur += paren_string[i];\n        if (count == 0) {\n            list.push(cur);\n            cur = '';\n        }\n    }\n    return list;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "//code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var res = [];\n\tvar start = 0;\n\tvar end = 0;\n\tfor(var i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tstart = i;\n\t\t}\n\t\tif(paren_string[i] == \")\"){\n\t\t\tend = i;\n\t\t\tres.push(paren_string.slice(start, end+1));\n\t\t}\n\t}\n\treturn res;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.2414833340790534,
        "bleu-0": 0.26516908919676585,
        "bleu-8": 0.13808147051143985,
        "bleu-7": 0.2064416318387691,
        "bleu-16": 0.17056161538368442,
        "bleu-2": 6.29947718225513e-08,
        "bleu-11": 0.05300639667903471,
        "bleu-1": 0.24740307635987285,
        "bleu-10": 0.4157950061176979,
        "bleu-17": 0.13383262219595912,
        "bleu-12": 0.239032917560881,
        "bleu-6": 0.32959457627111505,
        "bleu-18": 0.47242076924524773,
        "bleu-15": 0.3526441613764914,
        "bleu-13": 0.19182156334256764,
        "bleu-9": 0.33401304533812626,
        "bleu-4": 0.23005965074794743,
        "bleu-14": 0.32539170744782536,
        "bleu-5": 2.6892362285878354e-10,
        "bleu-19": 0.2771076961580335,
        "codebleu-3": 0.6959480443419737,
        "codebleu-0": 0.6317798822130662,
        "codebleu-8": 0.3658138884870582,
        "codebleu-7": 0.6848551387531734,
        "codebleu-16": 0.6361278287544235,
        "codebleu-2": 0.02267573821043878,
        "codebleu-11": 0.22119950338381988,
        "codebleu-1": 0.5723775535429719,
        "codebleu-10": 0.7515376880944462,
        "codebleu-17": 0.6630544449691678,
        "codebleu-12": 0.6176803728814619,
        "codebleu-6": 0.7281006550021019,
        "codebleu-18": 0.6844624184569743,
        "codebleu-15": 0.6405661187328165,
        "codebleu-13": 0.5968795576092487,
        "codebleu-9": 0.6983488295518191,
        "codebleu-4": 0.4585368784189072,
        "codebleu-14": 0.6807023310598983,
        "codebleu-5": 0.013605442180148739,
        "codebleu-19": 0.5627882521255997,
        "chrf-3": 0.34578816150604813,
        "chrf-0": 0.30376778262463305,
        "chrf-8": 0.2555680301333222,
        "chrf-7": 0.3191224122660671,
        "chrf-16": 0.31519867483229247,
        "chrf-2": 0.016158080493381344,
        "chrf-11": 0.11366479258263851,
        "chrf-1": 0.3995071771020158,
        "chrf-10": 0.41182350028123066,
        "chrf-17": 0.40430815049418156,
        "chrf-12": 0.29815787423232515,
        "chrf-6": 0.38557243203750746,
        "chrf-18": 0.44570133342378554,
        "chrf-15": 0.4102027992983656,
        "chrf-13": 0.3292113421262488,
        "chrf-9": 0.41262345436656667,
        "chrf-4": 0.240816108143385,
        "chrf-14": 0.37832744604685986,
        "chrf-5": 0.00888313252505451,
        "chrf-19": 0.28922867931325846,
        "rougel-3": 0.49484536082474223,
        "rougel-0": 0.5321888412017167,
        "rougel-8": 0.3529411764705882,
        "rougel-7": 0.4468864468864469,
        "rougel-16": 0.39228295819935693,
        "rougel-2": 0.01801801801801802,
        "rougel-11": 0.29268292682926833,
        "rougel-1": 0.5576923076923077,
        "rougel-10": 0.6785714285714285,
        "rougel-17": 0.31216931216931215,
        "rougel-12": 0.47698744769874474,
        "rougel-6": 0.6224066390041494,
        "rougel-18": 0.6634615384615384,
        "rougel-15": 0.5903083700440528,
        "rougel-13": 0.46610169491525427,
        "rougel-9": 0.5021276595744681,
        "rougel-4": 0.5363128491620112,
        "rougel-14": 0.5777777777777777,
        "rougel-5": 0.01834862385321101,
        "rougel-19": 0.5435897435897435,
        "meteor-3": 0.5503450157409819,
        "meteor-0": 0.533450704225352,
        "meteor-8": 0.34070852346145997,
        "meteor-7": 0.5064900696822429,
        "meteor-16": 0.42293853893263345,
        "meteor-2": 0.0053022269353128326,
        "meteor-11": 0.2194313152714918,
        "meteor-1": 0.4847843874770808,
        "meteor-10": 0.7614644263639799,
        "meteor-17": 0.3953203356635207,
        "meteor-12": 0.4470850840336134,
        "meteor-6": 0.7051555866211039,
        "meteor-18": 0.6255689576695493,
        "meteor-15": 0.645243425533249,
        "meteor-13": 0.426144655696583,
        "meteor-9": 0.5493784382148574,
        "meteor-4": 0.36904068958873515,
        "meteor-14": 0.5135059117518398,
        "meteor-5": 0.005313496280552604,
        "meteor-19": 0.4888714760634467,
        "ruby-3": 0.3743315508021391,
        "ruby-0": 0.37209302325581395,
        "ruby-8": 0.25,
        "ruby-7": 0.30177514792899407,
        "ruby-16": 0.27053140096618356,
        "ruby-2": 0.009615384615384581,
        "ruby-11": 0.1826923076923077,
        "ruby-1": 0.3557692307692307,
        "ruby-10": 0.55,
        "ruby-17": 0.2043795620437956,
        "ruby-12": 0.274074074074074,
        "ruby-6": 0.4890510948905109,
        "ruby-18": 0.4903846153846154,
        "ruby-15": 0.4390243902439024,
        "ruby-13": 0.303030303030303,
        "ruby-9": 0.33587786259541985,
        "ruby-4": 0.4423076923076923,
        "ruby-14": 0.42148760330578516,
        "ruby-5": 0.009615384615384581,
        "ruby-19": 0.3653846153846154,
        "codebertscore_f1-3": 0.7677046060562134,
        "codebertscore_f3-3": 0.7900853753089905,
        "codebertscore_f1-0": 0.7477244138717651,
        "codebertscore_f3-0": 0.7629083395004272,
        "codebertscore_f1-8": 0.7317893505096436,
        "codebertscore_f3-8": 0.7284641861915588,
        "codebertscore_f1-7": 0.7415862679481506,
        "codebertscore_f3-7": 0.7544090151786804,
        "codebertscore_f1-16": 0.6872279644012451,
        "codebertscore_f3-16": 0.71306312084198,
        "codebertscore_f1-2": 0.5781471133232117,
        "codebertscore_f3-2": 0.5558655858039856,
        "codebertscore_f1-11": 0.6540254950523376,
        "codebertscore_f3-11": 0.6543548703193665,
        "codebertscore_f1-1": 0.8381288647651672,
        "codebertscore_f3-1": 0.8389802575111389,
        "codebertscore_f1-10": 0.823438286781311,
        "codebertscore_f3-10": 0.8191339373588562,
        "codebertscore_f1-17": 0.6992669105529785,
        "codebertscore_f3-17": 0.7468836903572083,
        "codebertscore_f1-12": 0.8109368085861206,
        "codebertscore_f3-12": 0.8127726912498474,
        "codebertscore_f1-6": 0.7941961884498596,
        "codebertscore_f3-6": 0.7950156331062317,
        "codebertscore_f1-18": 0.8317441940307617,
        "codebertscore_f3-18": 0.8156564831733704,
        "codebertscore_f1-15": 0.8044608235359192,
        "codebertscore_f3-15": 0.8015176057815552,
        "codebertscore_f1-13": 0.7882571816444397,
        "codebertscore_f3-13": 0.7955303192138672,
        "codebertscore_f1-9": 0.8098352551460266,
        "codebertscore_f3-9": 0.8106277585029602,
        "codebertscore_f1-4": 0.8008542656898499,
        "codebertscore_f3-4": 0.7790113687515259,
        "codebertscore_f1-14": 0.8062551021575928,
        "codebertscore_f3-14": 0.8074051141738892,
        "codebertscore_f1-5": 0.5673498511314392,
        "codebertscore_f3-5": 0.5408186912536621,
        "codebertscore_f1-19": 0.7957313060760498,
        "codebertscore_f3-19": 0.7846382260322571,
        "codebertscore_s_f1-3": 0.7818383574485779,
        "codebertscore_s_f3-3": 0.8002708554267883,
        "codebertscore_s_f1-0": 0.7600025534629822,
        "codebertscore_s_f3-0": 0.7743880748748779,
        "codebertscore_s_f1-8": 0.7375908493995667,
        "codebertscore_s_f3-8": 0.7350826263427734,
        "codebertscore_s_f1-7": 0.751400887966156,
        "codebertscore_s_f3-7": 0.7648302316665649,
        "codebertscore_s_f1-16": 0.7092389464378357,
        "codebertscore_s_f3-16": 0.7354683876037598,
        "codebertscore_s_f1-2": 0.5563347935676575,
        "codebertscore_s_f3-2": 0.5268911719322205,
        "codebertscore_s_f1-11": 0.6656514406204224,
        "codebertscore_s_f3-11": 0.6603569984436035,
        "codebertscore_s_f1-1": 0.8435276746749878,
        "codebertscore_s_f3-1": 0.8440868258476257,
        "codebertscore_s_f1-10": 0.8282654285430908,
        "codebertscore_s_f3-10": 0.822830080986023,
        "codebertscore_s_f1-17": 0.7234949469566345,
        "codebertscore_s_f3-17": 0.7692529559135437,
        "codebertscore_s_f1-12": 0.8185080885887146,
        "codebertscore_s_f3-12": 0.8169136643409729,
        "codebertscore_s_f1-6": 0.797872006893158,
        "codebertscore_s_f3-6": 0.7982968091964722,
        "codebertscore_s_f1-18": 0.8375442028045654,
        "codebertscore_s_f3-18": 0.8207164406776428,
        "codebertscore_s_f1-15": 0.8106462359428406,
        "codebertscore_s_f3-15": 0.8079473376274109,
        "codebertscore_s_f1-13": 0.7932095527648926,
        "codebertscore_s_f3-13": 0.8013652563095093,
        "codebertscore_s_f1-9": 0.8201234936714172,
        "codebertscore_s_f3-9": 0.8184076547622681,
        "codebertscore_s_f1-4": 0.8089231252670288,
        "codebertscore_s_f3-4": 0.7846582531929016,
        "codebertscore_s_f1-14": 0.8156570196151733,
        "codebertscore_s_f3-14": 0.8162399530410767,
        "codebertscore_s_f1-5": 0.5414085984230042,
        "codebertscore_s_f3-5": 0.5048328638076782,
        "codebertscore_s_f1-19": 0.8038857579231262,
        "codebertscore_s_f3-19": 0.7919092774391174,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "N/A (code snippet is missing)",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 0,
        "raw_gpt35_nswr-5": "Score: 3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n",
        "snippet": [
            "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
        "task_id": "107",
        "3": "let count = [0, 0];\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i.toString())){\n            if(i % 2 === 0){\n                count[0]++;\n            } else {\n                count[1]++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var even=0, odd=0;\n    for(var i=1; i<=n; i++){\n        if(i===11) continue;\n        if(i<10){\n            even++;\n        }else if(i<100){\n            if(i%11===0){\n                even++;\n            }else{\n                odd++;\n            }\n        }else if(i<1000){\n            if(i%11===0){\n                even++;\n            }else if(i%10===i/100){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let nArr = n.toString().split('');\n    let nArrLen = nArr.length;\n    let evenLen = Math.floor(nArrLen/2);\n    let oddLen = nArrLen % 2 === 0 ? evenLen : evenLen + 1;\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < evenLen; i++){\n        even = even + 1;\n    }\n    for(let i = 0; i < oddLen; i++){\n        odd = odd + 1;\n    }\n    return [even, odd];\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var odd = 0, even = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 == 0){\n                even += 1;\n            }\n            else{\n                odd += 1;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var even = 0;\n\tvar odd = 0;\n\tfor(var i = 1; i <= n; i++){\n\t\tif(i < 10){\n\t\t\todd++;\n\t\t}else if(i == reverse(i)){\n\t\t\tif(i % 2 == 0){\n\t\t\t\teven++;\n\t\t\t}else{\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\t}\n\treturn [even, odd];\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let even = 0;\n    let odd = 0;\n    let str = '';\n    for(let i = 1; i <= n; i++){\n        str = i.toString();\n        if(str.length % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var evens = 0;\n  var odds = 0;\n  var str = \"\" + n;\n  if(str.length === 1) return [evens, odds];\n  if(str.length === 2){\n    odds++;\n    if(Number(str[0]) === Number(str[1])) evens++;\n    return [evens, odds];\n  }\n  if(str.length === 3){\n    var n = Number(str);\n    var palindromes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999];\n    palindromes.forEach(function(num){\n      if(num > n) return;\n      if(num % 2 === 0) evens++;\n      else odds++;\n    });\n    return [evens, odds];\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let evens = 0;\n\tlet odds = 0;\n\tfor(let i = 1; i <= n; i++){\n\t\tif(is_palindrome(i)){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tevens++;\n\t\t\t} else {\n\t\t\t\todds++;\n\t\t\t}\n\t\t}\n\t}\n\treturn [evens, odds];\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let even_count = 0;\n  let odd_count = 0;\n  for(let i = 1; i <= n; i++){\n    let current_number = i.toString();\n    if(current_number.length === 1){\n      odd_count++;\n    }\n    else if(current_number.length === 2){\n      if(current_number[0] === current_number[1]){\n        even_count++;\n      }\n      else{\n        odd_count++;\n      }\n    }\n    else{\n      let palindrome = true;\n      for(let j = 0; j < current_number.length/2; j++){\n        if(current_number[j] !== current_number[current_number.length - j - 1]){\n          palindrome = false;\n          break;\n        }\n      }\n      if(palindrome){\n        if(current_number.length % 2 !== 0){\n          odd_count++;\n        }\n        else{\n          even_count++;\n        }\n      }\n    }\n  }\n  return [even_count, odd_count];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let nums = get_nums(n);\n    let even = 0;\n    let odd = 0;\n    for(let num of nums){\n        if(is_palindrome(num)){\n            num.toString().length % 2 === 0 ? even++ : odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var even = 0, odd = 0;\n    for(var i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 == 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let evens = 0;\n    let odds = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i.toString())){\n            if(i % 2 == 0){\n                evens++;\n            }else{\n                odds++;\n            }\n        }\n    }\n    return [evens, odds];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(n===1)return [0,1];\n    if(n===2)return [1,1];\n    let evens = 0;\n    let odds = 0;\n    for(let i=1;i<=n;i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2===0)evens++;\n            else odds++;\n        }\n    }\n    return [evens,odds];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let count_odd = 0;\n  let count_even = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 == 0){\n        count_even += 1;\n      } else {\n        count_odd += 1;\n      }\n    }\n  }\n  return {even: count_even, odd: count_odd};\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let evens = 0;\n  let odds = 0;\n  for(let i = 1; i <= n; i++){\n    if(i.toString() === i.toString().split('').reverse().join('')){\n      if(i.toString().length % 2 === 0){\n        evens++\n      } else {\n        odds++\n      }\n    }\n  }\n  return [evens, odds]\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n < 1 || n > Math.pow(10, 3)){\n    return 'invalid';\n  }\n  let count_even = 0;\n  let count_odd = 0;\n  let number = 1;\n  while(number <= n){\n    if(is_palindrome(number)){\n      if(number % 2 == 0){\n        count_even += 1;\n      }else{\n        count_odd += 1;\n      }\n    }\n    number += 1;\n  }\n  return [count_even, count_odd];\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var arr = [1,2,3];\n    var even_odd = [1,2];\n    if(n <= 3){\n        return even_odd;\n    }\n    for(var i = 4; i <= n; i++){\n        var is_palindrome = true;\n        for(var j = 0; j < Math.floor(arr.length/2); j++){\n            if(arr[j] != arr[arr.length - 1 - j]){\n                is_palindrome = false;\n                break;\n            }\n        }\n        if(is_palindrome == true){\n            if(i % 2 == 0){\n                even_odd[0]++;\n            }else{\n                even_odd[1]++;\n            }\n        }\n        arr.push(i);\n    }\n    return even_odd;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// your code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//i: int\n    //o: list\n    //c: 1 <= n <= 10^3\n    //e: \n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.279200743711801,
        "bleu-0": 0.24391872378079182,
        "bleu-8": 0.20757988502174377,
        "bleu-7": 0.23754920799190837,
        "bleu-16": 0.2654625664329017,
        "bleu-2": 0.2657602202072238,
        "bleu-11": 0.050296380709733635,
        "bleu-1": 0.2383980662961341,
        "bleu-10": 0.3721252760761961,
        "bleu-17": 0.1094389648370498,
        "bleu-12": 0.2119295483736521,
        "bleu-6": 0.28142133670286973,
        "bleu-18": 0.34727208470450527,
        "bleu-15": 0.25548977095370257,
        "bleu-13": 0.36282974854629,
        "bleu-9": 0.1651004910187994,
        "bleu-4": 0.31568581747398095,
        "bleu-14": 0.24088439015793006,
        "bleu-5": 3.8494777300731556e-10,
        "bleu-19": 0.2910304114134234,
        "codebleu-3": 0.39775942303566497,
        "codebleu-0": 0.5741887571069447,
        "codebleu-8": 0.5510921345873463,
        "codebleu-7": 0.356341761043884,
        "codebleu-16": 0.45478586410916483,
        "codebleu-2": 0.4047860844897231,
        "codebleu-11": 0.5714857491036608,
        "codebleu-1": 0.3872078475882868,
        "codebleu-10": 0.7639349783189551,
        "codebleu-17": 0.3306386118080101,
        "codebleu-12": 0.35654226669380595,
        "codebleu-6": 0.4260166892127793,
        "codebleu-18": 0.5669045133393285,
        "codebleu-15": 0.3932898929754649,
        "codebleu-13": 0.5335769604997668,
        "codebleu-9": 0.4392099432953855,
        "codebleu-4": 0.715857377920111,
        "codebleu-14": 0.38120679532467794,
        "codebleu-5": 0.015873015878182174,
        "codebleu-19": 0.45226175542464825,
        "chrf-3": 0.35160268273057765,
        "chrf-0": 0.28409544826348365,
        "chrf-8": 0.3127832766688905,
        "chrf-7": 0.31657473265466635,
        "chrf-16": 0.2994541382695457,
        "chrf-2": 0.3829508476752036,
        "chrf-11": 0.16542250707781317,
        "chrf-1": 0.3318243357665763,
        "chrf-10": 0.46096631216254635,
        "chrf-17": 0.2626011148106661,
        "chrf-12": 0.283666125906317,
        "chrf-6": 0.3831778260192469,
        "chrf-18": 0.3649567289456181,
        "chrf-15": 0.31100812081355245,
        "chrf-13": 0.4212875641170248,
        "chrf-9": 0.22327022368051103,
        "chrf-4": 0.3753465127997447,
        "chrf-14": 0.33063877160899424,
        "chrf-5": 0.01457399754726741,
        "chrf-19": 0.3293852696785928,
        "rougel-3": 0.523076923076923,
        "rougel-0": 0.49042145593869735,
        "rougel-8": 0.3346613545816733,
        "rougel-7": 0.48677248677248675,
        "rougel-16": 0.5294117647058824,
        "rougel-2": 0.5482233502538071,
        "rougel-11": 0.21138211382113822,
        "rougel-1": 0.5319148936170213,
        "rougel-10": 0.6366559485530546,
        "rougel-17": 0.36170212765957444,
        "rougel-12": 0.5026737967914439,
        "rougel-6": 0.5595854922279793,
        "rougel-18": 0.47107438016528924,
        "rougel-15": 0.4948453608247423,
        "rougel-13": 0.5545454545454545,
        "rougel-9": 0.3796296296296296,
        "rougel-4": 0.592057761732852,
        "rougel-14": 0.5291005291005291,
        "rougel-5": 0.015748031496062992,
        "rougel-19": 0.4629629629629629,
        "meteor-3": 0.4414325492696679,
        "meteor-0": 0.4421093114320586,
        "meteor-8": 0.388231696365728,
        "meteor-7": 0.3726439888397739,
        "meteor-16": 0.4904002857918916,
        "meteor-2": 0.41626993519804567,
        "meteor-11": 0.32705104215655867,
        "meteor-1": 0.41159050266945924,
        "meteor-10": 0.6298325275815393,
        "meteor-17": 0.3265662394953232,
        "meteor-12": 0.3965014577259475,
        "meteor-6": 0.44890752853143845,
        "meteor-18": 0.4300677944214876,
        "meteor-15": 0.3218764411506354,
        "meteor-13": 0.49991320613542833,
        "meteor-9": 0.37789500502568685,
        "meteor-4": 0.6621211408132529,
        "meteor-14": 0.40919403630077794,
        "meteor-5": 0.004566210045662101,
        "meteor-19": 0.43360308682485116,
        "ruby-3": 0.33884297520661155,
        "ruby-0": 0.37142857142857144,
        "ruby-8": 0.16153846153846152,
        "ruby-7": 0.3305785123966942,
        "ruby-16": 0.38842975206611574,
        "ruby-2": 0.3553719008264463,
        "ruby-11": 0.10512129380053903,
        "ruby-1": 0.371900826446281,
        "ruby-10": 0.5052631578947369,
        "ruby-17": 0.25619834710743805,
        "ruby-12": 0.3553719008264463,
        "ruby-6": 0.39669421487603307,
        "ruby-18": 0.2975206611570248,
        "ruby-15": 0.30578512396694213,
        "ruby-13": 0.4628099173553719,
        "ruby-9": 0.22314049586776863,
        "ruby-4": 0.46794871794871795,
        "ruby-14": 0.36363636363636365,
        "ruby-5": 0.008264462809917328,
        "ruby-19": 0.31404958677685946,
        "codebertscore_f1-3": 0.820927619934082,
        "codebertscore_f3-3": 0.8072493672370911,
        "codebertscore_f1-0": 0.7789161801338196,
        "codebertscore_f3-0": 0.7693023085594177,
        "codebertscore_f1-8": 0.7861402034759521,
        "codebertscore_f3-8": 0.7973870038986206,
        "codebertscore_f1-7": 0.8159328103065491,
        "codebertscore_f3-7": 0.8012646436691284,
        "codebertscore_f1-16": 0.8127269744873047,
        "codebertscore_f3-16": 0.7917497754096985,
        "codebertscore_f1-2": 0.8531009554862976,
        "codebertscore_f3-2": 0.8326175212860107,
        "codebertscore_f1-11": 0.6369585394859314,
        "codebertscore_f3-11": 0.7121794819831848,
        "codebertscore_f1-1": 0.7985245585441589,
        "codebertscore_f3-1": 0.7889007925987244,
        "codebertscore_f1-10": 0.8050563931465149,
        "codebertscore_f3-10": 0.8384000062942505,
        "codebertscore_f1-17": 0.779744565486908,
        "codebertscore_f3-17": 0.7782220244407654,
        "codebertscore_f1-12": 0.8112073540687561,
        "codebertscore_f3-12": 0.7914255261421204,
        "codebertscore_f1-6": 0.8237463235855103,
        "codebertscore_f3-6": 0.8144124150276184,
        "codebertscore_f1-18": 0.8187353610992432,
        "codebertscore_f3-18": 0.8148205280303955,
        "codebertscore_f1-15": 0.7936565279960632,
        "codebertscore_f3-15": 0.7925707101821899,
        "codebertscore_f1-13": 0.8343304395675659,
        "codebertscore_f3-13": 0.823428750038147,
        "codebertscore_f1-9": 0.7559028267860413,
        "codebertscore_f3-9": 0.7605951428413391,
        "codebertscore_f1-4": 0.7716969847679138,
        "codebertscore_f3-4": 0.7945536971092224,
        "codebertscore_f1-14": 0.8272050023078918,
        "codebertscore_f3-14": 0.8092384934425354,
        "codebertscore_f1-5": 0.5534234642982483,
        "codebertscore_f3-5": 0.5308228731155396,
        "codebertscore_f1-19": 0.8027981519699097,
        "codebertscore_f3-19": 0.8039111495018005,
        "codebertscore_s_f1-3": 0.8173839449882507,
        "codebertscore_s_f3-3": 0.8040842413902283,
        "codebertscore_s_f1-0": 0.7837961316108704,
        "codebertscore_s_f3-0": 0.7718880772590637,
        "codebertscore_s_f1-8": 0.7883514761924744,
        "codebertscore_s_f3-8": 0.7978411316871643,
        "codebertscore_s_f1-7": 0.8167340755462646,
        "codebertscore_s_f3-7": 0.8003013730049133,
        "codebertscore_s_f1-16": 0.8171948790550232,
        "codebertscore_s_f3-16": 0.7951330542564392,
        "codebertscore_s_f1-2": 0.8547914028167725,
        "codebertscore_s_f3-2": 0.832526683807373,
        "codebertscore_s_f1-11": 0.6710702180862427,
        "codebertscore_s_f3-11": 0.7242303490638733,
        "codebertscore_s_f1-1": 0.803061842918396,
        "codebertscore_s_f3-1": 0.7916276454925537,
        "codebertscore_s_f1-10": 0.842930257320404,
        "codebertscore_s_f3-10": 0.8738279342651367,
        "codebertscore_s_f1-17": 0.7760927081108093,
        "codebertscore_s_f3-17": 0.7734322547912598,
        "codebertscore_s_f1-12": 0.8109366297721863,
        "codebertscore_s_f3-12": 0.7894150614738464,
        "codebertscore_s_f1-6": 0.8221629858016968,
        "codebertscore_s_f3-6": 0.8126747012138367,
        "codebertscore_s_f1-18": 0.8182188272476196,
        "codebertscore_s_f3-18": 0.8145514130592346,
        "codebertscore_s_f1-15": 0.7946850061416626,
        "codebertscore_s_f3-15": 0.7927715182304382,
        "codebertscore_s_f1-13": 0.8335933089256287,
        "codebertscore_s_f3-13": 0.8206796646118164,
        "codebertscore_s_f1-9": 0.7540774941444397,
        "codebertscore_s_f3-9": 0.7590086460113525,
        "codebertscore_s_f1-4": 0.7806186676025391,
        "codebertscore_s_f3-4": 0.8008203506469727,
        "codebertscore_s_f1-14": 0.8280752301216125,
        "codebertscore_s_f3-14": 0.8086050748825073,
        "codebertscore_s_f1-5": 0.5273773074150085,
        "codebertscore_s_f3-5": 0.5050197243690491,
        "codebertscore_s_f1-19": 0.8010168075561523,
        "codebertscore_s_f3-19": 0.8017150163650513,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 2,
        "raw_gpt35_nsnr-2": "2",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\nfunction generate_integers(a, b){\n",
        "snippet": [
            "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n"
        ],
        "simplified": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
        "task_id": "163",
        "0": "if(a>b){\n    var temp = a;\n    a = b;\n    b = temp;\n  }\n  var arr = [];\n  for(var i = a; i<=b; i++){\n    if(i%2==0){\n      arr.push(i);\n    }\n  }\n  return arr;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var even = [];\n  if(a < b){\n    for(var i = a; i <= b; i++){\n      if(i % 2 === 0){\n        even.push(i);\n      }\n    }\n  } else {\n    for(var i = b; i <= a; i++){\n      if(i % 2 === 0){\n        even.push(i);\n      }\n    }\n  }\n  return even;\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "var evens = [];\n    for(var i = a; i <= b; i++){\n        if(i % 2 === 0){\n            evens.push(i);\n        }\n    }\n    return evens;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "let result = [];\n  if(a < b){\n    for(let i = a; i <= b; i++){\n      if(i % 2 === 0){\n        result.push(i);\n      }\n    }\n  } else {\n    for(let i = b; i <= a; i++){\n      if(i % 2 === 0){\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "let arr = [];\n    if(a < b){\n        for(let i = a; i <= b; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }else{\n        for(let i = b; i <= a; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }\n    return arr;\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var result = [];\n\tvar min = Math.min(a, b);\n\tvar max = Math.max(a, b);\n\tfor(var i = min; i <= max; i++){\n\t\tif(i % 2 === 0){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "if(a > b){\n        var aux = a;\n        a = b;\n        b = aux;\n    }\n    var result = [];\n    while(a <= b){\n        if(a % 2 == 0){\n            result.push(a);\n        }\n        a++;\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "var arr = []\n    if(a<b){\n        for(var i = a; i<=b; i++){\n            if(i%2 == 0){\n                arr.push(i)\n            }\n        }\n    }else{\n        for(var i = b; i<=a; i++){\n            if(i%2 == 0){\n                arr.push(i)\n            }\n        }\n    }\n    return arr\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "var array = [];\n  if (a > b){\n    for (var i = b; i <= a; i++){\n      if (i % 2 === 0){\n        array.push(i);\n      }\n    }\n  } else {\n    for (var i = a; i <= b; i++){\n      if (i % 2 === 0){\n        array.push(i);\n      }\n    }\n  }\n  return array;\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "if(b < a){\n       return generate_integers(b, a);\n   }\n   if(a % 2 == 0){\n       var array = [a];\n       for(var i = a+2; i <= b; i+=2){\n           array.push(i);\n       }\n       return array;\n   }\n   if(a % 2 != 0){\n       var array = [];\n       for(var i = a+1; i <= b; i+=2){\n           array.push(i);\n       }\n       return array;\n   }\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "let evArr = [];\n  if(a < b){\n    for(let i = a; i <= b; i++){\n      if(i % 2 === 0){\n        evArr.push(i);\n      }\n    }\n  } else {\n    for(let i = b; i <= a; i++){\n      if(i % 2 === 0){\n        evArr.push(i);\n      }\n    }\n  }\n  return evArr;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "let arr = [];\n    if(a < b){\n        for(let i = a; i <= b; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    } else if(a > b){\n        for(let i = b; i <= a; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }\n    return arr;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "let even_numbers = [];\n    for(let i = a; i <= b; i++){\n        if(i % 2 === 0){\n            even_numbers.push(i);\n        }\n    }\n    return even_numbers;\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var result = []\n  for(var i = a; i <= b; i++){\n    if(i % 2 === 0){\n      result.push(i)\n    }\n  }\n  return result;\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "let integers = [];\n  if (a < b) {\n    for (let i = a; i <= b; i++) {\n      if (i % 2 === 0) {\n        integers.push(i);\n      }\n    }\n  } else {\n    for (let i = b; i <= a; i++) {\n      if (i % 2 === 0) {\n        integers.push(i);\n      }\n    }\n  }\n  return integers;\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var integersArray = [];\n    if(a < b){\n        for(var i = a; i <= b; i++){\n            if(i % 2 === 0){\n                integersArray.push(i);\n            }\n        }\n    } else {\n        for(var i = b; i <= a; i++){\n            if(i % 2 === 0){\n                integersArray.push(i);\n            }\n        }\n    }\n    return integersArray;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "let s = [];\n    for(let i = a; i <= b; i++){\n        if(i % 2 == 0){\n            s.push(i);\n        }\n    }\n    return s;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "if(a>b){\n        [a,b] = [b,a];\n    }\n    let result = [];\n    for(let i = a; i<=b; i++){\n        if(i%2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "let sorted = getSorted(a, b);\n    let result = [];\n    for(let i = sorted[0]; i <= sorted[1]; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "bleu-0": 0.4661197269842009,
        "bleu-1": 0.32717940565580667,
        "bleu-2": 0.26890049629156487,
        "bleu-3": 0.3606607801458824,
        "bleu-4": 0.3606607801458824,
        "bleu-5": 0.2521407405221343,
        "bleu-6": 0.2754277425468693,
        "bleu-7": 0.3577941262889112,
        "bleu-8": 0.3622323240296067,
        "bleu-9": 0.1809796614656725,
        "bleu-10": 0.34586245278187067,
        "bleu-11": 0.3737790175230383,
        "bleu-12": 0.29920077711359994,
        "bleu-13": 0.29326728974526545,
        "bleu-14": 0.3606607801458824,
        "bleu-15": 0.313754857664481,
        "bleu-16": 0.29065212231947907,
        "bleu-17": 0.4321394544101071,
        "bleu-18": 0.2785256693317224,
        "codebleu-0": 0.626379078825068,
        "codebleu-1": 0.6423252020848982,
        "codebleu-2": 0.4010785639438354,
        "codebleu-3": 0.6531137644999107,
        "codebleu-4": 0.6531137644999107,
        "codebleu-5": 0.5357141052714551,
        "codebleu-6": 0.5212788505445877,
        "codebleu-7": 0.6235277334053688,
        "codebleu-8": 0.668595055043356,
        "codebleu-9": 0.5840476227053379,
        "codebleu-10": 0.6506473766059087,
        "codebleu-11": 0.6792000595144834,
        "codebleu-12": 0.40784920054793594,
        "codebleu-13": 0.3878240160769661,
        "codebleu-14": 0.6531137644999107,
        "codebleu-15": 0.6400877774196772,
        "codebleu-16": 0.3976772688305092,
        "codebleu-17": 0.5660708526621491,
        "codebleu-18": 0.4924431031788126,
        "chrf-0": 0.48143154293547114,
        "chrf-1": 0.36084215127839914,
        "chrf-2": 0.34215779362557186,
        "chrf-3": 0.4190994739942828,
        "chrf-4": 0.4270618696175755,
        "chrf-5": 0.2895245770911066,
        "chrf-6": 0.3002730396885846,
        "chrf-7": 0.371267438258596,
        "chrf-8": 0.4004058587077499,
        "chrf-9": 0.2761106021546058,
        "chrf-10": 0.4191701237876165,
        "chrf-11": 0.4497454176459772,
        "chrf-12": 0.39389775233302354,
        "chrf-13": 0.3948897218506871,
        "chrf-14": 0.412989804772942,
        "chrf-15": 0.35992460143497385,
        "chrf-16": 0.40886230029634374,
        "chrf-17": 0.4653229612926022,
        "chrf-18": 0.3236149928732344,
        "rougel-0": 0.7346938775510204,
        "rougel-1": 0.5371428571428571,
        "rougel-2": 0.5826771653543308,
        "rougel-3": 0.56,
        "rougel-4": 0.56,
        "rougel-5": 0.5298013245033112,
        "rougel-6": 0.6056338028169015,
        "rougel-7": 0.5325443786982248,
        "rougel-8": 0.5485714285714287,
        "rougel-9": 0.4948453608247421,
        "rougel-10": 0.547486033519553,
        "rougel-11": 0.5414364640883977,
        "rougel-12": 0.6141732283464566,
        "rougel-13": 0.592,
        "rougel-14": 0.56,
        "rougel-15": 0.5251396648044693,
        "rougel-16": 0.6031746031746033,
        "rougel-17": 0.6938775510204082,
        "rougel-18": 0.5833333333333334,
        "meteor-0": 0.6078521342180808,
        "meteor-1": 0.5785376151604931,
        "meteor-2": 0.45785120599739243,
        "meteor-3": 0.6099386503067484,
        "meteor-4": 0.6099386503067484,
        "meteor-5": 0.4925478982599614,
        "meteor-6": 0.49700481290790177,
        "meteor-7": 0.5511893801048221,
        "meteor-8": 0.5859643427704383,
        "meteor-9": 0.46526984100740104,
        "meteor-10": 0.606959706959707,
        "meteor-11": 0.6453593301803963,
        "meteor-12": 0.48263547052893296,
        "meteor-13": 0.4548141509604765,
        "meteor-14": 0.6099386503067484,
        "meteor-15": 0.5757120346224688,
        "meteor-16": 0.4745753102949101,
        "meteor-17": 0.6300355991473007,
        "meteor-18": 0.5048860875269076,
        "ruby-0": 0.6375,
        "ruby-1": 0.3263157894736842,
        "ruby-2": 0.42500000000000004,
        "ruby-3": 0.34736842105263155,
        "ruby-4": 0.34736842105263155,
        "ruby-5": 0.375,
        "ruby-6": 0.44999999999999996,
        "ruby-7": 0.3258426966292135,
        "ruby-8": 0.33684210526315794,
        "ruby-9": 0.38596491228070173,
        "ruby-10": 0.33333333333333337,
        "ruby-11": 0.3366336633663366,
        "ruby-12": 0.44999999999999996,
        "ruby-13": 0.44999999999999996,
        "ruby-14": 0.34736842105263155,
        "ruby-15": 0.31313131313131315,
        "ruby-16": 0.4375,
        "ruby-17": 0.575,
        "ruby-18": 0.4,
        "codebertscore_f1-0": 0.89853435754776,
        "codebertscore_f3-0": 0.8804487586021423,
        "codebertscore_f1-1": 0.8358038663864136,
        "codebertscore_f3-1": 0.8208300471305847,
        "codebertscore_f1-2": 0.8255642652511597,
        "codebertscore_f3-2": 0.8127959370613098,
        "codebertscore_f1-3": 0.8491180539131165,
        "codebertscore_f3-3": 0.8332324028015137,
        "codebertscore_f1-4": 0.8418422341346741,
        "codebertscore_f3-4": 0.8304914832115173,
        "codebertscore_f1-5": 0.8257544040679932,
        "codebertscore_f3-5": 0.8245609998703003,
        "codebertscore_f1-6": 0.8502823710441589,
        "codebertscore_f3-6": 0.8270578384399414,
        "codebertscore_f1-7": 0.829116702079773,
        "codebertscore_f3-7": 0.8183308839797974,
        "codebertscore_f1-8": 0.8417994379997253,
        "codebertscore_f3-8": 0.8261123299598694,
        "codebertscore_f1-9": 0.7983415126800537,
        "codebertscore_f3-9": 0.8079801201820374,
        "codebertscore_f1-10": 0.8379718065261841,
        "codebertscore_f3-10": 0.8335447907447815,
        "codebertscore_f1-11": 0.8391600847244263,
        "codebertscore_f3-11": 0.8276376724243164,
        "codebertscore_f1-12": 0.8300381898880005,
        "codebertscore_f3-12": 0.8241848945617676,
        "codebertscore_f1-13": 0.8410575985908508,
        "codebertscore_f3-13": 0.8187704682350159,
        "codebertscore_f1-14": 0.8549467325210571,
        "codebertscore_f3-14": 0.8390057682991028,
        "codebertscore_f1-15": 0.8136812448501587,
        "codebertscore_f3-15": 0.8101563453674316,
        "codebertscore_f1-16": 0.8641412258148193,
        "codebertscore_f3-16": 0.837827742099762,
        "codebertscore_f1-17": 0.8830448389053345,
        "codebertscore_f3-17": 0.8598918318748474,
        "codebertscore_f1-18": 0.8333231806755066,
        "codebertscore_f3-18": 0.8342824578285217,
        "codebertscore_s_f1-0": 0.8993151783943176,
        "codebertscore_s_f3-0": 0.8817759156227112,
        "codebertscore_s_f1-1": 0.843133807182312,
        "codebertscore_s_f3-1": 0.8282914757728577,
        "codebertscore_s_f1-2": 0.8269096612930298,
        "codebertscore_s_f3-2": 0.8172734379768372,
        "codebertscore_s_f1-3": 0.8561365008354187,
        "codebertscore_s_f3-3": 0.8407727479934692,
        "codebertscore_s_f1-4": 0.853463888168335,
        "codebertscore_s_f3-4": 0.8409641981124878,
        "codebertscore_s_f1-5": 0.8301821351051331,
        "codebertscore_s_f3-5": 0.8304325342178345,
        "codebertscore_s_f1-6": 0.850829005241394,
        "codebertscore_s_f3-6": 0.8286581635475159,
        "codebertscore_s_f1-7": 0.8385470509529114,
        "codebertscore_s_f3-7": 0.8270725607872009,
        "codebertscore_s_f1-8": 0.8488495349884033,
        "codebertscore_s_f3-8": 0.8334077596664429,
        "codebertscore_s_f1-9": 0.80832839012146,
        "codebertscore_s_f3-9": 0.8156838417053223,
        "codebertscore_s_f1-10": 0.840093731880188,
        "codebertscore_s_f3-10": 0.8364835381507874,
        "codebertscore_s_f1-11": 0.8507585525512695,
        "codebertscore_s_f3-11": 0.8396875858306885,
        "codebertscore_s_f1-12": 0.8306975364685059,
        "codebertscore_s_f3-12": 0.8278678059577942,
        "codebertscore_s_f1-13": 0.8338741660118103,
        "codebertscore_s_f3-13": 0.8152110576629639,
        "codebertscore_s_f1-14": 0.8604062795639038,
        "codebertscore_s_f3-14": 0.8441469669342041,
        "codebertscore_s_f1-15": 0.8249988555908203,
        "codebertscore_s_f3-15": 0.8199040293693542,
        "codebertscore_s_f1-16": 0.8651625514030457,
        "codebertscore_s_f3-16": 0.841316819190979,
        "codebertscore_s_f1-17": 0.8863697052001953,
        "codebertscore_s_f3-17": 0.865045964717865,
        "codebertscore_s_f1-18": 0.8347722887992859,
        "codebertscore_s_f3-18": 0.837677001953125,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3"
    },
    {
        "intent": "//Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n",
        "snippet": [
            "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n"
        ],
        "simplified": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
        "task_id": "5",
        "3": "let numbers_copy = numbers.slice(0);\n  let new_list = [];\n  let i = 0;\n  while (i < numbers_copy.length){\n    new_list.push(numbers_copy[i]);\n    if (i !== numbers_copy.length - 1){\n      new_list.push(delimeter);\n    }\n    i += 1;\n  }\n  return new_list;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "//Write your code here\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var x = numbers.shift();\n    if(x === undefined){\n        return [];\n    }\n    else{\n        return [x].concat(delimeter, intersperse(numbers, delimeter));\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "//YOUR CODE HERE\n    if (numbers.length === 0) {\n        return [];\n    }\n    var result = [numbers[0]];\n    for (var i = 1; i < numbers.length; i++) {\n        result.push(delimeter);\n        result.push(numbers[i]);\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "const interspersed = numbers.reduce((acc, curr, idx) => {\n        if (idx == 0) {\n            return acc.concat(curr);\n        } else {\n            return acc.concat(delimeter, curr);\n        }\n    }, []);\n    return interspersed;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return is_null(numbers)\n        ? null\n        : pair(head(numbers),\n               pair(delimeter,\n                    intersperse(tail(numbers), delimeter)));\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var i;\n  var result = [];\n  for(i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if(i < numbers.length - 1)\n      result.push(delimeter);\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//console.log(\"numbers: \", numbers);\n    if(numbers.length === 0){\n        return [];\n    } else if(numbers.length === 1){\n        return numbers;\n    } else {\n        var a = [numbers[0]];\n        var b = [delimeter].concat(numbers.slice(1));\n        //console.log(\"a: \", a);\n        //console.log(\"b: \", b);\n        return a.concat(intersperse(b, delimeter));\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var ans = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tans.push(numbers[i]);\n\t\tif(i != numbers.length - 1){\n\t\t\tans.push(delimeter);\n\t\t}\n\t}\n\treturn ans;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(numbers.length <= 1){\n        return numbers;\n    }\n    var ret = [];\n    for(var i = 0; i < numbers.length; i++){\n        ret.push(numbers[i]);\n        if(i < numbers.length - 1){\n            ret.push(delimeter);\n        }\n    }\n    return ret;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return foldr(function(x,y){\n\t\treturn cat(x, [delimeter, y]);\n\t}, [], numbers);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (numbers.length == 0) {\n        return [];\n    } else {\n        return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).reduce(function(acc, x) {\n            if (acc.length > 0) {\n                return acc.concat([delimeter, x]);\n            } else {\n                return acc.concat([x]);\n            }\n        }, []);\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(numbers.length === 0){\n        return numbers;\n    }\n    return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter).reduce(function(result, element){\n        return result.concat([delimeter, element]);\n    }, []));\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var result = [];\n    for(var i = 0; i < numbers.length - 1; i++){\n        result.push(numbers[i]);\n        result.push(delimeter);\n    }\n    if(numbers.length !== 0){\n        result.push(numbers[numbers.length - 1]);\n    }\n    return result;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return is_null(numbers)\n\t\t? null\n\t\t: pair(head(numbers),\n\t\t\t   pair(delimeter, intersperse(tail(numbers), delimeter)));\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i != numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return _.reduce(numbers, function(memo, number){\n      memo.push(number);\n      memo.push(delimeter);\n      return memo;\n    }, []).slice(0, -1);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return [];\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return numbers.length == 0 ? numbers : [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).reduce(function(prev, curr){\n\t\treturn prev.concat([delimeter, curr]);\n\t});\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.1281545598349266,
        "bleu-0": 5.1913671281259775e-05,
        "bleu-8": 0.12163341234744132,
        "bleu-7": 0.3505422659564769,
        "bleu-16": 0.3201896060228394,
        "bleu-2": 0.11369306152454815,
        "bleu-11": 0.05569486503539005,
        "bleu-1": 0.368429228525178,
        "bleu-10": 0.12175987716563215,
        "bleu-17": 0.2129541219136865,
        "bleu-12": 0.17586000900497015,
        "bleu-6": 0.042414834888828724,
        "bleu-18": 0.14737591882892187,
        "bleu-15": 0.17318685343953383,
        "bleu-13": 0.3011744423400815,
        "bleu-9": 0.05569486503539005,
        "bleu-4": 0.348569359861648,
        "bleu-14": 0.0897036441295319,
        "bleu-5": 2.312368659277081e-05,
        "bleu-19": 0.17020364661571566,
        "codebleu-3": 0.5806183525650802,
        "codebleu-0": 0.04166829318996526,
        "codebleu-8": 0.45278315999937313,
        "codebleu-7": 0.6258105422684662,
        "codebleu-16": 0.641430777958539,
        "codebleu-2": 0.5365414361800173,
        "codebleu-11": 0.2707249669937768,
        "codebleu-1": 0.6037917026965831,
        "codebleu-10": 0.6106225309679345,
        "codebleu-17": 0.5987639585905526,
        "codebleu-12": 0.6215939521181123,
        "codebleu-6": 0.24990432511632574,
        "codebleu-18": 0.5837190317389767,
        "codebleu-15": 0.5838027471781939,
        "codebleu-13": 0.6424796910072974,
        "codebleu-9": 0.2707249669937768,
        "codebleu-4": 0.6295969509234434,
        "codebleu-14": 0.45322605544383093,
        "codebleu-5": 0.041671084178932276,
        "codebleu-19": 0.5397870275223723,
        "chrf-3": 0.3628953691578989,
        "chrf-0": 0.032669701944815874,
        "chrf-8": 0.3183640126412144,
        "chrf-7": 0.5741349723560443,
        "chrf-16": 0.5973599653327119,
        "chrf-2": 0.2915893710929907,
        "chrf-11": 0.2819378688387754,
        "chrf-1": 0.5911860539552666,
        "chrf-10": 0.3848869064348983,
        "chrf-17": 0.3920890638642422,
        "chrf-12": 0.4550058855037922,
        "chrf-6": 0.21080740955151123,
        "chrf-18": 0.37859050848694215,
        "chrf-15": 0.43449621228067975,
        "chrf-13": 0.5736329010207755,
        "chrf-9": 0.2819378688387754,
        "chrf-4": 0.5756808417628179,
        "chrf-14": 0.31773437383213915,
        "chrf-5": 0.06018847143675552,
        "chrf-19": 0.3750545557794738,
        "rougel-3": 0.39062499999999994,
        "rougel-0": 0.03125,
        "rougel-8": 0.396039603960396,
        "rougel-7": 0.45217391304347826,
        "rougel-16": 0.625,
        "rougel-2": 0.38596491228070173,
        "rougel-11": 0.3146067415730337,
        "rougel-1": 0.46956521739130436,
        "rougel-10": 0.4,
        "rougel-17": 0.39655172413793105,
        "rougel-12": 0.4806201550387597,
        "rougel-6": 0.29545454545454547,
        "rougel-18": 0.4161073825503356,
        "rougel-15": 0.43902439024390244,
        "rougel-13": 0.42748091603053434,
        "rougel-9": 0.3146067415730337,
        "rougel-4": 0.44827586206896547,
        "rougel-14": 0.36893203883495146,
        "rougel-5": 0.16129032258064516,
        "rougel-19": 0.38596491228070173,
        "meteor-3": 0.38775678677566866,
        "meteor-0": 0.009615384615384616,
        "meteor-8": 0.3923762836811595,
        "meteor-7": 0.4946965726972207,
        "meteor-16": 0.6112800699378413,
        "meteor-2": 0.4204001739886907,
        "meteor-11": 0.21429380450787183,
        "meteor-1": 0.5308375987523064,
        "meteor-10": 0.43926307448494445,
        "meteor-17": 0.4354135345259606,
        "meteor-12": 0.42185919044931536,
        "meteor-6": 0.25475643382352936,
        "meteor-18": 0.37429746029254635,
        "meteor-15": 0.45042405743880437,
        "meteor-13": 0.497402570088544,
        "meteor-9": 0.21429380450787183,
        "meteor-4": 0.5311792047865601,
        "meteor-14": 0.40052164859123435,
        "meteor-5": 0.08610038610038609,
        "meteor-19": 0.34784192314696777,
        "ruby-3": 0.2535211267605634,
        "ruby-0": 0.01754385964912286,
        "ruby-8": 0.29824561403508776,
        "ruby-7": 0.2586206896551724,
        "ruby-16": 0.43661971830985913,
        "ruby-2": 0.26315789473684215,
        "ruby-11": 0.22807017543859653,
        "ruby-1": 0.2068965517241379,
        "ruby-10": 0.27118644067796616,
        "ruby-17": 0.23728813559322037,
        "ruby-12": 0.29166666666666663,
        "ruby-6": 0.14035087719298245,
        "ruby-18": 0.2282608695652174,
        "ruby-15": 0.25757575757575757,
        "ruby-13": 0.2702702702702703,
        "ruby-9": 0.22807017543859653,
        "ruby-4": 0.27118644067796616,
        "ruby-14": 0.17543859649122806,
        "ruby-5": 0.08771929824561409,
        "ruby-19": 0.1578947368421053,
        "codebertscore_f1-3": 0.7737821936607361,
        "codebertscore_f3-3": 0.7823970317840576,
        "codebertscore_f1-0": 0.6112289428710938,
        "codebertscore_f3-0": 0.5970231294631958,
        "codebertscore_f1-8": 0.7867236733436584,
        "codebertscore_f3-8": 0.7720097303390503,
        "codebertscore_f1-7": 0.8306047916412354,
        "codebertscore_f3-7": 0.8274243474006653,
        "codebertscore_f1-16": 0.8420246839523315,
        "codebertscore_f3-16": 0.8538478016853333,
        "codebertscore_f1-2": 0.7399300932884216,
        "codebertscore_f3-2": 0.7451830506324768,
        "codebertscore_f1-11": 0.7537611722946167,
        "codebertscore_f3-11": 0.7267516255378723,
        "codebertscore_f1-1": 0.826370358467102,
        "codebertscore_f3-1": 0.826488196849823,
        "codebertscore_f1-10": 0.7600313425064087,
        "codebertscore_f3-10": 0.7713032960891724,
        "codebertscore_f1-17": 0.8075628280639648,
        "codebertscore_f3-17": 0.8035494685173035,
        "codebertscore_f1-12": 0.8307473659515381,
        "codebertscore_f3-12": 0.8298100829124451,
        "codebertscore_f1-6": 0.7415030598640442,
        "codebertscore_f3-6": 0.7180463075637817,
        "codebertscore_f1-18": 0.7654488682746887,
        "codebertscore_f3-18": 0.7721685767173767,
        "codebertscore_f1-15": 0.8045805096626282,
        "codebertscore_f3-15": 0.8033757209777832,
        "codebertscore_f1-13": 0.8302018642425537,
        "codebertscore_f3-13": 0.8294675350189209,
        "codebertscore_f1-9": 0.7564635276794434,
        "codebertscore_f3-9": 0.7306865453720093,
        "codebertscore_f1-4": 0.829359233379364,
        "codebertscore_f3-4": 0.8264949321746826,
        "codebertscore_f1-14": 0.7627197504043579,
        "codebertscore_f3-14": 0.7523987889289856,
        "codebertscore_f1-5": 0.6571314334869385,
        "codebertscore_f3-5": 0.6051836609840393,
        "codebertscore_f1-19": 0.7694264054298401,
        "codebertscore_f3-19": 0.7654924988746643,
        "codebertscore_s_f1-3": 0.7734814286231995,
        "codebertscore_s_f3-3": 0.7852863669395447,
        "codebertscore_s_f1-0": 0.5846258401870728,
        "codebertscore_s_f3-0": 0.5714994072914124,
        "codebertscore_s_f1-8": 0.7938043475151062,
        "codebertscore_s_f3-8": 0.7831423282623291,
        "codebertscore_s_f1-7": 0.8452815413475037,
        "codebertscore_s_f3-7": 0.8412945866584778,
        "codebertscore_s_f1-16": 0.8411646485328674,
        "codebertscore_s_f3-16": 0.854320764541626,
        "codebertscore_s_f1-2": 0.7539634108543396,
        "codebertscore_s_f3-2": 0.7623674273490906,
        "codebertscore_s_f1-11": 0.7601630091667175,
        "codebertscore_s_f3-11": 0.7353943586349487,
        "codebertscore_s_f1-1": 0.8431348204612732,
        "codebertscore_s_f3-1": 0.8417458534240723,
        "codebertscore_s_f1-10": 0.7705219984054565,
        "codebertscore_s_f3-10": 0.7858379483222961,
        "codebertscore_s_f1-17": 0.8238993883132935,
        "codebertscore_s_f3-17": 0.8189516067504883,
        "codebertscore_s_f1-12": 0.8316847681999207,
        "codebertscore_s_f3-12": 0.831880509853363,
        "codebertscore_s_f1-6": 0.7414897084236145,
        "codebertscore_s_f3-6": 0.7205225229263306,
        "codebertscore_s_f1-18": 0.7728652954101562,
        "codebertscore_s_f3-18": 0.7817416191101074,
        "codebertscore_s_f1-15": 0.8091757893562317,
        "codebertscore_s_f3-15": 0.8092851042747498,
        "codebertscore_s_f1-13": 0.8383226990699768,
        "codebertscore_s_f3-13": 0.8389359712600708,
        "codebertscore_s_f1-9": 0.7655936479568481,
        "codebertscore_s_f3-9": 0.7395108342170715,
        "codebertscore_s_f1-4": 0.8445613980293274,
        "codebertscore_s_f3-4": 0.841261088848114,
        "codebertscore_s_f1-14": 0.7770738005638123,
        "codebertscore_s_f3-14": 0.7683379650115967,
        "codebertscore_s_f1-5": 0.7100740671157837,
        "codebertscore_s_f3-5": 0.611329197883606,
        "codebertscore_s_f1-19": 0.777098536491394,
        "codebertscore_s_f3-19": 0.7718360424041748,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 0,
        "raw_gpt35_nsnr-0": "0",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 2,
        "raw_gpt35_nsnr-5": "2",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 0,
        "raw_gpt35_nswr-0": "Score: 2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 0,
        "raw_gpt35_nswr-5": "0",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n",
        "snippet": [
            "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n"
        ],
        "simplified": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "task_id": "9",
        "3": "let max_so_far = numbers[0];\n\tlet res = [max_so_far];\n\tfor(let i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max_so_far){\n\t\t\tmax_so_far = numbers[i];\n\t\t}\n\t\tres.push(max_so_far);\n\t}\n\treturn res;\n}\n\nlet input = [1, 2, 3, 2, 3, 4, 2];\nlet expected = [1, 2, 3, 3, 3, 4, 4];\nlet actual = rolling_max(input);",
        "grade-3": {
            "execution": 0
        },
        "0": "if(!numbers || numbers.length==0)\n    return [];\n  var max = numbers[0];\n  var result = [];\n  result.push(max);\n  for(var i=1;i<numbers.length;i++){\n    if(numbers[i]>max)\n      max = numbers[i];\n    result.push(max);\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let max = numbers[0];\n    return numbers.map(n => {\n        if(n > max){\n            max = n;\n        }\n        return max;\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var result = [];\n  var max = null;\n  for(var i = 0; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(numbers == null || numbers.length == 0)\n        return [];\n    var res = [];\n    var index = 0;\n    var max = numbers[0];\n    while(index < numbers.length){\n        if(numbers[index] > max)\n            max = numbers[index];\n        res.push(max);\n        index++;\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var _numbers = numbers.slice();\n    var max = _numbers[0];\n    var max_index = 0;\n    for(var i = 1; i < _numbers.length; i++){\n        if(_numbers[i] > max){\n            max = _numbers[i];\n            max_index = i;\n        }\n        _numbers[i] = max;\n    }\n    return _numbers;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var max = [];\n    for(i=0; i< numbers.length; i++){\n        max[i] = Math.max.apply(null, numbers.slice(0,i+1));\n    }\n    return max;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var result = [];\n  var max = numbers[0];\n  result.push(max);\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var temp = [];\n    for(var i = 0; i < numbers.length; i++){\n        temp.push(Math.max.apply(Math, numbers.slice(0, i+1)));\n    }\n    return temp;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let max_array = [];\n    let i;\n    let len = numbers.length;\n    let current_max = 0;\n    for(i = 0; i < len; i++){\n        current_max = Math.max(current_max, numbers[i]);\n        max_array.push(current_max);\n    }\n    return max_array;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return numbers.map((number, index) => {\n        const slice = numbers.slice(0, index+1);\n        return Math.max(...slice);\n    });\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var result = [];\n    if(numbers.length > 0){\n        result.push(numbers[0]);\n        for(var i = 1; i < numbers.length; i++){\n            if(numbers[i] > result[i-1]){\n                result.push(numbers[i]);\n            }\n            else{\n                result.push(result[i-1]);\n            }\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var res = [];\n    for(var i = 0; i < numbers.length; i++){\n        var max = numbers[i];\n        for(var j = 0; j <= i; j++){\n            if(numbers[j] > max){\n                max = numbers[j];\n            }\n        }\n        res.push(max);\n    }\n    return res;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var arr = [];\n    for(var i = 0; i < numbers.length; i++){\n        arr.push(Math.max.apply(null, numbers.slice(0, i+1)));\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var sequence = [];\n    for(var i = 0; i < numbers.length; i++){\n        var currentMax = 0;\n        for(var j = 0; j <= i; j++){\n            if(numbers[j] > currentMax){\n                currentMax = numbers[j];\n            }\n        }\n        sequence.push(currentMax);\n    }\n    return sequence;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var max_list = [];\n\tvar max = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tmax_list.push(max);\n\t}\n\treturn max_list;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return [...(function*(){\n    var rollingMax = numbers[0];\n    yield rollingMax;\n    for(var n of numbers.slice(1)){\n      rollingMax = Math.max(rollingMax, n);\n      yield rollingMax;\n    }\n  })()];\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let result = [];\n\tlet currentMax = numbers[0];\n\tresult.push(currentMax);\n\tfor(i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > currentMax){\n\t\t\tcurrentMax = numbers[i];\n\t\t}\n\t\tresult.push(currentMax);\n\t}\n\treturn result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return numbers.map(function(number, index){\n    var sublist = numbers.slice(0, index + 1);\n    return Math.max.apply(Math, sublist);\n  });\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let max = [];\n  let maxx = numbers[0];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > maxx){\n      maxx = numbers[i];\n    }\n    max.push(maxx);\n  }\n  return max;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.09161980288677343,
        "bleu-0": 0.2114708001881698,
        "bleu-8": 0.08948771620757448,
        "bleu-7": 0.35347068904073303,
        "bleu-16": 0.10761308214297005,
        "bleu-2": 0.08050598000201266,
        "bleu-11": 0.2152263729799887,
        "bleu-1": 0.25349866644992963,
        "bleu-10": 0.2068231458791426,
        "bleu-17": 0.1924362887068311,
        "bleu-12": 0.09543051910314145,
        "bleu-6": 0.16345582754728874,
        "bleu-18": 0.15180882904279483,
        "bleu-15": 0.2068231458791426,
        "bleu-13": 0.1487138393139944,
        "bleu-9": 0.17282182892931938,
        "bleu-4": 0.16564713789189273,
        "bleu-14": 0.2357136285803896,
        "bleu-5": 0.07177526106282274,
        "bleu-19": 0.18018388444950584,
        "codebleu-3": 0.6247227034662035,
        "codebleu-0": 0.6429012969910077,
        "codebleu-8": 0.358032421641163,
        "codebleu-7": 0.6423833127395141,
        "codebleu-16": 0.5779134020265922,
        "codebleu-2": 0.5598521575293569,
        "codebleu-11": 0.5630960483435414,
        "codebleu-1": 0.647418379178913,
        "codebleu-10": 0.5851891533900284,
        "codebleu-17": 0.608081559450033,
        "codebleu-12": 0.398204072688668,
        "codebleu-6": 0.6096085859621378,
        "codebleu-18": 0.6069764300477627,
        "codebleu-15": 0.5851891533900284,
        "codebleu-13": 0.6039730362372412,
        "codebleu-9": 0.6030159101283525,
        "codebleu-4": 0.5345177512849119,
        "codebleu-14": 0.6394790818225469,
        "codebleu-5": 0.4080690083596899,
        "codebleu-19": 0.6017553571926623,
        "chrf-3": 0.27781233812845413,
        "chrf-0": 0.36838180424044636,
        "chrf-8": 0.18184743171330797,
        "chrf-7": 0.41820839419753625,
        "chrf-16": 0.2780239145244168,
        "chrf-2": 0.2328755123756164,
        "chrf-11": 0.23314093041214487,
        "chrf-1": 0.37244456085658334,
        "chrf-10": 0.22933488193627066,
        "chrf-17": 0.32572222813958945,
        "chrf-12": 0.1989627403379977,
        "chrf-6": 0.30945407039761913,
        "chrf-18": 0.2831056747168875,
        "chrf-15": 0.23566851761497304,
        "chrf-13": 0.2532474654501553,
        "chrf-9": 0.2748390674776667,
        "chrf-4": 0.2818878716453999,
        "chrf-14": 0.3401397461881194,
        "chrf-5": 0.20429641950137184,
        "chrf-19": 0.24667801068038486,
        "rougel-3": 0.28750000000000003,
        "rougel-0": 0.39999999999999997,
        "rougel-8": 0.41379310344827586,
        "rougel-7": 0.5660377358490566,
        "rougel-16": 0.3538461538461539,
        "rougel-2": 0.33599999999999997,
        "rougel-11": 0.4615384615384615,
        "rougel-1": 0.45,
        "rougel-10": 0.45714285714285713,
        "rougel-17": 0.44247787610619466,
        "rougel-12": 0.3655913978494623,
        "rougel-6": 0.4113475177304965,
        "rougel-18": 0.39694656488549623,
        "rougel-15": 0.45714285714285713,
        "rougel-13": 0.39393939393939387,
        "rougel-9": 0.4363636363636364,
        "rougel-4": 0.44247787610619466,
        "rougel-14": 0.4193548387096774,
        "rougel-5": 0.3440860215053763,
        "rougel-19": 0.4247787610619469,
        "meteor-3": 0.3746698943661972,
        "meteor-0": 0.540654714924644,
        "meteor-8": 0.2981200897867565,
        "meteor-7": 0.5705623622142899,
        "meteor-16": 0.42510125372811003,
        "meteor-2": 0.3480400577352522,
        "meteor-11": 0.4251240153091558,
        "meteor-1": 0.5159428410401592,
        "meteor-10": 0.4962950792404759,
        "meteor-17": 0.502676476860738,
        "meteor-12": 0.30471856287425153,
        "meteor-6": 0.4881745218579234,
        "meteor-18": 0.43447066326530603,
        "meteor-15": 0.4962950792404759,
        "meteor-13": 0.43366608796296297,
        "meteor-9": 0.42019979891561343,
        "meteor-4": 0.44948116602687144,
        "meteor-14": 0.5009942210899149,
        "meteor-5": 0.34043025060989135,
        "meteor-19": 0.40708605899173494,
        "ruby-3": 0.1651376146788991,
        "ruby-0": 0.27380952380952384,
        "ruby-8": 0.2549019607843137,
        "ruby-7": 0.4181818181818182,
        "ruby-16": 0.240506329113924,
        "ruby-2": 0.21621621621621623,
        "ruby-11": 0.3207547169811321,
        "ruby-1": 0.3188405797101449,
        "ruby-10": 0.2962962962962963,
        "ruby-17": 0.3709677419354839,
        "ruby-12": 0.21568627450980393,
        "ruby-6": 0.30000000000000004,
        "ruby-18": 0.30000000000000004,
        "ruby-15": 0.2962962962962963,
        "ruby-13": 0.2962962962962963,
        "ruby-9": 0.288135593220339,
        "ruby-4": 0.25806451612903225,
        "ruby-14": 0.3013698630136986,
        "ruby-5": 0.196078431372549,
        "ruby-19": 0.27419354838709675,
        "codebertscore_f1-3": 0.76384437084198,
        "codebertscore_f3-3": 0.7870556712150574,
        "codebertscore_f1-0": 0.7981533408164978,
        "codebertscore_f3-0": 0.7966211438179016,
        "codebertscore_f1-8": 0.8141483068466187,
        "codebertscore_f3-8": 0.7828970551490784,
        "codebertscore_f1-7": 0.8394143581390381,
        "codebertscore_f3-7": 0.8296800851821899,
        "codebertscore_f1-16": 0.7778290510177612,
        "codebertscore_f3-16": 0.7800705432891846,
        "codebertscore_f1-2": 0.7580122351646423,
        "codebertscore_f3-2": 0.7571912407875061,
        "codebertscore_f1-11": 0.7681608200073242,
        "codebertscore_f3-11": 0.7764105796813965,
        "codebertscore_f1-1": 0.8206274509429932,
        "codebertscore_f3-1": 0.8104898929595947,
        "codebertscore_f1-10": 0.780053436756134,
        "codebertscore_f3-10": 0.781484842300415,
        "codebertscore_f1-17": 0.8306840062141418,
        "codebertscore_f3-17": 0.8346682786941528,
        "codebertscore_f1-12": 0.7492254376411438,
        "codebertscore_f3-12": 0.741161048412323,
        "codebertscore_f1-6": 0.7570919394493103,
        "codebertscore_f3-6": 0.7478247284889221,
        "codebertscore_f1-18": 0.7844252586364746,
        "codebertscore_f3-18": 0.782619297504425,
        "codebertscore_f1-15": 0.7694082260131836,
        "codebertscore_f3-15": 0.7752121686935425,
        "codebertscore_f1-13": 0.7893033623695374,
        "codebertscore_f3-13": 0.7951065897941589,
        "codebertscore_f1-9": 0.8025431632995605,
        "codebertscore_f3-9": 0.7934109568595886,
        "codebertscore_f1-4": 0.8213026523590088,
        "codebertscore_f3-4": 0.8234265446662903,
        "codebertscore_f1-14": 0.8265096545219421,
        "codebertscore_f3-14": 0.823280930519104,
        "codebertscore_f1-5": 0.7365745306015015,
        "codebertscore_f3-5": 0.7367601990699768,
        "codebertscore_f1-19": 0.7977227568626404,
        "codebertscore_f3-19": 0.7898911833763123,
        "codebertscore_s_f1-3": 0.7670280933380127,
        "codebertscore_s_f3-3": 0.791863739490509,
        "codebertscore_s_f1-0": 0.8112773895263672,
        "codebertscore_s_f3-0": 0.80583256483078,
        "codebertscore_s_f1-8": 0.8184420466423035,
        "codebertscore_s_f3-8": 0.7872570157051086,
        "codebertscore_s_f1-7": 0.8487170338630676,
        "codebertscore_s_f3-7": 0.8368133306503296,
        "codebertscore_s_f1-16": 0.7870532870292664,
        "codebertscore_s_f3-16": 0.7845531702041626,
        "codebertscore_s_f1-2": 0.7688952088356018,
        "codebertscore_s_f3-2": 0.7638427019119263,
        "codebertscore_s_f1-11": 0.7762985825538635,
        "codebertscore_s_f3-11": 0.7848350405693054,
        "codebertscore_s_f1-1": 0.8312357664108276,
        "codebertscore_s_f3-1": 0.817227840423584,
        "codebertscore_s_f1-10": 0.7849616408348083,
        "codebertscore_s_f3-10": 0.7841298580169678,
        "codebertscore_s_f1-17": 0.8281470537185669,
        "codebertscore_s_f3-17": 0.8324357271194458,
        "codebertscore_s_f1-12": 0.7604960799217224,
        "codebertscore_s_f3-12": 0.7490244507789612,
        "codebertscore_s_f1-6": 0.770439088344574,
        "codebertscore_s_f3-6": 0.759459376335144,
        "codebertscore_s_f1-18": 0.7972943782806396,
        "codebertscore_s_f3-18": 0.790769100189209,
        "codebertscore_s_f1-15": 0.7718718647956848,
        "codebertscore_s_f3-15": 0.7762118577957153,
        "codebertscore_s_f1-13": 0.7971263527870178,
        "codebertscore_s_f3-13": 0.7987541556358337,
        "codebertscore_s_f1-9": 0.8103354573249817,
        "codebertscore_s_f3-9": 0.7992371320724487,
        "codebertscore_s_f1-4": 0.8333645462989807,
        "codebertscore_s_f3-4": 0.8355840444564819,
        "codebertscore_s_f1-14": 0.8287500739097595,
        "codebertscore_s_f3-14": 0.8236657977104187,
        "codebertscore_s_f1-5": 0.7421053051948547,
        "codebertscore_s_f3-5": 0.7400644421577454,
        "codebertscore_s_f1-19": 0.7995260953903198,
        "codebertscore_s_f3-19": 0.7893627882003784,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n",
        "snippet": [
            "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n"
        ],
        "simplified": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "task_id": "59",
        "3": "var factors = [];\n    var largest = 0;\n    for (var i = 2; i < n; i++){\n        if (n % i === 0){\n            factors.push(i);\n        }\n    }\n    for (var i = 0; i < factors.length; i++){\n        if (is_prime(factors[i])){\n            largest = factors[i];\n        }\n    }\n    return largest;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//Write code here\n    var biggestPrime = 0;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            biggestPrime = i;\n            n = n / i;\n            i = 2;\n        }\n    }\n    return biggestPrime;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var max = 0;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n                max = i;\n            }\n        }\n    }\n    return max;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//Initialize a prime number generator\n    var primes = prime_generator();\n    //Iterate over the prime numbers\n    for(let p of primes){\n        //When a prime p divides n, divide n by p\n        while(n % p == 0){\n            n /= p;\n        }\n        //When n is no longer divisible by p, we are done.\n        if(n == 1){\n            return p;\n        }\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var largest = 0;\n  //We'll use this to keep track of whether n has already been divided.\n  var divided = false;\n  //Starting at 2 and stopping when n is 1.\n  for(var i = 2; n != 1; i++){\n    //Trying to divide n by i.\n    if(n % i == 0){\n      //If that works, we've found a prime factor.\n      divided = true;\n      //It's the largest so far.\n      largest = i;\n      //We want to keep dividing out the prime factor.\n      //But not keep trying to divide by the same factor.\n      while(n % i == 0){\n        n = n / i;\n      }\n    }\n  }\n  //If we've already divided n, then it's larger than 1,\n  //and we can return the largest prime factor.\n  if(divided){\n    return largest;\n  }\n  //Otherwise, n is a prime, so it's its own largest prime factor.\n  else{\n    return n;\n  }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var factors = [], i;\n    for (i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors[factors.length - 1];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "for(var i = Math.ceil(Math.sqrt(n)); i > 1; i--){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t}\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var current_prime = 2;\n    var max_prime = 1;\n    while(n > 1){\n        if(n % current_prime == 0){\n            max_prime = current_prime;\n            n = n / current_prime;\n        }\n        else{\n            current_prime++;\n        }\n    }\n    return max_prime;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var p = 2;\n    while (p <= n){\n        if (n % p === 0){\n            n = n / p;\n        } else {\n            p = p + 1;\n        }\n    }\n    return p;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//get all prime factors of n\n    let primeFactors = get_prime_factors(n);\n    //return the largest one\n    return Math.max(...primeFactors);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if (is_prime(n)){return n;}\n  for (let i = Math.ceil(Math.sqrt(n)); i >= 2; i--){\n    if (n % i === 0 && is_prime(i)){\n      return i;\n    }\n  }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "// Fill in the code here to satisfy the doctests\n\t// Hint: remember the tip above!\n\tvar cur = n;\n\tvar prime = find_next_prime(1);\n\tvar ans = 0;\n\twhile(cur > 1){\n\t\tif(cur % prime == 0){\n\t\t\tcur = cur / prime;\n\t\t\tans = prime;\n\t\t}\n\t\telse{\n\t\t\tprime = find_next_prime(prime);\n\t\t}\n\t}\n\treturn ans;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let factors = get_factors(n);\n  factors.reverse();\n  console.log(factors);\n  let isPrime = function(num){\n    if(num === 2){\n      return true;\n    }\n    let factors = get_factors(num);\n    return factors.length === 2 ? true : false;\n  }\n  for(let i = 0; i < factors.length; i++){\n    if(isPrime(factors[i])){\n      return factors[i];\n    }\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "}",
        "grade-15": {
            "execution": 0
        },
        "13": "var i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var prime_factors = [];\n  var factor = 2;\n  while (n > 1){\n    if (n % factor === 0){\n      prime_factors.push(factor);\n      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return Math.max.apply(null, prime_factors);\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "function prime_factors(n){\n        //Return a list of the prime factors of n\n        //>>>prime_factors(2048)\n        //[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        let factor = 2;\n        let result = [];\n        while (n > 1){\n            while (n % factor === 0){\n                result.push(factor);\n                n /= factor;\n            }\n            factor += 1;\n        }\n        return result;\n    }\n    //Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    const factors = prime_factors(n);\n    const largest_factor = factors[factors.length - 1];\n    return largest_factor;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var i = 2;\n    while (i < n){\n        if (n % i == 0){\n            n = n / i;\n        } else {\n            i += 1;\n        }\n    }\n    return n;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "//YOUR CODE HERE\n    let lpf=1;\n    for(let i=2;i<n;i++){\n        if(n%i===0){\n            lpf=i;\n            n=n/i;\n            i=1;\n        }\n    }\n    return lpf;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var prime = 2;\n    var max = 1;\n    while(n > 1){\n        if(n % prime == 0){\n            max = prime;\n            n = n / prime;\n        }\n        else{\n            prime = prime + 1;\n        }\n    }\n    return max;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.24822906874260675,
        "bleu-0": 0.17308567951468018,
        "bleu-8": 0.14368206647445483,
        "bleu-7": 0.06669785633170025,
        "bleu-16": 0.10943012056186846,
        "bleu-2": 0.13421602499787416,
        "bleu-11": 0.10080613941674271,
        "bleu-1": 0.07256025234224522,
        "bleu-10": 0.06264999921510378,
        "bleu-17": 0.01657611190445958,
        "bleu-12": 0.164985214637136,
        "bleu-6": 0.06937544162797259,
        "bleu-18": 0.22577012301088506,
        "bleu-15": 1.8521167695179764e-45,
        "bleu-13": 0.07587542549256293,
        "bleu-9": 0.09620256007975074,
        "bleu-4": 0.045980476418718615,
        "bleu-14": 0.08027736184763645,
        "bleu-5": 0.19712722839177022,
        "bleu-19": 0.08021605192098186,
        "codebleu-3": 0.46553027851462825,
        "codebleu-0": 0.29125844479025814,
        "codebleu-8": 0.2694590190549394,
        "codebleu-7": 0.33838140633996255,
        "codebleu-16": 0.5021853877095828,
        "codebleu-2": 0.28867723306407445,
        "codebleu-11": 0.25769795577285876,
        "codebleu-1": 0.2376812988806384,
        "codebleu-10": 0.19169405551783542,
        "codebleu-17": 0.15467156814623192,
        "codebleu-12": 0.3381794472060173,
        "codebleu-6": 0.37101131475615284,
        "codebleu-18": 0.5573695715629423,
        "codebleu-15": 0.0044742729306487695,
        "codebleu-13": 0.19187362094710161,
        "codebleu-9": 0.29939759537152455,
        "codebleu-4": 0.4757539865317248,
        "codebleu-14": 0.1889634186578525,
        "codebleu-5": 0.29168412221180223,
        "codebleu-19": 0.2500084188872693,
        "chrf-3": 0.3227425311551167,
        "chrf-0": 0.22381774120042044,
        "chrf-8": 0.1757305405843963,
        "chrf-7": 0.18097577749007912,
        "chrf-16": 0.29987384061850886,
        "chrf-2": 0.16552634792213522,
        "chrf-11": 0.16676935538674761,
        "chrf-1": 0.17542626885302842,
        "chrf-10": 0.10131765857900288,
        "chrf-17": 0.1925060116751613,
        "chrf-12": 0.2251275772272841,
        "chrf-6": 0.19441931824546899,
        "chrf-18": 0.3698761661206927,
        "chrf-15": 0.006369426751592356,
        "chrf-13": 0.12088156288023166,
        "chrf-9": 0.19310210153914897,
        "chrf-4": 0.27747292080178393,
        "chrf-14": 0.12272444688471879,
        "chrf-5": 0.18901105064158755,
        "chrf-19": 0.15274607612339508,
        "rougel-3": 0.48704663212435234,
        "rougel-0": 0.426829268292683,
        "rougel-8": 0.44155844155844154,
        "rougel-7": 0.28272251308900526,
        "rougel-16": 0.27499999999999997,
        "rougel-2": 0.3855421686746988,
        "rougel-11": 0.34210526315789475,
        "rougel-1": 0.33766233766233766,
        "rougel-10": 0.3087248322147651,
        "rougel-17": 0.19999999999999998,
        "rougel-12": 0.3855421686746988,
        "rougel-6": 0.2918918918918919,
        "rougel-18": 0.40384615384615385,
        "rougel-15": 0.01904761904761905,
        "rougel-13": 0.3448275862068965,
        "rougel-9": 0.34523809523809523,
        "rougel-4": 0.26666666666666666,
        "rougel-14": 0.3424657534246575,
        "rougel-5": 0.42236024844720493,
        "rougel-19": 0.32051282051282054,
        "meteor-3": 0.41595264079591887,
        "meteor-0": 0.2597535700457786,
        "meteor-8": 0.35440186406335533,
        "meteor-7": 0.17106549364613885,
        "meteor-16": 0.3772240169045559,
        "meteor-2": 0.30414161656646627,
        "meteor-11": 0.25310624161468437,
        "meteor-1": 0.21583417849898578,
        "meteor-10": 0.1763288449627343,
        "meteor-17": 0.13604275729496187,
        "meteor-12": 0.31985846693386777,
        "meteor-6": 0.22767046089062123,
        "meteor-18": 0.41426604460628125,
        "meteor-15": 0.005336179295624333,
        "meteor-13": 0.23969261770726716,
        "meteor-9": 0.2607955292570677,
        "meteor-4": 0.33238236439839375,
        "meteor-14": 0.1923967919222904,
        "meteor-5": 0.24027603656434046,
        "meteor-19": 0.1969505985405108,
        "ruby-3": 0.375,
        "ruby-0": 0.27884615384615385,
        "ruby-8": 0.3076923076923077,
        "ruby-7": 0.125,
        "ruby-16": 0.18981481481481477,
        "ruby-2": 0.25,
        "ruby-11": 0.22115384615384615,
        "ruby-1": 0.21153846153846156,
        "ruby-10": 0.1923076923076923,
        "ruby-17": 0.10576923076923073,
        "ruby-12": 0.2596153846153846,
        "ruby-6": 0.16346153846153844,
        "ruby-18": 0.17307692307692313,
        "ruby-15": 0.009615384615384581,
        "ruby-13": 0.21153846153846156,
        "ruby-9": 0.22115384615384615,
        "ruby-4": 0.17679558011049723,
        "ruby-14": 0.21153846153846156,
        "ruby-5": 0.28846153846153844,
        "ruby-19": 0.22115384615384615,
        "codebertscore_f1-3": 0.8332642912864685,
        "codebertscore_f3-3": 0.8243796229362488,
        "codebertscore_f1-0": 0.8129687905311584,
        "codebertscore_f3-0": 0.7948229312896729,
        "codebertscore_f1-8": 0.8355377316474915,
        "codebertscore_f3-8": 0.806580126285553,
        "codebertscore_f1-7": 0.7152378559112549,
        "codebertscore_f3-7": 0.7289445996284485,
        "codebertscore_f1-16": 0.7162717580795288,
        "codebertscore_f3-16": 0.7705341577529907,
        "codebertscore_f1-2": 0.7821311950683594,
        "codebertscore_f3-2": 0.763953685760498,
        "codebertscore_f1-11": 0.7833845615386963,
        "codebertscore_f3-11": 0.7615920901298523,
        "codebertscore_f1-1": 0.7700026631355286,
        "codebertscore_f3-1": 0.7565938234329224,
        "codebertscore_f1-10": 0.7861961722373962,
        "codebertscore_f3-10": 0.7594470381736755,
        "codebertscore_f1-17": 0.7187722325325012,
        "codebertscore_f3-17": 0.7038108706474304,
        "codebertscore_f1-12": 0.8073590397834778,
        "codebertscore_f3-12": 0.7858311533927917,
        "codebertscore_f1-6": 0.7216897010803223,
        "codebertscore_f3-6": 0.7354158759117126,
        "codebertscore_f1-18": 0.7956103682518005,
        "codebertscore_f3-18": 0.8060005307197571,
        "codebertscore_f1-15": 0.0,
        "codebertscore_f3-15": 0.0,
        "codebertscore_f1-13": 0.7915763258934021,
        "codebertscore_f3-13": 0.7548350691795349,
        "codebertscore_f1-9": 0.7655909657478333,
        "codebertscore_f3-9": 0.7658684253692627,
        "codebertscore_f1-4": 0.6963726878166199,
        "codebertscore_f3-4": 0.7157316207885742,
        "codebertscore_f1-14": 0.7900390028953552,
        "codebertscore_f3-14": 0.7557247281074524,
        "codebertscore_f1-5": 0.7755387425422668,
        "codebertscore_f3-5": 0.7690474987030029,
        "codebertscore_f1-19": 0.7972487211227417,
        "codebertscore_f3-19": 0.777406632900238,
        "codebertscore_s_f1-3": 0.8304731845855713,
        "codebertscore_s_f3-3": 0.8211593627929688,
        "codebertscore_s_f1-0": 0.8070651888847351,
        "codebertscore_s_f3-0": 0.791426956653595,
        "codebertscore_s_f1-8": 0.8351882696151733,
        "codebertscore_s_f3-8": 0.8045671582221985,
        "codebertscore_s_f1-7": 0.7109934687614441,
        "codebertscore_s_f3-7": 0.728348970413208,
        "codebertscore_s_f1-16": 0.7199883460998535,
        "codebertscore_s_f3-16": 0.7758474946022034,
        "codebertscore_s_f1-2": 0.7850651144981384,
        "codebertscore_s_f3-2": 0.7669059038162231,
        "codebertscore_s_f1-11": 0.7799198627471924,
        "codebertscore_s_f3-11": 0.7570938467979431,
        "codebertscore_s_f1-1": 0.7659353613853455,
        "codebertscore_s_f3-1": 0.7531161904335022,
        "codebertscore_s_f1-10": 0.7867501378059387,
        "codebertscore_s_f3-10": 0.7616426348686218,
        "codebertscore_s_f1-17": 0.7045904994010925,
        "codebertscore_s_f3-17": 0.6920620799064636,
        "codebertscore_s_f1-12": 0.805402934551239,
        "codebertscore_s_f3-12": 0.7808611392974854,
        "codebertscore_s_f1-6": 0.7141629457473755,
        "codebertscore_s_f3-6": 0.730657160282135,
        "codebertscore_s_f1-18": 0.7883845567703247,
        "codebertscore_s_f3-18": 0.7981452345848083,
        "codebertscore_s_f1-15": 0.0,
        "codebertscore_s_f3-15": 0.0,
        "codebertscore_s_f1-13": 0.7943697571754456,
        "codebertscore_s_f3-13": 0.7577968835830688,
        "codebertscore_s_f1-9": 0.7600702047348022,
        "codebertscore_s_f3-9": 0.7615707516670227,
        "codebertscore_s_f1-4": 0.7058463096618652,
        "codebertscore_s_f3-4": 0.7252846956253052,
        "codebertscore_s_f1-14": 0.7945387959480286,
        "codebertscore_s_f3-14": 0.7620625495910645,
        "codebertscore_s_f1-5": 0.7729640603065491,
        "codebertscore_s_f3-5": 0.7688812613487244,
        "codebertscore_s_f1-19": 0.7895818948745728,
        "codebertscore_s_f3-19": 0.7700478434562683,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "0",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nfunction skjkasdkd(lst){\n",
        "snippet": [
            "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n"
        ],
        "simplified": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
        "task_id": "94",
        "3": "lst = lst.sort((a,b)=>a-b)\n  let prime = 0;\n  for(let i = lst.length - 1; i >= 0; i--){\n    if(isPrime(lst[i])){\n      prime = lst[i];\n      break;\n    }\n  }\n  if(prime === 0){\n    return 0;\n  }\n  return prime.toString().split('').reduce((sum, num)=> parseInt(sum) + parseInt(num))\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let sum = 0;\n  let largestPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    let temp = 0;\n    for(let j = 2; j < lst[i]; j++){\n      if(lst[i] % j == 0){\n        temp++;\n      }\n    }\n    if(temp == 0){\n      largestPrime = lst[i];\n    }\n  }\n  while(largestPrime > 0){\n    sum += largestPrime % 10;\n    largestPrime = Math.floor(largestPrime / 10);\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let jedi = [];\n  let master = [];\n  for(let i = 0; i < lst.length; i++){\n    jedi.push(lst[i]);\n    let jediLength = jedi.length;\n    for(let j = 0; j < jediLength; j++){\n      if(jedi[0] % jedi[j] === 0 && jedi[0] != jedi[j]){\n        jedi.shift();\n        break;\n      }\n    }\n  }\n  for(let i = 0; i < jedi.length; i++){\n    let element = jedi[i];\n    let nextElement = jedi[i+1];\n    if(nextElement !== undefined){\n      if(element > nextElement){\n        master.push(element);\n      }\n    }else{\n      master.push(element);\n    }\n  }\n  let element = master[0];\n  element = element.toString();\n  let counter = 0;\n  for(let i = 0; i < element.length; i++){\n    counter += parseInt(element[i]);\n  }\n  return counter;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var largest = 0;\n    var sum = 0;\n    var largestString = '';\n    for(var i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) === true){\n            if(lst[i] > largest){\n                largest = lst[i];\n            }\n        }\n    }\n    largestString = largest.toString();\n    for(var j = 0; j < largestString.length; j++){\n        sum += parseInt(largestString[j]);\n    }\n    return sum;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let arr=[];\n    for(let i=0;i<lst.length;i++){\n        if(isPrime(lst[i])) arr.push(lst[i]);\n    }\n    let max=Math.max(...arr);\n    max=max.toString();\n    let count=0;\n    for(let j=0;j<max.length;j++){\n        count+=+max[j];\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let largest = Math.max(...lst);\n\tconsole.log(largest);\n\tlet prime = isPrime(largest);\n\tconsole.log(prime);\n\tlet sum = 0;\n\tif(prime === true){\n\t\tfor(let i = 0; i < largest.length; i++){\n\t\t\tsum += largest[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "function isPrime(num) {\n    for(var i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n  var max=Math.max.apply(null,lst);\n  for(var i=max;i>0;i--){\n    if(isPrime(i)){\n      var res=i.toString().split('').reduce(function(x,y){return +x + +y});\n      return res;\n    }\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (typeof lst === 'number'){\n        lst = Array.from(arguments);\n    }\n    let prime = [];\n    lst.forEach(element => {\n        if (prime.indexOf(element) === -1){\n            prime.push(element);\n        }\n    });\n    let primeNumber = Math.max(...prime);\n    let str = String(primeNumber);\n    let answer = 0;\n    for (let i = 0; i < str.length; i++){\n        answer += Number(str[i]);\n    }\n    return answer;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let n = Math.max(...lst);\n    let prime;\n    let sum = 0;\n    let i = 0;\n    while(i <= n){\n        if(isPrime(i)){\n            prime = i;\n        }\n        i++;\n    }\n    let str = prime.toString();\n    for(let i = 0; i < str.length; i++){\n        sum += parseInt(str[i]);\n    }\n    return sum;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var sum = 0;\n    var max = lst[0];\n    for(var i = 0; i < lst.length; i++){\n        if(max < lst[i]){\n            max = lst[i];\n        }\n    }\n    for(var i = 2; i < max; i++){\n        if(isPrime(i)){\n            var tmpSum = 0;\n            for(var j = 0; j < lst.length; j++){\n                if(lst[j] == i){\n                    tmpSum += i;\n                }\n            }\n            if(tmpSum >= sum){\n                sum = tmpSum;\n            }\n        }\n    }\n    return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let str = [... new Set(lst)].sort((a,b)=> b-a).filter(el=>{\n        if(el === 1) return false;\n        for(let i = 2; i < el; i++){\n            if(el % i === 0) return false;\n        }\n        return true;\n    })[0].toString();\n    return str.split('').reduce((acc, cur)=> acc + parseInt(cur), 0);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let arr = [];\n    lst.forEach(x => {\n        if(lst.length > 1 && isPrime(x)){\n            arr.push(x);\n        }\n    });\n    let sum = arr.reduce((a, b) => a + b, 0);\n    let sumString = sum.toString();\n    let sumArray = sumString.split('');\n    let sumResult = sumArray.reduce((a, b) => a + parseInt(b), 0);\n    return sumResult;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let res = lst.sort((a,b)=>b-a).filter(x=>x>=2).find(x=>isPrime(x));\n    return res.toString().split('').reduce((a,b)=>+a+ +b);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if (lst == 0) {\n        return 0;\n    }\n    let b = lst.join('').split('').map(Number);\n    let sum = b.reduce((a, b) => a + b, 0);\n    return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "}",
        "grade-9": {
            "execution": 0
        },
        "4": "let primes = [];\n  lst.sort((a,b)=>b-a).forEach(i=>{\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  });\n  return sumDigits(primes[0])\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let result;\n    //step one get all primes in the list\n    let primeList = []\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i])){\n            primeList.push(lst[i])\n        }\n    }\n    //step two get the largest prime\n    let largestPrime = Math.max(...primeList)\n    //step three get the largest prime's digits\n    let primeDigits = largestPrime.toString().split('').map(Number)\n    //step four get the sum of the digits\n    result = primeDigits.reduce((a,b) => a + b, 0)\n    return result\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var largestPrime = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(prime(lst[i]) && largestPrime < lst[i]){\n            largestPrime = lst[i];\n        }\n    }\n    return largestPrime;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//TODO: Write - Your - Code\n  let c=[]\n  lst.forEach(x=>{\n    if(isPrime(x))\n    c.push(x)\n  })\n  console.log(c)\n  let max=0\n  c.forEach(x=>{\n    if(x>max)\n    max=x\n  })\n  let str=max.toString()\n  let sum=0\n  for(let i=0;i<str.length;i++){\n    sum+=parseInt(str[i])\n  }\n  return sum\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.2238280816432061,
        "bleu-0": 0.5077137373849496,
        "bleu-8": 0.20538332801704884,
        "bleu-7": 0.3439846716917434,
        "bleu-16": 0.3139245913508961,
        "bleu-2": 0.16756114039794603,
        "bleu-11": 0.12793857962998081,
        "bleu-1": 0.20269682542459166,
        "bleu-10": 0.19605244800851954,
        "bleu-17": 0.31514116477086984,
        "bleu-12": 0.16284497774703519,
        "bleu-6": 0.05719996190659495,
        "bleu-18": 0.013613491839714411,
        "bleu-15": 0.04263729314121188,
        "bleu-13": 1.4043787324419044e-54,
        "bleu-9": 1.4043787324419044e-54,
        "bleu-4": 0.019425691840155926,
        "bleu-14": 0.20279032274446215,
        "bleu-5": 0.1720533581720222,
        "bleu-19": 0.19653248122026754,
        "codebleu-3": 0.4671471198455643,
        "codebleu-0": 0.6800384875570905,
        "codebleu-8": 0.6505349575676183,
        "codebleu-7": 0.5765405681014096,
        "codebleu-16": 0.4940960853937269,
        "codebleu-2": 0.3598910185660109,
        "codebleu-11": 0.46150173906472813,
        "codebleu-1": 0.5138456304014892,
        "codebleu-10": 0.4313416281936745,
        "codebleu-17": 0.6165150155299071,
        "codebleu-12": 0.4518557704589669,
        "codebleu-6": 0.39752754338726254,
        "codebleu-18": 0.22025139104463812,
        "codebleu-15": 0.21268859848699206,
        "codebleu-13": 0.0038759689922480615,
        "codebleu-9": 0.0038759689922480615,
        "codebleu-4": 0.21194970005577551,
        "codebleu-14": 0.45113638175345333,
        "codebleu-5": 0.29421601849328544,
        "codebleu-19": 0.4702313507081346,
        "chrf-3": 0.3113357459239764,
        "chrf-0": 0.5185302706365605,
        "chrf-8": 0.3385195538402004,
        "chrf-7": 0.3635793348329227,
        "chrf-16": 0.3729885175312066,
        "chrf-2": 0.2880320933233406,
        "chrf-11": 0.17648952402504003,
        "chrf-1": 0.2802858681073929,
        "chrf-10": 0.2902520403562573,
        "chrf-17": 0.35745775137061064,
        "chrf-12": 0.22619237066186038,
        "chrf-6": 0.19018464822897932,
        "chrf-18": 0.11428306209763628,
        "chrf-15": 0.1444996389165436,
        "chrf-13": 0.007256894049346881,
        "chrf-9": 0.007256894049346881,
        "chrf-4": 0.1294595751926824,
        "chrf-14": 0.2749933698800963,
        "chrf-5": 0.31190364970444867,
        "chrf-19": 0.2642110627797858,
        "rougel-3": 0.37499999999999994,
        "rougel-0": 0.6987951807228915,
        "rougel-8": 0.43093922651933697,
        "rougel-7": 0.47736625514403297,
        "rougel-16": 0.43478260869565216,
        "rougel-2": 0.30917874396135264,
        "rougel-11": 0.310204081632653,
        "rougel-1": 0.31075697211155373,
        "rougel-10": 0.34977578475336324,
        "rougel-17": 0.44696969696969696,
        "rougel-12": 0.3278688524590164,
        "rougel-6": 0.26229508196721313,
        "rougel-18": 0.21212121212121215,
        "rougel-15": 0.23913043478260868,
        "rougel-13": 0.015873015873015872,
        "rougel-9": 0.015873015873015872,
        "rougel-4": 0.27173913043478265,
        "rougel-14": 0.3357664233576642,
        "rougel-5": 0.46739130434782605,
        "rougel-19": 0.2916666666666667,
        "meteor-3": 0.35658904371063177,
        "meteor-0": 0.6495356997819323,
        "meteor-8": 0.459041478679038,
        "meteor-7": 0.4196227341223937,
        "meteor-16": 0.31959266633482664,
        "meteor-2": 0.27176437497242417,
        "meteor-11": 0.2915048867344378,
        "meteor-1": 0.373429651340656,
        "meteor-10": 0.3522785661410731,
        "meteor-17": 0.48498382392537176,
        "meteor-12": 0.2836476690612337,
        "meteor-6": 0.2483451177898812,
        "meteor-18": 0.14607679465776294,
        "meteor-15": 0.15625,
        "meteor-13": 0.004440497335701598,
        "meteor-9": 0.004440497335701598,
        "meteor-4": 0.16469594594594594,
        "meteor-14": 0.31272505281028334,
        "meteor-5": 0.3333655921546546,
        "meteor-19": 0.32405336441532256,
        "ruby-3": 0.19999999999999996,
        "ruby-0": 0.56,
        "ruby-8": 0.2911392405063291,
        "ruby-7": 0.264,
        "ruby-16": 0.30400000000000005,
        "ruby-2": 0.19999999999999996,
        "ruby-11": 0.15200000000000002,
        "ruby-1": 0.13492063492063489,
        "ruby-10": 0.24,
        "ruby-17": 0.27338129496402874,
        "ruby-12": 0.15200000000000002,
        "ruby-6": 0.11199999999999999,
        "ruby-18": 0.14400000000000002,
        "ruby-15": 0.15200000000000002,
        "ruby-13": 0.008000000000000007,
        "ruby-9": 0.008000000000000007,
        "ruby-4": 0.17600000000000005,
        "ruby-14": 0.20134228187919467,
        "ruby-5": 0.28800000000000003,
        "ruby-19": 0.128,
        "codebertscore_f1-3": 0.79863041639328,
        "codebertscore_f3-3": 0.8085212111473083,
        "codebertscore_f1-0": 0.8902336359024048,
        "codebertscore_f3-0": 0.893234372138977,
        "codebertscore_f1-8": 0.7863672971725464,
        "codebertscore_f3-8": 0.810139536857605,
        "codebertscore_f1-7": 0.8161975741386414,
        "codebertscore_f3-7": 0.8150354623794556,
        "codebertscore_f1-16": 0.8164823651313782,
        "codebertscore_f3-16": 0.8111302256584167,
        "codebertscore_f1-2": 0.7768895626068115,
        "codebertscore_f3-2": 0.7788251638412476,
        "codebertscore_f1-11": 0.7681772112846375,
        "codebertscore_f3-11": 0.7827824950218201,
        "codebertscore_f1-1": 0.7715781331062317,
        "codebertscore_f3-1": 0.781847357749939,
        "codebertscore_f1-10": 0.7998616695404053,
        "codebertscore_f3-10": 0.7924597859382629,
        "codebertscore_f1-17": 0.8128849864006042,
        "codebertscore_f3-17": 0.8070542812347412,
        "codebertscore_f1-12": 0.7765620350837708,
        "codebertscore_f3-12": 0.7941118478775024,
        "codebertscore_f1-6": 0.7530559301376343,
        "codebertscore_f3-6": 0.7592568397521973,
        "codebertscore_f1-18": 0.6902385950088501,
        "codebertscore_f3-18": 0.6932268142700195,
        "codebertscore_f1-15": 0.7347164750099182,
        "codebertscore_f3-15": 0.7213180661201477,
        "codebertscore_f1-13": 0.0,
        "codebertscore_f3-13": 0.0,
        "codebertscore_f1-9": 0.0,
        "codebertscore_f3-9": 0.0,
        "codebertscore_f1-4": 0.7277747392654419,
        "codebertscore_f3-4": 0.7263360023498535,
        "codebertscore_f1-14": 0.7579378485679626,
        "codebertscore_f3-14": 0.7912278771400452,
        "codebertscore_f1-5": 0.8267104029655457,
        "codebertscore_f3-5": 0.7984103560447693,
        "codebertscore_f1-19": 0.769099771976471,
        "codebertscore_f3-19": 0.7880759835243225,
        "codebertscore_s_f1-3": 0.7993865013122559,
        "codebertscore_s_f3-3": 0.8118767142295837,
        "codebertscore_s_f1-0": 0.8821314573287964,
        "codebertscore_s_f3-0": 0.8856326937675476,
        "codebertscore_s_f1-8": 0.7947746515274048,
        "codebertscore_s_f3-8": 0.8132992386817932,
        "codebertscore_s_f1-7": 0.8239333033561707,
        "codebertscore_s_f3-7": 0.823499321937561,
        "codebertscore_s_f1-16": 0.8131122589111328,
        "codebertscore_s_f3-16": 0.8071510195732117,
        "codebertscore_s_f1-2": 0.7789431810379028,
        "codebertscore_s_f3-2": 0.7859550714492798,
        "codebertscore_s_f1-11": 0.7633399963378906,
        "codebertscore_s_f3-11": 0.7820101976394653,
        "codebertscore_s_f1-1": 0.7856475710868835,
        "codebertscore_s_f3-1": 0.8008431792259216,
        "codebertscore_s_f1-10": 0.8071761131286621,
        "codebertscore_s_f3-10": 0.8037230372428894,
        "codebertscore_s_f1-17": 0.8267712593078613,
        "codebertscore_s_f3-17": 0.8168412446975708,
        "codebertscore_s_f1-12": 0.772270917892456,
        "codebertscore_s_f3-12": 0.7947928309440613,
        "codebertscore_s_f1-6": 0.7442448139190674,
        "codebertscore_s_f3-6": 0.7530789971351624,
        "codebertscore_s_f1-18": 0.6964712738990784,
        "codebertscore_s_f3-18": 0.706315815448761,
        "codebertscore_s_f1-15": 0.748196542263031,
        "codebertscore_s_f3-15": 0.7361193895339966,
        "codebertscore_s_f1-13": 0.0,
        "codebertscore_s_f3-13": 0.0,
        "codebertscore_s_f1-9": 0.0,
        "codebertscore_s_f3-9": 0.0,
        "codebertscore_s_f1-4": 0.725564181804657,
        "codebertscore_s_f3-4": 0.7336068749427795,
        "codebertscore_s_f1-14": 0.7562143206596375,
        "codebertscore_s_f3-14": 0.793398380279541,
        "codebertscore_s_f1-5": 0.8241245150566101,
        "codebertscore_s_f3-5": 0.8031665086746216,
        "codebertscore_s_f1-19": 0.772842526435852,
        "codebertscore_s_f3-19": 0.796970546245575,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 2,
        "raw_gpt35_nsnr-2": "2",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 2,
        "raw_gpt35_nsnr-17": "2",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 2,
        "raw_gpt35_nsnr-15": "2",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 0,
        "raw_gpt35_nswr-18": "0",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 1,
        "raw_gpt35_nswr-13": "1",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nfunction next_smallest(lst){\n",
        "snippet": [
            "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n"
        ],
        "simplified": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
        "task_id": "90",
        "3": "if(lst.length < 2) return;\n    var min = Math.min(...lst);\n    var sec = Infinity;\n    for(var el of lst){\n        if(el > min && el < sec) sec = el;\n    }\n    return sec;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var smallest = Number.MAX_VALUE;\n    var next_smallest = Number.MAX_VALUE;\n    var counter = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            next_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < next_smallest && lst[i] > smallest){\n            next_smallest = lst[i];\n        }\n        if(lst[i] == lst[i + 1]){\n            counter += 1;\n        }\n    }\n    if(counter == lst.length){\n        return null;\n    }\n    else{\n        return next_smallest;\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return lst.sort(function(a,b){\n        return a - b;\n    })[1] ? lst.sort(function(a,b){\n        return a - b;\n    })[1] : null;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(lst.length === 0){\n        return null;\n    }\n    else if(lst.length === 1){\n        return null;\n    }\n    else if(lst.length === 2){\n        if(lst[0] === lst[1]){\n            return null;\n        }\n        else{\n            if(lst[0] < lst[1]){\n                return lst[0];\n            }\n            else{\n                return lst[1];\n            }\n        }\n    }\n    else{\n        lst.sort(function(a, b){return a-b});\n        for(var i = 0; i < lst.length; i++){\n            if(lst[i] === lst[i+1]){\n                continue;\n            }\n            else{\n                return lst[i+1];\n            }\n        }\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(lst.length < 2){\n    return null;\n  }\n  lst.sort(function(a, b){return a-b});\n  let result = [];\n  result.push(lst[0]);\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] != lst[i-1]){\n      result.push(lst[i]);\n    }\n  }\n  if(result.length >= 2){\n    return result[1];\n  }else{\n    return null;\n  }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let min = Math.min(...lst);\n    let minSecond = lst.filter(num => num > min);\n    if (minSecond.length > 0) {\n        return Math.min(...minSecond);\n    } else {\n        return null;\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if(lst.length < 2){\n        return null;\n    }\n    let smallest = lst[0];\n    let secondSmallest = null;\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < secondSmallest){\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n\nmodule.exports = {\n    next_smallest\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (lst.length === 0 || lst.length === 1) return null;\n    if (lst.length === 2) return lst[0] === lst[1] ? null : lst[1];\n    let first_min = lst[0];\n    let second_min = lst[1];\n    for (let i = 1; i < lst.length; i++){\n        if (lst[i] < first_min){\n            second_min = first_min;\n            first_min = lst[i];\n        }\n        else if (lst[i] < second_min && lst[i] !== first_min){\n            second_min = lst[i];\n        }\n    }\n    return second_min;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "if(lst.length < 2) return null;\n    let set = new Set();\n    let min = Math.min(...lst);\n    set.add(min);\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] != min){\n            set.add(lst[i]);\n        }\n    }\n    return Math.min(...set);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let min = Math.min(...lst);\n    if(lst.length == 0){\n        return null;\n    }\n    if(lst.indexOf(min) == lst.lastIndexOf(min)){\n        return null;\n    }\n    let lst2 = lst.filter(x => x != min);\n    return Math.min(...lst2);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(lst.length < 2){\n        return null;\n    }\n    let sorted = lst.sort((a,b) => a-b);\n    return sorted[1];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if (lst.length <= 2) return null;\n  var min = lst[0];\n  var min_idx = 0;\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      min_idx = i;\n    }\n  }\n  var second_min = lst[0];\n  for (var i = 1; i < lst.length; i++) {\n    if (i != min_idx && lst[i] < second_min) {\n      second_min = lst[i];\n    }\n  }\n  return second_min;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(lst.length == 0){\n        return null;\n    }\n    if(lst.length == 1){\n        return null;\n    }\n    let temp = lst[0];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < temp){\n            temp = lst[i];\n        }\n    }\n    let temp2 = lst[0];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > temp && lst[i] < temp2){\n            temp2 = lst[i];\n        }\n    }\n    return temp2;\n}\nlet list = [5, 1, 4, 3, 2];",
        "grade-18": {
            "execution": 0
        },
        "15": "var l = [];\n    var c = [];\n    var a = 0;\n    var b = 0;\n    if(lst.length == 0){\n        return null;\n    }\n    else{\n        if(lst.length > 2){\n            for(var i = 0; i < lst.length; i++){\n                for(var j = i+1; j < lst.length; j++){\n                    if(lst[i] == lst[j]){\n                        a = a + 1;\n                    }\n                }\n            }\n            if(a == 0){\n                for(var i = 0; i < lst.length; i++){\n                    for(var j = i+1; j < lst.length; j++){\n                        if(lst[i] > lst[j]){\n                            c = lst[i];\n                            lst[i] = lst[j];\n                            lst[j] = c;\n                        }\n                    }\n                }\n                return lst[1];\n            }\n            else{\n                return null;\n            }\n        }\n        else{\n            if(lst[0] == lst[1]){\n                return null;\n            }\n            else{\n                return lst[1];\n            }\n        }\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let smallest = lst[0];\n    let secondSmallest = null;\n    let i = 0;\n    while(i < lst.length){\n        if(lst[i] < smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < secondSmallest){\n            secondSmallest = lst[i];\n        }\n        i++\n    }\n    return secondSmallest;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var arr = []\n  if(lst.length > 1){\n    arr = lst.sort(function(a, b){return a-b});\n    for(var i = 0; i < arr.length; i++){\n      if(arr[i] !== arr[i+1]){\n        return arr[i+1];\n      }\n    }\n  }\n  return null;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(lst.length==0){\n        return null;\n    }\n    var min=Math.min(...lst);\n    if(lst.indexOf(min)==-1){\n        return null;\n    }\n    if(lst.indexOf(min)!=-1){\n        var min_2=lst[lst.indexOf(min)];\n        var min_index_2=lst.indexOf(min);\n        for(var i=lst.indexOf(min);i<lst.length;i++){\n            if(lst[i]<min_2){\n                min_2=lst[i];\n                min_index_2=i;\n            }\n        }\n        if(min_index_2==lst.indexOf(min)){\n            return null;\n        }\n        return min_2;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if (lst.length === 0) {\n        return null;\n    } else if (lst.length === 1) {\n        return null;\n    } else {\n        var min = Math.min(...lst);\n        var index = lst.indexOf(min);\n        lst.splice(index, 1);\n        return Math.min(...lst);\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(lst.length<2){\n        return null;\n    }\n    if(lst.length==2){\n        if(lst[0]==lst[1]){\n            return null;\n        }\n    }\n    let min=Math.min(...lst);\n    let min_index=lst.indexOf(min);\n    if(min_index==0){\n        return lst[1];\n    }\n    if(min_index==lst.length-1){\n        return lst[lst.length-2];\n    }\n    return Math.min(lst[min_index-1],lst[min_index+1]);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var smallest = Number.MAX_VALUE;\n    var secondSmallest = Number.MAX_VALUE;\n    if(lst.length==0) return \"None\";\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]<smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }else if(lst[i]<secondSmallest && lst[i]!=smallest){\n            secondSmallest = lst[i];\n        }\n    }\n    if(secondSmallest == Number.MAX_VALUE){\n        return \"None\";\n    }\n    return secondSmallest;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.022344889385200167,
        "bleu-0": 0.16059895005658065,
        "bleu-8": 0.009921223253113528,
        "bleu-7": 0.10753721700219657,
        "bleu-16": 0.11170030490661652,
        "bleu-2": 0.017117258571271762,
        "bleu-11": 0.1272107280029912,
        "bleu-1": 0.099927536868531,
        "bleu-10": 0.0844110839285134,
        "bleu-17": 0.02580351156524052,
        "bleu-12": 0.008139816616517779,
        "bleu-6": 0.14688617504770815,
        "bleu-18": 0.15409158628082625,
        "bleu-15": 0.12953053045400992,
        "bleu-13": 0.09979143336417808,
        "bleu-9": 0.1639103680742421,
        "bleu-4": 0.07943166215398723,
        "bleu-14": 0.027119463885288332,
        "bleu-5": 0.0762899856013158,
        "bleu-19": 0.10500737022149222,
        "codebleu-3": 0.20960338067200918,
        "codebleu-0": 0.580016136173381,
        "codebleu-8": 0.16157591058201123,
        "codebleu-7": 0.5611776425614193,
        "codebleu-16": 0.4625471611800656,
        "codebleu-2": 0.20577735571150518,
        "codebleu-11": 0.46871412545904795,
        "codebleu-1": 0.5651661404023954,
        "codebleu-10": 0.35548883267474607,
        "codebleu-17": 0.24949467420816385,
        "codebleu-12": 0.14405481180116494,
        "codebleu-6": 0.5410814922387395,
        "codebleu-18": 0.5915898033921899,
        "codebleu-15": 0.6832780503876947,
        "codebleu-13": 0.3694557889921128,
        "codebleu-9": 0.402077576754064,
        "codebleu-4": 0.5101498162708332,
        "codebleu-14": 0.257312170355717,
        "codebleu-5": 0.4356929432863125,
        "codebleu-19": 0.49431724022523726,
        "chrf-3": 0.14621566269313338,
        "chrf-0": 0.28699880164789604,
        "chrf-8": 0.10644643086449189,
        "chrf-7": 0.2572334454068195,
        "chrf-16": 0.26391132980201965,
        "chrf-2": 0.16528686300301249,
        "chrf-11": 0.300484287003626,
        "chrf-1": 0.2538824022358583,
        "chrf-10": 0.23401467144453578,
        "chrf-17": 0.18500569784515444,
        "chrf-12": 0.14077864793674452,
        "chrf-6": 0.2562722956124529,
        "chrf-18": 0.30484639362889193,
        "chrf-15": 0.2931100244842659,
        "chrf-13": 0.2584343998234522,
        "chrf-9": 0.29591961367194614,
        "chrf-4": 0.22584583142054437,
        "chrf-14": 0.2001908329760995,
        "chrf-5": 0.24714707239431433,
        "chrf-19": 0.2606965228977783,
        "rougel-3": 0.2043010752688172,
        "rougel-0": 0.38461538461538464,
        "rougel-8": 0.20224719101123598,
        "rougel-7": 0.3434343434343434,
        "rougel-16": 0.3724696356275303,
        "rougel-2": 0.23280423280423282,
        "rougel-11": 0.3879310344827586,
        "rougel-1": 0.35294117647058826,
        "rougel-10": 0.32432432432432434,
        "rougel-17": 0.2285714285714286,
        "rougel-12": 0.20118343195266272,
        "rougel-6": 0.4223107569721115,
        "rougel-18": 0.429090909090909,
        "rougel-15": 0.37297297297297294,
        "rougel-13": 0.38862559241706157,
        "rougel-9": 0.40186915887850466,
        "rougel-4": 0.3006993006993007,
        "rougel-14": 0.21052631578947367,
        "rougel-5": 0.3058823529411765,
        "rougel-19": 0.36363636363636365,
        "meteor-3": 0.14935247915015115,
        "meteor-0": 0.34239316239316236,
        "meteor-8": 0.11494252873563221,
        "meteor-7": 0.32677450031803135,
        "meteor-16": 0.33947592663412973,
        "meteor-2": 0.15721606926577708,
        "meteor-11": 0.30380275020069186,
        "meteor-1": 0.3729014580252632,
        "meteor-10": 0.23790437291382158,
        "meteor-17": 0.17570969660916122,
        "meteor-12": 0.127767297986192,
        "meteor-6": 0.4289827289195291,
        "meteor-18": 0.47249955431235213,
        "meteor-15": 0.3879752210839681,
        "meteor-13": 0.30247141130071153,
        "meteor-9": 0.3691317037181699,
        "meteor-4": 0.2685436567789509,
        "meteor-14": 0.1721377101681345,
        "meteor-5": 0.3023082593142739,
        "meteor-19": 0.350430401296009,
        "ruby-3": 0.13076923076923075,
        "ruby-0": 0.19999999999999996,
        "ruby-8": 0.12307692307692308,
        "ruby-7": 0.23353293413173648,
        "ruby-16": 0.16153846153846152,
        "ruby-2": 0.13076923076923075,
        "ruby-11": 0.27692307692307694,
        "ruby-1": 0.1619718309859155,
        "ruby-10": 0.15384615384615385,
        "ruby-17": 0.15384615384615385,
        "ruby-12": 0.12307692307692308,
        "ruby-6": 0.2615384615384615,
        "ruby-18": 0.24827586206896557,
        "ruby-15": 0.25416666666666665,
        "ruby-13": 0.2692307692307693,
        "ruby-9": 0.23076923076923073,
        "ruby-4": 0.14743589743589747,
        "ruby-14": 0.1384615384615384,
        "ruby-5": 0.12307692307692308,
        "ruby-19": 0.25384615384615383,
        "codebertscore_f1-3": 0.7400933504104614,
        "codebertscore_f3-3": 0.7236908674240112,
        "codebertscore_f1-0": 0.7883337140083313,
        "codebertscore_f3-0": 0.7933355569839478,
        "codebertscore_f1-8": 0.698523998260498,
        "codebertscore_f3-8": 0.6730692982673645,
        "codebertscore_f1-7": 0.7390786409378052,
        "codebertscore_f3-7": 0.7334734201431274,
        "codebertscore_f1-16": 0.790812611579895,
        "codebertscore_f3-16": 0.7926798462867737,
        "codebertscore_f1-2": 0.735383152961731,
        "codebertscore_f3-2": 0.7202640771865845,
        "codebertscore_f1-11": 0.796965479850769,
        "codebertscore_f3-11": 0.8035838007926941,
        "codebertscore_f1-1": 0.7784096002578735,
        "codebertscore_f3-1": 0.7807919979095459,
        "codebertscore_f1-10": 0.7852323651313782,
        "codebertscore_f3-10": 0.7823635339736938,
        "codebertscore_f1-17": 0.7532317638397217,
        "codebertscore_f3-17": 0.7359094619750977,
        "codebertscore_f1-12": 0.7263484597206116,
        "codebertscore_f3-12": 0.6984162330627441,
        "codebertscore_f1-6": 0.8029184341430664,
        "codebertscore_f3-6": 0.804308295249939,
        "codebertscore_f1-18": 0.7956573367118835,
        "codebertscore_f3-18": 0.7995656728744507,
        "codebertscore_f1-15": 0.7613648176193237,
        "codebertscore_f3-15": 0.7678148150444031,
        "codebertscore_f1-13": 0.8013892769813538,
        "codebertscore_f3-13": 0.7975131273269653,
        "codebertscore_f1-9": 0.8184517025947571,
        "codebertscore_f3-9": 0.8084786534309387,
        "codebertscore_f1-4": 0.7467469573020935,
        "codebertscore_f3-4": 0.7541975378990173,
        "codebertscore_f1-14": 0.7473039627075195,
        "codebertscore_f3-14": 0.7299186587333679,
        "codebertscore_f1-5": 0.7617753148078918,
        "codebertscore_f3-5": 0.7530516982078552,
        "codebertscore_f1-19": 0.7726121544837952,
        "codebertscore_f3-19": 0.7760786414146423,
        "codebertscore_s_f1-3": 0.7565417885780334,
        "codebertscore_s_f3-3": 0.7373428344726562,
        "codebertscore_s_f1-0": 0.7969383597373962,
        "codebertscore_s_f3-0": 0.806098461151123,
        "codebertscore_s_f1-8": 0.7134735584259033,
        "codebertscore_s_f3-8": 0.6897863745689392,
        "codebertscore_s_f1-7": 0.7878700494766235,
        "codebertscore_s_f3-7": 0.7877988219261169,
        "codebertscore_s_f1-16": 0.8024438619613647,
        "codebertscore_s_f3-16": 0.8050304055213928,
        "codebertscore_s_f1-2": 0.7459282875061035,
        "codebertscore_s_f3-2": 0.7295275926589966,
        "codebertscore_s_f1-11": 0.8067331910133362,
        "codebertscore_s_f3-11": 0.8164043426513672,
        "codebertscore_s_f1-1": 0.7915270328521729,
        "codebertscore_s_f3-1": 0.7935030460357666,
        "codebertscore_s_f1-10": 0.7977467179298401,
        "codebertscore_s_f3-10": 0.7981932163238525,
        "codebertscore_s_f1-17": 0.7626493573188782,
        "codebertscore_s_f3-17": 0.7440634965896606,
        "codebertscore_s_f1-12": 0.7398967146873474,
        "codebertscore_s_f3-12": 0.7138739824295044,
        "codebertscore_s_f1-6": 0.8133118152618408,
        "codebertscore_s_f3-6": 0.8143754005432129,
        "codebertscore_s_f1-18": 0.8054227828979492,
        "codebertscore_s_f3-18": 0.8112549185752869,
        "codebertscore_s_f1-15": 0.7884424328804016,
        "codebertscore_s_f3-15": 0.7905845642089844,
        "codebertscore_s_f1-13": 0.8123098015785217,
        "codebertscore_s_f3-13": 0.8096930980682373,
        "codebertscore_s_f1-9": 0.8273640275001526,
        "codebertscore_s_f3-9": 0.8200647830963135,
        "codebertscore_s_f1-4": 0.7571757435798645,
        "codebertscore_s_f3-4": 0.7642097473144531,
        "codebertscore_s_f1-14": 0.7572122812271118,
        "codebertscore_s_f3-14": 0.7410579323768616,
        "codebertscore_s_f1-5": 0.7677729725837708,
        "codebertscore_s_f3-5": 0.7612862586975098,
        "codebertscore_s_f1-19": 0.7826724648475647,
        "codebertscore_s_f3-19": 0.7906680703163147,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nfunction change_base(x, base){\n",
        "snippet": [
            "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n"
        ],
        "simplified": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "task_id": "44",
        "3": "if(x < base){\n    return x;\n  }\n  else{\n    return change_base(Math.floor(x/base), base) + x%base;\n  }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = \"\";\n    while(x > 0){\n        var remainder = x % base;\n        x = Math.floor(x / base);\n        result = remainder + result;\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var res = \"\"\n\twhile(x != 0){\n\t\tres = x % base + res\n\t\tx = Math.floor(x / base)\n\t}\n\treturn res\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var ans = \"\";\n\twhile(x > 0){\n\t\tans = (x % base) + ans;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn ans;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    if (x < base) return digits[x];\n    return change_base(Math.floor(x/base), base) + digits[x%base];\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "console.log(\"change_base(\" + x + \",\" + base + \")\");\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var result=\"\";\n\twhile(x>0){\n\t\tresult=x%base+result;\n\t\tx=Math.floor(x/base);\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var result = [];\n  var y = 0;\n  for(var i = 0; i < x; i++){\n    y = i;\n    result.push(i);\n    while(y >= base){\n      y = Math.floor(y / base);\n      result.push(y);\n    }\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = '';\n    var rem = 0;\n    while(x >= base){\n        rem = x % base;\n        x = Math.floor(x / base);\n        result = String(rem) + result;\n    }\n    result = String(x) + result;\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let isNegative = false;\n    if(x < 0){\n        isNegative = true;\n        x = -x;\n    }\n    let res = [];\n    while(x){\n        let r = x % base;\n        res.push(r);\n        x = Math.floor(x / base);\n    }\n    if(isNegative){\n        res.push('-');\n    }\n    return res.reverse().join('');\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var ten_to_base = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];\n    var converted = \"\";\n    var x = Number(x);\n    var base = Number(base);\n    if (x === 0){\n        return \"0\";\n    }\n    if (base === 10){\n        return String(x);\n    }\n    while (x > 0){\n        var rem = x % base;\n        converted = ten_to_base[rem] + converted;\n        x = (x - rem) / base;\n    }\n    return converted;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(x < base){\n        return x + '';\n    }\n    return change_base(Math.floor(x / base), base) + (x % base);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return ''.join(reversed(change_base_helper(x, base)));\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  var result = \"\";\n  while(x > 0){\n    result = nums[x % base] + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// TODO\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var list = [0,1,2,3,4,5,6,7,8,9];\n    var str = \"\";\n    while(x > 0){\n        str = list[x % base] + str;\n        x = parseInt(x / base);\n    }\n    return str;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(base>10){\n    throw 'base number should be less than 10';\n  }\n  var num = x;\n  var result = [];\n  while(num>=base){\n    result.push(num%base);\n    num = Math.floor(num/base);\n  }\n  result.push(num);\n  return result.reverse().join('');\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "/* your code here */\n\t\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var ans = \"\";\n  while(x >= base){\n    var left = x % base;\n    x = Math.floor(x / base);\n    ans = left + ans;\n  }\n  ans = x + ans;\n  return ans;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.243070823793617,
        "bleu-0": 0.5540752486281567,
        "bleu-8": 0.32909224793044567,
        "bleu-7": 0.6469505855679575,
        "bleu-16": 0.2569866960477845,
        "bleu-2": 0.4409583640015696,
        "bleu-11": 0.5708069797234091,
        "bleu-1": 0.14379428168041172,
        "bleu-10": 0.3664598718541906,
        "bleu-17": 0.22622373859031883,
        "bleu-12": 0.10920478970642523,
        "bleu-6": 0.3607485600030639,
        "bleu-18": 0.0348513489434464,
        "bleu-15": 0.14610354581022084,
        "bleu-13": 8.624121689902955e-06,
        "bleu-9": 0.31273287710203096,
        "bleu-4": 2.1151310375910812e-19,
        "bleu-14": 0.14959204673659102,
        "bleu-5": 0.0007295583230858109,
        "bleu-19": 0.4354229266263247,
        "codebleu-3": 0.4456961811526144,
        "codebleu-0": 0.7052073431471516,
        "codebleu-8": 0.518941485764743,
        "codebleu-7": 0.7763257514339094,
        "codebleu-16": 0.5455297944995987,
        "codebleu-2": 0.7482921421824276,
        "codebleu-11": 0.6914557447882845,
        "codebleu-1": 0.599932035848381,
        "codebleu-10": 0.7060249805558745,
        "codebleu-17": 0.6730369070631778,
        "codebleu-12": 0.6535337489158622,
        "codebleu-6": 0.5004606283440638,
        "codebleu-18": 0.18276252210489638,
        "codebleu-15": 0.6632235339457907,
        "codebleu-13": 0.0298510372938475,
        "codebleu-9": 0.651528958277051,
        "codebleu-4": 0.009950248756218904,
        "codebleu-14": 0.6936556970355091,
        "codebleu-5": 0.0498224552973653,
        "codebleu-19": 0.6485368100060331,
        "chrf-3": 0.38093167887677526,
        "chrf-0": 0.5970295365784521,
        "chrf-8": 0.5119941138920884,
        "chrf-7": 0.6126611661491207,
        "chrf-16": 0.3435837088814542,
        "chrf-2": 0.6252391051486006,
        "chrf-11": 0.6723597279417214,
        "chrf-1": 0.403961747167493,
        "chrf-10": 0.5545181649358895,
        "chrf-17": 0.4628386094654197,
        "chrf-12": 0.344941598915196,
        "chrf-6": 0.43555487649887886,
        "chrf-18": 0.17942304308394574,
        "chrf-15": 0.5018805482395772,
        "chrf-13": 0.0049751243781094535,
        "chrf-9": 0.4231374964089278,
        "chrf-4": 0.015197568389057751,
        "chrf-14": 0.39089811725972395,
        "chrf-5": 0.03147245936068078,
        "chrf-19": 0.491349640219292,
        "rougel-3": 0.4358974358974359,
        "rougel-0": 0.7441860465116279,
        "rougel-8": 0.717948717948718,
        "rougel-7": 0.8433734939759037,
        "rougel-16": 0.46511627906976744,
        "rougel-2": 0.6407766990291263,
        "rougel-11": 0.8148148148148148,
        "rougel-1": 0.4385964912280702,
        "rougel-10": 0.6019417475728156,
        "rougel-17": 0.45925925925925926,
        "rougel-12": 0.31521739130434784,
        "rougel-6": 0.425,
        "rougel-18": 0.3548387096774194,
        "rougel-15": 0.30985915492957744,
        "rougel-13": 0.08333333333333334,
        "rougel-9": 0.5555555555555556,
        "rougel-4": 0.044444444444444446,
        "rougel-14": 0.41935483870967744,
        "rougel-5": 0.07692307692307693,
        "rougel-19": 0.6666666666666666,
        "meteor-3": 0.37118459302325574,
        "meteor-0": 0.692290275104721,
        "meteor-8": 0.6011064309444708,
        "meteor-7": 0.7883837673000234,
        "meteor-16": 0.42591339860069777,
        "meteor-2": 0.8039937901433748,
        "meteor-11": 0.7480112907364639,
        "meteor-1": 0.522974366282189,
        "meteor-10": 0.6495616571793857,
        "meteor-17": 0.6167120647026777,
        "meteor-12": 0.5591760526073337,
        "meteor-6": 0.5756182681405896,
        "meteor-18": 0.25614956127378485,
        "meteor-15": 0.5732546705998034,
        "meteor-13": 0.025,
        "meteor-9": 0.6313043478260869,
        "meteor-4": 0.012594458438287152,
        "meteor-14": 0.5261618933287601,
        "meteor-5": 0.024752475247524754,
        "meteor-19": 0.5674157303370786,
        "ruby-3": 0.2727272727272727,
        "ruby-0": 0.5681818181818181,
        "ruby-8": 0.6136363636363636,
        "ruby-7": 0.7954545454545454,
        "ruby-16": 0.2954545454545454,
        "ruby-2": 0.44067796610169496,
        "ruby-11": 0.75,
        "ruby-1": 0.3142857142857143,
        "ruby-10": 0.423728813559322,
        "ruby-17": 0.29670329670329665,
        "ruby-12": 0.1785714285714286,
        "ruby-6": 0.2272727272727273,
        "ruby-18": 0.25,
        "ruby-15": 0.16568047337278102,
        "ruby-13": 0.045454545454545414,
        "ruby-9": 0.375,
        "ruby-4": 0.022727272727272707,
        "ruby-14": 0.275,
        "ruby-5": 0.045454545454545414,
        "ruby-19": 0.44897959183673475,
        "codebertscore_f1-3": 0.8248888850212097,
        "codebertscore_f3-3": 0.8064687252044678,
        "codebertscore_f1-0": 0.921333909034729,
        "codebertscore_f3-0": 0.9165201783180237,
        "codebertscore_f1-8": 0.9469334483146667,
        "codebertscore_f3-8": 0.9318509697914124,
        "codebertscore_f1-7": 0.9439651966094971,
        "codebertscore_f3-7": 0.929196834564209,
        "codebertscore_f1-16": 0.7535269260406494,
        "codebertscore_f3-16": 0.8071428537368774,
        "codebertscore_f1-2": 0.88239586353302,
        "codebertscore_f3-2": 0.8979465365409851,
        "codebertscore_f1-11": 0.9270297288894653,
        "codebertscore_f3-11": 0.9129173755645752,
        "codebertscore_f1-1": 0.8208324909210205,
        "codebertscore_f3-1": 0.8292629718780518,
        "codebertscore_f1-10": 0.8961915969848633,
        "codebertscore_f3-10": 0.9027183055877686,
        "codebertscore_f1-17": 0.7924818396568298,
        "codebertscore_f3-17": 0.8245651721954346,
        "codebertscore_f1-12": 0.7380841374397278,
        "codebertscore_f3-12": 0.7708591818809509,
        "codebertscore_f1-6": 0.8409615755081177,
        "codebertscore_f3-6": 0.8159820437431335,
        "codebertscore_f1-18": 0.7246180176734924,
        "codebertscore_f3-18": 0.7245129346847534,
        "codebertscore_f1-15": 0.7673754692077637,
        "codebertscore_f3-15": 0.8440917134284973,
        "codebertscore_f1-13": 0.6117243766784668,
        "codebertscore_f3-13": 0.5769909620285034,
        "codebertscore_f1-9": 0.8432037830352783,
        "codebertscore_f3-9": 0.8789310455322266,
        "codebertscore_f1-4": 0.0,
        "codebertscore_f3-4": 0.0,
        "codebertscore_f1-14": 0.8054556846618652,
        "codebertscore_f3-14": 0.8251699209213257,
        "codebertscore_f1-5": 0.6192179918289185,
        "codebertscore_f3-5": 0.6019779443740845,
        "codebertscore_f1-19": 0.898736834526062,
        "codebertscore_f3-19": 0.8942771553993225,
        "codebertscore_s_f1-3": 0.8236265182495117,
        "codebertscore_s_f3-3": 0.8101618885993958,
        "codebertscore_s_f1-0": 0.9185405373573303,
        "codebertscore_s_f3-0": 0.9122394919395447,
        "codebertscore_s_f1-8": 0.9453365802764893,
        "codebertscore_s_f3-8": 0.9301576614379883,
        "codebertscore_s_f1-7": 0.9412590265274048,
        "codebertscore_s_f3-7": 0.926567554473877,
        "codebertscore_s_f1-16": 0.7586706876754761,
        "codebertscore_s_f3-16": 0.80887371301651,
        "codebertscore_s_f1-2": 0.8853829503059387,
        "codebertscore_s_f3-2": 0.9016805291175842,
        "codebertscore_s_f1-11": 0.9255831241607666,
        "codebertscore_s_f3-11": 0.9113693237304688,
        "codebertscore_s_f1-1": 0.8292762041091919,
        "codebertscore_s_f3-1": 0.8334194421768188,
        "codebertscore_s_f1-10": 0.8934263586997986,
        "codebertscore_s_f3-10": 0.8989976048469543,
        "codebertscore_s_f1-17": 0.7943471074104309,
        "codebertscore_s_f3-17": 0.8286213278770447,
        "codebertscore_s_f1-12": 0.7506505250930786,
        "codebertscore_s_f3-12": 0.7817864418029785,
        "codebertscore_s_f1-6": 0.8428334593772888,
        "codebertscore_s_f3-6": 0.8230238556861877,
        "codebertscore_s_f1-18": 0.7205021381378174,
        "codebertscore_s_f3-18": 0.7324855327606201,
        "codebertscore_s_f1-15": 0.7655882239341736,
        "codebertscore_s_f3-15": 0.8420324325561523,
        "codebertscore_s_f1-13": 0.6039609909057617,
        "codebertscore_s_f3-13": 0.5698530673980713,
        "codebertscore_s_f1-9": 0.839053750038147,
        "codebertscore_s_f3-9": 0.8709678053855896,
        "codebertscore_s_f1-4": 0.0,
        "codebertscore_s_f3-4": 0.0,
        "codebertscore_s_f1-14": 0.8031543493270874,
        "codebertscore_s_f3-14": 0.8225458860397339,
        "codebertscore_s_f1-5": 0.617533802986145,
        "codebertscore_s_f3-5": 0.6009917259216309,
        "codebertscore_s_f1-19": 0.9028412103652954,
        "codebertscore_s_f3-19": 0.8980349898338318,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 2,
        "raw_gpt35_nsnr-1": "2",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 0,
        "raw_gpt35_nsnr-18": "0",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 0,
        "raw_gpt35_nsnr-5": "0-4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 1,
        "raw_gpt35_nswr-1": "1",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 0,
        "raw_gpt35_nswr-18": "0",
        "gpt35_nswr-15": 0,
        "raw_gpt35_nswr-15": "Functional Correctness: 3",
        "gpt35_nswr-13": 0,
        "raw_gpt35_nswr-13": "0",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n",
        "snippet": [
            "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "task_id": "91",
        "3": "var sentences = S.split(/[.!?]/g);\n  return sentences.filter(s => s.trim().split(' ')[0] === 'I').length;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if(typeof S !== \"string\"){\n    return \"Error\";\n  }\n  let arr = S.split(/[.?!]/);\n  let boredoms = 0;\n  for(let sentence of arr){\n    sentence = sentence.trim();\n    if(sentence.length > 0 && sentence.indexOf(\"I\") === 0){\n      boredoms += 1;\n    }\n  }\n  return boredoms;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var splits = S.split(/[\\.\\?\\!]/);\n    var i=0;\n    for(var j=0;j<splits.length;j++){\n        if(splits[j].indexOf(\"I\")===0){\n            i++;\n        }\n    }\n    return i;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "S = S.split(\" \");\n    return(S.reduce((a,b) => b === \"I\" ? a+1 : a, 0));\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var arr = S.split(/[.!?]/);\n    return arr.filter(function(e){\n        return e.charAt(0) == 'I';\n    }).length;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let count = 0;\n    let sentences = S.split(/[.?!]/g);\n    for(sentence of sentences){\n        if(sentence.split(\" \")[0] === \"I\"){\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let boredoms = 0;\n    let wordArray = S.split(\" \");\n    for(i = 0; i < wordArray.length; i++){\n        if(wordArray[i] == \"I\"){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var boredoms = 0;\n  var sentences = S.split(/[\\.\\?\\!]/);\n  sentences.forEach(function(sentence){\n    if(sentence.trim().slice(0,1) === \"I\"){\n      boredoms++;\n    }\n  });\n  return boredoms;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var  str = S.split(\".\");\n  var  count = 0;\n  for(var i=0; i<str.length; i++){\n    if(str[i].charAt(0) == \"I\"){\n      count = count + 1;\n    }\n  }\n  return count;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return S.split(\".\")\n\t\t.filter(function(sentence){return sentence.startsWith(\"I\")})\n\t\t.length;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var phrases = S.split(/[.?!]/);\n\tvar boredom_count = 0;\n\tfor (var i = 0; i < phrases.length; i++){\n\t\tif (phrases[i].charAt(0) == \"I\"){\n\t\t\tboredom_count += 1;\n\t\t}\n\t}\n\treturn boredom_count;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var arr = S.split(/[.?!]/);\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar arr2 = arr[i].split(' ');\n\t\tif(arr2[0] === 'I'){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var list = S.split(/[.!?]/);\n    var result = 0;\n    list.forEach(function(word){\n        if(word.charAt(0) == \"I\"){\n            result++;\n        }\n    });\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var count = 0;\n    var arr = S.split(\".\");\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].charAt(0) == \"I\"){\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var count = 0;\n  var splitByChar = S.split(/[.!?]/);\n  for(var i = 0; i < splitByChar.length; i++){\n    if(splitByChar[i].charAt(0) === \"I\"){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return S.split(/[!.?]+/).filter(e => e.startsWith(\"I\")).length;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let count = 0;\n    let arr = S.split(\" \");\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"I\"){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var data = S.split(/[\\.\\?\\!]/);\n  var boredomCount = 0;\n  for(var i = 0; i < data.length; i++){\n    if(data[i].startsWith(\"I\")){\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n}\nvar result = is_bored(\"The sky is blue. The sun is shining. I love this weather\");",
        "grade-14": {
            "execution": 0
        },
        "5": "//remove white space and make string a list\n    var strList = S.replace(/\\s/g, '').split(\".\");\n    var numberOfBoredoms = 0;\n    var i;\n    for(i = 0; i < strList.length; i++){\n        if(strList[i][0] == \"I\"){\n            numberOfBoredoms++;\n        }\n    }\n    return numberOfBoredoms;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//Code here\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.04411423407051636,
        "bleu-0": 0.056213992067176276,
        "bleu-8": 0.08937389883496001,
        "bleu-7": 0.020943083414075237,
        "bleu-16": 0.022749914359210355,
        "bleu-2": 0.0799423196483521,
        "bleu-11": 0.12995352329325655,
        "bleu-1": 0.061378396451139475,
        "bleu-10": 0.13694925179518555,
        "bleu-17": 0.006740751586071666,
        "bleu-12": 0.13873244358724662,
        "bleu-6": 0.1680705074553113,
        "bleu-18": 0.051195209672386784,
        "bleu-15": 0.13489157273831623,
        "bleu-13": 0.1497824969103287,
        "bleu-9": 0.00584423099580611,
        "bleu-4": 0.13682252766937011,
        "bleu-14": 0.15231298028064916,
        "bleu-5": 0.20358561259773095,
        "bleu-19": 9.944429074746375e-13,
        "codebleu-3": 0.17997313454682004,
        "codebleu-0": 0.3170186690831275,
        "codebleu-8": 0.27720411230339354,
        "codebleu-7": 0.15358676391188653,
        "codebleu-16": 0.15496479039275535,
        "codebleu-2": 0.2425460707232564,
        "codebleu-11": 0.2581853535064558,
        "codebleu-1": 0.23085426848361776,
        "codebleu-10": 0.291834821502225,
        "codebleu-17": 0.11253047928826511,
        "codebleu-12": 0.2798485368545865,
        "codebleu-6": 0.3291428728873109,
        "codebleu-18": 0.21154410663945963,
        "codebleu-15": 0.2792764897190194,
        "codebleu-13": 0.28996054480847666,
        "codebleu-9": 0.10121343032526951,
        "codebleu-4": 0.2617923801756564,
        "codebleu-14": 0.31907226349444157,
        "codebleu-5": 0.3673956365308751,
        "codebleu-19": 0.011494252873573424,
        "chrf-3": 0.15172316972575847,
        "chrf-0": 0.17289721464053623,
        "chrf-8": 0.1929920730641979,
        "chrf-7": 0.0736242578952191,
        "chrf-16": 0.13377389033476247,
        "chrf-2": 0.15355338453620995,
        "chrf-11": 0.22188238598681687,
        "chrf-1": 0.11406972099249547,
        "chrf-10": 0.22045256259992263,
        "chrf-17": 0.11206076699151733,
        "chrf-12": 0.21451678034329866,
        "chrf-6": 0.24397039628161504,
        "chrf-18": 0.12099180382446365,
        "chrf-15": 0.21967244374819173,
        "chrf-13": 0.22366342173553985,
        "chrf-9": 0.10875617283445903,
        "chrf-4": 0.2707772986222529,
        "chrf-14": 0.20700965584681694,
        "chrf-5": 0.21899451565212566,
        "chrf-19": 0.010851378249189168,
        "rougel-3": 0.25274725274725274,
        "rougel-0": 0.34234234234234234,
        "rougel-8": 0.37254901960784315,
        "rougel-7": 0.2413793103448276,
        "rougel-16": 0.20224719101123592,
        "rougel-2": 0.34375,
        "rougel-11": 0.43979057591623033,
        "rougel-1": 0.31000000000000005,
        "rougel-10": 0.41414141414141414,
        "rougel-17": 0.18181818181818182,
        "rougel-12": 0.40796019900497515,
        "rougel-6": 0.4380952380952381,
        "rougel-18": 0.29319371727748694,
        "rougel-15": 0.4263959390862944,
        "rougel-13": 0.4251207729468599,
        "rougel-9": 0.1686746987951807,
        "rougel-4": 0.455026455026455,
        "rougel-14": 0.35398230088495575,
        "rougel-5": 0.3893805309734514,
        "rougel-19": 0.014598540145985403,
        "meteor-3": 0.18449441165803965,
        "meteor-0": 0.2781994076488315,
        "meteor-8": 0.2707231040564374,
        "meteor-7": 0.14886678003096368,
        "meteor-16": 0.15032848522924586,
        "meteor-2": 0.24774142760648438,
        "meteor-11": 0.2897086340550655,
        "meteor-1": 0.2034748442930995,
        "meteor-10": 0.2592807587923263,
        "meteor-17": 0.10182515347804603,
        "meteor-12": 0.2670758040686442,
        "meteor-6": 0.2988876268066273,
        "meteor-18": 0.19652412704070019,
        "meteor-15": 0.25948768677220846,
        "meteor-13": 0.29749085149596227,
        "meteor-9": 0.10174182683853862,
        "meteor-4": 0.2901740294511379,
        "meteor-14": 0.26186761756184534,
        "meteor-5": 0.32005655226209045,
        "meteor-19": 0.004191114836546521,
        "ruby-3": 0.16666666666666663,
        "ruby-0": 0.2272727272727273,
        "ruby-8": 0.26515151515151514,
        "ruby-7": 0.1515151515151515,
        "ruby-16": 0.12878787878787878,
        "ruby-2": 0.21969696969696972,
        "ruby-11": 0.303030303030303,
        "ruby-1": 0.18181818181818177,
        "ruby-10": 0.28787878787878785,
        "ruby-17": 0.11363636363636365,
        "ruby-12": 0.2803030303030303,
        "ruby-6": 0.31818181818181823,
        "ruby-18": 0.1742424242424242,
        "ruby-15": 0.2954545454545454,
        "ruby-13": 0.28787878787878785,
        "ruby-9": 0.10606060606060608,
        "ruby-4": 0.31818181818181823,
        "ruby-14": 0.25,
        "ruby-5": 0.18939393939393945,
        "ruby-19": 0.007575757575757569,
        "codebertscore_f1-3": 0.6885292530059814,
        "codebertscore_f3-3": 0.6823166012763977,
        "codebertscore_f1-0": 0.7570310831069946,
        "codebertscore_f3-0": 0.7730490565299988,
        "codebertscore_f1-8": 0.7954071760177612,
        "codebertscore_f3-8": 0.7930910587310791,
        "codebertscore_f1-7": 0.7218526601791382,
        "codebertscore_f3-7": 0.7078752517700195,
        "codebertscore_f1-16": 0.6979981064796448,
        "codebertscore_f3-16": 0.6936967968940735,
        "codebertscore_f1-2": 0.7652551531791687,
        "codebertscore_f3-2": 0.7643468976020813,
        "codebertscore_f1-11": 0.812861979007721,
        "codebertscore_f3-11": 0.8015772700309753,
        "codebertscore_f1-1": 0.7282809019088745,
        "codebertscore_f3-1": 0.7310476899147034,
        "codebertscore_f1-10": 0.8188667297363281,
        "codebertscore_f3-10": 0.812147855758667,
        "codebertscore_f1-17": 0.676689863204956,
        "codebertscore_f3-17": 0.6671097278594971,
        "codebertscore_f1-12": 0.7886762619018555,
        "codebertscore_f3-12": 0.8015307188034058,
        "codebertscore_f1-6": 0.8109898567199707,
        "codebertscore_f3-6": 0.8105394244194031,
        "codebertscore_f1-18": 0.7411354184150696,
        "codebertscore_f3-18": 0.735920786857605,
        "codebertscore_f1-15": 0.8264356255531311,
        "codebertscore_f3-15": 0.8158716559410095,
        "codebertscore_f1-13": 0.7963412404060364,
        "codebertscore_f3-13": 0.8012628555297852,
        "codebertscore_f1-9": 0.6694624423980713,
        "codebertscore_f3-9": 0.6652920842170715,
        "codebertscore_f1-4": 0.8423028588294983,
        "codebertscore_f3-4": 0.8141502141952515,
        "codebertscore_f1-14": 0.7672168016433716,
        "codebertscore_f3-14": 0.7916492223739624,
        "codebertscore_f1-5": 0.7701126337051392,
        "codebertscore_f3-5": 0.7973636388778687,
        "codebertscore_f1-19": 0.5818089246749878,
        "codebertscore_f3-19": 0.5609573125839233,
        "codebertscore_s_f1-3": 0.6935542821884155,
        "codebertscore_s_f3-3": 0.6903594732284546,
        "codebertscore_s_f1-0": 0.7581934332847595,
        "codebertscore_s_f3-0": 0.7756266593933105,
        "codebertscore_s_f1-8": 0.8070443868637085,
        "codebertscore_s_f3-8": 0.8051806092262268,
        "codebertscore_s_f1-7": 0.7297027111053467,
        "codebertscore_s_f3-7": 0.7090358138084412,
        "codebertscore_s_f1-16": 0.704584002494812,
        "codebertscore_s_f3-16": 0.7026004195213318,
        "codebertscore_s_f1-2": 0.7737633585929871,
        "codebertscore_s_f3-2": 0.7711254358291626,
        "codebertscore_s_f1-11": 0.8201565146446228,
        "codebertscore_s_f3-11": 0.8133607506752014,
        "codebertscore_s_f1-1": 0.7347246408462524,
        "codebertscore_s_f3-1": 0.7390691637992859,
        "codebertscore_s_f1-10": 0.8239322900772095,
        "codebertscore_s_f3-10": 0.8181500434875488,
        "codebertscore_s_f1-17": 0.6809859275817871,
        "codebertscore_s_f3-17": 0.6693614721298218,
        "codebertscore_s_f1-12": 0.7887503504753113,
        "codebertscore_s_f3-12": 0.805631160736084,
        "codebertscore_s_f1-6": 0.818300187587738,
        "codebertscore_s_f3-6": 0.8194502592086792,
        "codebertscore_s_f1-18": 0.7504662275314331,
        "codebertscore_s_f3-18": 0.7452829480171204,
        "codebertscore_s_f1-15": 0.8343217968940735,
        "codebertscore_s_f3-15": 0.8240929841995239,
        "codebertscore_s_f1-13": 0.8044790029525757,
        "codebertscore_s_f3-13": 0.8102741241455078,
        "codebertscore_s_f1-9": 0.6627156734466553,
        "codebertscore_s_f3-9": 0.658423125743866,
        "codebertscore_s_f1-4": 0.8549185395240784,
        "codebertscore_s_f3-4": 0.8292214870452881,
        "codebertscore_s_f1-14": 0.7720144987106323,
        "codebertscore_s_f3-14": 0.7998582124710083,
        "codebertscore_s_f1-5": 0.7725154161453247,
        "codebertscore_s_f3-5": 0.8059667944908142,
        "codebertscore_s_f1-19": 0.5486127138137817,
        "codebertscore_s_f3-19": 0.5162693858146667,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 0,
        "raw_gpt35_nsnr-19": "0",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 0,
        "raw_gpt35_nswr-19": "0"
    },
    {
        "intent": "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to(n){\n",
        "snippet": [
            "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
        "task_id": "96",
        "3": "var array = [];\n  var num = 2;\n  while(num < n){\n    if(check_prime(num)){\n      array.push(num);\n    }\n    num++;\n  }\n  return array;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = [];\n    for(var i = 2; i < n; i++){\n        if(prime(i)){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(n < 0){\n    return false;\n  }\n  else if(n === 0){\n    return [];\n  }\n  else if(n === 1){\n    return [];\n  }\n  else if(n === 2){\n    return [2];\n  }\n  else if(n === 3){\n    return [2,3];\n  }\n  else{\n    let ans = [2,3];\n    for(let i = 3; i < n; i++){\n      let isPrime = true;\n      for(let j = 2; j < i; j++){\n        if(i % j === 0){\n          isPrime = false;\n        }\n      }\n      if(isPrime){\n        ans.push(i);\n      }\n    }\n    return ans;\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var arr = [];\n  if(n<=1){\n    return arr;\n  }\n  if(n<3){\n    arr.push(2);\n    return arr;\n  }\n  if(n<4){\n    arr.push(2);\n    arr.push(3);\n    return arr;\n  }\n  for(var i=2;i<n;i++){\n    if(i%2===0 || i%3===0){\n      continue;\n    }\n    else if(i%5===0 || i%7===0){\n      continue;\n    }\n    else{\n      arr.push(i);\n    }\n  }\n  return arr;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(n<=1){\n        return [];\n    }\n    let x = []\n    for(let i = 2; i<n; i++){\n        if(isPrime(i)){\n            x.push(i);\n        }\n    }\n    return x;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count=[];\n    if(n==0) return count;\n    for(var i=2;i<n;i++){\n        var isprime=true;\n        for(var j=2;j<i;j++){\n            if(i%j==0){\n                isprime=false;\n                break;\n            }\n        }\n        if(isprime)\n            count.push(i);\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "function isPrime(number) {\n      var start = 2;\n      while (start <= Math.sqrt(number)) {\n          if (number % start++ < 1) return false;\n      }\n      return number > 1;\n  }\n  var primeNumbers = [];\n  for (var i = 0; i < n; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "//your code here\n  var array = [];\n  for(var i = 2; i < n; i++){\n    if(isPrime(i)){\n      array.push(i);\n    }\n  }\n  return array;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var arr = [];\n  for(var i = 2; i < n; i++){\n    if(isPrime(i)){\n      arr.push(i);\n    }\n  }\n  return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let primes = [];\n    if(n === 0) return primes;\n    for(let i = 2; i < n; i++){\n        if(i < 2) continue;\n        for(let j = 2; j < i; j++){\n            if(i % j === 0) continue;\n        }\n        primes.push(i);\n    }\n    return primes;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = [];\n\tfor(var i = 2; i < n; i++){\n\t\tvar count = 0;\n\t\tfor(var j = 2; j < i; j++){\n\t\t\tif(i % j === 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count === 0){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "// list=[];\n    // for(var i=2;i<n;i++){\n    //     if(is_prime(i)){\n    //         list.push(i);\n    //     }\n    // }\n    // return list;\n    var array = Array.apply(null, Array(n)).map(function (_, i) {return i;});\n    return array.filter(is_prime);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var arr = [];\nfor(var i = 2; i<n; i++){\nif(checkPrime(i)){\narr.push(i);\n}\n}\nreturn arr;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var primeArray = [];\nfor(var i = 2; i < n; i++){\n  if(isPrime(i)){\n    primeArray.push(i);\n  }\n}\n\nreturn primeArray;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var result = [];\n    if( n === 0){\n        return result;\n    }\n    if( n === 1){\n        return result;\n    }\n    var is_prime = function(num){\n        for(var i = 2; i < num; i++){\n            if(num % i === 0){\n                return false;\n            }\n        }\n        return true;\n    };\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var count = 0;\n\tvar arr = [];\n\tfor(var i = 2; i <= n; i++){\n\t\tcount = 0;\n\t\tfor(var j = 2; j <= i/2; j++){\n\t\t\tif(i % j == 0){\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(count == 0 && i != 1){\n\t\t\tarr.push(i);\n\t\t}\n\t}\n\treturn arr;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var arr = []\n    for(var i = 2; i < n; i++){\n        for(var j = 2; j < i; j++){\n            if(i % j === 0){\n                break;\n            }\n            if(j == i-1){\n                arr.push(i)\n            }\n        }\n    }\n    return arr\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(n <= 1){\n    return [];\n  }\n  var result = [2];\n  for(var i = 3; i < n; i += 2){\n    if(isPrime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let primeArr = [];\n    if(n == 0){\n        return primeArr;\n    }else if(n == 1){\n        return primeArr;\n    }else{\n        for(let i = 2; i < n; i++){\n            if(isPrime(i)){\n                primeArr.push(i);\n            }\n        }\n        return primeArr;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let count = [];\n    for(let i = 2; i < n; i++){\n        for(let j = 2; j <= i; j++){\n            if(i === j){\n                count.push(i);\n            }\n            if(i % j === 0){\n                break;\n            }\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.06830981548508284,
        "bleu-0": 0.2240267703623067,
        "bleu-8": 0.299461841269237,
        "bleu-7": 0.23594039314961016,
        "bleu-16": 0.35913810131012913,
        "bleu-2": 0.4895904956918197,
        "bleu-11": 0.26426668693478217,
        "bleu-1": 0.24578455197444846,
        "bleu-10": 0.2281997423574233,
        "bleu-17": 0.5440325103097647,
        "bleu-12": 0.5321778464146757,
        "bleu-6": 0.22445435958852017,
        "bleu-18": 0.2281997423574233,
        "bleu-15": 0.23937300966661795,
        "bleu-13": 0.30496997136549875,
        "bleu-9": 0.46235238064814277,
        "bleu-4": 0.5750253403375153,
        "bleu-14": 0.23100619139665812,
        "bleu-5": 0.4117438701099183,
        "bleu-19": 0.6277468523672249,
        "codebleu-3": 0.3269058467520699,
        "codebleu-0": 0.37733607780966066,
        "codebleu-8": 0.6956160023626626,
        "codebleu-7": 0.6373918127452662,
        "codebleu-16": 0.4796089405655806,
        "codebleu-2": 0.7342958291548993,
        "codebleu-11": 0.6147983620498292,
        "codebleu-1": 0.4071591708180889,
        "codebleu-10": 0.3794660684999924,
        "codebleu-17": 0.6897616017296397,
        "codebleu-12": 0.7322888877221645,
        "codebleu-6": 0.5208303215606462,
        "codebleu-18": 0.3794660684999924,
        "codebleu-15": 0.3855919624800527,
        "codebleu-13": 0.6660143961806122,
        "codebleu-9": 0.7656649247982893,
        "codebleu-4": 0.715099865496758,
        "codebleu-14": 0.4384874725232945,
        "codebleu-5": 0.5805138748284162,
        "codebleu-19": 0.7356971737365606,
        "chrf-3": 0.17468660040696765,
        "chrf-0": 0.3387480765690329,
        "chrf-8": 0.457847497176374,
        "chrf-7": 0.3354308883418462,
        "chrf-16": 0.42668765354569926,
        "chrf-2": 0.4755198181025087,
        "chrf-11": 0.29905119806694613,
        "chrf-1": 0.3103595363313873,
        "chrf-10": 0.31471784587252144,
        "chrf-17": 0.5245410100766801,
        "chrf-12": 0.47767772220417754,
        "chrf-6": 0.28122920349371217,
        "chrf-18": 0.30750426891576815,
        "chrf-15": 0.31463211744411357,
        "chrf-13": 0.37657169869804347,
        "chrf-9": 0.46493531863379123,
        "chrf-4": 0.5153940871004358,
        "chrf-14": 0.30471529570779654,
        "chrf-5": 0.40933036197717654,
        "chrf-19": 0.6228708026255393,
        "rougel-3": 0.3739837398373983,
        "rougel-0": 0.5365853658536585,
        "rougel-8": 0.5289256198347108,
        "rougel-7": 0.4292237442922375,
        "rougel-16": 0.5147058823529411,
        "rougel-2": 0.718562874251497,
        "rougel-11": 0.3953488372093023,
        "rougel-1": 0.5116279069767442,
        "rougel-10": 0.5322580645161289,
        "rougel-17": 0.6790123456790124,
        "rougel-12": 0.7654320987654322,
        "rougel-6": 0.42528735632183906,
        "rougel-18": 0.5322580645161289,
        "rougel-15": 0.5196850393700788,
        "rougel-13": 0.4639175257731959,
        "rougel-9": 0.7386363636363636,
        "rougel-4": 0.7973856209150326,
        "rougel-14": 0.474820143884892,
        "rougel-5": 0.4713375796178344,
        "rougel-19": 0.717948717948718,
        "meteor-3": 0.299743741160843,
        "meteor-0": 0.4101347282601932,
        "meteor-8": 0.7139143412467027,
        "meteor-7": 0.5607554003363084,
        "meteor-16": 0.49102663424696535,
        "meteor-2": 0.6730803753875685,
        "meteor-11": 0.5226756186571313,
        "meteor-1": 0.4069347173764986,
        "meteor-10": 0.40959790269964325,
        "meteor-17": 0.6296758104738156,
        "meteor-12": 0.7665141879030234,
        "meteor-6": 0.3054754604341382,
        "meteor-18": 0.41772418094008784,
        "meteor-15": 0.4079958248533604,
        "meteor-13": 0.5665822595136287,
        "meteor-9": 0.75472730722912,
        "meteor-4": 0.7647494085646097,
        "meteor-14": 0.4368543598379969,
        "meteor-5": 0.5148212045169386,
        "meteor-19": 0.7546200389703621,
        "ruby-3": 0.22499999999999998,
        "ruby-0": 0.375,
        "ruby-8": 0.3580246913580247,
        "ruby-7": 0.3165467625899281,
        "ruby-16": 0.3375,
        "ruby-2": 0.6091954022988506,
        "ruby-11": 0.23913043478260865,
        "ruby-1": 0.3125,
        "ruby-10": 0.375,
        "ruby-17": 0.47560975609756095,
        "ruby-12": 0.7073170731707317,
        "ruby-6": 0.276595744680851,
        "ruby-18": 0.375,
        "ruby-15": 0.3375,
        "ruby-13": 0.35964912280701755,
        "ruby-9": 0.6458333333333333,
        "ruby-4": 0.7125,
        "ruby-14": 0.275,
        "ruby-5": 0.23750000000000004,
        "ruby-19": 0.6125,
        "codebertscore_f1-3": 0.8013740181922913,
        "codebertscore_f3-3": 0.7823440432548523,
        "codebertscore_f1-0": 0.8523138165473938,
        "codebertscore_f3-0": 0.8221225738525391,
        "codebertscore_f1-8": 0.8107090592384338,
        "codebertscore_f3-8": 0.8256858587265015,
        "codebertscore_f1-7": 0.8005279302597046,
        "codebertscore_f3-7": 0.8033698201179504,
        "codebertscore_f1-16": 0.8638387322425842,
        "codebertscore_f3-16": 0.8487280607223511,
        "codebertscore_f1-2": 0.8481119275093079,
        "codebertscore_f3-2": 0.8515240550041199,
        "codebertscore_f1-11": 0.8008149862289429,
        "codebertscore_f3-11": 0.8172316551208496,
        "codebertscore_f1-1": 0.8213062882423401,
        "codebertscore_f3-1": 0.8198392987251282,
        "codebertscore_f1-10": 0.8510818481445312,
        "codebertscore_f3-10": 0.8258187770843506,
        "codebertscore_f1-17": 0.8803825378417969,
        "codebertscore_f3-17": 0.8791913986206055,
        "codebertscore_f1-12": 0.8984754085540771,
        "codebertscore_f3-12": 0.8915562629699707,
        "codebertscore_f1-6": 0.7818279266357422,
        "codebertscore_f3-6": 0.8006088733673096,
        "codebertscore_f1-18": 0.8436043858528137,
        "codebertscore_f3-18": 0.8190938234329224,
        "codebertscore_f1-15": 0.8321208953857422,
        "codebertscore_f3-15": 0.8154584169387817,
        "codebertscore_f1-13": 0.7970069050788879,
        "codebertscore_f3-13": 0.8028454184532166,
        "codebertscore_f1-9": 0.8865611553192139,
        "codebertscore_f3-9": 0.8928642868995667,
        "codebertscore_f1-4": 0.8913952708244324,
        "codebertscore_f3-4": 0.88309645652771,
        "codebertscore_f1-14": 0.8324562311172485,
        "codebertscore_f3-14": 0.819098711013794,
        "codebertscore_f1-5": 0.8114721775054932,
        "codebertscore_f3-5": 0.8240276575088501,
        "codebertscore_f1-19": 0.9076554179191589,
        "codebertscore_f3-19": 0.8914659023284912,
        "codebertscore_s_f1-3": 0.790837287902832,
        "codebertscore_s_f3-3": 0.7743386030197144,
        "codebertscore_s_f1-0": 0.8507907390594482,
        "codebertscore_s_f3-0": 0.823339581489563,
        "codebertscore_s_f1-8": 0.828194797039032,
        "codebertscore_s_f3-8": 0.8439741730690002,
        "codebertscore_s_f1-7": 0.802539050579071,
        "codebertscore_s_f3-7": 0.8038778305053711,
        "codebertscore_s_f1-16": 0.8593860268592834,
        "codebertscore_s_f3-16": 0.84623122215271,
        "codebertscore_s_f1-2": 0.8579443097114563,
        "codebertscore_s_f3-2": 0.862338662147522,
        "codebertscore_s_f1-11": 0.7960529923439026,
        "codebertscore_s_f3-11": 0.8144878149032593,
        "codebertscore_s_f1-1": 0.8121403455734253,
        "codebertscore_s_f3-1": 0.8141779899597168,
        "codebertscore_s_f1-10": 0.8431820273399353,
        "codebertscore_s_f3-10": 0.820776641368866,
        "codebertscore_s_f1-17": 0.8723400831222534,
        "codebertscore_s_f3-17": 0.8739567399024963,
        "codebertscore_s_f1-12": 0.8964182138442993,
        "codebertscore_s_f3-12": 0.8909515142440796,
        "codebertscore_s_f1-6": 0.7840477824211121,
        "codebertscore_s_f3-6": 0.806031346321106,
        "codebertscore_s_f1-18": 0.8339911103248596,
        "codebertscore_s_f3-18": 0.812038242816925,
        "codebertscore_s_f1-15": 0.820976734161377,
        "codebertscore_s_f3-15": 0.8085647821426392,
        "codebertscore_s_f1-13": 0.8007229566574097,
        "codebertscore_s_f3-13": 0.8069590926170349,
        "codebertscore_s_f1-9": 0.8849027156829834,
        "codebertscore_s_f3-9": 0.892589271068573,
        "codebertscore_s_f1-4": 0.8926399350166321,
        "codebertscore_s_f3-4": 0.8854852914810181,
        "codebertscore_s_f1-14": 0.8301169872283936,
        "codebertscore_s_f3-14": 0.8182005882263184,
        "codebertscore_s_f1-5": 0.8051363825798035,
        "codebertscore_s_f3-5": 0.8198115825653076,
        "codebertscore_s_f1-19": 0.9155080914497375,
        "codebertscore_s_f3-19": 0.8997846245765686,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n",
        "snippet": [
            "  return l.map(e => e + 1);\n}\n\n"
        ],
        "simplified": "Return list with elements incremented by 1.",
        "task_id": "42",
        "0": "return l.map(x => x + 1);\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var newList = [];\n\tfor(i=0; i<l.length; i++){\n\t\tnewList.push(l[i]+1);\n\t}\n\treturn newList;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let result = [];\n    for(let i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "return l.map(function(x){return x+1});\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return map(incr, l);\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var r= [];\n  for(var i=0; i<l.length; i++){\n    r.push(l[i]+1);\n  }\n  return r;\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var lincr=[];\n    for(var i=0;i<l.length;i++){\n        lincr.push(l[i]+1);\n    }\n    return lincr;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "return l.map(i => i + 1);\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "// Create new list\n    var incr_l = [];\n    for (i=0; i<l.length; i++){\n      incr_l.push(l[i]+1);\n    }\n    return incr_l;\n}\nvar l = [1, 2, 3];",
        "grade-8": {
            "execution": 1
        },
        "9": "return l.map(x => x + 1);\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "return l.map(x => x + 1);\n}",
        "grade-10": {
            "execution": 1
        },
        "12": "// return (null)?(null): l.map(x => x+1);\n    if(l == null){\n        return null;\n    }else{\n        var result=[];\n        for(var i=0; i<l.length; i++){\n            result.push(l[i]+1);\n        }\n        return result;\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "return _.map(l, function(elem){\n    return elem + 1;\n  });\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "let result = [];\n\tfor(let i = 0; i < l.length; i++){\n\t\tresult.push(l[i] + 1);\n\t}\n\treturn result;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "return l.map(function(i){\n        return i+1;\n    });\n}",
        "grade-15": {
            "execution": 1
        },
        "17": "if(is_null(l)){\n        return null;\n    } else {\n        return pair(\n            head(l) + 1,\n            incr_list(tail(l))\n        );\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "var il = new Array();\n\tfor(var i=0; i<l.length; i++){\n\t\til.push(l[i]+1);\n\t}\n\treturn il;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var newList = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnewList.push(l[i] + 1);\n\t}\n\treturn newList;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.5731224484094259,
        "bleu-1": 0.10032055247005964,
        "bleu-2": 0.10540405058616681,
        "bleu-3": 0.2955043237121876,
        "bleu-4": 0.1392762823784768,
        "bleu-5": 0.10540405058616681,
        "bleu-6": 0.10540405058616681,
        "bleu-7": 0.5731224484094259,
        "bleu-8": 0.0763792214494763,
        "bleu-9": 0.5731224484094259,
        "bleu-10": 0.5731224484094259,
        "bleu-12": 0.07949395784326588,
        "bleu-13": 0.1365914929695546,
        "bleu-14": 0.10540405058616681,
        "bleu-15": 0.2785468517364889,
        "bleu-17": 0.05558947744927455,
        "bleu-18": 0.10032055247005964,
        "bleu-19": 0.0979584137379766,
        "codebleu-0": 0.9103352228830525,
        "codebleu-1": 0.5352386105968618,
        "codebleu-2": 0.5360858602828796,
        "codebleu-3": 0.6233247946927719,
        "codebleu-4": 0.3084378484084423,
        "codebleu-5": 0.5360858602828796,
        "codebleu-6": 0.5360858602828796,
        "codebleu-7": 0.9103352228830525,
        "codebleu-8": 0.5312483887600978,
        "codebleu-9": 0.9103352228830525,
        "codebleu-10": 0.9103352228830525,
        "codebleu-12": 0.6613971411220257,
        "codebleu-13": 0.5462962962962962,
        "codebleu-14": 0.5360858602828796,
        "codebleu-15": 0.5927207715857111,
        "codebleu-17": 0.47222222222222215,
        "codebleu-18": 0.5352386105968618,
        "codebleu-19": 0.5348449208081812,
        "chrf-0": 0.661165884482448,
        "chrf-1": 0.24616949596715995,
        "chrf-2": 0.24092515563919442,
        "chrf-3": 0.5048494797453226,
        "chrf-4": 0.32967322308766844,
        "chrf-5": 0.26728059341834165,
        "chrf-6": 0.27545278984958305,
        "chrf-7": 0.661165884482448,
        "chrf-8": 0.2114571958810278,
        "chrf-9": 0.661165884482448,
        "chrf-10": 0.661165884482448,
        "chrf-12": 0.23787681579009332,
        "chrf-13": 0.33104134897328935,
        "chrf-14": 0.24092515563919442,
        "chrf-15": 0.5003149743840872,
        "chrf-17": 0.19607107076519262,
        "chrf-18": 0.2528103783297414,
        "chrf-19": 0.24141353606414942,
        "rougel-0": 0.8571428571428571,
        "rougel-1": 0.2807017543859649,
        "rougel-2": 0.29090909090909095,
        "rougel-3": 0.6250000000000001,
        "rougel-4": 0.5217391304347826,
        "rougel-5": 0.29090909090909095,
        "rougel-6": 0.29090909090909095,
        "rougel-7": 0.8571428571428571,
        "rougel-8": 0.2285714285714286,
        "rougel-9": 0.8571428571428571,
        "rougel-10": 0.8571428571428571,
        "rougel-12": 0.25806451612903225,
        "rougel-13": 0.5142857142857143,
        "rougel-14": 0.29090909090909095,
        "rougel-15": 0.6060606060606061,
        "rougel-17": 0.28571428571428575,
        "rougel-18": 0.2807017543859649,
        "rougel-19": 0.27586206896551724,
        "meteor-0": 0.8504464285714286,
        "meteor-1": 0.4902366863905326,
        "meteor-2": 0.4961077844311378,
        "meteor-3": 0.6510416666666667,
        "meteor-4": 0.4701436130007558,
        "meteor-5": 0.4961077844311378,
        "meteor-6": 0.4961077844311378,
        "meteor-7": 0.8504464285714286,
        "meteor-8": 0.27472527472527475,
        "meteor-9": 0.8504464285714286,
        "meteor-10": 0.8504464285714286,
        "meteor-12": 0.41598915989159896,
        "meteor-13": 0.6068027210884355,
        "meteor-14": 0.4961077844311378,
        "meteor-15": 0.6465517241379309,
        "meteor-17": 0.39208074534161486,
        "meteor-18": 0.4902366863905326,
        "meteor-19": 0.4873529411764707,
        "ruby-0": 0.8571428571428572,
        "ruby-1": 0.18604651162790697,
        "ruby-2": 0.19512195121951215,
        "ruby-3": 0.5555555555555556,
        "ruby-4": 0.4285714285714286,
        "ruby-5": 0.19512195121951215,
        "ruby-6": 0.19512195121951215,
        "ruby-7": 0.8571428571428572,
        "ruby-8": 0.1428571428571429,
        "ruby-9": 0.8571428571428572,
        "ruby-10": 0.8571428571428572,
        "ruby-12": 0.15189873417721522,
        "ruby-13": 0.4285714285714286,
        "ruby-14": 0.19512195121951215,
        "ruby-15": 0.5263157894736843,
        "ruby-17": 0.19999999999999996,
        "ruby-18": 0.18604651162790697,
        "ruby-19": 0.18181818181818177,
        "codebertscore_f1-0": 0.969519317150116,
        "codebertscore_f3-0": 0.969519317150116,
        "codebertscore_f1-1": 0.7729176878929138,
        "codebertscore_f3-1": 0.8006312847137451,
        "codebertscore_f1-2": 0.789261519908905,
        "codebertscore_f3-2": 0.8174630403518677,
        "codebertscore_f1-3": 0.9180022478103638,
        "codebertscore_f3-3": 0.9336252212524414,
        "codebertscore_f1-4": 0.8218765258789062,
        "codebertscore_f3-4": 0.8086559772491455,
        "codebertscore_f1-5": 0.7793062329292297,
        "codebertscore_f3-5": 0.7952202558517456,
        "codebertscore_f1-6": 0.7619202733039856,
        "codebertscore_f3-6": 0.7871614098548889,
        "codebertscore_f1-7": 0.9650675654411316,
        "codebertscore_f3-7": 0.9650675058364868,
        "codebertscore_f1-8": 0.7375187277793884,
        "codebertscore_f3-8": 0.7687583565711975,
        "codebertscore_f1-9": 0.969519317150116,
        "codebertscore_f3-9": 0.969519317150116,
        "codebertscore_f1-10": 0.969519317150116,
        "codebertscore_f3-10": 0.969519317150116,
        "codebertscore_f1-12": 0.7776473164558411,
        "codebertscore_f3-12": 0.8463027477264404,
        "codebertscore_f1-13": 0.9037988185882568,
        "codebertscore_f3-13": 0.9262092709541321,
        "codebertscore_f1-14": 0.7947700619697571,
        "codebertscore_f3-14": 0.8238539695739746,
        "codebertscore_f1-15": 0.9046162366867065,
        "codebertscore_f3-15": 0.9187570810317993,
        "codebertscore_f1-17": 0.721139132976532,
        "codebertscore_f3-17": 0.7463057637214661,
        "codebertscore_f1-18": 0.7706314921379089,
        "codebertscore_f3-18": 0.7909008860588074,
        "codebertscore_f1-19": 0.7882269024848938,
        "codebertscore_f3-19": 0.8229156732559204,
        "codebertscore_s_f1-0": 0.9617016911506653,
        "codebertscore_s_f3-0": 0.9617016911506653,
        "codebertscore_s_f1-1": 0.7718421220779419,
        "codebertscore_s_f3-1": 0.7999281287193298,
        "codebertscore_s_f1-2": 0.7859717011451721,
        "codebertscore_s_f3-2": 0.8224364519119263,
        "codebertscore_s_f1-3": 0.9102432727813721,
        "codebertscore_s_f3-3": 0.927074670791626,
        "codebertscore_s_f1-4": 0.7946602702140808,
        "codebertscore_s_f3-4": 0.7883025407791138,
        "codebertscore_s_f1-5": 0.7766837477684021,
        "codebertscore_s_f3-5": 0.797333300113678,
        "codebertscore_s_f1-6": 0.7564405202865601,
        "codebertscore_s_f3-6": 0.7845442295074463,
        "codebertscore_s_f1-7": 0.9587386846542358,
        "codebertscore_s_f3-7": 0.9587388038635254,
        "codebertscore_s_f1-8": 0.7224755883216858,
        "codebertscore_s_f3-8": 0.7584660053253174,
        "codebertscore_s_f1-9": 0.9617016911506653,
        "codebertscore_s_f3-9": 0.9617016911506653,
        "codebertscore_s_f1-10": 0.9617016911506653,
        "codebertscore_s_f3-10": 0.9617016911506653,
        "codebertscore_s_f1-12": 0.7729260921478271,
        "codebertscore_s_f3-12": 0.8582844138145447,
        "codebertscore_s_f1-13": 0.9034474492073059,
        "codebertscore_s_f3-13": 0.9267035722732544,
        "codebertscore_s_f1-14": 0.7962837219238281,
        "codebertscore_s_f3-14": 0.833156943321228,
        "codebertscore_s_f1-15": 0.9033183455467224,
        "codebertscore_s_f3-15": 0.9177377223968506,
        "codebertscore_s_f1-17": 0.7165445685386658,
        "codebertscore_s_f3-17": 0.7474968433380127,
        "codebertscore_s_f1-18": 0.7719196081161499,
        "codebertscore_s_f3-18": 0.796545684337616,
        "codebertscore_s_f1-19": 0.7917652726173401,
        "codebertscore_s_f3-19": 0.8299292922019958,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "Score: 1",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "task_id": "108",
        "3": "if(arr.length === 0){\n        return 0;\n    }\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        if(arr[i] < 0){\n            arr[i] = arr[i] * -1;\n        }\n        while(arr[i] > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i] / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let sum = 0;\n    arr.forEach(function(num){\n        let numStr = num.toString();\n        let sum = 0;\n        for(let i = 0; i < numStr.length; i++){\n            sum += parseInt(numStr[i]);\n        }\n        if(sum > 0){\n            sum++;\n        }\n    });\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return arr.reduce(function(acc, element){\n    return acc + (signed_sum(element) > 0);\n  }, 0);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            count += Math.abs(arr[i] % 10);\n        }else{\n            count += arr[i] % 10;\n        }\n    }\n    return count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var res = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n        var num = Math.abs(arr[i]);\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            res++;\n        }\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count = 0;\n  for(i=0; i<arr.length; i++){\n    if(get_signed_digits(arr[i]).reduce(function(a,b){return a+b;}) > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "// your code goes here\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n        if(arr[i] >= 0){\n            while(arr[i] > 0){\n                sum += arr[i] % 10;\n                arr[i] = Math.floor(arr[i] / 10);\n            }\n        }\n        else{\n            while(arr[i] < 0){\n                sum += Math.abs(arr[i] % 10);\n                arr[i] = Math.ceil(arr[i] / 10);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var sum = 0;\n  for(i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      sum = sum + arr[i];\n    }\n    else{\n      sum = sum - arr[i];\n    }\n  }\n  return sum;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let count = 0;\n  arr.forEach(function(item){\n    if(item > 0){\n      let digits = item.toString().split('');\n      let result = 0;\n      digits.forEach(function(number){\n        result += parseInt(number);\n      });\n      if(result > 0){\n        count += 1;\n      }\n    }else{\n      let number = item.toString().split('');\n      let res = 0;\n      number.forEach(function(num){\n        res += parseInt(num);\n      });\n      if(res + 1 > 0){\n        count += 1;\n      }\n    }\n  });\n  return count;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return arr.filter(x => {\n        return sum_digits(x) > 0;\n    }).length;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "//if no elements in array return 0\n\tif(arr.length == 0){\n\t\treturn 0;\n\t}\n\t//if first element in array is positive and string length is 1 return true\n\tif(arr[0] > 0 && arr[0].toString().length == 1){\n\t\treturn 1;\n\t}\n\t//if first element in array is negative and string length is 1 return true\n\tif(arr[0] < 0 && arr[0].toString().length == 1){\n\t\treturn 1;\n\t}\n\t//if first element in array is positive\n\tif(arr[0] > 0){\n\t\t//turn the number into a string\n\t\tvar str = arr[0].toString();\n\t\t//create an array of each string element\n\t\tvar split = str.split(\"\");\n\t\t//make an empty array to store the summation of digits\n\t\tvar sum = [];\n\t\t//loop through the array\n\t\tfor(var i = 0; i < split.length; i++){\n\t\t\t//turn the strings into integers and add them to sum array\n\t\t\tsum.push(parseInt(split[i]));\n\t\t}\n\t\t//declare variable to store sum of digits\n\t\tvar sumOf = 0;\n\t\t//loop through the sum array\n\t\tfor(var i = 0; i < sum.length; i++){\n\t\t\t//add the array elements together\n\t\t\tsumOf += sum[i];\n\t\t}\n\t\t//if the sum is greater than 0 return true\n\t\tif(sumOf > 0){\n\t\t\treturn 1;\n\t\t}\n\t}\n\t//if first element in array is negative\n\tif(arr[0] < 0){\n\t\t//take the negative sign out\n\t\tvar fix = arr[0].toString().substring(1);\n\t\t//turn number into a string\n\t\tvar str = fix.toString();\n\t\t//create an array of each string element\n\t\tvar split = str.split(\"\");\n\t\t//make an empty array to store the summation of digits\n\t\tvar sum = [];\n\t\t//loop through the array\n\t\tfor(",
        "grade-6": {
            "execution": 0
        },
        "18": "return arr.filter(function(v){\n\t\tvar sum = 0;\n\t\tfor(var i = 0; i < v.toString().length; i++){\n\t\t\tsum += parseInt(v.toString()[i]);\n\t\t}\n\t\treturn sum > 0;\n\t}).length;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let count = 0;\n    arr.forEach(num => {\n        let num_str = num.toString();\n        if (num < 0) num_str = num_str.substring(1);\n        let sum = 0;\n        for (let i = 0; i < num_str.length; i++){\n            sum += parseInt(num_str[i]);\n        }\n        if (sum > 0) count++;\n    });\n    return count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return arr.filter(x => {\n\t\tif (x > 0) {\n\t\t\treturn x;\n\t\t}\n\t\tx = Math.abs(x);\n\t\tif (x < 0) {\n\t\t\treturn x;\n\t\t}\n\t}).reduce((acc, val) => {\n\t\tlet sum = 0;\n\t\tval = String(val);\n\t\tfor (let i = 0; i < val.length; i++){\n\t\t\tsum += Number(val[i]);\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tacc++;\n\t\t}\n\t\treturn acc;\n\t}, 0);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var count = 0;\n\tvar digit = 0;\n\tvar sum = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar num = arr[i];\n\t\t//If the number is negative, we need to find the first digit.\n\t\tif(num < 0){\n\t\t\tnum = Math.abs(num);\n\t\t\tvar str = num.toString();\n\t\t\tdigit = parseInt(str[0]);\n\t\t\tsum = sum + digit;\n\t\t}\n\t\t//Find the sum of all the digits\n\t\twhile(num > 0){\n\t\t\tdigit = num % 10;\n\t\t\tsum = sum + digit;\n\t\t\tnum = Math.floor(num / 10);\n\t\t}\n\t\t//Count the elements that have a sum of digits > 0\n\t\tif(sum > 0){\n\t\t\tcount = count + 1;\n\t\t}\n\t\tsum = 0;\n\t}\n\treturn count;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        // if(Math.abs(arr[i]) < 10){\n        //     if(arr[i] > 0){\n        //         count++;\n        //     }\n        // }\n        // else{\n        //     var numbers = Math.abs(arr[i]).toString().split(\"\");\n        //     var sum = 0;\n        //     for(var j = 0; j < numbers.length; j++){\n        //         sum += parseInt(numbers[j]);\n        //     }\n        //     if(sum > 0){\n        //         count++;\n        //     }\n        // }\n        var number = Math.abs(arr[i]);\n        var sum = 0;\n        while(number > 0){\n            sum += number % 10;\n            number = Math.floor(number / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var sum;\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tsum = 0;\n\t\tif(arr[i] < 0){\n\t\t\tarr[i] = arr[i] * -1;\n\t\t}\n\t\tvar num = arr[i].toString();\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tsum += parseInt(num[j]);\n\t\t}\n\t\tif(sum > 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n        var num = arr[i];\n        if(num < 0){\n            num = Math.abs(num);\n        }\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return arr.filter(function(x){\n    return (x.toString().split('').reduce(function(previousValue, currentValue){\n      return +previousValue + +currentValue;\n    }, 0) > 0);\n  }).length;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.30954778302135205,
        "bleu-0": 0.2524130375995218,
        "bleu-8": 0.010183262514483458,
        "bleu-7": 0.27332227299733347,
        "bleu-16": 0.30182864010357946,
        "bleu-2": 0.22644049539842698,
        "bleu-11": 1.5302851023373536e-07,
        "bleu-1": 0.24235879480636252,
        "bleu-10": 0.20536930399857098,
        "bleu-17": 0.0785404996481436,
        "bleu-12": 0.004750280580551774,
        "bleu-6": 0.05715412902167317,
        "bleu-18": 0.16267375572965245,
        "bleu-15": 0.24963261135886036,
        "bleu-13": 0.24272075216957473,
        "bleu-9": 0.17393606427795824,
        "bleu-4": 0.14661915730450736,
        "bleu-14": 0.2616360097603132,
        "bleu-5": 0.33014532090399756,
        "bleu-19": 0.03699261395115498,
        "codebleu-3": 0.6676511534209617,
        "codebleu-0": 0.5190209443339893,
        "codebleu-8": 0.1433570685598555,
        "codebleu-7": 0.41650309493420723,
        "codebleu-16": 0.5820225940302167,
        "codebleu-2": 0.401343658593852,
        "codebleu-11": 0.02415459468208802,
        "codebleu-1": 0.6467911529696712,
        "codebleu-10": 0.3764089223651391,
        "codebleu-17": 0.5529746125547661,
        "codebleu-12": 0.1266488325285242,
        "codebleu-6": 0.5720330523743556,
        "codebleu-18": 0.3694928936720698,
        "codebleu-15": 0.5705684928397811,
        "codebleu-13": 0.6002507957987349,
        "codebleu-9": 0.6313223238978639,
        "codebleu-4": 0.6453273003425504,
        "codebleu-14": 0.6275579281025053,
        "codebleu-5": 0.659410397445426,
        "codebleu-19": 0.23940316118860425,
        "chrf-3": 0.4237616618764399,
        "chrf-0": 0.31326875664145076,
        "chrf-8": 0.11800553692082538,
        "chrf-7": 0.3651483309903347,
        "chrf-16": 0.3448676971195988,
        "chrf-2": 0.30624354974215756,
        "chrf-11": 0.024505332130520915,
        "chrf-1": 0.3561194465783329,
        "chrf-10": 0.28303996276233157,
        "chrf-17": 0.19090243896326065,
        "chrf-12": 0.13435863616543361,
        "chrf-6": 0.15453464943551454,
        "chrf-18": 0.24721508838163606,
        "chrf-15": 0.2999112226299676,
        "chrf-13": 0.3082474580762284,
        "chrf-9": 0.28915714864377307,
        "chrf-4": 0.2935465267547506,
        "chrf-14": 0.3150276710467508,
        "chrf-5": 0.3582083804167635,
        "chrf-19": 0.17549436428889942,
        "rougel-3": 0.5429864253393665,
        "rougel-0": 0.4285714285714286,
        "rougel-8": 0.21705426356589147,
        "rougel-7": 0.5180722891566265,
        "rougel-16": 0.5901639344262296,
        "rougel-2": 0.49689440993788814,
        "rougel-11": 0.03773584905660377,
        "rougel-1": 0.5,
        "rougel-10": 0.4810126582278481,
        "rougel-17": 0.3739837398373984,
        "rougel-12": 0.19672131147540983,
        "rougel-6": 0.16165413533834586,
        "rougel-18": 0.3614457831325302,
        "rougel-15": 0.387434554973822,
        "rougel-13": 0.3627906976744186,
        "rougel-9": 0.43478260869565216,
        "rougel-4": 0.40125391849529785,
        "rougel-14": 0.48598130841121495,
        "rougel-5": 0.6051282051282051,
        "rougel-19": 0.2278481012658228,
        "meteor-3": 0.5710048285206419,
        "meteor-0": 0.4049957701252985,
        "meteor-8": 0.12406351791530947,
        "meteor-7": 0.3440835073068894,
        "meteor-16": 0.5160661250422067,
        "meteor-2": 0.4141708930861607,
        "meteor-11": 0.011135857461024499,
        "meteor-1": 0.49059245197135426,
        "meteor-10": 0.3407531809512967,
        "meteor-17": 0.33508975512104144,
        "meteor-12": 0.13342768992041312,
        "meteor-6": 0.2528450496247168,
        "meteor-18": 0.2939635598320369,
        "meteor-15": 0.4063725680726326,
        "meteor-13": 0.4330111624505413,
        "meteor-9": 0.4117116521802064,
        "meteor-4": 0.48227933287278346,
        "meteor-14": 0.4447883458872158,
        "meteor-5": 0.517497886728656,
        "meteor-19": 0.20068421052631577,
        "ruby-3": 0.38524590163934425,
        "ruby-0": 0.2828282828282829,
        "ruby-8": 0.14141414141414144,
        "ruby-7": 0.38383838383838387,
        "ruby-16": 0.4444444444444444,
        "ruby-2": 0.3535353535353535,
        "ruby-11": 0.02020202020202022,
        "ruby-1": 0.3829787234042553,
        "ruby-10": 0.3434343434343434,
        "ruby-17": 0.2517006802721088,
        "ruby-12": 0.12121212121212122,
        "ruby-6": 0.09237875288683606,
        "ruby-18": 0.1717171717171717,
        "ruby-15": 0.2222222222222222,
        "ruby-13": 0.18965517241379315,
        "ruby-9": 0.3163841807909604,
        "ruby-4": 0.2727272727272727,
        "ruby-14": 0.34782608695652173,
        "ruby-5": 0.46464646464646464,
        "ruby-19": 0.1515151515151515,
        "codebertscore_f1-3": 0.8474209904670715,
        "codebertscore_f3-3": 0.8421327471733093,
        "codebertscore_f1-0": 0.8151854872703552,
        "codebertscore_f3-0": 0.8158487677574158,
        "codebertscore_f1-8": 0.6890245676040649,
        "codebertscore_f3-8": 0.6700382232666016,
        "codebertscore_f1-7": 0.8602811694145203,
        "codebertscore_f3-7": 0.8403828740119934,
        "codebertscore_f1-16": 0.8713052868843079,
        "codebertscore_f3-16": 0.8669615983963013,
        "codebertscore_f1-2": 0.792829692363739,
        "codebertscore_f3-2": 0.7792894244194031,
        "codebertscore_f1-11": 0.5727982521057129,
        "codebertscore_f3-11": 0.5521275401115417,
        "codebertscore_f1-1": 0.8241209983825684,
        "codebertscore_f3-1": 0.8266677260398865,
        "codebertscore_f1-10": 0.8257332444190979,
        "codebertscore_f3-10": 0.7957162261009216,
        "codebertscore_f1-17": 0.7576224207878113,
        "codebertscore_f3-17": 0.7685242891311646,
        "codebertscore_f1-12": 0.7021141052246094,
        "codebertscore_f3-12": 0.677328884601593,
        "codebertscore_f1-6": 0.6560966968536377,
        "codebertscore_f3-6": 0.6962442994117737,
        "codebertscore_f1-18": 0.7642114162445068,
        "codebertscore_f3-18": 0.7564260959625244,
        "codebertscore_f1-15": 0.8105887174606323,
        "codebertscore_f3-15": 0.818911612033844,
        "codebertscore_f1-13": 0.8056110143661499,
        "codebertscore_f3-13": 0.8088490962982178,
        "codebertscore_f1-9": 0.7834991812705994,
        "codebertscore_f3-9": 0.8198738098144531,
        "codebertscore_f1-4": 0.7606355547904968,
        "codebertscore_f3-4": 0.7936042547225952,
        "codebertscore_f1-14": 0.8294228315353394,
        "codebertscore_f3-14": 0.8248165249824524,
        "codebertscore_f1-5": 0.8614472150802612,
        "codebertscore_f3-5": 0.8603602647781372,
        "codebertscore_f1-19": 0.6877685785293579,
        "codebertscore_f3-19": 0.685201108455658,
        "codebertscore_s_f1-3": 0.8531804084777832,
        "codebertscore_s_f3-3": 0.8488696217536926,
        "codebertscore_s_f1-0": 0.8173933029174805,
        "codebertscore_s_f3-0": 0.8163227438926697,
        "codebertscore_s_f1-8": 0.6902687549591064,
        "codebertscore_s_f3-8": 0.6671319007873535,
        "codebertscore_s_f1-7": 0.8623754978179932,
        "codebertscore_s_f3-7": 0.8422073721885681,
        "codebertscore_s_f1-16": 0.8683997392654419,
        "codebertscore_s_f3-16": 0.8638678193092346,
        "codebertscore_s_f1-2": 0.79807448387146,
        "codebertscore_s_f3-2": 0.7870495915412903,
        "codebertscore_s_f1-11": 0.5576083660125732,
        "codebertscore_s_f3-11": 0.5300795435905457,
        "codebertscore_s_f1-1": 0.8392841219902039,
        "codebertscore_s_f3-1": 0.8412280082702637,
        "codebertscore_s_f1-10": 0.8334603905677795,
        "codebertscore_s_f3-10": 0.8044911623001099,
        "codebertscore_s_f1-17": 0.7611539959907532,
        "codebertscore_s_f3-17": 0.7741362452507019,
        "codebertscore_s_f1-12": 0.6974056363105774,
        "codebertscore_s_f3-12": 0.671145498752594,
        "codebertscore_s_f1-6": 0.6779953241348267,
        "codebertscore_s_f3-6": 0.7196705341339111,
        "codebertscore_s_f1-18": 0.7790179252624512,
        "codebertscore_s_f3-18": 0.7691437602043152,
        "codebertscore_s_f1-15": 0.8141055703163147,
        "codebertscore_s_f3-15": 0.8213080167770386,
        "codebertscore_s_f1-13": 0.8060570955276489,
        "codebertscore_s_f3-13": 0.8086432814598083,
        "codebertscore_s_f1-9": 0.7854814529418945,
        "codebertscore_s_f3-9": 0.8220034837722778,
        "codebertscore_s_f1-4": 0.7832274436950684,
        "codebertscore_s_f3-4": 0.809621274471283,
        "codebertscore_s_f1-14": 0.8296014666557312,
        "codebertscore_s_f3-14": 0.8260230422019958,
        "codebertscore_s_f1-5": 0.8631135821342468,
        "codebertscore_s_f3-5": 0.8614317178726196,
        "codebertscore_s_f1-19": 0.6963415741920471,
        "codebertscore_s_f3-19": 0.6949298977851868,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 0,
        "raw_gpt35_nsnr-11": "0",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 2,
        "raw_gpt35_nsnr-10": "2",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n",
        "snippet": [
            "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
        "task_id": "145",
        "3": "var index = 0;\n  var lookup = {};\n  var sorted = [];\n  var sortedKeys = [];\n  // make a copy of the array,\n  // and create a mapping of the number in array\n  // to the index of where it was in the array\n  // e.g. {0: 6, 1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5}\n  //nums = nums.slice();\n  for (var j = 0; j < nums.length; j++) {\n    lookup[j] = index;\n    index++;\n  }\n  // sort the copied array\n  nums.sort(function(a, b) {\n    // if sum(a) < sum(b),\n    // return -1 and let sort() know that a should come before b\n    // (or if they are equal, use the index to determine which\n    // should come first based on the original array).\n    if (sum(a) < sum(b)) return -1;\n    if (sum(a) === sum(b)) return lookup[b] - lookup[a];\n    // if sum(a) > sum(b), return 1,\n    // (or if they are equal, use the index to determine which\n    // should come first based on the original array).\n    if (sum(a) > sum(b)) return 1;\n  });\n  //console.log(nums);\n  return nums;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "// console.log(nums.sort((a, b) => sum_of_digits(a) - sum_of_digits(b)))\n    return nums.sort((a, b) => sum_of_digits(a) - sum_of_digits(b))\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return nums.sort((a, b) => {\n        let a_sum = a.toString().split('').reduce((acc, num) => acc + parseInt(num), 0);\n        let b_sum = b.toString().split('').reduce((acc, num) => acc + parseInt(num), 0);\n        if (a_sum > b_sum) {\n            return 1;\n        } else if (a_sum < b_sum) {\n            return -1;\n        } else {\n            return a - b;\n        }\n    });\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (nums.length == 0) {\n        return [];\n    }\n\n    let nums_to_points = [];\n    let points_to_num = {};\n    let max_point = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let point = 0;\n        let num = nums[i];\n        while (num != 0) {\n            point += num % 10;\n            num = parseInt(num / 10);\n        }\n        nums_to_points.push(point);\n        points_to_num[point] = nums[i];\n        if (point > max_point) {\n            max_point = point;\n        }\n    }\n\n    let result = [];\n    for (let i = 0; i <= max_point; i++) {\n        if (points_to_num[i] != undefined) {\n            result.push(points_to_num[i]);\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(nums.length == 0){\n        return nums;\n    }\n    let sort = [];\n    let key = null;\n    let max = sumOfDigits(nums[0]);\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let sum = sumOfDigits(nums[i]);\n        if(sum >= max){\n            max = sum;\n            key = nums[i];\n            count = 0;\n        }\n        if(i == nums.length - 1){\n            sort.push(key);\n            nums.splice(nums.indexOf(key), 1);\n            i = -1;\n            max = sumOfDigits(nums[0]);\n            count++;\n        }\n        if(count == nums.length){\n            break;\n        }\n    }\n    return sort;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let arr = [];\n    let map = {};\n    for(let i=0; i<nums.length; i++){\n        arr.push([nums[i], sum_of_digits(nums[i])]);\n        if(!map[sum_of_digits(nums[i])]){\n            map[sum_of_digits(nums[i])] = [];\n        }\n        map[sum_of_digits(nums[i])].push(nums[i]);\n    }\n    let keys = Object.keys(map);\n    keys.sort((a,b)=>{\n        return a-b;\n    });\n    let finalArr = [];\n    for(let i=0; i<keys.length; i++){\n        map[keys[i]].sort((a,b)=>{\n            return a-b;\n        });\n        finalArr = finalArr.concat(map[keys[i]]);\n    }\n    return finalArr;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return nums.map(\n    (num, i) => num + ' ' + i\n  ).sort().map(\n    (val) => Number(val.match(/\\d+/)[0])\n  );\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let sum = 0;\n    let results = [];\n    if(nums.length > 0){\n        for(let i = 0; i < nums.length; i++){\n            for(let j = 0; j < (nums[i].toString()).length; j++){\n                sum += parseInt((nums[i].toString())[j]);\n            }\n            results.push([sum, i]);\n            sum = 0;\n        }\n        results.sort(function(a, b){\n            return a[0] - b[0];\n        });\n        for(let i = 0; i < results.length; i++){\n            results[i] = nums[results[i][1]];\n        }\n    }\n    return results;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "// if (nums.length > 1){\n\t// \tfor (var i = 0; i < nums.length - 1; i++){\n\t// \t\tfor (var j = i + 1; j < nums.length; j++){\n\t// \t\t\tif (get_sum_of_numbers(nums[i]) > get_sum_of_numbers(nums[j])){\n\t// \t\t\t\tvar temp = nums[i];\n\t// \t\t\t\tnums[i] = nums[j];\n\t// \t\t\t\tnums[j] = temp;\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tvar sorted_array = nums.slice().sort(function(a, b){\n\t\treturn get_sum_of_numbers(a) - get_sum_of_numbers(b);\n\t});\n\treturn sorted_array;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = [];\n    if(nums.length > 0){\n        for(var i = 0; i < nums.length; i++){\n            var tmp = nums[i];\n            var num = Math.abs(tmp).toString();\n            var sum = 0;\n            for(var j = 0; j < num.length; j++){\n                sum += Number(num[j]);\n            }\n            result.push([tmp, sum, i]);\n        }\n        result.sort(function(a, b){\n            if(a[1] === b[1]){\n                return a[2] - b[2];\n            }\n            return a[1] - b[1];\n        });\n        var res = [];\n        for(var i = 0; i < result.length; i++){\n            res.push(result[i][0]);\n        }\n        return res;\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var result = [];\n  var sorted = {};\n  nums.forEach(function(num, index){\n    var numArr = num.toString().split('');\n    if(sorted[numArr.reduce(function(a,b){\n      return parseInt(a) + parseInt(b);\n    })] == undefined){\n      sorted[numArr.reduce(function(a,b){\n        return parseInt(a) + parseInt(b);\n      })] = [index];\n    }else{\n      sorted[numArr.reduce(function(a,b){\n        return parseInt(a) + parseInt(b);\n      })].push(index);\n    }\n  });\n  var sortedKeys = Object.keys(sorted).sort(function(a,b){\n    return a - b;\n  });\n  sortedKeys.forEach(function(key){\n    var indexes = sorted[key];\n    indexes.forEach(function(index){\n      result.push(nums[index]);\n    });\n  });\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return nums.map(function(num){\n        return {num: num, sum: sum_digits(num)};\n    }).sort(function(a, b){\n        if(a.sum !== b.sum){\n            return a.sum - b.sum;\n        }\n        return nums.indexOf(a.num) - nums.indexOf(b.num);\n    }).map(function(item){\n        return item.num;\n    });\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let num_hash = {};\n  for (let i = 0; i < nums.length; i++){\n    let n = nums[i];\n    let n_array = n.toString().split('');\n    let n_sum = 0;\n    for (let j = 0; j < n_array.length; j++){\n      n_sum += parseInt(n_array[j]);\n    }\n    if (num_hash[n_sum]){\n      num_hash[n_sum].push(n);\n    }\n    else {\n      num_hash[n_sum] = [n];\n    }\n  }\n  let result = [];\n  let keys = Object.keys(num_hash);\n  keys.sort(function(a, b){return a - b});\n  for (let i = 0; i < keys.length; i++){\n    result = result.concat(num_hash[keys[i]]);\n  }\n  return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((a, b) => Number(a) + Number(b), 0);\n        let sumB = b.toString().split('').reduce((a, b) => Number(a) + Number(b), 0);\n        return sumA - sumB;\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let arr = []\n    nums.forEach(num => arr.push(Math.abs(num).toString().split('').reduce((acc, cur) => +acc + +cur)))\n    let sortedArr = arr.slice().sort((a, b) => a - b)\n    let obj = {}\n    sortedArr.forEach((el, i) => obj[el] = i)\n    return arr.map(el => nums[obj[el]])\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sums = []\n    var answer = []\n    if (nums.length < 1){\n        return [];\n    }\n    else{\n        for (var i = 0; i < nums.length; i++){\n            var sum = 0;\n            for (var j = 0; j < nums[i].toString().length; j++){\n                sum += parseInt(nums[i].toString()[j]);\n            }\n            sums.push(sum);\n        }\n        for (var i = 0; i < sums.length; i++){\n            for (var j = 0; j < sums.length; j++){\n                if (sums[i] < sums[j]){\n                    var temp = sums[i];\n                    sums[i] = sums[j];\n                    sums[j] = temp;\n                    var temp2 = nums[i];\n                    nums[i] = nums[j];\n                    nums[j] = temp2;\n                }\n            }\n        }\n        return nums;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return nums.sort((a, b) => {\n        return [...String(a)].reduce((a, c) => a + Number(c), 0) - [...String(b)].reduce((a, c) => a + Number(c), 0) ||\n            nums.indexOf(a) - nums.indexOf(b);\n    });\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let sums = nums.map(sum_digits);\n    return quick_sort(nums, sums);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return nums.map(e => {\n        return {num: e, points: e.toString().split('').reduce((a, b) => Number(a) + Number(b), 0)}\n    }).sort((a, b) => a.points - b.points).map(e => e.num);\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.04100780147424455,
        "bleu-0": 0.0006451415079883611,
        "bleu-8": 0.01728658479843175,
        "bleu-7": 1.557370374296947e-94,
        "bleu-16": 0.07976176529803251,
        "bleu-2": 0.09325652853735994,
        "bleu-11": 0.04781445685903598,
        "bleu-1": 0.0010335824663409861,
        "bleu-10": 0.10184705474809487,
        "bleu-17": 0.045330801999482716,
        "bleu-12": 0.08279310728970563,
        "bleu-6": 0.01487543598699964,
        "bleu-18": 0.00838339324831368,
        "bleu-15": 0.10858422963727257,
        "bleu-13": 0.007337568925024819,
        "bleu-9": 0.007060410328334345,
        "bleu-4": 0.086995792554122,
        "bleu-14": 0.0061674671513406365,
        "bleu-5": 2.245566432229774e-06,
        "bleu-19": 0.004835114065174886,
        "codebleu-3": 0.4810523234511571,
        "codebleu-0": 0.10554248808178605,
        "codebleu-8": 0.24872383599180106,
        "codebleu-7": 0.0022753128555176336,
        "codebleu-16": 0.43094751068068105,
        "codebleu-2": 0.4186708000853224,
        "codebleu-11": 0.4340386731804948,
        "codebleu-1": 0.09869235538295941,
        "codebleu-10": 0.41285493567382264,
        "codebleu-17": 0.3622818905000003,
        "codebleu-12": 0.4741436853990521,
        "codebleu-6": 0.40675786193693997,
        "codebleu-18": 0.19673756730457248,
        "codebleu-15": 0.4578323200652151,
        "codebleu-13": 0.17856144653525108,
        "codebleu-9": 0.23494795319138345,
        "codebleu-4": 0.48912375035427513,
        "codebleu-14": 0.1673880098951523,
        "codebleu-5": 0.04323126338196882,
        "codebleu-19": 0.15821715651269094,
        "chrf-3": 0.15404944466014536,
        "chrf-0": 0.06845595965615253,
        "chrf-8": 0.11511452001691565,
        "chrf-7": 0.004508566275924256,
        "chrf-16": 0.22607450979889376,
        "chrf-2": 0.20790977807992028,
        "chrf-11": 0.18438117460579023,
        "chrf-1": 0.06317431783767119,
        "chrf-10": 0.20427284557891426,
        "chrf-17": 0.1587815965676389,
        "chrf-12": 0.18532860216023497,
        "chrf-6": 0.11863277321766982,
        "chrf-18": 0.09497187146547673,
        "chrf-15": 0.2172510869210964,
        "chrf-13": 0.0920587423872575,
        "chrf-9": 0.10622551549641904,
        "chrf-4": 0.18028800938486417,
        "chrf-14": 0.08263648725601586,
        "chrf-5": 0.05236562313386112,
        "chrf-19": 0.08574393637140709,
        "rougel-3": 0.20111731843575423,
        "rougel-0": 0.1492537313432836,
        "rougel-8": 0.22485207100591717,
        "rougel-7": 0.009174311926605503,
        "rougel-16": 0.35233160621761656,
        "rougel-2": 0.30848329048843187,
        "rougel-11": 0.2755344418052256,
        "rougel-1": 0.16479400749063672,
        "rougel-10": 0.3359173126614987,
        "rougel-17": 0.26344086021505375,
        "rougel-12": 0.3047619047619048,
        "rougel-6": 0.2311111111111111,
        "rougel-18": 0.189873417721519,
        "rougel-15": 0.3111111111111111,
        "rougel-13": 0.19435736677115986,
        "rougel-9": 0.2275449101796407,
        "rougel-4": 0.30841121495327106,
        "rougel-14": 0.18709677419354837,
        "rougel-5": 0.09322033898305086,
        "rougel-19": 0.1794019933554817,
        "meteor-3": 0.21990580388510458,
        "meteor-0": 0.0748502994011976,
        "meteor-8": 0.15379817157560283,
        "meteor-7": 0.0025588536335721594,
        "meteor-16": 0.33453423977602903,
        "meteor-2": 0.2908664723285763,
        "meteor-11": 0.2317319852716007,
        "meteor-1": 0.08487269096355465,
        "meteor-10": 0.2801741349888435,
        "meteor-17": 0.21347248576850095,
        "meteor-12": 0.26412239044514174,
        "meteor-6": 0.17154620311070448,
        "meteor-18": 0.1023391812865497,
        "meteor-15": 0.30209546446239544,
        "meteor-13": 0.10462287104622872,
        "meteor-9": 0.14238344794439514,
        "meteor-4": 0.29264354707180873,
        "meteor-14": 0.10263929618768328,
        "meteor-5": 0.030425963488843813,
        "meteor-19": 0.10044610984868572,
        "ruby-3": 0.09999999999999998,
        "ruby-0": 0.09216589861751157,
        "ruby-8": 0.15207373271889402,
        "ruby-7": 0.004608294930875556,
        "ruby-16": 0.20276497695852536,
        "ruby-2": 0.17972350230414746,
        "ruby-11": 0.1428571428571429,
        "ruby-1": 0.09677419354838712,
        "ruby-10": 0.2304147465437788,
        "ruby-17": 0.15207373271889402,
        "ruby-12": 0.15668202764976957,
        "ruby-6": 0.12017167381974247,
        "ruby-18": 0.12903225806451613,
        "ruby-15": 0.1751152073732719,
        "ruby-13": 0.12903225806451613,
        "ruby-9": 0.13364055299539168,
        "ruby-4": 0.17972350230414746,
        "ruby-14": 0.11981566820276501,
        "ruby-5": 0.05069124423963134,
        "ruby-19": 0.11059907834101379,
        "codebertscore_f1-3": 0.6903090476989746,
        "codebertscore_f3-3": 0.7114667296409607,
        "codebertscore_f1-0": 0.6065086722373962,
        "codebertscore_f3-0": 0.5765213370323181,
        "codebertscore_f1-8": 0.6916079521179199,
        "codebertscore_f3-8": 0.688279926776886,
        "codebertscore_f1-7": 0.0,
        "codebertscore_f3-7": 0.0,
        "codebertscore_f1-16": 0.7585057020187378,
        "codebertscore_f3-16": 0.7562991976737976,
        "codebertscore_f1-2": 0.7329117655754089,
        "codebertscore_f3-2": 0.7280979156494141,
        "codebertscore_f1-11": 0.7138649225234985,
        "codebertscore_f3-11": 0.7164682745933533,
        "codebertscore_f1-1": 0.5948879718780518,
        "codebertscore_f3-1": 0.5662832260131836,
        "codebertscore_f1-10": 0.7427250146865845,
        "codebertscore_f3-10": 0.7317561507225037,
        "codebertscore_f1-17": 0.721770167350769,
        "codebertscore_f3-17": 0.7185448408126831,
        "codebertscore_f1-12": 0.7432489991188049,
        "codebertscore_f3-12": 0.7358944416046143,
        "codebertscore_f1-6": 0.6810163259506226,
        "codebertscore_f3-6": 0.6825549602508545,
        "codebertscore_f1-18": 0.6458336710929871,
        "codebertscore_f3-18": 0.619127631187439,
        "codebertscore_f1-15": 0.7324352860450745,
        "codebertscore_f3-15": 0.7239377498626709,
        "codebertscore_f1-13": 0.645108163356781,
        "codebertscore_f3-13": 0.6284258365631104,
        "codebertscore_f1-9": 0.6515759825706482,
        "codebertscore_f3-9": 0.6295260190963745,
        "codebertscore_f1-4": 0.7463099360466003,
        "codebertscore_f3-4": 0.7375128865242004,
        "codebertscore_f1-14": 0.6311166286468506,
        "codebertscore_f3-14": 0.6049466729164124,
        "codebertscore_f1-5": 0.5959820747375488,
        "codebertscore_f3-5": 0.5382152199745178,
        "codebertscore_f1-19": 0.6134817600250244,
        "codebertscore_f3-19": 0.5876235961914062,
        "codebertscore_s_f1-3": 0.6985334753990173,
        "codebertscore_s_f3-3": 0.7182976007461548,
        "codebertscore_s_f1-0": 0.6338412165641785,
        "codebertscore_s_f3-0": 0.6106745600700378,
        "codebertscore_s_f1-8": 0.7109485268592834,
        "codebertscore_s_f3-8": 0.7110385894775391,
        "codebertscore_s_f1-7": 0.0,
        "codebertscore_s_f3-7": 0.0,
        "codebertscore_s_f1-16": 0.7698467373847961,
        "codebertscore_s_f3-16": 0.765018105506897,
        "codebertscore_s_f1-2": 0.7417615652084351,
        "codebertscore_s_f3-2": 0.7377973198890686,
        "codebertscore_s_f1-11": 0.7199364900588989,
        "codebertscore_s_f3-11": 0.7245177030563354,
        "codebertscore_s_f1-1": 0.6213197708129883,
        "codebertscore_s_f3-1": 0.5897862315177917,
        "codebertscore_s_f1-10": 0.7500145435333252,
        "codebertscore_s_f3-10": 0.7390297651290894,
        "codebertscore_s_f1-17": 0.7343756556510925,
        "codebertscore_s_f3-17": 0.730841875076294,
        "codebertscore_s_f1-12": 0.748293399810791,
        "codebertscore_s_f3-12": 0.740987241268158,
        "codebertscore_s_f1-6": 0.6834960579872131,
        "codebertscore_s_f3-6": 0.6873518228530884,
        "codebertscore_s_f1-18": 0.668052613735199,
        "codebertscore_s_f3-18": 0.6497045159339905,
        "codebertscore_s_f1-15": 0.7421211004257202,
        "codebertscore_s_f3-15": 0.7347890734672546,
        "codebertscore_s_f1-13": 0.6800273060798645,
        "codebertscore_s_f3-13": 0.6729786396026611,
        "codebertscore_s_f1-9": 0.6780961155891418,
        "codebertscore_s_f3-9": 0.6655645370483398,
        "codebertscore_s_f1-4": 0.7507231831550598,
        "codebertscore_s_f3-4": 0.7416465282440186,
        "codebertscore_s_f1-14": 0.6652526259422302,
        "codebertscore_s_f3-14": 0.6450068354606628,
        "codebertscore_s_f1-5": 0.6217901110649109,
        "codebertscore_s_f3-5": 0.5661237835884094,
        "codebertscore_s_f1-19": 0.644376814365387,
        "codebertscore_s_f3-19": 0.6226696968078613,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 2,
        "raw_gpt35_nsnr-2": "2",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 2,
        "raw_gpt35_nsnr-1": "2",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//\"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nfunction sum_squares(lst){\n",
        "snippet": [
            "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n"
        ],
        "simplified": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
        "task_id": "142",
        "3": "var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += Math.pow(lst[i], 2);\n        }\n        else if (i % 4 == 0 && i % 3 != 0) {\n            sum += Math.pow(lst[i], 3);\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var sum=0;\n  for(var i=0;i<lst.length;i++){\n    if(i%3==0 && i%4!=0){\n      sum=sum+lst[i]*lst[i];\n    }\n    else if(i%4==0 && i%3!=0){\n      sum=sum+lst[i]*lst[i]*lst[i];\n    }\n    else{\n      sum=sum+lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var sum = 0;\n\tif (lst.length == 0){\n\t\treturn 0;\n\t}\n\tfor (var i = 0; i < lst.length; i++){\n\t\tif (i % 3 == 0 && i % 4 != 0){\n\t\t\tsum += Math.pow(lst[i], 2);\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += Math.pow(lst[i], 3);\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let sum = 0;\n\tfor (let i = 0; i < lst.length; i++){\n\t\tif (i % 3 == 0){\n\t\t\tsum += lst[i]**2;\n\t\t} else if (i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += lst[i]**3;\n\t\t} else {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "for(var i = 0; i < lst.length; i++){\n\t\tif(i % 3 == 0 && i % 4 != 0){\n\t\t\tlst[i] = lst[i] * lst[i];\n\t\t}\n\t\telse if(i % 4 == 0 && i % 3 != 0){\n\t\t\tlst[i] = lst[i] * lst[i] * lst[i];\n\t\t}\n\t}\n\treturn lst.reduce(function(a,b){return a+b;});\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if ((i+1) % 3 == 0 && (i+1) % 4 != 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if ((i+1) % 4 == 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "// Your code here\n\tvar sum = 0;\n\tfor (var i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0 && i % 4 != 0) {\n\t\t\tsum += Math.pow(lst[i], 2);\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += Math.pow(lst[i], 3);\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let sum = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if(i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n    }\n    var sum = 0;\n    for(var j = 0; j < lst.length; j++){\n        sum += lst[j];\n    }\n    return sum;\n}\n\nvar list1 = [1,2,3];\nvar list2 = [];\nvar list3 = [-1,-5,2,-1,-5];",
        "grade-17": {
            "execution": 1
        },
        "12": "if(lst.length == 0){\n    return 0;\n  }\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 3 == 0){\n      sum += lst[i] ** 2;\n    }\n    else if(i % 4 == 0 && i % 3 != 0){\n      sum += lst[i] ** 3;\n    }\n    else{\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0 && i % 4 != 0){\n            sum += lst[i]*lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0){\n            sum += lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var sum = 0;\n    if (lst.length == 0){\n        return 0;\n    }\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0 && i % 4 != 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if (i % 4 == 0 && i % 3 != 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "// make a copy of the list\n    let lst_ = lst.slice();\n    for (let i = 0; i < lst_.length; i++){\n        // check if the index is a multiple of 3\n        if ((i+1) % 3 == 0){\n            // square it \n            lst_[i] = lst_[i] * lst_[i];\n        }\n        // check if the index is a multiple of 4\n        if ((i+1) % 4 == 0){\n            // cube it\n            lst_[i] = lst_[i] * lst_[i] * lst_[i];\n        }\n    }\n    // sum up the list\n    let sum = 0;\n    for (let i = 0; i < lst_.length; i++){\n        sum += lst_[i];\n    }\n    return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var sum = 0;\n    if (lst.length > 0){\n        for (var i = 0; i < lst.length; i++){\n            if (i % 3 == 0 && i % 4 != 0){\n                sum += Math.pow(lst[i], 2);\n            } else if (i % 4 == 0){\n                sum += Math.pow(lst[i], 3);\n            } else {\n                sum += lst[i];\n            }\n        }\n    }\n    return sum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(i % 3 == 0 && i % 4 != 0){\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if(i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse{\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(i % 3 == 0){\n\t\t\tsum += lst[i]*lst[i];\n\t\t}\n\t\telse if(i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += lst[i]*lst[i]*lst[i];\n\t\t}\n\t\telse{\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            sum += Math.pow(lst[i], 2);\n        } else if (i % 4 == 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var sum = 0;\n    for (i = 0; i < lst.length; i++) {\n        if (i % 3 == 0 && i % 4 != 0) {\n            sum += lst[i]*lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i]*lst[i]*lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n    var counter = 0;\n    for (i = 0; i < lst.length; i++){\n        if (counter == 3){\n            counter += 1;\n            sum += lst[i]**2;\n        } else if (counter == 4){\n            counter = 1;\n            sum += lst[i]**3;\n        } else {\n            counter += 1;\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.490448052638892,
        "bleu-0": 0.5521804406394792,
        "bleu-8": 0.403855949814057,
        "bleu-7": 0.6196115543879689,
        "bleu-16": 0.5453039576677035,
        "bleu-2": 0.39090467330827294,
        "bleu-11": 0.43172726710008136,
        "bleu-1": 0.6345925576191396,
        "bleu-10": 0.6657888890647592,
        "bleu-17": 0.3965646758975438,
        "bleu-12": 0.516346807392006,
        "bleu-6": 0.6133632586844739,
        "bleu-18": 0.403855949814057,
        "bleu-15": 0.23735829904931866,
        "bleu-13": 0.44689254928795,
        "bleu-9": 0.6133632586844739,
        "bleu-4": 0.6657888890647592,
        "bleu-14": 0.5355644346324182,
        "bleu-5": 0.61912316998532,
        "bleu-19": 0.41756968575907455,
        "codebleu-3": 0.71302577736819,
        "codebleu-0": 0.7827153351479021,
        "codebleu-8": 0.6905506669603514,
        "codebleu-7": 0.7199549363570659,
        "codebleu-16": 0.7325850948729918,
        "codebleu-2": 0.6688870047800289,
        "codebleu-11": 0.693707791269927,
        "codebleu-1": 0.7675742613741463,
        "codebleu-10": 0.8512368534116196,
        "codebleu-17": 0.7363887801033489,
        "codebleu-12": 0.7067656918262551,
        "codebleu-6": 0.825970322728404,
        "codebleu-18": 0.6905506669603514,
        "codebleu-15": 0.6928827192630407,
        "codebleu-13": 0.7017449801745165,
        "codebleu-9": 0.825970322728404,
        "codebleu-4": 0.8512368534116196,
        "codebleu-14": 0.7300763628755722,
        "codebleu-5": 0.8214206660719335,
        "codebleu-19": 0.6302993946945957,
        "chrf-3": 0.5356669220138918,
        "chrf-0": 0.6536528150836712,
        "chrf-8": 0.521310187450383,
        "chrf-7": 0.6392009320207841,
        "chrf-16": 0.6516573423237948,
        "chrf-2": 0.4771568224101721,
        "chrf-11": 0.5153582155950344,
        "chrf-1": 0.6933330832897443,
        "chrf-10": 0.7167432195685004,
        "chrf-17": 0.5796801519201358,
        "chrf-12": 0.5844173354440709,
        "chrf-6": 0.701407185665185,
        "chrf-18": 0.521310187450383,
        "chrf-15": 0.4195889874724019,
        "chrf-13": 0.533546129132741,
        "chrf-9": 0.701407185665185,
        "chrf-4": 0.7167432195685004,
        "chrf-14": 0.5477483721609484,
        "chrf-5": 0.7046604402516856,
        "chrf-19": 0.4662794620061732,
        "rougel-3": 0.702127659574468,
        "rougel-0": 0.7799999999999999,
        "rougel-8": 0.6285714285714287,
        "rougel-7": 0.7888888888888889,
        "rougel-16": 0.693069306930693,
        "rougel-2": 0.6599999999999999,
        "rougel-11": 0.6567164179104478,
        "rougel-1": 0.8148148148148149,
        "rougel-10": 0.8571428571428572,
        "rougel-17": 0.5983606557377049,
        "rougel-12": 0.7113402061855669,
        "rougel-6": 0.8223350253807107,
        "rougel-18": 0.6285714285714287,
        "rougel-15": 0.5363984674329502,
        "rougel-13": 0.6666666666666665,
        "rougel-9": 0.8223350253807107,
        "rougel-4": 0.8571428571428572,
        "rougel-14": 0.7333333333333332,
        "rougel-5": 0.826530612244898,
        "rougel-19": 0.6559139784946236,
        "meteor-3": 0.6214780624685955,
        "meteor-0": 0.8420652069819919,
        "meteor-8": 0.6112965621017227,
        "meteor-7": 0.7336444193061841,
        "meteor-16": 0.634110858575963,
        "meteor-2": 0.650196656833825,
        "meteor-11": 0.6108114760366284,
        "meteor-1": 0.7642158600550712,
        "meteor-10": 0.870465694243684,
        "meteor-17": 0.5308631771523145,
        "meteor-12": 0.7088135639647981,
        "meteor-6": 0.859538784067086,
        "meteor-18": 0.6112965621017227,
        "meteor-15": 0.5123813471502591,
        "meteor-13": 0.644639890976607,
        "meteor-9": 0.859538784067086,
        "meteor-4": 0.870465694243684,
        "meteor-14": 0.6695827568153772,
        "meteor-5": 0.8604938271604938,
        "meteor-19": 0.6665544489526207,
        "ruby-3": 0.63,
        "ruby-0": 0.6696428571428572,
        "ruby-8": 0.5163934426229508,
        "ruby-7": 0.7065217391304348,
        "ruby-16": 0.5526315789473684,
        "ruby-2": 0.5625,
        "ruby-11": 0.5575221238938053,
        "ruby-1": 0.7326732673267327,
        "ruby-10": 0.801980198019802,
        "ruby-17": 0.4358974358974359,
        "ruby-12": 0.5943396226415094,
        "ruby-6": 0.7431192660550459,
        "ruby-18": 0.5163934426229508,
        "ruby-15": 0.4046242774566474,
        "ruby-13": 0.5727272727272728,
        "ruby-9": 0.7431192660550459,
        "ruby-4": 0.801980198019802,
        "ruby-14": 0.6847826086956521,
        "ruby-5": 0.7407407407407407,
        "ruby-19": 0.5204081632653061,
        "codebertscore_f1-3": 0.8896828889846802,
        "codebertscore_f3-3": 0.8990815877914429,
        "codebertscore_f1-0": 0.9136032462120056,
        "codebertscore_f3-0": 0.9209291934967041,
        "codebertscore_f1-8": 0.8852528929710388,
        "codebertscore_f3-8": 0.8965662121772766,
        "codebertscore_f1-7": 0.9233687520027161,
        "codebertscore_f3-7": 0.9265583157539368,
        "codebertscore_f1-16": 0.9008463621139526,
        "codebertscore_f3-16": 0.9062599539756775,
        "codebertscore_f1-2": 0.886039137840271,
        "codebertscore_f3-2": 0.9046444296836853,
        "codebertscore_f1-11": 0.8835428953170776,
        "codebertscore_f3-11": 0.9010258913040161,
        "codebertscore_f1-1": 0.9230397939682007,
        "codebertscore_f3-1": 0.9188019037246704,
        "codebertscore_f1-10": 0.9375147819519043,
        "codebertscore_f3-10": 0.9406247138977051,
        "codebertscore_f1-17": 0.8505778908729553,
        "codebertscore_f3-17": 0.8853209018707275,
        "codebertscore_f1-12": 0.8983718156814575,
        "codebertscore_f3-12": 0.9041542410850525,
        "codebertscore_f1-6": 0.9186713695526123,
        "codebertscore_f3-6": 0.9250421524047852,
        "codebertscore_f1-18": 0.8637972474098206,
        "codebertscore_f3-18": 0.8753814697265625,
        "codebertscore_f1-15": 0.8012097477912903,
        "codebertscore_f3-15": 0.8379439115524292,
        "codebertscore_f1-13": 0.8715246319770813,
        "codebertscore_f3-13": 0.8800433278083801,
        "codebertscore_f1-9": 0.9459463357925415,
        "codebertscore_f3-9": 0.9511629343032837,
        "codebertscore_f1-4": 0.9446521997451782,
        "codebertscore_f3-4": 0.9472050666809082,
        "codebertscore_f1-14": 0.8995642066001892,
        "codebertscore_f3-14": 0.9071570038795471,
        "codebertscore_f1-5": 0.9196378588676453,
        "codebertscore_f3-5": 0.9242725968360901,
        "codebertscore_f1-19": 0.8588476181030273,
        "codebertscore_f3-19": 0.8740374445915222,
        "codebertscore_s_f1-3": 0.8944043517112732,
        "codebertscore_s_f3-3": 0.9049800634384155,
        "codebertscore_s_f1-0": 0.9111313819885254,
        "codebertscore_s_f3-0": 0.9183282852172852,
        "codebertscore_s_f1-8": 0.8861593008041382,
        "codebertscore_s_f3-8": 0.8977908492088318,
        "codebertscore_s_f1-7": 0.9268707036972046,
        "codebertscore_s_f3-7": 0.9302617311477661,
        "codebertscore_s_f1-16": 0.9052255749702454,
        "codebertscore_s_f3-16": 0.9101645350456238,
        "codebertscore_s_f1-2": 0.8887494802474976,
        "codebertscore_s_f3-2": 0.9069633483886719,
        "codebertscore_s_f1-11": 0.8847721815109253,
        "codebertscore_s_f3-11": 0.9043121337890625,
        "codebertscore_s_f1-1": 0.9327147006988525,
        "codebertscore_s_f3-1": 0.9292263984680176,
        "codebertscore_s_f1-10": 0.9406641125679016,
        "codebertscore_s_f3-10": 0.9439672231674194,
        "codebertscore_s_f1-17": 0.869908332824707,
        "codebertscore_s_f3-17": 0.9024972319602966,
        "codebertscore_s_f1-12": 0.9029231667518616,
        "codebertscore_s_f3-12": 0.9089267253875732,
        "codebertscore_s_f1-6": 0.9282995462417603,
        "codebertscore_s_f3-6": 0.9342566132545471,
        "codebertscore_s_f1-18": 0.8753619194030762,
        "codebertscore_s_f3-18": 0.886216402053833,
        "codebertscore_s_f1-15": 0.8233586549758911,
        "codebertscore_s_f3-15": 0.8577762246131897,
        "codebertscore_s_f1-13": 0.8812645673751831,
        "codebertscore_s_f3-13": 0.8893495798110962,
        "codebertscore_s_f1-9": 0.9458014369010925,
        "codebertscore_s_f3-9": 0.9509806036949158,
        "codebertscore_s_f1-4": 0.9463408589363098,
        "codebertscore_s_f3-4": 0.9488831758499146,
        "codebertscore_s_f1-14": 0.90046626329422,
        "codebertscore_s_f3-14": 0.9093736410140991,
        "codebertscore_s_f1-5": 0.9298948645591736,
        "codebertscore_s_f3-5": 0.9348450303077698,
        "codebertscore_s_f1-19": 0.8697040677070618,
        "codebertscore_s_f3-19": 0.8833523988723755,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n",
        "snippet": [
            "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
        "task_id": "93",
        "3": "//turn message into array, split by letters\n\tvar messageArr = message.split('');\n\t//turn letters into ascii codes\n\tvar asciiArr = [];\n\tfor (var i = 0; i < messageArr.length; i++) {\n\t\tasciiArr.push(messageArr[i].charCodeAt(0));\n\t}\n\t//incrment ascii codes\n\tvar newAsciiArr = [];\n\tfor (var i = 0; i < asciiArr.length; i++) {\n\t\tnewAsciiArr.push(asciiArr[i] + 2);\n\t}\n\t//turn ascii codes into letters\n\tvar newMessageArr = [];\n\tfor (var i = 0; i < newAsciiArr.length; i++) {\n\t\tnewMessageArr.push(String.fromCharCode(newAsciiArr[i]));\n\t}\n\t//join letters into a message\n\tvar newMessage = newMessageArr.join('');\n\treturn newMessage;\n}\nvar a = encode('this is a message');",
        "grade-3": {
            "execution": 0
        },
        "0": "let encMessage = '';\n\tconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\tfor (const letter of message) {\n\t\tif (letter === letter.toUpperCase()) {\n\t\t\tencMessage += letter.toLowerCase();\n\t\t} else {\n\t\t\tencMessage += letter.toUpperCase();\n\t\t}\n\t}\n\tencMessage = encMessage.split('');\n\tfor (let i = 0; i < encMessage.length; i++) {\n\t\tif (vowels.includes(encMessage[i])) {\n\t\t\tencMessage[i] = (encMessage[i] == 'u') ? 'a' : String.fromCharCode(encMessage[i].charCodeAt(0) + 2);\n\t\t}\n\t}\n\treturn encMessage.join('');\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowel = \"aeiou\";\n    var result = \"\";\n    //index\n    var a = 0;\n    var b = 0;\n    var newIndex = 0;\n    var i = 0;\n    //loop\n    for(i = 0; i < message.length; i++){\n        a = alphabet.indexOf(message[i]);\n        b = vowel.indexOf(message[i]);\n        //checks if lowercase\n        if(a >= 0 && a < alphabet.length){\n            if(message[i] === message[i].toUpperCase()){\n                //adds 2 to index, changes to lowercase\n                newIndex = a + 2;\n                if(newIndex >= alphabet.length){\n                    newIndex = newIndex - alphabet.length;\n                }\n                result += alphabet[newIndex].toUpperCase();\n            }else{\n                //adds 2 to index\n                newIndex = a + 2;\n                if(newIndex >= alphabet.length){\n                    newIndex = newIndex - alphabet.length;\n                }\n                result += alphabet[newIndex];\n            }\n        }\n        //checks if vowel\n        else if(b >= 0 && b < vowel.length){\n            if(message[i] === message[i].toUpperCase()){\n                //adds 2 to index, changes to lowercase\n                newIndex = b + 2;\n                if(newIndex >= vowel.length){\n                    newIndex = newIndex - vowel.length;\n                }\n                result += vowel[newIndex].toUpperCase();\n            }else{\n                //adds 2 to index\n                newIndex = b + 2;\n                if(newIndex >= vowel.length){\n                    newIndex = newIndex - vowel.length;\n                }\n                result += vowel[newIndex];\n            }\n        }\n        //if neither add the original letter\n        else{\n            result += message[i];\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encoded = [];\n    for (var i = 0; i < message.length; i++){\n        if (vowels.indexOf(message[i]) != -1){\n            encoded.push(vowels[(vowels.indexOf(message[i]) + 2) % 5]);\n        } else if (message[i] == message[i].toUpperCase()){\n            encoded.push(message[i].toLowerCase());\n        } else {\n            encoded.push(message[i].toUpperCase());\n        }\n    }\n    return encoded.join('');\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n    var letters = [];\n    for (var i = 0; i < message.length; i++){\n        letters.push(message[i]);\n    }\n    for (var j = 0; j < letters.length; j++){\n        var shift = letters[j].charCodeAt(0);\n        if (shift >= 65 && shift <= 90){\n            var newShift = shift + 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n        else if (shift >= 97 && shift <= 122){\n            newShift = shift - 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n        if (vowels.includes(letters[j])){\n            if (letters[j] === 'u'){\n                letters[j] = 'a';\n            }\n            else {\n                var newVowel = letters[j].charCodeAt(0) + 2;\n                letters[j] = String.fromCharCode(newVowel);\n            }\n        }\n    }\n    return letters.join('');\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var encode = {\n\t\ta: \"c\",\n\t\te: \"g\",\n\t\ti: \"k\",\n\t\to: \"q\",\n\t\tu: \"w\",\n\t};\n\tvar result = [];\n\tfor (var i = 0; i < message.length; i++) {\n\t\tvar letter = message[i];\n\t\tif (letter.toUpperCase() === letter){\n\t\t\tletter = letter.toLowerCase();\n\t\t} else {\n\t\t\tletter = letter.toUpperCase();\n\t\t}\n\t\tif (encode[letter]){\n\t\t\tresult.push(encode[letter]);\n\t\t} else {\n\t\t\tresult.push(letter);\n\t\t}\n\t}\n\treturn result.join(\"\");\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var encodedMessage = '';\n  for (var i = 0; i < message.length; i++) {\n    var char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (vowels.indexOf(char) > -1) {\n      if (char === 'u') {\n        char = 'a';\n      } else {\n        char = vowels[vowels.indexOf(char) + 1];\n      }\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var output=\"\";\n\tvar vowels = ['a','e','i','o','u'];\n\tfor(var i=0;i<message.length;i++){\n\t\tvar letter = message[i];\n\t\tvar n = message.charCodeAt(i);\n\t\t//console.log(n);\n\t\tif(n >96 && n<123){\n\t\t\tn = n-32;\n\t\t\t//console.log(n);\n\t\t\toutput += String.fromCharCode(n);\n\t\t}else if(n>64 && n<91){\n\t\t\tn = n+32;\n\t\t\toutput += String.fromCharCode(n);\n\t\t}else{\n\t\t\toutput += message[i];\n\t\t}\n\t}\n\tconsole.log(output);\n\tvar output2=\"\";\n\tfor(var i=0;i<output.length;i++){\n\t\tvar letter = output[i];\n\t\tvar n = output.charCodeAt(i);\n\t\t//console.log(n);\n\t\tif(n>96 && n<123){\n\t\t\tif(n==97){\n\t\t\t\tn=99;\n\t\t\t}else if(n==101){\n\t\t\t\tn=103;\n\t\t\t}else if(n==105){\n\t\t\t\tn=107;\n\t\t\t}else if(n==111){\n\t\t\t\tn=113;\n\t\t\t}else if(n==117){\n\t\t\t\tn=119;\n\t\t\t}else{\n\t\t\t\tn+=2;\n\t\t\t}\n\t\t\toutput2 += String.fromCharCode(n);\n\t\t}else{\n\t\t\toutput2 += output[i];\n\t\t}\n\t}\n\tconsole.log(output2);\n}\nencode('test');\nencode('This is a message');\nencode('Hello World');",
        "grade-1": {
            "execution": 0
        },
        "10": "let alpha = 'abcdefghijklmnopqrstuvwxyz'\n    let result = message.split('').map(function(letter){\n        if(letter.toLowerCase() === letter){\n            return alpha[(alpha.indexOf(letter) + 2) % 26]\n        }\n        else{\n            return alpha[(alpha.indexOf(letter.toLowerCase()) + 2) % 26].toUpperCase()\n        }\n    })\n    return result.join('')\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "// your code here\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "message = message.toLowerCase();\n    var result = \"\";\n    for(var i = 0; i < message.length; i++){\n        if(message[i]==\"a\"){\n            result += \"c\";\n        }else if(message[i]==\"e\"){\n            result += \"g\";\n        }else if(message[i]==\"i\"){\n            result += \"k\";\n        }else if(message[i]==\"o\"){\n            result += \"q\";\n        }else if(message[i]==\"u\"){\n            result += \"y\";\n        }else if(message[i]==\"t\"){\n            result += \"G\";\n        }else if(message[i]==\"h\"){\n            result += \"K\";\n        }else if(message[i]==\"s\"){\n            result += \"C\";\n        }else if(message[i]==\"m\"){\n            result += \"M\";\n        }else if(message[i]==\"a\"){\n            result += \"C\";\n        }else if(message[i]==\"g\"){\n            result += \"S\";\n        }else{\n            result += message[i];\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var output = '';\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        if(letter === letter.toUpperCase()){\n            output += letter.toLowerCase();\n        } else {\n            output += letter.toUpperCase();\n        }\n    }\n    return output;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encoded = \"\";\n    // if (typeof message != \"string\"){\n    //     throw \"Value given was not a string\";\n    // }\n    for (var i = 0; i < message.length; i++){\n        if (vowels.indexOf(message[i].toLowerCase()) !== -1){\n            if (message[i] === message[i].toUpperCase()){\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2].toUpperCase();\n            } else {\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2];\n            }\n        } else if (message[i] === message[i].toUpperCase()){\n            encoded += message[i].toLowerCase();\n        } else {\n            encoded += message[i].toUpperCase();\n        }\n    }\n    return encoded;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "vowels = {\n\t\ta: 'c',\n\t\te: 'g',\n\t\ti: 'k',\n\t\to: 'q',\n\t\tu: 'y'\n\t}\n\tvar message = message.toLowerCase();\n\tvar result = '';\n\tfor (var i = 0; i < message.length; i++) {\n\t\tif (vowels[message[i]]){\n\t\t\tresult += vowels[message[i]];\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tconsole.log(result.toUpperCase());\n}\nencode('This is a message');",
        "grade-15": {
            "execution": 0
        },
        "13": "var results = '';\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (var i = 0; i < message.length; i++) {\n    var char = message[i];\n    if (alphabet.indexOf(char.toLowerCase()) === -1) {\n      results += char;\n    } else if (char === char.toUpperCase()) {\n      results += alphabet[alphabet.indexOf(char.toLowerCase()) + 2].toUpperCase();\n    } else {\n      results += alphabet[alphabet.indexOf(char) + 2];\n    }\n  }\n  return results;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var vowels = 'aeiouAEIOU';\n    var chars = message.split('');\n    for(var i = 0; i < chars.length; i++){\n        var charCode = chars[i].charCodeAt(0);\n        var index = vowels.indexOf(chars[i]);\n        if(index > -1){\n            if(index > 3){\n                charCode += 2;\n            } else {\n                charCode += 10;\n            }\n        } else {\n            if(charCode > 90){\n                charCode -= 32;\n            } else {\n                charCode += 32;\n            }\n        }\n        chars[i] = String.fromCharCode(charCode);\n    }\n    return chars.join('');\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var code = \"\";\n    var codeList = {'A':'C', 'E':'G', 'I':'K', 'O':'Q', 'U':'W', 'Y':'A',\n                    'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w', 'y':'a'};\n    for (var i = 0; i < message.length; i++){\n        if (message[i] in codeList){\n            code += codeList[message[i]];\n        } else {\n            code += message[i];\n        }\n    }\n    return code;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var new_mess = message.split(\" \");\n    var final_mess = [];\n    var alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n    for(var i = 0; i < new_mess.length; i++){\n      var new_word = new_mess[i].split(\"\");\n      var final_word = [];\n      for(var j = 0; j < new_word.length; j++){\n        if(new_word[j] === new_word[j].toUpperCase()){\n          var low = new_word[j].toLowerCase();\n          var index = alphabet.indexOf(low);\n          if(index === alphabet.length-2){\n            var new_letter = alphabet[0];\n            final_word.push(new_letter.toUpperCase());\n          }else if(index === alphabet.length-1){\n            var new_letter = alphabet[1];\n            final_word.push(new_letter.toUpperCase());\n          }else{\n            var new_letter = alphabet[index+2];\n            final_word.push(new_letter.toUpperCase());\n          }\n        }else{\n          var low = new_word[j].toLowerCase();\n          var index = alphabet.indexOf(low);\n          if(index === alphabet.length-2){\n            var new_letter = alphabet[0];\n            final_word.push(new_letter);\n          }else if(index === alphabet.length-1){\n            var new_letter = alphabet[1];\n            final_word.push(new_letter);\n          }else{\n            var new_letter = alphabet[index+2];\n            final_word.push(new_letter);\n          }\n        }\n      }\n      final_mess.push(final_word.join(\"\"));\n    }\n    return final_mess.join(\" \");\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var vowels = ['a','e','i','o','u'];\n\tvar encoded_message = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar current_letter = message[i];\n\t\tvar index_of_vowel = vowels.indexOf(current_letter.toLowerCase());\n\t\tif(index_of_vowel != -1){\n\t\t\tvar new_index = index_of_vowel + 2;\n\t\t\tif(new_index > 4){\n\t\t\t\tnew_index = new_index - 5;\n\t\t\t}\n\t\t\tif(current_letter == current_letter.toUpperCase()){\n\t\t\t\tencoded_message += vowels[new_index].toUpperCase();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tencoded_message += vowels[new_index];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(current_letter == current_letter.toUpperCase()){\n\t\t\t\tencoded_message += current_letter.toLowerCase();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tencoded_message += current_letter.toUpperCase();\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded_message;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var alphabet_array = alphabet.split('');\n    var encoded_message = '';\n    var message_array = message.split('');\n    var vowels = 'aeiou'.split('');\n    var alphabet_position = 0;\n    var message_position = 0;\n    for (var i = 0; i < message_array.length; i++){\n        alphabet_position = alphabet_array.indexOf(message_array[i]);\n        message_position = vowels.indexOf(message_array[i]);\n        if (message_array[i] === message_array[i].toUpperCase()){\n            alphabet_position = alphabet_array.indexOf(message_array[i].toLowerCase());\n            if (message_position === -1){\n                encoded_message += alphabet_array[alphabet_position].toUpperCase();\n            } else {\n                encoded_message += vowels[message_position + 2].toUpperCase();\n            }\n        } else {\n            if (message_position === -1){\n                encoded_message += alphabet_array[alphabet_position];\n            } else {\n                encoded_message += vowels[message_position + 2];\n            }\n        }\n    }\n    return encoded_message;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.13232803895897438,
        "bleu-0": 0.18343914509463752,
        "bleu-8": 0.07791340214693762,
        "bleu-7": 0.1689879776576789,
        "bleu-16": 0.1532684305985815,
        "bleu-2": 0.16972909112415696,
        "bleu-11": 0.1761675844484597,
        "bleu-1": 0.12730014765801317,
        "bleu-10": 0.017661020388181948,
        "bleu-17": 3.619880462533079e-12,
        "bleu-12": 0.10863073185966794,
        "bleu-6": 0.1292357641240483,
        "bleu-18": 0.12772715843747448,
        "bleu-15": 0.16111182240728117,
        "bleu-13": 0.1944326802740596,
        "bleu-9": 0.2245216580383554,
        "bleu-4": 0.13856119867884703,
        "bleu-14": 0.0566646413643604,
        "bleu-5": 0.14942014993876113,
        "bleu-19": 0.10656546203282191,
        "codebleu-3": 0.39315296221700735,
        "codebleu-0": 0.43114216949237266,
        "codebleu-8": 0.5153897021368828,
        "codebleu-7": 0.4188766876254003,
        "codebleu-16": 0.4981375981518131,
        "codebleu-2": 0.4064659595254306,
        "codebleu-11": 0.4519280789964086,
        "codebleu-1": 0.5519295173371601,
        "codebleu-10": 0.2853159215327706,
        "codebleu-17": 0.01418439716316256,
        "codebleu-12": 0.4652141495039583,
        "codebleu-6": 0.30579268606776683,
        "codebleu-18": 0.45992231099573966,
        "codebleu-15": 0.3789488623045451,
        "codebleu-13": 0.44557226314097115,
        "codebleu-9": 0.4994349415639115,
        "codebleu-4": 0.3011117244021582,
        "codebleu-14": 0.4815962085088374,
        "codebleu-5": 0.4751177270373152,
        "codebleu-19": 0.46559117839986863,
        "chrf-3": 0.25970401185243747,
        "chrf-0": 0.3244444938390746,
        "chrf-8": 0.18905719873718907,
        "chrf-7": 0.24865936746417144,
        "chrf-16": 0.32491747939260773,
        "chrf-2": 0.2541631691923415,
        "chrf-11": 0.2516275762943097,
        "chrf-1": 0.32243723436721394,
        "chrf-10": 0.16208664886114035,
        "chrf-17": 0.015513146017921182,
        "chrf-12": 0.22266578519761404,
        "chrf-6": 0.26882853757884373,
        "chrf-18": 0.23616316868934892,
        "chrf-15": 0.22909844816278638,
        "chrf-13": 0.2642493510138293,
        "chrf-9": 0.3104521061959764,
        "chrf-4": 0.2241323535461757,
        "chrf-14": 0.1628151834398544,
        "chrf-5": 0.21756353711142984,
        "chrf-19": 0.19066705243867166,
        "rougel-3": 0.2880434782608695,
        "rougel-0": 0.24999999999999994,
        "rougel-8": 0.25,
        "rougel-7": 0.2838709677419355,
        "rougel-16": 0.3523573200992556,
        "rougel-2": 0.31756756756756754,
        "rougel-11": 0.343042071197411,
        "rougel-1": 0.3474903474903475,
        "rougel-10": 0.2570281124497992,
        "rougel-17": 0.012903225806451615,
        "rougel-12": 0.3318181818181818,
        "rougel-6": 0.3876651982378855,
        "rougel-18": 0.28571428571428575,
        "rougel-15": 0.27536231884057977,
        "rougel-13": 0.3929824561403509,
        "rougel-9": 0.3920265780730897,
        "rougel-4": 0.2285714285714286,
        "rougel-14": 0.22075782537067545,
        "rougel-5": 0.3508771929824561,
        "rougel-19": 0.28723404255319146,
        "meteor-3": 0.25871237893220206,
        "meteor-0": 0.30234732263502107,
        "meteor-8": 0.310236408210073,
        "meteor-7": 0.24014749042093533,
        "meteor-16": 0.3531248781430613,
        "meteor-2": 0.22227294943570602,
        "meteor-11": 0.2895150349593927,
        "meteor-1": 0.39573268272541706,
        "meteor-10": 0.158587786259542,
        "meteor-17": 0.007423904974016333,
        "meteor-12": 0.3196023642856222,
        "meteor-6": 0.25904006671689944,
        "meteor-18": 0.3027726242011956,
        "meteor-15": 0.22344659440852585,
        "meteor-13": 0.2525291382465015,
        "meteor-9": 0.3247589458337148,
        "meteor-4": 0.1979330616900744,
        "meteor-14": 0.28142948409106916,
        "meteor-5": 0.3053368544288641,
        "meteor-19": 0.2920867346938776,
        "ruby-3": 0.19634703196347036,
        "ruby-0": 0.13903743315508021,
        "ruby-8": 0.15384615384615385,
        "ruby-7": 0.11180124223602483,
        "ruby-16": 0.25984251968503935,
        "ruby-2": 0.0738255033557047,
        "ruby-11": 0.13749999999999996,
        "ruby-1": 0.24119241192411922,
        "ruby-10": 0.1610738255033557,
        "ruby-17": 0.006711409395973145,
        "ruby-12": 0.23367697594501713,
        "ruby-6": 0.24832214765100669,
        "ruby-18": 0.2016460905349794,
        "ruby-15": 0.08053691275167785,
        "ruby-13": 0.2348993288590604,
        "ruby-9": 0.1842105263157895,
        "ruby-4": 0.07831325301204817,
        "ruby-14": 0.1353711790393013,
        "ruby-5": 0.2538860103626943,
        "ruby-19": 0.18942731277533043,
        "codebertscore_f1-3": 0.7305276989936829,
        "codebertscore_f3-3": 0.7520382404327393,
        "codebertscore_f1-0": 0.7642767429351807,
        "codebertscore_f3-0": 0.7645688652992249,
        "codebertscore_f1-8": 0.6727737784385681,
        "codebertscore_f3-8": 0.7013102769851685,
        "codebertscore_f1-7": 0.7384439706802368,
        "codebertscore_f3-7": 0.7329823970794678,
        "codebertscore_f1-16": 0.760526716709137,
        "codebertscore_f3-16": 0.7798933982849121,
        "codebertscore_f1-2": 0.7438828349113464,
        "codebertscore_f3-2": 0.7408202290534973,
        "codebertscore_f1-11": 0.7459076642990112,
        "codebertscore_f3-11": 0.7502962946891785,
        "codebertscore_f1-1": 0.7796428799629211,
        "codebertscore_f3-1": 0.8152151703834534,
        "codebertscore_f1-10": 0.6947351694107056,
        "codebertscore_f3-10": 0.7089033722877502,
        "codebertscore_f1-17": 0.5853923559188843,
        "codebertscore_f3-17": 0.5518979430198669,
        "codebertscore_f1-12": 0.7278112769126892,
        "codebertscore_f3-12": 0.7242466807365417,
        "codebertscore_f1-6": 0.7794598937034607,
        "codebertscore_f3-6": 0.749380886554718,
        "codebertscore_f1-18": 0.6964733004570007,
        "codebertscore_f3-18": 0.7080281376838684,
        "codebertscore_f1-15": 0.7311412692070007,
        "codebertscore_f3-15": 0.7234385013580322,
        "codebertscore_f1-13": 0.7428045868873596,
        "codebertscore_f3-13": 0.7580670714378357,
        "codebertscore_f1-9": 0.7507378458976746,
        "codebertscore_f3-9": 0.7569625973701477,
        "codebertscore_f1-4": 0.7283725142478943,
        "codebertscore_f3-4": 0.718239963054657,
        "codebertscore_f1-14": 0.6672083139419556,
        "codebertscore_f3-14": 0.6941601037979126,
        "codebertscore_f1-5": 0.7018669247627258,
        "codebertscore_f3-5": 0.7199665904045105,
        "codebertscore_f1-19": 0.6782171726226807,
        "codebertscore_f3-19": 0.6998767852783203,
        "codebertscore_s_f1-3": 0.7319111227989197,
        "codebertscore_s_f3-3": 0.753931999206543,
        "codebertscore_s_f1-0": 0.7648889422416687,
        "codebertscore_s_f3-0": 0.7643119692802429,
        "codebertscore_s_f1-8": 0.7010305523872375,
        "codebertscore_s_f3-8": 0.7189425230026245,
        "codebertscore_s_f1-7": 0.7386044859886169,
        "codebertscore_s_f3-7": 0.7331226468086243,
        "codebertscore_s_f1-16": 0.7756461501121521,
        "codebertscore_s_f3-16": 0.7839324474334717,
        "codebertscore_s_f1-2": 0.742595374584198,
        "codebertscore_s_f3-2": 0.739368200302124,
        "codebertscore_s_f1-11": 0.7449395060539246,
        "codebertscore_s_f3-11": 0.7485196590423584,
        "codebertscore_s_f1-1": 0.8022081255912781,
        "codebertscore_s_f3-1": 0.8288733959197998,
        "codebertscore_s_f1-10": 0.6940832734107971,
        "codebertscore_s_f3-10": 0.7036256790161133,
        "codebertscore_s_f1-17": 0.5685763359069824,
        "codebertscore_s_f3-17": 0.5282836556434631,
        "codebertscore_s_f1-12": 0.7445592284202576,
        "codebertscore_s_f3-12": 0.7267656326293945,
        "codebertscore_s_f1-6": 0.7770654559135437,
        "codebertscore_s_f3-6": 0.7474888563156128,
        "codebertscore_s_f1-18": 0.7194036245346069,
        "codebertscore_s_f3-18": 0.722827672958374,
        "codebertscore_s_f1-15": 0.7343829274177551,
        "codebertscore_s_f3-15": 0.7284520268440247,
        "codebertscore_s_f1-13": 0.7435562014579773,
        "codebertscore_s_f3-13": 0.7555315494537354,
        "codebertscore_s_f1-9": 0.7658339738845825,
        "codebertscore_s_f3-9": 0.7680212259292603,
        "codebertscore_s_f1-4": 0.7308948636054993,
        "codebertscore_s_f3-4": 0.7186816930770874,
        "codebertscore_s_f1-14": 0.6977075338363647,
        "codebertscore_s_f3-14": 0.71475750207901,
        "codebertscore_s_f1-5": 0.7114245891571045,
        "codebertscore_s_f3-5": 0.7232052683830261,
        "codebertscore_s_f1-19": 0.7006369829177856,
        "codebertscore_s_f3-19": 0.7119836807250977,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n",
        "snippet": [
            "  return Math.pow(n, 2);\n}\n\n"
        ],
        "simplified": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
        "task_id": "41",
        "3": "var L = [];\n\tvar R = [];\n\tvar l = 1;\n\tvar r = 1;\n\tvar collisions = 0;\n\tvar max_index = n;\n\tfor(var i = 0; i < n; i++){\n\t\tL.push(l);\n\t\tR.push(r);\n\t\tl++;\n\t\tr++;\n\t}\n\tfor(var i = 0; i < n; i++){\n\t\tif(L[i] == R[max_index]){\n\t\t\tcollisions++;\n\t\t\tmax_index--;\n\t\t}\n\t}\n\treturn collisions;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return (n*(n-1))/2;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "//loop through the left to right cars and the right to left cars\n\t//see if the left car is farther than the right car\n\t//count the number of times that happens\n\t//return the count\n\tlet count = 0;\n\tfor(let i = 0; i < n; i++){\n\t\tfor(let j = 0; j < n; j++){\n\t\t\tif(i > j){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return n * (n - 1);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//TODO\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return n*(n-1)/2;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return Math.floor(Math.pow(n,2)/2);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return n * (n - 1) / 2;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return n*(n-1);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var carsLeft = Array.apply(null, {length: n}).map(Number.call, Number)\n    var carsRight = Array.apply(null, {length: n}).map(Number.call, Number)\n    var collisions = 0\n    for(var i = 0; i < n; i++){\n        if(carsLeft[i] < carsRight[i]){\n            collisions++\n        }\n    }\n    return collisions\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let A = [...Array(n)].map(e => Math.random());\n    let B = [...Array(n)].map(e => Math.random());\n    let collision_count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            if(A[i] > B[j]){\n                collision_count++;\n            }\n        }\n    }\n    return collision_count;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return car_race_collision(n, n-1);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return n * (n - 1) / 2;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var counter = 0;\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n            counter++;\n        }\n    }\n    return counter;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return 0;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//YOUR CODE GOES HERE\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "}",
        "grade-14": {
            "execution": 0
        },
        "5": "let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (j !== i){\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//We are going to implement a sorting algorithm in which the\n    //left to right cars are sorted in increasing order.\n    //Then the right to left cars are sorted in decreasing order.\n    //The number of collisions is equal to the sum of the number of\n    //keys which are in the wrong place in the left-to-right array, plus\n    //the number of keys which are in the wrong place in the right-to-left array.\n    var i, collis = 0;\n    var left_to_right = new Array(n);\n    var right_to_left = new Array(n);\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = n - i;\n        right_to_left[i] = i + 1;\n    }\n    //Only a fraction of the cars are in an incorrect location\n    //to the left of their actual location.\n    for (i = 0; i < n / 2; i++) {\n        //I will now swap left_to_right[i] with a random car to the right of left_to_right[i].\n        var i_target = i + 1 + Math.floor(Math.random() * (n - i - 1));\n        //i_target has to be in the range [i+1, n-1].\n        //i_target must be != i.\n        var tmp = left_to_right[i];\n        left_to_right[i] = left_to_right[i_target];\n        left_to_right[i_target] = tmp;\n    }\n    //Now, left_to_right[i] is in the wrong place for exactly i of the cars.\n    for (i = 0; i < n; i++) {\n        //If left_to_right[i] is not in the right place,\n        //then the car that's supposed to be in left_to_right[i]\n        //must be in the wrong place in right_to_left.\n        //Therefore, in the following \"if\" condition, we check if\n        //left_to_right[i] is not in the right place.\n        if (left_to_right[i] !=",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.010134089202099994,
        "bleu-0": 0.09238430210261096,
        "bleu-8": 4.539992976248487e-05,
        "bleu-7": 0.00964422099951466,
        "bleu-16": 0.1860045401920258,
        "bleu-2": 0.027757915716335905,
        "bleu-11": 0.11016798394984653,
        "bleu-1": 0.533290005060343,
        "bleu-10": 0.11016798394984653,
        "bleu-17": 0.1860045401920258,
        "bleu-12": 0.006498884727528903,
        "bleu-6": 0.012915865638799918,
        "bleu-18": 0.24384183193426087,
        "bleu-15": 0.11016798394984653,
        "bleu-13": 0.02045903267148538,
        "bleu-9": 0.06143836690366869,
        "bleu-4": 0.03708659055657029,
        "bleu-14": 4.539992976248487e-05,
        "bleu-5": 0.016474108593061365,
        "bleu-19": 0.0035829786569015936,
        "codebleu-3": 0.5143790849673202,
        "codebleu-0": 0.4751633986928105,
        "codebleu-8": 0.07843187699268363,
        "codebleu-7": 0.4640522875816993,
        "codebleu-16": 0.4534786673634726,
        "codebleu-2": 0.158793566691933,
        "codebleu-11": 0.4751633986928105,
        "codebleu-1": 0.8437836282943708,
        "codebleu-10": 0.4751633986928105,
        "codebleu-17": 0.4534786673634726,
        "codebleu-12": 0.5647058823529412,
        "codebleu-6": 0.5647058823529412,
        "codebleu-18": 0.55359477124183,
        "codebleu-15": 0.4751633986928105,
        "codebleu-13": 0.4640522875816993,
        "codebleu-9": 0.20959418252980586,
        "codebleu-4": 0.20235307717263523,
        "codebleu-14": 0.07843187699268363,
        "codebleu-5": 0.4640522875816993,
        "codebleu-19": 0.5313725490196078,
        "chrf-3": 0.1026655673190208,
        "chrf-0": 0.2516300135158335,
        "chrf-8": 0.0588235294117647,
        "chrf-7": 0.09567202183372338,
        "chrf-16": 0.2724966102583361,
        "chrf-2": 0.009157509157509158,
        "chrf-11": 0.25703105746605637,
        "chrf-1": 0.8253885747247284,
        "chrf-10": 0.25703105746605637,
        "chrf-17": 0.2724966102583361,
        "chrf-12": 0.09648972101503825,
        "chrf-6": 0.1377486252744228,
        "chrf-18": 0.2642030642923133,
        "chrf-15": 0.25703105746605637,
        "chrf-13": 0.15871733822539486,
        "chrf-9": 0.23621592460281116,
        "chrf-4": 0.008090614886731391,
        "chrf-14": 0.0588235294117647,
        "chrf-5": 0.13553383171162953,
        "chrf-19": 0.027385909845041773,
        "rougel-3": 0.09523809523809522,
        "rougel-0": 0.4799999999999999,
        "rougel-8": 0.16666666666666669,
        "rougel-7": 0.11009174311926606,
        "rougel-16": 0.5714285714285713,
        "rougel-2": 0.13333333333333333,
        "rougel-11": 0.5217391304347826,
        "rougel-1": 0.7586206896551725,
        "rougel-10": 0.5217391304347826,
        "rougel-17": 0.5714285714285713,
        "rougel-12": 0.1346153846153846,
        "rougel-6": 0.11475409836065573,
        "rougel-18": 0.6363636363636364,
        "rougel-15": 0.5217391304347826,
        "rougel-13": 0.17241379310344826,
        "rougel-9": 0.39999999999999997,
        "rougel-4": 0.1111111111111111,
        "rougel-14": 0.16666666666666669,
        "rougel-5": 0.14492753623188406,
        "rougel-19": 0.03341288782816229,
        "meteor-3": 0.22410833492275417,
        "meteor-0": 0.5065920173379086,
        "meteor-8": 0.05,
        "meteor-7": 0.2164410603496898,
        "meteor-16": 0.5160550458715595,
        "meteor-2": 0.04854368932038835,
        "meteor-11": 0.5157198014340871,
        "meteor-1": 0.9306350215441124,
        "meteor-10": 0.5157198014340871,
        "meteor-17": 0.5160550458715595,
        "meteor-12": 0.20833333333333334,
        "meteor-6": 0.3005952380952382,
        "meteor-18": 0.520408163265306,
        "meteor-15": 0.5157198014340871,
        "meteor-13": 0.29204718417047176,
        "meteor-9": 0.24811218985976266,
        "meteor-4": 0.04716981132075472,
        "meteor-14": 0.05,
        "meteor-5": 0.271585279547063,
        "meteor-19": 0.08875739644970417,
        "ruby-3": 0.05217391304347829,
        "ruby-0": 0.4285714285714286,
        "ruby-8": 0.09090909090909094,
        "ruby-7": 0.061224489795918324,
        "ruby-16": 0.5454545454545454,
        "ruby-2": 0.09090909090909094,
        "ruby-11": 0.41666666666666663,
        "ruby-1": 0.6111111111111112,
        "ruby-10": 0.41666666666666663,
        "ruby-17": 0.5454545454545454,
        "ruby-12": 0.07526881720430112,
        "ruby-6": 0.06306306306306309,
        "ruby-18": 0.4545454545454546,
        "ruby-15": 0.41666666666666663,
        "ruby-13": 0.1063829787234043,
        "ruby-9": 0.2727272727272727,
        "ruby-4": 0.09090909090909094,
        "ruby-14": 0.09090909090909094,
        "ruby-5": 0.08620689655172409,
        "ruby-19": 0.01715686274509809,
        "codebertscore_f1-3": 0.6220635175704956,
        "codebertscore_f3-3": 0.6479569673538208,
        "codebertscore_f1-0": 0.8182631134986877,
        "codebertscore_f3-0": 0.8336789011955261,
        "codebertscore_f1-8": 0.0,
        "codebertscore_f3-8": 0.0,
        "codebertscore_f1-7": 0.6366138458251953,
        "codebertscore_f3-7": 0.670548677444458,
        "codebertscore_f1-16": 0.8185786008834839,
        "codebertscore_f3-16": 0.8149606585502625,
        "codebertscore_f1-2": 0.5912569761276245,
        "codebertscore_f3-2": 0.5921474695205688,
        "codebertscore_f1-11": 0.8161730170249939,
        "codebertscore_f3-11": 0.8330041766166687,
        "codebertscore_f1-1": 0.9279808402061462,
        "codebertscore_f3-1": 0.9544072151184082,
        "codebertscore_f1-10": 0.8290328979492188,
        "codebertscore_f3-10": 0.8407991528511047,
        "codebertscore_f1-17": 0.8061830997467041,
        "codebertscore_f3-17": 0.8076267838478088,
        "codebertscore_f1-12": 0.6646994948387146,
        "codebertscore_f3-12": 0.6951799392700195,
        "codebertscore_f1-6": 0.6593066453933716,
        "codebertscore_f3-6": 0.6995081901550293,
        "codebertscore_f1-18": 0.8134821653366089,
        "codebertscore_f3-18": 0.8216607570648193,
        "codebertscore_f1-15": 0.8290328979492188,
        "codebertscore_f3-15": 0.8407992720603943,
        "codebertscore_f1-13": 0.6877022981643677,
        "codebertscore_f3-13": 0.7085966467857361,
        "codebertscore_f1-9": 0.7856701612472534,
        "codebertscore_f3-9": 0.7427436113357544,
        "codebertscore_f1-4": 0.6368943452835083,
        "codebertscore_f3-4": 0.642041027545929,
        "codebertscore_f1-14": 0.0,
        "codebertscore_f3-14": 0.0,
        "codebertscore_f1-5": 0.6611246466636658,
        "codebertscore_f3-5": 0.6834025382995605,
        "codebertscore_f1-19": 0.537418782711029,
        "codebertscore_f3-19": 0.5985140800476074,
        "codebertscore_s_f1-3": 0.6011650562286377,
        "codebertscore_s_f3-3": 0.6322904825210571,
        "codebertscore_s_f1-0": 0.7868286967277527,
        "codebertscore_s_f3-0": 0.8013101816177368,
        "codebertscore_s_f1-8": 0.0,
        "codebertscore_s_f3-8": 0.0,
        "codebertscore_s_f1-7": 0.6139973998069763,
        "codebertscore_s_f3-7": 0.647922158241272,
        "codebertscore_s_f1-16": 0.7610588669776917,
        "codebertscore_s_f3-16": 0.7529899477958679,
        "codebertscore_s_f1-2": 0.5753836631774902,
        "codebertscore_s_f3-2": 0.5687964558601379,
        "codebertscore_s_f1-11": 0.7850887775421143,
        "codebertscore_s_f3-11": 0.7972262501716614,
        "codebertscore_s_f1-1": 0.9294708371162415,
        "codebertscore_s_f3-1": 0.9548001289367676,
        "codebertscore_s_f1-10": 0.7841551899909973,
        "codebertscore_s_f3-10": 0.7959204316139221,
        "codebertscore_s_f1-17": 0.7577883005142212,
        "codebertscore_s_f3-17": 0.7492321133613586,
        "codebertscore_s_f1-12": 0.6459140181541443,
        "codebertscore_s_f3-12": 0.686728298664093,
        "codebertscore_s_f1-6": 0.6536294221878052,
        "codebertscore_s_f3-6": 0.710845410823822,
        "codebertscore_s_f1-18": 0.7272449135780334,
        "codebertscore_s_f3-18": 0.7297289967536926,
        "codebertscore_s_f1-15": 0.7841551899909973,
        "codebertscore_s_f3-15": 0.7959204316139221,
        "codebertscore_s_f1-13": 0.6771807074546814,
        "codebertscore_s_f3-13": 0.7015453577041626,
        "codebertscore_s_f1-9": 0.713423490524292,
        "codebertscore_s_f3-9": 0.6680163145065308,
        "codebertscore_s_f1-4": 0.585125744342804,
        "codebertscore_s_f3-4": 0.5831397175788879,
        "codebertscore_s_f1-14": 0.0,
        "codebertscore_s_f3-14": 0.0,
        "codebertscore_s_f1-5": 0.6527931094169617,
        "codebertscore_s_f3-5": 0.6755239367485046,
        "codebertscore_s_f1-19": 0.594329833984375,
        "codebertscore_s_f3-19": 0.6969105005264282,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0- The code snippet does not provide any implementation for the given problem.",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 2,
        "raw_gpt35_nsnr-13": "2",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "Score: 0 (The code snippet is not functional and does not provide any implementation for the given problem.)",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 0,
        "raw_gpt35_nswr-2": "0",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 0,
        "raw_gpt35_nswr-4": "0",
        "gpt35_nswr-14": 0,
        "raw_gpt35_nswr-14": "Score: 0 (The code snippet is not functional and does not provide any implementation for the given problem.)",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n",
        "snippet": [
            "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "Checks if given string is a palindrome",
        "task_id": "48",
        "3": "if (text.length <= 1){\n        return true;\n    } else if (text[0] == text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    } else {\n        return false;\n    }\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if (text.length <= 1){\n        return true;\n    }else if (text[0] === text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }else{\n        return false;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return text == text.split('').reverse().join('');\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (text.length == 0){\n        return true;\n    } else {\n        if (text[0] == text[text.length - 1]){\n            return is_palindrome(text.slice(1, text.length - 1));\n        } else {\n            return false;\n        }\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if (text.length <= 1){\n        return true;\n    } else if (text[0] != text[text.length - 1]){\n        return false;\n    } else {\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if (text == '') {\n\t\treturn true;\n\t}\n\n\tif (text[0] == text[text.length - 1]) {\n\t\treturn is_palindrome(text.slice(1, -1));\n\t}\n\n\treturn false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "//// YOUR CODE HERE\n    return false;\n}\n\ntest(is_palindrome(''), true);\ntest(is_palindrome('aba'), true);\ntest(is_palindrome('aaaaa'), true);\ntest(is_palindrome('zbcd'), false);",
        "grade-11": {
            "execution": 0
        },
        "1": "return text === reverse(text);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var reverseText = reverse(text);\n  return text == reverseText;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (text.length < 2) {\n        return true;\n    }\n    else if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n    else {\n        return false;\n    }\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (text.length == 0)\n\t\treturn true;\n\treturn text[0] == text[text.length-1] && is_palindrome(text.slice(1,text.length-1));\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(text == ''){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var n = text.length\n  for (var i = 0; i < n/2; i++){\n    if (text[i] != text[n-i-1]){\n      return false\n    }\n  }\n  return true\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return text.split('').reverse().join('') == text;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if (text.length==0){\n\t\treturn true;\n\t}\n\telse if (text.length==1){\n\t\treturn true;\n\t}\n\telse if (text[0]==text[text.length-1]){\n\t\treturn is_palindrome(text.slice(1, text.length-1));\n\t}\n\telse{\n\t\treturn false;\n\t}\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var len = text.length;\n  for (var i = 0; i < Math.floor(len/2); i++) {\n    if (text[i] !== text[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var palindrome = text.split('').reverse().join('');\n    var result = palindrome === text;\n    return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return text == reverse(text);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "text = text.toLowerCase();\n    let reverseText = '';\n    for(let i = text.length - 1; i >= 0; i--){\n        reverseText += text[i];\n    }\n    return reverseText === text;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return text === text.split('').reverse().join('');\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.18046481782418813,
        "bleu-0": 0.1773251014151409,
        "bleu-8": 0.04440487694997699,
        "bleu-7": 0.17563286174992357,
        "bleu-16": 0.21330658373014075,
        "bleu-2": 0.20847252652740028,
        "bleu-11": 0.03789583076458763,
        "bleu-1": 0.007752531177980418,
        "bleu-10": 0.02068437541586106,
        "bleu-17": 0.18046481782418813,
        "bleu-12": 0.1532465013987645,
        "bleu-6": 0.18216724555703834,
        "bleu-18": 0.4390785277097302,
        "bleu-15": 0.03139898960908293,
        "bleu-13": 0.14491394634037807,
        "bleu-9": 0.3979466251810402,
        "bleu-4": 0.05875660041171646,
        "bleu-14": 0.005925099574897587,
        "bleu-5": 0.214550406607467,
        "bleu-19": 0.045780391760391365,
        "codebleu-3": 0.5871307611734148,
        "codebleu-0": 0.5987286872264523,
        "codebleu-8": 0.2299612361425775,
        "codebleu-7": 0.5834518719426466,
        "codebleu-16": 0.6075991641640098,
        "codebleu-2": 0.5404403009207108,
        "codebleu-11": 0.3668756530825496,
        "codebleu-1": 0.11132162002343324,
        "codebleu-10": 0.16682019391317776,
        "codebleu-17": 0.6113731854158391,
        "codebleu-12": 0.5618524733261263,
        "codebleu-6": 0.5724197237892868,
        "codebleu-18": 0.6682163272410678,
        "codebleu-15": 0.2299612361425775,
        "codebleu-13": 0.5933268280473252,
        "codebleu-9": 0.7484560989721796,
        "codebleu-4": 0.3628443474003986,
        "codebleu-14": 0.09849242298038305,
        "codebleu-5": 0.57206979086091,
        "codebleu-19": 0.2439719460613563,
        "chrf-3": 0.47159448637646806,
        "chrf-0": 0.47053344292763816,
        "chrf-8": 0.19380848453498387,
        "chrf-7": 0.46949748159517485,
        "chrf-16": 0.4924653727777703,
        "chrf-2": 0.4982344390360488,
        "chrf-11": 0.20667125205988884,
        "chrf-1": 0.16052435283557853,
        "chrf-10": 0.19017024608160044,
        "chrf-17": 0.47159448637646806,
        "chrf-12": 0.4508519449599501,
        "chrf-6": 0.4761983525442642,
        "chrf-18": 0.6110696888645706,
        "chrf-15": 0.19134264070356916,
        "chrf-13": 0.44053096505186173,
        "chrf-9": 0.6224751702855889,
        "chrf-4": 0.21198193555789563,
        "chrf-14": 0.16100301037850204,
        "chrf-5": 0.3870163396645915,
        "chrf-19": 0.19326638399202373,
        "rougel-3": 0.44,
        "rougel-0": 0.43564356435643564,
        "rougel-8": 0.30769230769230765,
        "rougel-7": 0.4313725490196078,
        "rougel-16": 0.4600000000000001,
        "rougel-2": 0.43478260869565216,
        "rougel-11": 0.18000000000000002,
        "rougel-1": 0.22641509433962262,
        "rougel-10": 0.27118644067796605,
        "rougel-17": 0.44,
        "rougel-12": 0.4090909090909091,
        "rougel-6": 0.40404040404040403,
        "rougel-18": 0.7032967032967032,
        "rougel-15": 0.27692307692307694,
        "rougel-13": 0.43478260869565216,
        "rougel-9": 0.66,
        "rougel-4": 0.31578947368421056,
        "rougel-14": 0.23076923076923073,
        "rougel-5": 0.3838383838383838,
        "rougel-19": 0.30303030303030304,
        "meteor-3": 0.5496057320494351,
        "meteor-0": 0.548348053028727,
        "meteor-8": 0.25231366029371016,
        "meteor-7": 0.5221563344879525,
        "meteor-16": 0.624811513920193,
        "meteor-2": 0.5562498176548961,
        "meteor-11": 0.16055045871559634,
        "meteor-1": 0.15011583991875338,
        "meteor-10": 0.20221780520974994,
        "meteor-17": 0.537109375,
        "meteor-12": 0.5541050636035267,
        "meteor-6": 0.525757412656835,
        "meteor-18": 0.7033694976819768,
        "meteor-15": 0.25231366029371016,
        "meteor-13": 0.5313261622473473,
        "meteor-9": 0.8054400802752293,
        "meteor-4": 0.2973930863036248,
        "meteor-14": 0.15050273641338932,
        "meteor-5": 0.42093365388065596,
        "meteor-19": 0.25168601437258153,
        "ruby-3": 0.27586206896551724,
        "ruby-0": 0.27118644067796616,
        "ruby-8": 0.2142857142857143,
        "ruby-7": 0.2833333333333333,
        "ruby-16": 0.27586206896551724,
        "ruby-2": 0.28,
        "ruby-11": 0.10344827586206895,
        "ruby-1": 0.1428571428571429,
        "ruby-10": 0.16666666666666663,
        "ruby-17": 0.2586206896551724,
        "ruby-12": 0.19565217391304346,
        "ruby-6": 0.2807017543859649,
        "ruby-18": 0.6122448979591837,
        "ruby-15": 0.19047619047619047,
        "ruby-13": 0.31506849315068497,
        "ruby-9": 0.5517241379310345,
        "ruby-4": 0.19047619047619047,
        "ruby-14": 0.1428571428571429,
        "ruby-5": 0.21052631578947367,
        "ruby-19": 0.2142857142857143,
        "codebertscore_f1-3": 0.7834146022796631,
        "codebertscore_f3-3": 0.7761082053184509,
        "codebertscore_f1-0": 0.7813136577606201,
        "codebertscore_f3-0": 0.7755835056304932,
        "codebertscore_f1-8": 0.7266956567764282,
        "codebertscore_f3-8": 0.7036447525024414,
        "codebertscore_f1-7": 0.7765420079231262,
        "codebertscore_f3-7": 0.7699441909790039,
        "codebertscore_f1-16": 0.7892814874649048,
        "codebertscore_f3-16": 0.7817490696907043,
        "codebertscore_f1-2": 0.7871017456054688,
        "codebertscore_f3-2": 0.7778167128562927,
        "codebertscore_f1-11": 0.6647554636001587,
        "codebertscore_f3-11": 0.664482831954956,
        "codebertscore_f1-1": 0.7639147043228149,
        "codebertscore_f3-1": 0.7219323515892029,
        "codebertscore_f1-10": 0.7597057819366455,
        "codebertscore_f3-10": 0.7277207970619202,
        "codebertscore_f1-17": 0.7757413387298584,
        "codebertscore_f3-17": 0.7705627083778381,
        "codebertscore_f1-12": 0.7900692224502563,
        "codebertscore_f3-12": 0.77582186460495,
        "codebertscore_f1-6": 0.7735934853553772,
        "codebertscore_f3-6": 0.7659965753555298,
        "codebertscore_f1-18": 0.9026360511779785,
        "codebertscore_f3-18": 0.9140809178352356,
        "codebertscore_f1-15": 0.7238267660140991,
        "codebertscore_f3-15": 0.703758955001831,
        "codebertscore_f1-13": 0.7838385105133057,
        "codebertscore_f3-13": 0.7756214141845703,
        "codebertscore_f1-9": 0.8774517774581909,
        "codebertscore_f3-9": 0.8944905400276184,
        "codebertscore_f1-4": 0.7283347845077515,
        "codebertscore_f3-4": 0.7199082374572754,
        "codebertscore_f1-14": 0.764264702796936,
        "codebertscore_f3-14": 0.7217245697975159,
        "codebertscore_f1-5": 0.7972571849822998,
        "codebertscore_f3-5": 0.8031810522079468,
        "codebertscore_f1-19": 0.729290246963501,
        "codebertscore_f3-19": 0.7051889300346375,
        "codebertscore_s_f1-3": 0.8017897605895996,
        "codebertscore_s_f3-3": 0.7957437038421631,
        "codebertscore_s_f1-0": 0.8003003001213074,
        "codebertscore_s_f3-0": 0.7953271269798279,
        "codebertscore_s_f1-8": 0.7461915612220764,
        "codebertscore_s_f3-8": 0.723896861076355,
        "codebertscore_s_f1-7": 0.7872352600097656,
        "codebertscore_s_f3-7": 0.7839517593383789,
        "codebertscore_s_f1-16": 0.8059250712394714,
        "codebertscore_s_f3-16": 0.8007482886314392,
        "codebertscore_s_f1-2": 0.8062135577201843,
        "codebertscore_s_f3-2": 0.7973631620407104,
        "codebertscore_s_f1-11": 0.6823799014091492,
        "codebertscore_s_f3-11": 0.6831373572349548,
        "codebertscore_s_f1-1": 0.7707388997077942,
        "codebertscore_s_f3-1": 0.7275359034538269,
        "codebertscore_s_f1-10": 0.7628492116928101,
        "codebertscore_s_f3-10": 0.7341961860656738,
        "codebertscore_s_f1-17": 0.7906445860862732,
        "codebertscore_s_f3-17": 0.7885065674781799,
        "codebertscore_s_f1-12": 0.8142014145851135,
        "codebertscore_s_f3-12": 0.8042110204696655,
        "codebertscore_s_f1-6": 0.7969579100608826,
        "codebertscore_s_f3-6": 0.7926057577133179,
        "codebertscore_s_f1-18": 0.9117727875709534,
        "codebertscore_s_f3-18": 0.9232115149497986,
        "codebertscore_s_f1-15": 0.7410789728164673,
        "codebertscore_s_f3-15": 0.7216314077377319,
        "codebertscore_s_f1-13": 0.7980040907859802,
        "codebertscore_s_f3-13": 0.7901153564453125,
        "codebertscore_s_f1-9": 0.8859859108924866,
        "codebertscore_s_f3-9": 0.9043409824371338,
        "codebertscore_s_f1-4": 0.7364953756332397,
        "codebertscore_s_f3-4": 0.732525646686554,
        "codebertscore_s_f1-14": 0.7691029906272888,
        "codebertscore_s_f3-14": 0.7268773317337036,
        "codebertscore_s_f1-5": 0.8186933398246765,
        "codebertscore_s_f3-5": 0.8203681707382202,
        "codebertscore_s_f1-19": 0.7471184730529785,
        "codebertscore_s_f3-19": 0.7246228456497192,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 0,
        "raw_gpt35_nsnr-11": "Score: 1",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades){\n",
        "snippet": [
            "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n"
        ],
        "simplified": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
        "task_id": "81",
        "3": "var output = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            output.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            output.push('A');\n        }\n        else if(grades[i] > 3.3){\n            output.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            output.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            output.push('B');\n        }\n        else if(grades[i] > 2.3){\n            output.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            output.push('C+');\n        }\n        else if(grades[i] > 1.7){\n            output.push('C');\n        }\n        else if(grades[i] > 1.3){\n            output.push('C-');\n        }\n        else if(grades[i] > 1.0){\n            output.push('D+');\n        }\n        else if(grades[i] > 0.7){\n            output.push('D');\n        }\n        else if(grades[i] > 0.0){\n            output.push('D-');\n        }\n        else{\n            output.push('E');\n        }\n    }\n    return output;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let letter_grades=[]\n    for(let grade of grades){\n      if(grade>4.0){\n        letter_grades.push('A+')\n      }\n      else if(grade>3.7){\n        letter_grades.push('A')\n      }\n      else if(grade>3.3){\n        letter_grades.push('A-')\n      }\n      else if(grade>3.0){\n        letter_grades.push('B+')\n      }\n      else if(grade>2.7){\n        letter_grades.push('B')\n      }\n      else if(grade>2.3){\n        letter_grades.push('B-')\n      }\n      else if(grade>2.0){\n        letter_grades.push('C+')\n      }\n      else if(grade>1.7){\n        letter_grades.push('C')\n      }\n      else if(grade>1.3){\n        letter_grades.push('C-')\n      }\n      else if(grade>1.0){\n        letter_grades.push('D+')\n      }\n      else if(grade>0.7){\n        letter_grades.push('D')\n      }\n      else if(grade>0.0){\n        letter_grades.push('D-')\n      }\n      else{\n        letter_grades.push('E')\n      }\n    }\n    return letter_grades\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const grade_table = {\n    'A+': 4.0,\n    'A': 3.7,\n    'A-': 3.3,\n    'B+': 3.0,\n    'B': 2.7,\n    'B-': 2.3,\n    'C+': 2.0,\n    'C': 1.7,\n    'C-': 1.3,\n    'D+': 1.0,\n    'D': 0.7,\n    'D-': 0.0,\n    'E': 0.0\n  }\n  return grades.map(grade => {\n    return Object.keys(grade_table).find(key => grade_table[key] <= grade)\n  })\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let letter_grades = grades.map(function(grade){\n        if(grade == 4.0){\n            return 'A+';\n        }\n        else if(grade > 3.7){\n            return 'A';\n        }\n        else if(grade > 3.3){\n            return 'A-';\n        }\n        else if(grade > 3.0){\n            return 'B+';\n        }\n        else if(grade > 2.7){\n            return 'B';\n        }\n        else if(grade > 2.3){\n            return 'B-';\n        }\n        else if(grade > 2.0){\n            return 'C+';\n        }\n        else if(grade > 1.7){\n            return 'C';\n        }\n        else if(grade > 1.3){\n            return 'C-';\n        }\n        else if(grade > 1.0){\n            return 'D+';\n        }\n        else if(grade > 0.7){\n            return 'D';\n        }\n        else if(grade > 0.0){\n            return 'D-';\n        }\n        else{\n            return 'E';\n        }\n    });\n    return letter_grades;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return grades.map(grade => {\n    if (grade >= 4.0) return 'A+';\n    if (grade >= 3.7) return 'A';\n    if (grade >= 3.3) return 'A-';\n    if (grade >= 3.0) return 'B+';\n    if (grade >= 2.7) return 'B';\n    if (grade >= 2.3) return 'B-';\n    if (grade >= 2.0) return 'C+';\n    if (grade >= 1.7) return 'C';\n    if (grade >= 1.3) return 'C-';\n    if (grade >= 1.0) return 'D+';\n    if (grade >= 0.7) return 'D';\n    if (grade >= 0.0) return 'D-';\n    return 'E';\n  });\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push('A+');\n        }\n        else if(grades[i] >= 3.7){\n            letter_grades.push('A');\n        }\n        else if(grades[i] >= 3.3){\n            letter_grades.push('A-');\n        }\n        else if(grades[i] >= 3.0){\n            letter_grades.push('B+');\n        }\n        else if(grades[i] >= 2.7){\n            letter_grades.push('B');\n        }\n        else if(grades[i] >= 2.3){\n            letter_grades.push('B-');\n        }\n        else if(grades[i] >= 2.0){\n            letter_grades.push('C+');\n        }\n        else if(grades[i] >= 1.7){\n            letter_grades.push('C');\n        }\n        else if(grades[i] >= 1.3){\n            letter_grades.push('C-');\n        }\n        else if(grades[i] >= 1.0){\n            letter_grades.push('D+');\n        }\n        else if(grades[i] >= 0.7){\n            letter_grades.push('D');\n        }\n        else if(grades[i] >= 0.0){\n            letter_grades.push('D-');\n        }\n        else if(grades[i] == 0.0){\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            result.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            result.push('A');\n        }\n        else if(grades[i] > 3.3){\n            result.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            result.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            result.push('B');\n        }\n        else if(grades[i] > 2.3){\n            result.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            result.push('C+');\n        }\n        else if(grades[i] > 1.7){\n            result.push('C');\n        }\n        else if(grades[i] > 1.3){\n            result.push('C-');\n        }\n        else if(grades[i] > 1.0){\n            result.push('D+');\n        }\n        else if(grades[i] > 0.7){\n            result.push('D');\n        }\n        else if(grades[i] > 0.0){\n            result.push('D-');\n        }\n        else{\n            result.push('E');\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "const gradeMap = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        '-1.0': 'E'\n    }\n    return grades.map(num => gradeMap[Object.keys(gradeMap).reduce((acc, numKey) => parseFloat(numKey) < num ? numKey : acc, '-1.0')])\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var grades = [].slice.call(arguments);\n    var letters = [];\n    grades.forEach(function(grade){\n        switch(true){\n            case (grade >= 4.0):\n                letters.push('A+');\n                break;\n            case (grade > 3.7):\n                letters.push('A');\n                break;\n            case (grade > 3.3):\n                letters.push('A-');\n                break;\n            case (grade > 3.0):\n                letters.push('B+');\n                break;\n            case (grade > 2.7):\n                letters.push('B');\n                break;\n            case (grade > 2.3):\n                letters.push('B-');\n                break;\n            case (grade > 2.0):\n                letters.push('C+');\n                break;\n            case (grade > 1.7):\n                letters.push('C');\n                break;\n            case (grade > 1.3):\n                letters.push('C-');\n                break;\n            case (grade > 1.0):\n                letters.push('D+');\n                break;\n            case (grade > 0.7):\n                letters.push('D');\n                break;\n            case (grade > 0.0):\n                letters.push('D-');\n                break;\n            case (grade == 0.0):\n                letters.push('E');\n                break;\n        }\n    });\n    return letters;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return grades.map(grade => {\n        if (grade > 4.0) return 'Invalid';\n        if (grade > 3.7) return 'A+';\n        if (grade > 3.3) return 'A';\n        if (grade > 3.0) return 'A-';\n        if (grade > 2.7) return 'B+';\n        if (grade > 2.3) return 'B';\n        if (grade > 2.0) return 'B-';\n        if (grade > 1.7) return 'C+';\n        if (grade > 1.3) return 'C';\n        if (grade > 1.0) return 'C-';\n        if (grade > 0.7) return 'D+';\n        if (grade > 0.0) return 'D';\n        if (grade > -1.0) return 'D-';\n        return 'E';\n    });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let grades_obj = {\n\t\t'4.0': 'A+',\n\t\t'3.7': 'A',\n\t\t'3.3': 'A-',\n\t\t'3.0': 'B+',\n\t\t'2.7': 'B',\n\t\t'2.3': 'B-',\n\t\t'2.0': 'C+',\n\t\t'1.7': 'C',\n\t\t'1.3': 'C-',\n\t\t'1.0': 'D+',\n\t\t'0.7': 'D',\n\t\t'0.0': 'D-',\n\t\t'0.0': 'E'\n\t}\n\tlet solution = [];\n\tfor(let i=0; i<grades.length; i++){\n\t\tlet current_grade = String(grades[i]);\n\t\tif(current_grade.includes('.')){\n\t\t\tif(current_grade[2] === '7'){\n\t\t\t\tif(current_grade[3] > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '7';\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '3';\n\t\t\t\t}\n\t\t\t} else if(current_grade[2] === '3'){\n\t\t\t\tif(current_grade[3] > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '3';\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '0';\n\t\t\t\t}\n\t\t\t} else if(current_grade[2] === '0'){\n\t\t\t\tif(current_grade[3] > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '0';\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '7';\n\t\t\t\t}",
        "grade-12": {
            "execution": 0
        },
        "6": "let letter_grades = [];\n    let a = null;\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            a = 'A+';\n        }\n        else if(grades[i] > 3.7){\n            a = 'A';\n        }\n        else if(grades[i] > 3.3){\n            a = 'A-';\n        }\n        else if(grades[i] > 3.0){\n            a = 'B+';\n        }\n        else if(grades[i] > 2.7){\n            a = 'B';\n        }\n        else if(grades[i] > 2.3){\n            a = 'B-';\n        }\n        else if(grades[i] > 2.0){\n            a = 'C+';\n        }\n        else if(grades[i] > 1.7){\n            a = 'C';\n        }\n        else if(grades[i] > 1.3){\n            a = 'C-';\n        }\n        else if(grades[i] > 1.0){\n            a = 'D+';\n        }\n        else if(grades[i] > 0.7){\n            a = 'D';\n        }\n        else if(grades[i] > 0.0){\n            a = 'D-';\n        }\n        else if(grades[i] == 0.0){\n            a = 'E';\n        }\n        letter_grades.push(a);\n    }\n    return letter_grades;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var grades = grades.map(function(val){\n    if(val < 0.7)\n      return \"E\";\n    else if(val < 1.0)\n      return \"D-\";\n    else if(val < 1.3)\n      return \"D\";\n    else if(val < 1.7)\n      return \"D+\";\n    else if(val < 2.0)\n      return \"C-\";\n    else if(val < 2.3)\n      return \"C\";\n    else if(val < 2.7)\n      return \"C+\";\n    else if(val < 3.0)\n      return \"B-\";\n    else if(val < 3.3)\n      return \"B\";\n    else if(val < 3.7)\n      return \"B+\";\n    else if(val < 4.0)\n      return \"A-\";\n    else\n      return \"A+\";\n  });\n  return grades;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = [];\n  for(i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      result.push('A+');\n    }\n    else if(grades[i] >= 3.7){\n      result.push('A');\n    }\n    else if(grades[i] >= 3.3){\n      result.push('A-');\n    }\n    else if(grades[i] >= 3.0){\n      result.push('B+');\n    }\n    else if(grades[i] >= 2.7){\n      result.push('B');\n    }\n    else if(grades[i] >= 2.3){\n      result.push('B-');\n    }\n    else if(grades[i] >= 2.0){\n      result.push('C+');\n    }\n    else if(grades[i] >= 1.7){\n      result.push('C');\n    }\n    else if(grades[i] >= 1.3){\n      result.push('C-');\n    }\n    else if(grades[i] >= 1.0){\n      result.push('D+');\n    }\n    else if(grades[i] >= 0.7){\n      result.push('D');\n    }\n    else if(grades[i] >= 0.0){\n      result.push('D-');\n    }\n    else if(grades[i] < 0.0){\n      result.push('E');\n    }\n  }\n  return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "const letter_grade = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n        \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\": 0.7,\n        \"D-\": 0.0,\n        \"E\": 0.0\n    }\n    let result = []\n    grades.forEach(grade => {\n        for(key in letter_grade){\n            if(grade >= letter_grade[key]){\n                result.push(key)\n                break\n            }\n        }\n    })\n    return result\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "const Grade = {\n        \"4.0\" : 'A+',\n        \"3.7\" : 'A',\n        \"3.3\" : 'A-',\n        \"3.0\" : 'B+',\n        \"2.7\" : 'B',\n        \"2.3\" : 'B-',\n        \"2.0\" : 'C+',\n        \"1.7\" : 'C',\n        \"1.3\" : 'C-',\n        \"1.0\" : 'D+',\n        \"0.7\" : 'D',\n        \"0.0\" : 'D-',\n        \"-0.1\" : 'E'\n    }\n    let grade = []\n    for(let i = 0; i < grades.length; i++){\n        let key = ''\n        for(let j = 4.0; j >= -0.1; j -= 0.3){\n            if(grades[i] >= j){\n                key = j.toString()\n                break\n            }\n        }\n        grade.push(Grade[key])\n    }\n    return grade\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let letterGrades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letterGrades.push('A+');\n        }\n        else if(grades[i] >= 3.7){\n            letterGrades.push('A');\n        }\n        else if(grades[i] >= 3.3){\n            letterGrades.push('A-');\n        }\n        else if(grades[i] >= 3.0){\n            letterGrades.push('B+');\n        }\n        else if(grades[i] >= 2.7){\n            letterGrades.push('B');\n        }\n        else if(grades[i] >= 2.3){\n            letterGrades.push('B-');\n        }\n        else if(grades[i] >= 2.0){\n            letterGrades.push('C+');\n        }\n        else if(grades[i] >= 1.7){\n            letterGrades.push('C');\n        }\n        else if(grades[i] >= 1.3){\n            letterGrades.push('C-');\n        }\n        else if(grades[i] >= 1.0){\n            letterGrades.push('D+');\n        }\n        else if(grades[i] >= 0.7){\n            letterGrades.push('D');\n        }\n        else if(grades[i] >= 0.0){\n            letterGrades.push('D-');\n        }\n        else{\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var grades_letter = [];\n\tvar grades_letter_format = function(grade){\n\t\tif(grade >= 4.0){\n\t\t\treturn \"A+\";\n\t\t}\n\t\telse if(grade >= 3.7){\n\t\t\treturn \"A\";\n\t\t}\n\t\telse if(grade >= 3.3){\n\t\t\treturn \"A-\";\n\t\t}\n\t\telse if(grade >= 3.0){\n\t\t\treturn \"B+\";\n\t\t}\n\t\telse if(grade >= 2.7){\n\t\t\treturn \"B\";\n\t\t}\n\t\telse if(grade >= 2.3){\n\t\t\treturn \"B-\";\n\t\t}\n\t\telse if(grade >= 2.0){\n\t\t\treturn \"C+\";\n\t\t}\n\t\telse if(grade >= 1.7){\n\t\t\treturn \"C\";\n\t\t}\n\t\telse if(grade >= 1.3){\n\t\t\treturn \"C-\";\n\t\t}\n\t\telse if(grade >= 1.0){\n\t\t\treturn \"D+\";\n\t\t}\n\t\telse if(grade >= 0.7){\n\t\t\treturn \"D\";\n\t\t}\n\t\telse if(grade >= 0.0){\n\t\t\treturn \"D-\";\n\t\t}\n\t\telse if(grade >= -1.0){\n\t\t\treturn \"E\";\n\t\t}\n\t\telse{\n\t\t\treturn \"error\";\n\t\t}\n\t}\n\tgrades.forEach(function(grade){\n\t\tgrades_letter.push(grades_letter_format(grade));\n\t});\n\treturn grades_letter;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let scale = {4.0:'A+', 3.7:'A', 3.3:'A-', 3.0:'B+', 2.7:'B', 2.3:'B-', 2.0:'C+', 1.7:'C', 1.3:'C-', 1.0:'D+', 0.7:'D', 0.0:'D-', 'E':0};\n    return grades.map(grade => {\n        if(grade === 0) return 'E';\n        for(let key in scale){\n            if(grade > key) return scale[key];\n        }\n    });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push('A+');\n        }else if(grades[i] >= 3.7){\n            result.push('A');\n        }else if(grades[i] >= 3.3){\n            result.push('A-');\n        }else if(grades[i] >= 3.0){\n            result.push('B+');\n        }else if(grades[i] >= 2.7){\n            result.push('B');\n        }else if(grades[i] >= 2.3){\n            result.push('B-');\n        }else if(grades[i] >= 2.0){\n            result.push('C+');\n        }else if(grades[i] >= 1.7){\n            result.push('C');\n        }else if(grades[i] >= 1.3){\n            result.push('C-');\n        }else if(grades[i] >= 1.0){\n            result.push('D+');\n        }else if(grades[i] >= 0.7){\n            result.push('D');\n        }else if(grades[i] >= 0.0){\n            result.push('D-');\n        }else{\n            result.push('E');\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.5369608713004923,
        "bleu-0": 0.6562707131383259,
        "bleu-8": 0.10031925612078489,
        "bleu-7": 0.3672912226584891,
        "bleu-16": 0.19122662731597273,
        "bleu-2": 0.4709424486040642,
        "bleu-11": 0.5454288913457452,
        "bleu-1": 0.12067832948708962,
        "bleu-10": 0.40680072879969376,
        "bleu-17": 0.22771614149566136,
        "bleu-12": 0.18613114298120986,
        "bleu-6": 0.39677234199269,
        "bleu-18": 0.1880807983957273,
        "bleu-15": 0.47305532440822007,
        "bleu-13": 0.11513644957045903,
        "bleu-9": 0.21870284023555045,
        "bleu-4": 0.47686344403088365,
        "bleu-14": 0.34656404820120407,
        "bleu-5": 0.11231805869739075,
        "bleu-19": 0.4970151799204179,
        "codebleu-3": 0.7843539788557797,
        "codebleu-0": 0.8353838871415533,
        "codebleu-8": 0.203624207743468,
        "codebleu-7": 0.5558262241456662,
        "codebleu-16": 0.30532675480847166,
        "codebleu-2": 0.7540057862334895,
        "codebleu-11": 0.7866222135591232,
        "codebleu-1": 0.2064520293510596,
        "codebleu-10": 0.63368566538441,
        "codebleu-17": 0.37070731538444024,
        "codebleu-12": 0.48505860227296055,
        "codebleu-6": 0.6152929530119632,
        "codebleu-18": 0.3293034915856984,
        "codebleu-15": 0.752521384909756,
        "codebleu-13": 0.23929755274216943,
        "codebleu-9": 0.30722676982301306,
        "codebleu-4": 0.7576860641248533,
        "codebleu-14": 0.49970695630419837,
        "codebleu-5": 0.22760801748552542,
        "codebleu-19": 0.7573715921909235,
        "chrf-3": 0.49486618494128476,
        "chrf-0": 0.7764653876720741,
        "chrf-8": 0.1260568287019564,
        "chrf-7": 0.3895856940356698,
        "chrf-16": 0.2134268824068114,
        "chrf-2": 0.694349786315565,
        "chrf-11": 0.5084757080891378,
        "chrf-1": 0.11173853223365622,
        "chrf-10": 0.4341424308553268,
        "chrf-17": 0.23068563195479638,
        "chrf-12": 0.29927177546151307,
        "chrf-6": 0.43035414347739037,
        "chrf-18": 0.19525430101050678,
        "chrf-15": 0.481358538691137,
        "chrf-13": 0.1524661117337294,
        "chrf-9": 0.19469792331752278,
        "chrf-4": 0.6225645534704701,
        "chrf-14": 0.3546204295118747,
        "chrf-5": 0.12798075892100072,
        "chrf-19": 0.4901588335794526,
        "rougel-3": 0.7999999999999999,
        "rougel-0": 0.8503649635036497,
        "rougel-8": 0.35483870967741943,
        "rougel-7": 0.69921875,
        "rougel-16": 0.5678496868475992,
        "rougel-2": 0.7677725118483412,
        "rougel-11": 0.8065573770491804,
        "rougel-1": 0.3692946058091287,
        "rougel-10": 0.6164154103852597,
        "rougel-17": 0.5197505197505197,
        "rougel-12": 0.33130699088145893,
        "rougel-6": 0.6521008403361345,
        "rougel-18": 0.4288747346072187,
        "rougel-15": 0.7702060221870047,
        "rougel-13": 0.36689038031319915,
        "rougel-9": 0.3682170542635659,
        "rougel-4": 0.772370486656201,
        "rougel-14": 0.6347517730496454,
        "rougel-5": 0.4161073825503356,
        "rougel-19": 0.789049919484702,
        "meteor-3": 0.856691227605493,
        "meteor-0": 0.8801339484258445,
        "meteor-8": 0.34562540300294764,
        "meteor-7": 0.5958771936437194,
        "meteor-16": 0.4117923795427687,
        "meteor-2": 0.7360263943195064,
        "meteor-11": 0.8631540368255813,
        "meteor-1": 0.24092146603169728,
        "meteor-10": 0.5364294305073943,
        "meteor-17": 0.4016052039700884,
        "meteor-12": 0.3791059574877526,
        "meteor-6": 0.5988004008853529,
        "meteor-18": 0.3202821457500827,
        "meteor-15": 0.6600917890693866,
        "meteor-13": 0.3888282801613494,
        "meteor-9": 0.2896670229724272,
        "meteor-4": 0.8564780001021134,
        "meteor-14": 0.4565884161076743,
        "meteor-5": 0.2796479647964796,
        "meteor-19": 0.8616381661987175,
        "ruby-3": 0.7261538461538461,
        "ruby-0": 0.8175438596491228,
        "ruby-8": 0.2210526315789474,
        "ruby-7": 0.6175438596491227,
        "ruby-16": 0.4385964912280702,
        "ruby-2": 0.6752873563218391,
        "ruby-11": 0.7323076923076923,
        "ruby-1": 0.21052631578947367,
        "ruby-10": 0.5737179487179487,
        "ruby-17": 0.4140350877192982,
        "ruby-12": 0.19839142091152817,
        "ruby-6": 0.5225806451612903,
        "ruby-18": 0.33684210526315794,
        "ruby-15": 0.676300578034682,
        "ruby-13": 0.22456140350877196,
        "ruby-9": 0.1719298245614035,
        "ruby-4": 0.6789772727272727,
        "ruby-14": 0.45614035087719296,
        "ruby-5": 0.25263157894736843,
        "ruby-19": 0.7053571428571428,
        "codebertscore_f1-3": 0.8630353212356567,
        "codebertscore_f3-3": 0.8505100607872009,
        "codebertscore_f1-0": 0.9017124772071838,
        "codebertscore_f3-0": 0.8854316473007202,
        "codebertscore_f1-8": 0.7632802128791809,
        "codebertscore_f3-8": 0.7205545902252197,
        "codebertscore_f1-7": 0.8580746054649353,
        "codebertscore_f3-7": 0.8371057510375977,
        "codebertscore_f1-16": 0.8259884715080261,
        "codebertscore_f3-16": 0.7951061129570007,
        "codebertscore_f1-2": 0.8895124793052673,
        "codebertscore_f3-2": 0.8809078931808472,
        "codebertscore_f1-11": 0.8680241703987122,
        "codebertscore_f3-11": 0.8553672432899475,
        "codebertscore_f1-1": 0.7540944814682007,
        "codebertscore_f3-1": 0.723970890045166,
        "codebertscore_f1-10": 0.8192676901817322,
        "codebertscore_f3-10": 0.8117057681083679,
        "codebertscore_f1-17": 0.833423912525177,
        "codebertscore_f3-17": 0.8081415295600891,
        "codebertscore_f1-12": 0.8063467144966125,
        "codebertscore_f3-12": 0.8032314777374268,
        "codebertscore_f1-6": 0.8632400035858154,
        "codebertscore_f3-6": 0.8549172878265381,
        "codebertscore_f1-18": 0.8109241724014282,
        "codebertscore_f3-18": 0.7913125157356262,
        "codebertscore_f1-15": 0.8878583908081055,
        "codebertscore_f3-15": 0.8759306073188782,
        "codebertscore_f1-13": 0.798985481262207,
        "codebertscore_f3-13": 0.7745128870010376,
        "codebertscore_f1-9": 0.7882168889045715,
        "codebertscore_f3-9": 0.7665576934814453,
        "codebertscore_f1-4": 0.8833557367324829,
        "codebertscore_f3-4": 0.8791923522949219,
        "codebertscore_f1-14": 0.8486029505729675,
        "codebertscore_f3-14": 0.8380470871925354,
        "codebertscore_f1-5": 0.7638710141181946,
        "codebertscore_f3-5": 0.727637767791748,
        "codebertscore_f1-19": 0.8764010667800903,
        "codebertscore_f3-19": 0.8633446097373962,
        "codebertscore_s_f1-3": 0.8640618920326233,
        "codebertscore_s_f3-3": 0.8502541184425354,
        "codebertscore_s_f1-0": 0.9024618864059448,
        "codebertscore_s_f3-0": 0.887650191783905,
        "codebertscore_s_f1-8": 0.776859700679779,
        "codebertscore_s_f3-8": 0.7376366257667542,
        "codebertscore_s_f1-7": 0.8579961061477661,
        "codebertscore_s_f3-7": 0.8391197323799133,
        "codebertscore_s_f1-16": 0.8268881440162659,
        "codebertscore_s_f3-16": 0.797635018825531,
        "codebertscore_s_f1-2": 0.8921797275543213,
        "codebertscore_s_f3-2": 0.8825206756591797,
        "codebertscore_s_f1-11": 0.8703036904335022,
        "codebertscore_s_f3-11": 0.8551826477050781,
        "codebertscore_s_f1-1": 0.756259024143219,
        "codebertscore_s_f3-1": 0.7256664037704468,
        "codebertscore_s_f1-10": 0.8173161149024963,
        "codebertscore_s_f3-10": 0.8087175488471985,
        "codebertscore_s_f1-17": 0.8284651637077332,
        "codebertscore_s_f3-17": 0.8028346300125122,
        "codebertscore_s_f1-12": 0.8154714107513428,
        "codebertscore_s_f3-12": 0.8134285807609558,
        "codebertscore_s_f1-6": 0.8687882423400879,
        "codebertscore_s_f3-6": 0.8588996529579163,
        "codebertscore_s_f1-18": 0.8157088160514832,
        "codebertscore_s_f3-18": 0.7951058149337769,
        "codebertscore_s_f1-15": 0.8864713311195374,
        "codebertscore_s_f3-15": 0.8721016049385071,
        "codebertscore_s_f1-13": 0.8091123104095459,
        "codebertscore_s_f3-13": 0.7848303914070129,
        "codebertscore_s_f1-9": 0.8094198107719421,
        "codebertscore_s_f3-9": 0.7884129881858826,
        "codebertscore_s_f1-4": 0.8832712769508362,
        "codebertscore_s_f3-4": 0.877782940864563,
        "codebertscore_s_f1-14": 0.8453862071037292,
        "codebertscore_s_f3-14": 0.8334969878196716,
        "codebertscore_s_f1-5": 0.7815914750099182,
        "codebertscore_s_f3-5": 0.7486242651939392,
        "codebertscore_s_f1-19": 0.8793344497680664,
        "codebertscore_s_f3-19": 0.865176260471344,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nfunction largest_smallest_integers(lst){\n",
        "snippet": [
            "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n"
        ],
        "simplified": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
        "task_id": "136",
        "3": "return \"(\"+lst.reduce((a, b) => b < 0 ? b : a,0)+\",\"+lst.reduce((a, b) => b > 0 ? b : a,0)+\")\";\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let min = Infinity;\n    let max = -Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n        } else if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n        }\n    }\n    return (max != -Infinity ? max : null, min != Infinity ? min : null);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let largest = null;\n    let smallest = null;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(largest === null){\n                largest = lst[i];\n            }else if(lst[i] > largest){\n                largest = lst[i];\n            }\n        }else if(lst[i] > 0){\n            if(smallest === null){\n                smallest = lst[i];\n            }else if(lst[i] < smallest){\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (lst.length == 0){\n    return [null, null];\n  }\n  var largestNegative = null;\n  var smallestPositive = null;\n  for (var i = 0; i < lst.length; i++){\n    if (lst[i] < 0){\n      if (largestNegative == null){\n        largestNegative = lst[i];\n      }\n      else if (lst[i] > largestNegative){\n        largestNegative = lst[i];\n      }\n    }\n    else if (lst[i] > 0){\n      if (smallestPositive == null){\n        smallestPositive = lst[i];\n      }\n      else if (lst[i] < smallestPositive){\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let a = null;\n    let b = null;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && (b === null || lst[i] < b)){\n            b = lst[i];\n        }\n        if(lst[i] < 0 && (a === null || lst[i] > a)){\n            a = lst[i];\n        }\n    }\n    return [a, b];\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "// Your code goes here\n  let l;\n  let s;\n  let neg = lst.filter(x => x < 0).sort((a,b) => b-a);\n  let pos = lst.filter(x => x > 0).sort((a,b) => a-b);\n  if (neg.length > 0) {\n    l = neg[0];\n  } else {\n    l = null;\n  }\n  if (pos.length > 0) {\n    s = pos[0];\n  } else {\n    s = null;\n  }\n  return [l, s];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if (lst.length < 1) {\n    return [null, null];\n  }\n  var lg = null;\n  var sm = null;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (sm === null) {\n        sm = lst[i];\n      } else if (lst[i] < sm) {\n        sm = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (lg === null) {\n        lg = lst[i];\n      } else if (lst[i] > lg) {\n        lg = lst[i];\n      }\n    }\n  }\n  return [lg, sm];\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// your code here\n    let largest_negative = null;\n    let smallest_positive = null;\n    if (lst.length === 0) {\n        return [largest_negative, smallest_positive];\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let a = lst[i];\n        if (a < 0) {\n            if (largest_negative === null) {\n                largest_negative = a;\n            } else if (a > largest_negative) {\n                largest_negative = a;\n            }\n        } else if (a > 0) {\n            if (smallest_positive === null) {\n                smallest_positive = a;\n            } else if (a < smallest_positive) {\n                smallest_positive = a;\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "lst = lst.filter(x => x > 0);\n\tlet b = lst.length > 0 ? Math.min(...lst) : null;\n\tlst = lst.filter(x => x < 0);\n\tlet a = lst.length > 0 ? Math.max(...lst) : null;\n\treturn [a, b];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let min;\n    let max;\n    let booleans = [];\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0){\n            booleans.push(true);\n        }\n        else if(lst[i]>0){\n            booleans.push(false);\n        }\n    }\n    for(let i=0; i<lst.length; i++){\n        if(i === 0){\n            if(booleans[i] === true){\n                max = lst[i];\n            }\n            else if(booleans[i] === false){\n                min = lst[i];\n            }\n        }\n        else{\n            if(booleans[i] === true){\n                if(lst[i]>max){\n                    max = lst[i];\n                }\n            }\n            else if(booleans[i] === false){\n                if(lst[i]<min){\n                    min = lst[i];\n                }\n            }\n        }\n    }\n    let m = max;\n    let n = min;\n    if(m === undefined){\n        m = null;\n    }\n    if(n === undefined){\n        n = null;\n    }\n    return [m, n];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let min = Infinity;\n    let max = -Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return [max, min];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] >= 0){\n            pos.push(lst[i]);\n        }\n        else if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n    }\n    var maxNeg = neg[0];\n    var minPos = pos[0];\n    for(var j = 0; j < neg.length; j++){\n        if(neg[j] > maxNeg){\n            maxNeg = neg[j];\n        }\n    }\n    for(var k = 0; k < pos.length; k++){\n        if(pos[k] < minPos){\n            minPos = pos[k];\n        }\n    }\n    return [maxNeg, minPos];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var ans = [null, null];\n  for (var i=0; i<lst.length; i++){\n    if (lst[i] > 0 && (ans[1] == null || lst[i] < ans[1])){\n      ans[1] = lst[i];\n    }\n    if (lst[i] < 0 && (ans[0] == null || lst[i] > ans[0])){\n      ans[0] = lst[i];\n    }\n  }\n  return ans;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let num = lst.filter(el => el > 0);\n    let num1 = lst.filter(el => el < 0);\n    return num.length > 0 && num1.length > 0 ? [Math.max(...num1), Math.min(...num)] : [undefined, undefined];\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let a = lst.filter(x => x<0).sort((a,b) => a-b)[0];\n  let b = lst.filter(x => x>0).sort((a,b) => a-b)[0];\n  return a === undefined ? (null, b) : b === undefined ? (a, null) : (a, b);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let maxNeg = -Infinity;\n    let minPos = Infinity;\n    if(lst.length == 0) return [maxNeg, minPos];\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < 0){\n            if(lst[i] > maxNeg) maxNeg = lst[i];\n        }else if(lst[i] > 0){\n            if(lst[i] < minPos) minPos = lst[i];\n        }\n    }\n    if(maxNeg == -Infinity) maxNeg = null;\n    if(minPos == Infinity) minPos = null;\n    return [maxNeg, minPos];\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return [lst.reduce((a, c) => a < c && c < 0 ? c : a, lst[0]),\n            lst.reduce((a, c) => a > c && c > 0 ? c : a, lst[0])]\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let positive = [];\n    let negative = [];\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] >= 0){\n            positive.push(lst[i]);\n        }\n        else{\n            negative.push(lst[i]);\n        }\n    }\n    let a = negative.length == 0 ? null : Math.max(...negative);\n    let b = positive.length == 0 ? null : Math.min(...positive);\n    return [a, b];\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var small = null;\n  var large = null;\n  if (lst.length === 0) {\n    return [large, small];\n  }\n  else {\n    small = lst[0];\n    large = lst[0];\n    for (i = 0; i < lst.length; i++) {\n      if (lst[i] > 0 && lst[i] < small) {\n        small = lst[i];\n      }\n      if (lst[i] < 0 && lst[i] > large) {\n        large = lst[i];\n      }\n    }\n    return [large, small];\n  }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(!lst.length) return [null, null];\n    if(lst.length === 1) return [null, null];\n    let largest_negative = Number.MIN_SAFE_INTEGER;\n    let smallest_positive = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(lst[i] > largest_negative){\n                largest_negative = lst[i];\n            }\n        }\n        if(lst[i] > 0){\n            if(lst[i] < smallest_positive){\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    if(largest_negative === Number.MIN_SAFE_INTEGER){\n        largest_negative = null;\n    }\n    if(smallest_positive === Number.MAX_SAFE_INTEGER){\n        smallest_positive = null;\n    }\n    return [largest_negative, smallest_positive];\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.01657619659630677,
        "bleu-0": 0.5566429114055872,
        "bleu-8": 0.4073351199531696,
        "bleu-7": 0.31665613379807955,
        "bleu-16": 0.6244881572774452,
        "bleu-2": 0.03995176926847725,
        "bleu-11": 0.3402724773374418,
        "bleu-1": 0.2558331837230212,
        "bleu-10": 0.04995293728303749,
        "bleu-17": 0.2160597495895473,
        "bleu-12": 0.5253757748520216,
        "bleu-6": 0.22661799951928047,
        "bleu-18": 0.452105507090002,
        "bleu-15": 0.04098946121113846,
        "bleu-13": 0.06565686004129104,
        "bleu-9": 0.4063022836041686,
        "bleu-4": 0.020099409249933652,
        "bleu-14": 0.3303625873584132,
        "bleu-5": 0.4706089036553196,
        "bleu-19": 0.3476375360290429,
        "codebleu-3": 0.1831978089178554,
        "codebleu-0": 0.7168193720964141,
        "codebleu-8": 0.6900986521519091,
        "codebleu-7": 0.6755276487826496,
        "codebleu-16": 0.7114735699953997,
        "codebleu-2": 0.5054853935450949,
        "codebleu-11": 0.6837372103127143,
        "codebleu-1": 0.6066457525875911,
        "codebleu-10": 0.29174750468719385,
        "codebleu-17": 0.6795869451254934,
        "codebleu-12": 0.6568258337265089,
        "codebleu-6": 0.6304473040403035,
        "codebleu-18": 0.6110697595373246,
        "codebleu-15": 0.28391526112234006,
        "codebleu-13": 0.3882379569713975,
        "codebleu-9": 0.713781596316985,
        "codebleu-4": 0.2573127800584233,
        "codebleu-14": 0.5777993009801973,
        "codebleu-5": 0.723638287106222,
        "codebleu-19": 0.6716020462842128,
        "chrf-3": 0.08609865723595057,
        "chrf-0": 0.6344752314320884,
        "chrf-8": 0.43383703146649244,
        "chrf-7": 0.37066598681111657,
        "chrf-16": 0.5593898181542393,
        "chrf-2": 0.20777806426409529,
        "chrf-11": 0.4202037260718281,
        "chrf-1": 0.305737818242282,
        "chrf-10": 0.21099260074703693,
        "chrf-17": 0.39832150109729175,
        "chrf-12": 0.5706158498105005,
        "chrf-6": 0.33124246917402983,
        "chrf-18": 0.4550883670830185,
        "chrf-15": 0.16154864933893914,
        "chrf-13": 0.18353829190999632,
        "chrf-9": 0.5642910561481914,
        "chrf-4": 0.10698165956037538,
        "chrf-14": 0.36791581861487577,
        "chrf-5": 0.4610692260232297,
        "chrf-19": 0.3754470118331205,
        "rougel-3": 0.25000000000000006,
        "rougel-0": 0.7129629629629629,
        "rougel-8": 0.578512396694215,
        "rougel-7": 0.4962962962962963,
        "rougel-16": 0.6820276497695852,
        "rougel-2": 0.3220338983050847,
        "rougel-11": 0.525096525096525,
        "rougel-1": 0.456,
        "rougel-10": 0.276595744680851,
        "rougel-17": 0.4555555555555556,
        "rougel-12": 0.7499999999999999,
        "rougel-6": 0.46048109965635736,
        "rougel-18": 0.5877192982456141,
        "rougel-15": 0.25136612021857924,
        "rougel-13": 0.33980582524271846,
        "rougel-9": 0.625,
        "rougel-4": 0.24277456647398846,
        "rougel-14": 0.5175438596491229,
        "rougel-5": 0.5897435897435899,
        "rougel-19": 0.6029411764705882,
        "meteor-3": 0.1765267175572519,
        "meteor-0": 0.7113477994604167,
        "meteor-8": 0.443238903375024,
        "meteor-7": 0.4310215134647209,
        "meteor-16": 0.6392660876426222,
        "meteor-2": 0.35532239461249393,
        "meteor-11": 0.4351841444112634,
        "meteor-1": 0.38788740742421285,
        "meteor-10": 0.20599250936329588,
        "meteor-17": 0.45295473290455895,
        "meteor-12": 0.5420222222222222,
        "meteor-6": 0.41490931681761345,
        "meteor-18": 0.5271980480255959,
        "meteor-15": 0.19126845470078907,
        "meteor-13": 0.32322663996025774,
        "meteor-9": 0.5894366197183099,
        "meteor-4": 0.2343662169162863,
        "meteor-14": 0.3774584837545127,
        "meteor-5": 0.5402036864118455,
        "meteor-19": 0.5367730931473829,
        "ruby-3": 0.13636363636363635,
        "ruby-0": 0.6363636363636364,
        "ruby-8": 0.5151515151515151,
        "ruby-7": 0.40625,
        "ruby-16": 0.5272727272727273,
        "ruby-2": 0.18253968253968256,
        "ruby-11": 0.44966442953020136,
        "ruby-1": 0.30000000000000004,
        "ruby-10": 0.17272727272727273,
        "ruby-17": 0.32799999999999996,
        "ruby-12": 0.6454545454545455,
        "ruby-6": 0.34806629834254144,
        "ruby-18": 0.44067796610169496,
        "ruby-15": 0.17272727272727273,
        "ruby-13": 0.2272727272727273,
        "ruby-9": 0.5342465753424658,
        "ruby-4": 0.1454545454545455,
        "ruby-14": 0.34745762711864403,
        "ruby-5": 0.3629032258064516,
        "ruby-19": 0.5061728395061729,
        "codebertscore_f1-3": 0.7537354826927185,
        "codebertscore_f3-3": 0.7486672401428223,
        "codebertscore_f1-0": 0.9112626314163208,
        "codebertscore_f3-0": 0.910371720790863,
        "codebertscore_f1-8": 0.8223986029624939,
        "codebertscore_f3-8": 0.826127827167511,
        "codebertscore_f1-7": 0.7982077598571777,
        "codebertscore_f3-7": 0.8151994943618774,
        "codebertscore_f1-16": 0.9169712066650391,
        "codebertscore_f3-16": 0.9062493443489075,
        "codebertscore_f1-2": 0.7963147759437561,
        "codebertscore_f3-2": 0.8116889595985413,
        "codebertscore_f1-11": 0.8268494009971619,
        "codebertscore_f3-11": 0.8263776898384094,
        "codebertscore_f1-1": 0.7678468823432922,
        "codebertscore_f3-1": 0.8071926832199097,
        "codebertscore_f1-10": 0.820669949054718,
        "codebertscore_f3-10": 0.8095846176147461,
        "codebertscore_f1-17": 0.7721636295318604,
        "codebertscore_f3-17": 0.8087020516395569,
        "codebertscore_f1-12": 0.9180565476417542,
        "codebertscore_f3-12": 0.9065793752670288,
        "codebertscore_f1-6": 0.7847589254379272,
        "codebertscore_f3-6": 0.8121926784515381,
        "codebertscore_f1-18": 0.8616824746131897,
        "codebertscore_f3-18": 0.8564531207084656,
        "codebertscore_f1-15": 0.7561507225036621,
        "codebertscore_f3-15": 0.7540943622589111,
        "codebertscore_f1-13": 0.8043537139892578,
        "codebertscore_f3-13": 0.8019959330558777,
        "codebertscore_f1-9": 0.8508734703063965,
        "codebertscore_f3-9": 0.8684129118919373,
        "codebertscore_f1-4": 0.7791792154312134,
        "codebertscore_f3-4": 0.7652071714401245,
        "codebertscore_f1-14": 0.8587085008621216,
        "codebertscore_f3-14": 0.870120108127594,
        "codebertscore_f1-5": 0.8598199486732483,
        "codebertscore_f3-5": 0.851417601108551,
        "codebertscore_f1-19": 0.7581395506858826,
        "codebertscore_f3-19": 0.7871443033218384,
        "codebertscore_s_f1-3": 0.7665135264396667,
        "codebertscore_s_f3-3": 0.7573999762535095,
        "codebertscore_s_f1-0": 0.915512204170227,
        "codebertscore_s_f3-0": 0.9142440557479858,
        "codebertscore_s_f1-8": 0.838840126991272,
        "codebertscore_s_f3-8": 0.8359708786010742,
        "codebertscore_s_f1-7": 0.8099409341812134,
        "codebertscore_s_f3-7": 0.8243603110313416,
        "codebertscore_s_f1-16": 0.9208837151527405,
        "codebertscore_s_f3-16": 0.9100301861763,
        "codebertscore_s_f1-2": 0.7993675470352173,
        "codebertscore_s_f3-2": 0.8165123462677002,
        "codebertscore_s_f1-11": 0.8377900123596191,
        "codebertscore_s_f3-11": 0.8346683382987976,
        "codebertscore_s_f1-1": 0.7987484931945801,
        "codebertscore_s_f3-1": 0.8270053267478943,
        "codebertscore_s_f1-10": 0.828894317150116,
        "codebertscore_s_f3-10": 0.8144487738609314,
        "codebertscore_s_f1-17": 0.7956715226173401,
        "codebertscore_s_f3-17": 0.8204569220542908,
        "codebertscore_s_f1-12": 0.9228938221931458,
        "codebertscore_s_f3-12": 0.9110663533210754,
        "codebertscore_s_f1-6": 0.8041707873344421,
        "codebertscore_s_f3-6": 0.820509672164917,
        "codebertscore_s_f1-18": 0.8640161156654358,
        "codebertscore_s_f3-18": 0.8580048084259033,
        "codebertscore_s_f1-15": 0.7599760890007019,
        "codebertscore_s_f3-15": 0.7581367492675781,
        "codebertscore_s_f1-13": 0.8061047196388245,
        "codebertscore_s_f3-13": 0.8034698367118835,
        "codebertscore_s_f1-9": 0.8575340509414673,
        "codebertscore_s_f3-9": 0.8735241293907166,
        "codebertscore_s_f1-4": 0.7856320738792419,
        "codebertscore_s_f3-4": 0.7695779800415039,
        "codebertscore_s_f1-14": 0.8629947900772095,
        "codebertscore_s_f3-14": 0.8751323819160461,
        "codebertscore_s_f1-5": 0.8673350214958191,
        "codebertscore_s_f3-5": 0.8573338389396667,
        "codebertscore_s_f1-19": 0.7951003313064575,
        "codebertscore_s_f3-19": 0.8191137313842773,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n",
        "snippet": [
            "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n"
        ],
        "simplified": "Return n-th Fibonacci number.",
        "task_id": "55",
        "3": "if(n==1 || n==2){\n        return 1;\n    }\n    return fib(n-1)+fib(n-2);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if(n===0) return 0;\n\tif(n===1) return 1;\n\treturn fib(n-1)+fib(n-2);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(n<=2){\n\t\treturn 1;\n\t}else{\n\t\treturn fib(n-1)+fib(n-2);\n\t}\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var a = 0, b = 1, f = 1;\n    for(var i = 2; i <= n; i++) {\n        f = a + b;\n        a = b;\n        b = f;\n    }\n    return f;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var a = 1, b = 0, temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n  }\n\n  return b;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// Base case.\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "}",
        "grade-11": {
            "execution": 0
        },
        "1": "var f = 1;\n  var f1 = 1;\n  var f2 = 1;\n  for (var i = 3; i <= n; i++) {\n    f = f1 + f2;\n    f1 = f2;\n    f2 = f;\n  }\n  return f;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var res = [];\n  if(n == 1){\n    return 1;\n  }else if(n == 2){\n    return 1;\n  }else{\n    for(var i = 1; i < n-1; i++){\n      res.push(fib(i));\n    }\n    return fib(n-1) + fib(n-2);\n  }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//fib(n-1) + fib(n-2)\n\tif(n === 1){\n\t\treturn 1;\n\t}else if(n === 2){\n\t\treturn 1;\n\t}else{\n\t\treturn fib(n-1) + fib(n-2);\n\t}\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(n==1 || n==2){\n\t\treturn 1;\n\t}\n\treturn fib(n-1)+fib(n-2);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (n === 0){\n    return 0;\n  }\n  else if (n === 1){\n    return 1;\n  }\n  else {\n    return fib(n-1) + fib(n-2);\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let a = 1;\n    let b = 1;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nmodule.exports = fib;",
        "grade-18": {
            "execution": 1
        },
        "15": "if(n==1) return 1;\n\tif(n==2) return 1;\n\tif(n==3) return 2;\n\tif(n==4) return 3;\n\tif(n==5) return 5;\n\treturn fib(n-1)+fib(n-2);\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(n == 0)\n    {\n        return 0;\n    }\n    else if(n == 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return fib(n-1) + fib(n-2);\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// fib(0) = 0, fib(1) = 1, fib(2) = 1, fib(3) = 2, fib(4) = 3, fib(5) = 5, fib(6) = 8\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "//YOUR CODE HERE\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(n <= 2){\n        return 1;\n    }\n    else{\n        return fib(n-1) + fib(n-2);\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var a = 1, b = 0, tmp;\n\twhile (n >= 0){\n\t\ttmp = a;\n\t\ta = a + b;\n\t\tb = tmp;\n\t\tn--;\n\t}\n\treturn b;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.6306188351364098,
        "bleu-0": 0.9304945259613737,
        "bleu-8": 0.5066403824728125,
        "bleu-7": 0.035956836861930505,
        "bleu-16": 0.06787022321918376,
        "bleu-2": 0.5141601168922609,
        "bleu-11": 6.305116760146992e-16,
        "bleu-1": 0.03162593967015063,
        "bleu-10": 0.3355158517159848,
        "bleu-17": 0.41736928267692286,
        "bleu-12": 0.6306188351364098,
        "bleu-6": 0.612526547934815,
        "bleu-18": 0.030397156830248746,
        "bleu-15": 0.4457685762088149,
        "bleu-13": 0.6576209490114578,
        "bleu-9": 0.28836754211266047,
        "bleu-4": 0.7260001819903148,
        "bleu-14": 0.0005468988016936943,
        "bleu-5": 0.5066403824728125,
        "bleu-19": 0.06787022321918376,
        "codebleu-3": 0.6827411461138696,
        "codebleu-0": 0.8931776590888002,
        "codebleu-8": 0.5701812751964231,
        "codebleu-7": 0.32100340136054417,
        "codebleu-16": 0.35416666666666663,
        "codebleu-2": 0.5767647813868053,
        "codebleu-11": 0.013605442176870748,
        "codebleu-1": 0.3180272108843537,
        "codebleu-10": 0.8152730501159294,
        "codebleu-17": 0.7880989620788067,
        "codebleu-12": 0.6827411461138696,
        "codebleu-6": 0.7857612273768909,
        "codebleu-18": 0.304421768707483,
        "codebleu-15": 0.87446483072868,
        "codebleu-13": 0.8476987295971476,
        "codebleu-9": 0.7453401685834026,
        "codebleu-4": 0.8727007106038278,
        "codebleu-14": 0.054441822121170734,
        "codebleu-5": 0.5701812751964231,
        "codebleu-19": 0.35416666666666663,
        "chrf-3": 0.6331606545237355,
        "chrf-0": 0.9550113374903024,
        "chrf-8": 0.5674403250426422,
        "chrf-7": 0.17363424437300046,
        "chrf-16": 0.15740721426472712,
        "chrf-2": 0.5261027484139097,
        "chrf-11": 0.02183406113537118,
        "chrf-1": 0.16324051179802923,
        "chrf-10": 0.6162425466511897,
        "chrf-17": 0.6464739824498111,
        "chrf-12": 0.6331606545237355,
        "chrf-6": 0.7377594756759523,
        "chrf-18": 0.1611678693762325,
        "chrf-15": 0.7128259644332711,
        "chrf-13": 0.7728623122082529,
        "chrf-9": 0.6044581309863796,
        "chrf-4": 0.800694315897233,
        "chrf-14": 0.0034293552812071334,
        "chrf-5": 0.5674403250426422,
        "chrf-19": 0.15617369394984681,
        "rougel-3": 0.7999999999999999,
        "rougel-0": 0.972972972972973,
        "rougel-8": 0.7164179104477612,
        "rougel-7": 0.2823529411764706,
        "rougel-16": 0.358974358974359,
        "rougel-2": 0.6666666666666666,
        "rougel-11": 0.05405405405405406,
        "rougel-1": 0.27586206896551724,
        "rougel-10": 0.5739130434782609,
        "rougel-17": 0.6804123711340206,
        "rougel-12": 0.7999999999999999,
        "rougel-6": 0.878048780487805,
        "rougel-18": 0.2471910112359551,
        "rougel-15": 0.6470588235294118,
        "rougel-13": 0.9,
        "rougel-9": 0.5454545454545454,
        "rougel-4": 0.9473684210526316,
        "rougel-14": 0.04761904761904762,
        "rougel-5": 0.7164179104477612,
        "rougel-19": 0.358974358974359,
        "meteor-3": 0.8043596675944441,
        "meteor-0": 0.9931429472750836,
        "meteor-8": 0.6707746478873239,
        "meteor-7": 0.2793085757786383,
        "meteor-16": 0.2984272588286939,
        "meteor-2": 0.6722222222222222,
        "meteor-11": 0.015384615384615384,
        "meteor-1": 0.25088541666666664,
        "meteor-10": 0.7700571835798983,
        "meteor-17": 0.8584348177773783,
        "meteor-12": 0.8043596675944441,
        "meteor-6": 0.962545879212546,
        "meteor-18": 0.22546419098143233,
        "meteor-15": 0.8679908615029721,
        "meteor-13": 0.9759963768115942,
        "meteor-9": 0.8479570840681951,
        "meteor-4": 0.9876861178944513,
        "meteor-14": 0.015151515151515152,
        "meteor-5": 0.6707746478873239,
        "meteor-19": 0.2984272588286939,
        "ruby-3": 0.7222222222222222,
        "ruby-0": 0.9473684210526316,
        "ruby-8": 0.5833333333333333,
        "ruby-7": 0.16326530612244894,
        "ruby-16": 0.26190476190476186,
        "ruby-2": 0.5277777777777778,
        "ruby-11": 0.02777777777777779,
        "ruby-1": 0.1568627450980392,
        "ruby-10": 0.4177215189873418,
        "ruby-17": 0.540983606557377,
        "ruby-12": 0.7222222222222222,
        "ruby-6": 0.782608695652174,
        "ruby-18": 0.13207547169811318,
        "ruby-15": 0.5,
        "ruby-13": 0.8181818181818181,
        "ruby-9": 0.375,
        "ruby-4": 0.9,
        "ruby-14": 0.02777777777777779,
        "ruby-5": 0.5833333333333333,
        "ruby-19": 0.26190476190476186,
        "codebertscore_f1-3": 0.9050112962722778,
        "codebertscore_f3-3": 0.9085361957550049,
        "codebertscore_f1-0": 0.9467236399650574,
        "codebertscore_f3-0": 0.9531422853469849,
        "codebertscore_f1-8": 0.8893213868141174,
        "codebertscore_f3-8": 0.8964864611625671,
        "codebertscore_f1-7": 0.7655960321426392,
        "codebertscore_f3-7": 0.787040650844574,
        "codebertscore_f1-16": 0.7663137316703796,
        "codebertscore_f3-16": 0.78419429063797,
        "codebertscore_f1-2": 0.8893685340881348,
        "codebertscore_f3-2": 0.9036616086959839,
        "codebertscore_f1-11": 0.0,
        "codebertscore_f3-11": 0.0,
        "codebertscore_f1-1": 0.7572482228279114,
        "codebertscore_f3-1": 0.7743263244628906,
        "codebertscore_f1-10": 0.8509280681610107,
        "codebertscore_f3-10": 0.889682948589325,
        "codebertscore_f1-17": 0.882617175579071,
        "codebertscore_f3-17": 0.899519145488739,
        "codebertscore_f1-12": 0.9022322297096252,
        "codebertscore_f3-12": 0.9060391783714294,
        "codebertscore_f1-6": 0.9549089074134827,
        "codebertscore_f3-6": 0.9668669104576111,
        "codebertscore_f1-18": 0.7405280470848083,
        "codebertscore_f3-18": 0.7746331095695496,
        "codebertscore_f1-15": 0.888818621635437,
        "codebertscore_f3-15": 0.8990954160690308,
        "codebertscore_f1-13": 0.9347517490386963,
        "codebertscore_f3-13": 0.9475122690200806,
        "codebertscore_f1-9": 0.886711061000824,
        "codebertscore_f3-9": 0.9200817942619324,
        "codebertscore_f1-4": 0.9687778353691101,
        "codebertscore_f3-4": 0.9687778949737549,
        "codebertscore_f1-14": 0.581357479095459,
        "codebertscore_f3-14": 0.5709517002105713,
        "codebertscore_f1-5": 0.918615460395813,
        "codebertscore_f3-5": 0.9153410196304321,
        "codebertscore_f1-19": 0.7631184458732605,
        "codebertscore_f3-19": 0.779629111289978,
        "codebertscore_s_f1-3": 0.9117202162742615,
        "codebertscore_s_f3-3": 0.9146044850349426,
        "codebertscore_s_f1-0": 0.9467698335647583,
        "codebertscore_s_f3-0": 0.9530130624771118,
        "codebertscore_s_f1-8": 0.8968430757522583,
        "codebertscore_s_f3-8": 0.9027923345565796,
        "codebertscore_s_f1-7": 0.7774012088775635,
        "codebertscore_s_f3-7": 0.7986776828765869,
        "codebertscore_s_f1-16": 0.7745498418807983,
        "codebertscore_s_f3-16": 0.7944588661193848,
        "codebertscore_s_f1-2": 0.8949388861656189,
        "codebertscore_s_f3-2": 0.9100921750068665,
        "codebertscore_s_f1-11": 0.0,
        "codebertscore_s_f3-11": 0.0,
        "codebertscore_s_f1-1": 0.7690268158912659,
        "codebertscore_s_f3-1": 0.7836608290672302,
        "codebertscore_s_f1-10": 0.856970489025116,
        "codebertscore_s_f3-10": 0.894092857837677,
        "codebertscore_s_f1-17": 0.8977330923080444,
        "codebertscore_s_f3-17": 0.9113051295280457,
        "codebertscore_s_f1-12": 0.9084431529045105,
        "codebertscore_s_f3-12": 0.9112529754638672,
        "codebertscore_s_f1-6": 0.959421694278717,
        "codebertscore_s_f3-6": 0.9705587029457092,
        "codebertscore_s_f1-18": 0.744979977607727,
        "codebertscore_s_f3-18": 0.7768702507019043,
        "codebertscore_s_f1-15": 0.8954026699066162,
        "codebertscore_s_f3-15": 0.9044559597969055,
        "codebertscore_s_f1-13": 0.930906355381012,
        "codebertscore_s_f3-13": 0.9432377219200134,
        "codebertscore_s_f1-9": 0.8834018707275391,
        "codebertscore_s_f3-9": 0.9148615002632141,
        "codebertscore_s_f1-4": 0.9723352789878845,
        "codebertscore_s_f3-4": 0.9723353385925293,
        "codebertscore_s_f1-14": 0.5587732791900635,
        "codebertscore_s_f3-14": 0.5508573055267334,
        "codebertscore_s_f1-5": 0.9255846738815308,
        "codebertscore_s_f3-5": 0.9220197796821594,
        "codebertscore_s_f1-19": 0.7738134860992432,
        "codebertscore_s_f3-19": 0.7928446531295776,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 0,
        "raw_gpt35_nsnr-11": "0",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "0",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n",
        "snippet": [
            "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n"
        ],
        "simplified": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
        "task_id": "65",
        "3": "var _x = x.toString();\n    if (shift > _x.length) {\n        return _x.split(\"\").reverse().join(\"\");\n    }\n    _x = _x.split(\"\");\n    for (var i = 0; i < shift; i++) {\n        _x.push(_x.shift());\n    }\n    return _x.join(\"\");\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let str = x.toString();\n  let result = '';\n  if(shift > str.length){\n    for(let i = str.length - 1; i >= 0; i--){\n      result += str[i];\n    }\n  }\n  else{\n    for(let i = str.length - shift; i < str.length; i++){\n      result += str[i];\n    }\n    for(let i = 0; i < str.length - shift; i++){\n      result += str[i];\n    }\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var str = x.toString();\n    var new_str = \"\";\n    var num_digits = str.length;\n    if (shift > num_digits){\n        for (var i = str.length-1; i >= 0; i--){\n            new_str += str[i];\n        }\n    }\n    else{\n        new_str = str.slice(shift, str.length) + str.slice(0, shift);\n    }\n    return new_str;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var x_string = x.toString();\n  var x_length = x_string.length;\n  var reversed_string = reverse_string(x_string);\n  var reversed_list = string_to_list(reversed_string);\n  var initial_shift = x_length - shift;\n  var circular_shifted_list = reversed_list.slice(initial_shift).concat(reversed_list.slice(0, initial_shift));\n  var circular_shifted_string = list_to_string(circular_shifted_list);\n  var result = reverse_string(circular_shifted_string);\n  return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (shift <= 0){\n        return to_str(x);\n    } else {\n        var last_digit = modulo(x, 10);\n        var remainder = floor(x / 10);\n        return circular_shift(10 * last_digit + remainder, shift - 1);\n    }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var sign = '';\n  if (x < 0){\n    sign = '-';\n    x = -x;\n  }\n  var xString = x.toString();\n  if (shift > xString.length){\n    return xString.split('').reverse().join('');\n  }\n  else {\n    return sign + xString.slice(xString.length - shift) + xString.slice(0, xString.length - shift);\n  }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "x = x.toString();\n  let new_x = \"\";\n  for(let i = 0; i < shift; i++){\n    let next_digit = x.substring(x.length - 1, x.length);\n    new_x = next_digit + new_x;\n    x = x.substring(0, x.length - 1);\n  }\n  return new_x + x;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "10": "var str = x.toString();\n    while(shift > str.length){\n        shift -= str.length;\n    }\n    return str.slice(str.length - shift) + str.slice(0, str.length - shift);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var str = x.toString();\n  var len = str.length;\n  // Shift can be more than number of digits\n  if(len < shift){\n    str = reverse(str);\n  }\n  else{\n    str = str.substring(len - shift, len) + str.substring(0, len - shift);\n  }\n  return str;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var x_array = reverse(string_to_array(x));\n  var shift_array = x_array.slice(0, shift);\n  var first_array = x_array.slice(shift);\n  var sum_array = first_array.concat(shift_array);\n  return array_to_string(reverse(sum_array));\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var digits = [];\n\t\n\t//Push each digit in number to an array\n\twhile(x > 0){\n\t\tdigits.push(x % 10);\n\t\tx = Math.floor(x / 10);\n\t}\n\t\n\tvar number_of_digits = digits.length;\n\t\n\t//If shift > number of digits, reverse the array and return it as a string\n\tif(shift > number_of_digits){\n\t\tdigits.reverse();\n\t\treturn digits.join(\"\");\n\t}\n\t\n\t//Else, shift the digits in the array\n\tfor(var i = 0; i < shift; i++){\n\t\tvar digit = digits.pop();\n\t\tdigits.unshift(digit);\n\t}\n\t\n\treturn digits.join(\"\");\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return (x.toString().length < shift) ? reverse(x.toString()) : x.toString().slice(shift) + x.toString().slice(0, shift);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "x = String(x)\n  var len = x.length\n  var len = (x.length - shift) % len\n  return x.slice(len) + x.slice(0, len)\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// convert integer to string and split it into an array of chars\n\tvar str = '' + x;\n\tvar a = str.split('');\n\t// create new array for our result\n\tvar b = [];\n\t// iterate over the chars from original array and push them to new array\n\tfor (var i = 0; i < a.length; i++) {\n\t\t// if our counter reaches the end of array, wrap around\n\t\tif(i + shift >= a.length){\n\t\t\tb.push(a[i + shift - a.length]);\n\t\t}\n\t\t// otherwise just push character from current position\n\t\telse{\n\t\t\tb.push(a[i + shift]);\n\t\t}\n\t}\n\t// join array into a string, return it\n\treturn b.join('');\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let x_str = x.toString();\n    let shift_num = shift.toString();\n    if (shift_num > x_str.length){\n        return x_str.split(\"\").reverse().join(\"\");\n    }\n    let post_rotation = x_str.substring(0, x_str.length - shift_num);\n    let pre_rotation = x_str.substring(x_str.length - shift_num, x_str.length);\n    return pre_rotation + post_rotation;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var z = x.toString().split(\"\");\n\tvar temp = \"\";\n\tfor(var i = 0; i < shift; i++){\n\t\ttemp = z.pop();\n\t\tz.unshift(temp);\n\t}\n\tz = z.join(\"\");\n\treturn z;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "x = \"\" + x; // Convert x to a string\n    var result = \"\";\n    var digits = \"\";\n    if (shift > x.length){\n        //We need to reverse the digits\n        for (var i = x.length - 1; i >= 0; i--){\n            digits += x[i];\n        }\n        return digits;\n    }\n    else{\n        //Shift the digits to the right.\n        for (var i = x.length - 1; i >= 0; i--){\n            var index = i - shift;\n            if (index < 0){\n                index = x.length + index;\n            }\n            result += x[index];\n        }\n        return result;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var str_x = String(x);\n\tvar str_x_len = str_x.length;\n\tif(shift >= str_x_len){\n\t\treturn str_x.split(\"\").reverse().join(\"\");\n\t}\n\tvar right_part = str_x.substring(str_x_len - shift, str_x_len);\n\tvar left_part = str_x.substring(0, str_x_len - shift);\n\treturn right_part + left_part;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let res = x.toString();\n    let len = res.length;\n    shift = shift % len;\n    let right = res.slice(len - shift);\n    let left = res.slice(0, len - shift);\n    return right + left;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.35881765409898636,
        "bleu-0": 0.12002583884589478,
        "bleu-8": 0.22509723485305666,
        "bleu-7": 0.182484479831856,
        "bleu-16": 0.06365013940042456,
        "bleu-2": 0.38061026099647777,
        "bleu-11": 0.16058837838749881,
        "bleu-1": 4.780892883885471e-25,
        "bleu-10": 0.3525809759087334,
        "bleu-17": 0.2081115020135872,
        "bleu-12": 0.15299807035736324,
        "bleu-6": 0.11789143563472392,
        "bleu-18": 0.2795125951198655,
        "bleu-15": 0.13547600000587345,
        "bleu-13": 0.09548955031721595,
        "bleu-9": 0.34134256917240363,
        "bleu-4": 0.2929697841072588,
        "bleu-14": 0.05649251318360636,
        "bleu-5": 0.35696312386860646,
        "bleu-19": 0.2884310625998258,
        "codebleu-3": 0.7015863295541817,
        "codebleu-0": 0.5761071231589393,
        "codebleu-8": 0.58548706415372,
        "codebleu-7": 0.5239495578848589,
        "codebleu-16": 0.36607330904831586,
        "codebleu-2": 0.7280494809320741,
        "codebleu-11": 0.4984696191673998,
        "codebleu-1": 0.014981273408239699,
        "codebleu-10": 0.5404527184420757,
        "codebleu-17": 0.5240136583187694,
        "codebleu-12": 0.44416875927897476,
        "codebleu-6": 0.6291863079708275,
        "codebleu-18": 0.4968444401120644,
        "codebleu-15": 0.3745124724624677,
        "codebleu-13": 0.6121131703968742,
        "codebleu-9": 0.7234288305349419,
        "codebleu-4": 0.5648356853764522,
        "codebleu-14": 0.5349143670964519,
        "codebleu-5": 0.6661071626846834,
        "codebleu-19": 0.47498529782100257,
        "chrf-3": 0.5016396486234892,
        "chrf-0": 0.337805754637321,
        "chrf-8": 0.42103485670799806,
        "chrf-7": 0.3107391359395898,
        "chrf-16": 0.2511032907398075,
        "chrf-2": 0.6473614050402535,
        "chrf-11": 0.27650989422871286,
        "chrf-1": 0.010845986984815616,
        "chrf-10": 0.4839822733409572,
        "chrf-17": 0.40175024663950315,
        "chrf-12": 0.3354680043996849,
        "chrf-6": 0.2959924571760714,
        "chrf-18": 0.45981709673273796,
        "chrf-15": 0.3031901990972534,
        "chrf-13": 0.29030430389458717,
        "chrf-9": 0.4409044807712151,
        "chrf-4": 0.3026188348488424,
        "chrf-14": 0.2808278027065159,
        "chrf-5": 0.4299746871120542,
        "chrf-19": 0.44540987820431593,
        "rougel-3": 0.5972222222222222,
        "rougel-0": 0.35555555555555557,
        "rougel-8": 0.44897959183673464,
        "rougel-7": 0.3884892086330935,
        "rougel-16": 0.36363636363636365,
        "rougel-2": 0.6540880503144654,
        "rougel-11": 0.3880597014925373,
        "rougel-1": 0.034482758620689655,
        "rougel-10": 0.6181818181818182,
        "rougel-17": 0.49230769230769234,
        "rougel-12": 0.36363636363636365,
        "rougel-6": 0.31683168316831684,
        "rougel-18": 0.5740740740740741,
        "rougel-15": 0.4489795918367347,
        "rougel-13": 0.25,
        "rougel-9": 0.5753424657534246,
        "rougel-4": 0.432,
        "rougel-14": 0.2561576354679803,
        "rougel-5": 0.626865671641791,
        "rougel-19": 0.4821428571428571,
        "meteor-3": 0.5829237555135476,
        "meteor-0": 0.40183082457882535,
        "meteor-8": 0.53298350602727,
        "meteor-7": 0.40301835019722176,
        "meteor-16": 0.2551775147928994,
        "meteor-2": 0.7985489729157645,
        "meteor-11": 0.3969147245762712,
        "meteor-1": 0.009727626459143967,
        "meteor-10": 0.5729166666666666,
        "meteor-17": 0.4601727380371944,
        "meteor-12": 0.36676864132253284,
        "meteor-6": 0.5102330752475711,
        "meteor-18": 0.5422112739536545,
        "meteor-15": 0.3803176895306858,
        "meteor-13": 0.4369752863338152,
        "meteor-9": 0.6575260674769029,
        "meteor-4": 0.41272963574414273,
        "meteor-14": 0.37793101934575035,
        "meteor-5": 0.7610814004342789,
        "meteor-19": 0.47112676056338015,
        "ruby-3": 0.48275862068965514,
        "ruby-0": 0.24390243902439024,
        "ruby-8": 0.3222222222222222,
        "ruby-7": 0.29268292682926833,
        "ruby-16": 0.17543859649122806,
        "ruby-2": 0.5098039215686274,
        "ruby-11": 0.2727272727272727,
        "ruby-1": 0.01754385964912286,
        "ruby-10": 0.4736842105263158,
        "ruby-17": 0.3972602739726028,
        "ruby-12": 0.22807017543859653,
        "ruby-6": 0.2068965517241379,
        "ruby-18": 0.4035087719298246,
        "ruby-15": 0.368421052631579,
        "ruby-13": 0.15568862275449102,
        "ruby-9": 0.4719101123595506,
        "ruby-4": 0.25,
        "ruby-14": 0.1643835616438356,
        "ruby-5": 0.5064935064935066,
        "ruby-19": 0.2807017543859649,
        "codebertscore_f1-3": 0.8366685509681702,
        "codebertscore_f3-3": 0.8443768620491028,
        "codebertscore_f1-0": 0.7788790464401245,
        "codebertscore_f3-0": 0.8061745762825012,
        "codebertscore_f1-8": 0.801119863986969,
        "codebertscore_f3-8": 0.8282016515731812,
        "codebertscore_f1-7": 0.75863116979599,
        "codebertscore_f3-7": 0.7932904362678528,
        "codebertscore_f1-16": 0.7404159307479858,
        "codebertscore_f3-16": 0.7442539930343628,
        "codebertscore_f1-2": 0.8635403513908386,
        "codebertscore_f3-2": 0.8876972198486328,
        "codebertscore_f1-11": 0.7957727313041687,
        "codebertscore_f3-11": 0.811249315738678,
        "codebertscore_f1-1": 0.0,
        "codebertscore_f3-1": 0.0,
        "codebertscore_f1-10": 0.8777827620506287,
        "codebertscore_f3-10": 0.8708309531211853,
        "codebertscore_f1-17": 0.8358079195022583,
        "codebertscore_f3-17": 0.8580397963523865,
        "codebertscore_f1-12": 0.7729418873786926,
        "codebertscore_f3-12": 0.7825959324836731,
        "codebertscore_f1-6": 0.7102359533309937,
        "codebertscore_f3-6": 0.7401389479637146,
        "codebertscore_f1-18": 0.8553246855735779,
        "codebertscore_f3-18": 0.825156033039093,
        "codebertscore_f1-15": 0.8340529203414917,
        "codebertscore_f3-15": 0.8260433077812195,
        "codebertscore_f1-13": 0.7023994326591492,
        "codebertscore_f3-13": 0.7426714301109314,
        "codebertscore_f1-9": 0.8177568316459656,
        "codebertscore_f3-9": 0.8459794521331787,
        "codebertscore_f1-4": 0.7784112095832825,
        "codebertscore_f3-4": 0.7819790840148926,
        "codebertscore_f1-14": 0.708848237991333,
        "codebertscore_f3-14": 0.7505158185958862,
        "codebertscore_f1-5": 0.816317081451416,
        "codebertscore_f3-5": 0.8419927358627319,
        "codebertscore_f1-19": 0.8325098156929016,
        "codebertscore_f3-19": 0.8380640745162964,
        "codebertscore_s_f1-3": 0.8319562077522278,
        "codebertscore_s_f3-3": 0.8429890275001526,
        "codebertscore_s_f1-0": 0.7769107818603516,
        "codebertscore_s_f3-0": 0.8064293265342712,
        "codebertscore_s_f1-8": 0.801118791103363,
        "codebertscore_s_f3-8": 0.8305783271789551,
        "codebertscore_s_f1-7": 0.758385181427002,
        "codebertscore_s_f3-7": 0.795785665512085,
        "codebertscore_s_f1-16": 0.7520323991775513,
        "codebertscore_s_f3-16": 0.7609472870826721,
        "codebertscore_s_f1-2": 0.8544152975082397,
        "codebertscore_s_f3-2": 0.8754727244377136,
        "codebertscore_s_f1-11": 0.793724536895752,
        "codebertscore_s_f3-11": 0.8113059401512146,
        "codebertscore_s_f1-1": 0.0,
        "codebertscore_s_f3-1": 0.0,
        "codebertscore_s_f1-10": 0.8813360929489136,
        "codebertscore_s_f3-10": 0.875394880771637,
        "codebertscore_s_f1-17": 0.8351573944091797,
        "codebertscore_s_f3-17": 0.8591145277023315,
        "codebertscore_s_f1-12": 0.7753666639328003,
        "codebertscore_s_f3-12": 0.7871008515357971,
        "codebertscore_s_f1-6": 0.715334415435791,
        "codebertscore_s_f3-6": 0.7485724091529846,
        "codebertscore_s_f1-18": 0.870988667011261,
        "codebertscore_s_f3-18": 0.839422345161438,
        "codebertscore_s_f1-15": 0.832656979560852,
        "codebertscore_s_f3-15": 0.824370801448822,
        "codebertscore_s_f1-13": 0.7146591544151306,
        "codebertscore_s_f3-13": 0.7624329924583435,
        "codebertscore_s_f1-9": 0.8146924376487732,
        "codebertscore_s_f3-9": 0.8446861505508423,
        "codebertscore_s_f1-4": 0.7863385677337646,
        "codebertscore_s_f3-4": 0.7926291227340698,
        "codebertscore_s_f1-14": 0.7152664065361023,
        "codebertscore_s_f3-14": 0.7577440142631531,
        "codebertscore_s_f1-5": 0.8112660646438599,
        "codebertscore_s_f3-5": 0.8380034565925598,
        "codebertscore_s_f1-19": 0.8360442519187927,
        "codebertscore_s_f3-19": 0.8447487950325012,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 3,
        "raw_gpt35_nsnr-16": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "0",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 2,
        "raw_gpt35_nswr-12": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n",
        "snippet": [
            "  return Math.max(...l);\n}\n\n"
        ],
        "simplified": "Return maximum element in the list.",
        "task_id": "35",
        "0": "var max = -Infinity;\n\tvar length = l.length;\n\tfor(var i = 0; i < length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return reduce(l, function(acc, e){return Math.max(acc, e)});\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "}",
        "grade-2": {
            "execution": 0
        },
        "3": "return _.max(l);\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var max = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return Math.max.apply(null, l);\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "let max = l[0];\n    for(let e of l){\n        if(e > max){\n            max = e;\n        }\n    }\n    return max;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "if(is_null(l)){\n        return error(max_element, \"empty list\");\n    }\n    else{\n        return max_element_max(car(l), cdr(l));\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "let i = l.length;\n    let max = l[0];\n    while(i--){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "if(l.length === 0){\n        return null;\n    }\n    var max = 0;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "if(length(l) == 0){\n        return \"Cannot calculate max element of empty list.\";\n    } else {\n        var max = l[0];\n        for(var i = 1; i < length(l); i++){\n            if(l[i] > max){\n                max = l[i];\n            }\n        }\n        return max;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var max = 0;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "// If list empty, return undefined\n   if (l.length == 0) {\n    return undefined;\n   }\n\n   let max = l[0];\n   for (let i = 1; i < l.length; i++) {\n     max = Math.max(max, l[i]);\n   }\n   return max;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "if(l.length == 0){\n    return 0;\n  }\n  var h = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > h){\n      h = l[i];\n    }\n  }\n  return h;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "return l.reduce(function(a, b) {\n    return Math.max(a, b);\n  });\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "if(l.length == 0){\n\t\treturn null;\n\t}else{\n\t\tif(l.length == 1){\n\t\t\treturn l[0];\n\t\t}else{\n\t\t\tif(l[0] > l[1]){\n\t\t\t\tl.splice(1, 1);\n\t\t\t\treturn max_element(l);\n\t\t\t}else{\n\t\t\t\tl.splice(0, 1);\n\t\t\t\treturn max_element(l);\n\t\t\t}\n\t\t}\n\t}\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return Math.max.apply(null, l);\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "return Math.max.apply(null, l);\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var m = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > m){\n      m = l[i];\n    }\n  }\n  return m;\n}",
        "grade-18": {
            "execution": 1
        },
        "bleu-0": 0.019806835695592745,
        "bleu-1": 0.19422069098763883,
        "bleu-2": 1.6701700790245666e-05,
        "bleu-3": 0.31980484392563446,
        "bleu-4": 0.021058466792450905,
        "bleu-5": 0.4089601472043678,
        "bleu-6": 0.036536151167279006,
        "bleu-7": 0.04747573105125849,
        "bleu-8": 0.022996104098636838,
        "bleu-9": 0.017312024496848318,
        "bleu-10": 0.02465448790945244,
        "bleu-11": 0.022479007417262973,
        "bleu-12": 0.054725907095198076,
        "bleu-13": 0.016262850471799453,
        "bleu-14": 0.19124813148884037,
        "bleu-15": 0.033334218165712394,
        "bleu-16": 0.4089601472043678,
        "bleu-17": 0.4089601472043678,
        "bleu-18": 0.020367079635817534,
        "codebleu-0": 0.4779411764705882,
        "codebleu-1": 0.5991593308508809,
        "codebleu-2": 0.07843154652506949,
        "codebleu-3": 0.5742397701622706,
        "codebleu-4": 0.4779411764705882,
        "codebleu-5": 0.6453659068870023,
        "codebleu-6": 0.4283088235294117,
        "codebleu-7": 0.4571078431372549,
        "codebleu-8": 0.4779411764705882,
        "codebleu-9": 0.5275735294117647,
        "codebleu-10": 0.4779411764705882,
        "codebleu-11": 0.4779411764705882,
        "codebleu-12": 0.5575278472609644,
        "codebleu-13": 0.517156862745098,
        "codebleu-14": 0.5698648846599047,
        "codebleu-15": 0.5435458991060501,
        "codebleu-16": 0.6453659068870023,
        "codebleu-17": 0.6453659068870023,
        "codebleu-18": 0.4675245098039215,
        "chrf-0": 0.18235015940244295,
        "chrf-1": 0.5148020323643225,
        "chrf-2": 0.056179775280898875,
        "chrf-3": 0.3975255288060048,
        "chrf-4": 0.20803636809354706,
        "chrf-5": 0.6301067810670711,
        "chrf-6": 0.2207736155686714,
        "chrf-7": 0.19138210537847847,
        "chrf-8": 0.21073521509203533,
        "chrf-9": 0.18278139183782777,
        "chrf-10": 0.1540716906985473,
        "chrf-11": 0.2121110908293003,
        "chrf-12": 0.2714624089631078,
        "chrf-13": 0.16844621237812316,
        "chrf-14": 0.5326356734248254,
        "chrf-15": 0.16169761957119125,
        "chrf-16": 0.6301067810670711,
        "chrf-17": 0.6301067810670711,
        "chrf-18": 0.19688228794059287,
        "rougel-0": 0.1875,
        "rougel-1": 0.43243243243243246,
        "rougel-2": 0.15384615384615385,
        "rougel-3": 0.761904761904762,
        "rougel-4": 0.22950819672131142,
        "rougel-5": 0.7199999999999999,
        "rougel-6": 0.26666666666666666,
        "rougel-7": 0.23999999999999996,
        "rougel-8": 0.2456140350877193,
        "rougel-9": 0.2191780821917808,
        "rougel-10": 0.1797752808988764,
        "rougel-11": 0.2413793103448276,
        "rougel-12": 0.2531645569620253,
        "rougel-13": 0.18666666666666668,
        "rougel-14": 0.42105263157894735,
        "rougel-15": 0.18556701030927836,
        "rougel-16": 0.7199999999999999,
        "rougel-17": 0.7199999999999999,
        "rougel-18": 0.19672131147540983,
        "meteor-0": 0.33251953125,
        "meteor-1": 0.6186763204307064,
        "meteor-2": 0.04587155963302752,
        "meteor-3": 0.6410256410256411,
        "meteor-4": 0.3388734076433121,
        "meteor-5": 0.737190082644628,
        "meteor-6": 0.34013605442176875,
        "meteor-7": 0.2920471841704719,
        "meteor-8": 0.34773284313725494,
        "meteor-9": 0.34553290963547373,
        "meteor-10": 0.21621621621621623,
        "meteor-11": 0.3454748376623376,
        "meteor-12": 0.39244391971664705,
        "meteor-13": 0.31112938596491235,
        "meteor-14": 0.6656716417910449,
        "meteor-15": 0.3854922279792747,
        "meteor-16": 0.737190082644628,
        "meteor-17": 0.737190082644628,
        "meteor-18": 0.30547250747432736,
        "ruby-0": 0.11538461538461542,
        "ruby-1": 0.31999999999999995,
        "ruby-2": 0.08333333333333337,
        "ruby-3": 0.6666666666666667,
        "ruby-4": 0.12244897959183676,
        "ruby-5": 0.6153846153846154,
        "ruby-6": 0.1515151515151515,
        "ruby-7": 0.1578947368421053,
        "ruby-8": 0.15555555555555556,
        "ruby-9": 0.1311475409836066,
        "ruby-10": 0.10389610389610393,
        "ruby-11": 0.13043478260869568,
        "ruby-12": 0.14925373134328357,
        "ruby-13": 0.11111111111111116,
        "ruby-14": 0.3076923076923077,
        "ruby-15": 0.10588235294117643,
        "ruby-16": 0.6153846153846154,
        "ruby-17": 0.6153846153846154,
        "ruby-18": 0.12244897959183676,
        "codebertscore_f1-0": 0.7551072239875793,
        "codebertscore_f3-0": 0.7992445230484009,
        "codebertscore_f1-1": 0.8796855807304382,
        "codebertscore_f3-1": 0.9332633018493652,
        "codebertscore_f1-2": 0.0,
        "codebertscore_f3-2": 0.0,
        "codebertscore_f1-3": 0.9512729048728943,
        "codebertscore_f3-3": 0.9299128651618958,
        "codebertscore_f1-4": 0.7600283026695251,
        "codebertscore_f3-4": 0.7915990948677063,
        "codebertscore_f1-5": 0.9099569320678711,
        "codebertscore_f3-5": 0.9565764665603638,
        "codebertscore_f1-6": 0.7579534649848938,
        "codebertscore_f3-6": 0.7903605699539185,
        "codebertscore_f1-7": 0.7537767291069031,
        "codebertscore_f3-7": 0.7996181845664978,
        "codebertscore_f1-8": 0.7633217573165894,
        "codebertscore_f3-8": 0.7983378171920776,
        "codebertscore_f1-9": 0.7295575737953186,
        "codebertscore_f3-9": 0.7673608660697937,
        "codebertscore_f1-10": 0.7101704478263855,
        "codebertscore_f3-10": 0.7594301700592041,
        "codebertscore_f1-11": 0.7588892579078674,
        "codebertscore_f3-11": 0.793066680431366,
        "codebertscore_f1-12": 0.7631834745407104,
        "codebertscore_f3-12": 0.8226698040962219,
        "codebertscore_f1-13": 0.7243473529815674,
        "codebertscore_f3-13": 0.7548069953918457,
        "codebertscore_f1-14": 0.8577277660369873,
        "codebertscore_f3-14": 0.9169537425041199,
        "codebertscore_f1-15": 0.7104632258415222,
        "codebertscore_f3-15": 0.7527267932891846,
        "codebertscore_f1-16": 0.9099569320678711,
        "codebertscore_f3-16": 0.9565764665603638,
        "codebertscore_f1-17": 0.9099569320678711,
        "codebertscore_f3-17": 0.9565764665603638,
        "codebertscore_f1-18": 0.7485598921775818,
        "codebertscore_f3-18": 0.7773459553718567,
        "codebertscore_s_f1-0": 0.7432750463485718,
        "codebertscore_s_f3-0": 0.7880833148956299,
        "codebertscore_s_f1-1": 0.8779798150062561,
        "codebertscore_s_f3-1": 0.9420278668403625,
        "codebertscore_s_f1-2": 0.0,
        "codebertscore_s_f3-2": 0.0,
        "codebertscore_s_f1-3": 0.942919909954071,
        "codebertscore_s_f3-3": 0.911681592464447,
        "codebertscore_s_f1-4": 0.7459129691123962,
        "codebertscore_s_f3-4": 0.7842060923576355,
        "codebertscore_s_f1-5": 0.8955996036529541,
        "codebertscore_s_f3-5": 0.958695113658905,
        "codebertscore_s_f1-6": 0.7524635791778564,
        "codebertscore_s_f3-6": 0.7960257530212402,
        "codebertscore_s_f1-7": 0.7473706603050232,
        "codebertscore_s_f3-7": 0.8070546984672546,
        "codebertscore_s_f1-8": 0.7476832270622253,
        "codebertscore_s_f3-8": 0.7878789305686951,
        "codebertscore_s_f1-9": 0.7236825823783875,
        "codebertscore_s_f3-9": 0.7714020013809204,
        "codebertscore_s_f1-10": 0.7036546468734741,
        "codebertscore_s_f3-10": 0.7704929113388062,
        "codebertscore_s_f1-11": 0.74615877866745,
        "codebertscore_s_f3-11": 0.7855331897735596,
        "codebertscore_s_f1-12": 0.775421679019928,
        "codebertscore_s_f3-12": 0.8645562529563904,
        "codebertscore_s_f1-13": 0.7198191285133362,
        "codebertscore_s_f3-13": 0.7570069432258606,
        "codebertscore_s_f1-14": 0.8653769493103027,
        "codebertscore_s_f3-14": 0.9369940161705017,
        "codebertscore_s_f1-15": 0.7037438750267029,
        "codebertscore_s_f3-15": 0.7524141669273376,
        "codebertscore_s_f1-16": 0.8955996036529541,
        "codebertscore_s_f3-16": 0.958695113658905,
        "codebertscore_s_f1-17": 0.8955996036529541,
        "codebertscore_s_f3-17": 0.958695113658905,
        "codebertscore_s_f1-18": 0.7310763001441956,
        "codebertscore_s_f3-18": 0.7585437893867493,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4"
    },
    {
        "intent": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunction solution(lst){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
        "task_id": "121",
        "3": "//..\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let result = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0 && i % 2 === 0){\n      result += lst[i];\n    }\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return lst.filter((_, i) => i % 2).reduce((a, b) => a + b, 0);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(!lst) return 0;\n    return lst.filter((x,i)=> i%2 === 0 && x%2!==0).reduce((a,b)=>a+b,0);\n  }",
        "grade-7": {
            "execution": 1
        },
        "16": "let sum = 0;\n  for(let i = 1; i < lst.length; i += 2){\n    if(lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let lst1 = lst.filter((v,i)=> i%2 === 0);\n  let lst2 = lst1.filter(x => x%2 === 1);\n  return lst2.reduce((a,b)=> a+b,0);\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let evenLst = lst.filter((num, i) => i % 2 === 0);\n  let oddLst = evenLst.filter(num => num % 2 !== 0);\n  let oddSum = oddLst.reduce((a, b) => a + b, 0);\n  return oddSum;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return lst.filter((element, index) => index % 2 == 0 && element % 2 == 1).reduce((acc, element) => acc + element, 0);\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//..\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//TODO: code me\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let oddElements = lst.filter((element, index) => (element % 2) !== 0 && (index % 2) == 0);\n    let total = oddElements.reduce((a, b) => a + b, 0);\n    return total;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "//return lst.filter((x, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a, b) => a + b, 0);\n    return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) => a + b, 0);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var res = 0;\n  for(var i = 1; i < lst.length; i += 2){\n    if(lst[i] % 2 == 0){\n      res += lst[i];\n    }\n  }\n  return res;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//coding and coding..\n    return lst.filter((v,i)=>i%2===0).filter(v=>v%2!==0).reduce((a,v)=>a+v,0)\n  }",
        "grade-13": {
            "execution": 1
        },
        "9": "let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            if(lst[i] % 2 !== 0){\n                result += lst[i];\n            }\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "// Write your code here\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return lst.filter((e,i)=>i%2===1&&e%2===1).reduce((a,b)=>a+b,0)\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let result = 0;\n  let evenPosition = [lst[1], lst[3]];\n  for (let i = 0; i < evenPosition.length; i++) {\n    if (evenPosition[i] % 2 != 0) {\n      result += evenPosition[i];\n    }\n  }\n  return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "// a place to store the results\n    let sum = 0;\n    // iterate of over the list\n    for(let i = 0; i < lst.length; i++){\n      // check if the current index is odd\n      if(i % 2 === 1){\n        // check if the current number is odd\n        if(lst[i] % 2 === 1){\n          // add it to the results\n          sum += lst[i];\n        }\n      }\n    }\n    // return the results\n    return sum;\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  //I like to comment these out when I am done with them\n  \n  // //Return the sum of all of the even elements in a list of numbers.\n  // // Examples\n  // // solution([1, 2, 3, 4, 5]) ==> 6\n  // // solution([22, 21, 15, 11, 9]) ==> 42\n  // // solution([6, 4, 7, 10, 20]) ==> 30\n  // function solution(lst){\n  //   // a place to store the results\n  //   let sum = 0;\n  //   // iterate of over the list\n  //   for(let i = 0; i < lst.length; i++){\n  //     // check if the current number is even\n  //     if(lst[i] % 2 === 0){\n  //       // add it to the results\n  //       sum += lst[i];\n  //     }\n  //   }\n  //   // return the results\n  //   return sum;\n  // }",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.487316698612832,
        "bleu-0": 0.5356459645920453,
        "bleu-8": 0.03240908541455288,
        "bleu-7": 0.08443342703119651,
        "bleu-16": 0.6800173116780411,
        "bleu-2": 0.10658712251234112,
        "bleu-11": 0.0610973550321404,
        "bleu-1": 0.14105120224500944,
        "bleu-10": 0.4717174889269764,
        "bleu-17": 0.0001877847682063057,
        "bleu-12": 0.03538943483396551,
        "bleu-6": 0.06664019233237575,
        "bleu-18": 0.5473625375227709,
        "bleu-15": 0.6327341351220656,
        "bleu-13": 0.07135716548794115,
        "bleu-9": 0.490950074428008,
        "bleu-4": 0.4570861226391982,
        "bleu-14": 0.12269044492483161,
        "bleu-5": 0.3208618230000843,
        "bleu-19": 0.059785198360798236,
        "codebleu-3": 0.7620275305768861,
        "codebleu-0": 0.7599813981390782,
        "codebleu-8": 0.27096790688787803,
        "codebleu-7": 0.42164799541429027,
        "codebleu-16": 0.8777301580069462,
        "codebleu-2": 0.45741098506518807,
        "codebleu-11": 0.44705157937404355,
        "codebleu-1": 0.373901209899179,
        "codebleu-10": 0.7594276622959102,
        "codebleu-17": 0.04041198318665713,
        "codebleu-12": 0.43131313131313126,
        "codebleu-6": 0.4462077088230727,
        "codebleu-18": 0.7849139582739971,
        "codebleu-15": 0.8642940730253947,
        "codebleu-13": 0.4174484164702124,
        "codebleu-9": 0.7424310730107285,
        "codebleu-4": 0.7670901113489572,
        "codebleu-14": 0.36232509013079434,
        "codebleu-5": 0.7287294957525393,
        "codebleu-19": 0.7137520785146785,
        "chrf-3": 0.6331032188933828,
        "chrf-0": 0.6555560805688375,
        "chrf-8": 0.1411612304532903,
        "chrf-7": 0.19451926484784385,
        "chrf-16": 0.7246800747538998,
        "chrf-2": 0.2217496336410444,
        "chrf-11": 0.19372309040471325,
        "chrf-1": 0.19888408538525573,
        "chrf-10": 0.6296481553026944,
        "chrf-17": 0.011185682326621925,
        "chrf-12": 0.181267912255855,
        "chrf-6": 0.18494414751318744,
        "chrf-18": 0.6691014545622945,
        "chrf-15": 0.6535864834964569,
        "chrf-13": 0.17245634128902954,
        "chrf-9": 0.639698812844453,
        "chrf-4": 0.6048912947528151,
        "chrf-14": 0.17044313122996635,
        "chrf-5": 0.4282254321774023,
        "chrf-19": 0.20895560922577194,
        "rougel-3": 0.7454545454545455,
        "rougel-0": 0.7777777777777777,
        "rougel-8": 0.24390243902439027,
        "rougel-7": 0.2912621359223301,
        "rougel-16": 0.8686868686868686,
        "rougel-2": 0.3090909090909091,
        "rougel-11": 0.2809917355371901,
        "rougel-1": 0.2580645161290323,
        "rougel-10": 0.75,
        "rougel-17": 0.03636363636363636,
        "rougel-12": 0.29090909090909095,
        "rougel-6": 0.25675675675675674,
        "rougel-18": 0.7962962962962963,
        "rougel-15": 0.8282828282828283,
        "rougel-13": 0.26415094339622647,
        "rougel-9": 0.7747747747747749,
        "rougel-4": 0.7368421052631579,
        "rougel-14": 0.2765957446808511,
        "rougel-5": 0.6495726495726495,
        "rougel-19": 0.1501706484641638,
        "meteor-3": 0.8418353576248312,
        "meteor-0": 0.8362190103382515,
        "meteor-8": 0.2127359401220726,
        "meteor-7": 0.3239250088089133,
        "meteor-16": 0.9204457735858702,
        "meteor-2": 0.35462588094167047,
        "meteor-11": 0.30588250151545765,
        "meteor-1": 0.3349099918568186,
        "meteor-10": 0.846689565909996,
        "meteor-17": 0.011389521640091117,
        "meteor-12": 0.2720317420152946,
        "meteor-6": 0.3346700083542189,
        "meteor-18": 0.8744855967078189,
        "meteor-15": 0.8779688422033285,
        "meteor-13": 0.28031708551189066,
        "meteor-9": 0.8401346801346802,
        "meteor-4": 0.8432892062075462,
        "meteor-14": 0.3229824963814255,
        "meteor-5": 0.7601124282048147,
        "meteor-19": 0.4368130329642358,
        "ruby-3": 0.6451612903225806,
        "ruby-0": 0.6833333333333333,
        "ruby-8": 0.1875,
        "ruby-7": 0.1636363636363637,
        "ruby-16": 0.8431372549019608,
        "ruby-2": 0.24193548387096775,
        "ruby-11": 0.2191780821917808,
        "ruby-1": 0.10416666666666663,
        "ruby-10": 0.640625,
        "ruby-17": 0.02083333333333337,
        "ruby-12": 0.16129032258064513,
        "ruby-6": 0.17000000000000004,
        "ruby-18": 0.7,
        "ruby-15": 0.803921568627451,
        "ruby-13": 0.1724137931034483,
        "ruby-9": 0.6825396825396826,
        "ruby-4": 0.6212121212121212,
        "ruby-14": 0.125,
        "ruby-5": 0.536231884057971,
        "ruby-19": 0.08178438661710041,
        "codebertscore_f1-3": 0.9281352162361145,
        "codebertscore_f3-3": 0.9343398809432983,
        "codebertscore_f1-0": 0.9392333626747131,
        "codebertscore_f3-0": 0.944686770439148,
        "codebertscore_f1-8": 0.8039103150367737,
        "codebertscore_f3-8": 0.8062488436698914,
        "codebertscore_f1-7": 0.7969114780426025,
        "codebertscore_f3-7": 0.8023104071617126,
        "codebertscore_f1-16": 0.9612139463424683,
        "codebertscore_f3-16": 0.9623163938522339,
        "codebertscore_f1-2": 0.8115677833557129,
        "codebertscore_f3-2": 0.8236921429634094,
        "codebertscore_f1-11": 0.8019235730171204,
        "codebertscore_f3-11": 0.8172624111175537,
        "codebertscore_f1-1": 0.7788856029510498,
        "codebertscore_f3-1": 0.7826988101005554,
        "codebertscore_f1-10": 0.9293505549430847,
        "codebertscore_f3-10": 0.9356924295425415,
        "codebertscore_f1-17": 0.6178762912750244,
        "codebertscore_f3-17": 0.6094530820846558,
        "codebertscore_f1-12": 0.7891253232955933,
        "codebertscore_f3-12": 0.8016225695610046,
        "codebertscore_f1-6": 0.7850838899612427,
        "codebertscore_f3-6": 0.799092173576355,
        "codebertscore_f1-18": 0.9423127174377441,
        "codebertscore_f3-18": 0.9464787244796753,
        "codebertscore_f1-15": 0.9536305665969849,
        "codebertscore_f3-15": 0.9542636871337891,
        "codebertscore_f1-13": 0.7835284471511841,
        "codebertscore_f3-13": 0.7992390394210815,
        "codebertscore_f1-9": 0.9301480054855347,
        "codebertscore_f3-9": 0.9321324229240417,
        "codebertscore_f1-4": 0.9046552181243896,
        "codebertscore_f3-4": 0.9270986914634705,
        "codebertscore_f1-14": 0.7917581796646118,
        "codebertscore_f3-14": 0.7968695759773254,
        "codebertscore_f1-5": 0.8978407979011536,
        "codebertscore_f3-5": 0.9196596741676331,
        "codebertscore_f1-19": 0.7010527849197388,
        "codebertscore_f3-19": 0.835883378982544,
        "codebertscore_s_f1-3": 0.9340841770172119,
        "codebertscore_s_f3-3": 0.9422204494476318,
        "codebertscore_s_f1-0": 0.9390662312507629,
        "codebertscore_s_f3-0": 0.9460720419883728,
        "codebertscore_s_f1-8": 0.8062745928764343,
        "codebertscore_s_f3-8": 0.8077670931816101,
        "codebertscore_s_f1-7": 0.8053618669509888,
        "codebertscore_s_f3-7": 0.8125473856925964,
        "codebertscore_s_f1-16": 0.9617526531219482,
        "codebertscore_s_f3-16": 0.9632620811462402,
        "codebertscore_s_f1-2": 0.8228181004524231,
        "codebertscore_s_f3-2": 0.8331506848335266,
        "codebertscore_s_f1-11": 0.8174372315406799,
        "codebertscore_s_f3-11": 0.8315110206604004,
        "codebertscore_s_f1-1": 0.7836353778839111,
        "codebertscore_s_f3-1": 0.7888386845588684,
        "codebertscore_s_f1-10": 0.9353018999099731,
        "codebertscore_s_f3-10": 0.9436011910438538,
        "codebertscore_s_f1-17": 0.6181375980377197,
        "codebertscore_s_f3-17": 0.5983632802963257,
        "codebertscore_s_f1-12": 0.7999411225318909,
        "codebertscore_s_f3-12": 0.815957248210907,
        "codebertscore_s_f1-6": 0.795573890209198,
        "codebertscore_s_f3-6": 0.811617910861969,
        "codebertscore_s_f1-18": 0.9444318413734436,
        "codebertscore_s_f3-18": 0.9495018720626831,
        "codebertscore_s_f1-15": 0.9507039189338684,
        "codebertscore_s_f3-15": 0.9519091248512268,
        "codebertscore_s_f1-13": 0.7842035293579102,
        "codebertscore_s_f3-13": 0.8055071234703064,
        "codebertscore_s_f1-9": 0.9248902201652527,
        "codebertscore_s_f3-9": 0.9278243780136108,
        "codebertscore_s_f1-4": 0.9143885374069214,
        "codebertscore_s_f3-4": 0.93809974193573,
        "codebertscore_s_f1-14": 0.7960967421531677,
        "codebertscore_s_f3-14": 0.8026833534240723,
        "codebertscore_s_f1-5": 0.9000083208084106,
        "codebertscore_s_f3-5": 0.9213898777961731,
        "codebertscore_s_f1-19": 0.7161126136779785,
        "codebertscore_s_f3-19": 0.8592800498008728,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 2,
        "raw_gpt35_nsnr-15": "2",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 2,
        "raw_gpt35_nsnr-5": "2",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1, planet2){\n",
        "snippet": [
            "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n"
        ],
        "simplified": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
        "task_id": "148",
        "3": "var planetList = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index = planetList.indexOf(planet1);\n    var planet2Index = planetList.indexOf(planet2);\n    var planetsBetween = [];\n    if(planet1Index === -1 || planet2Index === -1){\n        return planetsBetween;\n    }\n    if(planet1Index < planet2Index){\n        planetsBetween = planetList.slice(planet1Index + 1, planet2Index);\n    } else {\n        planetsBetween = planetList.slice(planet2Index + 1, planet1Index);\n    }\n    return planetsBetween;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let planets = [ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let first = 0;\n    let second = 0;\n    let ordered = [];\n    let res = [];\n    for(let i = 0; i < planets.length; i++){\n        if(planets[i] === planet1){\n            first = i;\n        }\n        if(planets[i] === planet2){\n            second = i;\n        }\n    }\n    if(second < first){\n        let temp = first;\n        first = second;\n        second = temp;\n    }\n    for(let i = first + 1; i < second; i++){\n        ordered.push(planets[i]);\n    }\n    if(first === 0 && second === 0){\n        return res;\n    }\n    return ordered;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let orbit = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let res = [];\n    let index1 = orbit.indexOf(planet1);\n    let index2 = orbit.indexOf(planet2);\n    let temp = index1;\n    index1 = Math.min(index1, index2);\n    index2 = Math.max(temp, index2);\n    if(index1 > -1 && index2 > -1){\n        for(let i = index1 + 1; i < index2; i++){\n            res.push(orbit[i]);\n        }\n    }\n    return res;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let planets = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"Uranus\": 6,\n    \"Neptune\": 7\n  }\n  if (planets[planet1] > planets[planet2]){\n    let temp = planet1;\n    planet1 = planet2;\n    planet2 = temp;\n  }\n  let result = [];\n  for (let i = planets[planet1] + 1; i < planets[planet2]; i++){\n    result.push(Object.keys(planets).find(key => planets[key] === i));\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let start = planets.indexOf(planet1);\n  let end = planets.indexOf(planet2);\n  if (start === -1 || end === -1) {\n    return [];\n  }\n  else if (start > end) {\n    return planets.slice(end + 1, start).reverse();\n  }\n  else {\n    return planets.slice(start + 1, end);\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let s =[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let f = s.indexOf(planet1);\n    let l = s.indexOf(planet2);\n    let ans = [];\n    if(f>=0 && l>=0){\n        if(f<l){\n            for(let i=f+1;i<l;i++){\n                ans.push(s[i]);\n            }\n        }\n        else{\n            for(let i=l+1;i<f;i++){\n                ans.push(s[i]);\n            }\n        }\n    }\n    return ans;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n    var array = [];\n    if(index1 > index2){\n        array = planets.slice(index2, index1 + 1);\n    } else if(index1 < index2){\n        array = planets.slice(index1, index2 + 1);\n    } else if(index1 == -1 || index2 == -1){\n        array = [];\n    } else {\n        array = [planet1];\n    }\n    return array;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const first = planets.indexOf(planet1);\n    const second = planets.indexOf(planet2);\n    if (first < 0 || second < 0) return [];\n    if (first <= second) {\n        return planets.slice(first + 1, second);\n    } else {\n        return planets.slice(second + 1, first);\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let orbits = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = orbits.indexOf(planet1);\n    let index2 = orbits.indexOf(planet2);\n    let new_array = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 < index2){\n            for(let i = index1 + 1; i < index2; i++){\n                new_array.push(orbits[i]);\n            }\n        }\n        else{\n            for(let i = index2 + 1; i < index1; i++){\n                new_array.push(orbits[i]);\n            }\n        }\n    }\n    return new_array;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    let result = [];\n    if(planet1Index === -1 || planet2Index === -1) {\n        return result;\n    }\n    if(planet1Index < planet2Index) {\n        for(let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n        }\n    }\n    else {\n        for(let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  var p1 = planets.indexOf(planet1);\n  var p2 = planets.indexOf(planet2);\n  if(p1 == -1 || p2 == -1){\n    return [];\n  }\n  if(p1 > p2){\n    var tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n  }\n  return planets.slice(p1+1, p2);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let planetsArray = [\n  \"Mercury\",\n  \"Venus\",\n  \"Earth\",\n  \"Mars\",\n  \"Jupiter\",\n  \"Saturn\",\n  \"Uranus\",\n  \"Neptune\"\n  ];\n  if (planetsArray.indexOf(planet1) === -1 || planetsArray.indexOf(planet2) === -1){\n    return [];\n  }\n  if (planetsArray.indexOf(planet1) > planetsArray.indexOf(planet2)){\n    let b = planetsArray.indexOf(planet1);\n    let a = planetsArray.indexOf(planet2);\n    return planetsArray.slice(a+1, b);\n  }\n  if (planetsArray.indexOf(planet1) < planetsArray.indexOf(planet2)){\n    let a = planetsArray.indexOf(planet1);\n    let b = planetsArray.indexOf(planet2);\n    return planetsArray.slice(a+1, b);\n  }\n  if (planetsArray.indexOf(planet1) === planetsArray.indexOf(planet2)){\n    return [];\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "const data = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if(!data[planet1] || !data[planet2]) return [];\n    let result = [];\n    for(let i = Math.min(data[planet1], data[planet2]); i <= Math.max(data[planet1], data[planet2]); i++){\n        if(data[planet1] > data[planet2]) result.unshift(Object.keys(data).find(el => data[el] === i));\n        else result.push(Object.keys(data).find(el => data[el] === i));\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let planet=[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let k=-1;\n    for(let i=0;i<planet.length;i++){\n        if(planet[i]==planet1){\n            k=i;\n        }\n    }\n    let l=-1;\n    for(let i=0;i<planet.length;i++){\n        if(planet[i]==planet2){\n            l=i;\n        }\n    }\n    let arr=[];\n    if(k>l){\n        let temp=k;\n        k=l;\n        l=temp;\n    }\n    if(k==-1||l==-1){\n        return arr;\n    }\n    for(let i=k+1;i<l;i++){\n        arr.push(planet[i]);\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var solarsystem = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    if (!solarsystem.includes(planet1) || !solarsystem.includes(planet2)) {\n        return [];\n    } else {\n        var planet1index = solarsystem.indexOf(planet1);\n        var planet2index = solarsystem.indexOf(planet2);\n        var planetinbetween = [];\n        if (planet1index < planet2index) {\n            for (var i = planet1index; i < planet2index; i++) {\n                planetinbetween.push(solarsystem[i + 1]);\n            }\n        } else {\n            for (var i = planet2index; i < planet1index; i++) {\n                planetinbetween.push(solarsystem[i + 1]);\n            }\n        }\n        return planetinbetween;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tlet result = [];\n\tlet p1 = planets.indexOf(planet1);\n\tlet p2 = planets.indexOf(planet2);\n\tif(p1 < 0 || p2 < 0){\n\t\treturn result;\n\t}\n\tif(p1 > p2){\n\t\tfor(let i = p2 + 1; i < p1; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t} else {\n\t\tfor(let i = p1 + 1; i < p2; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = list.indexOf(planet1);\n    var index2 = list.indexOf(planet2);\n    if (index1 != -1 && index2 != -1) {\n        if (index1 < index2) {\n            return list.slice(index1+1, index2);\n        } else {\n            return list.slice(index2+1, index1);\n        }\n    } else {\n        return [];\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const planets = {\n    Mercury: 0,\n    Venus: 1,\n    Earth: 2,\n    Mars: 3,\n    Jupiter: 4,\n    Saturn: 5,\n    Uranus: 6,\n    Neptune: 7\n  }\n  if (!planets[planet1] || !planets[planet2]){\n    return [];\n  }\n  const i = planets[planet1];\n  const j = planets[planet2];\n  let res = [];\n  if (i < j){\n    for (let k = i+1; k < j; k++){\n      for (let p in planets){\n        if (planets[p] === k){\n          res.push(p);\n        }\n      }\n    }\n  } else {\n    for (let k = j+1; k < i; k++){\n      for (let p in planets){\n        if (planets[p] === k){\n          res.push(p);\n        }\n      }\n    }\n  }\n  return res;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let d = {\"Mercury\":1, \"Venus\":2, \"Earth\":3, \"Mars\":4, \"Jupiter\":5, \"Saturn\":6, \"Uranus\":7, \"Neptune\":8};\n  if (d[planet1] == undefined || d[planet2] == undefined) return [];\n  if (d[planet1] > d[planet2]) {\n    [planet1, planet2] = [planet2, planet1];\n  }\n  return Object.keys(d).filter(function(el){\n    return d[el] > d[planet1] && d[el] < d[planet2];\n  });\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index < planet2Index){\n        return planets.slice(planet1Index + 1, planet2Index)\n    }\n    else{\n        return planets.slice(planet2Index + 1, planet1Index)\n    }\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.25644868459790293,
        "bleu-0": 0.47912599569525355,
        "bleu-8": 0.285565953276468,
        "bleu-7": 0.19197117975917252,
        "bleu-16": 0.24522608996899806,
        "bleu-2": 0.3568881100443299,
        "bleu-11": 0.26268883853259445,
        "bleu-1": 0.19255914138465954,
        "bleu-10": 0.3568881100443299,
        "bleu-17": 0.39217229408294135,
        "bleu-12": 0.23785531706966886,
        "bleu-6": 0.2644760362225377,
        "bleu-18": 0.20970845123582044,
        "bleu-15": 0.5575216635004501,
        "bleu-13": 0.325401022441955,
        "bleu-9": 0.3561993800227382,
        "bleu-4": 0.22078675819139143,
        "bleu-14": 0.15007136484237615,
        "bleu-5": 0.1283777303831643,
        "bleu-19": 0.23556986654924372,
        "codebleu-3": 0.4338526401126215,
        "codebleu-0": 0.6837184528282437,
        "codebleu-8": 0.4693329653883711,
        "codebleu-7": 0.4422543048689761,
        "codebleu-16": 0.39864577562948905,
        "codebleu-2": 0.5289101164811159,
        "codebleu-11": 0.48083163645120436,
        "codebleu-1": 0.34617248595970157,
        "codebleu-10": 0.5464539761302387,
        "codebleu-17": 0.583941997092887,
        "codebleu-12": 0.3850372481955953,
        "codebleu-6": 0.5433351207452572,
        "codebleu-18": 0.5203858173960128,
        "codebleu-15": 0.7794291257906404,
        "codebleu-13": 0.5418330492745775,
        "codebleu-9": 0.5573281081845223,
        "codebleu-4": 0.3662132075149311,
        "codebleu-14": 0.5499448968930843,
        "codebleu-5": 0.38649782774977803,
        "codebleu-19": 0.37034360072140166,
        "chrf-3": 0.23502600402085208,
        "chrf-0": 0.3907217595305182,
        "chrf-8": 0.28592996903627155,
        "chrf-7": 0.2788705425470315,
        "chrf-16": 0.25749213340799654,
        "chrf-2": 0.31938209217604896,
        "chrf-11": 0.24087598091119186,
        "chrf-1": 0.2412580899378439,
        "chrf-10": 0.44843037720144535,
        "chrf-17": 0.32207341068235096,
        "chrf-12": 0.41012123515570165,
        "chrf-6": 0.24809403415474854,
        "chrf-18": 0.274831043909762,
        "chrf-15": 0.46458860431606014,
        "chrf-13": 0.4035658643110549,
        "chrf-9": 0.32971419914061684,
        "chrf-4": 0.2409421487431322,
        "chrf-14": 0.321173279902184,
        "chrf-5": 0.23856396007550276,
        "chrf-19": 0.24594712737123403,
        "rougel-3": 0.4531722054380664,
        "rougel-0": 0.6385224274406333,
        "rougel-8": 0.5165165165165165,
        "rougel-7": 0.4491017964071856,
        "rougel-16": 0.4936708860759494,
        "rougel-2": 0.5664739884393063,
        "rougel-11": 0.45697329376854595,
        "rougel-1": 0.4210526315789474,
        "rougel-10": 0.5606936416184971,
        "rougel-17": 0.5609065155807367,
        "rougel-12": 0.5146579804560261,
        "rougel-6": 0.3951807228915663,
        "rougel-18": 0.41038961038961036,
        "rougel-15": 0.7142857142857143,
        "rougel-13": 0.4958217270194986,
        "rougel-9": 0.5763688760806915,
        "rougel-4": 0.4294871794871795,
        "rougel-14": 0.3864229765013055,
        "rougel-5": 0.39285714285714285,
        "rougel-19": 0.47896440129449835,
        "meteor-3": 0.404143352236925,
        "meteor-0": 0.67352293583161,
        "meteor-8": 0.46927863612147036,
        "meteor-7": 0.44439330688517553,
        "meteor-16": 0.3710715973534972,
        "meteor-2": 0.5745684523809523,
        "meteor-11": 0.4210195195443784,
        "meteor-1": 0.3460755715638527,
        "meteor-10": 0.5745684523809523,
        "meteor-17": 0.6041302879546653,
        "meteor-12": 0.3688708163245628,
        "meteor-6": 0.4205797204845258,
        "meteor-18": 0.4056085995634798,
        "meteor-15": 0.791842878357438,
        "meteor-13": 0.5336040456179397,
        "meteor-9": 0.5779287109491752,
        "meteor-4": 0.34468602494731726,
        "meteor-14": 0.40914299395226605,
        "meteor-5": 0.3462983140690569,
        "meteor-19": 0.37804588836582215,
        "ruby-3": 0.33160621761658027,
        "ruby-0": 0.46632124352331605,
        "ruby-8": 0.40932642487046633,
        "ruby-7": 0.227979274611399,
        "ruby-16": 0.3575129533678757,
        "ruby-2": 0.40932642487046633,
        "ruby-11": 0.33678756476683935,
        "ruby-1": 0.31088082901554404,
        "ruby-10": 0.40414507772020725,
        "ruby-17": 0.39896373056994816,
        "ruby-12": 0.39896373056994816,
        "ruby-6": 0.2792792792792793,
        "ruby-18": 0.21761658031088082,
        "ruby-15": 0.6030150753768844,
        "ruby-13": 0.3523316062176166,
        "ruby-9": 0.4196891191709845,
        "ruby-4": 0.33160621761658027,
        "ruby-14": 0.18652849740932642,
        "ruby-5": 0.2227979274611399,
        "ruby-19": 0.3523316062176166,
        "codebertscore_f1-3": 0.7992940545082092,
        "codebertscore_f3-3": 0.7919633388519287,
        "codebertscore_f1-0": 0.8681689500808716,
        "codebertscore_f3-0": 0.8659144639968872,
        "codebertscore_f1-8": 0.840701699256897,
        "codebertscore_f3-8": 0.8444604873657227,
        "codebertscore_f1-7": 0.8276077508926392,
        "codebertscore_f3-7": 0.8200904130935669,
        "codebertscore_f1-16": 0.8165827393531799,
        "codebertscore_f3-16": 0.8001143336296082,
        "codebertscore_f1-2": 0.8547302484512329,
        "codebertscore_f3-2": 0.8476610779762268,
        "codebertscore_f1-11": 0.8051207065582275,
        "codebertscore_f3-11": 0.7947841882705688,
        "codebertscore_f1-1": 0.8095137476921082,
        "codebertscore_f3-1": 0.787979006767273,
        "codebertscore_f1-10": 0.8291451930999756,
        "codebertscore_f3-10": 0.8303937911987305,
        "codebertscore_f1-17": 0.8470597863197327,
        "codebertscore_f3-17": 0.8474546670913696,
        "codebertscore_f1-12": 0.8131310343742371,
        "codebertscore_f3-12": 0.7962945699691772,
        "codebertscore_f1-6": 0.7798814177513123,
        "codebertscore_f3-6": 0.7850072979927063,
        "codebertscore_f1-18": 0.8058590888977051,
        "codebertscore_f3-18": 0.8091093897819519,
        "codebertscore_f1-15": 0.8815484642982483,
        "codebertscore_f3-15": 0.8806205987930298,
        "codebertscore_f1-13": 0.8009418845176697,
        "codebertscore_f3-13": 0.8110452890396118,
        "codebertscore_f1-9": 0.842511773109436,
        "codebertscore_f3-9": 0.8382624387741089,
        "codebertscore_f1-4": 0.7980151176452637,
        "codebertscore_f3-4": 0.7807939648628235,
        "codebertscore_f1-14": 0.7850594520568848,
        "codebertscore_f3-14": 0.7813310027122498,
        "codebertscore_f1-5": 0.7883097529411316,
        "codebertscore_f3-5": 0.766912043094635,
        "codebertscore_f1-19": 0.8062530755996704,
        "codebertscore_f3-19": 0.7899824976921082,
        "codebertscore_s_f1-3": 0.8057299852371216,
        "codebertscore_s_f3-3": 0.7940895557403564,
        "codebertscore_s_f1-0": 0.8658252954483032,
        "codebertscore_s_f3-0": 0.8637194037437439,
        "codebertscore_s_f1-8": 0.8502287268638611,
        "codebertscore_s_f3-8": 0.8532790541648865,
        "codebertscore_s_f1-7": 0.8400211930274963,
        "codebertscore_s_f3-7": 0.8348963260650635,
        "codebertscore_s_f1-16": 0.8304631114006042,
        "codebertscore_s_f3-16": 0.8171234130859375,
        "codebertscore_s_f1-2": 0.8618155717849731,
        "codebertscore_s_f3-2": 0.8526860475540161,
        "codebertscore_s_f1-11": 0.8085595965385437,
        "codebertscore_s_f3-11": 0.7970098257064819,
        "codebertscore_s_f1-1": 0.8216093182563782,
        "codebertscore_s_f3-1": 0.8014776706695557,
        "codebertscore_s_f1-10": 0.8365599513053894,
        "codebertscore_s_f3-10": 0.8373371958732605,
        "codebertscore_s_f1-17": 0.8548208475112915,
        "codebertscore_s_f3-17": 0.8531801700592041,
        "codebertscore_s_f1-12": 0.8273894190788269,
        "codebertscore_s_f3-12": 0.8094180226325989,
        "codebertscore_s_f1-6": 0.7898396849632263,
        "codebertscore_s_f3-6": 0.7922254204750061,
        "codebertscore_s_f1-18": 0.8122262358665466,
        "codebertscore_s_f3-18": 0.8159554600715637,
        "codebertscore_s_f1-15": 0.881810188293457,
        "codebertscore_s_f3-15": 0.8826154470443726,
        "codebertscore_s_f1-13": 0.8026900887489319,
        "codebertscore_s_f3-13": 0.8136769533157349,
        "codebertscore_s_f1-9": 0.8508735299110413,
        "codebertscore_s_f3-9": 0.843773603439331,
        "codebertscore_s_f1-4": 0.8050739169120789,
        "codebertscore_s_f3-4": 0.7875262498855591,
        "codebertscore_s_f1-14": 0.7883421778678894,
        "codebertscore_s_f3-14": 0.7856204509735107,
        "codebertscore_s_f1-5": 0.7964900732040405,
        "codebertscore_s_f3-5": 0.7783195376396179,
        "codebertscore_s_f1-19": 0.8137264847755432,
        "codebertscore_s_f3-19": 0.7957234978675842,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n",
        "snippet": [
            "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n"
        ],
        "simplified": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "task_id": "6",
        "3": "var ret = [];\n    var max_level = 0;\n    var level = 0;\n    var stack = [];\n    var inside_str = false;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            level++;\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == ')'){\n            if(level == 0){\n                inside_str = false;\n                ret.push(max_level);\n                max_level = 0;\n                level = 0;\n                stack = [];\n            }\n            else{\n                stack.pop();\n                level--;\n            }\n        }\n        else if(paren_string[i] == ' '){\n            if(level == 0){\n                inside_str = false;\n                ret.push(max_level);\n                max_level = 0;\n                level = 0;\n                stack = [];\n            }\n            else{\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n        }\n        else{\n            if(!inside_str){\n                inside_str = true;\n                if(stack.length > 0){\n                    stack.push(paren_string[i]);\n                }\n            }\n            else{\n                if(stack.length > 0){\n                    stack.push(paren_string[i]);\n                }\n            }\n        }\n    }\n    if(stack.length > 0){\n        console.log(\"Invalid Parentheses String: \" + paren_string);\n    }\n    else{\n        ret.push(max_level);\n    }\n    return ret;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = [];\n    var depth = 0;\n    var max_depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            depth++;\n            if(depth > max_depth){\n                max_depth = depth;\n            }\n        }\n        else if(paren_string[i] == ')'){\n            depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push(max_depth);\n            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var groups = paren_string.split(' ');\n    var count = 0;\n    var max = 0;\n    var result = [];\n    for(var i = 0; i < groups.length; i++){\n        count = 0;\n        for(var j = 0; j < groups[i].length; j++){\n            if(groups[i][j] == '('){\n                count++;\n            }\n            else if(groups[i][j] == ')'){\n                count--;\n            }\n            if(count > max){\n                max = count;\n            }\n        }\n        result.push(max);\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let levels = [];\n\tfor(let substring of paren_string.split(' ')){\n\t\tlet paren = 0;\n\t\tlet max_paren = 0;\n\t\tfor(let i = 0; i < substring.length; i++){\n\t\t\tif(substring[i] === '('){\n\t\t\t\tparen++;\n\t\t\t\tif(paren > max_paren){\n\t\t\t\t\tmax_paren = paren;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(substring[i] === ')'){\n\t\t\t\tparen--;\n\t\t\t}\n\t\t}\n\t\tlevels.push(max_paren);\n\t}\n\treturn levels;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var depth = 0;\n    var max_depth = 0;\n    var result = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var c = paren_string[i];\n        if(c == '('){\n            depth += 1;\n            max_depth = Math.max(max_depth, depth);\n        }else if(c == ')'){\n            depth -= 1;\n        }else if(c == ' '){\n            result.push(max_depth);\n            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var tokens = paren_string.split(\" \"); //break the input string into groups\n  var max_counts = [];\n  for(var i = 0; i < tokens.length; i++){\n    var max_count = 0;\n    var count = 0;\n    for(var j = 0; j < tokens[i].length; j++){\n      if(tokens[i][j] == '('){\n        count++;\n        if(count > max_count){\n          max_count = count;\n        }\n      }\n      else if(tokens[i][j] == ')'){\n        count--;\n      }\n    }\n    max_counts.push(max_count);\n  }\n  return max_counts;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var parens_regex = /\\(+\\)/g;\n    var parens_captured = paren_string.match(parens_regex);\n    var parens_counts = parens_captured.map(function(elem){\n        var open_parens = 0;\n        var close_parens = 0;\n        var max_parens = 0;\n        for(var i = 0; i < elem.length; i++){\n            if(elem[i] === '('){\n                open_parens++;\n                if(open_parens > max_parens){\n                    max_parens = open_parens;\n                }\n            }\n            else if(elem[i] === ')'){\n                close_parens++;\n            }\n        }\n        return max_parens;\n    });\n    return parens_counts;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var paren_groups = paren_string.split(' ');\n\tvar output = [];\n\tfor(var i = 0; i < paren_groups.length; i++){\n\t\tvar parens = paren_groups[i];\n\t\tvar current_level = 0;\n\t\tvar max_level = 0;\n\t\tfor(var j = 0; j < parens.length; j++){\n\t\t\tif(parens[j] === '('){\n\t\t\t\tcurrent_level++;\n\t\t\t\tif(current_level > max_level){\n\t\t\t\t\tmax_level = current_level;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrent_level--;\n\t\t\t}\n\t\t}\n\t\toutput.push(max_level);\n\t}\n\treturn output;\n}\n\nmodule.exports = {\n\t\"parse_nested_parens\": parse_nested_parens\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var paren_count = 0;\n    var max_paren = 0;\n    var paren_depth = [];\n    for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i] == '('){\n            paren_count += 1;\n            if (paren_count > max_paren){\n                max_paren = paren_count;\n            }\n        } else if (paren_string[i] == ')'){\n            paren_count -= 1;\n        } else if (paren_string[i] == ' '){\n            paren_depth.push(max_paren);\n            max_paren = 0;\n            paren_count = 0;\n        }\n    }\n    return paren_depth;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let groups = paren_string.split(' ');\n    let output = [];\n    for(let i = 0; i < groups.length; i++){\n        let current_group = groups[i];\n        let count = 0;\n        let maximum = 0;\n        for(let j = 0; j < current_group.length; j++){\n            if(current_group[j] === '('){\n                count++;\n                if(count > maximum){\n                    maximum = count;\n                }\n            }\n            else if(current_group[j] === ')'){\n                count--;\n            }\n        }\n        output.push(maximum);\n    }\n    return output;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "//*** The function should return a list of integers. ***\n    var items = paren_string.split(' ');\n    var results = [];\n    for (var i = 0; i < items.length; i++) {\n        var count = 0;\n        var max_count = 0;\n        for (var j = 0; j < items[i].length; j++) {\n            if (items[i][j] == '(') {\n                count += 1;\n                if (count > max_count) {\n                    max_count = count;\n                }\n            } else if (items[i][j] == ')') {\n                count -= 1;\n            }\n        }\n        results.push(max_count);\n    }\n    return results;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var counter = 0;\n\tvar parens = [];\n\tfor(var i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tcounter++;\n\t\t}\n\t\telse if(paren_string[i] == ')'){\n\t\t\tcounter--;\n\t\t}\n\t\telse if(paren_string[i] == ' '){\n\t\t\tparens.push(counter);\n\t\t\tcounter = 0;\n\t\t}\n\t}\n\treturn parens;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var group = [];\n    var group_arr = paren_string.split(' ');\n    for(var i = 0; i < group_arr.length; i++){\n        var paren = group_arr[i];\n        var count = 0;\n        var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j] === '('){\n                count++;\n                if(count > max){\n                    max = count;\n                }\n            }\n            else if(paren[j] === ')'){\n                count--;\n            }\n        }\n        group.push(max);\n    }\n    return group;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let parens = paren_string.split(' ')\n    let levels = []\n    for (let paren of parens){\n        let level = 0\n        let max_level = 0\n        for (let i = 0; i < paren.length; i++){\n            if (paren[i] === '('){\n                level += 1\n            }\n            else if (paren[i] === ')'){\n                level -= 1\n            }\n            if (level > max_level){\n                max_level = level\n            }\n        }\n        levels.push(max_level)\n    }\n    return levels\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// TODO: complete this function\n    var max = 0;\n    var final = [];\n    var myarray = paren_string.split(\" \");\n    for (var i = 0; i < myarray.length; i++) {\n        if (myarray[i] === '()') {\n            final.push(1);\n        } else {\n            var string = myarray[i];\n            var counter = 0;\n            var max = 0;\n            for (var j = 0; j < string.length; j++) {\n                if (string[j] === '(') {\n                    counter++;\n                    if (counter > max) {\n                        max = counter;\n                    }\n                } else if (string[j] === ')') {\n                    counter--;\n                }\n            }\n            final.push(max);\n        }\n    }\n    return final;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = [];\n    var array = paren_string.split(' ');\n    for(var i = 0; i < array.length; i++){\n        var temp = 0;\n        var str = array[i];\n        for(var j = 0; j < str.length; j++){\n            if(str[j] == '('){\n                temp += 1;\n            }\n            else if(str[j] == ')'){\n                result.push(temp);\n                temp -= 1;\n            }\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let paren_groups = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_groups.length; i++){\n        let stack = [];\n        let level = 0;\n        let max_level = 0;\n        for(let char of paren_groups[i]){\n            if(char === '('){\n                stack.push(char);\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(char === ')'){\n                if(stack.length > 0){\n                    stack.pop();\n                    level--;\n                }\n            }\n        }\n        result.push(max_level);\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "//var paren_levels = [];\n  var paren_levels = new Array();\n  var paren_stack = [];\n  var i = 0;\n  while(i < paren_string.length){\n    if(paren_string[i] == '('){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] == ')'){\n      if(paren_stack.length > 0){\n        paren_stack.pop();\n      }\n      else{\n        paren_levels.push(0);\n      }\n    }\n    else if(paren_string[i] == ' '){\n      paren_levels.push(paren_stack.length);\n    }\n    i++;\n  }\n  return paren_levels;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let result = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      let count = 0;\n      while (paren_string[i] === '(') {\n        count += 1;\n        i += 1;\n      }\n      result.push(count);\n    }\n  }\n  return result;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.07906207606714363,
        "bleu-0": 0.2242913948710305,
        "bleu-8": 0.18811971956603415,
        "bleu-7": 0.2332759699367326,
        "bleu-16": 0.3786025620241865,
        "bleu-2": 0.1796123571561106,
        "bleu-11": 0.16651003386593696,
        "bleu-1": 0.19067747783227845,
        "bleu-10": 0.21324182137479236,
        "bleu-17": 0.19308298988398256,
        "bleu-12": 0.20356923253327616,
        "bleu-6": 0.19594847320923375,
        "bleu-18": 0.1897649920290167,
        "bleu-15": 0.20968249712247988,
        "bleu-13": 0.1661834039038858,
        "bleu-9": 1.3685394711738534e-44,
        "bleu-4": 0.24528509124132014,
        "bleu-14": 0.1842641612448788,
        "bleu-5": 0.16295430456143595,
        "bleu-19": 0.20799294825563677,
        "codebleu-3": 0.5759030959534671,
        "codebleu-0": 0.5914879562528451,
        "codebleu-8": 0.5880184139706186,
        "codebleu-7": 0.5800938284382355,
        "codebleu-16": 0.683107353810773,
        "codebleu-2": 0.5758447286555497,
        "codebleu-11": 0.5683696974014227,
        "codebleu-1": 0.5688957190984222,
        "codebleu-10": 0.5726564430221746,
        "codebleu-17": 0.5780898341101951,
        "codebleu-12": 0.624996472950882,
        "codebleu-6": 0.48058352429348705,
        "codebleu-18": 0.57890295468628,
        "codebleu-15": 0.5687345068512838,
        "codebleu-13": 0.5931555576967493,
        "codebleu-9": 0.009389671361502346,
        "codebleu-4": 0.5854240641178388,
        "codebleu-14": 0.6088874040772558,
        "codebleu-5": 0.5494210379841291,
        "codebleu-19": 0.4145755239211799,
        "chrf-3": 0.24256478229525744,
        "chrf-0": 0.43602301246329767,
        "chrf-8": 0.3025197136966711,
        "chrf-7": 0.31079606673918675,
        "chrf-16": 0.5272077869736823,
        "chrf-2": 0.29751510337623027,
        "chrf-11": 0.32468661933644477,
        "chrf-1": 0.3115544683046525,
        "chrf-10": 0.3444313905051114,
        "chrf-17": 0.3006065388690051,
        "chrf-12": 0.34195372061557255,
        "chrf-6": 0.2747818592531781,
        "chrf-18": 0.3112110418000776,
        "chrf-15": 0.2918867016169772,
        "chrf-13": 0.3017850365116412,
        "chrf-9": 0.0053590568060021436,
        "chrf-4": 0.2862828375683362,
        "chrf-14": 0.3220210129844737,
        "chrf-5": 0.25574921118834304,
        "chrf-19": 0.2486526668798238,
        "rougel-3": 0.26903553299492383,
        "rougel-0": 0.44247787610619466,
        "rougel-8": 0.3166666666666667,
        "rougel-7": 0.40186915887850466,
        "rougel-16": 0.5309734513274337,
        "rougel-2": 0.3524590163934426,
        "rougel-11": 0.36363636363636365,
        "rougel-1": 0.36595744680851067,
        "rougel-10": 0.40723981900452483,
        "rougel-17": 0.36286919831223635,
        "rougel-12": 0.3529411764705882,
        "rougel-6": 0.37373737373737376,
        "rougel-18": 0.36286919831223635,
        "rougel-15": 0.3679245283018868,
        "rougel-13": 0.32,
        "rougel-9": 0.01941747572815534,
        "rougel-4": 0.37272727272727274,
        "rougel-14": 0.3755102040816327,
        "rougel-5": 0.36595744680851067,
        "rougel-19": 0.36065573770491804,
        "meteor-3": 0.3490019731762419,
        "meteor-0": 0.4367778236890122,
        "meteor-8": 0.42767486617911954,
        "meteor-7": 0.43343299627103843,
        "meteor-16": 0.4955497054233252,
        "meteor-2": 0.3935668741619977,
        "meteor-11": 0.3766749744267927,
        "meteor-1": 0.32328298211339995,
        "meteor-10": 0.34826573978594216,
        "meteor-17": 0.4010374050743139,
        "meteor-12": 0.4324527542586033,
        "meteor-6": 0.35117247424939735,
        "meteor-18": 0.4155827249790087,
        "meteor-15": 0.4140321011673151,
        "meteor-13": 0.34752614152902217,
        "meteor-9": 0.00544069640914037,
        "meteor-4": 0.4057981694036115,
        "meteor-14": 0.3908543754321803,
        "meteor-5": 0.3655614552266267,
        "meteor-19": 0.34132732732732735,
        "ruby-3": 0.1643835616438356,
        "ruby-0": 0.29032258064516125,
        "ruby-8": 0.19565217391304346,
        "ruby-7": 0.1964285714285714,
        "ruby-16": 0.3709677419354839,
        "ruby-2": 0.19718309859154926,
        "ruby-11": 0.1705426356589147,
        "ruby-1": 0.16541353383458646,
        "ruby-10": 0.26890756302521013,
        "ruby-17": 0.19259259259259254,
        "ruby-12": 0.17647058823529416,
        "ruby-6": 0.20588235294117652,
        "ruby-18": 0.1777777777777778,
        "ruby-15": 0.18181818181818177,
        "ruby-13": 0.21965317919075145,
        "ruby-9": 0.009803921568627416,
        "ruby-4": 0.18644067796610164,
        "ruby-14": 0.2517482517482518,
        "ruby-5": 0.2556390977443609,
        "ruby-19": 0.23529411764705888,
        "codebertscore_f1-3": 0.7186216711997986,
        "codebertscore_f3-3": 0.7327741980552673,
        "codebertscore_f1-0": 0.7901979684829712,
        "codebertscore_f3-0": 0.7808377742767334,
        "codebertscore_f1-8": 0.7553934454917908,
        "codebertscore_f3-8": 0.7503988742828369,
        "codebertscore_f1-7": 0.7939630746841431,
        "codebertscore_f3-7": 0.7846412062644958,
        "codebertscore_f1-16": 0.8375592827796936,
        "codebertscore_f3-16": 0.834315299987793,
        "codebertscore_f1-2": 0.7663067579269409,
        "codebertscore_f3-2": 0.772943913936615,
        "codebertscore_f1-11": 0.7262335419654846,
        "codebertscore_f3-11": 0.734874963760376,
        "codebertscore_f1-1": 0.7817465662956238,
        "codebertscore_f3-1": 0.7852503657341003,
        "codebertscore_f1-10": 0.7856175899505615,
        "codebertscore_f3-10": 0.7726043462753296,
        "codebertscore_f1-17": 0.7548084259033203,
        "codebertscore_f3-17": 0.7487138509750366,
        "codebertscore_f1-12": 0.7562811970710754,
        "codebertscore_f3-12": 0.7682925462722778,
        "codebertscore_f1-6": 0.7722130417823792,
        "codebertscore_f3-6": 0.7482510805130005,
        "codebertscore_f1-18": 0.7538033127784729,
        "codebertscore_f3-18": 0.7461552619934082,
        "codebertscore_f1-15": 0.8077955842018127,
        "codebertscore_f3-15": 0.7979108095169067,
        "codebertscore_f1-13": 0.7266724109649658,
        "codebertscore_f3-13": 0.7325557470321655,
        "codebertscore_f1-9": 0.0,
        "codebertscore_f3-9": 0.0,
        "codebertscore_f1-4": 0.7600217461585999,
        "codebertscore_f3-4": 0.7522969245910645,
        "codebertscore_f1-14": 0.7826279997825623,
        "codebertscore_f3-14": 0.7838099598884583,
        "codebertscore_f1-5": 0.7494184970855713,
        "codebertscore_f3-5": 0.7263917922973633,
        "codebertscore_f1-19": 0.7761571407318115,
        "codebertscore_f3-19": 0.7518370151519775,
        "codebertscore_s_f1-3": 0.7333568930625916,
        "codebertscore_s_f3-3": 0.7426774501800537,
        "codebertscore_s_f1-0": 0.7966039180755615,
        "codebertscore_s_f3-0": 0.7828861474990845,
        "codebertscore_s_f1-8": 0.7587820887565613,
        "codebertscore_s_f3-8": 0.7481980919837952,
        "codebertscore_s_f1-7": 0.7989558577537537,
        "codebertscore_s_f3-7": 0.7851803302764893,
        "codebertscore_s_f1-16": 0.8464207053184509,
        "codebertscore_s_f3-16": 0.8377198576927185,
        "codebertscore_s_f1-2": 0.7703263759613037,
        "codebertscore_s_f3-2": 0.7723776698112488,
        "codebertscore_s_f1-11": 0.7414632439613342,
        "codebertscore_s_f3-11": 0.748556911945343,
        "codebertscore_s_f1-1": 0.7842279076576233,
        "codebertscore_s_f3-1": 0.7859067320823669,
        "codebertscore_s_f1-10": 0.7889573574066162,
        "codebertscore_s_f3-10": 0.7755571007728577,
        "codebertscore_s_f1-17": 0.7572912573814392,
        "codebertscore_s_f3-17": 0.7476444244384766,
        "codebertscore_s_f1-12": 0.7653314471244812,
        "codebertscore_s_f3-12": 0.7732284069061279,
        "codebertscore_s_f1-6": 0.7717277407646179,
        "codebertscore_s_f3-6": 0.7458962202072144,
        "codebertscore_s_f1-18": 0.7598819136619568,
        "codebertscore_s_f3-18": 0.7468293905258179,
        "codebertscore_s_f1-15": 0.8131424784660339,
        "codebertscore_s_f3-15": 0.7989691495895386,
        "codebertscore_s_f1-13": 0.7428534626960754,
        "codebertscore_s_f3-13": 0.7446883320808411,
        "codebertscore_s_f1-9": 0.0,
        "codebertscore_s_f3-9": 0.0,
        "codebertscore_s_f1-4": 0.7693121433258057,
        "codebertscore_s_f3-4": 0.7568354606628418,
        "codebertscore_s_f1-14": 0.7910351157188416,
        "codebertscore_s_f3-14": 0.7849634885787964,
        "codebertscore_s_f1-5": 0.7508459091186523,
        "codebertscore_s_f3-5": 0.7278754115104675,
        "codebertscore_s_f1-19": 0.779660701751709,
        "codebertscore_s_f3-19": 0.753894567489624,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 0,
        "raw_gpt35_nsnr-9": "0",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nfunction triples_sum_to_zero(l){\n",
        "snippet": [
            "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n"
        ],
        "simplified": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "40",
        "3": "var flag = false;\n\tvar len = l.length;\n\tfor(var i = 0; i < len; i++){\n\t\tfor(var j = i + 1; j < len; j++){\n\t\t\tfor(var k = j + 1; k < len; k++){\n\t\t\t\tif(l[i] + l[j] + l[k] == 0){\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "// ... your code here ...\n    l.sort(function(a, b){return a-b});\n    var result = false;\n    var i = 0;\n    while(i < l.length){\n        var j = i + 1;\n        var k = l.length - 1;\n        while(j < k){\n            if(l[i] + l[j] + l[k] == 0){\n                result = true;\n                break;\n            }\n            else if(l[i] + l[j] + l[k] < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n        i++;\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "var i;\n    for(i=0; i<l.length; i++){\n        var j;\n        for(j=0; j<l.length; j++){\n            var k;\n            for(k=0; k<l.length; k++){\n                if(l[i] + l[j] + l[k] == 0 && i != j && j != k && i != k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if (l.length < 3){\n        return false;\n    }\n    else{\n        var j = 0;\n        while (j < l.length - 2){\n            var k = j + 1;\n            while (k < l.length - 1){\n                var m = k + 1;\n                while (m < l.length){\n                    if (l[j] + l[k] + l[m] == 0){\n                        return true;\n                    }\n                    m++;\n                }\n                k++;\n            }\n            j++;\n        }\n        return false;\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "for(let i = 0; i < l.length; i++){\n        for(let j = 0; j < l.length; j++){\n            for(let k = 0; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0 && i !== j && j !== k && i !== k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if (l.length < 3){\n        return false;\n    }\n    else{\n        for (var i = 0; i < l.length - 2; i++) {\n            for (var j = i + 1; j < l.length - 1; j++) {\n                for (var k = j + 1; k < l.length; k++) {\n                    if (l[i] + l[j] + l[k] == 0){\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var l1 = l.slice();\n    var l2 = l.slice();\n    var l3 = l.slice();\n    l1.sort();\n    l2.sort();\n    l3.sort();\n    var i = 0;\n    var j = 1;\n    var k = 2;\n    var x = 0;\n    var t = 0;\n    while (i<l1.length){\n        j = i+1;\n        x = -l1[i];\n        while (j<l2.length){\n            k = j+1;\n            t = x-l2[j];\n            while (k<l3.length){\n                if (l3[k]==t){\n                    return true;\n                }\n                k = k+1;\n            }\n            j = j+1;\n        }\n        i = i+1;\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "// YOUR CODE HERE\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (l.length < 3){\n        return false;\n    }\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            for (var k = j + 1; k < l.length; k++){\n                if (l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var result = false;\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (l.length < 3){\n        return false;\n    }\n    // else if(l.length == 3){\n    //     if(l[0] + l[1] + l[2] == 0){\n    //         return true;\n    //     }\n    //     else{\n    //         return false;\n    //     }\n    // }\n    else{\n        for(var i = 0; i < l.length; i++){\n            for(var j = i + 1; j < l.length; j++){\n                for(var k = j + 1; k < l.length; k++){\n                    if(l[i] + l[j] + l[k] == 0){\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "for(let i = 0; i < l.length; i++){\n        for(let j = 0; j < l.length; j++){\n            for(let k = 0; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0 && i != j && j != k && i != k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "// body...\n\tfor (var i = 0; i < l.length; i++) {\n\t\tvar a = l[i];\n\t\tfor (var j = i+1; j < l.length; j++) {\n\t\t\tvar b = l[j];\n\t\t\tfor (var k = j+1; k < l.length; k++) {\n\t\t\t\tvar c = l[k];\n\t\t\t\tif (a+b+c==0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "function helper(index, first, second){\n    if (index === l.length){\n      return false;\n    }\n    if (first === undefined){\n      return helper(index + 1, l[index], second);\n    } else if (second === undefined){\n      return helper(index + 1, first, l[index]);\n    } else {\n      if (first + second + l[index] === 0){\n        return true;\n      } else {\n        return helper(index + 1, first, second);\n      }\n    }\n  }\n  return helper(0);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let s = new Set();\n    let r = new Set();\n    for(let x of l){\n        if(r.has(x)){\n            return true;\n        }\n        for(let y of s){\n            r.add(-x-y);\n        }\n        s.add(x);\n    }\n    return false;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var a = 0;\n  var b = 0;\n  var c = 0;\n  if (l.length < 3){\n    return false;\n  } else {\n    for (var i = 0; i < l.length; i++) {\n      a = l[i];\n      for (var j = i + 1; j < l.length; j++) {\n        b = l[j];\n        for (var k = j + 1; k < l.length; k++) {\n          c = l[k];\n          if (a + b + c == 0) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (l.length <= 2){\n\t\treturn false;\n\t}\n\tfor (var i = 0; i < l.length; i++){\n\t\tfor (var j = i + 1; j < l.length; j++){\n\t\t\tfor (var k = j + 1; k < l.length; k++){\n\t\t\t\tif (l[i] + l[j] + l[k] == 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var flag = false;\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                if(i != j && i != k && j != k){\n                    if(l[i] + l[j] + l[k] == 0){\n                        flag = true;\n                    }\n                }\n            }\n        }\n    }\n    return flag;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.5289609685210727,
        "bleu-0": 0.27556293294004447,
        "bleu-8": 6.639677199580737e-36,
        "bleu-7": 0.521269397610667,
        "bleu-16": 0.35239935322808946,
        "bleu-2": 0.5991400556959908,
        "bleu-11": 0.5736474347761026,
        "bleu-1": 0.16080682643619554,
        "bleu-10": 2.5604479037487663e-07,
        "bleu-17": 0.6466432095740977,
        "bleu-12": 0.6756237488854405,
        "bleu-6": 0.4014179707428713,
        "bleu-18": 0.6166779192880659,
        "bleu-15": 0.5239202125367874,
        "bleu-13": 0.08903673537398844,
        "bleu-9": 0.07700432903917562,
        "bleu-4": 0.44008667126975015,
        "bleu-14": 0.640333740898007,
        "bleu-5": 0.49838026264525104,
        "bleu-19": 0.6719015160648638,
        "codebleu-3": 0.7736947526151473,
        "codebleu-0": 0.7408957089491268,
        "codebleu-8": 0.006289308176100628,
        "codebleu-7": 0.7834191134382558,
        "codebleu-16": 0.7615634142172601,
        "codebleu-2": 0.8074038457606525,
        "codebleu-11": 0.8173060190035643,
        "codebleu-1": 0.66831057170163,
        "codebleu-10": 0.02515723766437705,
        "codebleu-17": 0.8420505978220979,
        "codebleu-12": 0.8327297443110954,
        "codebleu-6": 0.788601108331359,
        "codebleu-18": 0.8103268230259983,
        "codebleu-15": 0.8153074568064457,
        "codebleu-13": 0.5462859967761677,
        "codebleu-9": 0.4251645655726925,
        "codebleu-4": 0.8139138162808074,
        "codebleu-14": 0.8409990197094163,
        "codebleu-5": 0.7968998550949632,
        "codebleu-19": 0.8179584287781062,
        "chrf-3": 0.5335615018894123,
        "chrf-0": 0.41860221644767237,
        "chrf-8": 0.009823182711198428,
        "chrf-7": 0.6645780309918402,
        "chrf-16": 0.4915973590424255,
        "chrf-2": 0.7760041987574113,
        "chrf-11": 0.6925042008203487,
        "chrf-1": 0.3826085098829221,
        "chrf-10": 0.0015933715742511157,
        "chrf-17": 0.741301418338865,
        "chrf-12": 0.6855908003052099,
        "chrf-6": 0.6545671582319287,
        "chrf-18": 0.779610519246036,
        "chrf-15": 0.645357023953435,
        "chrf-13": 0.2553582761715637,
        "chrf-9": 0.28352228871744506,
        "chrf-4": 0.6265397586083026,
        "chrf-14": 0.7401795974533824,
        "chrf-5": 0.6050439962449294,
        "chrf-19": 0.6927336106836259,
        "rougel-3": 0.7513812154696132,
        "rougel-0": 0.45535714285714285,
        "rougel-8": 0.024096385542168676,
        "rougel-7": 0.7604166666666666,
        "rougel-16": 0.5416666666666666,
        "rougel-2": 0.8042328042328043,
        "rougel-11": 0.8229166666666666,
        "rougel-1": 0.3790322580645161,
        "rougel-10": 0.022727272727272724,
        "rougel-17": 0.854054054054054,
        "rougel-12": 0.8651685393258427,
        "rougel-6": 0.6396761133603239,
        "rougel-18": 0.8172043010752689,
        "rougel-15": 0.7046632124352332,
        "rougel-13": 0.34313725490196084,
        "rougel-9": 0.2913907284768212,
        "rougel-4": 0.6325581395348836,
        "rougel-14": 0.8494623655913979,
        "rougel-5": 0.7282051282051283,
        "rougel-19": 0.8690476190476191,
        "meteor-3": 0.8149235954393262,
        "meteor-0": 0.5814639501294906,
        "meteor-8": 0.006765899864682003,
        "meteor-7": 0.8112209096955483,
        "meteor-16": 0.7232704402515724,
        "meteor-2": 0.8541473686605753,
        "meteor-11": 0.9290113612658832,
        "meteor-1": 0.49384511743270965,
        "meteor-10": 0.006720430107526881,
        "meteor-17": 0.9386634470641291,
        "meteor-12": 0.9273685588018736,
        "meteor-6": 0.8739743591791005,
        "meteor-18": 0.8571906490714799,
        "meteor-15": 0.8445169288769938,
        "meteor-13": 0.39038763199174625,
        "meteor-9": 0.2572379813984555,
        "meteor-4": 0.823185846861731,
        "meteor-14": 0.9375486448704661,
        "meteor-5": 0.7923394699046873,
        "meteor-19": 0.8659091033309224,
        "ruby-3": 0.6262626262626263,
        "ruby-0": 0.3098591549295775,
        "ruby-8": 0.012195121951219523,
        "ruby-7": 0.6,
        "ruby-16": 0.3727272727272727,
        "ruby-2": 0.6728971962616823,
        "ruby-11": 0.7181818181818183,
        "ruby-1": 0.22289156626506024,
        "ruby-10": 0.012195121951219523,
        "ruby-17": 0.7669902912621359,
        "ruby-12": 0.8020833333333334,
        "ruby-6": 0.47878787878787876,
        "ruby-18": 0.6923076923076923,
        "ruby-15": 0.5855855855855856,
        "ruby-13": 0.20491803278688525,
        "ruby-9": 0.1707317073170732,
        "ruby-4": 0.4887218045112782,
        "ruby-14": 0.7596153846153846,
        "ruby-5": 0.5929203539823009,
        "ruby-19": 0.8023255813953488,
        "codebertscore_f1-3": 0.9053136706352234,
        "codebertscore_f3-3": 0.9192569851875305,
        "codebertscore_f1-0": 0.7827088832855225,
        "codebertscore_f3-0": 0.8093717098236084,
        "codebertscore_f1-8": 0.0,
        "codebertscore_f3-8": 0.0,
        "codebertscore_f1-7": 0.8613730669021606,
        "codebertscore_f3-7": 0.8636402487754822,
        "codebertscore_f1-16": 0.797419548034668,
        "codebertscore_f3-16": 0.8071277141571045,
        "codebertscore_f1-2": 0.9084993004798889,
        "codebertscore_f3-2": 0.910451352596283,
        "codebertscore_f1-11": 0.8731306791305542,
        "codebertscore_f3-11": 0.8837463855743408,
        "codebertscore_f1-1": 0.7562981247901917,
        "codebertscore_f3-1": 0.7767318487167358,
        "codebertscore_f1-10": 0.5751235485076904,
        "codebertscore_f3-10": 0.5549672842025757,
        "codebertscore_f1-17": 0.9064404368400574,
        "codebertscore_f3-17": 0.9100987911224365,
        "codebertscore_f1-12": 0.9132251739501953,
        "codebertscore_f3-12": 0.9190082550048828,
        "codebertscore_f1-6": 0.7999826669692993,
        "codebertscore_f3-6": 0.818458080291748,
        "codebertscore_f1-18": 0.9084591269493103,
        "codebertscore_f3-18": 0.9105558395385742,
        "codebertscore_f1-15": 0.9014905095100403,
        "codebertscore_f3-15": 0.9147117733955383,
        "codebertscore_f1-13": 0.7641560435295105,
        "codebertscore_f3-13": 0.7671440243721008,
        "codebertscore_f1-9": 0.7543928623199463,
        "codebertscore_f3-9": 0.7529863715171814,
        "codebertscore_f1-4": 0.8534267544746399,
        "codebertscore_f3-4": 0.8710610270500183,
        "codebertscore_f1-14": 0.93767911195755,
        "codebertscore_f3-14": 0.9423113465309143,
        "codebertscore_f1-5": 0.8603602647781372,
        "codebertscore_f3-5": 0.8632929921150208,
        "codebertscore_f1-19": 0.9178550839424133,
        "codebertscore_f3-19": 0.9094343781471252,
        "codebertscore_s_f1-3": 0.912173867225647,
        "codebertscore_s_f3-3": 0.9268156886100769,
        "codebertscore_s_f1-0": 0.8124554753303528,
        "codebertscore_s_f3-0": 0.8387446999549866,
        "codebertscore_s_f1-8": 0.0,
        "codebertscore_s_f3-8": 0.0,
        "codebertscore_s_f1-7": 0.8781894445419312,
        "codebertscore_s_f3-7": 0.8808498978614807,
        "codebertscore_s_f1-16": 0.8242600560188293,
        "codebertscore_s_f3-16": 0.8343401551246643,
        "codebertscore_s_f1-2": 0.9187383651733398,
        "codebertscore_s_f3-2": 0.9220899343490601,
        "codebertscore_s_f1-11": 0.8952592015266418,
        "codebertscore_s_f3-11": 0.9081556797027588,
        "codebertscore_s_f1-1": 0.7729888558387756,
        "codebertscore_s_f3-1": 0.7923303842544556,
        "codebertscore_s_f1-10": 0.5260238647460938,
        "codebertscore_s_f3-10": 0.5140978693962097,
        "codebertscore_s_f1-17": 0.921442449092865,
        "codebertscore_s_f3-17": 0.9262975454330444,
        "codebertscore_s_f1-12": 0.924985945224762,
        "codebertscore_s_f3-12": 0.9316637516021729,
        "codebertscore_s_f1-6": 0.845935046672821,
        "codebertscore_s_f3-6": 0.8669164776802063,
        "codebertscore_s_f1-18": 0.9182689189910889,
        "codebertscore_s_f3-18": 0.9216619729995728,
        "codebertscore_s_f1-15": 0.9070606827735901,
        "codebertscore_s_f3-15": 0.9221223592758179,
        "codebertscore_s_f1-13": 0.7761667966842651,
        "codebertscore_s_f3-13": 0.7841894626617432,
        "codebertscore_s_f1-9": 0.751794159412384,
        "codebertscore_s_f3-9": 0.7523442506790161,
        "codebertscore_s_f1-4": 0.8719078898429871,
        "codebertscore_s_f3-4": 0.8913992047309875,
        "codebertscore_s_f1-14": 0.9406850934028625,
        "codebertscore_s_f3-14": 0.9467153549194336,
        "codebertscore_s_f1-5": 0.8804547190666199,
        "codebertscore_s_f3-5": 0.8858036398887634,
        "codebertscore_s_f1-19": 0.9278427958488464,
        "codebertscore_s_f3-19": 0.9191109538078308,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 0,
        "raw_gpt35_nsnr-10": "0",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunction do_algebra(operator, operand){\n",
        "snippet": [
            "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n"
        ],
        "simplified": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
        "task_id": "160",
        "3": "let result = '';\n    operand.forEach((e, i) => {\n        result += `${e}${operator[i] ? operator[i] : ''}`;\n    });\n    return eval(result);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let operandArray = [];\n    let operatorArray = [];\n    let result;\n    let tempOperand = 0;\n    let tempOperator = 0;\n    for(let i = 0; i < operand.length; i++){\n        operandArray.push(operand[i]);\n    }\n    for(let i = 0; i < operator.length; i++){\n        operatorArray.push(operator[i]);\n    }\n    for(let i = 0; i < operatorArray.length; i++){\n        if(operatorArray[i] === '*' || operatorArray[i] === '/'){\n            if(operatorArray[i] === '*'){\n                result = operandArray[i] * operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n            else if(operatorArray[i] === '/'){\n                result = operandArray[i] / operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    for(let i = 0; i < operatorArray.length; i++){\n        if(operatorArray[i] === '+' || operatorArray[i] === '-'){\n            if(operatorArray[i] === '+'){\n                result = operandArray[i] + operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n            else if(operatorArray[i] === '-'){\n                result = operandArray[i] - operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your code here\n  var result = operand[0];\n  for(var i = 0; i < operator.length; i++){\n    if(operator[i] == '+'){\n      result += operand[i+1];\n    }\n    else if(operator[i] == '-'){\n      result -= operand[i+1];\n    }\n    else if(operator[i] == '*'){\n      result *= operand[i+1];\n    }\n    else if(operator[i] == '//'){\n      result = Math.floor(result / operand[i+1]);\n    }\n    else if(operator[i] == '**'){\n      result = Math.pow(result, operand[i+1]);\n    }\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let opr = operator;\n    let opd = operand;\n    let sum = opd[0];\n    for(let i = 0; i < opr.length; i++){\n        if(opr[i] == '+'){\n            sum += opd[i+1];\n        }\n        if(opr[i] == '-'){\n            sum -= opd[i+1];\n        }\n        if(opr[i] == '*'){\n            sum *= opd[i+1];\n        }\n        if(opr[i] == '//'){\n            sum /= opd[i+1];\n        }\n        if(opr[i] == '**'){\n            sum = Math.pow(sum, opd[i+1]);\n        }\n    }\n    return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let x = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] == '+'){\n            x += operand[i+1];\n        }else if(operator[i] == '-'){\n            x -= operand[i+1];\n        }else if(operator[i] == '*'){\n            x *= operand[i+1];\n        }else if(operator[i] == '//'){\n            x = Math.floor(x / operand[i+1]);\n        }else if(operator[i] == '**'){\n            x = Math.pow(x, operand[i+1]);\n        }\n    }\n    return x;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (operator.length === 0 || operand.length < 2) {\n    return 0;\n  }\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var res = operand[0];\n    for(var i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                res += operand[i+1];\n                break;\n            case '-':\n                res -= operand[i+1];\n                break;\n            case '*':\n                res *= operand[i+1];\n                break;\n            case '//':\n                res = Math.floor(res / operand[i+1]);\n                break;\n            case '**':\n                res = Math.pow(res, operand[i+1]);\n                break;\n        }\n    }\n    return res;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let res = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        let opr = operator[i];\n        let num = operand[i+1];\n        if(opr === '+'){\n            res += num;\n        }\n        else if(opr === '-'){\n            res -= num;\n        }\n        else if(opr === '*'){\n            res *= num;\n        }\n        else if(opr === '//'){\n            res = Math.floor(res / num);\n        }\n        else if(opr === '**'){\n            res = Math.pow(res, num);\n        }\n    }\n    return res;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "// Your code is here...\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        if(i === 0){\n            if(operator[i] === '+'){\n                result = operand[i] + operand[i+1];\n            }else if(operator[i] === '-'){\n                result = operand[i] - operand[i+1];\n            }else if(operator[i] === '*'){\n                result = operand[i] * operand[i+1];\n            }else if(operator[i] === '//'){\n                result = operand[i] / operand[i+1];\n            }else if(operator[i] === '**'){\n                result = operand[i] ** operand[i+1];\n            }\n        }else{\n            if(operator[i] === '+'){\n                result += operand[i+1];\n            }else if(operator[i] === '-'){\n                result -= operand[i+1];\n            }else if(operator[i] === '*'){\n                result *= operand[i+1];\n            }else if(operator[i] === '//'){\n                result /= operand[i+1];\n            }else if(operator[i] === '**'){\n                result **= operand[i+1];\n            }\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(operator.length == 0){\n        return operand[0];\n    }\n    let output = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] == '+'){\n            output += operand[i+1];\n        }\n        if(operator[i] == '-'){\n            output -= operand[i+1];\n        }\n        if(operator[i] == '*'){\n            output *= operand[i+1];\n        }\n        if(operator[i] == '//'){\n            output = Math.floor(output / operand[i+1]);\n        }\n        if(operator[i] == '**'){\n            output = Math.pow(output, operand[i+1]);\n        }\n    }\n    return output;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let str = '';\n    for(let i = 0; i < operand.length; i++){\n        str += `${operand[i]} ${operator[i]} `;\n    }\n    str += operand[operand.length - 1];\n    return eval(str);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "for(var i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      operand[i+1] = operand[i] + operand[i+1];\n    }\n    if(operator[i] === '-'){\n      operand[i+1] = operand[i] - operand[i+1];\n    }\n    if(operator[i] === '*'){\n      operand[i+1] = operand[i] * operand[i+1];\n    }\n    if(operator[i] === '//'){\n      operand[i+1] = Math.floor(operand[i] / operand[i+1]);\n    }\n    if(operator[i] === '**'){\n      operand[i+1] = Math.pow(operand[i], operand[i+1]);\n    }\n  }\n  return operand[operand.length-1];\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (operand.length < 2) return undefined;\n  let result = operand[0];\n  operand.shift();\n  operator.forEach((item, index) => {\n    switch (item) {\n      case '+':\n        result += operand[index];\n        break;\n      case '-':\n        result -= operand[index];\n        break;\n      case '*':\n        result *= operand[index];\n        break;\n      case '//':\n        result = Math.floor(result / operand[index]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[index]);\n        break;\n    }\n  });\n  return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        let operatorFunc = operator[i];\n        let operand1 = operand[i];\n        let operand2 = operand[i+1];\n        switch(operatorFunc){\n            case '+':\n                result = operand1 + operand2;\n                break;\n            case '-':\n                result = operand1 - operand2;\n                break;\n            case '*':\n                result = operand1 * operand2;\n                break;\n            case '//':\n                result = operand1 / operand2;\n                break;\n            case '**':\n                result = operand1 ** operand2;\n                break;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var arr = []\n    for(var i = 0; i < operator.length; i++){\n        if(operator[i] == '//'){\n            arr.push(Math.floor(operand[i+1] / operand[i]))\n        }\n        else if(operator[i] == '**'){\n            arr.push(Math.pow(operand[i], operand[i+1]))\n        }\n        else{\n            arr.push(operator[i], operand[i+1])\n        }\n    }\n    return eval(arr.join(''))\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.00022571766464061653,
        "bleu-0": 0.07717547565505038,
        "bleu-8": 0.4429467818732089,
        "bleu-7": 0.182431686834924,
        "bleu-16": 0.13577257657343358,
        "bleu-2": 0.1791177824252957,
        "bleu-11": 0.22622295209410345,
        "bleu-1": 0.07734416622566764,
        "bleu-10": 0.07435604505801988,
        "bleu-17": 0.09313631487077847,
        "bleu-12": 6.333835067264743e-19,
        "bleu-6": 0.4145292138506329,
        "bleu-18": 0.20354852835895176,
        "bleu-15": 0.002194433901702549,
        "bleu-13": 0.3006566285953652,
        "bleu-9": 0.03381270169123891,
        "bleu-4": 0.07734416622566764,
        "bleu-14": 0.051176086029939484,
        "bleu-5": 0.06691180063751913,
        "bleu-19": 4.747230806540075e-177,
        "codebleu-3": 0.04854695037375543,
        "codebleu-0": 0.1942506842304467,
        "codebleu-8": 0.6602284638865131,
        "codebleu-7": 0.2830950515999625,
        "codebleu-16": 0.2693750306963755,
        "codebleu-2": 0.2804010632203021,
        "codebleu-11": 0.3082668634836102,
        "codebleu-1": 0.19432698700448728,
        "codebleu-10": 0.19373259145200394,
        "codebleu-17": 0.20973113467560175,
        "codebleu-12": 0.008484848484848484,
        "codebleu-6": 0.5064756706249269,
        "codebleu-18": 0.2980222426279867,
        "codebleu-15": 0.06592159322908217,
        "codebleu-13": 0.361146431639937,
        "codebleu-9": 0.18076312533531402,
        "codebleu-4": 0.19432698700448728,
        "codebleu-14": 0.17029777365810186,
        "codebleu-5": 0.1980657261864953,
        "codebleu-19": 0.0024242424242424242,
        "chrf-3": 0.06179831359125182,
        "chrf-0": 0.23306866133913676,
        "chrf-8": 0.534716362806295,
        "chrf-7": 0.32276490370567457,
        "chrf-16": 0.209631391600299,
        "chrf-2": 0.3205937588178252,
        "chrf-11": 0.35792885651880646,
        "chrf-1": 0.23403850083513958,
        "chrf-10": 0.22194930541644747,
        "chrf-17": 0.20539531678698908,
        "chrf-12": 0.006595353297064145,
        "chrf-6": 0.4693295155424164,
        "chrf-18": 0.35041165850407,
        "chrf-15": 0.11769619689423581,
        "chrf-13": 0.43312267618996214,
        "chrf-9": 0.2063495910977788,
        "chrf-4": 0.23403850083513958,
        "chrf-14": 0.2785884177818248,
        "chrf-5": 0.2260619284987229,
        "chrf-19": 0.0015918497293855457,
        "rougel-3": 0.15184381778741868,
        "rougel-0": 0.32600732600732607,
        "rougel-8": 0.6033653846153847,
        "rougel-7": 0.4302925989672977,
        "rougel-16": 0.40624999999999994,
        "rougel-2": 0.44097222222222227,
        "rougel-11": 0.4444444444444445,
        "rougel-1": 0.32967032967032966,
        "rougel-10": 0.32234432234432236,
        "rougel-17": 0.3398926654740608,
        "rougel-12": 0.02877697841726619,
        "rougel-6": 0.5136612021857924,
        "rougel-18": 0.45161290322580644,
        "rougel-15": 0.21231422505307856,
        "rougel-13": 0.5105008077544426,
        "rougel-9": 0.26691042047531993,
        "rougel-4": 0.32967032967032966,
        "rougel-14": 0.27037037037037037,
        "rougel-5": 0.3476635514018692,
        "rougel-19": 0.004901960784313725,
        "meteor-3": 0.0578423459779392,
        "meteor-0": 0.1723688217748058,
        "meteor-8": 0.49419156478790455,
        "meteor-7": 0.24466974907898523,
        "meteor-16": 0.2222844610377843,
        "meteor-2": 0.2541221191369973,
        "meteor-11": 0.2795614831339957,
        "meteor-1": 0.1736943743666899,
        "meteor-10": 0.17104308752757957,
        "meteor-17": 0.18983742070773266,
        "meteor-12": 0.008167710318540702,
        "meteor-6": 0.3681468075632995,
        "meteor-18": 0.27512834349170967,
        "meteor-15": 0.07646900992755566,
        "meteor-13": 0.3074547604905147,
        "meteor-9": 0.17115650569509602,
        "meteor-4": 0.1736943743666899,
        "meteor-14": 0.15050381981032668,
        "meteor-5": 0.18054401553222188,
        "meteor-19": 0.0013646288209606986,
        "ruby-3": 0.08599508599508598,
        "ruby-0": 0.20147420147420148,
        "ruby-8": 0.3905882352941177,
        "ruby-7": 0.2825552825552825,
        "ruby-16": 0.2727272727272727,
        "ruby-2": 0.28746928746928746,
        "ruby-11": 0.2997542997542998,
        "ruby-1": 0.2039312039312039,
        "ruby-10": 0.19901719901719905,
        "ruby-17": 0.21621621621621623,
        "ruby-12": 0.014742014742014753,
        "ruby-6": 0.33660933660933656,
        "ruby-18": 0.30712530712530717,
        "ruby-15": 0.12285012285012287,
        "ruby-13": 0.3292383292383292,
        "ruby-9": 0.1646191646191646,
        "ruby-4": 0.2039312039312039,
        "ruby-14": 0.15724815724815722,
        "ruby-5": 0.2137592137592138,
        "ruby-19": 0.002457002457002422,
        "codebertscore_f1-3": 0.6682077050209045,
        "codebertscore_f3-3": 0.6213439702987671,
        "codebertscore_f1-0": 0.8124681115150452,
        "codebertscore_f3-0": 0.8042347431182861,
        "codebertscore_f1-8": 0.8589633703231812,
        "codebertscore_f3-8": 0.8658847212791443,
        "codebertscore_f1-7": 0.7974686026573181,
        "codebertscore_f3-7": 0.7825141549110413,
        "codebertscore_f1-16": 0.7949220538139343,
        "codebertscore_f3-16": 0.7830219268798828,
        "codebertscore_f1-2": 0.8134933710098267,
        "codebertscore_f3-2": 0.798621654510498,
        "codebertscore_f1-11": 0.8141756057739258,
        "codebertscore_f3-11": 0.7996127009391785,
        "codebertscore_f1-1": 0.8084404468536377,
        "codebertscore_f3-1": 0.7942745685577393,
        "codebertscore_f1-10": 0.8092140555381775,
        "codebertscore_f3-10": 0.8005284667015076,
        "codebertscore_f1-17": 0.764768123626709,
        "codebertscore_f3-17": 0.7506058812141418,
        "codebertscore_f1-12": 0.4735032320022583,
        "codebertscore_f3-12": 0.4340253174304962,
        "codebertscore_f1-6": 0.8415392637252808,
        "codebertscore_f3-6": 0.8273585438728333,
        "codebertscore_f1-18": 0.8241742849349976,
        "codebertscore_f3-18": 0.8094645142555237,
        "codebertscore_f1-15": 0.7275508642196655,
        "codebertscore_f3-15": 0.6742620468139648,
        "codebertscore_f1-13": 0.8292618989944458,
        "codebertscore_f3-13": 0.8037026524543762,
        "codebertscore_f1-9": 0.7491447329521179,
        "codebertscore_f3-9": 0.7280118465423584,
        "codebertscore_f1-4": 0.8133227825164795,
        "codebertscore_f3-4": 0.8044523000717163,
        "codebertscore_f1-14": 0.7870766520500183,
        "codebertscore_f3-14": 0.7715573310852051,
        "codebertscore_f1-5": 0.7890068292617798,
        "codebertscore_f3-5": 0.7655256986618042,
        "codebertscore_f1-19": 0.0,
        "codebertscore_f3-19": 0.0,
        "codebertscore_s_f1-3": 0.731967031955719,
        "codebertscore_s_f3-3": 0.6999192833900452,
        "codebertscore_s_f1-0": 0.8305197358131409,
        "codebertscore_s_f3-0": 0.8229368329048157,
        "codebertscore_s_f1-8": 0.8687577247619629,
        "codebertscore_s_f3-8": 0.8761663436889648,
        "codebertscore_s_f1-7": 0.8284393548965454,
        "codebertscore_s_f3-7": 0.8195332288742065,
        "codebertscore_s_f1-16": 0.8134965896606445,
        "codebertscore_s_f3-16": 0.801397442817688,
        "codebertscore_s_f1-2": 0.8394559025764465,
        "codebertscore_s_f3-2": 0.82762211561203,
        "codebertscore_s_f1-11": 0.8418413996696472,
        "codebertscore_s_f3-11": 0.8297550678253174,
        "codebertscore_s_f1-1": 0.8372849225997925,
        "codebertscore_s_f3-1": 0.8301070928573608,
        "codebertscore_s_f1-10": 0.8273859024047852,
        "codebertscore_s_f3-10": 0.8196476101875305,
        "codebertscore_s_f1-17": 0.7973523736000061,
        "codebertscore_s_f3-17": 0.7884355187416077,
        "codebertscore_s_f1-12": 0.5299485325813293,
        "codebertscore_s_f3-12": 0.500050961971283,
        "codebertscore_s_f1-6": 0.8529732823371887,
        "codebertscore_s_f3-6": 0.8374136686325073,
        "codebertscore_s_f1-18": 0.8375992178916931,
        "codebertscore_s_f3-18": 0.8226275444030762,
        "codebertscore_s_f1-15": 0.7943003177642822,
        "codebertscore_s_f3-15": 0.7555618286132812,
        "codebertscore_s_f1-13": 0.8484048247337341,
        "codebertscore_s_f3-13": 0.8273459076881409,
        "codebertscore_s_f1-9": 0.7723197937011719,
        "codebertscore_s_f3-9": 0.7593849897384644,
        "codebertscore_s_f1-4": 0.8322890996932983,
        "codebertscore_s_f3-4": 0.823539674282074,
        "codebertscore_s_f1-14": 0.8092522025108337,
        "codebertscore_s_f3-14": 0.8003286719322205,
        "codebertscore_s_f1-5": 0.8224188089370728,
        "codebertscore_s_f3-5": 0.8121606111526489,
        "codebertscore_s_f1-19": 0.0,
        "codebertscore_s_f3-19": 0.0,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 0,
        "raw_gpt35_nsnr-12": "0- The code snippet is empty and does not provide any implementation for the given problem.",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 2,
        "raw_gpt35_nsnr-14": "2",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 0,
        "raw_gpt35_nsnr-19": "0",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-19": 0,
        "raw_gpt35_nswr-19": "Score: 2"
    },
    {
        "intent": "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n",
        "snippet": [
            "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n"
        ],
        "simplified": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
        "task_id": "63",
        "0": "if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n == 2) return 1;\n    var sum = 0;\n    for(var i = 3; i <= n; i++){\n        sum += fibfib(i-1) + fibfib(i-2) + fibfib(i-3);\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "// Your code here\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  var n1 = 0;\n  var n2 = 0;\n  var n3 = 1;\n  var fib = 0;\n  for(var i = 3; i <= n; i++){\n    fib = n1 + n2 + n3;\n    n1 = n2;\n    n2 = n3;\n    n3 = fib;\n  }\n  return fib;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "// Write code here\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var firstNum = 0;\n    var secondNum = 0;\n    var thirdNum = 1;\n    var sum;\n    if(n == 0) {\n        return 0;\n    } else if(n == 1) {\n        return 0;\n    } else if(n == 2) {\n        return 1;\n    } else {\n        for(var i = 2; i < n; i++) {\n            sum = firstNum + secondNum + thirdNum;\n            firstNum = secondNum;\n            secondNum = thirdNum;\n            thirdNum = sum;\n        }\n        return sum;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "// base case\n\tif(n === 0) return 0;\n\tif(n === 1) return 0;\n\tif(n === 2) return 1;\n\t// recursive case\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var ret = 0;\n  if(n == 0){\n    ret = 0;\n  }else if(n == 1){\n    ret = 0;\n  }else if(n == 2){\n    ret = 1;\n  }else{\n    var one = 0;\n    var two = 0;\n    var three = 1;\n    for(var i = 3; i <= n; i++){\n      ret = one + two + three;\n      one = two;\n      two = three;\n      three = ret;\n    }\n  }\n  return ret;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let fib = [0,0,1];\n\tfor(let i = 3; i <= n; i++){\n\t\tfib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n\t}\n\treturn fib[n];\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "if(n == 0)\n        return 0;\n    if(n == 1)\n        return 0;\n    if(n == 2)\n        return 1;\n    var first = 0;\n    var second = 0;\n    var third = 1;\n    var sum = 0;\n    for(var i = 3; i <= n; i++){\n        sum = first + second + third;\n        first = second;\n        second = third;\n        third = sum;\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var pre2 = 0;\n    var pre1 = 0;\n    var cur = 1;\n    if(n < 0){\n        return undefined;\n    }\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    for(var i = 2; i < n; i++){\n        pre2 = pre1;\n        pre1 = cur;\n        cur = pre1 + pre2 + pre2;\n    }\n    return cur;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "let a = 0;\n    let b = 0;\n    let c = 1;\n    for(let i = 2; i <= n; i++){\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "// TODO: Implement me!\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    if(n >= 3){\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "14": "if(n<=0){\n        return 0;\n    }\n    if(n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "var a = 0, b = 0, c = 1, d = 0;\n  for(var i = 2; i <= n; i++){\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "var a = 0, b = 0, c = 1, d;\n  if (n == 0) return a;\n  if (n == 1) return b;\n  if (n == 2) return c;\n  for (var i = 3; i <= n; i++) {\n    d = c + b + a;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "18": "//base cases\n\tif(n === 0){\n\t\treturn 0;\n\t}\n\tif(n === 1){\n\t\treturn 0;\n\t}\n\tif(n === 2){\n\t\treturn 1;\n\t}\n\t//recursive cases\n\telse{\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let memo = [0,0,1];\n\tfor(let i = 3; i <= n; i++){\n\t\tlet num = memo[i-1] + memo[i-2] + memo[i-3];\n\t\tmemo.push(num);\n\t}\n\treturn memo[n];\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.43103110628620683,
        "bleu-1": 6.265209450301583e-05,
        "bleu-2": 0.241339378835934,
        "bleu-3": 6.265209450301583e-05,
        "bleu-4": 0.16955579239721075,
        "bleu-5": 0.6641865808065356,
        "bleu-6": 0.7912897124318089,
        "bleu-7": 0.17215354743405964,
        "bleu-8": 0.030769051937323884,
        "bleu-9": 0.26096882301518143,
        "bleu-10": 0.17432362586543382,
        "bleu-11": 0.03546647136740269,
        "bleu-12": 0.5088618052485783,
        "bleu-14": 0.6241484272655186,
        "bleu-15": 0.03270708060752706,
        "bleu-16": 0.22037567593238858,
        "bleu-17": 1.4251640827409357e-21,
        "bleu-18": 0.5090117883724737,
        "bleu-19": 0.043356111244457554,
        "codebleu-0": 0.7960075277367197,
        "codebleu-1": 0.039802859496902425,
        "codebleu-2": 0.5635486317816181,
        "codebleu-3": 0.039802859496902425,
        "codebleu-4": 0.5714851982209354,
        "codebleu-5": 0.7998966963396283,
        "codebleu-6": 0.8509312978791641,
        "codebleu-7": 0.5477635680217627,
        "codebleu-8": 0.38604081044055083,
        "codebleu-9": 0.5867207033239304,
        "codebleu-10": 0.5795262139439,
        "codebleu-11": 0.2868267358857884,
        "codebleu-12": 0.8138102287715111,
        "codebleu-14": 0.8007584605684797,
        "codebleu-15": 0.2967769846420073,
        "codebleu-16": 0.5576392223604957,
        "codebleu-17": 0.009950248756218904,
        "codebleu-18": 0.7939347284463892,
        "codebleu-19": 0.41077222582738476,
        "chrf-0": 0.6641791183092913,
        "chrf-1": 0.022198010403395804,
        "chrf-2": 0.45137954942992875,
        "chrf-3": 0.0220956728030516,
        "chrf-4": 0.29767543831384924,
        "chrf-5": 0.8058940077208807,
        "chrf-6": 0.8867916970344066,
        "chrf-7": 0.24713172079525988,
        "chrf-8": 0.23330705693393003,
        "chrf-9": 0.3958082934119415,
        "chrf-10": 0.30990438724934616,
        "chrf-11": 0.13168048678686073,
        "chrf-12": 0.7294292290531655,
        "chrf-14": 0.7647983068858513,
        "chrf-15": 0.12169848216465332,
        "chrf-16": 0.38890293033532264,
        "chrf-17": 0.015384615384615384,
        "chrf-18": 0.698899773006618,
        "chrf-19": 0.14093424400852336,
        "rougel-0": 0.6615384615384615,
        "rougel-1": 0.03636363636363636,
        "rougel-2": 0.4305555555555556,
        "rougel-3": 0.03636363636363636,
        "rougel-4": 0.38749999999999996,
        "rougel-5": 0.831858407079646,
        "rougel-6": 0.8952380952380952,
        "rougel-7": 0.37419354838709673,
        "rougel-8": 0.32432432432432434,
        "rougel-9": 0.4397163120567376,
        "rougel-10": 0.4105960264900662,
        "rougel-11": 0.30188679245283023,
        "rougel-12": 0.7580645161290323,
        "rougel-14": 0.8518518518518519,
        "rougel-15": 0.31481481481481477,
        "rougel-16": 0.42647058823529416,
        "rougel-17": 0.039999999999999994,
        "rougel-18": 0.7704918032786885,
        "rougel-19": 0.3275862068965517,
        "meteor-0": 0.7467054538574335,
        "meteor-1": 0.011185682326621923,
        "meteor-2": 0.47730099502487555,
        "meteor-3": 0.011185682326621923,
        "meteor-4": 0.42315262122025415,
        "meteor-5": 0.9262109551833408,
        "meteor-6": 0.9423539881206661,
        "meteor-7": 0.4383837630116032,
        "meteor-8": 0.34972564612326046,
        "meteor-9": 0.47998749218261416,
        "meteor-10": 0.5006701755533034,
        "meteor-11": 0.24965564738292012,
        "meteor-12": 0.8807652626148843,
        "meteor-14": 0.9165548204158791,
        "meteor-15": 0.2486570247933884,
        "meteor-16": 0.48453282828282834,
        "meteor-17": 0.011312217194570134,
        "meteor-18": 0.9023133167639282,
        "meteor-19": 0.3672245444628063,
        "ruby-0": 0.5308641975308642,
        "ruby-1": 0.020408163265306145,
        "ruby-2": 0.3263157894736842,
        "ruby-3": 0.020408163265306145,
        "ruby-4": 0.2702702702702703,
        "ruby-5": 0.734375,
        "ruby-6": 0.8392857142857143,
        "ruby-7": 0.26415094339622647,
        "ruby-8": 0.22580645161290325,
        "ruby-9": 0.3369565217391305,
        "ruby-10": 0.2941176470588235,
        "ruby-11": 0.1578947368421053,
        "ruby-12": 0.6266666666666667,
        "ruby-14": 0.7796610169491526,
        "ruby-15": 0.18644067796610164,
        "ruby-16": 0.31034482758620685,
        "ruby-17": 0.020408163265306145,
        "ruby-18": 0.6438356164383562,
        "ruby-19": 0.22388059701492535,
        "codebertscore_f1-0": 0.8985724449157715,
        "codebertscore_f3-0": 0.9233635067939758,
        "codebertscore_f1-1": 0.5852349996566772,
        "codebertscore_f3-1": 0.5687006711959839,
        "codebertscore_f1-2": 0.8224372267723083,
        "codebertscore_f3-2": 0.8307892680168152,
        "codebertscore_f1-3": 0.6201182007789612,
        "codebertscore_f3-3": 0.6002998352050781,
        "codebertscore_f1-4": 0.7510829567909241,
        "codebertscore_f3-4": 0.7702345252037048,
        "codebertscore_f1-5": 0.9301520586013794,
        "codebertscore_f3-5": 0.9458550810813904,
        "codebertscore_f1-6": 0.967738687992096,
        "codebertscore_f3-6": 0.9652284383773804,
        "codebertscore_f1-7": 0.7631270289421082,
        "codebertscore_f3-7": 0.7739626169204712,
        "codebertscore_f1-8": 0.8289778232574463,
        "codebertscore_f3-8": 0.8374584913253784,
        "codebertscore_f1-9": 0.7864574790000916,
        "codebertscore_f3-9": 0.7921841144561768,
        "codebertscore_f1-10": 0.755763590335846,
        "codebertscore_f3-10": 0.7639779448509216,
        "codebertscore_f1-11": 0.7369772791862488,
        "codebertscore_f3-11": 0.7453209161758423,
        "codebertscore_f1-12": 0.8969139456748962,
        "codebertscore_f3-12": 0.9102311134338379,
        "codebertscore_f1-14": 0.9206738471984863,
        "codebertscore_f3-14": 0.9199057221412659,
        "codebertscore_f1-15": 0.7404410243034363,
        "codebertscore_f3-15": 0.7444407939910889,
        "codebertscore_f1-16": 0.7836166024208069,
        "codebertscore_f3-16": 0.7930414080619812,
        "codebertscore_f1-17": 0.0,
        "codebertscore_f3-17": 0.0,
        "codebertscore_f1-18": 0.9084637761116028,
        "codebertscore_f3-18": 0.9300773739814758,
        "codebertscore_f1-19": 0.794640839099884,
        "codebertscore_f3-19": 0.8058657050132751,
        "codebertscore_s_f1-0": 0.9033123850822449,
        "codebertscore_s_f3-0": 0.9311167597770691,
        "codebertscore_s_f1-1": 0.534447968006134,
        "codebertscore_s_f3-1": 0.5214075446128845,
        "codebertscore_s_f1-2": 0.8229339122772217,
        "codebertscore_s_f3-2": 0.8292591571807861,
        "codebertscore_s_f1-3": 0.5605655312538147,
        "codebertscore_s_f3-3": 0.5336673855781555,
        "codebertscore_s_f1-4": 0.7660249471664429,
        "codebertscore_s_f3-4": 0.7800964713096619,
        "codebertscore_s_f1-5": 0.9352648854255676,
        "codebertscore_s_f3-5": 0.9527173042297363,
        "codebertscore_s_f1-6": 0.9687654972076416,
        "codebertscore_s_f3-6": 0.9666730761528015,
        "codebertscore_s_f1-7": 0.7758228778839111,
        "codebertscore_s_f3-7": 0.7897594571113586,
        "codebertscore_s_f1-8": 0.8347895741462708,
        "codebertscore_s_f3-8": 0.842312216758728,
        "codebertscore_s_f1-9": 0.8004009127616882,
        "codebertscore_s_f3-9": 0.8071310520172119,
        "codebertscore_s_f1-10": 0.7673295140266418,
        "codebertscore_s_f3-10": 0.7775112390518188,
        "codebertscore_s_f1-11": 0.7399269342422485,
        "codebertscore_s_f3-11": 0.7469152212142944,
        "codebertscore_s_f1-12": 0.9038951396942139,
        "codebertscore_s_f3-12": 0.9193587899208069,
        "codebertscore_s_f1-14": 0.9164125919342041,
        "codebertscore_s_f3-14": 0.9183598756790161,
        "codebertscore_s_f1-15": 0.7552129626274109,
        "codebertscore_s_f3-15": 0.757875919342041,
        "codebertscore_s_f1-16": 0.7887731790542603,
        "codebertscore_s_f3-16": 0.8006973266601562,
        "codebertscore_s_f1-17": 0.0,
        "codebertscore_s_f3-17": 0.0,
        "codebertscore_s_f1-18": 0.9106922745704651,
        "codebertscore_s_f3-18": 0.9347983598709106,
        "codebertscore_s_f1-19": 0.8021137118339539,
        "codebertscore_s_f3-19": 0.813382625579834,
        "gpt35_nsnr-0": 2,
        "raw_gpt35_nsnr-0": "2",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "0",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 0,
        "raw_gpt35_nsnr-3": "0",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nfunction concatenate(strings){\n",
        "snippet": [
            "  return strings.join('');\n}\n\n"
        ],
        "simplified": "Concatenate list of strings into a single string",
        "task_id": "28",
        "0": "return strings.reduce(function(a, b){\n    return a + b;\n  }, '');\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "// YOUR CODE HERE\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "// your code here\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "if(strings.length===0){\n\t\treturn '';\n\t}\n\telse{\n\t\treturn strings[0]+concatenate(strings.slice(1));\n\t}\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return strings.reduce(function(a, b){\n        return a + b;\n    }, '');\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "var str = '';\n    for(var i = 0; i < strings.length; i++){\n        str += strings[i];\n    }\n    return str;\n}",
        "grade-5": {
            "execution": 1
        },
        "7": "var finalstring = \"\";\n  for (var i = 0; i < strings.length; i++) {\n    finalstring += strings[i];\n  }\n  return finalstring;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var str = \"\";\n  for(var i = 0; i < strings.length; i++){\n    str += strings[i];\n  }\n  return str;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "return strings.reduce(\n        function(accumulator, value){\n            return accumulator + value;\n        }\n    )\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "let result = strings.reduce((acc, val) => {\n    return acc + val;\n  });\n  return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var result = \"\";\n\tfor(var i = 0; i < strings.length; i++){\n\t\tresult += strings[i];\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "if(strings.length === 0){\n        return '';\n    } else if(strings.length === 1){\n        return strings[0];\n    } else {\n        return strings[0] + concatenate(strings.slice(1));\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "//base case\n  if(strings.length === 0){\n    return '';\n  }\n  //recursive case\n  return strings[0] + concatenate(strings.slice(1));\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "return strings.join('');\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "var newstring = \"\";\n\tfor (var i = 0; i < strings.length; i++){\n\t\tnewstring += strings[i];\n\t}\n\treturn newstring;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "var result = \"\";\n    strings.forEach(function(str){\n        result += str;\n    });\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "let newString = '';\n  for (let i = 0; i < strings.length; i++){\n    newString += strings[i];\n  }\n  return newString;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return strings.reduce(function(string, newStr){\n        return string + newStr;\n    }, '');\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var result = '';\n    for(var i = 0; i < strings.length; i++) {\n        result += strings[i];\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-0": 0.20287366424876002,
        "bleu-1": 0.04167251645138561,
        "bleu-2": 0.04167251645138561,
        "bleu-3": 0.06316184084967408,
        "bleu-4": 0.20287366424876002,
        "bleu-5": 0.03819932138872921,
        "bleu-7": 0.03819932138872921,
        "bleu-8": 0.03819932138872921,
        "bleu-9": 0.0974812453975988,
        "bleu-10": 0.04996434935345059,
        "bleu-11": 0.03819932138872921,
        "bleu-12": 0.04071802586325408,
        "bleu-13": 0.055159791588872624,
        "bleu-14": 1.0000000000000004,
        "bleu-15": 0.03819932138872921,
        "bleu-16": 0.055010341421809154,
        "bleu-17": 0.03522013080174587,
        "bleu-18": 0.18627639656696826,
        "bleu-19": 0.03819932138872921,
        "codebleu-0": 0.6983781037053255,
        "codebleu-1": 0.162974853657951,
        "codebleu-2": 0.162974853657951,
        "codebleu-3": 0.6645658263305322,
        "codebleu-4": 0.6983781037053255,
        "codebleu-5": 0.5861344537815125,
        "codebleu-7": 0.5861344537815125,
        "codebleu-8": 0.5861344537815125,
        "codebleu-9": 0.5231092436974789,
        "codebleu-10": 0.5231092436974789,
        "codebleu-11": 0.5861344537815125,
        "codebleu-12": 0.6645658263305322,
        "codebleu-13": 0.6645658263305322,
        "codebleu-14": 1.0,
        "codebleu-15": 0.5861344537815125,
        "codebleu-16": 0.6645658263305322,
        "codebleu-17": 0.5861344537815125,
        "codebleu-18": 0.6956118924250269,
        "codebleu-19": 0.5861344537815125,
        "chrf-0": 0.5392673304259596,
        "chrf-1": 0.0075075075075075074,
        "chrf-2": 0.06076926251496017,
        "chrf-3": 0.40045446943557717,
        "chrf-4": 0.5392673304259596,
        "chrf-5": 0.4134667843052384,
        "chrf-7": 0.28781516673329577,
        "chrf-8": 0.39833261057917296,
        "chrf-9": 0.4028789861563989,
        "chrf-10": 0.32767398349748156,
        "chrf-11": 0.31361351834822926,
        "chrf-12": 0.31766823311043757,
        "chrf-13": 0.36075646744369666,
        "chrf-14": 1.0,
        "chrf-15": 0.2976074778497623,
        "chrf-16": 0.3344737045580105,
        "chrf-17": 0.311253702125958,
        "chrf-18": 0.475868280767833,
        "chrf-19": 0.3279638576653376,
        "rougel-0": 0.5294117647058825,
        "rougel-1": 0.125,
        "rougel-2": 0.125,
        "rougel-3": 0.30434782608695654,
        "rougel-4": 0.5294117647058825,
        "rougel-5": 0.21276595744680854,
        "rougel-7": 0.21276595744680854,
        "rougel-8": 0.21276595744680854,
        "rougel-9": 0.4666666666666667,
        "rougel-10": 0.32432432432432434,
        "rougel-11": 0.21276595744680854,
        "rougel-12": 0.2153846153846154,
        "rougel-13": 0.2745098039215686,
        "rougel-14": 1.0,
        "rougel-15": 0.21276595744680854,
        "rougel-16": 0.3157894736842105,
        "rougel-17": 0.2,
        "rougel-18": 0.5,
        "rougel-19": 0.21276595744680854,
        "meteor-0": 0.7548191466320123,
        "meteor-1": 0.05208333333333333,
        "meteor-2": 0.05208333333333333,
        "meteor-3": 0.6084656084656085,
        "meteor-4": 0.7548191466320123,
        "meteor-5": 0.5419461456206863,
        "meteor-7": 0.5419461456206863,
        "meteor-8": 0.5419461456206863,
        "meteor-9": 0.43599257884972165,
        "meteor-10": 0.48927263212977484,
        "meteor-11": 0.5419461456206863,
        "meteor-12": 0.5287356321839082,
        "meteor-13": 0.6281217604372821,
        "meteor-14": 0.9995,
        "meteor-15": 0.5419461456206863,
        "meteor-16": 0.6497175141242939,
        "meteor-17": 0.5294396961063629,
        "meteor-18": 0.741805023414219,
        "meteor-19": 0.5419461456206863,
        "ruby-0": 0.375,
        "ruby-1": 0.09999999999999998,
        "ruby-2": 0.09999999999999998,
        "ruby-3": 0.19444444444444442,
        "ruby-4": 0.375,
        "ruby-5": 0.1351351351351351,
        "ruby-7": 0.1351351351351351,
        "ruby-8": 0.1351351351351351,
        "ruby-9": 0.35,
        "ruby-10": 0.2222222222222222,
        "ruby-11": 0.1351351351351351,
        "ruby-12": 0.12727272727272732,
        "ruby-13": 0.1707317073170732,
        "ruby-14": 1.0,
        "ruby-15": 0.1351351351351351,
        "ruby-16": 0.2142857142857143,
        "ruby-17": 0.125,
        "ruby-18": 0.34615384615384615,
        "ruby-19": 0.1351351351351351,
        "codebertscore_f1-0": 0.8218750357627869,
        "codebertscore_f3-0": 0.8631320595741272,
        "codebertscore_f1-1": 0.669096052646637,
        "codebertscore_f3-1": 0.6677065491676331,
        "codebertscore_f1-2": 0.6799371838569641,
        "codebertscore_f3-2": 0.6822507381439209,
        "codebertscore_f1-3": 0.7429937124252319,
        "codebertscore_f3-3": 0.7878598570823669,
        "codebertscore_f1-4": 0.8195874094963074,
        "codebertscore_f3-4": 0.8623529076576233,
        "codebertscore_f1-5": 0.7760493755340576,
        "codebertscore_f3-5": 0.8116317987442017,
        "codebertscore_f1-7": 0.7737165689468384,
        "codebertscore_f3-7": 0.8107747435569763,
        "codebertscore_f1-8": 0.7799398303031921,
        "codebertscore_f3-8": 0.8161280751228333,
        "codebertscore_f1-9": 0.7860503196716309,
        "codebertscore_f3-9": 0.8359429836273193,
        "codebertscore_f1-10": 0.7965943217277527,
        "codebertscore_f3-10": 0.8222647309303284,
        "codebertscore_f1-11": 0.773417055606842,
        "codebertscore_f3-11": 0.8123242259025574,
        "codebertscore_f1-12": 0.7250427007675171,
        "codebertscore_f3-12": 0.7681962251663208,
        "codebertscore_f1-13": 0.7272140979766846,
        "codebertscore_f3-13": 0.773867666721344,
        "codebertscore_f1-14": 1.0000001192092896,
        "codebertscore_f3-14": 1.0000001192092896,
        "codebertscore_f1-15": 0.7770549654960632,
        "codebertscore_f3-15": 0.8157289028167725,
        "codebertscore_f1-16": 0.7819386720657349,
        "codebertscore_f3-16": 0.8134409189224243,
        "codebertscore_f1-17": 0.7738608717918396,
        "codebertscore_f3-17": 0.8111404180526733,
        "codebertscore_f1-18": 0.8220764398574829,
        "codebertscore_f3-18": 0.8610892295837402,
        "codebertscore_f1-19": 0.7698129415512085,
        "codebertscore_f3-19": 0.8069196939468384,
        "codebertscore_s_f1-0": 0.8298606872558594,
        "codebertscore_s_f3-0": 0.872069239616394,
        "codebertscore_s_f1-1": 0.6432296633720398,
        "codebertscore_s_f3-1": 0.645686686038971,
        "codebertscore_s_f1-2": 0.6434565186500549,
        "codebertscore_s_f3-2": 0.6457872986793518,
        "codebertscore_s_f1-3": 0.7562492489814758,
        "codebertscore_s_f3-3": 0.81038898229599,
        "codebertscore_s_f1-4": 0.8303225636482239,
        "codebertscore_s_f3-4": 0.8731517195701599,
        "codebertscore_s_f1-5": 0.7856053113937378,
        "codebertscore_s_f3-5": 0.8230580687522888,
        "codebertscore_s_f1-7": 0.7821522951126099,
        "codebertscore_s_f3-7": 0.8256232142448425,
        "codebertscore_s_f1-8": 0.7881479859352112,
        "codebertscore_s_f3-8": 0.8277621269226074,
        "codebertscore_s_f1-9": 0.7910980582237244,
        "codebertscore_s_f3-9": 0.8460988402366638,
        "codebertscore_s_f1-10": 0.802201509475708,
        "codebertscore_s_f3-10": 0.8387587070465088,
        "codebertscore_s_f1-11": 0.7820234894752502,
        "codebertscore_s_f3-11": 0.8252137899398804,
        "codebertscore_s_f1-12": 0.7467706799507141,
        "codebertscore_s_f3-12": 0.7941941618919373,
        "codebertscore_s_f1-13": 0.7474633455276489,
        "codebertscore_s_f3-13": 0.8057296276092529,
        "codebertscore_s_f1-14": 0.9999996423721313,
        "codebertscore_s_f3-14": 0.9999995231628418,
        "codebertscore_s_f1-15": 0.7821454405784607,
        "codebertscore_s_f3-15": 0.8243284821510315,
        "codebertscore_s_f1-16": 0.7907410264015198,
        "codebertscore_s_f3-16": 0.8224051594734192,
        "codebertscore_s_f1-17": 0.7789077162742615,
        "codebertscore_s_f3-17": 0.8198122382164001,
        "codebertscore_s_f1-18": 0.8328785300254822,
        "codebertscore_s_f3-18": 0.8701207637786865,
        "codebertscore_s_f1-19": 0.7789128422737122,
        "codebertscore_s_f3-19": 0.8197733759880066,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "0",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 0,
        "raw_gpt35_nswr-1": "0",
        "gpt35_nswr-2": 0,
        "raw_gpt35_nswr-2": "0",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n",
        "snippet": [
            "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n"
        ],
        "simplified": "Return a greatest common divisor of two integers a and b",
        "task_id": "13",
        "3": "if(b == 0){\n\t\treturn a;\n\t}\n\telse{\n\t\treturn greatest_common_divisor(b, a % b);\n\t}\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if (a == 0) return b;\n  if (b == 0) return a;\n  return greatest_common_divisor(b, a % b);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var result;\n\tvar arr = [];\n\tfor(var i = 1; i <= a; i++){\n\t\tif(a % i === 0){\n\t\t\tarr.push(i);\n\t\t}\n\t}\n\tfor(var j = 0; j < arr.length; j++){\n\t\tif(b % arr[j] === 0){\n\t\t\tresult = arr[j];\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "// make sure a is greater than b\n    if (a < b){\n        let t = a;\n        a = b;\n        b = t;\n    }\n    // compute remainder by modulus, subtract when b > 0\n    let r = a % b;\n    while (r > 0){\n        a = b;\n        b = r;\n        r = a % b;\n    }\n    return b;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if (a<b){\n\t\tvar tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tvar r = a % b;\n\tif (r==0){\n\t\treturn b;\n\t}\n\treturn greatest_common_divisor(b, r);\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if (a % b === 0) {\n        return b;\n    }\n    else {\n        return greatest_common_divisor(b, a % b);\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let r;\n    while (b != 0){\n        r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "while (a !== b){\n\t\tif (a > b){\n\t\t\ta = a - b;\n\t\t}\n\t\telse{\n\t\t\tb = b - a;\n\t\t}\n\t}\n\treturn a;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var divisor = 2, \n        greatestDivisor = 1;\n\n    //if u pass a -ve number this will not work. fix it dude!!\n    if (a < 2 || b < 2)\n       return 1;\n    \n    while(a >= divisor && b >= divisor){\n     if(a %divisor == 0 && b% divisor ==0){\n            greatestDivisor = divisor;      \n        }\n     divisor++;\n    }\n    return greatestDivisor;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var divisor = 2, \n      greatestDivisor = 1;\n\n  //if u pass a -ve number this will not work. fix it dude!!\n  if (a < 2 || b < 2)\n     return 1;\n  \n  while(a >= divisor && b >= divisor){\n   if(a %divisor == 0 && b% divisor ==0){\n      greatestDivisor = divisor;      \n    }\n   divisor++;\n  }\n  return greatestDivisor;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(!b){\n\t\treturn a;\n\t}\n\treturn greatest_common_divisor(b, a % b);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var divisor = 2,\n        greatestDivisor = 1;\n\n    //if u pass a -ve number this will not work. fix it dude!!\n    if (a < 2 || b < 2)\n        return 1;\n\n    while(a >= divisor && b >= divisor){\n        if(a %divisor == 0 && b% divisor ==0){\n            greatestDivisor = divisor;\n        }\n        divisor++;\n    }\n    return greatestDivisor;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var arr = [a, b];\n  var num = 1;\n  var divisor = 1;\n  while(divisor <= Math.min(...arr)){\n    if(a % divisor === 0 && b % divisor === 0){\n      num = divisor;\n    }\n    divisor++;\n  }\n  return num;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if(b===0){\n        return a;\n    }else{\n        return greatest_common_divisor(b, a%b);\n    }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "var gcd = 1;\n  for (var i = 2; i <= Math.min(a, b); i++) {\n    if (a % i == 0 && b % i == 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "//...\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "while (a !== b) {\n      if (a > b) {\n          a = a - b;\n      } else {\n          b = b - a;\n      }\n  }\n  return a;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(b==0){\n    return a;\n  }\n  else{\n    return greatest_common_divisor(b,a%b);\n  }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if(a < 0 || b < 0){\n    return -1;\n  }\n  else if(a < b){\n    if(a === 0){\n      return b;\n    }\n    return greatest_common_divisor(b%a, a);\n  }\n  else if(a > b){\n    if(b === 0){\n      return a;\n    }\n    return greatest_common_divisor(a%b, b);\n  }\n  else{\n    return a;\n  }\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.22975467160343224,
        "bleu-0": 0.12756976469629352,
        "bleu-8": 0.05317900363925533,
        "bleu-7": 0.1933873026111778,
        "bleu-16": 0.29311547383866143,
        "bleu-2": 0.17320325759348912,
        "bleu-11": 0.631848859362397,
        "bleu-1": 0.19856256727582136,
        "bleu-10": 0.05294421201765632,
        "bleu-17": 0.05294421201765632,
        "bleu-12": 0.16032156689996072,
        "bleu-6": 0.05294421201765632,
        "bleu-18": 0.06789932578904175,
        "bleu-15": 0.23301482433033083,
        "bleu-13": 1.879528816539084e-12,
        "bleu-9": 0.0709329427348054,
        "bleu-4": 0.0020747524256260696,
        "bleu-14": 0.19856256727582136,
        "bleu-5": 0.22975467160343224,
        "bleu-19": 0.1008793484904606,
        "codebleu-3": 0.46164977235746385,
        "codebleu-0": 0.4629629629629629,
        "codebleu-8": 0.6153446487546907,
        "codebleu-7": 0.7220460319166777,
        "codebleu-16": 0.6923710974916287,
        "codebleu-2": 0.5057190614507666,
        "codebleu-11": 0.818271106190029,
        "codebleu-1": 0.6349456130644887,
        "codebleu-10": 0.6569721834844241,
        "codebleu-17": 0.6569721834844241,
        "codebleu-12": 0.3490077375430582,
        "codebleu-6": 0.6569721834844241,
        "codebleu-18": 0.6640943320759514,
        "codebleu-15": 0.48883621967833424,
        "codebleu-13": 0.01851851851852722,
        "codebleu-9": 0.6044147497150602,
        "codebleu-4": 0.03715537746854864,
        "codebleu-14": 0.6349456130644887,
        "codebleu-5": 0.46164977235746385,
        "codebleu-19": 0.6047761877113731,
        "chrf-3": 0.26901508367223737,
        "chrf-0": 0.24213741522161925,
        "chrf-8": 0.1834600382110714,
        "chrf-7": 0.40743104616743686,
        "chrf-16": 0.40404625075400324,
        "chrf-2": 0.22851872010539653,
        "chrf-11": 0.5890150535619803,
        "chrf-1": 0.3525128943911969,
        "chrf-10": 0.19838611211837867,
        "chrf-17": 0.19838611211837867,
        "chrf-12": 0.27653065265611637,
        "chrf-6": 0.19838611211837867,
        "chrf-18": 0.21851038525497618,
        "chrf-15": 0.27130591872989585,
        "chrf-13": 0.027624309392265192,
        "chrf-9": 0.1899597145234583,
        "chrf-4": 0.004480286738351255,
        "chrf-14": 0.3525128943911969,
        "chrf-5": 0.26901508367223737,
        "chrf-19": 0.23671755801876881,
        "rougel-3": 0.5185185185185186,
        "rougel-0": 0.44067796610169496,
        "rougel-8": 0.25210084033613445,
        "rougel-7": 0.4077669902912622,
        "rougel-16": 0.5194805194805194,
        "rougel-2": 0.49122807017543857,
        "rougel-11": 0.793103448275862,
        "rougel-1": 0.6153846153846154,
        "rougel-10": 0.25210084033613445,
        "rougel-17": 0.25210084033613445,
        "rougel-12": 0.4489795918367347,
        "rougel-6": 0.25210084033613445,
        "rougel-18": 0.288659793814433,
        "rougel-15": 0.509090909090909,
        "rougel-13": 0.0689655172413793,
        "rougel-9": 0.32941176470588235,
        "rougel-4": 0.058823529411764705,
        "rougel-14": 0.6153846153846154,
        "rougel-5": 0.5185185185185186,
        "rougel-19": 0.3448275862068965,
        "meteor-3": 0.35660053272261083,
        "meteor-0": 0.4491166077738516,
        "meteor-8": 0.41765261704206813,
        "meteor-7": 0.5967217125382264,
        "meteor-16": 0.5487379811466505,
        "meteor-2": 0.3886988495775871,
        "meteor-11": 0.8870756221410886,
        "meteor-1": 0.6406031056078241,
        "meteor-10": 0.5261226514415291,
        "meteor-17": 0.5261226514415291,
        "meteor-12": 0.4411070411070411,
        "meteor-6": 0.5261226514415291,
        "meteor-18": 0.5095329928440743,
        "meteor-15": 0.3734125403778929,
        "meteor-13": 0.019762845849802372,
        "meteor-9": 0.4815533980582525,
        "meteor-4": 0.01937984496124031,
        "meteor-14": 0.6406031056078241,
        "meteor-5": 0.35660053272261083,
        "meteor-19": 0.4190203491604582,
        "ruby-3": 0.3928571428571429,
        "ruby-0": 0.25806451612903225,
        "ruby-8": 0.1648351648351648,
        "ruby-7": 0.2666666666666667,
        "ruby-16": 0.36734693877551017,
        "ruby-2": 0.31034482758620685,
        "ruby-11": 0.6666666666666667,
        "ruby-1": 0.4864864864864865,
        "ruby-10": 0.15384615384615385,
        "ruby-17": 0.15384615384615385,
        "ruby-12": 0.3928571428571429,
        "ruby-6": 0.15384615384615385,
        "ruby-18": 0.18840579710144922,
        "ruby-15": 0.3571428571428571,
        "ruby-13": 0.0357142857142857,
        "ruby-9": 0.22807017543859653,
        "ruby-4": 0.0357142857142857,
        "ruby-14": 0.4864864864864865,
        "ruby-5": 0.3928571428571429,
        "ruby-19": 0.2272727272727273,
        "codebertscore_f1-3": 0.7896013855934143,
        "codebertscore_f3-3": 0.8162039518356323,
        "codebertscore_f1-0": 0.8006550073623657,
        "codebertscore_f3-0": 0.8194694519042969,
        "codebertscore_f1-8": 0.7485945820808411,
        "codebertscore_f3-8": 0.7742689251899719,
        "codebertscore_f1-7": 0.8051807880401611,
        "codebertscore_f3-7": 0.8470994830131531,
        "codebertscore_f1-16": 0.8219205737113953,
        "codebertscore_f3-16": 0.8522112369537354,
        "codebertscore_f1-2": 0.7810745239257812,
        "codebertscore_f3-2": 0.8020927906036377,
        "codebertscore_f1-11": 0.9034281969070435,
        "codebertscore_f3-11": 0.9074362516403198,
        "codebertscore_f1-1": 0.8336827754974365,
        "codebertscore_f3-1": 0.834802508354187,
        "codebertscore_f1-10": 0.6961380243301392,
        "codebertscore_f3-10": 0.7414324879646301,
        "codebertscore_f1-17": 0.7037330269813538,
        "codebertscore_f3-17": 0.7475000023841858,
        "codebertscore_f1-12": 0.7836683392524719,
        "codebertscore_f3-12": 0.7972987294197083,
        "codebertscore_f1-6": 0.6989068388938904,
        "codebertscore_f3-6": 0.7443394064903259,
        "codebertscore_f1-18": 0.7650828957557678,
        "codebertscore_f3-18": 0.8036035895347595,
        "codebertscore_f1-15": 0.7840375900268555,
        "codebertscore_f3-15": 0.8113278150558472,
        "codebertscore_f1-13": 0.0,
        "codebertscore_f3-13": 0.0,
        "codebertscore_f1-9": 0.7783980369567871,
        "codebertscore_f3-9": 0.8039618134498596,
        "codebertscore_f1-4": 0.5911822319030762,
        "codebertscore_f3-4": 0.5896691083908081,
        "codebertscore_f1-14": 0.8259033560752869,
        "codebertscore_f3-14": 0.8267700672149658,
        "codebertscore_f1-5": 0.7844569087028503,
        "codebertscore_f3-5": 0.809054970741272,
        "codebertscore_f1-19": 0.7341877222061157,
        "codebertscore_f3-19": 0.7596299052238464,
        "codebertscore_s_f1-3": 0.8026031851768494,
        "codebertscore_s_f3-3": 0.8294986486434937,
        "codebertscore_s_f1-0": 0.8119683265686035,
        "codebertscore_s_f3-0": 0.8300076127052307,
        "codebertscore_s_f1-8": 0.7565909624099731,
        "codebertscore_s_f3-8": 0.7931923866271973,
        "codebertscore_s_f1-7": 0.8144060373306274,
        "codebertscore_s_f3-7": 0.8674598932266235,
        "codebertscore_s_f1-16": 0.8373982906341553,
        "codebertscore_s_f3-16": 0.869647204875946,
        "codebertscore_s_f1-2": 0.7992390990257263,
        "codebertscore_s_f3-2": 0.8207493424415588,
        "codebertscore_s_f1-11": 0.9204210638999939,
        "codebertscore_s_f3-11": 0.9265214800834656,
        "codebertscore_s_f1-1": 0.8511567115783691,
        "codebertscore_s_f3-1": 0.8504011034965515,
        "codebertscore_s_f1-10": 0.6998684406280518,
        "codebertscore_s_f3-10": 0.7589252591133118,
        "codebertscore_s_f1-17": 0.7084252238273621,
        "codebertscore_s_f3-17": 0.7677341103553772,
        "codebertscore_s_f1-12": 0.7930569052696228,
        "codebertscore_s_f3-12": 0.8069764375686646,
        "codebertscore_s_f1-6": 0.7010136842727661,
        "codebertscore_s_f3-6": 0.7604339718818665,
        "codebertscore_s_f1-18": 0.7698869109153748,
        "codebertscore_s_f3-18": 0.8194996118545532,
        "codebertscore_s_f1-15": 0.8014944195747375,
        "codebertscore_s_f3-15": 0.8298643827438354,
        "codebertscore_s_f1-13": 0.0,
        "codebertscore_s_f3-13": 0.0,
        "codebertscore_s_f1-9": 0.7936920523643494,
        "codebertscore_s_f3-9": 0.8289610147476196,
        "codebertscore_s_f1-4": 0.5946989059448242,
        "codebertscore_s_f3-4": 0.5812832117080688,
        "codebertscore_s_f1-14": 0.8455916047096252,
        "codebertscore_s_f3-14": 0.8460918664932251,
        "codebertscore_s_f1-5": 0.7964188456535339,
        "codebertscore_s_f3-5": 0.8229057788848877,
        "codebertscore_s_f1-19": 0.7450190782546997,
        "codebertscore_s_f3-19": 0.7763665318489075,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0- The code snippet does not contain any implementation for the required functionality.",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case(string){\n",
        "snippet": [
            "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n"
        ],
        "simplified": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "task_id": "27",
        "3": "var string = \"Hello\"\n    var newString = \"\";\n    for (var i = 0; i < string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//TODO\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var newstr = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] == string[i].toUpperCase()){\n            newstr += string[i].toLowerCase();\n        } else {\n            newstr += string[i].toUpperCase();\n        }\n    }\n    return newstr;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var flipped = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            flipped += string[i].toLowerCase();\n        }\n        else{\n            flipped += string[i].toUpperCase();\n        }\n    }\n    return flipped;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var str = '';\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            str += string[i].toLowerCase();\n        }\n        else{\n            str += string[i].toUpperCase();\n        }\n    }\n    return str;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var result=\"\";\n  for(var i=0;i<string.length;i++){\n    if(string[i]===string[i].toUpperCase()){\n      result+=string[i].toLowerCase();\n    }\n    else{\n      result+=string[i].toUpperCase();\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var newString = '';\n    for (i=0; i<string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var new_string = \"\";\n\tfor (var i = 0; i < string.length; i++){\n\t\tif (string[i] == string[i].toUpperCase()){\n\t\t\tnew_string += string[i].toLowerCase();\n\t\t} else {\n\t\t\tnew_string += string[i].toUpperCase();\n\t\t}\n\t}\n\treturn new_string;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var str = string.split('');\n  for(i = 0; i < str.length; i++){\n    if(str[i] == str[i].toUpperCase()){\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i].toUpperCase();\n    }\n  }\n  return str.join('');\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return string.split('').map(function(char){\n        if(char === char.toUpperCase()){\n            return char.toLowerCase();\n        }\n        return char.toUpperCase();\n    }).join('');\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var splitString = string.split(\"\");\n    var newString = \"\";\n    for (var i = 0; i < splitString.length; i++){\n        if (splitString[i] === splitString[i].toUpperCase()){\n            newString += splitString[i].toLowerCase();\n        } else {\n            newString += splitString[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return string.split('').map(function(char){\n\t\treturn (char === char.toUpperCase()) ? char.toLowerCase() : char.toUpperCase();\n\t}).join('');\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var result = \"\";\n  for (var i = 0; i < string.length; i++){\n    var letter = string[i];\n    if (letter === letter.toUpperCase()){\n      result += letter.toLowerCase();\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var newString = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else if (string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var flipped_string = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] == string[i].toUpperCase()){\n            flipped_string += string[i].toLowerCase();\n        } else if (string[i] == string[i].toLowerCase()){\n            flipped_string += string[i].toUpperCase();\n        }\n    }\n    return flipped_string;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var convertedString = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            convertedString += string[i].toLowerCase();\n        }\n        else{\n            convertedString += string[i].toUpperCase();\n        }\n    }\n    return convertedString;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "//return array of characters as strings\n    let str_array = string.split('');\n    //create empty array to push flipped characters to\n    let result = [];\n    //iterate over string array, for each element\n    for (let i = 0; i < str_array.length; i++){\n        //compare each element with it's uppercase version, if the are equal push the element to the result array with .toLowerCase() called on it.\n        if (str_array[i] === str_array[i].toUpperCase()){\n            result.push(str_array[i].toLowerCase());\n        } else {\n            result.push(str_array[i].toUpperCase());\n        }\n    }\n    //print and return the result array joined together to a string\n    console.log(result.join(''));\n    return result.join('');\n}\n\nflip_case('Hello');",
        "grade-4": {
            "execution": 1
        },
        "14": "let newString = '';\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var new_string = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            new_string += string[i].toLowerCase();\n        }\n        else{\n            new_string += string[i].toUpperCase();\n        }\n    }\n    return new_string;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var res = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            res += string[i].toLowerCase();\n        }\n        else{\n            res += string[i].toUpperCase();\n        }\n    }\n    return res;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.19649030551923372,
        "bleu-0": 1.2602074238746241e-06,
        "bleu-8": 0.22031808711497305,
        "bleu-7": 0.21758068505234285,
        "bleu-16": 0.21758068505234285,
        "bleu-2": 0.21758068505234285,
        "bleu-11": 0.20976198688785425,
        "bleu-1": 0.22031808711497305,
        "bleu-10": 0.29447829386383906,
        "bleu-17": 0.5469654661424945,
        "bleu-12": 0.22989517542168805,
        "bleu-6": 0.5983278752571242,
        "bleu-18": 0.22895982332666293,
        "bleu-15": 0.17583149879335241,
        "bleu-13": 0.18654338750616745,
        "bleu-9": 0.20727915920468223,
        "bleu-4": 0.1412662549568787,
        "bleu-14": 0.20727915920468223,
        "bleu-5": 0.21758068505234285,
        "bleu-19": 0.21758068505234285,
        "codebleu-3": 0.5123443438491652,
        "codebleu-0": 0.03555557946260049,
        "codebleu-8": 0.48358836805451566,
        "codebleu-7": 0.4831321343774106,
        "codebleu-16": 0.4831321343774106,
        "codebleu-2": 0.4831321343774106,
        "codebleu-11": 0.48182901801666256,
        "codebleu-1": 0.48358836805451566,
        "codebleu-10": 0.6595847661490236,
        "codebleu-17": 0.7313629312257692,
        "codebleu-12": 0.5833663676207864,
        "codebleu-6": 0.763761716583258,
        "codebleu-18": 0.538361990756464,
        "codebleu-15": 0.5446587851524274,
        "codebleu-13": 0.5464440999378966,
        "codebleu-9": 0.4814152134028006,
        "codebleu-4": 0.6784938707756413,
        "codebleu-14": 0.4814152134028006,
        "codebleu-5": 0.4831321343774106,
        "codebleu-19": 0.4831321343774106,
        "chrf-3": 0.4153880012712636,
        "chrf-0": 0.002175805047867711,
        "chrf-8": 0.4432438432769029,
        "chrf-7": 0.44369670518073073,
        "chrf-16": 0.4718462791424287,
        "chrf-2": 0.43783356543240715,
        "chrf-11": 0.4351224144706646,
        "chrf-1": 0.4259290971068831,
        "chrf-10": 0.6063754055093153,
        "chrf-17": 0.702595901379123,
        "chrf-12": 0.43632491711068183,
        "chrf-6": 0.727316532265171,
        "chrf-18": 0.4314028975998861,
        "chrf-15": 0.41240401005591165,
        "chrf-13": 0.4042236836557938,
        "chrf-9": 0.41031075961840535,
        "chrf-4": 0.3380993492336979,
        "chrf-14": 0.43125292366190104,
        "chrf-5": 0.42515844741015063,
        "chrf-19": 0.4478473829120023,
        "rougel-3": 0.3776223776223776,
        "rougel-0": 0.03636363636363636,
        "rougel-8": 0.39393939393939387,
        "rougel-7": 0.3909774436090225,
        "rougel-16": 0.3909774436090225,
        "rougel-2": 0.3909774436090225,
        "rougel-11": 0.38235294117647056,
        "rougel-1": 0.39393939393939387,
        "rougel-10": 0.5068493150684932,
        "rougel-17": 0.7027027027027027,
        "rougel-12": 0.40259740259740256,
        "rougel-6": 0.7592592592592592,
        "rougel-18": 0.40310077519379844,
        "rougel-15": 0.36942675159235666,
        "rougel-13": 0.3841059602649006,
        "rougel-9": 0.37956204379562036,
        "rougel-4": 0.3132530120481927,
        "rougel-14": 0.37956204379562036,
        "rougel-5": 0.3909774436090225,
        "rougel-19": 0.3909774436090225,
        "meteor-3": 0.49440620702214905,
        "meteor-0": 0.01079913606911447,
        "meteor-8": 0.4825755931712963,
        "meteor-7": 0.4816835865295748,
        "meteor-16": 0.4816835865295748,
        "meteor-2": 0.4816835865295748,
        "meteor-11": 0.47902724322150736,
        "meteor-1": 0.4825755931712963,
        "meteor-10": 0.7329860343656115,
        "meteor-17": 0.802917996604945,
        "meteor-12": 0.5409055510099468,
        "meteor-6": 0.8392717006412095,
        "meteor-18": 0.48527154620577273,
        "meteor-15": 0.4972106763544219,
        "meteor-13": 0.5025474635782619,
        "meteor-9": 0.47814829415137616,
        "meteor-4": 0.4978998194914699,
        "meteor-14": 0.47814829415137616,
        "meteor-5": 0.4816835865295748,
        "meteor-19": 0.4816835865295748,
        "ruby-3": 0.2717391304347826,
        "ruby-0": 0.019607843137254943,
        "ruby-8": 0.28395061728395066,
        "ruby-7": 0.2804878048780488,
        "ruby-16": 0.2804878048780488,
        "ruby-2": 0.2804878048780488,
        "ruby-11": 0.2823529411764706,
        "ruby-1": 0.28395061728395066,
        "ruby-10": 0.3894736842105263,
        "ruby-17": 0.6333333333333333,
        "ruby-12": 0.2815533980582524,
        "ruby-6": 0.6842105263157895,
        "ruby-18": 0.28205128205128205,
        "ruby-15": 0.26415094339622647,
        "ruby-13": 0.28,
        "ruby-9": 0.2790697674418605,
        "ruby-4": 0.19696969696969702,
        "ruby-14": 0.2790697674418605,
        "ruby-5": 0.2804878048780488,
        "ruby-19": 0.2804878048780488,
        "codebertscore_f1-3": 0.7879908084869385,
        "codebertscore_f3-3": 0.8166316747665405,
        "codebertscore_f1-0": 0.5591000914573669,
        "codebertscore_f3-0": 0.54740971326828,
        "codebertscore_f1-8": 0.8033087253570557,
        "codebertscore_f3-8": 0.8320991396903992,
        "codebertscore_f1-7": 0.8023327589035034,
        "codebertscore_f3-7": 0.8266029953956604,
        "codebertscore_f1-16": 0.8059425950050354,
        "codebertscore_f3-16": 0.8300451636314392,
        "codebertscore_f1-2": 0.8094750642776489,
        "codebertscore_f3-2": 0.834602415561676,
        "codebertscore_f1-11": 0.8071795701980591,
        "codebertscore_f3-11": 0.8327285051345825,
        "codebertscore_f1-1": 0.8136531114578247,
        "codebertscore_f3-1": 0.8402883410453796,
        "codebertscore_f1-10": 0.836937665939331,
        "codebertscore_f3-10": 0.8748860359191895,
        "codebertscore_f1-17": 0.920266330242157,
        "codebertscore_f3-17": 0.9347763657569885,
        "codebertscore_f1-12": 0.7893475890159607,
        "codebertscore_f3-12": 0.826492965221405,
        "codebertscore_f1-6": 0.9339579343795776,
        "codebertscore_f3-6": 0.9407636523246765,
        "codebertscore_f1-18": 0.8207353949546814,
        "codebertscore_f3-18": 0.8545809388160706,
        "codebertscore_f1-15": 0.7942680716514587,
        "codebertscore_f3-15": 0.8173622488975525,
        "codebertscore_f1-13": 0.7943622469902039,
        "codebertscore_f3-13": 0.8165819644927979,
        "codebertscore_f1-9": 0.8005938529968262,
        "codebertscore_f3-9": 0.8260599374771118,
        "codebertscore_f1-4": 0.6899699568748474,
        "codebertscore_f3-4": 0.7632017135620117,
        "codebertscore_f1-14": 0.8057290315628052,
        "codebertscore_f3-14": 0.8333843350410461,
        "codebertscore_f1-5": 0.7979878187179565,
        "codebertscore_f3-5": 0.8237770199775696,
        "codebertscore_f1-19": 0.8041712641716003,
        "codebertscore_f3-19": 0.8289376497268677,
        "codebertscore_s_f1-3": 0.7944291830062866,
        "codebertscore_s_f3-3": 0.8213914632797241,
        "codebertscore_s_f1-0": 0.5673297643661499,
        "codebertscore_s_f3-0": 0.5610007643699646,
        "codebertscore_s_f1-8": 0.806095540523529,
        "codebertscore_s_f3-8": 0.832931637763977,
        "codebertscore_s_f1-7": 0.8064643740653992,
        "codebertscore_s_f3-7": 0.8307391405105591,
        "codebertscore_s_f1-16": 0.81252521276474,
        "codebertscore_s_f3-16": 0.8341745734214783,
        "codebertscore_s_f1-2": 0.8201637864112854,
        "codebertscore_s_f3-2": 0.843093752861023,
        "codebertscore_s_f1-11": 0.8088662624359131,
        "codebertscore_s_f3-11": 0.8319773077964783,
        "codebertscore_s_f1-1": 0.8248292207717896,
        "codebertscore_s_f3-1": 0.8495073914527893,
        "codebertscore_s_f1-10": 0.8415546417236328,
        "codebertscore_s_f3-10": 0.8779525756835938,
        "codebertscore_s_f1-17": 0.9240623712539673,
        "codebertscore_s_f3-17": 0.9365637898445129,
        "codebertscore_s_f1-12": 0.8000590205192566,
        "codebertscore_s_f3-12": 0.8351835012435913,
        "codebertscore_s_f1-6": 0.9383078813552856,
        "codebertscore_s_f3-6": 0.9446000456809998,
        "codebertscore_s_f1-18": 0.8260353803634644,
        "codebertscore_s_f3-18": 0.8554264903068542,
        "codebertscore_s_f1-15": 0.8024272918701172,
        "codebertscore_s_f3-15": 0.8266332745552063,
        "codebertscore_s_f1-13": 0.8021332621574402,
        "codebertscore_s_f3-13": 0.8247150182723999,
        "codebertscore_s_f1-9": 0.8074210286140442,
        "codebertscore_s_f3-9": 0.8314353227615356,
        "codebertscore_s_f1-4": 0.709191083908081,
        "codebertscore_s_f3-4": 0.7870054244995117,
        "codebertscore_s_f1-14": 0.806979238986969,
        "codebertscore_s_f3-14": 0.8331189155578613,
        "codebertscore_s_f1-5": 0.805439829826355,
        "codebertscore_s_f3-5": 0.8295331001281738,
        "codebertscore_s_f1-19": 0.807965874671936,
        "codebertscore_s_f3-19": 0.8317949175834656,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 0,
        "raw_gpt35_nsnr-0": "0",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 0,
        "raw_gpt35_nswr-0": "0",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    },
    {
        "intent": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x, n){\n",
        "snippet": [
            "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n"
        ],
        "simplified": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "task_id": "76",
        "3": "let powerNum = n;\n  let simplePower = true;\n  while(powerNum <= x){\n    if(powerNum === x){\n      simplePower = true;\n      break;\n    }\n    powerNum *= n;\n    simplePower = false;\n  }\n  return simplePower;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return Math.round(Math.log(x)/Math.log(n)) === Math.log(x)/Math.log(n);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "for(let i = 0; i < x; i++){\n        if(Math.pow(n, i) === x){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return Math.log(x) / Math.log(n) % 1 === 0;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return Math.round(Math.log(x)/Math.log(n)) == Math.log(x)/Math.log(n);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let test = Math.log(x) / Math.log(n);\n    return test % 1 === 0;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(var i = 1; i <= x; i++){\n        if(n**i === x){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var x_root = Math.sqrt(x);\n  var x_root_int = parseInt(x_root);\n  return Math.pow(n, x_root_int) === x;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(x==n){\n        return true;\n    }\n    let product = 0;\n    let i = 2;\n    while(product < x){\n        product = n**i;\n        if(product == x){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return Number.isInteger(Math.log(x)/Math.log(n));\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return x == Math.pow(n, x.toString().split('').reverse().join(''));\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return Number.isInteger(Math.log2(x) / Math.log2(n));\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let k = Math.log(x) / Math.log(n);\n    return k.toString().indexOf(\".\") == -1 ? true : false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n**Math.floor(Math.log(x)/Math.log(n)) == x) return true;\n  return false;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//your code here\n    return Number.isInteger(Math.log2(x)/Math.log2(n));\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let count = 0;\n    while(x > 1){\n        x = x / n;\n        count++;\n    }\n    return x === 1 && count === 1 ? true : false;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return (Math.log(x) / Math.log(n)) % 1 === 0;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return x === Math.pow(n, Math.log(x) / Math.log(n))\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.13444449848965162,
        "bleu-0": 0.07368338562806571,
        "bleu-8": 4.2483542552915904e-18,
        "bleu-7": 0.1097015219808882,
        "bleu-16": 0.03639755858845963,
        "bleu-2": 0.0701002735786513,
        "bleu-11": 0.045995039141741474,
        "bleu-1": 0.1373260924871184,
        "bleu-10": 0.10680431104637772,
        "bleu-17": 0.1448722781316322,
        "bleu-12": 0.047168739788547895,
        "bleu-6": 0.0752522161451405,
        "bleu-18": 0.06699063912801527,
        "bleu-15": 0.047168739788547895,
        "bleu-13": 0.049207432245611395,
        "bleu-9": 0.12554384781679248,
        "bleu-4": 0.05352064657909458,
        "bleu-14": 0.12345443921533868,
        "bleu-5": 0.04171135581474757,
        "bleu-19": 0.05943407542309878,
        "codebleu-3": 0.47854776729213483,
        "codebleu-0": 0.3553549316506211,
        "codebleu-8": 0.011904761904761902,
        "codebleu-7": 0.45103212500851053,
        "codebleu-16": 0.22333897516831802,
        "codebleu-2": 0.3391552776514237,
        "codebleu-11": 0.3068874111371779,
        "codebleu-1": 0.41777920963762105,
        "codebleu-10": 0.3785463838484312,
        "codebleu-17": 0.5842957556284549,
        "codebleu-12": 0.22087332542862795,
        "codebleu-6": 0.2992666924922089,
        "codebleu-18": 0.3068874111371779,
        "codebleu-15": 0.22087332542862795,
        "codebleu-13": 0.39766081871345027,
        "codebleu-9": 0.40898477623724877,
        "codebleu-4": 0.2642093596697019,
        "codebleu-14": 0.4269005847953216,
        "codebleu-5": 0.2535496032835545,
        "codebleu-19": 0.2692965594228573,
        "chrf-3": 0.36430805288128354,
        "chrf-0": 0.13038421158435945,
        "chrf-8": 0.01597444089456869,
        "chrf-7": 0.20672914197050016,
        "chrf-16": 0.10891368792798646,
        "chrf-2": 0.12631580218540434,
        "chrf-11": 0.1354733937649959,
        "chrf-1": 0.21369698029776601,
        "chrf-10": 0.19817825647620396,
        "chrf-17": 0.27452659395240786,
        "chrf-12": 0.12380744625690966,
        "chrf-6": 0.15894335869045578,
        "chrf-18": 0.23454536726296268,
        "chrf-15": 0.12311674128898026,
        "chrf-13": 0.15592894452770195,
        "chrf-9": 0.21802243905626395,
        "chrf-4": 0.14292387566805337,
        "chrf-14": 0.21135528068953607,
        "chrf-5": 0.12544002271279336,
        "chrf-19": 0.12728585905016312,
        "rougel-3": 0.3917525773195876,
        "rougel-0": 0.33333333333333337,
        "rougel-8": 0.047619047619047616,
        "rougel-7": 0.3170731707317073,
        "rougel-16": 0.34920634920634924,
        "rougel-2": 0.3116883116883117,
        "rougel-11": 0.3529411764705882,
        "rougel-1": 0.37974683544303794,
        "rougel-10": 0.45333333333333337,
        "rougel-17": 0.5102040816326531,
        "rougel-12": 0.28571428571428575,
        "rougel-6": 0.2894736842105263,
        "rougel-18": 0.3823529411764706,
        "rougel-15": 0.28571428571428575,
        "rougel-13": 0.3132530120481927,
        "rougel-9": 0.37333333333333335,
        "rougel-4": 0.2647058823529412,
        "rougel-14": 0.3373493975903615,
        "rougel-5": 0.3384615384615385,
        "rougel-19": 0.3283582089552239,
        "meteor-3": 0.5142437412009548,
        "meteor-0": 0.3150656814449918,
        "meteor-8": 0.013513513513513514,
        "meteor-7": 0.45365853658536587,
        "meteor-16": 0.23176803523055736,
        "meteor-2": 0.30253321372121833,
        "meteor-11": 0.28181818181818175,
        "meteor-1": 0.4453135222365992,
        "meteor-10": 0.36923076923076925,
        "meteor-17": 0.5927230046948357,
        "meteor-12": 0.20428652955972182,
        "meteor-6": 0.2898263459158416,
        "meteor-18": 0.3040965207631874,
        "meteor-15": 0.20428652955972182,
        "meteor-13": 0.32425473980764435,
        "meteor-9": 0.44389302453818585,
        "meteor-4": 0.20170715418649304,
        "meteor-14": 0.38834397810218985,
        "meteor-5": 0.25744981622844215,
        "meteor-19": 0.22537271448663854,
        "ruby-3": 0.2321428571428571,
        "ruby-0": 0.1707317073170732,
        "ruby-8": 0.024390243902439046,
        "ruby-7": 0.2195121951219512,
        "ruby-16": 0.2195121951219512,
        "ruby-2": 0.1707317073170732,
        "ruby-11": 0.2682926829268293,
        "ruby-1": 0.24390243902439024,
        "ruby-10": 0.3414634146341463,
        "ruby-17": 0.42105263157894735,
        "ruby-12": 0.19512195121951215,
        "ruby-6": 0.2195121951219512,
        "ruby-18": 0.2682926829268293,
        "ruby-15": 0.19512195121951215,
        "ruby-13": 0.11904761904761907,
        "ruby-9": 0.24390243902439024,
        "ruby-4": 0.19512195121951215,
        "ruby-14": 0.19047619047619047,
        "ruby-5": 0.24390243902439024,
        "ruby-19": 0.2195121951219512,
        "codebertscore_f1-3": 0.8194267749786377,
        "codebertscore_f3-3": 0.8368774056434631,
        "codebertscore_f1-0": 0.7343194484710693,
        "codebertscore_f3-0": 0.7410361766815186,
        "codebertscore_f1-8": 0.0,
        "codebertscore_f3-8": 0.0,
        "codebertscore_f1-7": 0.7653175592422485,
        "codebertscore_f3-7": 0.7715397477149963,
        "codebertscore_f1-16": 0.7514511942863464,
        "codebertscore_f3-16": 0.7531993985176086,
        "codebertscore_f1-2": 0.7368834018707275,
        "codebertscore_f3-2": 0.7441534996032715,
        "codebertscore_f1-11": 0.777204155921936,
        "codebertscore_f3-11": 0.7889476418495178,
        "codebertscore_f1-1": 0.7992334961891174,
        "codebertscore_f3-1": 0.8077138662338257,
        "codebertscore_f1-10": 0.7635275721549988,
        "codebertscore_f3-10": 0.7712803483009338,
        "codebertscore_f1-17": 0.8198099732398987,
        "codebertscore_f3-17": 0.8347610831260681,
        "codebertscore_f1-12": 0.7301802635192871,
        "codebertscore_f3-12": 0.7380465269088745,
        "codebertscore_f1-6": 0.7255585193634033,
        "codebertscore_f3-6": 0.745493471622467,
        "codebertscore_f1-18": 0.7829152941703796,
        "codebertscore_f3-18": 0.8007850050926208,
        "codebertscore_f1-15": 0.7303707003593445,
        "codebertscore_f3-15": 0.7436429858207703,
        "codebertscore_f1-13": 0.727427065372467,
        "codebertscore_f3-13": 0.7586923241615295,
        "codebertscore_f1-9": 0.7554642558097839,
        "codebertscore_f3-9": 0.765781581401825,
        "codebertscore_f1-4": 0.7181745171546936,
        "codebertscore_f3-4": 0.7451658248901367,
        "codebertscore_f1-14": 0.8114156723022461,
        "codebertscore_f3-14": 0.8228082060813904,
        "codebertscore_f1-5": 0.7535823583602905,
        "codebertscore_f3-5": 0.7562626004219055,
        "codebertscore_f1-19": 0.7525658011436462,
        "codebertscore_f3-19": 0.7535390257835388,
        "codebertscore_s_f1-3": 0.8223572969436646,
        "codebertscore_s_f3-3": 0.8425571918487549,
        "codebertscore_s_f1-0": 0.7479828000068665,
        "codebertscore_s_f3-0": 0.7581865191459656,
        "codebertscore_s_f1-8": 0.0,
        "codebertscore_s_f3-8": 0.0,
        "codebertscore_s_f1-7": 0.7695584297180176,
        "codebertscore_s_f3-7": 0.7785196304321289,
        "codebertscore_s_f1-16": 0.7555015683174133,
        "codebertscore_s_f3-16": 0.7631100416183472,
        "codebertscore_s_f1-2": 0.7482229471206665,
        "codebertscore_s_f3-2": 0.7587788105010986,
        "codebertscore_s_f1-11": 0.7773998379707336,
        "codebertscore_s_f3-11": 0.7881985902786255,
        "codebertscore_s_f1-1": 0.8078078627586365,
        "codebertscore_s_f3-1": 0.8187649250030518,
        "codebertscore_s_f1-10": 0.7744811773300171,
        "codebertscore_s_f3-10": 0.7777969241142273,
        "codebertscore_s_f1-17": 0.8184196949005127,
        "codebertscore_s_f3-17": 0.8356716632843018,
        "codebertscore_s_f1-12": 0.7341240048408508,
        "codebertscore_s_f3-12": 0.7488014698028564,
        "codebertscore_s_f1-6": 0.7292081117630005,
        "codebertscore_s_f3-6": 0.74567711353302,
        "codebertscore_s_f1-18": 0.7781766057014465,
        "codebertscore_s_f3-18": 0.7954055666923523,
        "codebertscore_s_f1-15": 0.7314258813858032,
        "codebertscore_s_f3-15": 0.7504693865776062,
        "codebertscore_s_f1-13": 0.729933500289917,
        "codebertscore_s_f3-13": 0.7610260248184204,
        "codebertscore_s_f1-9": 0.7600600719451904,
        "codebertscore_s_f3-9": 0.7704334855079651,
        "codebertscore_s_f1-4": 0.7113373875617981,
        "codebertscore_s_f3-4": 0.7431297302246094,
        "codebertscore_s_f1-14": 0.8163439631462097,
        "codebertscore_s_f3-14": 0.8304094672203064,
        "codebertscore_s_f1-5": 0.7590391039848328,
        "codebertscore_s_f3-5": 0.7674981355667114,
        "codebertscore_s_f1-19": 0.7551730871200562,
        "codebertscore_s_f3-19": 0.7573856711387634,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "Score: 2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n// Output: [1]\nfunction minPath(grid, k){\n",
        "snippet": [
            "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
        "task_id": "129",
        "0": "var f = function(i, j, d, res){\n        if(d > k || i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) return false;\n        if(d == k) return true;\n        res.push(grid[i][j]);\n        for(var next = 0; next < 4; next++){\n            var a = i + x[next], b = j + y[next];\n            if(f(a, b, d + 1, res)) return true;\n        }\n        res.pop();\n        return false;\n    }\n    var x = [0, 0, 1, -1], y = [1, -1, 0, 0];\n    var res = [];\n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[0].length; j++){\n            var r = [];\n            if(f(i, j, 0, r)) return r;\n        }\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "let result = [];\n\tlet curr = null;\n\tlet min = Number.MAX_SAFE_INTEGER;\n\tlet r = grid.length;\n\tlet c = grid[0].length;\n\tfor(let i = 0; i < r; i++){\n\t\tfor(let j = 0; j < c; j++){\n\t\t\tlet queue = [];\n\t\t\tlet path = new Set();\n\t\t\tpath.add(`${i},${j}`);\n\t\t\tqueue.push([[i,j], path]);\n\t\t\twhile(queue.length){\n\t\t\t\tlet [ [x,y], path ] = queue.shift();\n\t\t\t\tif(path.size === k){\n\t\t\t\t\tlet lst = [];\n\t\t\t\t\tpath.forEach( el => {\n\t\t\t\t\t\tlst.push(grid[el.split(',')[0]][el.split(',')[1]]);\n\t\t\t\t\t});\n\t\t\t\t\tif(lst < min){\n\t\t\t\t\t\tmin = lst;\n\t\t\t\t\t\tcurr = lst;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(path.size < k){\n\t\t\t\t\tif(x > 0 && !path.has(`${x-1},${y}`)){\n\t\t\t\t\t\tlet newPath = new Set(path);\n\t\t\t\t\t\tnewPath.add(`${x-1},${y}`);\n\t\t\t\t\t\tqueue.push([[x-1,y], newPath]);\n\t\t\t\t\t}\n\t\t\t\t\tif(x < r-1 && !path.has(`${x+1},${y}`)){\n\t\t\t\t\t\tlet newPath = new Set(path);\n\t\t\t\t\t\tnewPath.add(`${x+1},${y}`);\n\t\t\t\t\t\tqueue.push([[x+1,y], newPath]);\n\t\t\t\t\t}\n\t\t\t\t\tif(y > 0 && !",
        "grade-1": {
            "execution": 0
        },
        "2": "if(k === 0) return [];\n  var smallestPath = undefined;\n  for(var i = 0; i < grid.length; i++){\n    for(var j = 0; j < grid[i].length; j++){\n      var newPath = dfs(grid, i, j, k, [grid[i][j]]);\n      if(!smallestPath){\n        smallestPath = newPath;\n      }else{\n        if(lessThan(newPath, smallestPath)){\n          smallestPath = newPath;\n        }\n      }\n    }\n  }\n  return smallestPath;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "let n = grid.length;\n\tlet width = grid[0].length;\n\tfunction createQueue(path, start){\n\t\treturn new PriorityQueue((a,b)=>{\n\t\t\tlet sumA = (path[a.r] || 0) + a.val;\n\t\t\tlet sumB = (path[b.r] || 0) + b.val;\n\t\t\tif(sumA < sumB){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif(sumA > sumB){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn a.c < b.c;\n\t\t});\n\t}\n\tfunction createResult(path, start){\n\t\tlet result = [];\n\t\tlet current = start;\n\t\twhile(current){\n\t\t\tresult.push(current.val);\n\t\t\tcurrent = path[current.r];\n\t\t}\n\t\treturn result;\n\t}\n\tlet queue = createQueue([],{r:0,c:0,val:grid[0][0]});\n\tfor(let i = 0; i < n; i++){\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tlet current = {r:i,c:j,val:grid[i][j]};\n\t\t\tqueue.push(current);\n\t\t}\n\t}\n\tfor(let i = 0; i < k; i++){\n\t\tlet current = queue.pop();\n\t\tconsole.log(current);\n\t\tif(i === k - 1){\n\t\t\treturn createResult([],current);\n\t\t}\n\t\tif(current.r - 1 >= 0){\n\t\t\tqueue.push({r:current.r - 1,c:current.c,val:grid[current.r - 1][current.c]});\n\t\t}\n\t\tif(current.r + 1 < n){\n\t\t\tqueue.push({r:current.r + 1,c:current.c,val:grid[current.r + 1][current.c]});\n\t\t}\n\t\tif(current.c - 1 >= 0",
        "grade-3": {
            "execution": 0
        },
        "4": "let path = [grid[0][0]];\n    let visited = new Set();\n    visited.add(grid[0][0]);\n    let col = 0;\n    let row = 0;\n    let num = grid[0][0];\n    let minPath = [];\n    let maxNum = Math.max(...grid.flat());\n    for(let i = 1; i < k; i++){\n        visited.add(num);\n        let nums = [\n            num+1,\n            num-1,\n            num-maxNum,\n            num+maxNum\n        ];\n        let min = Infinity;\n        let minIndex = -1;\n        nums.forEach((n, index) => {\n            if(n >= 1 && n <= maxNum){\n                if(!visited.has(n)){\n                    if(n < min){\n                        min = n;\n                        minIndex = index;\n                    }\n                }\n            }\n        });\n        if(minIndex === 0){\n            col++;\n        }\n        if(minIndex === 1){\n            col--;\n        }\n        if(minIndex === 2){\n            row--;\n        }\n        if(minIndex === 3){\n            row++;\n        }\n        path.push(min);\n        num = min;\n    }\n    return path;\n}\nlet grid = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n];\nlet k = 3;",
        "grade-4": {
            "execution": 0
        },
        "5": "var memo = {};\n\tvar w = grid[0].length;\n\tvar h = grid.length;\n\tvar s = [0,0,1];\n\tvar vis = new Array(h);\n\tfor(var i = 0; i < h; i++){\n\t\tvis[i] = new Array(w);\n\t\tfor(var j = 0; j < w; j++){\n\t\t\tvis[i][j] = 0;\n\t\t}\n\t}\n\tvis[0][0] = 1;\n\tvar result = new Array(k);\n\tresult[0] = grid[0][0];\n\tvar curr;\n\twhile(s.length > 0){\n\t\tcurr = s.pop();\n\t\t// console.log(curr);\n\t\tvar x = curr[0];\n\t\tvar y = curr[1];\n\t\tvar count = curr[2];\n\t\tif(count >= k){\n\t\t\treturn result;\n\t\t}\n\t\tif(x < h-1 && vis[x+1][y] == 0){\n\t\t\tvis[x+1][y] = 1;\n\t\t\ts.push([x+1,y,count+1]);\n\t\t\tif(count == k-1){\n\t\t\t\tresult[count] = grid[x+1][y];\n\t\t\t}\n\t\t}\n\t\tif(x > 0 && vis[x-1][y] == 0){\n\t\t\tvis[x-1][y] = 1;\n\t\t\ts.push([x-1,y,count+1]);\n\t\t\tif(count == k-1){\n\t\t\t\tresult[count] = grid[x-1][y];\n\t\t\t}\n\t\t}\n\t\tif(y < w-1 && vis[x][y+1] == 0){\n\t\t\tvis[x][y+1] = 1;\n\t\t\ts.push([x,y+1,count+1]);\n\t\t\tif(count == k-1){\n\t\t\t\tresult[count] = grid[x][y+1];",
        "grade-5": {
            "execution": 0
        },
        "6": "//if k is 1 return the cell with the lowest value in the grid\n    if(k === 1){\n        let min = Infinity;\n        let minVal = 0;\n        for(let i = 0; i < grid.length; i++){\n            for(let j = 0; j < grid[i].length; j++){\n                if(grid[i][j] < min){\n                    min = grid[i][j];\n                    minVal = min;\n                }\n            }\n        }\n        return [minVal];\n    }\n\n    //loop through the grid and find the first smallest value\n    let min = Infinity;\n    let minCell;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n                minCell = [i, j];\n            }\n        }\n    }\n\n    //create a set to keep track of visited cells\n    let visited = new Set();\n    visited.add(minCell.toString());\n\n    //get all the neighbors of the minimum cell\n    let neighbors = getNeighbors(grid, minCell[0], minCell[1]);\n\n    //create a result array to store the path\n    let result = [min];\n\n    //while k > 1 traverse the grid\n    while(k > 1){\n        //create a min variable to keep track of the smallest value\n        let min = Infinity;\n        let minCell;\n        let minVal;\n        //loop through the neighbors\n        for(let cell of neighbors){\n            //if the value of the cell is less than the minimum value and\n            //the cell has not been visited then change the minimum value and cell\n            if(grid[cell[0]][cell[1]] < min && !visited.has(cell.toString())){\n                min = grid[cell[0]][cell[1]];\n                minCell = cell;\n                minVal = min;\n            }\n        }\n        //add the min cell to the set\n        visited.add(minCell.toString());\n        //decrement k",
        "grade-6": {
            "execution": 0
        },
        "7": "if(grid.length < 1 || grid[0].length < 1 || k < 1) return [];\n    let n = grid.length;\n    let m = grid[0].length;\n    let queue = [];\n    let visited = new Array(n);\n    for(let i = 0; i < n; i++){\n        visited[i] = new Array(m).fill(false);\n    }\n    queue.push([0, 0, grid[0][0], [grid[0][0]]]);\n    visited[0][0] = true;\n    while(queue.length > 0){\n        let [i, j, sum, path] = queue.shift();\n        if(sum > k) continue;\n        if(sum === k) return path;\n        for(let [dx, dy] of [[0, 1], [0, -1], [1, 0], [-1, 0]]){\n            let x = i + dx;\n            let y = j + dy;\n            if(x < 0 || x >= n || y < 0 || y >= m || visited[x][y]) continue;\n            visited[x][y] = true;\n            queue.push([x, y, sum + grid[x][y], [...path, grid[x][y]]]);\n        }\n    }\n    return [];\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "//check if k is less than the length of grid squared.\n    //if it is, return an empty array\n    if(k < grid.length * grid.length){\n        return [];\n    }\n\n    //function to create a 2D array\n    function create2DArray(rows, cols){\n        let array = new Array(rows);\n        for(let i = 0; i < rows; i++){\n            array[i] = new Array(cols);\n        }\n        return array;\n    }\n\n    //create a 2D array to store the number of steps required to reach\n    //each cell\n    let steps = create2DArray(grid.length, grid.length);\n\n    //fill the steps array with -1\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid.length; j++){\n            steps[i][j] = -1;\n        }\n    }\n\n    //function to find the next cell\n    function findNextCell(i, j, steps, grid){\n        //create an array to store the next cell\n        let next = [-1, -1];\n        //create a 2D array to store the neighbors of a cell\n        let neighbors = [\n            [-1, 0],\n            [0, 1],\n            [1, 0],\n            [0, -1]\n        ];\n        //set the minimum steps to grid length\n        let min = grid.length;\n        //loop through all the neighbors\n        for(let k = 0; k < neighbors.length; k++){\n            //check if the neighbor is within the grid bounds\n            if(i + neighbors[k][0] >= 0 && i + neighbors[k][0] < grid.length && j + neighbors[k][1] >= 0 && j + neighbors[k][1] < grid.length){\n                //check if the neighbor has not been visited\n                if(steps[i + neighbors[k][0]][j + neighbors[k][1]] == -1){\n                    //if the neighbor has not been visited, check if the current\n                    //cell has a smaller value\n                    if(grid[i][j] < grid[i + neighbors[k][",
        "grade-8": {
            "execution": 0
        },
        "9": "let v_hash = {};\n  let h_hash = {};\n  let min_path = [];\n  let min_sum = Infinity;\n  let N = grid.length;\n  let cells = new Set();\n  let results = [];\n  // check length of grid, if it is not square, return error\n  if (grid.length !== grid[0].length) return 'grid is not square';\n  for (let i = 0; i < N; i++){\n    for (let j = 0; j < N; j++){\n      if (v_hash[i]) v_hash[i].push(grid[i][j]);\n      else v_hash[i] = [grid[i][j]];\n      if (h_hash[j]) h_hash[j].push(grid[i][j]);\n      else h_hash[j] = [grid[i][j]];\n      cells.add(grid[i][j]);\n    }\n  }\n  // helper function to find minimum sum path\n  const dfs = (path, sum, row, col, step) => {\n    if (step === k){\n      if (sum < min_sum){\n        min_sum = sum;\n        min_path = path;\n      }\n      return;\n    }\n    let right = grid[row][col + 1];\n    let down = grid[row + 1][col];\n    if (right && col < N - 1){\n      let nums = v_hash[row].slice(col, col + 2);\n      let new_sum = sum + Math.min(...nums);\n      dfs(path.concat(nums), new_sum, row, col + 1, step + 1);\n    }\n    if (down && row < N - 1){\n      let nums = h_hash[col].slice(row, row + 2);\n      let new_sum = sum + Math.min(...nums);\n      dfs(path.concat(nums), new_sum, row + 1, col, step + 1);\n    }\n  }\n  // iterate through each cell in the grid\n  for (let i = 0; i <",
        "grade-9": {
            "execution": 0
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "11": "let n = grid.length;\n  let result = [];\n  let visited = [];\n  let minPath = [];\n  let minPathSum = Number.MAX_SAFE_INTEGER;\n  for(let i = 0; i < n; i++){\n    visited.push([]);\n    for(let j = 0; j < n; j++){\n      visited[i].push(false);\n    }\n  }\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      let path = [];\n      path.push(grid[i][j]);\n      visited[i][j] = true;\n      dfs(grid, k, 1, i, j, visited, path, 0);\n      visited[i][j] = false;\n    }\n  }\n  return minPath;\n  function dfs(grid, k, depth, i, j, visited, path, sum){\n    if(depth === k){\n      if(sum < minPathSum){\n        minPathSum = sum;\n        minPath = path.slice();\n      }\n      return;\n    }\n    let dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    for(let d = 0; d < dirs.length; d++){\n      let newI = i + dirs[d][0];\n      let newJ = j + dirs[d][1];\n      if(newI >= 0 && newI < n && newJ >= 0 && newJ < n && !visited[newI][newJ]){\n        path.push(grid[newI][newJ]);\n        visited[newI][newJ] = true;\n        dfs(grid, k, depth + 1, newI, newJ, visited, path, sum + grid[newI][newJ]);\n        visited[newI][newJ] = false;\n        path.pop();\n      }\n    }\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "// let seen = new Set()\n    let paths = []\n    let recurse = (row, col, path) => {\n        // console.log(row, col, path, k, grid[row][col])\n        if(k === 0) {\n            // console.log('paths before push', paths)\n            // console.log('paths after push', paths)\n            paths.push(path)\n            return\n        }\n        if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) return\n        // if(seen.has(`${row}-${col}`)) return\n        // seen.add(`${row}-${col}`)\n        let temp = grid[row][col]\n        grid[row][col] = -1\n        recurse(row - 1, col, path.concat(temp))\n        recurse(row + 1, col, path.concat(temp))\n        recurse(row, col - 1, path.concat(temp))\n        recurse(row, col + 1, path.concat(temp))\n        grid[row][col] = temp\n    }\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[0].length; j++){\n            recurse(i, j, [])\n        }\n    }\n    paths.sort((a, b) => {\n        for(let i = 0; i < Math.min(a.length, b.length); i++){\n            if(a[i] < b[i]) return -1\n            if(a[i] > b[i]) return 1\n        }\n        return a.length - b.length\n    })\n    // return paths\n    return paths[0]\n}\n\ngrid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3",
        "grade-12": {
            "execution": 0
        },
        "13": "var solution = [[]];\n  var current = 0;\n  var last = 0;\n  while(k > 0){\n    k--;\n    last = current;\n    current = 1 - current;\n    solution[current] = [];\n    for(var i = 0; i < grid.length; i++){\n      for(var j = 0; j < grid[0].length; j++){\n        var minValue = grid[i][j];\n        var minPath = [grid[i][j]];\n        if(i > 0){\n          if(solution[last][(i - 1) * grid[0].length + j][0] < minValue){\n            minValue = solution[last][(i - 1) * grid[0].length + j][0];\n            minPath = solution[last][(i - 1) * grid[0].length + j].slice();\n          }else if(solution[last][(i - 1) * grid[0].length + j][0] === minValue){\n            var newPath = solution[last][(i - 1) * grid[0].length + j].slice();\n            if(lexicographicalCompare(newPath, minPath)){\n              minPath = newPath;\n            }\n          }\n        }\n        if(i < grid.length - 1){\n          if(solution[last][(i + 1) * grid[0].length + j][0] < minValue){\n            minValue = solution[last][(i + 1) * grid[0].length + j][0];\n            minPath = solution[last][(i + 1) * grid[0].length + j].slice();\n          }else if(solution[last][(i + 1) * grid[0].length + j][0] === minValue){\n            var newPath = solution[last][(i + 1) * grid[0].length + j].slice();\n            if(lexicographicalCompare(newPath, minPath)){\n              minPath = newPath;\n            }\n          }\n        }\n        if(j > 0){\n          if(solution[last][i * grid[0].length + j - 1][0] < min",
        "grade-13": {
            "execution": 0
        },
        "14": "let result = []\n    let gridHash = {}\n    for(let r = 0; r < grid.length; r++){\n        for(let c = 0; c < grid[0].length; c++){\n            gridHash[grid[r][c]] = [r, c]\n        }\n    }\n    if(k === 1){\n        return [grid[0][0]]\n    }\n    else if(k === 2){\n        let validNeighbors = checkNeighbors(grid, gridHash[1][0], gridHash[1][1])\n        return findMin(grid, gridHash, validNeighbors, [1], k)\n    }\n    else{\n        let validNeighbors = checkNeighbors(grid, gridHash[1][0], gridHash[1][1])\n        return findMin(grid, gridHash, validNeighbors, [1], k)\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var n = grid.length;\n\tvar m = grid[0].length;\n\tvar visited = new Array(n);\n\tfor(var i = 0; i < n; i++){\n\t\tvisited[i] = new Array(m);\n\t\tfor(var j = 0; j < m; j++){\n\t\t\tvisited[i][j] = false;\n\t\t}\n\t}\n\tvar res = [];\n\tvar step = k;\n\tvar dx = [0, 0, 1, -1];\n\tvar dy = [1, -1, 0, 0];\n\tfor(var i = 0; i < n; i++){\n\t\tfor(var j = 0; j < m; j++){\n\t\t\thelper(grid, i, j, step, visited, res, dx, dy);\n\t\t}\n\t}\n\tconsole.log(res);\n\treturn res;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "//get all valid paths\n  //valid paths have length k\n  //sort the paths with lexicographic\n  //return the first path\n}\nmodule.exports = {minPath}",
        "grade-16": {
            "execution": 0
        },
        "17": "function gridHelper(grid, i, j, N, k, res){\n        if(k === 0){\n            res.push([]);\n            return;\n        }\n        for(let key in grid){\n            gridHelper(grid, key[0], key[1], N, k-1, res);\n        }\n    }\n    var N = grid.length;\n    var res = [];\n    gridHelper(grid, 0, 0, N, k, res);\n    for(let i = 0; i < res.length; i++){\n        for(let j = 0; j < res[i].length; j++){\n            res[i][j] = grid[res[i][j][0]][res[i][j][1]];\n        }\n    }\n    res.sort();\n    return res[0];\n}",
        "grade-17": {
            "execution": 0
        },
        "19": "const values = [];\n  const DFS = (row, col, count) => {\n    if(grid[row][col] === null) return;\n    values.push(grid[row][col]);\n    if(count === k) return;\n    const temp = grid[row][col];\n    grid[row][col] = null;\n    if(row > 0) DFS(row - 1, col, count + 1);\n    if(row < grid.length - 1) DFS(row + 1, col, count + 1);\n    if(col > 0) DFS(row, col - 1, count + 1);\n    if(col < grid[0].length - 1) DFS(row, col + 1, count + 1);\n    grid[row][col] = temp;\n  }\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[0].length; j++){\n      DFS(i, j, 0);\n      if(values.length === k) return values;\n      values.length = 0;\n    }\n  }\n  return null;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.23226654660185328,
        "bleu-1": 0.18293895577985125,
        "bleu-2": 0.1259926123683382,
        "bleu-3": 0.2068819348896533,
        "bleu-4": 0.20029853726627878,
        "bleu-5": 0.17916985853051398,
        "bleu-6": 0.23830473512946376,
        "bleu-7": 0.14524295657992242,
        "bleu-8": 0.2189010340933269,
        "bleu-9": 0.1901547357233246,
        "bleu-10": 1.1050281251931644e-116,
        "bleu-11": 0.20041346797573667,
        "bleu-12": 0.19782194562543196,
        "bleu-13": 0.1692232539535042,
        "bleu-14": 0.13612964784168918,
        "bleu-15": 0.18413012536225215,
        "bleu-16": 3.952073406168711e-05,
        "bleu-17": 0.21567145232355625,
        "bleu-19": 0.2652980851484812,
        "codebleu-0": 0.49996194131678934,
        "codebleu-1": 0.5838326165933099,
        "codebleu-2": 0.2478895438951064,
        "codebleu-3": 0.6302326532295746,
        "codebleu-4": 0.596467175544223,
        "codebleu-5": 0.673017973881153,
        "codebleu-6": 0.6315301789967477,
        "codebleu-7": 0.5609828927901813,
        "codebleu-8": 0.6615226779169411,
        "codebleu-9": 0.649502951874379,
        "codebleu-10": 0.0017683465959328023,
        "codebleu-11": 0.6563624904404155,
        "codebleu-12": 0.6272956664683557,
        "codebleu-13": 0.6594476500716137,
        "codebleu-14": 0.3908560186243553,
        "codebleu-15": 0.38448861910602466,
        "codebleu-16": 0.045985820859387676,
        "codebleu-17": 0.4097785560461646,
        "codebleu-19": 0.5587218389806154,
        "chrf-0": 0.2914267147773259,
        "chrf-1": 0.28477230195483705,
        "chrf-2": 0.2400621705476314,
        "chrf-3": 0.30588854085266254,
        "chrf-4": 0.29488221482398935,
        "chrf-5": 0.27938371709446336,
        "chrf-6": 0.38161909956614465,
        "chrf-7": 0.3087707553302985,
        "chrf-8": 0.35738808285602647,
        "chrf-9": 0.3521320411274804,
        "chrf-10": 0.003069367710251688,
        "chrf-11": 0.33578521707885256,
        "chrf-12": 0.34250151506645127,
        "chrf-13": 0.3368294149507963,
        "chrf-14": 0.26061892729383634,
        "chrf-15": 0.22320667902551766,
        "chrf-16": 0.06555893805260647,
        "chrf-17": 0.29100250413672124,
        "chrf-19": 0.3467617817559058,
        "rougel-0": 0.3253968253968254,
        "rougel-1": 0.334855403348554,
        "rougel-2": 0.3350253807106599,
        "rougel-3": 0.2952243125904486,
        "rougel-4": 0.3119584055459272,
        "rougel-5": 0.3850574712643678,
        "rougel-6": 0.3703703703703704,
        "rougel-7": 0.30874785591766724,
        "rougel-8": 0.3170731707317073,
        "rougel-9": 0.33333333333333337,
        "rougel-10": 0.007434944237918215,
        "rougel-11": 0.3479490806223479,
        "rougel-12": 0.29148629148629146,
        "rougel-13": 0.3974025974025974,
        "rougel-14": 0.4155844155844156,
        "rougel-15": 0.3761061946902655,
        "rougel-16": 0.04620462046204621,
        "rougel-17": 0.3157894736842105,
        "rougel-19": 0.37451737451737455,
        "meteor-0": 0.31665448268677404,
        "meteor-1": 0.38454894445244814,
        "meteor-2": 0.2052444814133808,
        "meteor-3": 0.37921320791691154,
        "meteor-4": 0.3944616047614723,
        "meteor-5": 0.4052983972875916,
        "meteor-6": 0.41440663592346416,
        "meteor-7": 0.3684222733597687,
        "meteor-8": 0.4678479793696079,
        "meteor-9": 0.3923124279452392,
        "meteor-10": 0.0020721094073767096,
        "meteor-11": 0.434323022203582,
        "meteor-12": 0.4175429216951139,
        "meteor-13": 0.44180619098788393,
        "meteor-14": 0.31133047946611814,
        "meteor-15": 0.2679685406900162,
        "meteor-16": 0.022476501838986515,
        "meteor-17": 0.2974374334648676,
        "meteor-19": 0.3439351414186314,
        "ruby-0": 0.13805970149253732,
        "ruby-1": 0.21593830334190234,
        "ruby-2": 0.18283582089552242,
        "ruby-3": 0.1607565011820331,
        "ruby-4": 0.15210355987055013,
        "ruby-5": 0.24532710280373837,
        "ruby-6": 0.24295010845986986,
        "ruby-7": 0.16507936507936505,
        "ruby-8": 0.19361702127659575,
        "ruby-9": 0.2090909090909091,
        "ruby-10": 0.003731343283582045,
        "ruby-11": 0.2164009111617312,
        "ruby-12": 0.18117647058823527,
        "ruby-13": 0.27689243027888444,
        "ruby-14": 0.26865671641791045,
        "ruby-15": 0.22388059701492535,
        "ruby-16": 0.026119402985074647,
        "ruby-17": 0.17537313432835822,
        "ruby-19": 0.17910447761194026,
        "codebertscore_f1-0": 0.7775285243988037,
        "codebertscore_f3-0": 0.7818539142608643,
        "codebertscore_f1-1": 0.770205020904541,
        "codebertscore_f3-1": 0.7971988916397095,
        "codebertscore_f1-2": 0.7636396288871765,
        "codebertscore_f3-2": 0.7447456121444702,
        "codebertscore_f1-3": 0.7782058715820312,
        "codebertscore_f3-3": 0.7982315421104431,
        "codebertscore_f1-4": 0.7625854015350342,
        "codebertscore_f3-4": 0.7768122553825378,
        "codebertscore_f1-5": 0.7859669923782349,
        "codebertscore_f3-5": 0.802882194519043,
        "codebertscore_f1-6": 0.7542131543159485,
        "codebertscore_f3-6": 0.7921274304389954,
        "codebertscore_f1-7": 0.7692490816116333,
        "codebertscore_f3-7": 0.7835742831230164,
        "codebertscore_f1-8": 0.7383362650871277,
        "codebertscore_f3-8": 0.7734131813049316,
        "codebertscore_f1-9": 0.7804369330406189,
        "codebertscore_f3-9": 0.8121129274368286,
        "codebertscore_f1-10": 0.0,
        "codebertscore_f3-10": 0.0,
        "codebertscore_f1-11": 0.7790470719337463,
        "codebertscore_f3-11": 0.8013644218444824,
        "codebertscore_f1-12": 0.7689351439476013,
        "codebertscore_f3-12": 0.8022647500038147,
        "codebertscore_f1-13": 0.7874442338943481,
        "codebertscore_f3-13": 0.8101946115493774,
        "codebertscore_f1-14": 0.7846825122833252,
        "codebertscore_f3-14": 0.7744799256324768,
        "codebertscore_f1-15": 0.783970832824707,
        "codebertscore_f3-15": 0.7798678278923035,
        "codebertscore_f1-16": 0.5914614200592041,
        "codebertscore_f3-16": 0.5643759965896606,
        "codebertscore_f1-17": 0.7767678499221802,
        "codebertscore_f3-17": 0.7739245295524597,
        "codebertscore_f1-19": 0.7983691096305847,
        "codebertscore_f3-19": 0.8007338047027588,
        "codebertscore_s_f1-0": 0.7901285886764526,
        "codebertscore_s_f3-0": 0.792084276676178,
        "codebertscore_s_f1-1": 0.7783756852149963,
        "codebertscore_s_f3-1": 0.8057567477226257,
        "codebertscore_s_f1-2": 0.7816917300224304,
        "codebertscore_s_f3-2": 0.7692800164222717,
        "codebertscore_s_f1-3": 0.7916625142097473,
        "codebertscore_s_f3-3": 0.8187901377677917,
        "codebertscore_s_f1-4": 0.7720391750335693,
        "codebertscore_s_f3-4": 0.7860291004180908,
        "codebertscore_s_f1-5": 0.7962856292724609,
        "codebertscore_s_f3-5": 0.8153542280197144,
        "codebertscore_s_f1-6": 0.7691196203231812,
        "codebertscore_s_f3-6": 0.8023178577423096,
        "codebertscore_s_f1-7": 0.7782555818557739,
        "codebertscore_s_f3-7": 0.7892971038818359,
        "codebertscore_s_f1-8": 0.7582556009292603,
        "codebertscore_s_f3-8": 0.7948966026306152,
        "codebertscore_s_f1-9": 0.7861422300338745,
        "codebertscore_s_f3-9": 0.8171318769454956,
        "codebertscore_s_f1-10": 0.0,
        "codebertscore_s_f3-10": 0.0,
        "codebertscore_s_f1-11": 0.7874452471733093,
        "codebertscore_s_f3-11": 0.8055881261825562,
        "codebertscore_s_f1-12": 0.7760401368141174,
        "codebertscore_s_f3-12": 0.8078213930130005,
        "codebertscore_s_f1-13": 0.7932584285736084,
        "codebertscore_s_f3-13": 0.8157630562782288,
        "codebertscore_s_f1-14": 0.7896870374679565,
        "codebertscore_s_f3-14": 0.7837511897087097,
        "codebertscore_s_f1-15": 0.7871944904327393,
        "codebertscore_s_f3-15": 0.7842978835105896,
        "codebertscore_s_f1-16": 0.6391875743865967,
        "codebertscore_s_f3-16": 0.6213836669921875,
        "codebertscore_s_f1-17": 0.7817550897598267,
        "codebertscore_s_f3-17": 0.7786732316017151,
        "codebertscore_s_f1-19": 0.81131511926651,
        "codebertscore_s_f3-19": 0.8179311752319336,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 0,
        "raw_gpt35_nsnr-10": "0",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-13": 2,
        "raw_gpt35_nsnr-13": "2",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-17": 2,
        "raw_gpt35_nsnr-17": "2",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-17": 1,
        "raw_gpt35_nswr-17": "1",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n",
        "snippet": [
            "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n"
        ],
        "simplified": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "task_id": "26",
        "3": "let arr = []\n    for(let i = 0; i < numbers.length; i++){\n        if(arr.indexOf(numbers[i]) == -1){\n            arr.push(numbers[i])\n        }\n    }\n    return arr\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let result = []\n    numbers.forEach(num => {\n        if(result.indexOf(num) === -1){\n            result.push(num)\n        }\n    })\n    return result\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var result = [];\n    var hash = {};\n    for(var i=0; i<numbers.length; i++){\n        if(hash[numbers[i]] == undefined){\n            hash[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var output = [];\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = 0; j < numbers.length; j++){\n            if (numbers[i] == numbers[j] && i != j){\n                if (output.indexOf(numbers[i]) == -1){\n                    output.push(numbers[i]);\n                }\n            }\n        }\n    }\n    return output;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        var num = numbers[i];\n        if (result.indexOf(num) === -1){\n            result.push(num);\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var number_string = numbers.join('');\n    var dict = {};\n    var result = [];\n    for (var i = 0; i < number_string.length; i++){\n        var n = number_string[i];\n        if (!dict[n]){\n            dict[n] = 1;\n        }\n        else {\n            dict[n] += 1;\n        }\n    }\n    for (var key in dict){\n        if (dict[key] === 1){\n            result.push(key);\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let newNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) === i){\n            newNumbers.push(numbers[i]);\n        }\n    }\n    return newNumbers;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(i=0; i<=numbers.length; i++){\n        for(j=0; j<=numbers.length; j++){\n            if(numbers[i] === numbers[j] && i !== j){\n                numbers.splice(j, 1);\n            }\n        }\n    }\n    return numbers;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var exists = {},\n        outArr = [],\n        elm;\n\n    for(var i =0; i<numbers.length; i++)\n    {\n        elm = numbers[i];\n        if(!exists[elm])\n        {\n            outArr.push(elm);\n            exists[elm] = true;\n        }\n    }\n    return outArr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "const uniques = new Set();\n    return numbers.filter(number => {\n        if(uniques.has(number)){\n            return false;\n        }\n        uniques.add(number);\n        return true;\n    });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j < numbers.length; j++){\n            if(numbers[i] === numbers[j] && i !== j){\n                numbers.splice(j, 1);\n            }\n        }\n    }\n    return numbers;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(!Array.isArray(numbers)){\n        throw \"Input is not an array\";\n    }\n    let found = [];\n    return numbers.filter(function(number){\n        if(found.indexOf(number) === -1){\n            found.push(number);\n            return true;\n        }\n        return false;\n    });\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "const set = new Set(numbers);\n    return [...set];\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let output = [];\n    for(let i = 0; i < numbers.length; i++){\n        let found = false;\n        for(let j = 0; j < output.length; j++){\n            if(numbers[i] === output[j]){\n                found = true;\n            }\n        }\n        if(!found){\n            output.push(numbers[i]);\n        }\n    }\n    return output;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let unique_numbers = [];\n    let unique_count = 0;\n    let unique_set = new Set();\n    for(let num of numbers){\n        if(!unique_set.has(num)){\n            unique_numbers[unique_count] = num;\n            unique_count++;\n            unique_set.add(num);\n        }\n    }\n    return unique_numbers;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var new_array = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if (new_array.indexOf(numbers[i]) === -1) {\n      new_array.push(numbers[i]);\n    }\n  }\n  return new_array;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let obj = {};\n    let temp = [];\n    numbers.forEach(function(number){\n        if(obj[number] === undefined){\n            obj[number] = number;\n            temp.push(number);\n        }\n    });\n    return temp;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var new_numbers = [];\n    for (var i = 0; i < numbers.length; i++){\n        if (new_numbers.indexOf(numbers[i]) < 0){\n            new_numbers.push(numbers[i]);\n        }\n    }\n    return new_numbers;\n}\n\nvar numbers = [1, 2, 3, 2, 4];",
        "grade-14": {
            "execution": 0
        },
        "5": "return numbers.filter((element, index) => numbers.indexOf(element) === index);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var unique = [];\n    for (var i = 0; i < numbers.length; i++) {\n        var n = numbers[i];\n        if (unique.indexOf(n) == -1) {\n            unique.push(n);\n        }\n    }\n    return unique;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.0922729010119412,
        "bleu-0": 0.052004308243648566,
        "bleu-8": 0.15790242973830085,
        "bleu-7": 0.07890175391197715,
        "bleu-16": 0.11280457536051161,
        "bleu-2": 0.2458966019098819,
        "bleu-11": 0.14361532368586977,
        "bleu-1": 0.14333152221740128,
        "bleu-10": 0.08820502850833943,
        "bleu-17": 0.13455428024632646,
        "bleu-12": 0.14182290454164417,
        "bleu-6": 0.1389956223903367,
        "bleu-18": 0.008897416271296277,
        "bleu-15": 0.10101005541659175,
        "bleu-13": 0.25216239222607295,
        "bleu-9": 0.14754329562742327,
        "bleu-4": 0.10514746353695602,
        "bleu-14": 0.12210618148819825,
        "bleu-5": 0.059913520211238414,
        "bleu-19": 0.10841045454847978,
        "codebleu-3": 0.4790346985281457,
        "codebleu-0": 0.3352756545846289,
        "codebleu-8": 0.5610159118774458,
        "codebleu-7": 0.5822673892135375,
        "codebleu-16": 0.5101026705286599,
        "codebleu-2": 0.6960519776097465,
        "codebleu-11": 0.5262740840636195,
        "codebleu-1": 0.556529814121905,
        "codebleu-10": 0.5321905500188796,
        "codebleu-17": 0.42137854616116754,
        "codebleu-12": 0.5583359910113365,
        "codebleu-6": 0.46153106987463327,
        "codebleu-18": 0.13199659560009597,
        "codebleu-15": 0.5666853646420095,
        "codebleu-13": 0.5898198076081987,
        "codebleu-9": 0.525557326819619,
        "codebleu-4": 0.5074871745402638,
        "codebleu-14": 0.5433588865892227,
        "codebleu-5": 0.18843263132486116,
        "codebleu-19": 0.5015650285485427,
        "chrf-3": 0.2578437191851682,
        "chrf-0": 0.21891973771575624,
        "chrf-8": 0.28993610673428666,
        "chrf-7": 0.2931532577354713,
        "chrf-16": 0.28145680012823315,
        "chrf-2": 0.44794350674094174,
        "chrf-11": 0.30182135691908063,
        "chrf-1": 0.3080974284560853,
        "chrf-10": 0.25750212284159363,
        "chrf-17": 0.319108279493015,
        "chrf-12": 0.3113526420261037,
        "chrf-6": 0.3273304991130916,
        "chrf-18": 0.16151865531476858,
        "chrf-15": 0.27720292671744684,
        "chrf-13": 0.3381660113504996,
        "chrf-9": 0.28737575516057656,
        "chrf-4": 0.2771120699179503,
        "chrf-14": 0.28902385032387723,
        "chrf-5": 0.2680122694647493,
        "chrf-19": 0.25910908557300333,
        "rougel-3": 0.32758620689655177,
        "rougel-0": 0.33009708737864074,
        "rougel-8": 0.3969465648854962,
        "rougel-7": 0.3270440251572327,
        "rougel-16": 0.3606557377049181,
        "rougel-2": 0.46511627906976744,
        "rougel-11": 0.3442622950819672,
        "rougel-1": 0.34074074074074073,
        "rougel-10": 0.33587786259541985,
        "rougel-17": 0.33962264150943394,
        "rougel-12": 0.3555555555555555,
        "rougel-6": 0.33082706766917297,
        "rougel-18": 0.2784810126582279,
        "rougel-15": 0.3443708609271523,
        "rougel-13": 0.45528455284552843,
        "rougel-9": 0.3833333333333333,
        "rougel-4": 0.35897435897435903,
        "rougel-14": 0.36363636363636365,
        "rougel-5": 0.27586206896551724,
        "rougel-19": 0.33057851239669417,
        "meteor-3": 0.35332383573836945,
        "meteor-0": 0.2868381251199487,
        "meteor-8": 0.4647768578352181,
        "meteor-7": 0.39711511214132206,
        "meteor-16": 0.43355265603509174,
        "meteor-2": 0.5322265625,
        "meteor-11": 0.42514213826664454,
        "meteor-1": 0.4531001505936683,
        "meteor-10": 0.44777867528271403,
        "meteor-17": 0.28267367553081835,
        "meteor-12": 0.4617927367576244,
        "meteor-6": 0.311140980881868,
        "meteor-18": 0.13911065193116473,
        "meteor-15": 0.4244529906652553,
        "meteor-13": 0.4274865833232711,
        "meteor-9": 0.42654063214252164,
        "meteor-4": 0.36587465564738286,
        "meteor-14": 0.3604642531441539,
        "meteor-5": 0.231771648801638,
        "meteor-19": 0.40895983866806146,
        "ruby-3": 0.180327868852459,
        "ruby-0": 0.19672131147540983,
        "ruby-8": 0.2142857142857143,
        "ruby-7": 0.2142857142857143,
        "ruby-16": 0.1311475409836066,
        "ruby-2": 0.33333333333333337,
        "ruby-11": 0.1311475409836066,
        "ruby-1": 0.17567567567567566,
        "ruby-10": 0.17142857142857137,
        "ruby-17": 0.2622950819672131,
        "ruby-12": 0.18918918918918914,
        "ruby-6": 0.125,
        "ruby-18": 0.180327868852459,
        "ruby-15": 0.19999999999999996,
        "ruby-13": 0.20967741935483875,
        "ruby-9": 0.16393442622950816,
        "ruby-4": 0.24590163934426235,
        "ruby-14": 0.22535211267605637,
        "ruby-5": 0.16393442622950816,
        "ruby-19": 0.1311475409836066,
        "codebertscore_f1-3": 0.7790901064872742,
        "codebertscore_f3-3": 0.7723166942596436,
        "codebertscore_f1-0": 0.7822248339653015,
        "codebertscore_f3-0": 0.7758267521858215,
        "codebertscore_f1-8": 0.7834247350692749,
        "codebertscore_f3-8": 0.7760679721832275,
        "codebertscore_f1-7": 0.7328430414199829,
        "codebertscore_f3-7": 0.7275344729423523,
        "codebertscore_f1-16": 0.7832272052764893,
        "codebertscore_f3-16": 0.7816979289054871,
        "codebertscore_f1-2": 0.7913535237312317,
        "codebertscore_f3-2": 0.8133504986763,
        "codebertscore_f1-11": 0.7766901254653931,
        "codebertscore_f3-11": 0.7646793723106384,
        "codebertscore_f1-1": 0.7292647957801819,
        "codebertscore_f3-1": 0.7212052345275879,
        "codebertscore_f1-10": 0.7212923169136047,
        "codebertscore_f3-10": 0.7211405038833618,
        "codebertscore_f1-17": 0.7895260453224182,
        "codebertscore_f3-17": 0.7873450517654419,
        "codebertscore_f1-12": 0.7407757639884949,
        "codebertscore_f3-12": 0.7346137762069702,
        "codebertscore_f1-6": 0.7453842759132385,
        "codebertscore_f3-6": 0.7583720684051514,
        "codebertscore_f1-18": 0.7629061937332153,
        "codebertscore_f3-18": 0.7195213437080383,
        "codebertscore_f1-15": 0.7264841794967651,
        "codebertscore_f3-15": 0.7200884819030762,
        "codebertscore_f1-13": 0.7874533534049988,
        "codebertscore_f3-13": 0.7963939309120178,
        "codebertscore_f1-9": 0.76999831199646,
        "codebertscore_f3-9": 0.7678120136260986,
        "codebertscore_f1-4": 0.7941177487373352,
        "codebertscore_f3-4": 0.7826561331748962,
        "codebertscore_f1-14": 0.765886127948761,
        "codebertscore_f3-14": 0.7626109719276428,
        "codebertscore_f1-5": 0.7489252686500549,
        "codebertscore_f3-5": 0.7242818474769592,
        "codebertscore_f1-19": 0.7754696607589722,
        "codebertscore_f3-19": 0.7749068140983582,
        "codebertscore_s_f1-3": 0.780536949634552,
        "codebertscore_s_f3-3": 0.7748791575431824,
        "codebertscore_s_f1-0": 0.7859392762184143,
        "codebertscore_s_f3-0": 0.7814162373542786,
        "codebertscore_s_f1-8": 0.7880012392997742,
        "codebertscore_s_f3-8": 0.779335081577301,
        "codebertscore_s_f1-7": 0.740827739238739,
        "codebertscore_s_f3-7": 0.7341906428337097,
        "codebertscore_s_f1-16": 0.7917275428771973,
        "codebertscore_s_f3-16": 0.7874886393547058,
        "codebertscore_s_f1-2": 0.8014652729034424,
        "codebertscore_s_f3-2": 0.817394495010376,
        "codebertscore_s_f1-11": 0.7789645791053772,
        "codebertscore_s_f3-11": 0.7669723629951477,
        "codebertscore_s_f1-1": 0.7380841374397278,
        "codebertscore_s_f3-1": 0.7256183624267578,
        "codebertscore_s_f1-10": 0.7277022004127502,
        "codebertscore_s_f3-10": 0.7293030023574829,
        "codebertscore_s_f1-17": 0.7891362905502319,
        "codebertscore_s_f3-17": 0.7877992987632751,
        "codebertscore_s_f1-12": 0.7551511526107788,
        "codebertscore_s_f3-12": 0.7454425692558289,
        "codebertscore_s_f1-6": 0.7470887899398804,
        "codebertscore_s_f3-6": 0.7610085606575012,
        "codebertscore_s_f1-18": 0.7560881972312927,
        "codebertscore_s_f3-18": 0.7082780599594116,
        "codebertscore_s_f1-15": 0.7337257862091064,
        "codebertscore_s_f3-15": 0.7267701029777527,
        "codebertscore_s_f1-13": 0.7822970747947693,
        "codebertscore_s_f3-13": 0.7905505299568176,
        "codebertscore_s_f1-9": 0.7802049517631531,
        "codebertscore_s_f3-9": 0.7763340473175049,
        "codebertscore_s_f1-4": 0.7893204689025879,
        "codebertscore_s_f3-4": 0.7773789763450623,
        "codebertscore_s_f1-14": 0.7661328315734863,
        "codebertscore_s_f3-14": 0.7631092667579651,
        "codebertscore_s_f1-5": 0.7455765604972839,
        "codebertscore_s_f3-5": 0.7175034880638123,
        "codebertscore_s_f1-19": 0.7840494513511658,
        "codebertscore_s_f3-19": 0.7798681855201721,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 2,
        "raw_gpt35_nswr-13": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n",
        "snippet": [
            "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n"
        ],
        "simplified": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
        "task_id": "113",
        "3": "return lst.map(function(v){\n        var c = 0;\n        for(var i=0; i<v.length; i++){\n            if(v[i]%2 != 0){\n                c++;\n            }\n        }\n        return \"the number of odd elements \" + c + \"n the str\" + c + \"ng \" + c + \" of the \" + c + \"nput.\";\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var ans = [];\n    for (var i = 0; i < lst.length; i++){\n        var counter = 0;\n        for (var j = 0; j < lst[i].length; j++){\n            if (parseInt(lst[i][j]) % 2 != 0){\n                counter += 1;\n            }\n        }\n        var str = \"the number of odd elements \" + counter + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\";\n        ans.push(str);\n    }\n    return ans;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "// your code here\n    let odd_digits = [];\n    for (let str of lst){\n        let str_odd = 0;\n        for (let ch of str){\n            if (parseInt(ch) % 2 !== 0){\n                str_odd++;\n            }\n        }\n        odd_digits.push(str_odd);\n    }\n    let str_arr = [];\n    for (let i = 0; i < lst.length; i++){\n        let str = \"the number of odd elements \" + odd_digits[i] + \"n the str\" + lst[i] + \"ng \" + i + \" of the \" + i + \"nput.\";\n        str_arr.push(str);\n    }\n    return str_arr;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return lst.map(function(x) {\n    return \"the number of odd elements \" + x.replace(/[^13579]/g, \"\").length + \"n the str\" + x.replace(/[^13579]/g, \"\").length + \"ng \" + x.replace(/[^13579]/g, \"\").length + \" of the \" + x.replace(/[^13579]/g, \"\").length + \"nput.\";\n  });\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var result = [];\n  var count = 0;\n  var count_odd = 0;\n  for(var i = 0; i < lst.length; i++){\n    var num = lst[i];\n    while(count < num.length){\n      if(Number(num[count]) % 2 !== 0){\n        count_odd += 1;\n      }\n      count += 1;\n    }\n    result.push(\"the number of odd elements \" + count_odd + \"n the str\" + count_odd + \"ng \" + count_odd + \" of the \" + count_odd + \"nput.\");\n    count = 0;\n    count_odd = 0;\n  }\n  return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "return lst.map(function(num_str){\n        var count = 0;\n        for(var i = 0; i < num_str.length; i++){\n            if(parseInt(num_str[i]) % 2 === 1){\n                count++;\n            }\n        }\n        var num_str_array = num_str.split(\"\");\n        for(var i = 0; i < num_str_array.length; i++){\n            if(parseInt(num_str_array[i]) % 2 === 0){\n                num_str_array[i] = \"n\";\n            }\n        }\n        num_str_array[num_str_array.length - 1] = \"t\";\n        num_str_array.unshift(\"e\");\n        num_str_array.splice(2, 0, \"umber\");\n        num_str_array.splice(8, 0, \" \");\n        num_str_array.splice(num_str_array.length - 4, 0, \"the n\");\n        return num_str_array.join(\"\");\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return lst.map(function(string){\n    var odd = 0;\n    string.split('').forEach(function(n){\n      if(n % 2 != 0){\n        odd++;\n      }\n    });\n    return \"the number of odd elements \" + odd + \"n the str\" + odd + \"ng \" + odd + \" of the \" + odd + \"nput.\";\n  });\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var out = [];\n    for (var i = 0; i < lst.length; i++){\n        var current = lst[i];\n        var count = 0;\n        for (var j = 0; j < current.length; j++){\n            if (current[j] % 2 === 1){\n                count++;\n            }\n        }\n        out.push(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n    }\n    return out;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var new_lst = [];\n\tfor (var i = 0; i < lst.length; i++){\n\t\tvar word = lst[i];\n\t\tvar count = 0;\n\t\tfor (var j = 0; j < word.length; j++){\n\t\t\tif (word[j]%2 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tvar string = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n\t\tnew_lst.push(string);\n\t}\n\treturn new_lst;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "12": "let count = 0;\n    let output = '';\n    for(let i = 0; i < lst.length; i++){\n        for(let k = 0; k < lst[i].length; k++){\n            if(lst[i][k] % 2 === 1){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \"+count+\"n the str\"+i+\"ng \"+i+\" of the \"+i+\"nput.\";\n        output += str;\n        count = 0;\n    }\n    return output;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let newLst = []\n    for(let i = 0; i < lst.length; i++){\n        let oddCt = 0\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 == 1){\n                oddCt++\n            }\n        }\n        newLst.push(`the number of odd elements ${oddCt}n the str${oddCt}ng ${oddCt} of the ${oddCt}nput.`)\n    }\n    return newLst\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var num = 1;\n  var ans = [];\n  for(var i = 0; i < lst.length; i++){\n    for(var j = 0; j < lst[i].length; j++){\n      var count = 0;\n      var x = parseInt(lst[i][j]);\n      if(x % 2 !== 0){\n        count += 1;\n      }\n    }\n    var str = \"the number of odd elements \" + count + \"n the str\" + num + \"ng \" + num + \" of the \" + num + \"nput.\";\n    ans.push(str);\n    num += 1;\n  }\n  return ans;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let counter = \"\";\n    let result = [];\n    for(let string of lst){\n        for(let digit of string){\n            if(parseInt(digit) % 2 == 1){\n                counter++;\n            }\n        }\n        result.push(`the number of odd elements ${counter}n the str${counter}ng ${counter} of the ${counter}nput.`);\n        counter = \"\";\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let res = [];\n    for (let i = 0; i < lst.length; i++){\n        let counter = 0;\n        for (let j = 0; j < lst[i].length; j++){\n            if (lst[i][j] % 2 === 1){\n                counter += 1;\n            }\n        }\n        res.push(`the number of odd elements ${counter}n the str${counter}ng ${counter} of the ${counter}nput.`);\n    }\n    return res;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n  for (var i = 0; i < lst.length; i++){\n    var sub = lst[i].split(\"\");\n    var count = 0;\n    for (var j = 0; j < sub.length; j++){\n      if (sub[j] % 2 == 1){\n        count += 1;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return lst.map(function(n){\n    var num = n.split('').reduce(function(a,b){\n      if(+b % 2){\n        a += +b;\n      }\n      return a;\n    },0);\n    return 'the number of odd elements ' + num + 'n the str' + num + 'ng ' + num + ' of the ' + num + 'nput.';\n  });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return lst.map(function(x){\n        var odd = 0;\n        for(var i = 0; i < x.length; i++){\n            if(x[i] % 2 != 0){\n                odd ++;\n            }\n        }\n        return \"the number of odd elements \" + odd + \"n the str\" + odd + \"ng \" + odd + \" of the \" + odd + \"nput.\";\n    });\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var odds = 0;\n  var new_lst = [];\n  for (var i = 0; i < lst.length; i++){\n    for (var j = 0; j < lst[i].length; j++){\n      if (lst[i][j] % 2 === 1){\n        odds++;\n      }\n    }\n    new_lst.push(\"the number of odd elements \" + odds + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n    odds = 0;\n  }\n  return new_lst;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var arr = [];\n    for(var i = 0; i < lst.length; i++){\n        var num = 0;\n        for(var j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 == 1){\n                num++;\n            }\n        }\n        arr.push(num);\n    }\n    for(var i = 0; i < arr.length; i++){\n        var str = lst[i];\n        var spl = str.split('');\n        for(var j = 0; j < spl.length; j++){\n            if(parseInt(spl[j]) % 2 == 1){\n                spl[j] = arr[i];\n            }\n        }\n        lst[i] = spl.join('');\n    }\n    return lst;\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.31545675746009305,
        "bleu-0": 0.5155940057234261,
        "bleu-8": 0.412852326699088,
        "bleu-7": 0.2180111664925855,
        "bleu-16": 0.4249632371389055,
        "bleu-2": 0.1753058435325547,
        "bleu-11": 0.23167287072790063,
        "bleu-1": 0.5154773286618727,
        "bleu-10": 0.46440282165545715,
        "bleu-17": 1.280627638922084e-57,
        "bleu-12": 0.5101341310114614,
        "bleu-6": 0.5268218602275906,
        "bleu-18": 0.46134041757651695,
        "bleu-15": 0.2026169789859549,
        "bleu-13": 0.49155170762276756,
        "bleu-9": 0.5259465034135,
        "bleu-4": 0.22654591074879268,
        "bleu-14": 0.31545675746009305,
        "bleu-5": 0.5657157185921401,
        "bleu-19": 0.28449989979305235,
        "codebleu-3": 0.463709386279548,
        "codebleu-0": 0.7039135576332471,
        "codebleu-8": 0.6937550960628895,
        "codebleu-7": 0.42875690382617604,
        "codebleu-16": 0.6981330834956948,
        "codebleu-2": 0.6259572373283558,
        "codebleu-11": 0.4338206074143348,
        "codebleu-1": 0.7131283184440524,
        "codebleu-10": 0.6818494390375949,
        "codebleu-17": 0.003968253968253968,
        "codebleu-12": 0.6875894781775507,
        "codebleu-6": 0.5985725525792502,
        "codebleu-18": 0.7448973626033791,
        "codebleu-15": 0.37257550076311524,
        "codebleu-13": 0.5549625765978804,
        "codebleu-9": 0.73020103403918,
        "codebleu-4": 0.44484178637377536,
        "codebleu-14": 0.463709386279548,
        "codebleu-5": 0.7307443339417171,
        "codebleu-19": 0.6526290051778639,
        "chrf-3": 0.3255112347990299,
        "chrf-0": 0.4668288687544293,
        "chrf-8": 0.42247562436495656,
        "chrf-7": 0.26621087083942885,
        "chrf-16": 0.37495200133668405,
        "chrf-2": 0.24389630245571417,
        "chrf-11": 0.27753014164845247,
        "chrf-1": 0.4414726031365077,
        "chrf-10": 0.43346840141422066,
        "chrf-17": 0.005889281507656065,
        "chrf-12": 0.4906771429331505,
        "chrf-6": 0.5618349748120254,
        "chrf-18": 0.4458201931999081,
        "chrf-15": 0.3360185448622686,
        "chrf-13": 0.5398233218109126,
        "chrf-9": 0.44607344396668586,
        "chrf-4": 0.3296520563802759,
        "chrf-14": 0.3282080795338086,
        "chrf-5": 0.4883412751978017,
        "chrf-19": 0.3732990902816824,
        "rougel-3": 0.5777777777777778,
        "rougel-0": 0.7000000000000001,
        "rougel-8": 0.5255474452554744,
        "rougel-7": 0.31578947368421056,
        "rougel-16": 0.6090225563909774,
        "rougel-2": 0.39384615384615385,
        "rougel-11": 0.5135135135135135,
        "rougel-1": 0.7351778656126483,
        "rougel-10": 0.6926070038910506,
        "rougel-17": 0.015037593984962407,
        "rougel-12": 0.689922480620155,
        "rougel-6": 0.653543307086614,
        "rougel-18": 0.644927536231884,
        "rougel-15": 0.4581497797356828,
        "rougel-13": 0.6612903225806452,
        "rougel-9": 0.7181467181467182,
        "rougel-4": 0.4690265486725663,
        "rougel-14": 0.5777777777777778,
        "rougel-5": 0.7294117647058823,
        "rougel-19": 0.4716981132075472,
        "meteor-3": 0.537014310243423,
        "meteor-0": 0.6797140754208518,
        "meteor-8": 0.6467413216843885,
        "meteor-7": 0.3558342831971736,
        "meteor-16": 0.6526190067093843,
        "meteor-2": 0.3684261692920981,
        "meteor-11": 0.502065380002912,
        "meteor-1": 0.7070752482811307,
        "meteor-10": 0.6649476941094296,
        "meteor-17": 0.004205214465937763,
        "meteor-12": 0.5916829270148093,
        "meteor-6": 0.574720572990293,
        "meteor-18": 0.6764386835815406,
        "meteor-15": 0.3913258035207793,
        "meteor-13": 0.6025178936605317,
        "meteor-9": 0.7079841330403779,
        "meteor-4": 0.4896280917399268,
        "meteor-14": 0.5282875726015724,
        "meteor-5": 0.7290522798490322,
        "meteor-19": 0.39987007831390514,
        "ruby-3": 0.4696969696969697,
        "ruby-0": 0.5454545454545454,
        "ruby-8": 0.295774647887324,
        "ruby-7": 0.16666666666666663,
        "ruby-16": 0.4402985074626866,
        "ruby-2": 0.26943005181347146,
        "ruby-11": 0.41666666666666663,
        "ruby-1": 0.6212121212121212,
        "ruby-10": 0.5454545454545454,
        "ruby-17": 0.007575757575757569,
        "ruby-12": 0.5151515151515151,
        "ruby-6": 0.5378787878787878,
        "ruby-18": 0.5,
        "ruby-15": 0.303030303030303,
        "ruby-13": 0.5454545454545454,
        "ruby-9": 0.5833333333333333,
        "ruby-4": 0.3787878787878788,
        "ruby-14": 0.4696969696969697,
        "ruby-5": 0.5833333333333333,
        "ruby-19": 0.30645161290322576,
        "codebertscore_f1-3": 0.8892683386802673,
        "codebertscore_f3-3": 0.8765658736228943,
        "codebertscore_f1-0": 0.9009848833084106,
        "codebertscore_f3-0": 0.8963021636009216,
        "codebertscore_f1-8": 0.8218843340873718,
        "codebertscore_f3-8": 0.8334552645683289,
        "codebertscore_f1-7": 0.7596312165260315,
        "codebertscore_f3-7": 0.7599586248397827,
        "codebertscore_f1-16": 0.8627267479896545,
        "codebertscore_f3-16": 0.8673558831214905,
        "codebertscore_f1-2": 0.713263988494873,
        "codebertscore_f3-2": 0.7469925284385681,
        "codebertscore_f1-11": 0.8344680070877075,
        "codebertscore_f3-11": 0.8196410536766052,
        "codebertscore_f1-1": 0.8997944593429565,
        "codebertscore_f3-1": 0.8914492130279541,
        "codebertscore_f1-10": 0.9010917544364929,
        "codebertscore_f3-10": 0.8986204266548157,
        "codebertscore_f1-17": 0.0,
        "codebertscore_f3-17": 0.0,
        "codebertscore_f1-12": 0.8812271356582642,
        "codebertscore_f3-12": 0.874464750289917,
        "codebertscore_f1-6": 0.8740683197975159,
        "codebertscore_f3-6": 0.8621927499771118,
        "codebertscore_f1-18": 0.8907920718193054,
        "codebertscore_f3-18": 0.894061267375946,
        "codebertscore_f1-15": 0.8329660296440125,
        "codebertscore_f3-15": 0.8077312707901001,
        "codebertscore_f1-13": 0.9000641107559204,
        "codebertscore_f3-13": 0.8743324279785156,
        "codebertscore_f1-9": 0.9150263667106628,
        "codebertscore_f3-9": 0.9079887270927429,
        "codebertscore_f1-4": 0.8124493956565857,
        "codebertscore_f3-4": 0.7986999154090881,
        "codebertscore_f1-14": 0.8805346488952637,
        "codebertscore_f3-14": 0.8682323694229126,
        "codebertscore_f1-5": 0.9055434465408325,
        "codebertscore_f3-5": 0.897483229637146,
        "codebertscore_f1-19": 0.7991403937339783,
        "codebertscore_f3-19": 0.7880290746688843,
        "codebertscore_s_f1-3": 0.8913386464118958,
        "codebertscore_s_f3-3": 0.8779220581054688,
        "codebertscore_s_f1-0": 0.9074450135231018,
        "codebertscore_s_f3-0": 0.9029809236526489,
        "codebertscore_s_f1-8": 0.843643069267273,
        "codebertscore_s_f3-8": 0.8577066659927368,
        "codebertscore_s_f1-7": 0.7624600529670715,
        "codebertscore_s_f3-7": 0.7603753209114075,
        "codebertscore_s_f1-16": 0.8673121929168701,
        "codebertscore_s_f3-16": 0.8732728958129883,
        "codebertscore_s_f1-2": 0.7234726548194885,
        "codebertscore_s_f3-2": 0.7461482286453247,
        "codebertscore_s_f1-11": 0.839179277420044,
        "codebertscore_s_f3-11": 0.8239995241165161,
        "codebertscore_s_f1-1": 0.9052083492279053,
        "codebertscore_s_f3-1": 0.8971245288848877,
        "codebertscore_s_f1-10": 0.8949360847473145,
        "codebertscore_s_f3-10": 0.8925268650054932,
        "codebertscore_s_f1-17": 0.0,
        "codebertscore_s_f3-17": 0.0,
        "codebertscore_s_f1-12": 0.887225329875946,
        "codebertscore_s_f3-12": 0.8800551891326904,
        "codebertscore_s_f1-6": 0.8750549554824829,
        "codebertscore_s_f3-6": 0.8619912266731262,
        "codebertscore_s_f1-18": 0.8909112215042114,
        "codebertscore_s_f3-18": 0.8938172459602356,
        "codebertscore_s_f1-15": 0.8344687819480896,
        "codebertscore_s_f3-15": 0.8097305297851562,
        "codebertscore_s_f1-13": 0.9036763310432434,
        "codebertscore_s_f3-13": 0.8773155808448792,
        "codebertscore_s_f1-9": 0.9125859141349792,
        "codebertscore_s_f3-9": 0.9054137468338013,
        "codebertscore_s_f1-4": 0.822607696056366,
        "codebertscore_s_f3-4": 0.8086448311805725,
        "codebertscore_s_f1-14": 0.8844068050384521,
        "codebertscore_s_f3-14": 0.8713294267654419,
        "codebertscore_s_f1-5": 0.9071499109268188,
        "codebertscore_s_f3-5": 0.8986432552337646,
        "codebertscore_s_f1-19": 0.8100702166557312,
        "codebertscore_s_f3-19": 0.7862474322319031,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-12": 3,
        "raw_gpt35_nsnr-12": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 3,
        "raw_gpt35_nsnr-18": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n",
        "snippet": [
            "  return x + y;\n}\n\n"
        ],
        "simplified": "Add two numbers x and y",
        "task_id": "53",
        "0": "return x + y;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "2": "return x + y;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "//return parseInt(x) + parseInt(y);\n    return parseInt(x) + parseInt(y);\n}",
        "grade-3": {
            "execution": 1
        },
        "5": "return x + y;\n}",
        "grade-5": {
            "execution": 1
        },
        "7": "return x + y;\n}",
        "grade-7": {
            "execution": 1
        },
        "14": "return x + y;\n}",
        "grade-14": {
            "execution": 1
        },
        "16": "if(typeof x === 'number' && typeof y === 'number'){\n\t\treturn x + y;\n\t} else {\n\t\treturn 'Please enter valid numbers.';\n\t}\n}",
        "grade-16": {
            "execution": 1
        },
        "bleu-0": 1.0000000000000004,
        "bleu-1": 0.0067379469990854705,
        "bleu-2": 1.0000000000000004,
        "bleu-3": 0.03386819335439616,
        "bleu-5": 1.0000000000000004,
        "bleu-7": 1.0000000000000004,
        "bleu-14": 1.0000000000000004,
        "bleu-16": 0.11031958317774526,
        "codebleu-0": 1.0,
        "codebleu-1": 0.13344563244998478,
        "codebleu-2": 1.0,
        "codebleu-3": 0.6333333333333332,
        "codebleu-5": 1.0,
        "codebleu-7": 1.0,
        "codebleu-14": 1.0,
        "codebleu-16": 0.7850532638629575,
        "chrf-0": 1.0,
        "chrf-1": 0.11111111111111112,
        "chrf-2": 1.0,
        "chrf-3": 0.22672812399078107,
        "chrf-5": 1.0,
        "chrf-7": 1.0,
        "chrf-14": 1.0,
        "chrf-16": 0.33780423805349846,
        "rougel-0": 1.0,
        "rougel-1": 0.2857142857142857,
        "rougel-2": 1.0,
        "rougel-3": 0.34285714285714286,
        "rougel-5": 1.0,
        "rougel-7": 1.0,
        "rougel-14": 1.0,
        "rougel-16": 0.2553191489361702,
        "meteor-0": 0.9976851851851852,
        "meteor-1": 0.0909090909090909,
        "meteor-2": 0.9976851851851852,
        "meteor-3": 0.5137215528781793,
        "meteor-5": 0.9976851851851852,
        "meteor-7": 0.9976851851851852,
        "meteor-14": 0.9976851851851852,
        "meteor-16": 0.5380116959064327,
        "ruby-0": 1.0,
        "ruby-1": 0.16666666666666663,
        "ruby-2": 1.0,
        "ruby-3": 0.2068965517241379,
        "ruby-5": 1.0,
        "ruby-7": 1.0,
        "ruby-14": 1.0,
        "ruby-16": 0.14634146341463417,
        "codebertscore_f1-0": 0.9999998807907104,
        "codebertscore_f3-0": 0.9999998807907104,
        "codebertscore_f1-1": 0.0,
        "codebertscore_f3-1": 0.0,
        "codebertscore_f1-2": 0.9999998807907104,
        "codebertscore_f3-2": 0.9999998807907104,
        "codebertscore_f1-3": 0.8475457429885864,
        "codebertscore_f3-3": 0.8884128928184509,
        "codebertscore_f1-5": 0.9999998807907104,
        "codebertscore_f3-5": 0.9999998807907104,
        "codebertscore_f1-7": 0.9999998807907104,
        "codebertscore_f3-7": 0.9999998807907104,
        "codebertscore_f1-14": 0.9999998807907104,
        "codebertscore_f3-14": 0.9999998807907104,
        "codebertscore_f1-16": 0.8046644926071167,
        "codebertscore_f3-16": 0.877073347568512,
        "codebertscore_s_f1-0": 0.9999998211860657,
        "codebertscore_s_f3-0": 0.9999998211860657,
        "codebertscore_s_f1-1": 0.0,
        "codebertscore_s_f3-1": 0.0,
        "codebertscore_s_f1-2": 0.9999998211860657,
        "codebertscore_s_f3-2": 0.9999998211860657,
        "codebertscore_s_f1-3": 0.8611428141593933,
        "codebertscore_s_f3-3": 0.9145175218582153,
        "codebertscore_s_f1-5": 0.9999998211860657,
        "codebertscore_s_f3-5": 0.9999998211860657,
        "codebertscore_s_f1-7": 0.9999998211860657,
        "codebertscore_s_f3-7": 0.9999998211860657,
        "codebertscore_s_f1-14": 0.9999998211860657,
        "codebertscore_s_f3-14": 0.9999998211860657,
        "codebertscore_s_f1-16": 0.8251171708106995,
        "codebertscore_s_f3-16": 0.9262803792953491,
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-1": 0,
        "raw_gpt35_nsnr-1": "0",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nswr-0": 4,
        "raw_gpt35_nswr-0": "4",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4"
    },
    {
        "intent": "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nfunction make_palindrome(string){\n",
        "snippet": [
            "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n"
        ],
        "simplified": "Test if given string is a palindrome",
        "task_id": "10",
        "3": "var reverse = string.split('').reverse().join(''),\n        palindrome_postfix_length = 0;\n    while(palindrome_postfix_length < string.length){\n        if(string.substr(0, string.length - palindrome_postfix_length) === reverse.substr(palindrome_postfix_length)){\n            break;\n        }\n        palindrome_postfix_length++;\n    }\n    return string + reverse.substr(palindrome_postfix_length);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var left = string.length;\n    var right = string.length;\n    var palindrome = \"\";\n    for(var i = 1; i <= string.length; i++){\n        if(is_palindrome(string.substring(i,string.length))){\n            left = i;\n            break;\n        }\n    }\n    for(var i = string.length - 1; i >= 0; i--){\n        if(is_palindrome(string.substring(0,i))){\n            right = i;\n            break;\n        }\n    }\n    if(left == string.length){\n        palindrome = string;\n    }\n    else if(right == 0){\n        palindrome = reverse(string);\n    }\n    else{\n        palindrome = string.substring(0,right) + reverse(string.substring(left,string.length));\n    }\n    return palindrome;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (string.length < 2) return string\n  const last_index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--){\n    let reverse_index = last_index - i\n    if (string[i] === string[reverse_index]) {\n      if (is_palindrome(string.slice(0, i))) {\n        let prefix = string.slice(0, reverse_index)\n        return string + prefix.split('').reverse().join('')\n      }\n    }\n  }\n  return string\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//Find the first half of the palindrome.\n    if(string == \"\"){\n        return \"\";\n    }\n    var palindrome = string;\n    var index_at_palindrome = 0;\n    var found_palindrome = false;\n    while(!found_palindrome){\n        var one_half_of_palindrome = palindrome.substring(0,index_at_palindrome);\n        var reverse_of_one_half_of_palindrome = reverse(one_half_of_palindrome);\n        if(palindrome.endsWith(reverse_of_one_half_of_palindrome)){\n            found_palindrome = true;\n        }\n        else{\n            index_at_palindrome++;\n        }\n    }\n    var string_before_palindrome = string.substring(0,index_at_palindrome);\n    var reverse_of_string_before_palindrome = reverse(string_before_palindrome);\n    return string + reverse_of_string_before_palindrome;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var reversed_string = string.split('').reverse().join('');\n    var min_length = string.length;\n    var prefix = '';\n    var suffix = '';\n    var longest_match = 0;\n    for (var i = 0; i < min_length; i++) {\n        var substring = string.substring(0, min_length - i);\n        if (reversed_string.indexOf(substring) === 0) {\n            longest_match = substring.length;\n            suffix = substring;\n            prefix = string.substring(longest_match);\n            break;\n        }\n    }\n    return prefix + suffix + reversed_string.substring(longest_match);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var longest_palindrome = longest_palindrome_postfix(string);\n    var palindrome_prefix = string.substring(0, string.length - longest_palindrome.length);\n    return string + reverse(palindrome_prefix);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var palindrome_postfix = get_palindrome_postfix(string);\n    var prefix = string.substring(0,string.length-palindrome_postfix.length);\n    return string + reverse(prefix);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// make the string palindromic - a string that's the same forwards and backwards\n  if(!string.length) return string;\n\n  // Find the longest palindromic postfix.\n  var palindrome_reversed = '';\n  for(var i = string.length - 1; i >= 0; i--){\n    // as we decrease i, test if the string ends in a palindrome\n    if(is_palindrome(string.substring(i))){\n      // we found a palindrome\n      palindrome_reversed = string.substring(i).split('').reverse().join('');\n      break;\n    }\n  }\n\n  // return the string with a reversed prefix appended to the end\n  return string + palindrome_reversed;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var palindrome_end = 0;\n    var index = 0;\n    var copy = string;\n    var palindrome = \"\";\n    for(var i = 1; i < string.length; i++){\n        //If string[i] is equal to string[0]\n        if(string[i] == string[0]){\n            //Concatenate both characters to a new string\n            var new_string = string[0] + string[i];\n            //Check if new_string is a palindrome\n            if(check_palindrome(new_string)){\n                //If it is a palindrome, replace old palindrome_end with new one.\n                palindrome_end = i;\n            }\n        }\n    }\n    //Keep adding characters to palindrome to prepare it for final return.\n    while(index < string.length){\n        if(index < palindrome_end){\n            palindrome += string[index];\n        }else{\n            palindrome += string[string.length - 1 - index];\n        }\n        index += 1;\n    }\n    return palindrome;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var tstring = string.substring(0, string.length/2);\n    var rtstring = tstring.split(\"\").reverse().join(\"\");\n    var suffix = string.substring(tstring.length, string.length);\n    var palindrome = string + rtstring;\n    if (suffix == rtstring) {\n        return palindrome;\n    }\n    for (var i = 0; i < tstring.length; i++) {\n        var tword = tstring.substring(0, tstring.length - i);\n        if (tword == rtstring.substring(i, rtstring.length)) {\n            return string + rtstring.substring(0, i) + rtstring;\n        }\n    }\n    return palindrome;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(string === ''){\n        return '';\n    }\n    var palindrome = string;\n    while(true){\n        if(is_palindrome(palindrome)){\n            break;\n        }\n        palindrome = palindrome.slice(0, palindrome.length - 1);\n    }\n    var prefix = string.slice(palindrome.length, string.length);\n    var reverse_prefix = prefix.split('').reverse().join('');\n    return string + reverse_prefix;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var new_string = \"\";\n    var i = string.length;\n    var pal_length = 0;\n    for(i; i>0; i--){\n        for(j=0; j<i; j++){\n            if(string[j] === string[i-1]){\n                pal_length += 1;\n            }\n            else {\n                break;\n            }\n        }\n        if(pal_length === i){\n            break;\n        }\n        else {\n            pal_length = 0;\n        }\n    }\n    new_string = string + string.slice(pal_length).split(\"\").reverse().join(\"\");\n    return new_string;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var longest_palindrome_postfix = longest_palindrome_postfix(string);\n    return string + reverse(string.substring(0, string.length - longest_palindrome_postfix.length));\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(string == \"\")\n    return \"\";\n  string += '^';\n  var first_half = string;\n  var second_half = string.split(\"\").reverse().join(\"\");\n  var z = compute_z(first_half+second_half);\n  var end = find_max(z);\n  var prefix = first_half.slice(0,first_half.length-end-1);\n  return first_half + prefix.split(\"\").reverse().join(\"\");\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// Check if the supplied string is a palindrome.\n  if (is_palindrome(string)){\n    return string;\n  }\n  // Find the longest suffix that is a palindrome.\n  var palindrome_length = 0;\n  var last_index = string.length - 1;\n  for (var i = 0; i < last_index; i++){\n    var string_length = last_index - i + 1;\n    var prefix = string.substring(0, string_length);\n    if (is_palindrome(prefix)){\n      palindrome_length = string_length;\n      break;\n    }\n  }\n  // Append to the end of the string reverse of the prefix that comes before the palindromic suffix.\n  var prefix = string.substring(0, last_index - palindrome_length + 1);\n  var reverse_prefix = reverse(prefix);\n  var result = string + reverse_prefix;\n  return result;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "// sanity checks\n    if (string.length == 0){\n        return '';\n    }\n\n    // search for the palindromic suffix\n    var suffix = string.length;\n    while (suffix > 0 && string.substring(0, suffix) != string.substring(string.length - suffix, string.length).split('').reverse().join('')){\n        suffix -= 1;\n    }\n\n    // compute the string prefix that comes before the palindromic suffix\n    var prefix = string.substring(0, string.length - suffix);\n\n    // reverse the string prefix\n    prefix = prefix.split('').reverse().join('');\n\n    // concatenate the string prefix and the original string\n    return prefix + string;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var length = string.length;\n    if(length < 2){\n        return string;\n    }\n    if(string === string.split('').reverse().join('')){\n        return string;\n    }\n    var i;\n    var palindrome = [];\n    for(i = 0; i < length; i++){\n        palindrome.push(string[i]);\n        var reversed = palindrome.slice(0).reverse();\n        var joined = palindrome.concat(reversed);\n        var joined_string = joined.join('');\n        if(joined_string === joined_string.split('').reverse().join('')){\n            return joined_string;\n        }\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "function is_palindrome(string){\n\t\tvar is_palindrome = true;\n\t\tfor(var i = 0; i < string.length/2; i++){\n\t\t\tif(string[i] != string[string.length - 1 - i]){\n\t\t\t\tis_palindrome = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn is_palindrome;\n\t}\n\tvar suffix = \"\";\n\tfor(var i = string.length; i >= 0; i--){\n\t\tif(is_palindrome(string.substring(i))){\n\t\t\tsuffix = string.substring(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tvar prefix = string.substring(0, string.length - suffix.length);\n\tvar result = \"\";\n\tfor(var i = prefix.length - 1; i >= 0; i--){\n\t\tresult += prefix[i];\n\t}\n\treturn string + result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "string = string.toLowerCase();\n    if(!is_palindrome(string)){\n        return string + reverse(string.substring(0, longest_postfix_palindrome(string)+1));\n    }\n    return string;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var longest = find_largest_palindrome(string)\n  var prefix = string.substring(0, longest.start)\n  return prefix + string + reverse_string(prefix)\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.349620076602126,
        "bleu-0": 0.04624281180712174,
        "bleu-8": 0.26824344214697593,
        "bleu-7": 0.17124664558876226,
        "bleu-16": 0.21368551352424492,
        "bleu-2": 0.07460023207951692,
        "bleu-11": 0.07460023207951692,
        "bleu-1": 0.19487928833149443,
        "bleu-10": 0.04335685095674961,
        "bleu-17": 0.17375977806620996,
        "bleu-12": 0.38797007094204516,
        "bleu-6": 0.25644714483880604,
        "bleu-18": 0.06799439918208763,
        "bleu-15": 0.3520631169555745,
        "bleu-13": 0.034720859878966503,
        "bleu-9": 0.19211994472935373,
        "bleu-4": 0.2020768671608276,
        "bleu-14": 0.04697747940934673,
        "bleu-5": 0.08452452378632885,
        "bleu-19": 0.03162913773219149,
        "codebleu-3": 0.6386200022251699,
        "codebleu-0": 0.5216529622601728,
        "codebleu-8": 0.6087595279395286,
        "codebleu-7": 0.6291103675601764,
        "codebleu-16": 0.6498457513052742,
        "codebleu-2": 0.294628893092543,
        "codebleu-11": 0.294628893092543,
        "codebleu-1": 0.6545545176947177,
        "codebleu-10": 0.5269815708794666,
        "codebleu-17": 0.6093099524691838,
        "codebleu-12": 0.7004618049925546,
        "codebleu-6": 0.6406749879812514,
        "codebleu-18": 0.2572091338980383,
        "codebleu-15": 0.6990103086555728,
        "codebleu-13": 0.5158338604258907,
        "codebleu-9": 0.6821570348531634,
        "codebleu-4": 0.6577148984799988,
        "codebleu-14": 0.5568838288003373,
        "codebleu-5": 0.36299137050110153,
        "codebleu-19": 0.23687649158290913,
        "chrf-3": 0.4018003240494842,
        "chrf-0": 0.2684581115128961,
        "chrf-8": 0.45094033649386916,
        "chrf-7": 0.30568054480341655,
        "chrf-16": 0.3779089620104071,
        "chrf-2": 0.2958501201528222,
        "chrf-11": 0.29697071784935447,
        "chrf-1": 0.36919667142401147,
        "chrf-10": 0.24833804203055362,
        "chrf-17": 0.3451826574819329,
        "chrf-12": 0.48375145531601355,
        "chrf-6": 0.34937866756854186,
        "chrf-18": 0.2986706165229718,
        "chrf-15": 0.35716679604578616,
        "chrf-13": 0.3095029255104999,
        "chrf-9": 0.4195501554862442,
        "chrf-4": 0.39191226110297217,
        "chrf-14": 0.3234861394373985,
        "chrf-5": 0.327898887482284,
        "chrf-19": 0.28013651002166673,
        "rougel-3": 0.4055944055944057,
        "rougel-0": 0.31223628691983124,
        "rougel-8": 0.48587570621468923,
        "rougel-7": 0.4222222222222222,
        "rougel-16": 0.3455497382198953,
        "rougel-2": 0.38000000000000006,
        "rougel-11": 0.38000000000000006,
        "rougel-1": 0.4114832535885168,
        "rougel-10": 0.20930232558139533,
        "rougel-17": 0.3173076923076923,
        "rougel-12": 0.6,
        "rougel-6": 0.4293193717277487,
        "rougel-18": 0.42105263157894735,
        "rougel-15": 0.5714285714285714,
        "rougel-13": 0.2895927601809955,
        "rougel-9": 0.45739910313901344,
        "rougel-4": 0.42452830188679247,
        "rougel-14": 0.301255230125523,
        "rougel-5": 0.4403669724770642,
        "rougel-19": 0.3368421052631579,
        "meteor-3": 0.4792609351432881,
        "meteor-0": 0.3898796418611478,
        "meteor-8": 0.6666608903392118,
        "meteor-7": 0.5026057142857143,
        "meteor-16": 0.4927853310413087,
        "meteor-2": 0.28372903225806456,
        "meteor-11": 0.28372903225806456,
        "meteor-1": 0.648293978070943,
        "meteor-10": 0.35967183979180556,
        "meteor-17": 0.4333831848624748,
        "meteor-12": 0.7492848478264804,
        "meteor-6": 0.6801742898992169,
        "meteor-18": 0.2843530514700232,
        "meteor-15": 0.7206947914664618,
        "meteor-13": 0.3808989119433198,
        "meteor-9": 0.6857519468667654,
        "meteor-4": 0.5794858927177429,
        "meteor-14": 0.41864295125164686,
        "meteor-5": 0.30718370290562796,
        "meteor-19": 0.1857926829268293,
        "ruby-3": 0.2564102564102564,
        "ruby-0": 0.20348837209302328,
        "ruby-8": 0.3392857142857143,
        "ruby-7": 0.29565217391304344,
        "ruby-16": 0.23015873015873012,
        "ruby-2": 0.27692307692307694,
        "ruby-11": 0.27692307692307694,
        "ruby-1": 0.26388888888888884,
        "ruby-10": 0.1295336787564767,
        "ruby-17": 0.23076923076923073,
        "ruby-12": 0.4842105263157894,
        "ruby-6": 0.2936507936507936,
        "ruby-18": 0.27692307692307694,
        "ruby-15": 0.4563106796116505,
        "ruby-13": 0.17948717948717952,
        "ruby-9": 0.31645569620253167,
        "ruby-4": 0.29931972789115646,
        "ruby-14": 0.1954022988505747,
        "ruby-5": 0.3076923076923077,
        "ruby-19": 0.24615384615384617,
        "codebertscore_f1-3": 0.7940292358398438,
        "codebertscore_f3-3": 0.7998470067977905,
        "codebertscore_f1-0": 0.7240978479385376,
        "codebertscore_f3-0": 0.7390223145484924,
        "codebertscore_f1-8": 0.8018667697906494,
        "codebertscore_f3-8": 0.8084536790847778,
        "codebertscore_f1-7": 0.7289041876792908,
        "codebertscore_f3-7": 0.7569432854652405,
        "codebertscore_f1-16": 0.7359148859977722,
        "codebertscore_f3-16": 0.7420836687088013,
        "codebertscore_f1-2": 0.7888522744178772,
        "codebertscore_f3-2": 0.7753593325614929,
        "codebertscore_f1-11": 0.7968382835388184,
        "codebertscore_f3-11": 0.7809600830078125,
        "codebertscore_f1-1": 0.7368448376655579,
        "codebertscore_f3-1": 0.7658933997154236,
        "codebertscore_f1-10": 0.6658175587654114,
        "codebertscore_f3-10": 0.6923705339431763,
        "codebertscore_f1-17": 0.7546775937080383,
        "codebertscore_f3-17": 0.7686195373535156,
        "codebertscore_f1-12": 0.7995384931564331,
        "codebertscore_f3-12": 0.8007860779762268,
        "codebertscore_f1-6": 0.7273308038711548,
        "codebertscore_f3-6": 0.7378636002540588,
        "codebertscore_f1-18": 0.7930493354797363,
        "codebertscore_f3-18": 0.7778031826019287,
        "codebertscore_f1-15": 0.7929173707962036,
        "codebertscore_f3-15": 0.7878294587135315,
        "codebertscore_f1-13": 0.732647180557251,
        "codebertscore_f3-13": 0.7549280524253845,
        "codebertscore_f1-9": 0.7731550931930542,
        "codebertscore_f3-9": 0.8042700290679932,
        "codebertscore_f1-4": 0.7403506636619568,
        "codebertscore_f3-4": 0.7390527725219727,
        "codebertscore_f1-14": 0.7460256218910217,
        "codebertscore_f3-14": 0.7608495354652405,
        "codebertscore_f1-5": 0.7941373586654663,
        "codebertscore_f3-5": 0.7698620557785034,
        "codebertscore_f1-19": 0.7943850159645081,
        "codebertscore_f3-19": 0.771962583065033,
        "codebertscore_s_f1-3": 0.8034825325012207,
        "codebertscore_s_f3-3": 0.8082870244979858,
        "codebertscore_s_f1-0": 0.7460345029830933,
        "codebertscore_s_f3-0": 0.7560648322105408,
        "codebertscore_s_f1-8": 0.8080888986587524,
        "codebertscore_s_f3-8": 0.8140097856521606,
        "codebertscore_s_f1-7": 0.749739408493042,
        "codebertscore_s_f3-7": 0.7722880840301514,
        "codebertscore_s_f1-16": 0.7496095299720764,
        "codebertscore_s_f3-16": 0.7541238069534302,
        "codebertscore_s_f1-2": 0.794390857219696,
        "codebertscore_s_f3-2": 0.775977611541748,
        "codebertscore_s_f1-11": 0.800223708152771,
        "codebertscore_s_f3-11": 0.783962070941925,
        "codebertscore_s_f1-1": 0.7575662732124329,
        "codebertscore_s_f3-1": 0.7873451113700867,
        "codebertscore_s_f1-10": 0.6859092712402344,
        "codebertscore_s_f3-10": 0.7052671909332275,
        "codebertscore_s_f1-17": 0.7648106217384338,
        "codebertscore_s_f3-17": 0.7780972123146057,
        "codebertscore_s_f1-12": 0.8088212013244629,
        "codebertscore_s_f3-12": 0.8079039454460144,
        "codebertscore_s_f1-6": 0.7434570789337158,
        "codebertscore_s_f3-6": 0.7527422308921814,
        "codebertscore_s_f1-18": 0.7916274666786194,
        "codebertscore_s_f3-18": 0.7764538526535034,
        "codebertscore_s_f1-15": 0.7898221611976624,
        "codebertscore_s_f3-15": 0.7866889238357544,
        "codebertscore_s_f1-13": 0.7497938871383667,
        "codebertscore_s_f3-13": 0.7659767270088196,
        "codebertscore_s_f1-9": 0.78755122423172,
        "codebertscore_s_f3-9": 0.816961944103241,
        "codebertscore_s_f1-4": 0.7515501976013184,
        "codebertscore_s_f3-4": 0.7471143007278442,
        "codebertscore_s_f1-14": 0.7594344615936279,
        "codebertscore_s_f3-14": 0.7723966836929321,
        "codebertscore_s_f1-5": 0.8043002486228943,
        "codebertscore_s_f3-5": 0.7773011922836304,
        "codebertscore_s_f1-19": 0.787510335445404,
        "codebertscore_s_f3-19": 0.7626917362213135,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 3,
        "raw_gpt35_nsnr-10": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 2,
        "raw_gpt35_nsnr-18": "2",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
        "task_id": "151",
        "3": "if (lst.length === 0) return 0;\n    var sum_of_squares = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i] % 2 === 1 && lst[i] >= 0 && lst[i] % 1 === 0){\n            sum_of_squares += Math.pow(lst[i], 2);\n        }\n    }\n    return sum_of_squares;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let sum=0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && lst[i] > 0 && lst[i] % 1 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 1){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 != 0 && lst[i] > 0 && lst[i] === parseInt(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var squareSum = 0;\n    if(lst.length === 0){\n        return 0;\n    }\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && lst[i] >= 0 && lst[i] % 1 === 0){\n            squareSum += lst[i] * lst[i];\n        }\n    }\n    return squareSum;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var total = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      total += lst[i] * lst[i];\n    }\n  }\n  return total;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "// Write your code here\n    if(lst.length < 1){\n        return 0;\n    }\n    else{\n        return lst.map(x => is_odd(x) ? Math.pow(x, 2) : 0).reduce((x, y) => x + y, 0);\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0){\n            if(lst[i] >= 0){\n                sum += lst[i] ** 2;\n            }\n        }\n    }\n    return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let sum_squares = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (typeof lst[i] === 'number' && lst[i] % 2 != 0 && lst[i] >= 0) {\n            sum_squares += lst[i] ** 2;\n        }\n    }\n    return sum_squares;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "// Fill this in.\n  var odd_list = [];\n  for (var i = 0; i < lst.length; i++) {\n      if (typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 === 1) {\n          odd_list.push(lst[i]);\n      }\n  }\n  console.log(odd_list);\n  if (odd_list.length === 0) {\n      return 0;\n  }\n  var sum = 0;\n  for (var j = 0; j < odd_list.length; j++) {\n      sum += odd_list[j] * odd_list[j];\n  }\n  return sum;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "}",
        "grade-15": {
            "execution": 0
        },
        "13": "var new_lst = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      new_lst.push(lst[i] * lst[i]);\n    }\n  }\n  return new_lst.reduce(function(a, b){return a + b;});\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var lst = []\n    if(lst.length == 0){\n        return 0\n    }\n    var oddList = lst.filter(function(num){\n        return (num % 2 != 0) && (num > 0) && (Number.isInteger(num))\n    })\n    var doubleDifference = oddList.map(function(x){\n        return x * x\n    })\n    var total = doubleDifference.reduce(function(x,y){\n        return x + y\n    })\n    return total\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (lst.length == 0) {\n        return 0;\n    }\n    sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (typeof lst[i] == \"number\" && lst[i] >= 0 && lst[i] % 2 != 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return lst.reduce((acc,v)=>(v%2==1&&Number.isInteger(v)&&v>0?acc+v*v:acc),0);\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return (lst.length == 0) ? 0 : lst.map(n => (typeof n === 'number' && (n >= 0) && (n % 1 === 0)) ? Math.pow(n, 2) : 0).reduce((prev, curr) => prev + curr);\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.4515199967384929,
        "bleu-0": 0.5309957293459442,
        "bleu-8": 0.5302899127892762,
        "bleu-7": 0.5287554817445982,
        "bleu-16": 0.4425386103083474,
        "bleu-2": 0.6404856190053478,
        "bleu-11": 0.5589512961701334,
        "bleu-1": 0.6404856190053478,
        "bleu-10": 0.061348355535526596,
        "bleu-17": 0.5484456251618013,
        "bleu-12": 0.5480096106588801,
        "bleu-6": 0.7636520019104043,
        "bleu-18": 0.2818741036753931,
        "bleu-15": 2.3802664086944018e-26,
        "bleu-13": 0.48498108929890277,
        "bleu-9": 0.05379228161757619,
        "bleu-4": 0.6404856190053478,
        "bleu-14": 0.45614623796643855,
        "bleu-5": 0.1322572751605926,
        "bleu-19": 0.04286975247421293,
        "codebleu-3": 0.7456781693910559,
        "codebleu-0": 0.8027694407297706,
        "codebleu-8": 0.6618747979179143,
        "codebleu-7": 0.8134527110097205,
        "codebleu-16": 0.7778686354871209,
        "codebleu-2": 0.717727997834103,
        "codebleu-11": 0.808327394677593,
        "codebleu-1": 0.6941985860693972,
        "codebleu-10": 0.42611655773420476,
        "codebleu-17": 0.6930415911217381,
        "codebleu-12": 0.7742325385956521,
        "codebleu-6": 0.8862894948717776,
        "codebleu-18": 0.7510912177149619,
        "codebleu-15": 0.00784313725490196,
        "codebleu-13": 0.6958356281729108,
        "codebleu-9": 0.47922113289760343,
        "codebleu-4": 0.717727997834103,
        "codebleu-14": 0.7856648958702235,
        "codebleu-5": 0.33435164348093027,
        "codebleu-19": 0.3753267973856209,
        "chrf-3": 0.5795024231755098,
        "chrf-0": 0.6767315642177387,
        "chrf-8": 0.5450031102672485,
        "chrf-7": 0.6575539182467519,
        "chrf-16": 0.610886190329126,
        "chrf-2": 0.6447655957395372,
        "chrf-11": 0.6554600057446138,
        "chrf-1": 0.6452064195725441,
        "chrf-10": 0.2310115747131954,
        "chrf-17": 0.5891646195375704,
        "chrf-12": 0.629327467290667,
        "chrf-6": 0.7614324132034471,
        "chrf-18": 0.4631219647817556,
        "chrf-15": 0.014326647564469915,
        "chrf-13": 0.5822409163521639,
        "chrf-9": 0.23027334078212025,
        "chrf-4": 0.6447655957395372,
        "chrf-14": 0.6150042466679465,
        "chrf-5": 0.1631266708603773,
        "chrf-19": 0.19878153108416396,
        "rougel-3": 0.6578947368421053,
        "rougel-0": 0.7391304347826088,
        "rougel-8": 0.717948717948718,
        "rougel-7": 0.7571428571428571,
        "rougel-16": 0.6967741935483871,
        "rougel-2": 0.817391304347826,
        "rougel-11": 0.7851851851851853,
        "rougel-1": 0.817391304347826,
        "rougel-10": 0.22580645161290322,
        "rougel-17": 0.752,
        "rougel-12": 0.7555555555555556,
        "rougel-6": 0.894308943089431,
        "rougel-18": 0.45999999999999996,
        "rougel-15": 0.03278688524590164,
        "rougel-13": 0.6518518518518519,
        "rougel-9": 0.28048780487804875,
        "rougel-4": 0.817391304347826,
        "rougel-14": 0.6979865771812079,
        "rougel-5": 0.29906542056074764,
        "rougel-19": 0.22058823529411764,
        "meteor-3": 0.7736044911531316,
        "meteor-0": 0.8292906058054291,
        "meteor-8": 0.5877222469110481,
        "meteor-7": 0.8220767795254598,
        "meteor-16": 0.8254701633370208,
        "meteor-2": 0.7594827881356254,
        "meteor-11": 0.8027702499247215,
        "meteor-1": 0.7594827881356254,
        "meteor-10": 0.2474359323758392,
        "meteor-17": 0.7059049299816346,
        "meteor-12": 0.8700612867098059,
        "meteor-6": 0.9093650206268931,
        "meteor-18": 0.5873237724842002,
        "meteor-15": 0.009242144177449167,
        "meteor-13": 0.6195718181717805,
        "meteor-9": 0.31992710846465794,
        "meteor-4": 0.7594827881356254,
        "meteor-14": 0.8333442825421433,
        "meteor-5": 0.2540759147929661,
        "meteor-19": 0.27598603319757165,
        "ruby-3": 0.5326086956521738,
        "ruby-0": 0.641025641025641,
        "ruby-8": 0.6,
        "ruby-7": 0.6625,
        "ruby-16": 0.5684210526315789,
        "ruby-2": 0.7333333333333334,
        "ruby-11": 0.7066666666666667,
        "ruby-1": 0.7333333333333334,
        "ruby-10": 0.078125,
        "ruby-17": 0.7230769230769231,
        "ruby-12": 0.6666666666666667,
        "ruby-6": 0.873015873015873,
        "ruby-18": 0.3285714285714286,
        "ruby-15": 0.01666666666666672,
        "ruby-13": 0.48,
        "ruby-9": 0.16346153846153844,
        "ruby-4": 0.7333333333333334,
        "ruby-14": 0.5617977528089888,
        "ruby-5": 0.19999999999999996,
        "ruby-19": 0.10526315789473684,
        "codebertscore_f1-3": 0.8737544417381287,
        "codebertscore_f3-3": 0.8958811163902283,
        "codebertscore_f1-0": 0.9254724383354187,
        "codebertscore_f3-0": 0.9329071640968323,
        "codebertscore_f1-8": 0.9165984392166138,
        "codebertscore_f3-8": 0.918330729007721,
        "codebertscore_f1-7": 0.9469449520111084,
        "codebertscore_f3-7": 0.9524239897727966,
        "codebertscore_f1-16": 0.9085813760757446,
        "codebertscore_f3-16": 0.916849672794342,
        "codebertscore_f1-2": 0.9540740251541138,
        "codebertscore_f3-2": 0.9472637176513672,
        "codebertscore_f1-11": 0.9371529221534729,
        "codebertscore_f3-11": 0.9466736912727356,
        "codebertscore_f1-1": 0.9532642960548401,
        "codebertscore_f3-1": 0.9464672803878784,
        "codebertscore_f1-10": 0.7665533423423767,
        "codebertscore_f3-10": 0.7864875197410583,
        "codebertscore_f1-17": 0.9221132397651672,
        "codebertscore_f3-17": 0.9186778664588928,
        "codebertscore_f1-12": 0.9070065021514893,
        "codebertscore_f3-12": 0.9262248277664185,
        "codebertscore_f1-6": 0.9698903560638428,
        "codebertscore_f3-6": 0.9698903560638428,
        "codebertscore_f1-18": 0.8572023510932922,
        "codebertscore_f3-18": 0.8995814919471741,
        "codebertscore_f1-15": 0.0,
        "codebertscore_f3-15": 0.0,
        "codebertscore_f1-13": 0.894822895526886,
        "codebertscore_f3-13": 0.9134844541549683,
        "codebertscore_f1-9": 0.7689265012741089,
        "codebertscore_f3-9": 0.7955079674720764,
        "codebertscore_f1-4": 0.9511539936065674,
        "codebertscore_f3-4": 0.9444044232368469,
        "codebertscore_f1-14": 0.9047253131866455,
        "codebertscore_f3-14": 0.9124869704246521,
        "codebertscore_f1-5": 0.7878096699714661,
        "codebertscore_f3-5": 0.7942678928375244,
        "codebertscore_f1-19": 0.7785146236419678,
        "codebertscore_f3-19": 0.7911925911903381,
        "codebertscore_s_f1-3": 0.879658579826355,
        "codebertscore_s_f3-3": 0.9065880179405212,
        "codebertscore_s_f1-0": 0.925619900226593,
        "codebertscore_s_f3-0": 0.9346878528594971,
        "codebertscore_s_f1-8": 0.9169268012046814,
        "codebertscore_s_f3-8": 0.919843316078186,
        "codebertscore_s_f1-7": 0.946054220199585,
        "codebertscore_s_f3-7": 0.9522820115089417,
        "codebertscore_s_f1-16": 0.9057636857032776,
        "codebertscore_s_f3-16": 0.915002703666687,
        "codebertscore_s_f1-2": 0.9517262578010559,
        "codebertscore_s_f3-2": 0.9448451995849609,
        "codebertscore_s_f1-11": 0.9387955069541931,
        "codebertscore_s_f3-11": 0.9482143521308899,
        "codebertscore_s_f1-1": 0.9504261016845703,
        "codebertscore_s_f3-1": 0.9435839653015137,
        "codebertscore_s_f1-10": 0.7697810530662537,
        "codebertscore_s_f3-10": 0.7946757078170776,
        "codebertscore_s_f1-17": 0.9209020733833313,
        "codebertscore_s_f3-17": 0.919148325920105,
        "codebertscore_s_f1-12": 0.9084743857383728,
        "codebertscore_s_f3-12": 0.9295937418937683,
        "codebertscore_s_f1-6": 0.9689683318138123,
        "codebertscore_s_f3-6": 0.9689683318138123,
        "codebertscore_s_f1-18": 0.8701509237289429,
        "codebertscore_s_f3-18": 0.913979709148407,
        "codebertscore_s_f1-15": 0.0,
        "codebertscore_s_f3-15": 0.0,
        "codebertscore_s_f1-13": 0.8970575928688049,
        "codebertscore_s_f3-13": 0.9154760241508484,
        "codebertscore_s_f1-9": 0.7819558382034302,
        "codebertscore_s_f3-9": 0.8115240931510925,
        "codebertscore_s_f1-4": 0.949312150478363,
        "codebertscore_s_f3-4": 0.9423419237136841,
        "codebertscore_s_f1-14": 0.9106113910675049,
        "codebertscore_s_f3-14": 0.9194784164428711,
        "codebertscore_s_f1-5": 0.8022654056549072,
        "codebertscore_s_f3-5": 0.8082596063613892,
        "codebertscore_s_f1-19": 0.7916171550750732,
        "codebertscore_s_f3-19": 0.806771993637085,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 0,
        "raw_gpt35_nsnr-15": "0",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s){\n",
        "snippet": [
            "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n"
        ],
        "simplified": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
        "task_id": "161",
        "3": "let str = \"\";\n    for(let i = 0; i < s.length; i++){\n      if(s[i] == s[i].toUpperCase()){\n        str += s[i].toLowerCase();\n      } else if(s[i] == s[i].toLowerCase()){\n        str += s[i].toUpperCase();\n      } else {\n        str += s[i];\n      }\n    }\n    return str;\n  }\n  console.log(solve(\"1234\"));\n  console.log(solve(\"ab\"));\n  console.log(solve(\"#a@C\"));\n  console.log(solve(\"#a@C.dE\"));",
        "grade-3": {
            "execution": 0
        },
        "0": "let str='';\n    for(let i=0;i<s.length;i++){\n        if((s[i]>='a' && s[i]<='z') || (s[i]>='A' && s[i]<='Z')){\n            str+=s[i].toUpperCase()\n        }else{\n            str+=s[i]\n        }\n    }\n    return str\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return s.split('').map(e => e.charCodeAt() >=97 && e.charCodeAt() <= 122 ? String.fromCharCode(e.charCodeAt() - 32) : e.charCodeAt() >= 65 && e.charCodeAt() <= 90 ? String.fromCharCode(e.charCodeAt() + 32) : e).join('');\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(s.match(/[a-z]/i))\n    {\n        return s.split('').map(x => /[a-z]/i.test(x) ? (x.toUpperCase() === x ? x.toLowerCase() : x.toUpperCase()) : x).join('');\n    }\n    else{\n        return s.split('').reverse().join('');\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return s.split('').map(el => el.charCodeAt(0) >= 97 && el.charCodeAt(0) <= 122 ? el.toUpperCase() : el.toLowerCase()).join('');\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let tempStr = '';\n  for (let index = 0; index < s.length; index++) {\n    if(s[index] == s[index].toUpperCase()){\n      tempStr += s[index].toLowerCase();\n    }else{\n      tempStr += s[index].toUpperCase();\n    }\n  }\n  return tempStr.split('').reverse().join('');\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s.match(/[a-z]/ig)){\n        return s.split('').map(v => v.match(/[a-z]/i) ? v === v.toUpperCase() ? v.toLowerCase() : v.toUpperCase() : v).join('');\n    }else{\n        return s.split('').reverse().join('');\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let reverseCase = s.split('').map(i => {\n    if(i.toLowerCase() === i) return i.toUpperCase();\n    else if(i.toUpperCase() === i) return i.toLowerCase();\n    else return i;\n  }).join('');\n  if(!isNaN(reverseCase)) reverseCase = reverseCase.split('').reverse().join('');\n  return reverseCase;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let isLowerCase = s.toLowerCase() == s;\nreturn isLowerCase ? s.toUpperCase() : s.toLowerCase();\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return s.split('').map(x => x.match(/[a-z]/i) ? x == x.toUpperCase() ? x.toLowerCase() : x.toUpperCase() : x).join('');\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return s.replace(/([a-z])|([A-Z])/g, function(match,p1,p2) {\n    return p1 ? match.toUpperCase() : match.toLowerCase();\n  }).split('').reverse().join('');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let res = [];\n  for (let i=0; i<s.length; i++) {\n    let letter = s[i];\n    if (/[a-z]/.test(letter)) {\n      res.push(letter.toUpperCase());\n    } else if (/[A-Z]/.test(letter)) {\n      res.push(letter.toLowerCase());\n    } else {\n      res.push(letter);\n    }\n  }\n  return res.join('');\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let nums = /\\d/;\n  let arr = s.split('');\n  let newArr = [];\n  let answer = '';\n  for(let i = 0; i < arr.length; i++){\n    if(nums.test(arr[i])){\n      newArr.push(arr[i]);\n    }\n  }\n  if(newArr.length === arr.length){\n    for(let i = arr.length - 1; i >= 0; i--){\n      answer += arr[i];\n    }\n    return answer;\n  }\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === arr[i].toUpperCase()){\n      arr[i] = arr[i].toLowerCase();\n    } else {\n      arr[i] = arr[i].toUpperCase();\n    }\n  }\n  return arr.join('');\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return s.split('').reverse().map(x => x.toLowerCase() != x ? x.toUpperCase() : x.toLowerCase()).join('');\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//..\n  return !/[a-z]/i.test(s) ? s.split('').reverse().join('') : s.split('').map(v => /[a-z]/i.test(v) ? v.toUpperCase() == v ? v.toLowerCase() : v.toUpperCase() : v).join('');\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if(s.length == 0) return '';\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    if(s[i] == s[i].toUpperCase()){\n      result += s[i].toLowerCase();\n    }else if(s[i] == s[i].toLowerCase()){\n      result += s[i].toUpperCase();\n    }else{\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let sArr = s.split('');\n  let ans = \"\";\n  for(let char of sArr){\n    if(char !== char.toLowerCase()){\n      ans+=char.toLowerCase();\n    } else if(char !== char.toUpperCase()){\n      ans+=char.toUpperCase();\n    } else {\n      ans+=char;\n    }\n  }\n  if(ans == s){\n    return s.split('').reverse().join('');\n  }\n  return ans;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var result = s.split('').map(function(x){\n    if (x.toLowerCase() === x.toUpperCase()) {\n      return x;\n    }\n    if (x === x.toLowerCase()) {\n      return x.toUpperCase();\n    }\n    if (x === x.toUpperCase()) {\n      return x.toLowerCase();\n    }\n  }).join('');\n  return result;\n}\nsolve(\"ab\");",
        "grade-14": {
            "execution": 0
        },
        "5": "if(s.match(/[a-z]/ig))\n        return s.split('').map(e => {\n            if(e === e.toUpperCase())\n                return e.toLowerCase();\n            else\n                return e.toUpperCase();\n        }).join('');\n    else\n        return s.split('').reverse().join('');\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "//code\n    if(s.length === 0){\n        return \"\";\n    }\n    else{\n        let firstHalf = \"\";\n        let secondHalf = \"\";\n        let midOfString = s.length / 2;\n        for(let i = 0; i < s.length; i++){\n            if(i < midOfString){\n                firstHalf += s[i];\n            }\n            else{\n                secondHalf += s[i];\n            }\n        }\n        let result = \"\";\n        for(let i = secondHalf.length - 1; i >= 0; i--){\n            result += secondHalf[i];\n        }\n        return result + firstHalf;\n    }\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.2074318367352915,
        "bleu-0": 0.1947922093952954,
        "bleu-8": 0.1345000267183728,
        "bleu-7": 0.030104868047715113,
        "bleu-16": 0.04590383609223173,
        "bleu-2": 0.09044005938058869,
        "bleu-11": 0.029723478424243308,
        "bleu-1": 0.02821756345463091,
        "bleu-10": 0.0025332963209934445,
        "bleu-17": 0.009349523426811075,
        "bleu-12": 0.0162885156906077,
        "bleu-6": 0.2015152999877067,
        "bleu-18": 0.22110113704294626,
        "bleu-15": 0.006241890624666002,
        "bleu-13": 0.0142643398273504,
        "bleu-9": 0.2349675876644497,
        "bleu-4": 0.08155489830706752,
        "bleu-14": 0.034959755917440334,
        "bleu-5": 0.0155600976431269,
        "bleu-19": 0.2804776153944048,
        "codebleu-3": 0.5024037863657096,
        "codebleu-0": 0.3577666814926297,
        "codebleu-8": 0.29735760735713157,
        "codebleu-7": 0.31420360151476145,
        "codebleu-16": 0.19841983690426182,
        "codebleu-2": 0.3518386310268188,
        "codebleu-11": 0.29620407398512966,
        "codebleu-1": 0.3193094223769213,
        "codebleu-10": 0.09296918484352423,
        "codebleu-17": 0.18640701486979364,
        "codebleu-12": 0.21017703395706783,
        "codebleu-6": 0.43632670199109125,
        "codebleu-18": 0.6073354635874427,
        "codebleu-15": 0.15572254661229532,
        "codebleu-13": 0.2504930742802495,
        "codebleu-9": 0.46321023515269577,
        "codebleu-4": 0.4190826040668495,
        "codebleu-14": 0.32560123852320544,
        "codebleu-5": 0.2576920303654497,
        "codebleu-19": 0.5523148082994793,
        "chrf-3": 0.25495700541219024,
        "chrf-0": 0.24007893000291322,
        "chrf-8": 0.2519116913273131,
        "chrf-7": 0.1413564303580999,
        "chrf-16": 0.1754367341382598,
        "chrf-2": 0.21880022186752415,
        "chrf-11": 0.1413564303580999,
        "chrf-1": 0.1497041347681077,
        "chrf-10": 0.07492095921546527,
        "chrf-17": 0.08804564821577472,
        "chrf-12": 0.1326327543903353,
        "chrf-6": 0.2835105626993399,
        "chrf-18": 0.3422178094285387,
        "chrf-15": 0.0839445135946864,
        "chrf-13": 0.09702249935646519,
        "chrf-9": 0.30685767293466104,
        "chrf-4": 0.20493883617235573,
        "chrf-14": 0.15529122891544733,
        "chrf-5": 0.13760100889642987,
        "chrf-19": 0.35440204048573704,
        "rougel-3": 0.36874999999999997,
        "rougel-0": 0.44881889763779526,
        "rougel-8": 0.2890625,
        "rougel-7": 0.24615384615384617,
        "rougel-16": 0.2511627906976744,
        "rougel-2": 0.3715415019762846,
        "rougel-11": 0.23255813953488372,
        "rougel-1": 0.291044776119403,
        "rougel-10": 0.16842105263157894,
        "rougel-17": 0.19354838709677424,
        "rougel-12": 0.19642857142857145,
        "rougel-6": 0.37593984962406013,
        "rougel-18": 0.3977900552486187,
        "rougel-15": 0.19512195121951217,
        "rougel-13": 0.20472440944881892,
        "rougel-9": 0.4420289855072464,
        "rougel-4": 0.36363636363636365,
        "rougel-14": 0.28679245283018867,
        "rougel-5": 0.24390243902439027,
        "rougel-19": 0.4217687074829932,
        "meteor-3": 0.2794637044270834,
        "meteor-0": 0.30261904761904757,
        "meteor-8": 0.2570596029464607,
        "meteor-7": 0.19464845835463762,
        "meteor-16": 0.2084452298860532,
        "meteor-2": 0.245848585539838,
        "meteor-11": 0.1914831029511533,
        "meteor-1": 0.2149443449109166,
        "meteor-10": 0.06756756756756756,
        "meteor-17": 0.14188301978153436,
        "meteor-12": 0.14819971999026052,
        "meteor-6": 0.2695422821020908,
        "meteor-18": 0.3929325744047471,
        "meteor-15": 0.13416608022519352,
        "meteor-13": 0.1554591836734694,
        "meteor-9": 0.3356059249474754,
        "meteor-4": 0.2693420200542328,
        "meteor-14": 0.21103733713456874,
        "meteor-5": 0.17352012295012748,
        "meteor-19": 0.4589064710895846,
        "ruby-3": 0.23809523809523814,
        "ruby-0": 0.2894736842105263,
        "ruby-8": 0.1842105263157895,
        "ruby-7": 0.15131578947368418,
        "ruby-16": 0.16447368421052633,
        "ruby-2": 0.24342105263157898,
        "ruby-11": 0.14473684210526316,
        "ruby-1": 0.17105263157894735,
        "ruby-10": 0.09868421052631582,
        "ruby-17": 0.125,
        "ruby-12": 0.125,
        "ruby-6": 0.26973684210526316,
        "ruby-18": 0.2571428571428571,
        "ruby-15": 0.125,
        "ruby-13": 0.13157894736842102,
        "ruby-9": 0.26973684210526316,
        "ruby-4": 0.23026315789473684,
        "ruby-14": 0.1842105263157895,
        "ruby-5": 0.15131578947368418,
        "ruby-19": 0.17105263157894735,
        "codebertscore_f1-3": 0.7797295451164246,
        "codebertscore_f3-3": 0.7828367948532104,
        "codebertscore_f1-0": 0.8018344044685364,
        "codebertscore_f3-0": 0.7755909562110901,
        "codebertscore_f1-8": 0.7620965838432312,
        "codebertscore_f3-8": 0.7176976799964905,
        "codebertscore_f1-7": 0.684173583984375,
        "codebertscore_f3-7": 0.6753202676773071,
        "codebertscore_f1-16": 0.708189845085144,
        "codebertscore_f3-16": 0.6761208772659302,
        "codebertscore_f1-2": 0.766334593296051,
        "codebertscore_f3-2": 0.7486608028411865,
        "codebertscore_f1-11": 0.6767071485519409,
        "codebertscore_f3-11": 0.6666225790977478,
        "codebertscore_f1-1": 0.7067184448242188,
        "codebertscore_f3-1": 0.6957486271858215,
        "codebertscore_f1-10": 0.6667037010192871,
        "codebertscore_f3-10": 0.6433736085891724,
        "codebertscore_f1-17": 0.6596471667289734,
        "codebertscore_f3-17": 0.6404544711112976,
        "codebertscore_f1-12": 0.6445733308792114,
        "codebertscore_f3-12": 0.6354383826255798,
        "codebertscore_f1-6": 0.7808555960655212,
        "codebertscore_f3-6": 0.7757439613342285,
        "codebertscore_f1-18": 0.7798763513565063,
        "codebertscore_f3-18": 0.7824210524559021,
        "codebertscore_f1-15": 0.6558032631874084,
        "codebertscore_f3-15": 0.6273215413093567,
        "codebertscore_f1-13": 0.6670459508895874,
        "codebertscore_f3-13": 0.6546322107315063,
        "codebertscore_f1-9": 0.7972407937049866,
        "codebertscore_f3-9": 0.7792680859565735,
        "codebertscore_f1-4": 0.7490702867507935,
        "codebertscore_f3-4": 0.7372889518737793,
        "codebertscore_f1-14": 0.7050389051437378,
        "codebertscore_f3-14": 0.68817538022995,
        "codebertscore_f1-5": 0.6851491332054138,
        "codebertscore_f3-5": 0.6745972633361816,
        "codebertscore_f1-19": 0.7769116163253784,
        "codebertscore_f3-19": 0.7682325839996338,
        "codebertscore_s_f1-3": 0.7771206498146057,
        "codebertscore_s_f3-3": 0.7837912440299988,
        "codebertscore_s_f1-0": 0.8096893429756165,
        "codebertscore_s_f3-0": 0.7848370671272278,
        "codebertscore_s_f1-8": 0.7778419852256775,
        "codebertscore_s_f3-8": 0.734408974647522,
        "codebertscore_s_f1-7": 0.6965228915214539,
        "codebertscore_s_f3-7": 0.6881178617477417,
        "codebertscore_s_f1-16": 0.7074957489967346,
        "codebertscore_s_f3-16": 0.67133629322052,
        "codebertscore_s_f1-2": 0.7701693773269653,
        "codebertscore_s_f3-2": 0.753506600856781,
        "codebertscore_s_f1-11": 0.6917888522148132,
        "codebertscore_s_f3-11": 0.6831689476966858,
        "codebertscore_s_f1-1": 0.7154658436775208,
        "codebertscore_s_f3-1": 0.7080948352813721,
        "codebertscore_s_f1-10": 0.6656481027603149,
        "codebertscore_s_f3-10": 0.639694333076477,
        "codebertscore_s_f1-17": 0.6639227271080017,
        "codebertscore_s_f3-17": 0.6438264846801758,
        "codebertscore_s_f1-12": 0.6575037837028503,
        "codebertscore_s_f3-12": 0.6468292474746704,
        "codebertscore_s_f1-6": 0.7849299311637878,
        "codebertscore_s_f3-6": 0.7798306345939636,
        "codebertscore_s_f1-18": 0.7860031723976135,
        "codebertscore_s_f3-18": 0.7887315154075623,
        "codebertscore_s_f1-15": 0.654825747013092,
        "codebertscore_s_f3-15": 0.6261091232299805,
        "codebertscore_s_f1-13": 0.6769281029701233,
        "codebertscore_s_f3-13": 0.665473222732544,
        "codebertscore_s_f1-9": 0.8005790710449219,
        "codebertscore_s_f3-9": 0.7858695387840271,
        "codebertscore_s_f1-4": 0.7512226700782776,
        "codebertscore_s_f3-4": 0.7373013496398926,
        "codebertscore_s_f1-14": 0.7126648426055908,
        "codebertscore_s_f3-14": 0.6988668441772461,
        "codebertscore_s_f1-5": 0.6931796669960022,
        "codebertscore_s_f3-5": 0.6816256642341614,
        "codebertscore_s_f1-19": 0.7826921343803406,
        "codebertscore_s_f3-19": 0.7764987349510193,
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-2": 2,
        "raw_gpt35_nsnr-2": "2",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 2,
        "raw_gpt35_nsnr-10": "2",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-18": 2,
        "raw_gpt35_nsnr-18": "2",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 2,
        "raw_gpt35_nsnr-19": "2",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 0,
        "raw_gpt35_nswr-10": "Score: 1",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n",
        "snippet": [
            "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "task_id": "104",
        "3": "var counter = 0;\n  var result = [];\n  for(var i = 0; i < x.length; i++){\n    for(var j = 0; j < x[i].toString().length; j++){\n      if(x[i].toString()[j] % 2 === 0){\n        counter++;\n      }\n    }\n    if(counter === 0){\n      result.push(x[i]);\n    }\n    counter = 0;\n  }\n  return result.sort();\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var evens = [];\n  for (var i = 0; i < x.length; i++) {\n    if (x[i] % 2 !== 0) {\n      evens.push(x[i]);\n    }\n  }\n  return evens;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(i=0; i<10; i++){\n        if(x[i]%2 != 0){\n            return x;\n        }\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let res = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num % 2 == 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            res.push(x[i]);\n        }\n    }\n    return res.sort((a, b) => a - b);\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "// Write your code here\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var ret = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar count = 0;\n\tvar even = false;\n\tvar len = x.length;\n\tvar len2 = 0;\n\tvar len3 = 0;\n\tvar temp = 0;\n\tfor(i = 0; i < len; i++){\n\t\tcount = 0;\n\t\teven = false;\n\t\tlen2 = 0;\n\t\ttemp = x[i];\n\t\twhile(temp > 0){\n\t\t\ttemp = temp/10;\n\t\t\tlen2++;\n\t\t}\n\t\tfor(j = 0; j < len2; j++){\n\t\t\ttemp = x[i]%10;\n\t\t\tif(temp%2 === 0){\n\t\t\t\teven = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] = x[i]/10;\n\t\t}\n\t\tif(even === false){\n\t\t\tret.push(x[i]);\n\t\t}\n\t}\n\tlen3 = ret.length;\n\tfor(i = 0; i < len3; i++){\n\t\tfor(j = 0; j < len3; j++){\n\t\t\tif(ret[i] < ret[j]){\n\t\t\t\ttemp = ret[i];\n\t\t\t\tret[i] = ret[j];\n\t\t\t\tret[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var result = [];\n  var resultEven = [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0){\n      resultEven.push(x[i]);\n    }\n    else{\n      result.push(x[i]);\n    }\n  }\n  return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var i = 0;\n    var is_in = false;\n    var new_x = [];\n    var count = 0;\n    while(i < x.length){\n        count = 0;\n        while(count < x[i].toString().length){\n            if(x[i].toString()[count] % 2 === 0){\n                is_in = true;\n            }\n            count += 1;\n        }\n        if(is_in === false){\n            new_x.push(x[i]);\n        }\n        is_in = false;\n        i += 1;\n    }\n    new_x.sort(function(a, b){return a-b});\n    return new_x;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var odds = [];\n    for(i = 0; i < x.length; i++){\n        var digits = x[i].toString().split('');\n        for(j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                break;\n            }\n            if(j === digits.length - 1){\n                odds.push(x[i]);\n            }\n        }\n    }\n    return odds.sort(function(a, b){return a - b});\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var unique =[];\n    for(var i=0; i<x.length; i++){\n        var str = x[i].toString();\n        var flag = true;\n        for(var j=0; j<str.length; j++){\n            if(str[j]%2 == 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            unique.push(x[i]);\n        }\n    }\n    return unique.sort();\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let a = [];\n     x.forEach(function(v){\n          if(a.indexOf(v)===-1 && v.toString().split('').every(function(m){\n               return m%2!==0;\n          })){\n               a.push(v);\n          }\n     });\n     return a.sort(function(x,y){\n          return x-y;\n     });\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var y = [];\n\tfor (var i = 0; i < x.length; i++) {\n\t\tvar n = x[i].toString();\n\t\tif (n.length > 1){\n\t\t\tif (n.includes(\"2\") || n.includes(\"4\") || n.includes(\"6\") || n.includes(\"8\") || n.includes(\"0\")){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ty.push(n);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (n == \"2\" || n == \"4\" || n == \"6\" || n == \"8\" || n == \"0\"){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ty.push(n);\n\t\t\t}\n\t\t}\n\t}\n\treturn y;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var y = [];\n    for (var i = 0; i < x.length; i++){\n        var found = false;\n        var num = x[i].toString();\n        for (var j = 0; j < num.length; j++){\n            if (num[j] == \"2\" || num[j] == \"4\" || num[j] == \"6\" || num[j] == \"8\" || num[j] == \"0\"){\n                found = true;\n            }\n        }\n        if (found == false){\n            y.push(x[i]);\n        }\n    }\n    return y;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var output = [];\n  for (var i = 0; i < x.length; i++) {\n    var numString = x[i].toString();\n    var even_count = 0;\n    for (var j = 0; j < numString.length; j++) {\n      if (numString[j] % 2 === 0) {\n        even_count++;\n      }\n    }\n    if (even_count === 0) {\n      output.push(x[i]);\n    }\n  }\n  return output.sort(function(a, b){return a-b});\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "return x.filter(function(x){\n    return !x.toString().split('').some(function(x){\n      return x % 2 === 0;\n    });\n  });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "function digits(n){\n\t\treturn n.toString().split('');\n\t}\n\tfunction unique(n){\n\t\tvar unique = true;\n\t\tvar d = digits(n);\n\t\tfor(var i = 0; i < d.length; i++){\n\t\t\tif(d[i] % 2 === 0){\n\t\t\t\tunique = false;\n\t\t\t}\n\t\t}\n\t\treturn unique;\n\t}\n\tfunction onlyUnique(value, index, self) { \n    \treturn self.indexOf(value) === index;\n\t}\n\tvar u = x.filter(unique);\n\treturn u.filter(onlyUnique).sort(function(a, b){return a-b});\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var unique = [];\n    for(i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        for(j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n                break;\n            }\n            if(j == num.length - 1){\n                unique.push(num);\n            }\n        }\n    }\n    if(unique.length == 0){\n        return unique;\n    }\n    else{\n        return unique.sort();\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// write your code here\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let y = [];\n  let i = 0;\n  while (i < x.length){\n    if (x[i].toString().split('').filter(num => num % 2 === 0).length === 0){\n      y.push(x[i]);\n    }\n    i++;\n  }\n  return y.sort(function(a, b){return a-b});\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return x.filter(function(a){\n        return a.toString().split('').every(function(b){\n            return b % 2 === 1;\n        });\n    });\n}",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.25729894880864196,
        "bleu-0": 0.05548446188344952,
        "bleu-8": 0.007102660919191226,
        "bleu-7": 0.22836078272434313,
        "bleu-16": 8.150729843141821e-13,
        "bleu-2": 0.24401806195356046,
        "bleu-11": 0.1138673336596811,
        "bleu-1": 0.1778804782153279,
        "bleu-10": 0.26683244757329994,
        "bleu-17": 0.24397604554246208,
        "bleu-12": 0.03831759916476478,
        "bleu-6": 0.17373298280753752,
        "bleu-18": 0.2777408734340975,
        "bleu-15": 0.275533591413981,
        "bleu-13": 0.0076834511569043905,
        "bleu-9": 0.1472197811822381,
        "bleu-4": 0.24665096098063155,
        "bleu-14": 8.150729843141821e-13,
        "bleu-5": 0.12885303924749014,
        "bleu-19": 0.0058385255851177865,
        "codebleu-3": 0.41159315219924236,
        "codebleu-0": 0.17549810219086673,
        "codebleu-8": 0.090309939273826,
        "codebleu-7": 0.39755894590821994,
        "codebleu-16": 0.0152091254753007,
        "codebleu-2": 0.6979890686272411,
        "codebleu-11": 0.2522086066134973,
        "codebleu-1": 0.42682319559473414,
        "codebleu-10": 0.4247331164948921,
        "codebleu-17": 0.38552255287477805,
        "codebleu-12": 0.2589059870901098,
        "codebleu-6": 0.4062253622298508,
        "codebleu-18": 0.4370557811468723,
        "codebleu-15": 0.43534119197003823,
        "codebleu-13": 0.11701198197353678,
        "codebleu-9": 0.4051987000230458,
        "codebleu-4": 0.39538661437724976,
        "codebleu-14": 0.0152091254753007,
        "codebleu-5": 0.29720910104386006,
        "codebleu-19": 0.11649357681553306,
        "chrf-3": 0.298485407173697,
        "chrf-0": 0.1965926468316549,
        "chrf-8": 0.09816954787248008,
        "chrf-7": 0.31857578963489486,
        "chrf-16": 0.01379389249810213,
        "chrf-2": 0.3372908937831481,
        "chrf-11": 0.21574500034463187,
        "chrf-1": 0.24595477633857843,
        "chrf-10": 0.33134868615749036,
        "chrf-17": 0.310235402015325,
        "chrf-12": 0.13542419058890412,
        "chrf-6": 0.22765907816276423,
        "chrf-18": 0.2908084338863776,
        "chrf-15": 0.3033829334593138,
        "chrf-13": 0.08905939673986678,
        "chrf-9": 0.20612296988449752,
        "chrf-4": 0.3173937340209725,
        "chrf-14": 0.01455982425245721,
        "chrf-5": 0.23555154935739242,
        "chrf-19": 0.08761078755551541,
        "rougel-3": 0.4,
        "rougel-0": 0.3697478991596639,
        "rougel-8": 0.26605504587155965,
        "rougel-7": 0.5202702702702703,
        "rougel-16": 0.020942408376963352,
        "rougel-2": 0.4853932584269663,
        "rougel-11": 0.3938223938223938,
        "rougel-1": 0.3875,
        "rougel-10": 0.41830065359477125,
        "rougel-17": 0.4413793103448276,
        "rougel-12": 0.2846975088967972,
        "rougel-6": 0.3286908077994429,
        "rougel-18": 0.40483383685800606,
        "rougel-15": 0.4155844155844156,
        "rougel-13": 0.1896551724137931,
        "rougel-9": 0.30581039755351674,
        "rougel-4": 0.42,
        "rougel-14": 0.020942408376963352,
        "rougel-5": 0.3727598566308243,
        "rougel-19": 0.19913419913419916,
        "meteor-3": 0.3230548451442256,
        "meteor-0": 0.18667763157894735,
        "meteor-8": 0.1417917746589075,
        "meteor-7": 0.30207025317446645,
        "meteor-16": 0.006013229104028864,
        "meteor-2": 0.47227715857449265,
        "meteor-11": 0.21448359389543944,
        "meteor-1": 0.273349698258805,
        "meteor-10": 0.3146431142090619,
        "meteor-17": 0.2972788546250426,
        "meteor-12": 0.18811361353398137,
        "meteor-6": 0.2762273232267147,
        "meteor-18": 0.33586479652800094,
        "meteor-15": 0.28054282531624974,
        "meteor-13": 0.11713512141757287,
        "meteor-9": 0.24285575704569642,
        "meteor-4": 0.32447709217287085,
        "meteor-14": 0.006013229104028864,
        "meteor-5": 0.22798200673391683,
        "meteor-19": 0.10543161826992498,
        "ruby-3": 0.23369565217391308,
        "ruby-0": 0.2282608695652174,
        "ruby-8": 0.15760869565217395,
        "ruby-7": 0.3532608695652174,
        "ruby-16": 0.010869565217391353,
        "ruby-2": 0.30268199233716475,
        "ruby-11": 0.22282608695652173,
        "ruby-1": 0.20108695652173914,
        "ruby-10": 0.2934782608695652,
        "ruby-17": 0.3097826086956522,
        "ruby-12": 0.17934782608695654,
        "ruby-6": 0.2065217391304348,
        "ruby-18": 0.2554347826086957,
        "ruby-15": 0.2880434782608695,
        "ruby-13": 0.11956521739130432,
        "ruby-9": 0.1467391304347826,
        "ruby-4": 0.2880434782608695,
        "ruby-14": 0.010869565217391353,
        "ruby-5": 0.2554347826086957,
        "ruby-19": 0.11413043478260865,
        "codebertscore_f1-3": 0.7803728580474854,
        "codebertscore_f3-3": 0.7511420249938965,
        "codebertscore_f1-0": 0.7587403059005737,
        "codebertscore_f3-0": 0.7031999230384827,
        "codebertscore_f1-8": 0.7338284254074097,
        "codebertscore_f3-8": 0.6575832366943359,
        "codebertscore_f1-7": 0.8173169493675232,
        "codebertscore_f3-7": 0.8039318919181824,
        "codebertscore_f1-16": 0.5008697509765625,
        "codebertscore_f3-16": 0.46393883228302,
        "codebertscore_f1-2": 0.8035907745361328,
        "codebertscore_f3-2": 0.8085557818412781,
        "codebertscore_f1-11": 0.7630416750907898,
        "codebertscore_f3-11": 0.7146607637405396,
        "codebertscore_f1-1": 0.7673319578170776,
        "codebertscore_f3-1": 0.7648609280586243,
        "codebertscore_f1-10": 0.7882663011550903,
        "codebertscore_f3-10": 0.7729935050010681,
        "codebertscore_f1-17": 0.8036929965019226,
        "codebertscore_f3-17": 0.780595600605011,
        "codebertscore_f1-12": 0.7145850658416748,
        "codebertscore_f3-12": 0.7007311582565308,
        "codebertscore_f1-6": 0.7486329078674316,
        "codebertscore_f3-6": 0.7475444078445435,
        "codebertscore_f1-18": 0.7810041904449463,
        "codebertscore_f3-18": 0.7743185758590698,
        "codebertscore_f1-15": 0.778193473815918,
        "codebertscore_f3-15": 0.7655128836631775,
        "codebertscore_f1-13": 0.6321641206741333,
        "codebertscore_f3-13": 0.5948532223701477,
        "codebertscore_f1-9": 0.7298397421836853,
        "codebertscore_f3-9": 0.7371340394020081,
        "codebertscore_f1-4": 0.7982869744300842,
        "codebertscore_f3-4": 0.777116596698761,
        "codebertscore_f1-14": 0.5031258463859558,
        "codebertscore_f3-14": 0.46507659554481506,
        "codebertscore_f1-5": 0.7437829375267029,
        "codebertscore_f3-5": 0.7140905857086182,
        "codebertscore_f1-19": 0.6334239840507507,
        "codebertscore_f3-19": 0.5974012613296509,
        "codebertscore_s_f1-3": 0.7908301949501038,
        "codebertscore_s_f3-3": 0.7619050145149231,
        "codebertscore_s_f1-0": 0.7717150449752808,
        "codebertscore_s_f3-0": 0.7169156074523926,
        "codebertscore_s_f1-8": 0.7513493895530701,
        "codebertscore_s_f3-8": 0.6753699779510498,
        "codebertscore_s_f1-7": 0.8178850412368774,
        "codebertscore_s_f3-7": 0.8021126985549927,
        "codebertscore_s_f1-16": 0.4870070517063141,
        "codebertscore_s_f3-16": 0.4499591886997223,
        "codebertscore_s_f1-2": 0.8022470474243164,
        "codebertscore_s_f3-2": 0.8082370758056641,
        "codebertscore_s_f1-11": 0.7772889137268066,
        "codebertscore_s_f3-11": 0.7292197942733765,
        "codebertscore_s_f1-1": 0.765150785446167,
        "codebertscore_s_f3-1": 0.7622892260551453,
        "codebertscore_s_f1-10": 0.792208731174469,
        "codebertscore_s_f3-10": 0.7756343483924866,
        "codebertscore_s_f1-17": 0.8087195754051208,
        "codebertscore_s_f3-17": 0.7836782336235046,
        "codebertscore_s_f1-12": 0.72419273853302,
        "codebertscore_s_f3-12": 0.7139382362365723,
        "codebertscore_s_f1-6": 0.7514404058456421,
        "codebertscore_s_f3-6": 0.7494801878929138,
        "codebertscore_s_f1-18": 0.7832574248313904,
        "codebertscore_s_f3-18": 0.7758464813232422,
        "codebertscore_s_f1-15": 0.7867027521133423,
        "codebertscore_s_f3-15": 0.7749825119972229,
        "codebertscore_s_f1-13": 0.6502524018287659,
        "codebertscore_s_f3-13": 0.6104891300201416,
        "codebertscore_s_f1-9": 0.7345629334449768,
        "codebertscore_s_f3-9": 0.7450165748596191,
        "codebertscore_s_f1-4": 0.8016186952590942,
        "codebertscore_s_f3-4": 0.7803889513015747,
        "codebertscore_s_f1-14": 0.4914829432964325,
        "codebertscore_s_f3-14": 0.45409685373306274,
        "codebertscore_s_f1-5": 0.7614772915840149,
        "codebertscore_s_f3-5": 0.7348641157150269,
        "codebertscore_s_f1-19": 0.6502649784088135,
        "codebertscore_s_f3-19": 0.6167447566986084,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 3,
        "raw_gpt35_nsnr-0": "3",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "Score: 1",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 0,
        "raw_gpt35_nsnr-16": "0- The code snippet does not contain any implementation to solve the given problem.",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 2,
        "raw_gpt35_nsnr-11": "2",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "0",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 2,
        "raw_gpt35_nswr-0": "2",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "Score: 0",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 2,
        "raw_gpt35_nswr-16": "2",
        "gpt35_nswr-2": 3,
        "raw_gpt35_nswr-2": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n",
        "snippet": [
            "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n"
        ],
        "simplified": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "task_id": "111",
        "3": "var output = {};\n    var testArr = test.split(\" \");\n    for(var i = 0; i < testArr.length; i++){\n        if(output[testArr[i]] == undefined){\n            output[testArr[i]] = 1;\n        }\n        else{\n            output[testArr[i]]++;\n        }\n    }\n    return output;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var testArr = test.split(\" \");\n  var results = {};\n  for(var i = 0; i < testArr.length; i++){\n    if(results[testArr[i]]){\n      results[testArr[i]]++;\n    } else {\n      results[testArr[i]] = 1;\n    }\n  }\n  return results;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "//Split the string into array of chars\n    let arr = test.split(' ');\n    let ocurrence = {};\n\n    //Go through each char and add it to ocurrence object if it doesn't exist, or increment the count if it does\n    for(let i = 0; i < arr.length; i++){\n        if(!ocurrence[arr[i]]){\n            ocurrence[arr[i]] = 1;\n        }else{\n            ocurrence[arr[i]] += 1;\n        }\n    }\n\n    let maxValue = Math.max(...Object.values(ocurrence));\n    let maxKeys = [];\n\n    //Add to maxKeys all keys whose values are the same as maxValue\n    for(let key in ocurrence){\n        if(ocurrence[key] === maxValue){\n            maxKeys.push(key);\n        }\n    }\n\n    //Go through maxKeys and delete every key that is not a maxKey\n    for(let key in ocurrence){\n        if(!maxKeys.includes(key)){\n            delete ocurrence[key];\n        }\n    }\n\n    return ocurrence;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let count = 0;\n    let key = '';\n    let object = {};\n    let array = test.split(' ');\n    for(let i = 0; i < array.length; i++){\n        for(let j = 0; j < array.length; j++){\n            if(array[i] === array[j]){\n                count++;\n            }\n        }\n        if(count > 1){\n            object[array[i]] = count;\n        }\n        count = 0;\n    }\n    return object;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var main = test.split(\" \");\n    var result = [];\n    var recc = {};\n    main.forEach(\n        function(i){\n            if(i in recc){\n                recc[i] = recc[i] + 1;\n            }\n            else{\n                recc[i] = 1;\n            }\n        }\n    );\n    var max = 0;\n    for(var key in recc){\n        if(recc[key] > max){\n            max = recc[key];\n        }\n    }\n    for(var key in recc){\n        if(recc[key] == max){\n            result.push(key);\n        }\n    }\n    var result1 = {};\n    result.forEach(\n        function(i){\n            result1[i] = max;\n        }\n    );\n    return result1;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let testArr = test.split(' ');\n    let map = new Map();\n    for(let i = 0; i < testArr.length; i++){\n        if(map.has(testArr[i])){\n            map.set(testArr[i], map.get(testArr[i]) + 1);\n        } else {\n            map.set(testArr[i], 1);\n        }\n    }\n    let keys = map.keys();\n    let vals = map.values();\n    let maxKey = '';\n    let maxVal = 0;\n    let maxKeys = [];\n    for(let i = 0; i < map.size; i++){\n        if(vals.next().value > maxVal){\n            maxKey = keys.next().value;\n            maxVal = vals.next().value;\n            maxKeys = [maxKey];\n        } else if(vals.next().value === maxVal){\n            maxKeys.push(keys.next().value);\n        }\n    }\n    return {[maxKey]: maxVal};\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let stor = {};\n  let max = 0;\n  let final = {};\n  test.split(' ').forEach(char => {\n    if (stor[char]){\n      stor[char] += 1;\n    }\n    else {\n      stor[char] = 1;\n    }\n  });\n  for (let key in stor){\n    if (stor[key] > max){\n      max = stor[key];\n    }\n  }\n  for (let key in stor){\n    if (stor[key] === max){\n      final[key] = max;\n    }\n  }\n  return final;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let words = test.split(' ');\n    let word_count = {};\n    for(let i = 0; i < words.length; i++){\n        if(word_count[words[i]]){\n            word_count[words[i]] += 1;\n        }else{\n            word_count[words[i]] = 1;\n        }\n    }\n    let result = {};\n    let max = 0;\n    for(let j in word_count){\n        if(word_count[j] > max){\n            max = word_count[j];\n        }\n    }\n    for(let k in word_count){\n        if(word_count[k] === max){\n            result[k] = max;\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let char_dict = {};\n    let max_cnt = 0;\n    let max_cnt_chars = [];\n    let test_array = test.split(' ');\n    for (let i = 0; i < test_array.length; i++){\n        if (char_dict[test_array[i]] === undefined){\n            char_dict[test_array[i]] = 1;\n        } else {\n            char_dict[test_array[i]]++;\n        }\n        if (char_dict[test_array[i]] > max_cnt){\n            max_cnt = char_dict[test_array[i]];\n            max_cnt_chars = [test_array[i]];\n        } else if (char_dict[test_array[i]] === max_cnt){\n            max_cnt_chars.push(test_array[i]);\n        }\n    }\n    let result = {};\n    for (let i = 0; i < max_cnt_chars.length; i++){\n        result[max_cnt_chars[i]] = max_cnt;\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let testArr = test.split(' ');\n  let myObj = {};\n  let myArr = [];\n  let myCount = 0;\n  for(let i = 0; i < testArr.length; i++){\n    if(!myObj[testArr[i]]){\n      myObj[testArr[i]] = 1;\n    } else {\n      myObj[testArr[i]] += 1;\n    }\n  }\n  for(let key in myObj){\n    if(myObj[key] > myCount){\n      myCount = myObj[key];\n    }\n  }\n  for(let key in myObj){\n    if(myObj[key] === myCount){\n      myArr.push(key);\n    }\n  }\n  for(let i = 0; i < myArr.length; i++){\n    myObj[myArr[i]] = myCount;\n  }\n  for(let key in myObj){\n    if(myObj[key] !== myCount){\n      delete myObj[key];\n    }\n  }\n  return myObj;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let dict = {};\n  let splitted = test.split(' ');\n  for (let i = 0; i < splitted.length; i++){\n    if (splitted[i] in dict){\n      dict[splitted[i]] += 1;\n    } else {\n      dict[splitted[i]] = 1;\n    }\n  }\n  return dict;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var histogram = {};\n    var max = 0;\n    test.split(\" \").forEach(function(letter){\n        if(histogram[letter]){\n            histogram[letter] = histogram[letter] + 1;\n        }else{\n            histogram[letter] = 1;\n        }\n        if(histogram[letter] > max){\n            max = histogram[letter];\n        }\n    });\n    var result = {};\n    for(var letter in histogram){\n        if(histogram[letter] === max){\n            result[letter] = histogram[letter];\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var h = {};\n  var max = 1;\n  var letter, count;\n  var t = test.split(' ');\n  for (var i = 0; i < t.length; i++){\n    count = 1;\n    letter = t[i];\n    if (letter in h){\n      h[letter] += 1;\n      if (h[letter] > max){\n        max = h[letter];\n      }\n    }\n    else {\n      h[letter] = 1;\n    }\n  }\n  var d = {};\n  for (var k in h){\n    if (h[k] == max){\n      d[k] = h[k];\n    }\n  }\n  return d;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "//Split string into array\n  test = test.split(' ');\n  //create an object\n  var obj = {};\n  //loop through array\n  for(var i = 0; i < test.length; i++){\n    //check to see if the letter exists\n    if(obj[test[i]]){\n      //if the letter does exist add to the count\n      obj[test[i]]++;\n    } else {\n      //if the letter does not exist add it to the object\n      obj[test[i]] = 1;\n    }\n  }\n  //create a variable to hold the most occurrences\n  var mostOccurrences = 0;\n  //loop through object\n  for(var key in obj){\n    //check to see if the value is greater than the most occurrences\n    if(obj[key] > mostOccurrences){\n      //if it is replace the most occurrences\n      mostOccurrences = obj[key];\n    }\n  }\n  //create a new object\n  var newObj = {};\n  //loop through object\n  for(var keys in obj){\n    //check to see if the value is equal to the most occurrences\n    if(obj[keys] === mostOccurrences){\n      //if it is add the key and value to the new object\n      newObj[keys] = obj[keys];\n    }\n  }\n  //return new object\n  return newObj;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var alphabet = {};\n    var counter = 0;\n    var target = '';\n    var multi = [];\n    var howMany = 0;\n    var winner = '';\n    var letters = test.split(' ');\n    for(var i = 0; i < letters.length; i++){\n        alphabet[letters[i]] = alphabet[letters[i]] ? alphabet[letters[i]]+1 : 1;\n    }\n    for(var letter in alphabet){\n        counter = alphabet[letter];\n        if(counter >= howMany){\n            target = letter;\n            howMany = counter;\n        }\n    }\n    for(var letter in alphabet){\n        if(alphabet[letter] == howMany){\n            multi.push(letter);\n        }\n    }\n    if(multi.length > 1){\n        for(var i = 0; i < multi.length; i++){\n            winner += multi[i];\n            if(i != multi.length-1){\n                winner += ' ';\n            }\n        }\n        return {winner: howMany};\n    }else{\n        return {target: howMany};\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let obj={}\n  let str=test.split(' ')\n  for(let i=0;i<str.length;i++){\n    if(obj[str[i]]===undefined){\n      obj[str[i]]=1\n    }else{\n      obj[str[i]]+=1\n    }\n  }\n  return obj\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(test == ''){\n        return {}\n    }\n    else{\n        let testArray = test.split(' ');\n        let testDict = {}\n        let maxValue = 0;\n        let highestValueArray = [];\n        for(let i = 0; i < testArray.length; i++){\n            let indexElement = testArray[i];\n            if(testDict[indexElement] == undefined){\n                testDict[indexElement] = 1;\n            }\n            else{\n                testDict[indexElement] += 1;\n            }\n        }\n        let testDictKeys = Object.keys(testDict);\n        for(let i = 0; i < testDictKeys.length; i++){\n            let indexKey = testDictKeys[i];\n            if(testDict[indexKey] > maxValue){\n                maxValue = testDict[indexKey];\n                highestValueArray = [indexKey];\n            }\n            else if(testDict[indexKey] == maxValue){\n                highestValueArray.push(indexKey);\n            }\n        }\n        let keyToReturn = {};\n        for(let i = 0; i < highestValueArray.length; i++){\n            let indexKey = highestValueArray[i];\n            keyToReturn[indexKey] = maxValue;\n        }\n        return keyToReturn;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var kamus = {}\n    var tes = ''\n    var hasil = []\n    var tampung = []\n    for(var i = 0; i < test.length; i++){\n        if(test[i] !== ' '){\n            tes += test[i]\n        }else{\n            hasil.push(tes)\n            tes = ''\n        }\n    }\n    hasil.push(tes)\n    for(var j = 0; j < hasil.length; j++){\n        kamus[hasil[j]] = 0\n    }\n    for(var k = 0; k < hasil.length; k++){\n        for(var l = 0; l < hasil.length; l++){\n            if(hasil[k] === hasil[l]){\n                kamus[hasil[k]] += 1\n            }\n        }\n    }\n    for(var m = 0; m < hasil.length; m++){\n        if(kamus[hasil[m]] === max(kamus)){\n            tampung.push(hasil[m])\n        }\n    }\n    var o = 0\n    var output = {}\n    while(o < tampung.length){\n        output[tampung[o]] = max(kamus)\n        o++\n    }\n    return output\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var letters={};\n    var letterArr=test.split(' ');\n    var max=0;\n    var maxLetters= {};\n    for(i=0;i<letterArr.length;i++){\n        var letter=letterArr[i];\n        if(!letters[letter]){\n            letters[letter]=1;\n        }\n        else{\n            letters[letter]++;\n        }\n        if(letters[letter]>max){\n            max=letters[letter];\n            maxLetters={};\n            maxLetters[letter]=max;\n        }\n        else if(letters[letter]==max){\n            maxLetters[letter]=max;\n        }\n    }\n    return maxLetters;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(test == ''){\n        return {};\n    }\n    let maxCount = 1;\n    let result = {};\n    let arr = test.split(' ');\n    let testMap = new Map();\n    for(let i = 0; i < arr.length; i++){\n        if(testMap.has(arr[i])){\n            testMap.set(arr[i], testMap.get(arr[i]) + 1);\n        }\n        else{\n            testMap.set(arr[i], 1);\n        }\n    }\n    for(let item of testMap){\n        if(item[1] >= maxCount){\n            maxCount = item[1];\n        }\n    }\n    for(let item of testMap){\n        if(item[1] == maxCount){\n            result[item[0]] = item[1];\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.08328170434034315,
        "bleu-0": 0.07301894701921269,
        "bleu-8": 0.1339117723611566,
        "bleu-7": 0.1000551567440726,
        "bleu-16": 0.13745446518901683,
        "bleu-2": 0.1146550769226927,
        "bleu-11": 0.11215529827474477,
        "bleu-1": 0.16528033005961418,
        "bleu-10": 0.18051536968268864,
        "bleu-17": 0.1521689794499471,
        "bleu-12": 0.06461388953235299,
        "bleu-6": 0.10003486459584869,
        "bleu-18": 0.15058321148122805,
        "bleu-15": 0.09054941898848767,
        "bleu-13": 0.1179885516485481,
        "bleu-9": 0.08079585296411297,
        "bleu-4": 0.1621587425035581,
        "bleu-14": 0.15901599564574836,
        "bleu-5": 0.1059199803229452,
        "bleu-19": 0.22238782781917224,
        "codebleu-3": 0.25676614017070737,
        "codebleu-0": 0.2434640543112068,
        "codebleu-8": 0.5645973212387297,
        "codebleu-7": 0.3314589343163962,
        "codebleu-16": 0.5042520191158981,
        "codebleu-2": 0.5175546602776995,
        "codebleu-11": 0.3877596671110299,
        "codebleu-1": 0.4757192014699886,
        "codebleu-10": 0.5936043958406988,
        "codebleu-17": 0.6333265569051413,
        "codebleu-12": 0.2384751906397986,
        "codebleu-6": 0.3968299032672368,
        "codebleu-18": 0.4519764349374464,
        "codebleu-15": 0.5541607617986745,
        "codebleu-13": 0.6101758464542891,
        "codebleu-9": 0.24586025288852528,
        "codebleu-4": 0.6285725163248556,
        "codebleu-14": 0.6367572052427991,
        "codebleu-5": 0.4271324353324161,
        "codebleu-19": 0.5733208904153217,
        "chrf-3": 0.21250496288078718,
        "chrf-0": 0.21557206704700038,
        "chrf-8": 0.2609331973387234,
        "chrf-7": 0.24715541783272488,
        "chrf-16": 0.23451112468636992,
        "chrf-2": 0.2581907525460308,
        "chrf-11": 0.23656145457349603,
        "chrf-1": 0.28772847960209624,
        "chrf-10": 0.2850774371507123,
        "chrf-17": 0.2897469757902409,
        "chrf-12": 0.23919149984738952,
        "chrf-6": 0.2405389751670291,
        "chrf-18": 0.25741720985662975,
        "chrf-15": 0.22950383241641045,
        "chrf-13": 0.2672231399188047,
        "chrf-9": 0.2340994795936625,
        "chrf-4": 0.3227063282124487,
        "chrf-14": 0.27462165751075013,
        "chrf-5": 0.22147497753623824,
        "chrf-19": 0.3217026164221442,
        "rougel-3": 0.3582089552238806,
        "rougel-0": 0.339622641509434,
        "rougel-8": 0.3333333333333333,
        "rougel-7": 0.3501683501683502,
        "rougel-16": 0.3929618768328446,
        "rougel-2": 0.3427230046948357,
        "rougel-11": 0.42996742671009774,
        "rougel-1": 0.426829268292683,
        "rougel-10": 0.42162162162162165,
        "rougel-17": 0.41445783132530123,
        "rougel-12": 0.36153846153846153,
        "rougel-6": 0.4313725490196078,
        "rougel-18": 0.39143730886850153,
        "rougel-15": 0.3083511777301927,
        "rougel-13": 0.3253588516746412,
        "rougel-9": 0.3846153846153846,
        "rougel-4": 0.3782608695652174,
        "rougel-14": 0.3818181818181819,
        "rougel-5": 0.3719512195121951,
        "rougel-19": 0.3829787234042554,
        "meteor-3": 0.2527889016018307,
        "meteor-0": 0.2257518050789833,
        "meteor-8": 0.3327015696931921,
        "meteor-7": 0.2909302819983743,
        "meteor-16": 0.2971341964093275,
        "meteor-2": 0.3031069745493832,
        "meteor-11": 0.327952949052453,
        "meteor-1": 0.38326189159292035,
        "meteor-10": 0.3614511325730162,
        "meteor-17": 0.46411002584538147,
        "meteor-12": 0.2236287641303316,
        "meteor-6": 0.32519308418045284,
        "meteor-18": 0.36279626628975953,
        "meteor-15": 0.3405269328989355,
        "meteor-13": 0.3740156252922727,
        "meteor-9": 0.2469911166300506,
        "meteor-4": 0.3934639175257732,
        "meteor-14": 0.37542447480728297,
        "meteor-5": 0.296399640571027,
        "meteor-19": 0.39227032834325476,
        "ruby-3": 0.18918918918918914,
        "ruby-0": 0.17297297297297298,
        "ruby-8": 0.2139737991266376,
        "ruby-7": 0.1945945945945946,
        "ruby-16": 0.21621621621621623,
        "ruby-2": 0.20331950207468885,
        "ruby-11": 0.3027027027027027,
        "ruby-1": 0.28648648648648645,
        "ruby-10": 0.23783783783783785,
        "ruby-17": 0.29130434782608694,
        "ruby-12": 0.21081081081081077,
        "ruby-6": 0.3027027027027027,
        "ruby-18": 0.254054054054054,
        "ruby-15": 0.2056737588652482,
        "ruby-13": 0.22746781115879833,
        "ruby-9": 0.2324324324324324,
        "ruby-4": 0.2581818181818182,
        "ruby-14": 0.2784313725490196,
        "ruby-5": 0.2432432432432432,
        "ruby-19": 0.17801047120418845,
        "codebertscore_f1-3": 0.7652000188827515,
        "codebertscore_f3-3": 0.7432421445846558,
        "codebertscore_f1-0": 0.7609691023826599,
        "codebertscore_f3-0": 0.7310399413108826,
        "codebertscore_f1-8": 0.7170262336730957,
        "codebertscore_f3-8": 0.7469635605812073,
        "codebertscore_f1-7": 0.7729966044425964,
        "codebertscore_f3-7": 0.7537600994110107,
        "codebertscore_f1-16": 0.7386775016784668,
        "codebertscore_f3-16": 0.7374377250671387,
        "codebertscore_f1-2": 0.7305371165275574,
        "codebertscore_f3-2": 0.7412623167037964,
        "codebertscore_f1-11": 0.7694356441497803,
        "codebertscore_f3-11": 0.7553025484085083,
        "codebertscore_f1-1": 0.7866663932800293,
        "codebertscore_f3-1": 0.7735624313354492,
        "codebertscore_f1-10": 0.7412364482879639,
        "codebertscore_f3-10": 0.749518096446991,
        "codebertscore_f1-17": 0.76380854845047,
        "codebertscore_f3-17": 0.7621546387672424,
        "codebertscore_f1-12": 0.7904576659202576,
        "codebertscore_f3-12": 0.7572169303894043,
        "codebertscore_f1-6": 0.7618473768234253,
        "codebertscore_f3-6": 0.7478422522544861,
        "codebertscore_f1-18": 0.8059914112091064,
        "codebertscore_f3-18": 0.7969043850898743,
        "codebertscore_f1-15": 0.7098250985145569,
        "codebertscore_f3-15": 0.7427493929862976,
        "codebertscore_f1-13": 0.7331918478012085,
        "codebertscore_f3-13": 0.7368708848953247,
        "codebertscore_f1-9": 0.7783957719802856,
        "codebertscore_f3-9": 0.7475853562355042,
        "codebertscore_f1-4": 0.7087599039077759,
        "codebertscore_f3-4": 0.7276608943939209,
        "codebertscore_f1-14": 0.7208160758018494,
        "codebertscore_f3-14": 0.7229841947555542,
        "codebertscore_f1-5": 0.7435659170150757,
        "codebertscore_f3-5": 0.7419829368591309,
        "codebertscore_f1-19": 0.7513173818588257,
        "codebertscore_f3-19": 0.7536059021949768,
        "codebertscore_s_f1-3": 0.7750678062438965,
        "codebertscore_s_f3-3": 0.7521253824234009,
        "codebertscore_s_f1-0": 0.7794181704521179,
        "codebertscore_s_f3-0": 0.7507275342941284,
        "codebertscore_s_f1-8": 0.7235957384109497,
        "codebertscore_s_f3-8": 0.7515231370925903,
        "codebertscore_s_f1-7": 0.7779578566551208,
        "codebertscore_s_f3-7": 0.756584882736206,
        "codebertscore_s_f1-16": 0.7385213971138,
        "codebertscore_s_f3-16": 0.7326859831809998,
        "codebertscore_s_f1-2": 0.738571047782898,
        "codebertscore_s_f3-2": 0.7467029690742493,
        "codebertscore_s_f1-11": 0.7737301588058472,
        "codebertscore_s_f3-11": 0.7578808665275574,
        "codebertscore_s_f1-1": 0.78522127866745,
        "codebertscore_s_f3-1": 0.7715901732444763,
        "codebertscore_s_f1-10": 0.74802565574646,
        "codebertscore_s_f3-10": 0.7543110847473145,
        "codebertscore_s_f1-17": 0.7670688629150391,
        "codebertscore_s_f3-17": 0.7659723162651062,
        "codebertscore_s_f1-12": 0.8087230920791626,
        "codebertscore_s_f3-12": 0.7757595777511597,
        "codebertscore_s_f1-6": 0.7618216872215271,
        "codebertscore_s_f3-6": 0.7453902959823608,
        "codebertscore_s_f1-18": 0.811528742313385,
        "codebertscore_s_f3-18": 0.8007761836051941,
        "codebertscore_s_f1-15": 0.7159349322319031,
        "codebertscore_s_f3-15": 0.7463316917419434,
        "codebertscore_s_f1-13": 0.7454110980033875,
        "codebertscore_s_f3-13": 0.7453558444976807,
        "codebertscore_s_f1-9": 0.792284369468689,
        "codebertscore_s_f3-9": 0.7625629305839539,
        "codebertscore_s_f1-4": 0.73968505859375,
        "codebertscore_s_f3-4": 0.7487667798995972,
        "codebertscore_s_f1-14": 0.7413196563720703,
        "codebertscore_s_f3-14": 0.7407418489456177,
        "codebertscore_s_f1-5": 0.739936888217926,
        "codebertscore_s_f3-5": 0.7393046617507935,
        "codebertscore_s_f1-19": 0.7624973654747009,
        "codebertscore_s_f3-19": 0.763205349445343,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 3,
        "raw_gpt35_nsnr-13": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-13": 1,
        "raw_gpt35_nswr-13": "1",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings, substring){\n",
        "snippet": [
            "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n"
        ],
        "simplified": "Filter an input list of strings only for ones that contain given substring",
        "task_id": "7",
        "3": "return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var result = []\n    for (var i=0; i<strings.length; i++){\n        if (strings[i].indexOf(substring) != -1){\n            result.push(strings[i])\n        }\n    }\n    return result\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return strings.filter(string => string.includes(substring));\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var filteredStrings = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n            filteredStrings.push(strings[i]);\n        }\n    }\n    return filteredStrings;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var res=[];\n    for(var i=0;i<strings.length;i++){\n        if(strings[i].indexOf(substring)!=-1){\n            res.push(strings[i]);\n        }\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var results = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\t\t\tresults.push(strings[i]);\n\t\t}\n\t}\n\treturn results;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return strings.filter(function(string){\n        return string.indexOf(substring) > -1;\n    });\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return strings.filter(function(x){return x.indexOf(substring) != -1;});\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "return strings.filter(str => str.includes(substring));\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//Answer:\n    return strings.filter(x => x.includes(substring));\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return strings.filter(str => str.includes(substring));\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var my_strings = [];\n\tvar i = 0;\n\tfor (i = 0; i < strings.length; i++) {\n\t\tif (strings[i].indexOf(substring) >= 0) {\n\t\t\tmy_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn my_strings;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) == -1){\n            strings.splice(i, 1);\n            i--;\n        }\n    }\n    return strings;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var filtered_strings = [];\n  strings.forEach(function(element){\n    if (element.indexOf(substring) !== -1){\n      filtered_strings.push(element);\n    }\n  });\n  return filtered_strings;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return _.filter(strings, function(string){\n\t\treturn string.indexOf(substring) > -1;\n\t});\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return strings.filter(function(element){\n\t\treturn element.indexOf(substring) != -1;\n\t});\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var new_strings = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "return strings.filter(string => string.includes(substring));\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var filtered = []\n    for (i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i])\n        }\n    }\n    return filtered\n}",
        "grade-19": {
            "execution": 1
        },
        "bleu-3": 0.2719326877457978,
        "bleu-0": 0.20428689429010188,
        "bleu-8": 0.28718510776862294,
        "bleu-7": 0.05211026151541653,
        "bleu-16": 0.20706803854926545,
        "bleu-2": 0.20706803854926545,
        "bleu-11": 0.3883375900135817,
        "bleu-1": 0.5691588283913811,
        "bleu-10": 0.28718510776862294,
        "bleu-17": 0.5380105661837927,
        "bleu-12": 0.28718510776862294,
        "bleu-6": 0.11127177976187137,
        "bleu-18": 0.16253172102129526,
        "bleu-15": 0.20706803854926545,
        "bleu-13": 0.2330892177307885,
        "bleu-9": 0.2809128258613096,
        "bleu-4": 0.5129497107827519,
        "bleu-14": 0.05514720303858146,
        "bleu-5": 0.28718510776862294,
        "bleu-19": 0.20817982272792,
        "codebleu-3": 0.5519266212288062,
        "codebleu-0": 0.6397199213871226,
        "codebleu-8": 0.5984939743145854,
        "codebleu-7": 0.5130147630147629,
        "codebleu-16": 0.6401834454303165,
        "codebleu-2": 0.6401834454303165,
        "codebleu-11": 0.6841868011327997,
        "codebleu-1": 0.7335544434265355,
        "codebleu-10": 0.5984939743145854,
        "codebleu-17": 0.6563560714793684,
        "codebleu-12": 0.5984939743145854,
        "codebleu-6": 0.5507908288725109,
        "codebleu-18": 0.6061484492300449,
        "codebleu-15": 0.6401834454303165,
        "codebleu-13": 0.7051263692332977,
        "codebleu-9": 0.6864846939761079,
        "codebleu-4": 0.7113657443379178,
        "codebleu-14": 0.5130147630147629,
        "codebleu-5": 0.5984939743145854,
        "codebleu-19": 0.6403687427934256,
        "chrf-3": 0.5533297831151707,
        "chrf-0": 0.5170239242355243,
        "chrf-8": 0.5972474520735095,
        "chrf-7": 0.3595127803231298,
        "chrf-16": 0.5324392133003945,
        "chrf-2": 0.5150456698800627,
        "chrf-11": 0.6803503731495423,
        "chrf-1": 0.794190737938929,
        "chrf-10": 0.6118807520169502,
        "chrf-17": 0.7115993989759921,
        "chrf-12": 0.6118807520169502,
        "chrf-6": 0.4255672460523041,
        "chrf-18": 0.5240472652992142,
        "chrf-15": 0.5465302782600886,
        "chrf-13": 0.4992573065729838,
        "chrf-9": 0.6280783107187803,
        "chrf-4": 0.7348058554239748,
        "chrf-14": 0.3344579629322867,
        "chrf-5": 0.5972474520735095,
        "chrf-19": 0.5490876515162609,
        "rougel-3": 0.5454545454545454,
        "rougel-0": 0.3896103896103896,
        "rougel-8": 0.717948717948718,
        "rougel-7": 0.25641025641025644,
        "rougel-16": 0.4,
        "rougel-2": 0.4,
        "rougel-11": 0.6666666666666667,
        "rougel-1": 0.8163265306122449,
        "rougel-10": 0.717948717948718,
        "rougel-17": 0.7441860465116279,
        "rougel-12": 0.717948717948718,
        "rougel-6": 0.3132530120481927,
        "rougel-18": 0.3896103896103896,
        "rougel-15": 0.4,
        "rougel-13": 0.46376811594202894,
        "rougel-9": 0.6,
        "rougel-4": 0.7346938775510203,
        "rougel-14": 0.2666666666666667,
        "rougel-5": 0.717948717948718,
        "rougel-19": 0.39473684210526316,
        "meteor-3": 0.5113636363636364,
        "meteor-0": 0.5440882252476457,
        "meteor-8": 0.6255339345040342,
        "meteor-7": 0.3504811898512686,
        "meteor-16": 0.5706862461419755,
        "meteor-2": 0.5706862461419755,
        "meteor-11": 0.7324363568956994,
        "meteor-1": 0.8819444444444444,
        "meteor-10": 0.6255339345040342,
        "meteor-17": 0.7194456335616438,
        "meteor-12": 0.6255339345040342,
        "meteor-6": 0.4309227665629049,
        "meteor-18": 0.5216981003049905,
        "meteor-15": 0.5937283587257618,
        "meteor-13": 0.561854371378181,
        "meteor-9": 0.7130171173102244,
        "meteor-4": 0.7914266117969823,
        "meteor-14": 0.33447841287909585,
        "meteor-5": 0.6255339345040342,
        "meteor-19": 0.5684716176405926,
        "ruby-3": 0.40909090909090906,
        "ruby-0": 0.2727272727272727,
        "ruby-8": 0.6363636363636364,
        "ruby-7": 0.1607142857142857,
        "ruby-16": 0.27586206896551724,
        "ruby-2": 0.27586206896551724,
        "ruby-11": 0.5769230769230769,
        "ruby-1": 0.7407407407407407,
        "ruby-10": 0.6363636363636364,
        "ruby-17": 0.5454545454545454,
        "ruby-12": 0.6363636363636364,
        "ruby-6": 0.21311475409836067,
        "ruby-18": 0.2727272727272727,
        "ruby-15": 0.27586206896551724,
        "ruby-13": 0.34042553191489366,
        "ruby-9": 0.5,
        "ruby-4": 0.6666666666666667,
        "ruby-14": 0.16981132075471694,
        "ruby-5": 0.6363636363636364,
        "ruby-19": 0.2777777777777778,
        "codebertscore_f1-3": 0.8738737106323242,
        "codebertscore_f3-3": 0.8595766425132751,
        "codebertscore_f1-0": 0.8099315762519836,
        "codebertscore_f3-0": 0.8493084907531738,
        "codebertscore_f1-8": 0.8943904042243958,
        "codebertscore_f3-8": 0.8674008250236511,
        "codebertscore_f1-7": 0.7649455666542053,
        "codebertscore_f3-7": 0.7789342403411865,
        "codebertscore_f1-16": 0.7947779297828674,
        "codebertscore_f3-16": 0.8292955160140991,
        "codebertscore_f1-2": 0.8206760883331299,
        "codebertscore_f3-2": 0.859513521194458,
        "codebertscore_f1-11": 0.9363703727722168,
        "codebertscore_f3-11": 0.947096049785614,
        "codebertscore_f1-1": 0.9728204607963562,
        "codebertscore_f3-1": 0.9869253039360046,
        "codebertscore_f1-10": 0.900107204914093,
        "codebertscore_f3-10": 0.8737519383430481,
        "codebertscore_f1-17": 0.8843088150024414,
        "codebertscore_f3-17": 0.8741886615753174,
        "codebertscore_f1-12": 0.900107204914093,
        "codebertscore_f3-12": 0.8737519383430481,
        "codebertscore_f1-6": 0.7885390520095825,
        "codebertscore_f3-6": 0.8213538527488708,
        "codebertscore_f1-18": 0.7961181402206421,
        "codebertscore_f3-18": 0.8367853164672852,
        "codebertscore_f1-15": 0.8200337290763855,
        "codebertscore_f3-15": 0.8623250722885132,
        "codebertscore_f1-13": 0.8381590247154236,
        "codebertscore_f3-13": 0.8732762932777405,
        "codebertscore_f1-9": 0.9309872388839722,
        "codebertscore_f3-9": 0.9410741329193115,
        "codebertscore_f1-4": 0.9449848532676697,
        "codebertscore_f3-4": 0.957002580165863,
        "codebertscore_f1-14": 0.764879047870636,
        "codebertscore_f3-14": 0.7789376378059387,
        "codebertscore_f1-5": 0.8943904042243958,
        "codebertscore_f3-5": 0.8674008250236511,
        "codebertscore_f1-19": 0.8145444989204407,
        "codebertscore_f3-19": 0.8545085787773132,
        "codebertscore_s_f1-3": 0.8803439736366272,
        "codebertscore_s_f3-3": 0.8692585825920105,
        "codebertscore_s_f1-0": 0.8134930729866028,
        "codebertscore_s_f3-0": 0.8545259237289429,
        "codebertscore_s_f1-8": 0.906757652759552,
        "codebertscore_s_f3-8": 0.8802083730697632,
        "codebertscore_s_f1-7": 0.7641878128051758,
        "codebertscore_s_f3-7": 0.7833730578422546,
        "codebertscore_s_f1-16": 0.8009486198425293,
        "codebertscore_s_f3-16": 0.8381993174552917,
        "codebertscore_s_f1-2": 0.8359503746032715,
        "codebertscore_s_f3-2": 0.8765072822570801,
        "codebertscore_s_f1-11": 0.9417301416397095,
        "codebertscore_s_f3-11": 0.9554192423820496,
        "codebertscore_s_f1-1": 0.9723040461540222,
        "codebertscore_s_f3-1": 0.9887480139732361,
        "codebertscore_s_f1-10": 0.9083304405212402,
        "codebertscore_s_f3-10": 0.881837010383606,
        "codebertscore_s_f1-17": 0.8969548940658569,
        "codebertscore_s_f3-17": 0.8934856653213501,
        "codebertscore_s_f1-12": 0.9083304405212402,
        "codebertscore_s_f3-12": 0.881837010383606,
        "codebertscore_s_f1-6": 0.7951563000679016,
        "codebertscore_s_f3-6": 0.8289244174957275,
        "codebertscore_s_f1-18": 0.7963888645172119,
        "codebertscore_s_f3-18": 0.8425597548484802,
        "codebertscore_s_f1-15": 0.8350072503089905,
        "codebertscore_s_f3-15": 0.879544734954834,
        "codebertscore_s_f1-13": 0.8551873564720154,
        "codebertscore_s_f3-13": 0.8930605053901672,
        "codebertscore_s_f1-9": 0.9361358880996704,
        "codebertscore_s_f3-9": 0.9492886066436768,
        "codebertscore_s_f1-4": 0.9433140158653259,
        "codebertscore_s_f3-4": 0.9574892520904541,
        "codebertscore_s_f1-14": 0.7794837355613708,
        "codebertscore_s_f3-14": 0.7961007356643677,
        "codebertscore_s_f1-5": 0.906757652759552,
        "codebertscore_s_f3-5": 0.8802083730697632,
        "codebertscore_s_f1-19": 0.8204053640365601,
        "codebertscore_s_f3-19": 0.8618787527084351,
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4"
    }
]